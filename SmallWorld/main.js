!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=20)}([function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(13);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&n(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(5).default,i=r(14);e.exports=function(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return i(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(t){return e.exports=r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(19);function i(){return"undefined"!=typeof Reflect&&Reflect.get?(e.exports=i=Reflect.get.bind(),e.exports.__esModule=!0,e.exports.default=e.exports):(e.exports=i=function(e,t,r){var i=n(e,t);if(i){var a=Object.getOwnPropertyDescriptor(i,t);return a.get?a.get.call(arguments.length<3?e:r):a.value}},e.exports.__esModule=!0,e.exports.default=e.exports),i.apply(this,arguments)}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(15),i=r(16),a=r(17),o=r(18);e.exports=function(e){return n(e)||i(e)||a(e)||o()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){r(11),r(12)},function(e,t,r){"use strict";r.r(t);var n=r(5),i=r.n(n);!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.m=e,r.c=t,r.p="",r(0)}([function(e,t,r){var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(1));var i=GameGlobal;GameGlobal.__isAdapterInjected||(GameGlobal.__isAdapterInjected=!0,function(){n.addEventListener=n.canvas.addEventListener=function(e,t){n.document.addEventListener(e,t)},n.removeEventListener=n.canvas.removeEventListener=function(e,t){n.document.removeEventListener(e,t)};var e=wx.getSystemInfoSync().platform;if("undefined"==typeof __devtoolssubcontext&&"devtools"===e){for(var t in n){var r=Object.getOwnPropertyDescriptor(i,t);r&&!0!==r.configurable||Object.defineProperty(window,t,{value:n[t]})}for(var a in n.document){var o=Object.getOwnPropertyDescriptor(i.document,a);o&&!0!==o.configurable||Object.defineProperty(i.document,a,{value:n.document[a]})}window.parent=window}else{for(var s in n)i[s]=n[s];i.window=n,window=i,window.top=window.parent=window}}())},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.cancelAnimationFrame=void 0,t.requestAnimationFrame=void 0,t.clearInterval=void 0,t.clearTimeout=void 0,t.setInterval=void 0,t.setTimeout=void 0,t.canvas=void 0,t.location=void 0,t.localStorage=void 0,t.HTMLElement=void 0,t.FileReader=void 0,t.Audio=void 0,t.Image=void 0,t.WebSocket=void 0,t.XMLHttpRequest=void 0,t.navigator=void 0,t.document=void 0,t.TouchEvent=void 0,t.HTMLAudioElement=void 0;var n=r(2);Object.keys(n).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return n[e]}})}));var i=r(3);Object.keys(i).forEach((function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})}));var a=g(r(9)),o=g(r(10)),s=g(r(17)),c=g(r(18)),l=g(r(19)),u=g(r(11)),h=g(r(12)),d=g(r(20)),p=g(r(4)),f=g(r(21)),m=g(r(22)),v=g(r(16));function g(e){return e&&e.__esModule?e:{default:e}}t.document=o.default,t.navigator=s.default,t.XMLHttpRequest=c.default,t.WebSocket=l.default,t.Image=u.default,t.Audio=h.default,t.FileReader=d.default,t.HTMLElement=p.default,t.localStorage=f.default,t.location=m.default,t.TouchEvent=v.default,t.HTMLAudioElement=h.HTMLAudioElement;var y=GameGlobal._screencanvas||new a.default;t.canvas=y,t.setTimeout=setTimeout,t.setInterval=setInterval,t.clearTimeout=clearTimeout,t.clearInterval=clearInterval,t.requestAnimationFrame=requestAnimationFrame,t.cancelAnimationFrame=cancelAnimationFrame},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=wx.getSystemInfoSync(),n=r.screenWidth,i=r.screenHeight,a=r.devicePixelRatio,o=t.innerWidth=n,s=t.innerHeight=i;t.devicePixelRatio=a;t.screen={availWidth:o,availHeight:s},t.performance={now:function(){return Date.now()/1e3}},t.ontouchstart=null,t.ontouchmove=null,t.ontouchend=null},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.HTMLCanvasElement=t.HTMLImageElement=t.HTMLVideoElement=void 0;var n,a=r(4),o=(n=a)&&n.__esModule?n:{default:n};var s;t.HTMLImageElement=(o.default,wx.createImage().constructor),t.HTMLCanvasElement=(o.default,s=GameGlobal._screencanvas||wx.createCanvas(),GameGlobal._screencanvas=s,s.constructor),t.HTMLVideoElement=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"video"))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(o.default)},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(5),s=(n=o)&&n.__esModule?n:{default:n},c=r(8),l=r(2);function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}var d=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";u(this,t);var r=h(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.className="",r.childern=[],r.style={width:l.innerWidth+"px",height:l.innerHeight+"px"},r.insertBefore=c.noop,r.innerHTML="",r.tagName=e.toUpperCase(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"setAttribute",value:function(e,t){this[e]=t}},{key:"getAttribute",value:function(e){return this[e]}},{key:"getBoundingClientRect",value:function(){return{top:0,left:0,width:l.innerWidth,height:l.innerHeight}}},{key:"focus",value:function(){}},{key:"clientWidth",get:function(){var e=parseInt(this.style.fontSize,10)*this.innerHTML.length;return Number.isNaN(e)?0:e}},{key:"clientHeight",get:function(){var e=parseInt(this.style.fontSize,10);return Number.isNaN(e)?0:e}}]),t}(s.default);t.default=d},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=r(6);var o=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.className="",e.children=[],e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((n=a)&&n.__esModule?n:{default:n}).default);t.default=o},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(7);var s=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var e=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return e.childNodes=[],e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"appendChild",value:function(e){if(!(e instanceof t))throw new TypeError("Failed to executed 'appendChild' on 'Node': parameter 1 is not of type 'Node'.");this.childNodes.push(e)}},{key:"cloneNode",value:function(){var e=Object.create(this);return Object.assign(e,this),e}},{key:"removeChild",value:function(e){var t=this.childNodes.findIndex((function(t){return t===e}));return t>-1?this.childNodes.splice(t,1):null}}]),t}(((n=o)&&n.__esModule?n:{default:n}).default);t.default=s},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var n=new WeakMap,i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n.set(this,{})}return r(e,[{key:"addEventListener",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n.get(this);i||(i={},n.set(this,i)),i[e]||(i[e]=[]),i[e].push(t),r.capture&&console.warn("EventTarget.addEventListener: options.capture is not implemented."),r.once&&console.warn("EventTarget.addEventListener: options.once is not implemented."),r.passive&&console.warn("EventTarget.addEventListener: options.passive is not implemented.")}},{key:"removeEventListener",value:function(e,t){var r=n.get(this)[e];if(r&&r.length>0)for(var i=r.length;i--;i>0)if(r[i]===t){r.splice(i,1);break}}},{key:"dispatchEvent",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.get(this)[e.type];if(t)for(var r=0;r<t.length;r++)t[r](e)}}]),e}();t.default=i},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.noop=function(){}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=wx.createCanvas();e.type="canvas",e.__proto__.__proto__=new n.default("canvas");e.getContext;return e.getBoundingClientRect=function(){return{top:0,left:0,width:window.innerWidth,height:window.innerHeight}},e};r(3);var n=i(r(4));i(r(10));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(1)),i=c(r(4)),a=c(r(11)),o=c(r(12)),s=c(r(9));function c(e){return e&&e.__esModule?e:{default:e}}r(15);var l={},u={readyState:"complete",visibilityState:"visible",documentElement:n,hidden:!1,style:{},location:n.location,ontouchstart:null,ontouchmove:null,ontouchend:null,head:new i.default("head"),body:new i.default("body"),createElement:function(e){return"canvas"===e?new s.default:"audio"===e?new o.default:"img"===e?new a.default:new i.default(e)},createElementNS:function(e,t){return this.createElement(t)},getElementById:function(e){return e===n.canvas.id?n.canvas:null},getElementsByTagName:function(e){return"head"===e?[u.head]:"body"===e?[u.body]:"canvas"===e?[n.canvas]:[]},querySelector:function(e){return"head"===e?u.head:"body"===e?u.body:"canvas"===e||e==="#"+n.canvas.id?n.canvas:null},querySelectorAll:function(e){return"head"===e?[u.head]:"body"===e?[u.body]:"canvas"===e?[n.canvas]:[]},addEventListener:function(e,t){l[e]||(l[e]=[]),l[e].push(t)},removeEventListener:function(e,t){var r=l[e];if(r&&r.length>0)for(var n=r.length;n--;n>0)if(r[n]===t){r.splice(n,1);break}},dispatchEvent:function(e){var t=l[e.type];if(t)for(var r=0;r<t.length;r++)t[r](e)}};t.default=u},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return wx.createImage()}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(13),s=(n=o)&&n.__esModule?n:{default:n};var c=new WeakMap,l=new WeakMap,u=(new WeakMap,new WeakMap,function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));r.HAVE_NOTHING=0,r.HAVE_METADATA=1,r.HAVE_CURRENT_DATA=2,r.HAVE_FUTURE_DATA=3,r.HAVE_ENOUGH_DATA=4,r.readyState=0,l.set(r,"");var n=wx.createInnerAudioContext();return c.set(r,n),n.onCanplay((function(){r.dispatchEvent({type:"load"}),r.dispatchEvent({type:"loadend"}),r.dispatchEvent({type:"canplay"}),r.dispatchEvent({type:"canplaythrough"}),r.dispatchEvent({type:"loadedmetadata"}),r.readyState=2})),n.onPlay((function(){r.dispatchEvent({type:"play"})})),n.onPause((function(){r.dispatchEvent({type:"pause"})})),n.onEnded((function(){r.dispatchEvent({type:"ended"}),r.readyState=4})),n.onError((function(){r.dispatchEvent({type:"error"})})),e&&(c.get(r).src=e),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"load",value:function(){console.warn("HTMLAudioElement.load() is not implemented.")}},{key:"play",value:function(){c.get(this).play()}},{key:"pause",value:function(){c.get(this).pause()}},{key:"canPlayType",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return"string"!=typeof e?"":e.indexOf("audio/mpeg")>-1||e.indexOf("audio/mp4")?"probably":""}},{key:"cloneNode",value:function(){var e=new t;return e.loop=c.get(this).loop,e.autoplay=c.get(this).loop,e.src=this.src,e}},{key:"currentTime",get:function(){return c.get(this).currentTime},set:function(e){c.get(this).seek(e)}},{key:"src",get:function(){return l.get(this)},set:function(e){l.set(this,e),c.get(this).src=e}},{key:"loop",get:function(){return c.get(this).loop},set:function(e){c.get(this).loop=e}},{key:"autoplay",get:function(){return c.get(this).autoplay},set:function(e){c.get(this).autoplay=e}},{key:"paused",get:function(){return c.get(this).paused}}]),t}(s.default));t.default=u,t.HTMLAudioElement=s.default},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=r(14);var o=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,"audio"))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(((n=a)&&n.__esModule?n:{default:n}).default);t.default=o},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,a=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(4);var s=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==i()(t)&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+i()(t));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"addTextTrack",value:function(){}},{key:"captureStream",value:function(){}},{key:"fastSeek",value:function(){}},{key:"load",value:function(){}},{key:"pause",value:function(){}},{key:"play",value:function(){}}]),t}(((n=o)&&n.__esModule?n:{default:n}).default);t.default=s},function(e,t,r){r(16)},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(1)),a=r(10),o=(n=a)&&n.__esModule?n:{default:n},s=r(8);var c=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.target=i.canvas,this.currentTarget=i.canvas,this.touches=[],this.targetTouches=[],this.changedTouches=[],this.preventDefault=s.noop,this.stopPropagation=s.noop,this.type=t};function l(e){return function(t){var r=new c(e);r.touches=t.touches,r.targetTouches=Array.prototype.slice.call(t.touches),r.changedTouches=t.changedTouches,r.timeStamp=t.timeStamp,o.default.dispatchEvent(r)}}wx.onTouchStart(l("touchstart")),wx.onTouchMove(l("touchmove")),wx.onTouchEnd(l("touchend")),wx.onTouchCancel(l("touchcancel")),t.default=c},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0});var n=r(8),i={platform:wx.getSystemInfoSync().platform,language:"zh-cn",appVersion:"5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1",userAgent:"Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Mobile/14E8301 MicroMessenger/6.6.0 MiniGame NetType/WIFI Language/zh_CN",onLine:!0,geolocation:{getCurrentPosition:n.noop,watchPosition:n.noop,clearWatch:n.noop}};t.default=i},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var n=new WeakMap,i=new WeakMap,a=new WeakMap,o=new WeakMap,s=new WeakMap;function c(e){if("function"==typeof this["on"+e]){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this["on"+e].apply(this,r)}}function l(e){this.readyState=e,c.call(this,"readystatechange")}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.onabort=null,this.onerror=null,this.onload=null,this.onloadstart=null,this.onprogress=null,this.ontimeout=null,this.onloadend=null,this.onreadystatechange=null,this.readyState=0,this.response=null,this.responseText=null,this.responseType="",this.responseXML=null,this.status=0,this.statusText="",this.upload={},this.withCredentials=!1,a.set(this,{"content-type":"application/x-www-form-urlencoded"}),o.set(this,{})}return r(e,[{key:"addEventListener",value:function(e,t){if("function"==typeof t){var r={target:this},n=this;this["on"+e]=function(){t.call(n,r)}}}},{key:"abort",value:function(){var e=s.get(this);e&&e.abort()}},{key:"getAllResponseHeaders",value:function(){var e=o.get(this);return Object.keys(e).map((function(t){return t+": "+e[t]})).join("\n")}},{key:"getResponseHeader",value:function(e){return o.get(this)[e]}},{key:"open",value:function(t,r){i.set(this,t),n.set(this,r),l.call(this,e.OPENED)}},{key:"overrideMimeType",value:function(){}},{key:"send",value:function(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(this.readyState!==e.OPENED)throw new Error("Failed to execute 'send' on 'XMLHttpRequest': The object's state must be OPENED.");wx.request({data:r,url:n.get(this),method:i.get(this),header:a.get(this),responseType:this.responseType,success:function(r){var n=r.data,i=r.statusCode,a=r.header;if("string"!=typeof n&&!(n instanceof ArrayBuffer))try{n=JSON.stringify(n)}catch(e){n=n}if(t.status=i,o.set(t,a),c.call(t,"loadstart"),l.call(t,e.HEADERS_RECEIVED),l.call(t,e.LOADING),t.response=n,n instanceof ArrayBuffer){t.responseText="";for(var s=new Uint8Array(n),u=s.byteLength,h=0;h<u;h++)t.responseText+=String.fromCharCode(s[h])}else t.responseText=n;l.call(t,e.DONE),c.call(t,"load"),c.call(t,"loadend")},fail:function(e){-1!==e.errMsg.indexOf("abort")?c.call(t,"abort"):c.call(t,"error",e.errMsg),c.call(t,"loadend")}})}},{key:"setRequestHeader",value:function(e,t){var r=a.get(this);r[e]=t,a.set(this,r)}}]),e}();u.UNSEND=0,u.OPENED=1,u.HEADERS_RECEIVED=2,u.LOADING=3,u.DONE=4,t.default=u},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=new WeakMap,a=function(){function e(t){var r=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];if(n(this,e),this.binaryType="",this.bufferedAmount=0,this.extensions="",this.onclose=null,this.onerror=null,this.onmessage=null,this.onopen=null,this.protocol="",this.readyState=3,"string"!=typeof t||!/(^ws:\/\/)|(^wss:\/\/)/.test(t))throw new TypeError("Failed to construct 'WebSocket': The URL '"+t+"' is invalid");this.url=t,this.readyState=e.CONNECTING;var o=wx.connectSocket({url:t,protocols:Array.isArray(a)?a:[a]});return i.set(this,o),o.onClose((function(t){r.readyState=e.CLOSED,"function"==typeof r.onclose&&r.onclose(t)})),o.onMessage((function(e){"function"==typeof r.onmessage&&r.onmessage(e)})),o.onOpen((function(){r.readyState=e.OPEN,"function"==typeof r.onopen&&r.onopen()})),o.onError((function(e){"function"==typeof r.onerror&&r.onerror(new Error(e.errMsg))})),this}return r(e,[{key:"close",value:function(t,r){this.readyState=e.CLOSING,i.get(this).close({code:t,reason:r})}},{key:"send",value:function(e){if("string"!=typeof e&&!(e instanceof ArrayBuffer))throw new TypeError("Failed to send message: The data "+e+" is invalid");i.get(this).send({data:e})}}]),e}();a.CONNECTING=0,a.OPEN=1,a.CLOSING=2,a.CLOSED=3,t.default=a},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var r={get length(){return wx.getStorageInfoSync().keys.length},key:function(e){return wx.getStorageInfoSync().keys[e]},getItem:function(e){return wx.getStorageSync(e)},setItem:function(e,t){return wx.setStorageSync(e,t)},removeItem:function(e){wx.removeStorageSync(e)},clear:function(){wx.clearStorageSync()}};t.default=r},function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.default={href:"game.js",reload:function(){}}}])},function(e,t){var r=window.Symbol,n=0;r||((r=function(e){return"__".concat(e,"_").concat(Math.floor(1e9*Math.random()),"_").concat(++n,"__")}).iterator=r("Symbol.iterator")),window.Symbol=r},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t,n)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(9);e.exports=function(e){if(Array.isArray(e))return n(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(9);e.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(2);e.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";r.r(t);r(10);var n=r(0),i=r.n(n),a=r(1),o=r.n(a),s=r(5),c=r.n(s),l={};void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1;r<arguments.length;r++){var n=arguments[r];if(null!=n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t});function u(){}Object.assign(u.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var r=this._listeners;void 0===r[e]&&(r[e]=[]),-1===r[e].indexOf(t)&&r[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var r=this._listeners;return void 0!==r[e]&&-1!==r[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var r=this._listeners[e];if(void 0!==r){var n=r.indexOf(t);-1!==n&&r.splice(n,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var r=t.slice(0),n=0,i=r.length;n<i;n++)r[n].call(this,e)}}}});for(var h=[],d=0;d<256;d++)h[d]=(d<16?"0":"")+d.toString(16);var p={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,r=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(h[255&e]+h[e>>8&255]+h[e>>16&255]+h[e>>24&255]+"-"+h[255&t]+h[t>>8&255]+"-"+h[t>>16&15|64]+h[t>>24&255]+"-"+h[63&r|128]+h[r>>8&255]+"-"+h[r>>16&255]+h[r>>24&255]+h[255&n]+h[n>>8&255]+h[n>>16&255]+h[n>>24&255]).toUpperCase()},clamp:function(e,t,r){return Math.max(t,Math.min(r,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,r,n,i){return n+(e-t)*(i-n)/(r-t)},lerp:function(e,t,r){return(1-r)*e+r*t},smoothstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*(3-2*e)},smootherstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*p.DEG2RAD},radToDeg:function(e){return e*p.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};function f(e,t){this.x=e||0,this.y=t||0}function m(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._w=void 0!==n?n:1}Object.defineProperties(f.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(f.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,r=this.y,n=e.elements;return this.x=n[0]*t+n[3]*r+n[6],this.y=n[1]*t+n[4]*r+n[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},cross:function(e){return this.x*e.y-this.y*e.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y;return t*t+r*r},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=this.x-e.x,a=this.y-e.y;return this.x=i*r-a*n+e.x,this.y=i*n+a*r+e.y,this}}),Object.assign(m,{slerp:function(e,t,r,n){return r.copy(e).slerp(t,n)},slerpFlat:function(e,t,r,n,i,a,o){var s=r[n+0],c=r[n+1],l=r[n+2],u=r[n+3],h=i[a+0],d=i[a+1],p=i[a+2],f=i[a+3];if(u!==f||s!==h||c!==d||l!==p){var m=1-o,v=s*h+c*d+l*p+u*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,o=Math.sin(o*b)/x}var w=o*g;if(s=s*m+h*w,c=c*m+d*w,l=l*m+p*w,u=u*m+f*w,m===1-o){var _=1/Math.sqrt(s*s+c*c+l*l+u*u);s*=_,c*=_,l*=_,u*=_}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=u}}),Object.defineProperties(m.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this._onChangeCallback()}}}),Object.assign(m.prototype,{isQuaternion:!0,set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._w=n,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var r=e._x,n=e._y,i=e._z,a=e.order,o=Math.cos,s=Math.sin,c=o(r/2),l=o(n/2),u=o(i/2),h=s(r/2),d=s(n/2),p=s(i/2);return"XYZ"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):"YXZ"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):"ZXY"===a?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u-h*d*p):"ZYX"===a?(this._x=h*l*u-c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u+h*d*p):"YZX"===a?(this._x=h*l*u+c*d*p,this._y=c*d*u+h*l*p,this._z=c*l*p-h*d*u,this._w=c*l*u-h*d*p):"XZY"===a&&(this._x=h*l*u-c*d*p,this._y=c*d*u-h*l*p,this._z=c*l*p+h*d*u,this._w=c*l*u+h*d*p),!1!==t&&this._onChangeCallback(),this},setFromAxisAngle:function(e,t){var r=t/2,n=Math.sin(r);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(r),this._onChangeCallback(),this},setFromRotationMatrix:function(e){var t,r=e.elements,n=r[0],i=r[4],a=r[8],o=r[1],s=r[5],c=r[9],l=r[2],u=r[6],h=r[10],d=n+s+h;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(u-c)*t,this._y=(a-l)*t,this._z=(o-i)*t):n>s&&n>h?(t=2*Math.sqrt(1+n-s-h),this._w=(u-c)/t,this._x=.25*t,this._y=(i+o)/t,this._z=(a+l)/t):s>h?(t=2*Math.sqrt(1+s-n-h),this._w=(a-l)/t,this._x=(i+o)/t,this._y=.25*t,this._z=(c+u)/t):(t=2*Math.sqrt(1+h-n-s),this._w=(o-i)/t,this._x=(a+l)/t,this._y=(c+u)/t,this._z=.25*t),this._onChangeCallback(),this},setFromUnitVectors:function(e,t){var r=e.dot(t)+1;return r<1e-6?(r=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=r):(this._x=0,this._y=-e.z,this._z=e.y,this._w=r)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=r),this.normalize()},angleTo:function(e){return 2*Math.acos(Math.abs(p.clamp(this.dot(e),-1,1)))},rotateTowards:function(e,t){var r=this.angleTo(e);if(0===r)return this;var n=Math.min(1,t/r);return this.slerp(e,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var r=e._x,n=e._y,i=e._z,a=e._w,o=t._x,s=t._y,c=t._z,l=t._w;return this._x=r*l+a*o+n*c-i*s,this._y=n*l+a*s+i*o-r*c,this._z=i*l+a*c+r*s-n*o,this._w=a*l-r*o-n*s-i*c,this._onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var r=this._x,n=this._y,i=this._z,a=this._w,o=a*e._w+r*e._x+n*e._y+i*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=r,this._y=n,this._z=i,this;var s=1-o*o;if(s<=Number.EPSILON){var c=1-t;return this._w=c*a+t*this._w,this._x=c*r+t*this._x,this._y=c*n+t*this._y,this._z=c*i+t*this._z,this.normalize(),this._onChangeCallback(),this}var l=Math.sqrt(s),u=Math.atan2(l,o),h=Math.sin((1-t)*u)/l,d=Math.sin(t*u)/l;return this._w=a*h+this._w*d,this._x=r*h+this._x*d,this._y=n*h+this._y*d,this._z=i*h+this._z*d,this._onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}});var v=new y,g=new m;function y(e,t,r){this.x=e||0,this.y=t||0,this.z=r||0}Object.assign(y.prototype,{isVector3:!0,set:function(e,t,r){return this.x=e,this.y=t,this.z=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(g.setFromEuler(e))},applyAxisAngle:function(e,t){return this.applyQuaternion(g.setFromAxisAngle(e,t))},applyMatrix3:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[3]*r+i[6]*n,this.y=i[1]*t+i[4]*r+i[7]*n,this.z=i[2]*t+i[5]*r+i[8]*n,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements,a=1/(i[3]*t+i[7]*r+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*r+i[8]*n+i[12])*a,this.y=(i[1]*t+i[5]*r+i[9]*n+i[13])*a,this.z=(i[2]*t+i[6]*r+i[10]*n+i[14])*a,this},applyQuaternion:function(e){var t=this.x,r=this.y,n=this.z,i=e.x,a=e.y,o=e.z,s=e.w,c=s*t+a*n-o*r,l=s*r+o*t-i*n,u=s*n+i*r-a*t,h=-i*t-a*r-o*n;return this.x=c*s+h*-i+l*-o-u*-a,this.y=l*s+h*-a+u*-i-c*-o,this.z=u*s+h*-o+c*-a-l*-i,this},project:function(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)},unproject:function(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)},transformDirection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n,this.y=i[1]*t+i[5]*r+i[9]*n,this.z=i[2]*t+i[6]*r+i[10]*n,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var r=e.x,n=e.y,i=e.z,a=t.x,o=t.y,s=t.z;return this.x=n*s-i*o,this.y=i*a-r*s,this.z=r*o-n*a,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(e){return v.copy(this).projectOnVector(e),this.sub(v)},reflect:function(e){return this.sub(v.copy(e).multiplyScalar(2*this.dot(e)))},angleTo:function(e){var t=Math.sqrt(this.lengthSq()*e.lengthSq());0===t&&console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");var r=this.dot(e)/t;return Math.acos(p.clamp(r,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y,n=this.z-e.z;return t*t+r*r+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)},setFromSphericalCoords:function(e,t,r){var n=Math.sin(t)*e;return this.x=n*Math.sin(r),this.y=Math.cos(t)*e,this.z=n*Math.cos(r),this},setFromCylindrical:function(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)},setFromCylindricalCoords:function(e,t,r){return this.x=e*Math.sin(t),this.y=r,this.z=e*Math.cos(t),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=r,this.z=n,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}});var x,b=new y;function w(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.assign(w.prototype,{isMatrix3:!0,set:function(e,t,r,n,i,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=n,l[2]=o,l[3]=t,l[4]=i,l[5]=s,l[6]=r,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(e){for(var t=0,r=e.count;t<r;t++)b.x=e.getX(t),b.y=e.getY(t),b.z=e.getZ(t),b.applyMatrix3(this),e.setXYZ(t,b.x,b.y,b.z);return e},multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,a=r[0],o=r[3],s=r[6],c=r[1],l=r[4],u=r[7],h=r[2],d=r[5],p=r[8],f=n[0],m=n[3],v=n[6],g=n[1],y=n[4],x=n[7],b=n[2],w=n[5],_=n[8];return i[0]=a*f+o*g+s*b,i[3]=a*m+o*y+s*w,i[6]=a*v+o*x+s*_,i[1]=c*f+l*g+u*b,i[4]=c*m+l*y+u*w,i[7]=c*v+l*x+u*_,i[2]=h*f+d*g+p*b,i[5]=h*m+d*y+p*w,i[8]=h*v+d*x+p*_,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-r*i*l+r*o*s+n*i*c-n*a*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var r=e.elements,n=this.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],u=r[6],h=r[7],d=r[8],p=d*c-l*h,f=l*u-d*s,m=h*s-c*u,v=i*p+a*f+o*m;if(0===v){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return n[0]=p*y,n[1]=(o*h-d*a)*y,n[2]=(l*a-o*c)*y,n[3]=f*y,n[4]=(d*i-o*u)*y,n[5]=(o*s-l*i)*y,n[6]=m*y,n[7]=(a*u-h*i)*y,n[8]=(c*i-a*s)*y,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,r,n,i,a,o){var s=Math.cos(i),c=Math.sin(i);this.set(r*s,r*c,-r*(s*a+c*o)+a+e,-n*c,n*s,-n*(-c*a+s*o)+o+t,0,0,1)},scale:function(e,t){var r=this.elements;return r[0]*=e,r[3]*=e,r[6]*=e,r[1]*=t,r[4]*=t,r[7]*=t,this},rotate:function(e){var t=Math.cos(e),r=Math.sin(e),n=this.elements,i=n[0],a=n[3],o=n[6],s=n[1],c=n[4],l=n[7];return n[0]=t*i+r*s,n[3]=t*a+r*c,n[6]=t*o+r*l,n[1]=-r*i+t*s,n[4]=-r*a+t*c,n[7]=-r*o+t*l,this},translate:function(e,t){var r=this.elements;return r[0]+=e*r[2],r[3]+=e*r[5],r[6]+=e*r[8],r[1]+=t*r[2],r[4]+=t*r[5],r[7]+=t*r[8],this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;n<9;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<9;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e}});var _={getDataURL:function(e){var t;if("undefined"==typeof HTMLCanvasElement)return e.src;if(e instanceof HTMLCanvasElement)t=e;else{void 0===x&&(x=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),x.width=e.width,x.height=e.height;var r=x.getContext("2d");e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0,e.width,e.height),t=x}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},M=0;function S(e,t,r,n,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:M++}),this.uuid=p.generateUUID(),this.name="",this.image=void 0!==e?e:S.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:S.DEFAULT_MAPPING,this.wrapS=void 0!==r?r:1001,this.wrapT=void 0!==n?n:1001,this.magFilter=void 0!==i?i:1006,this.minFilter=void 0!==a?a:1008,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:1023,this.type=void 0!==s?s:1009,this.offset=new f(0,0),this.repeat=new f(1,1),this.center=new f(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new w,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:3e3,this.version=0,this.onUpdate=null}function T(e,t,r,n){this.x=e||0,this.y=t||0,this.z=r||0,this.w=void 0!==n?n:1}function E(e,t,r){this.width=e,this.height=t,this.scissor=new T(0,0,e,t),this.scissorTest=!1,this.viewport=new T(0,0,e,t),r=r||{},this.texture=new S(void 0,void 0,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==r.generateMipmaps&&r.generateMipmaps,this.texture.minFilter=void 0!==r.minFilter?r.minFilter:1006,this.depthBuffer=void 0===r.depthBuffer||r.depthBuffer,this.stencilBuffer=void 0===r.stencilBuffer||r.stencilBuffer,this.depthTexture=void 0!==r.depthTexture?r.depthTexture:null}function A(e,t,r){E.call(this,e,t,r),this.samples=4}S.DEFAULT_IMAGE=void 0,S.DEFAULT_MAPPING=300,S.prototype=Object.assign(Object.create(u.prototype),{constructor:S,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var r={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var n=this.image;if(void 0===n.uuid&&(n.uuid=p.generateUUID()),!t&&void 0===e.images[n.uuid]){var i;if(Array.isArray(n)){i=[];for(var a=0,o=n.length;a<o;a++)i.push(_.getDataURL(n[a]))}else i=_.getDataURL(n);e.images[n.uuid]={uuid:n.uuid,url:i}}r.image=n.uuid}return t||(e.textures[this.uuid]=r),r},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case 1e3:e.x=e.x-Math.floor(e.x);break;case 1001:e.x=e.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case 1e3:e.y=e.y-Math.floor(e.y);break;case 1001:e.y=e.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}}),Object.defineProperty(S.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.defineProperties(T.prototype,{width:{get:function(){return this.z},set:function(e){this.z=e}},height:{get:function(){return this.w},set:function(e){this.w=e}}}),Object.assign(T.prototype,{isVector4:!0,set:function(e,t,r,n){return this.x=e,this.y=t,this.z=r,this.w=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=this.w,a=e.elements;return this.x=a[0]*t+a[4]*r+a[8]*n+a[12]*i,this.y=a[1]*t+a[5]*r+a[9]*n+a[13]*i,this.z=a[2]*t+a[6]*r+a[10]*n+a[14]*i,this.w=a[3]*t+a[7]*r+a[11]*n+a[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,r,n,i,a=e.elements,o=a[0],s=a[4],c=a[8],l=a[1],u=a[5],h=a[9],d=a[2],p=a[6],f=a[10];if(Math.abs(s-l)<.01&&Math.abs(c-d)<.01&&Math.abs(h-p)<.01){if(Math.abs(s+l)<.1&&Math.abs(c+d)<.1&&Math.abs(h+p)<.1&&Math.abs(o+u+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(o+1)/2,v=(u+1)/2,g=(f+1)/2,y=(s+l)/4,x=(c+d)/4,b=(h+p)/4;return m>v&&m>g?m<.01?(r=0,n=.707106781,i=.707106781):(n=y/(r=Math.sqrt(m)),i=x/r):v>g?v<.01?(r=.707106781,n=0,i=.707106781):(r=y/(n=Math.sqrt(v)),i=b/n):g<.01?(r=.707106781,n=.707106781,i=0):(r=x/(i=Math.sqrt(g)),n=b/i),this.set(r,n,i,t),this}var w=Math.sqrt((p-h)*(p-h)+(c-d)*(c-d)+(l-s)*(l-s));return Math.abs(w)<.001&&(w=1),this.x=(p-h)/w,this.y=(c-d)/w,this.z=(l-s)/w,this.w=Math.acos((o+u+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),E.prototype=Object.assign(Object.create(u.prototype),{constructor:E,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),A.prototype=Object.assign(Object.create(E.prototype),{constructor:A,isWebGLMultisampleRenderTarget:!0,copy:function(e){return E.prototype.copy.call(this,e),this.samples=e.samples,this}});var L=new y,R=new N,P=new y(0,0,0),C=new y(1,1,1),O=new y,I=new y,D=new y;function N(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(N.prototype,{isMatrix4:!0,set:function(e,t,r,n,i,a,o,s,c,l,u,h,d,p,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=r,v[12]=n,v[1]=i,v[5]=a,v[9]=o,v[13]=s,v[2]=c,v[6]=l,v[10]=u,v[14]=h,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new N).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],t[9]=r[9],t[10]=r[10],t[11]=r[11],t[12]=r[12],t[13]=r[13],t[14]=r[14],t[15]=r[15],this},copyPosition:function(e){var t=this.elements,r=e.elements;return t[12]=r[12],t[13]=r[13],t[14]=r[14],this},extractBasis:function(e,t,r){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,r){return this.set(e.x,t.x,r.x,0,e.y,t.y,r.y,0,e.z,t.z,r.z,0,0,0,0,1),this},extractRotation:function(e){var t=this.elements,r=e.elements,n=1/L.setFromMatrixColumn(e,0).length(),i=1/L.setFromMatrixColumn(e,1).length(),a=1/L.setFromMatrixColumn(e,2).length();return t[0]=r[0]*n,t[1]=r[1]*n,t[2]=r[2]*n,t[3]=0,t[4]=r[4]*i,t[5]=r[5]*i,t[6]=r[6]*i,t[7]=0,t[8]=r[8]*a,t[9]=r[9]*a,t[10]=r[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,r=e.x,n=e.y,i=e.z,a=Math.cos(r),o=Math.sin(r),s=Math.cos(n),c=Math.sin(n),l=Math.cos(i),u=Math.sin(i);if("XYZ"===e.order){var h=a*l,d=a*u,p=o*l,f=o*u;t[0]=s*l,t[4]=-s*u,t[8]=c,t[1]=d+p*c,t[5]=h-f*c,t[9]=-o*s,t[2]=f-h*c,t[6]=p+d*c,t[10]=a*s}else if("YXZ"===e.order){var m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m+y*o,t[4]=g*o-v,t[8]=a*c,t[1]=a*u,t[5]=a*l,t[9]=-o,t[2]=v*o-g,t[6]=y+m*o,t[10]=a*s}else if("ZXY"===e.order){m=s*l,v=s*u,g=c*l,y=c*u;t[0]=m-y*o,t[4]=-a*u,t[8]=g+v*o,t[1]=v+g*o,t[5]=a*l,t[9]=y-m*o,t[2]=-a*c,t[6]=o,t[10]=a*s}else if("ZYX"===e.order){h=a*l,d=a*u,p=o*l,f=o*u;t[0]=s*l,t[4]=p*c-d,t[8]=h*c+f,t[1]=s*u,t[5]=f*c+h,t[9]=d*c-p,t[2]=-c,t[6]=o*s,t[10]=a*s}else if("YZX"===e.order){var x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=_-x*u,t[8]=w*u+b,t[1]=u,t[5]=a*l,t[9]=-o*l,t[2]=-c*l,t[6]=b*u+w,t[10]=x-_*u}else if("XZY"===e.order){x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=-u,t[8]=c*l,t[1]=x*u+_,t[5]=a*l,t[9]=b*u-w,t[2]=w*u-b,t[6]=o*l,t[10]=_*u+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){return this.compose(P,e,C)},lookAt:function(e,t,r){var n=this.elements;return D.subVectors(e,t),0===D.lengthSq()&&(D.z=1),D.normalize(),O.crossVectors(r,D),0===O.lengthSq()&&(1===Math.abs(r.z)?D.x+=1e-4:D.z+=1e-4,D.normalize(),O.crossVectors(r,D)),O.normalize(),I.crossVectors(D,O),n[0]=O.x,n[4]=I.x,n[8]=D.x,n[1]=O.y,n[5]=I.y,n[9]=D.y,n[2]=O.z,n[6]=I.z,n[10]=D.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,a=r[0],o=r[4],s=r[8],c=r[12],l=r[1],u=r[5],h=r[9],d=r[13],p=r[2],f=r[6],m=r[10],v=r[14],g=r[3],y=r[7],x=r[11],b=r[15],w=n[0],_=n[4],M=n[8],S=n[12],T=n[1],E=n[5],A=n[9],L=n[13],R=n[2],P=n[6],C=n[10],O=n[14],I=n[3],D=n[7],N=n[11],B=n[15];return i[0]=a*w+o*T+s*R+c*I,i[4]=a*_+o*E+s*P+c*D,i[8]=a*M+o*A+s*C+c*N,i[12]=a*S+o*L+s*O+c*B,i[1]=l*w+u*T+h*R+d*I,i[5]=l*_+u*E+h*P+d*D,i[9]=l*M+u*A+h*C+d*N,i[13]=l*S+u*L+h*O+d*B,i[2]=p*w+f*T+m*R+v*I,i[6]=p*_+f*E+m*P+v*D,i[10]=p*M+f*A+m*C+v*N,i[14]=p*S+f*L+m*O+v*B,i[3]=g*w+y*T+x*R+b*I,i[7]=g*_+y*E+x*P+b*D,i[11]=g*M+y*A+x*C+b*N,i[15]=g*S+y*L+x*O+b*B,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(e){for(var t=0,r=e.count;t<r;t++)L.x=e.getX(t),L.y=e.getY(t),L.z=e.getZ(t),L.applyMatrix4(this),e.setXYZ(t,L.x,L.y,L.z);return e},determinant:function(){var e=this.elements,t=e[0],r=e[4],n=e[8],i=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],u=e[6],h=e[10],d=e[14];return e[3]*(+i*s*u-n*c*u-i*o*h+r*c*h+n*o*d-r*s*d)+e[7]*(+t*s*d-t*c*h+i*a*h-n*a*d+n*c*l-i*s*l)+e[11]*(+t*c*u-t*o*d-i*a*u+r*a*d+i*o*l-r*c*l)+e[15]*(-n*o*l-t*s*u+t*o*h+n*a*u-r*a*h+r*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e,t,r){var n=this.elements;return e.isVector3?(n[12]=e.x,n[13]=e.y,n[14]=e.z):(n[12]=e,n[13]=t,n[14]=r),this},getInverse:function(e,t){var r=this.elements,n=e.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],u=n[6],h=n[7],d=n[8],p=n[9],f=n[10],m=n[11],v=n[12],g=n[13],y=n[14],x=n[15],b=p*y*h-g*f*h+g*u*m-l*y*m-p*u*x+l*f*x,w=v*f*h-d*y*h-v*u*m+c*y*m+d*u*x-c*f*x,_=d*g*h-v*p*h+v*l*m-c*g*m-d*l*x+c*p*x,M=v*p*u-d*g*u-v*l*f+c*g*f+d*l*y-c*p*y,S=i*b+a*w+o*_+s*M;if(0===S){var T="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(T);return console.warn(T),this.identity()}var E=1/S;return r[0]=b*E,r[1]=(g*f*s-p*y*s-g*o*m+a*y*m+p*o*x-a*f*x)*E,r[2]=(l*y*s-g*u*s+g*o*h-a*y*h-l*o*x+a*u*x)*E,r[3]=(p*u*s-l*f*s-p*o*h+a*f*h+l*o*m-a*u*m)*E,r[4]=w*E,r[5]=(d*y*s-v*f*s+v*o*m-i*y*m-d*o*x+i*f*x)*E,r[6]=(v*u*s-c*y*s-v*o*h+i*y*h+c*o*x-i*u*x)*E,r[7]=(c*f*s-d*u*s+d*o*h-i*f*h-c*o*m+i*u*m)*E,r[8]=_*E,r[9]=(v*p*s-d*g*s-v*a*m+i*g*m+d*a*x-i*p*x)*E,r[10]=(c*g*s-v*l*s+v*a*h-i*g*h-c*a*x+i*l*x)*E,r[11]=(d*l*s-c*p*s-d*a*h+i*p*h+c*a*m-i*l*m)*E,r[12]=M*E,r[13]=(d*g*o-v*p*o+v*a*f-i*g*f-d*a*y+i*p*y)*E,r[14]=(v*l*o-c*g*o-v*a*u+i*g*u+c*a*y-i*l*y)*E,r[15]=(c*p*o-d*l*o+d*a*u-i*p*u-c*a*f+i*l*f)*E,this},scale:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z;return t[0]*=r,t[4]*=n,t[8]*=i,t[1]*=r,t[5]*=n,t[9]*=i,t[2]*=r,t[6]*=n,t[10]*=i,t[3]*=r,t[7]*=n,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))},makeTranslation:function(e,t,r){return this.set(1,0,0,e,0,1,0,t,0,0,1,r,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,t,-r,0,0,r,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,0,r,0,0,1,0,0,-r,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,-r,0,0,r,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=1-r,a=e.x,o=e.y,s=e.z,c=i*a,l=i*o;return this.set(c*a+r,c*o-n*s,c*s+n*o,0,c*o+n*s,l*o+r,l*s-n*a,0,c*s-n*o,l*s+n*a,i*s*s+r,0,0,0,0,1),this},makeScale:function(e,t,r){return this.set(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1),this},makeShear:function(e,t,r){return this.set(1,t,r,0,e,1,r,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,r){var n=this.elements,i=t._x,a=t._y,o=t._z,s=t._w,c=i+i,l=a+a,u=o+o,h=i*c,d=i*l,p=i*u,f=a*l,m=a*u,v=o*u,g=s*c,y=s*l,x=s*u,b=r.x,w=r.y,_=r.z;return n[0]=(1-(f+v))*b,n[1]=(d+x)*b,n[2]=(p-y)*b,n[3]=0,n[4]=(d-x)*w,n[5]=(1-(h+v))*w,n[6]=(m+g)*w,n[7]=0,n[8]=(p+y)*_,n[9]=(m-g)*_,n[10]=(1-(h+f))*_,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1,this},decompose:function(e,t,r){var n=this.elements,i=L.set(n[0],n[1],n[2]).length(),a=L.set(n[4],n[5],n[6]).length(),o=L.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),e.x=n[12],e.y=n[13],e.z=n[14],R.copy(this);var s=1/i,c=1/a,l=1/o;return R.elements[0]*=s,R.elements[1]*=s,R.elements[2]*=s,R.elements[4]*=c,R.elements[5]*=c,R.elements[6]*=c,R.elements[8]*=l,R.elements[9]*=l,R.elements[10]*=l,t.setFromRotationMatrix(R),r.x=i,r.y=a,r.z=o,this},makePerspective:function(e,t,r,n,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*i/(t-e),c=2*i/(r-n),l=(t+e)/(t-e),u=(r+n)/(r-n),h=-(a+i)/(a-i),d=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=u,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(e,t,r,n,i,a){var o=this.elements,s=1/(t-e),c=1/(r-n),l=1/(a-i),u=(t+e)*s,h=(r+n)*c,d=(a+i)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-u,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;n<16;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<16;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e[t+9]=r[9],e[t+10]=r[10],e[t+11]=r[11],e[t+12]=r[12],e[t+13]=r[13],e[t+14]=r[14],e[t+15]=r[15],e}});var B=new N,z=new m;function U(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._order=n||U.DefaultOrder}function F(){this.mask=1}U.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],U.DefaultOrder="XYZ",Object.defineProperties(U.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this._onChangeCallback()}}}),Object.assign(U.prototype,{isEuler:!0,set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._order=n||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this},setFromRotationMatrix:function(e,t,r){var n=p.clamp,i=e.elements,a=i[0],o=i[4],s=i[8],c=i[1],l=i[5],u=i[9],h=i[2],d=i[6],f=i[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(n(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-u,f),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(d,l),this._z=0)):"YXZ"===t?(this._x=Math.asin(-n(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(s,f),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-h,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(n(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,f),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===t?(this._y=Math.asin(-n(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):"YZX"===t?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-h,a)):(this._x=0,this._y=Math.atan2(s,f))):"XZY"===t?(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-u,f),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==r&&this._onChangeCallback(),this},setFromQuaternion:function(e,t,r){return B.makeRotationFromQuaternion(e),this.setFromRotationMatrix(B,t,r)},setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(e){return z.setFromEuler(this),this.setFromQuaternion(z,e)},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new y(this._x,this._y,this._z)},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(F.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},enableAll:function(){this.mask=-1},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},disableAll:function(){this.mask=0},test:function(e){return 0!=(this.mask&e.mask)}});var G=0,k=new y,H=new m,j=new N,V=new y,W=new y,q=new y,X=new m,Y=new y(1,0,0),Z=new y(0,1,0),J=new y(0,0,1),K={type:"added"},Q={type:"removed"};function $(){Object.defineProperty(this,"id",{value:G++}),this.uuid=p.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=$.DefaultUp.clone();var e=new y,t=new U,r=new m,n=new y(1,1,1);t._onChange((function(){r.setFromEuler(t,!1)})),r._onChange((function(){t.setFromQuaternion(r,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:r},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new N},normalMatrix:{value:new w}}),this.matrix=new N,this.matrixWorld=new N,this.matrixAutoUpdate=$.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new F,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function ee(){$.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}$.DefaultUp=new y(0,1,0),$.DefaultMatrixAutoUpdate=!0,$.prototype=Object.assign(Object.create(u.prototype),{constructor:$,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){return H.setFromAxisAngle(e,t),this.quaternion.multiply(H),this},rotateOnWorldAxis:function(e,t){return H.setFromAxisAngle(e,t),this.quaternion.premultiply(H),this},rotateX:function(e){return this.rotateOnAxis(Y,e)},rotateY:function(e){return this.rotateOnAxis(Z,e)},rotateZ:function(e){return this.rotateOnAxis(J,e)},translateOnAxis:function(e,t){return k.copy(e).applyQuaternion(this.quaternion),this.position.add(k.multiplyScalar(t)),this},translateX:function(e){return this.translateOnAxis(Y,e)},translateY:function(e){return this.translateOnAxis(Z,e)},translateZ:function(e){return this.translateOnAxis(J,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(j.getInverse(this.matrixWorld))},lookAt:function(e,t,r){e.isVector3?V.copy(e):V.set(e,t,r);var n=this.parent;this.updateWorldMatrix(!0,!1),W.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?j.lookAt(W,V,this.up):j.lookAt(V,W,this.up),this.quaternion.setFromRotationMatrix(j),n&&(j.extractRotation(n.matrixWorld),H.setFromRotationMatrix(j),this.quaternion.premultiply(H.inverse()))},add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(K)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var r=this.children.indexOf(e);return-1!==r&&(e.parent=null,this.children.splice(r,1),e.dispatchEvent(Q)),this},attach:function(e){return this.updateWorldMatrix(!0,!1),j.getInverse(this.matrixWorld),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),j.multiply(e.parent.matrixWorld)),e.applyMatrix(j),e.updateWorldMatrix(!1,!1),this.add(e),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var r=0,n=this.children.length;r<n;r++){var i=this.children[r].getObjectByProperty(e,t);if(void 0!==i)return i}},getWorldPosition:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new y),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new m),this.updateMatrixWorld(!0),this.matrixWorld.decompose(W,e,q),e},getWorldScale:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new y),this.updateMatrixWorld(!0),this.matrixWorld.decompose(W,X,e),e},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new y),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){var r=this.parent;if(!0===e&&null!==r&&r.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var n=this.children,i=0,a=n.length;i<a;i++)n[i].updateWorldMatrix(!1,!0)},toJSON:function(e){var t=void 0===e||"string"==typeof e,r={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},r.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var n={};function i(t,r){return void 0===t[r.uuid]&&(t[r.uuid]=r.toJSON(e)),r.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isMesh&&0!==this.drawMode&&(n.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){n.geometry=i(e.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,c=o.length;s<c;s++){var l=o[s];i(e.shapes,l)}else i(e.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var u=[];for(s=0,c=this.material.length;s<c;s++)u.push(i(e.materials,this.material[s]));n.material=u}else n.material=i(e.materials,this.material);if(this.children.length>0){n.children=[];for(s=0;s<this.children.length;s++)n.children.push(this.children[s].toJSON(e).object)}if(t){var h=m(e.geometries),d=m(e.materials),p=m(e.textures),f=m(e.images);o=m(e.shapes);h.length>0&&(r.geometries=h),d.length>0&&(r.materials=d),p.length>0&&(r.textures=p),f.length>0&&(r.images=f),o.length>0&&(r.shapes=o)}return r.object=n,r;function m(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var r=0;r<e.children.length;r++){var n=e.children[r];this.add(n.clone())}return this}}),ee.prototype=Object.assign(Object.create($.prototype),{constructor:ee,isScene:!0,copy:function(e,t){return $.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}});var te=[new y,new y,new y,new y,new y,new y,new y,new y],re=new y,ne=new y,ie=new y,ae=new y,oe=new y,se=new y,ce=new y,le=new y,ue=new y,he=new y,de=new y;function pe(e,t){this.min=void 0!==e?e:new y(1/0,1/0,1/0),this.max=void 0!==t?t:new y(-1/0,-1/0,-1/0)}function fe(e,t,r,n,i){var a,o;for(a=0,o=e.length-3;a<=o;a+=3){de.fromArray(e,a);var s=i.x*Math.abs(de.x)+i.y*Math.abs(de.y)+i.z*Math.abs(de.z),c=t.dot(de),l=r.dot(de),u=n.dot(de);if(Math.max(-Math.max(c,l,u),Math.min(c,l,u))>s)return!1}return!0}Object.assign(pe.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,r=1/0,n=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.length;s<c;s+=3){var l=e[s],u=e[s+1],h=e[s+2];l<t&&(t=l),u<r&&(r=u),h<n&&(n=h),l>i&&(i=l),u>a&&(a=u),h>o&&(o=h)}return this.min.set(t,r,n),this.max.set(i,a,o),this},setFromBufferAttribute:function(e){for(var t=1/0,r=1/0,n=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.count;s<c;s++){var l=e.getX(s),u=e.getY(s),h=e.getZ(s);l<t&&(t=l),u<r&&(r=u),h<n&&(n=h),l>i&&(i=l),u>a&&(a=u),h>o&&(o=h)}return this.min.set(t,r,n),this.max.set(i,a,o),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var r=re.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this},setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new y),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new y),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(e){var t,r;e.updateWorldMatrix(!1,!1);var n=e.geometry;if(void 0!==n)if(n.isGeometry){var i=n.vertices;for(t=0,r=i.length;t<r;t++)re.copy(i[t]),re.applyMatrix4(e.matrixWorld),this.expandByPoint(re)}else if(n.isBufferGeometry){var a=n.attributes.position;if(void 0!==a)for(t=0,r=a.count;t<r;t++)re.fromBufferAttribute(a,t).applyMatrix4(e.matrixWorld),this.expandByPoint(re)}var o=e.children;for(t=0,r=o.length;t<r;t++)this.expandByObject(o[t]);return this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new y),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(e){return this.clampPoint(e.center,re),re.distanceToSquared(e.center)<=e.radius*e.radius},intersectsPlane:function(e){var t,r;return e.normal.x>0?(t=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),t<=-e.constant&&r>=-e.constant},intersectsTriangle:function(e){if(this.isEmpty())return!1;this.getCenter(le),ue.subVectors(this.max,le),ne.subVectors(e.a,le),ie.subVectors(e.b,le),ae.subVectors(e.c,le),oe.subVectors(ie,ne),se.subVectors(ae,ie),ce.subVectors(ne,ae);var t=[0,-oe.z,oe.y,0,-se.z,se.y,0,-ce.z,ce.y,oe.z,0,-oe.x,se.z,0,-se.x,ce.z,0,-ce.x,-oe.y,oe.x,0,-se.y,se.x,0,-ce.y,ce.x,0];return!!fe(t,ne,ie,ae,ue)&&(!!fe(t=[1,0,0,0,1,0,0,0,1],ne,ie,ae,ue)&&(he.crossVectors(oe,se),fe(t=[he.x,he.y,he.z],ne,ie,ae,ue)))},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new y),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return re.copy(e).clamp(this.min,this.max).sub(e).length()},getBoundingSphere:function(e){return void 0===e&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=.5*this.getSize(re).length(),e},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(e){return this.isEmpty()||(te[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),te[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),te[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),te[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),te[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),te[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),te[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),te[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(te)),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var me=new pe;function ve(e,t){this.center=void 0!==e?e:new y,this.radius=void 0!==t?t:0}Object.assign(ve.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(e,t){var r=this.center;void 0!==t?r.copy(t):me.setFromPoints(e).getCenter(r);for(var n=0,i=0,a=e.length;i<a;i++)n=Math.max(n,r.distanceToSquared(e[i]));return this.radius=Math.sqrt(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var r=this.center.distanceToSquared(e);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new y),t.copy(e),r>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new pe),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}});var ge=new y,ye=new y,xe=new y,be=new y,we=new y,_e=new y,Me=new y;function Se(e,t){this.origin=void 0!==e?e:new y,this.direction=void 0!==t?t:new y}Object.assign(Se.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new y),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(e){return this.origin.copy(this.at(e,ge)),this},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new y),t.subVectors(e,this.origin);var r=t.dot(this.direction);return r<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(e){var t=ge.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ge.copy(this.direction).multiplyScalar(t).add(this.origin),ge.distanceToSquared(e))},distanceSqToSegment:function(e,t,r,n){ye.copy(e).add(t).multiplyScalar(.5),xe.copy(t).sub(e).normalize(),be.copy(this.origin).sub(ye);var i,a,o,s,c=.5*e.distanceTo(t),l=-this.direction.dot(xe),u=be.dot(this.direction),h=-be.dot(xe),d=be.lengthSq(),p=Math.abs(1-l*l);if(p>0)if(a=l*u-h,s=c*p,(i=l*h-u)>=0)if(a>=-s)if(a<=s){var f=1/p;o=(i*=f)*(i+l*(a*=f)+2*u)+a*(l*i+a+2*h)+d}else a=c,o=-(i=Math.max(0,-(l*a+u)))*i+a*(a+2*h)+d;else a=-c,o=-(i=Math.max(0,-(l*a+u)))*i+a*(a+2*h)+d;else a<=-s?o=-(i=Math.max(0,-(-l*c+u)))*i+(a=i>0?-c:Math.min(Math.max(-c,-h),c))*(a+2*h)+d:a<=s?(i=0,o=(a=Math.min(Math.max(-c,-h),c))*(a+2*h)+d):o=-(i=Math.max(0,-(l*c+u)))*i+(a=i>0?c:Math.min(Math.max(-c,-h),c))*(a+2*h)+d;else a=l>0?-c:c,o=-(i=Math.max(0,-(l*a+u)))*i+a*(a+2*h)+d;return r&&r.copy(this.direction).multiplyScalar(i).add(this.origin),n&&n.copy(xe).multiplyScalar(a).add(ye),o},intersectSphere:function(e,t){ge.subVectors(e.center,this.origin);var r=ge.dot(this.direction),n=ge.dot(ge)-r*r,i=e.radius*e.radius;if(n>i)return null;var a=Math.sqrt(i-n),o=r-a,s=r+a;return o<0&&s<0?null:o<0?this.at(s,t):this.at(o,t)},intersectsSphere:function(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var r=-(this.origin.dot(e.normal)+e.constant)/t;return r>=0?r:null},intersectPlane:function(e,t){var r=this.distanceToPlane(e);return null===r?null:this.at(r,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var r,n,i,a,o,s,c=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,h=this.origin;return c>=0?(r=(e.min.x-h.x)*c,n=(e.max.x-h.x)*c):(r=(e.max.x-h.x)*c,n=(e.min.x-h.x)*c),l>=0?(i=(e.min.y-h.y)*l,a=(e.max.y-h.y)*l):(i=(e.max.y-h.y)*l,a=(e.min.y-h.y)*l),r>a||i>n?null:((i>r||r!=r)&&(r=i),(a<n||n!=n)&&(n=a),u>=0?(o=(e.min.z-h.z)*u,s=(e.max.z-h.z)*u):(o=(e.max.z-h.z)*u,s=(e.min.z-h.z)*u),r>s||o>n?null:((o>r||r!=r)&&(r=o),(s<n||n!=n)&&(n=s),n<0?null:this.at(r>=0?r:n,t)))},intersectsBox:function(e){return null!==this.intersectBox(e,ge)},intersectTriangle:function(e,t,r,n,i){we.subVectors(t,e),_e.subVectors(r,e),Me.crossVectors(we,_e);var a,o=this.direction.dot(Me);if(o>0){if(n)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}be.subVectors(this.origin,e);var s=a*this.direction.dot(_e.crossVectors(be,_e));if(s<0)return null;var c=a*this.direction.dot(we.cross(be));if(c<0)return null;if(s+c>o)return null;var l=-a*be.dot(Me);return l<0?null:this.at(l/o,i)},applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}});var Te=new y,Ee=new y,Ae=new y,Le=new y,Re=new y,Pe=new y,Ce=new y,Oe=new y,Ie=new y,De=new y;function Ne(e,t,r){this.a=void 0!==e?e:new y,this.b=void 0!==t?t:new y,this.c=void 0!==r?r:new y}Object.assign(Ne,{getNormal:function(e,t,r,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new y),n.subVectors(r,t),Te.subVectors(e,t),n.cross(Te);var i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)},getBarycoord:function(e,t,r,n,i){Te.subVectors(n,t),Ee.subVectors(r,t),Ae.subVectors(e,t);var a=Te.dot(Te),o=Te.dot(Ee),s=Te.dot(Ae),c=Ee.dot(Ee),l=Ee.dot(Ae),u=a*c-o*o;if(void 0===i&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),i=new y),0===u)return i.set(-2,-1,-1);var h=1/u,d=(c*s-o*l)*h,p=(a*l-o*s)*h;return i.set(1-d-p,p,d)},containsPoint:function(e,t,r,n){return Ne.getBarycoord(e,t,r,n,Le),Le.x>=0&&Le.y>=0&&Le.x+Le.y<=1},getUV:function(e,t,r,n,i,a,o,s){return this.getBarycoord(e,t,r,n,Le),s.set(0,0),s.addScaledVector(i,Le.x),s.addScaledVector(a,Le.y),s.addScaledVector(o,Le.z),s},isFrontFacing:function(e,t,r,n){return Te.subVectors(r,t),Ee.subVectors(e,t),Te.cross(Ee).dot(n)<0}}),Object.assign(Ne.prototype,{set:function(e,t,r){return this.a.copy(e),this.b.copy(t),this.c.copy(r),this},setFromPointsAndIndices:function(e,t,r,n){return this.a.copy(e[t]),this.b.copy(e[r]),this.c.copy(e[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){return Te.subVectors(this.c,this.b),Ee.subVectors(this.a,this.b),.5*Te.cross(Ee).length()},getMidpoint:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new y),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return Ne.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new y),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return Ne.getBarycoord(e,this.a,this.b,this.c,t)},getUV:function(e,t,r,n,i){return Ne.getUV(e,this.a,this.b,this.c,t,r,n,i)},containsPoint:function(e){return Ne.containsPoint(e,this.a,this.b,this.c)},isFrontFacing:function(e){return Ne.isFrontFacing(this.a,this.b,this.c,e)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new y);var r,n,i=this.a,a=this.b,o=this.c;Re.subVectors(a,i),Pe.subVectors(o,i),Oe.subVectors(e,i);var s=Re.dot(Oe),c=Pe.dot(Oe);if(s<=0&&c<=0)return t.copy(i);Ie.subVectors(e,a);var l=Re.dot(Ie),u=Pe.dot(Ie);if(l>=0&&u<=l)return t.copy(a);var h=s*u-l*c;if(h<=0&&s>=0&&l<=0)return r=s/(s-l),t.copy(i).addScaledVector(Re,r);De.subVectors(e,o);var d=Re.dot(De),p=Pe.dot(De);if(p>=0&&d<=p)return t.copy(o);var f=d*c-s*p;if(f<=0&&c>=0&&p<=0)return n=c/(c-p),t.copy(i).addScaledVector(Pe,n);var m=l*p-d*u;if(m<=0&&u-l>=0&&d-p>=0)return Ce.subVectors(o,a),n=(u-l)/(u-l+(d-p)),t.copy(a).addScaledVector(Ce,n);var v=1/(m+f+h);return r=f*v,n=h*v,t.copy(i).addScaledVector(Re,r).addScaledVector(Pe,n)},equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}});var Be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ze={h:0,s:0,l:0},Ue={h:0,s:0,l:0};function Fe(e,t,r){return void 0===t&&void 0===r?this.set(e):this.setRGB(e,t,r)}function Ge(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+6*(t-e)*(2/3-r):e}function ke(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function He(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}function je(e,t,r,n,i,a){this.a=e,this.b=t,this.c=r,this.normal=n&&n.isVector3?n:new y,this.vertexNormals=Array.isArray(n)?n:[],this.color=i&&i.isColor?i:new Fe,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0}Object.assign(Fe.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,r){return this.r=e,this.g=t,this.b=r,this},setHSL:function(e,t,r){if(e=p.euclideanModulo(e,1),t=p.clamp(t,0,1),r=p.clamp(r,0,1),0===t)this.r=this.g=this.b=r;else{var n=r<=.5?r*(1+t):r+t-r*t,i=2*r-n;this.r=Ge(i,n,e+1/3),this.g=Ge(i,n,e),this.b=Ge(i,n,e-1/3)}return this},setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var r;if(r=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var n,i=r[1],a=r[2];switch(i){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,t(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,t(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return t(n[5]),this.setHSL(o,s,c)}}}else if(r=/^\#([A-Fa-f0-9]+)$/.exec(e)){var l,u=(l=r[1]).length;if(3===u)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===u)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}e&&e.length>0&&(void 0!==(l=Be[e])?this.setHex(l):console.warn("THREE.Color: Unknown color "+e));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var r=t>0?1/t:1;return this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},convertGammaToLinear:function(e){return this.copyGammaToLinear(this,e),this},convertLinearToGamma:function(e){return this.copyLinearToGamma(this,e),this},copySRGBToLinear:function(e){return this.r=ke(e.r),this.g=ke(e.g),this.b=ke(e.b),this},copyLinearToSRGB:function(e){return this.r=He(e.r),this.g=He(e.g),this.b=He(e.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});var t,r,n=this.r,i=this.g,a=this.b,o=Math.max(n,i,a),s=Math.min(n,i,a),c=(s+o)/2;if(s===o)t=0,r=0;else{var l=o-s;switch(r=c<=.5?l/(o+s):l/(2-o-s),o){case n:t=(i-a)/l+(i<a?6:0);break;case i:t=(a-n)/l+2;break;case a:t=(n-i)/l+4}t/=6}return e.h=t,e.s=r,e.l=c,e},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,r){return this.getHSL(ze),ze.h+=e,ze.s+=t,ze.l+=r,this.setHSL(ze.h,ze.s,ze.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},lerpHSL:function(e,t){this.getHSL(ze),e.getHSL(Ue);var r=p.lerp(ze.h,Ue.h,t),n=p.lerp(ze.s,Ue.s,t),i=p.lerp(ze.l,Ue.l,t);return this.setHSL(r,n,i),this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}}),Object.assign(je.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,r=e.vertexColors.length;t<r;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var Ve=0;function We(){Object.defineProperty(this,"id",{value:Ve++}),this.uuid=p.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=0,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.needsUpdate=!0}function qe(e){We.call(this),this.type="MeshBasicMaterial",this.color=new Fe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}function Xe(e,t,r){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===r,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Ye(e,t,r){Xe.call(this,new Int8Array(e),t,r)}function Ze(e,t,r){Xe.call(this,new Uint8Array(e),t,r)}function Je(e,t,r){Xe.call(this,new Uint8ClampedArray(e),t,r)}function Ke(e,t,r){Xe.call(this,new Int16Array(e),t,r)}function Qe(e,t,r){Xe.call(this,new Uint16Array(e),t,r)}function $e(e,t,r){Xe.call(this,new Int32Array(e),t,r)}function et(e,t,r){Xe.call(this,new Uint32Array(e),t,r)}function tt(e,t,r){Xe.call(this,new Float32Array(e),t,r)}function rt(e,t,r){Xe.call(this,new Float64Array(e),t,r)}function nt(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function it(e){if(0===e.length)return-1/0;for(var t=e[0],r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t}We.prototype=Object.assign(Object.create(u.prototype),{constructor:We,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var r=e[t];if(void 0!==r)if("shading"!==t){var n=this[t];void 0!==n?n&&n.isColor?n.set(r):n&&n.isVector3&&r&&r.isVector3?n.copy(r):this[t]=r:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===r;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var r={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),this.color&&this.color.isColor&&(r.color=this.color.getHex()),void 0!==this.roughness&&(r.roughness=this.roughness),void 0!==this.metalness&&(r.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(r.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(r.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(r.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(r.specular=this.specular.getHex()),void 0!==this.shininess&&(r.shininess=this.shininess),void 0!==this.clearcoat&&(r.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(r.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(r.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,r.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(r.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(r.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(r.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(r.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(r.aoMap=this.aoMap.toJSON(e).uuid,r.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(r.bumpMap=this.bumpMap.toJSON(e).uuid,r.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(r.normalMap=this.normalMap.toJSON(e).uuid,r.normalMapType=this.normalMapType,r.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(r.displacementMap=this.displacementMap.toJSON(e).uuid,r.displacementScale=this.displacementScale,r.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(r.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(r.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(r.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(r.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(r.envMap=this.envMap.toJSON(e).uuid,r.reflectivity=this.reflectivity,r.refractionRatio=this.refractionRatio,void 0!==this.combine&&(r.combine=this.combine),void 0!==this.envMapIntensity&&(r.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(r.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(r.size=this.size),void 0!==this.sizeAttenuation&&(r.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(r.blending=this.blending),!0===this.flatShading&&(r.flatShading=this.flatShading),0!==this.side&&(r.side=this.side),0!==this.vertexColors&&(r.vertexColors=this.vertexColors),this.opacity<1&&(r.opacity=this.opacity),!0===this.transparent&&(r.transparent=this.transparent),r.depthFunc=this.depthFunc,r.depthTest=this.depthTest,r.depthWrite=this.depthWrite,r.stencilWrite=this.stencilWrite,r.stencilWriteMask=this.stencilWriteMask,r.stencilFunc=this.stencilFunc,r.stencilRef=this.stencilRef,r.stencilFuncMask=this.stencilFuncMask,r.stencilFail=this.stencilFail,r.stencilZFail=this.stencilZFail,r.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(r.rotation=this.rotation),!0===this.polygonOffset&&(r.polygonOffset=!0),0!==this.polygonOffsetFactor&&(r.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(r.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(r.linewidth=this.linewidth),void 0!==this.dashSize&&(r.dashSize=this.dashSize),void 0!==this.gapSize&&(r.gapSize=this.gapSize),void 0!==this.scale&&(r.scale=this.scale),!0===this.dithering&&(r.dithering=!0),this.alphaTest>0&&(r.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(r.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(r.wireframe=this.wireframe),this.wireframeLinewidth>1&&(r.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(r.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(r.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(r.morphTargets=!0),!0===this.morphNormals&&(r.morphNormals=!0),!0===this.skinning&&(r.skinning=!0),!1===this.visible&&(r.visible=!1),!1===this.toneMapped&&(r.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),t){var i=n(e.textures),a=n(e.images);i.length>0&&(r.textures=i),a.length>0&&(r.images=a)}return r},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWrite=e.stencilWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,r=null;if(null!==t){var n=t.length;r=new Array(n);for(var i=0;i!==n;++i)r[i]=t[i].clone()}return this.clippingPlanes=r,this.shadowSide=e.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),qe.prototype=Object.create(We.prototype),qe.prototype.constructor=qe,qe.prototype.isMeshBasicMaterial=!0,qe.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Object.defineProperty(Xe.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Xe.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.itemSize,r*=t.itemSize;for(var n=0,i=this.itemSize;n<i;n++)this.array[e+n]=t.array[r+n];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new Fe),t[r++]=a.r,t[r++]=a.g,t[r++]=a.b}return this},copyVector2sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new f),t[r++]=a.x,t[r++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new y),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new T),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z,t[r++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this.array[e+3]=i,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),Ye.prototype=Object.create(Xe.prototype),Ye.prototype.constructor=Ye,Ze.prototype=Object.create(Xe.prototype),Ze.prototype.constructor=Ze,Je.prototype=Object.create(Xe.prototype),Je.prototype.constructor=Je,Ke.prototype=Object.create(Xe.prototype),Ke.prototype.constructor=Ke,Qe.prototype=Object.create(Xe.prototype),Qe.prototype.constructor=Qe,$e.prototype=Object.create(Xe.prototype),$e.prototype.constructor=$e,et.prototype=Object.create(Xe.prototype),et.prototype.constructor=et,tt.prototype=Object.create(Xe.prototype),tt.prototype.constructor=tt,rt.prototype=Object.create(Xe.prototype),rt.prototype.constructor=rt,Object.assign(nt.prototype,{computeGroups:function(e){for(var t,r=[],n=void 0,i=e.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==n&&(n=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,r.push(t)),t={start:3*a,materialIndex:n})}void 0!==t&&(t.count=3*a-t.start,r.push(t)),this.groups=r},fromGeometry:function(e){var t,r=e.faces,n=e.vertices,i=e.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){t=[];for(var l=0;l<c;l++)t[l]={name:s[l].name,data:[]};this.morphTargets.position=t}var u,h=e.morphNormals,d=h.length;if(d>0){u=[];for(l=0;l<d;l++)u[l]={name:h[l].name,data:[]};this.morphTargets.normal=u}var p=e.skinIndices,m=e.skinWeights,v=p.length===n.length,g=m.length===n.length;n.length>0&&0===r.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(l=0;l<r.length;l++){var y=r[l];this.vertices.push(n[y.a],n[y.b],n[y.c]);var x=y.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var b=y.normal;this.normals.push(b,b,b)}var w,_=y.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var M=y.color;this.colors.push(M,M,M)}if(!0===a)void 0!==(w=i[0][l])?this.uvs.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",l),this.uvs.push(new f,new f,new f));if(!0===o)void 0!==(w=i[1][l])?this.uvs2.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",l),this.uvs2.push(new f,new f,new f));for(var S=0;S<c;S++){var T=s[S].vertices;t[S].data.push(T[y.a],T[y.b],T[y.c])}for(S=0;S<d;S++){var E=h[S].vertexNormals[l];u[S].data.push(E.a,E.b,E.c)}v&&this.skinIndices.push(p[y.a],p[y.b],p[y.c]),g&&this.skinWeights.push(m[y.a],m[y.b],m[y.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}});var at=1,ot=new N,st=new $,ct=new y,lt=new pe,ut=new pe,ht=new y;function dt(){Object.defineProperty(this,"id",{value:at+=2}),this.uuid=p.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}dt.prototype=Object.assign(Object.create(u.prototype),{constructor:dt,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(it(e)>65535?et:Qe)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(e,new Xe(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){return this.attributes[e]=t,this},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,r){this.groups.push({start:e,count:t,materialIndex:void 0!==r?r:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var r=this.attributes.normal;void 0!==r&&((new w).getNormalMatrix(e).applyToBufferAttribute(r),r.needsUpdate=!0);var n=this.attributes.tangent;void 0!==n&&((new w).getNormalMatrix(e).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(e){return ot.makeRotationX(e),this.applyMatrix(ot),this},rotateY:function(e){return ot.makeRotationY(e),this.applyMatrix(ot),this},rotateZ:function(e){return ot.makeRotationZ(e),this.applyMatrix(ot),this},translate:function(e,t,r){return ot.makeTranslation(e,t,r),this.applyMatrix(ot),this},scale:function(e,t,r){return ot.makeScale(e,t,r),this.applyMatrix(ot),this},lookAt:function(e){return st.lookAt(e),st.updateMatrix(),this.applyMatrix(st.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(ct).negate(),this.translate(ct.x,ct.y,ct.z),this},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var r=new tt(3*t.vertices.length,3),n=new tt(3*t.colors.length,3);if(this.addAttribute("position",r.copyVector3sArray(t.vertices)),this.addAttribute("color",n.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var i=new tt(t.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],r=0,n=e.length;r<n;r++){var i=e[r];t.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new tt(t,3)),this},updateFromObject:function(e){var t,r=e.geometry;if(e.isMesh){var n=r.__directGeometry;if(!0===r.elementsNeedUpdate&&(n=void 0,r.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(r);n.verticesNeedUpdate=r.verticesNeedUpdate,n.normalsNeedUpdate=r.normalsNeedUpdate,n.colorsNeedUpdate=r.colorsNeedUpdate,n.uvsNeedUpdate=r.uvsNeedUpdate,n.groupsNeedUpdate=r.groupsNeedUpdate,r.verticesNeedUpdate=!1,r.normalsNeedUpdate=!1,r.colorsNeedUpdate=!1,r.uvsNeedUpdate=!1,r.groupsNeedUpdate=!1,r=n}return!0===r.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(r.vertices),t.needsUpdate=!0),r.verticesNeedUpdate=!1),!0===r.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(r.normals),t.needsUpdate=!0),r.normalsNeedUpdate=!1),!0===r.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(r.colors),t.needsUpdate=!0),r.colorsNeedUpdate=!1),r.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(r.uvs),t.needsUpdate=!0),r.uvsNeedUpdate=!1),r.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(r.lineDistances),t.needsUpdate=!0),r.lineDistancesNeedUpdate=!1),r.groupsNeedUpdate&&(r.computeGroups(e.geometry),this.groups=r.groups,r.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new nt).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new Xe(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var r=new Float32Array(3*e.normals.length);this.addAttribute("normal",new Xe(r,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var n=new Float32Array(3*e.colors.length);this.addAttribute("color",new Xe(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new Xe(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new Xe(a,2).copyVector2sArray(e.uvs2))}for(var o in this.groups=e.groups,e.morphTargets){for(var s=[],c=e.morphTargets[o],l=0,u=c.length;l<u;l++){var h=c[l],d=new tt(3*h.data.length,3);d.name=h.name,s.push(d.copyVector3sArray(h.data))}this.morphAttributes[o]=s}if(e.skinIndices.length>0){var p=new tt(4*e.skinIndices.length,4);this.addAttribute("skinIndex",p.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var f=new tt(4*e.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new pe);var e=this.attributes.position,t=this.morphAttributes.position;if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(var r=0,n=t.length;r<n;r++){var i=t[r];lt.setFromBufferAttribute(i),this.boundingBox.expandByPoint(lt.min),this.boundingBox.expandByPoint(lt.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new ve);var e=this.attributes.position,t=this.morphAttributes.position;if(e){var r=this.boundingSphere.center;if(lt.setFromBufferAttribute(e),t)for(var n=0,i=t.length;n<i;n++){var a=t[n];ut.setFromBufferAttribute(a),lt.expandByPoint(ut.min),lt.expandByPoint(ut.max)}lt.getCenter(r);var o=0;for(n=0,i=e.count;n<i;n++)ht.fromBufferAttribute(e,n),o=Math.max(o,r.distanceToSquared(ht));if(t)for(n=0,i=t.length;n<i;n++)for(var s=0,c=(a=t[n]).count;s<c;s++)ht.fromBufferAttribute(a,s),o=Math.max(o,r.distanceToSquared(ht));this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes;if(t.position){var r=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new Xe(new Float32Array(r.length),3));else for(var n=t.normal.array,i=0,a=n.length;i<a;i++)n[i]=0;var o,s,c,l=t.normal.array,u=new y,h=new y,d=new y,p=new y,f=new y;if(e){var m=e.array;for(i=0,a=e.count;i<a;i+=3)o=3*m[i+0],s=3*m[i+1],c=3*m[i+2],u.fromArray(r,o),h.fromArray(r,s),d.fromArray(r,c),p.subVectors(d,h),f.subVectors(u,h),p.cross(f),l[o]+=p.x,l[o+1]+=p.y,l[o+2]+=p.z,l[s]+=p.x,l[s+1]+=p.y,l[s+2]+=p.z,l[c]+=p.x,l[c+1]+=p.y,l[c+2]+=p.z}else for(i=0,a=r.length;i<a;i+=9)u.fromArray(r,i),h.fromArray(r,i+3),d.fromArray(r,i+6),p.subVectors(d,h),f.subVectors(u,h),p.cross(f),l[i]=p.x,l[i+1]=p.y,l[i+2]=p.z,l[i+3]=p.x,l[i+4]=p.y,l[i+5]=p.z,l[i+6]=p.x,l[i+7]=p.y,l[i+8]=p.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var r=this.attributes;for(var n in r)if(void 0!==e.attributes[n])for(var i=r[n].array,a=e.attributes[n],o=a.array,s=a.itemSize*t,c=Math.min(o.length,i.length-s),l=0,u=s;l<c;l++,u++)i[u]=o[l];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){for(var e=this.attributes.normal,t=0,r=e.count;t<r;t++)ht.x=e.getX(t),ht.y=e.getY(t),ht.z=e.getZ(t),ht.normalize(),e.setXYZ(t,ht.x,ht.y,ht.z)},toNonIndexed:function(){function e(e,t){for(var r=e.array,n=e.itemSize,i=new r.constructor(t.length*n),a=0,o=0,s=0,c=t.length;s<c;s++){a=t[s]*n;for(var l=0;l<n;l++)i[o++]=r[a++]}return new Xe(i,n)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new dt,r=this.index.array,n=this.attributes;for(var i in n){var a=e(n[i],r);t.addAttribute(i,a)}var o=this.morphAttributes;for(i in o){for(var s=[],c=o[i],l=0,u=c.length;l<u;l++){a=e(c[l],r);s.push(a)}t.morphAttributes[i]=s}for(var h=this.groups,d=(l=0,h.length);l<d;l++){var p=h[l];t.addGroup(p.start,p.count,p.materialIndex)}return t},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}e.data={attributes:{}};var n=this.index;null!==n&&(e.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});var i=this.attributes;for(var r in i){var a=(d=i[r]).toJSON();""!==d.name&&(a.name=d.name),e.data.attributes[r]=a}var o={},s=!1;for(var r in this.morphAttributes){for(var c=this.morphAttributes[r],l=[],u=0,h=c.length;u<h;u++){var d;a=(d=c[u]).toJSON();""!==d.name&&(a.name=d.name),l.push(a)}l.length>0&&(o[r]=l,s=!0)}s&&(e.data.morphAttributes=o);var p=this.groups;p.length>0&&(e.data.groups=JSON.parse(JSON.stringify(p)));var f=this.boundingSphere;return null!==f&&(e.data.boundingSphere={center:f.center.toArray(),radius:f.radius}),e},clone:function(){return(new dt).copy(this)},copy:function(e){var t,r,n;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var i=e.index;null!==i&&this.setIndex(i.clone());var a=e.attributes;for(t in a){var o=a[t];this.addAttribute(t,o.clone())}var s=e.morphAttributes;for(t in s){var c=[],l=s[t];for(r=0,n=l.length;r<n;r++)c.push(l[r].clone());this.morphAttributes[t]=c}var u=e.groups;for(r=0,n=u.length;r<n;r++){var h=u[r];this.addGroup(h.start,h.count,h.materialIndex)}var d=e.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=e.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var pt=new N,ft=new Se,mt=new ve,vt=new y,gt=new y,yt=new y,xt=new y,bt=new y,wt=new y,_t=new y,Mt=new y,St=new y,Tt=new f,Et=new f,At=new f,Lt=new y,Rt=new y;function Pt(e,t){$.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new qe({color:16777215*Math.random()}),this.drawMode=0,this.updateMorphTargets()}function Ct(e,t,r,n,i,a,o,s){if(null===(1===t.side?n.intersectTriangle(o,a,i,!0,s):n.intersectTriangle(i,a,o,2!==t.side,s)))return null;Rt.copy(s),Rt.applyMatrix4(e.matrixWorld);var c=r.ray.origin.distanceTo(Rt);return c<r.near||c>r.far?null:{distance:c,point:Rt.clone(),object:e}}function Ot(e,t,r,n,i,a,o,s,c,l,u){vt.fromBufferAttribute(i,c),gt.fromBufferAttribute(i,l),yt.fromBufferAttribute(i,u);var h=e.morphTargetInfluences;if(t.morphTargets&&a&&h){_t.set(0,0,0),Mt.set(0,0,0),St.set(0,0,0);for(var d=0,p=a.length;d<p;d++){var m=h[d],v=a[d];0!==m&&(xt.fromBufferAttribute(v,c),bt.fromBufferAttribute(v,l),wt.fromBufferAttribute(v,u),_t.addScaledVector(xt.sub(vt),m),Mt.addScaledVector(bt.sub(gt),m),St.addScaledVector(wt.sub(yt),m))}vt.add(_t),gt.add(Mt),yt.add(St)}var g=Ct(e,t,r,n,vt,gt,yt,Lt);if(g){o&&(Tt.fromBufferAttribute(o,c),Et.fromBufferAttribute(o,l),At.fromBufferAttribute(o,u),g.uv=Ne.getUV(Lt,vt,gt,yt,Tt,Et,At,new f)),s&&(Tt.fromBufferAttribute(s,c),Et.fromBufferAttribute(s,l),At.fromBufferAttribute(s,u),g.uv2=Ne.getUV(Lt,vt,gt,yt,Tt,Et,At,new f));var y=new je(c,l,u);Ne.getNormal(vt,gt,yt,y.normal),g.face=y}return g}Pt.prototype=Object.assign(Object.create($.prototype),{constructor:Pt,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return $.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,r,n=this.geometry;if(n.isBufferGeometry){var i=n.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)r=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}}else{var s=n.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(e,t){var r,n=this.geometry,i=this.material,a=this.matrixWorld;if(void 0!==i&&(null===n.boundingSphere&&n.computeBoundingSphere(),mt.copy(n.boundingSphere),mt.applyMatrix4(a),!1!==e.ray.intersectsSphere(mt)&&(pt.getInverse(a),ft.copy(e.ray).applyMatrix4(pt),null===n.boundingBox||!1!==ft.intersectsBox(n.boundingBox))))if(n.isBufferGeometry){var o,s,c,l,u,h,d,p,m,v=n.index,g=n.attributes.position,y=n.morphAttributes.position,x=n.attributes.uv,b=n.attributes.uv2,w=n.groups,_=n.drawRange;if(null!==v)if(Array.isArray(i))for(l=0,h=w.length;l<h;l++)for(m=i[(p=w[l]).materialIndex],u=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);u<d;u+=3)o=v.getX(u),s=v.getX(u+1),c=v.getX(u+2),(r=Ot(this,m,e,ft,g,y,x,b,o,s,c))&&(r.faceIndex=Math.floor(u/3),r.face.materialIndex=p.materialIndex,t.push(r));else for(l=Math.max(0,_.start),h=Math.min(v.count,_.start+_.count);l<h;l+=3)o=v.getX(l),s=v.getX(l+1),c=v.getX(l+2),(r=Ot(this,i,e,ft,g,y,x,b,o,s,c))&&(r.faceIndex=Math.floor(l/3),t.push(r));else if(void 0!==g)if(Array.isArray(i))for(l=0,h=w.length;l<h;l++)for(m=i[(p=w[l]).materialIndex],u=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);u<d;u+=3)(r=Ot(this,m,e,ft,g,y,x,b,o=u,s=u+1,c=u+2))&&(r.faceIndex=Math.floor(u/3),r.face.materialIndex=p.materialIndex,t.push(r));else for(l=Math.max(0,_.start),h=Math.min(g.count,_.start+_.count);l<h;l+=3)(r=Ot(this,i,e,ft,g,y,x,b,o=l,s=l+1,c=l+2))&&(r.faceIndex=Math.floor(l/3),t.push(r))}else if(n.isGeometry){var M,S,T,E,A=Array.isArray(i),L=n.vertices,R=n.faces,P=n.faceVertexUvs[0];P.length>0&&(E=P);for(var C=0,O=R.length;C<O;C++){var I=R[C],D=A?i[I.materialIndex]:i;if(void 0!==D&&(M=L[I.a],S=L[I.b],T=L[I.c],r=Ct(this,D,e,ft,M,S,T,Lt))){if(E&&E[C]){var N=E[C];Tt.copy(N[0]),Et.copy(N[1]),At.copy(N[2]),r.uv=Ne.getUV(Lt,M,S,T,Tt,Et,At,new f)}r.face=I,r.faceIndex=C,t.push(r)}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var It=0,Dt=new N,Nt=new $,Bt=new y;function zt(){Object.defineProperty(this,"id",{value:It+=2}),this.uuid=p.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}zt.prototype=Object.assign(Object.create(u.prototype),{constructor:zt,isGeometry:!0,applyMatrix:function(e){for(var t=(new w).getNormalMatrix(e),r=0,n=this.vertices.length;r<n;r++){this.vertices[r].applyMatrix4(e)}for(r=0,n=this.faces.length;r<n;r++){var i=this.faces[r];i.normal.applyMatrix3(t).normalize();for(var a=0,o=i.vertexNormals.length;a<o;a++)i.vertexNormals[a].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(e){return Dt.makeRotationX(e),this.applyMatrix(Dt),this},rotateY:function(e){return Dt.makeRotationY(e),this.applyMatrix(Dt),this},rotateZ:function(e){return Dt.makeRotationZ(e),this.applyMatrix(Dt),this},translate:function(e,t,r){return Dt.makeTranslation(e,t,r),this.applyMatrix(Dt),this},scale:function(e,t,r){return Dt.makeScale(e,t,r),this.applyMatrix(Dt),this},lookAt:function(e){return Nt.lookAt(e),Nt.updateMatrix(),this.applyMatrix(Nt.matrix),this},fromBufferGeometry:function(e){var t=this,r=null!==e.index?e.index.array:void 0,n=e.attributes;if(void 0===n.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var i=n.position.array,a=void 0!==n.normal?n.normal.array:void 0,o=void 0!==n.color?n.color.array:void 0,s=void 0!==n.uv?n.uv.array:void 0,c=void 0!==n.uv2?n.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var l=0;l<i.length;l+=3)t.vertices.push((new y).fromArray(i,l)),void 0!==o&&t.colors.push((new Fe).fromArray(o,l));function u(e,r,n,i){var l=void 0===o?[]:[t.colors[e].clone(),t.colors[r].clone(),t.colors[n].clone()],u=new je(e,r,n,void 0===a?[]:[(new y).fromArray(a,3*e),(new y).fromArray(a,3*r),(new y).fromArray(a,3*n)],l,i);t.faces.push(u),void 0!==s&&t.faceVertexUvs[0].push([(new f).fromArray(s,2*e),(new f).fromArray(s,2*r),(new f).fromArray(s,2*n)]),void 0!==c&&t.faceVertexUvs[1].push([(new f).fromArray(c,2*e),(new f).fromArray(c,2*r),(new f).fromArray(c,2*n)])}var h=e.groups;if(h.length>0)for(l=0;l<h.length;l++)for(var d=h[l],p=d.start,m=p,v=p+d.count;m<v;m+=3)void 0!==r?u(r[m],r[m+1],r[m+2],d.materialIndex):u(m,m+1,m+2,d.materialIndex);else if(void 0!==r)for(l=0;l<r.length;l+=3)u(r[l],r[l+1],r[l+2]);else for(l=0;l<i.length/3;l+=3)u(l,l+1,l+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Bt).negate(),this.translate(Bt.x,Bt.y,Bt.z),this},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,n=new N;return n.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var e=new y,t=new y,r=0,n=this.faces.length;r<n;r++){var i=this.faces[r],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,o),t.subVectors(a,o),e.cross(t),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){var t,r,n,i,a,o;for(void 0===e&&(e=!0),o=new Array(this.vertices.length),t=0,r=this.vertices.length;t<r;t++)o[t]=new y;if(e){var s,c,l,u=new y,h=new y;for(n=0,i=this.faces.length;n<i;n++)a=this.faces[n],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],u.subVectors(l,c),h.subVectors(s,c),u.cross(h),o[a.a].add(u),o[a.b].add(u),o[a.c].add(u)}else for(this.computeFaceNormals(),n=0,i=this.faces.length;n<i;n++)o[(a=this.faces[n]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,r=this.vertices.length;t<r;t++)o[t].normalize();for(n=0,i=this.faces.length;n<i;n++){var d=(a=this.faces[n]).vertexNormals;3===d.length?(d[0].copy(o[a.a]),d[1].copy(o[a.b]),d[2].copy(o[a.c])):(d[0]=o[a.a].clone(),d[1]=o[a.b].clone(),d[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,r;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var n=(r=this.faces[e]).vertexNormals;3===n.length?(n[0].copy(r.normal),n[1].copy(r.normal),n[2].copy(r.normal)):(n[0]=r.normal.clone(),n[1]=r.normal.clone(),n[2]=r.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,r,n,i;for(r=0,n=this.faces.length;r<n;r++)for((i=this.faces[r]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,t=i.vertexNormals.length;e<t;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var a=new zt;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o=this.morphNormals[e].faceNormals,s=this.morphNormals[e].vertexNormals;for(r=0,n=this.faces.length;r<n;r++)c=new y,l={a:new y,b:new y,c:new y},o.push(c),s.push(l)}var c,l,u=this.morphNormals[e];for(a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals(),r=0,n=this.faces.length;r<n;r++)i=this.faces[r],c=u.faceNormals[r],l=u.vertexNormals[r],c.copy(i.normal),l.a.copy(i.vertexNormals[0]),l.b.copy(i.vertexNormals[1]),l.c.copy(i.vertexNormals[2])}for(r=0,n=this.faces.length;r<n;r++)(i=this.faces[r]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new pe),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new ve),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,r){if(e&&e.isGeometry){var n,i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.colors,u=e.colors;void 0===r&&(r=0),void 0!==t&&(n=(new w).getNormalMatrix(t));for(var h=0,d=o.length;h<d;h++){var p=o[h].clone();void 0!==t&&p.applyMatrix4(t),a.push(p)}for(h=0,d=u.length;h<d;h++)l.push(u[h].clone());for(h=0,d=c.length;h<d;h++){var f,m,v,g=c[h],y=g.vertexNormals,x=g.vertexColors;(f=new je(g.a+i,g.b+i,g.c+i)).normal.copy(g.normal),void 0!==n&&f.normal.applyMatrix3(n).normalize();for(var b=0,_=y.length;b<_;b++)m=y[b].clone(),void 0!==n&&m.applyMatrix3(n).normalize(),f.vertexNormals.push(m);f.color.copy(g.color);for(b=0,_=x.length;b<_;b++)v=x[b],f.vertexColors.push(v.clone());f.materialIndex=g.materialIndex+r,s.push(f)}for(h=0,d=e.faceVertexUvs.length;h<d;h++){var M=e.faceVertexUvs[h];void 0===this.faceVertexUvs[h]&&(this.faceVertexUvs[h]=[]);for(b=0,_=M.length;b<_;b++){for(var S=M[b],T=[],E=0,A=S.length;E<A;E++)T.push(S[E].clone());this.faceVertexUvs[h].push(T)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,r,n,i,a,o,s,c={},l=[],u=[],h=Math.pow(10,4);for(r=0,n=this.vertices.length;r<n;r++)e=this.vertices[r],void 0===c[t=Math.round(e.x*h)+"_"+Math.round(e.y*h)+"_"+Math.round(e.z*h)]?(c[t]=r,l.push(this.vertices[r]),u[r]=l.length-1):u[r]=u[c[t]];var d=[];for(r=0,n=this.faces.length;r<n;r++){(i=this.faces[r]).a=u[i.a],i.b=u[i.b],i.c=u[i.c],a=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(a[p]===a[(p+1)%3]){d.push(r);break}}for(r=d.length-1;r>=0;r--){var f=d[r];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-l.length;return this.vertices=l,m},setFromPoints:function(e){this.vertices=[];for(var t=0,r=e.length;t<r;t++){var n=e[t];this.vertices.push(new y(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,r=0;r<t;r++)e[r]._id=r;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var n,i,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===t&&(n=[]),o&&o.length===t&&(i=[]);for(r=0;r<t;r++){var s=e[r]._id;n&&n.push(a[s]),i&&i.push(o[s])}n&&(this.faceVertexUvs[0]=n),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}for(var n=[],i=0;i<this.vertices.length;i++){var a=this.vertices[i];n.push(a.x,a.y,a.z)}var o=[],s=[],c={},l=[],u={},h=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),o.push(x),o.push(p.a,p.b,p.c),o.push(p.materialIndex),f){var b=this.faceVertexUvs[0][i];o.push(E(b[0]),E(b[1]),E(b[2]))}if(m&&o.push(S(p.normal)),v){var w=p.vertexNormals;o.push(S(w[0]),S(w[1]),S(w[2]))}if(g&&o.push(T(p.color)),y){var _=p.vertexColors;o.push(T(_[0]),T(_[1]),T(_[2]))}}function M(e,t,r){return r?e|1<<t:e&~(1<<t)}function S(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==c[t]||(c[t]=s.length/3,s.push(e.x,e.y,e.z)),c[t]}function T(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==u[t]||(u[t]=l.length,l.push(e.getHex())),u[t]}function E(e){var t=e.x.toString()+e.y.toString();return void 0!==d[t]||(d[t]=h.length/2,h.push(e.x,e.y)),d[t]}return e.data={},e.data.vertices=n,e.data.normals=s,l.length>0&&(e.data.colors=l),h.length>0&&(e.data.uvs=[h]),e.data.faces=o,e},clone:function(){return(new zt).copy(this)},copy:function(e){var t,r,n,i,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,r=s.length;t<r;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,r=c.length;t<r;t++)this.colors.push(c[t].clone());var l=e.faces;for(t=0,r=l.length;t<r;t++)this.faces.push(l[t].clone());for(t=0,r=e.faceVertexUvs.length;t<r;t++){var u=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),n=0,i=u.length;n<i;n++){var h=u[n],d=[];for(a=0,o=h.length;a<o;a++){var p=h[a];d.push(p.clone())}this.faceVertexUvs[t].push(d)}}var f=e.morphTargets;for(t=0,r=f.length;t<r;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],n=0,i=f[t].vertices.length;n<i;n++)m.vertices.push(f[t].vertices[n].clone());if(void 0!==f[t].normals)for(m.normals=[],n=0,i=f[t].normals.length;n<i;n++)m.normals.push(f[t].normals[n].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,r=v.length;t<r;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],n=0,i=v[t].vertexNormals.length;n<i;n++){var y=v[t].vertexNormals[n],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],n=0,i=v[t].faceNormals.length;n<i;n++)g.faceNormals.push(v[t].faceNormals[n].clone());this.morphNormals.push(g)}var b=e.skinWeights;for(t=0,r=b.length;t<r;t++)this.skinWeights.push(b[t].clone());var w=e.skinIndices;for(t=0,r=w.length;t<r;t++)this.skinIndices.push(w[t].clone());var _=e.lineDistances;for(t=0,r=_.length;t<r;t++)this.lineDistances.push(_[t]);var M=e.boundingBox;null!==M&&(this.boundingBox=M.clone());var S=e.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var Ut=function(e){function t(t,r,n,i,a,o){e.call(this),this.type="BoxGeometry",this.parameters={width:t,height:r,depth:n,widthSegments:i,heightSegments:a,depthSegments:o},this.fromBufferGeometry(new Ft(t,r,n,i,a,o)),this.mergeVertices()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(zt),Ft=function(e){function t(t,r,n,i,a,o){e.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:r,depth:n,widthSegments:i,heightSegments:a,depthSegments:o};var s=this;t=t||1,r=r||1,n=n||1,i=Math.floor(i)||1,a=Math.floor(a)||1,o=Math.floor(o)||1;var c=[],l=[],u=[],h=[],d=0,p=0;function f(e,t,r,n,i,a,o,f,m,v,g){var x,b,w=a/m,_=o/v,M=a/2,S=o/2,T=f/2,E=m+1,A=v+1,L=0,R=0,P=new y;for(b=0;b<A;b++){var C=b*_-S;for(x=0;x<E;x++){var O=x*w-M;P[e]=O*n,P[t]=C*i,P[r]=T,l.push(P.x,P.y,P.z),P[e]=0,P[t]=0,P[r]=f>0?1:-1,u.push(P.x,P.y,P.z),h.push(x/m),h.push(1-b/v),L+=1}}for(b=0;b<v;b++)for(x=0;x<m;x++){var I=d+x+E*b,D=d+x+E*(b+1),N=d+(x+1)+E*(b+1),B=d+(x+1)+E*b;c.push(I,D,B),c.push(D,N,B),R+=6}s.addGroup(p,R,g),p+=R,d+=L}f("z","y","x",-1,-1,n,r,t,o,a,0),f("z","y","x",1,-1,n,r,-t,o,a,1),f("x","z","y",1,1,t,n,r,i,o,2),f("x","z","y",1,-1,t,n,-r,i,o,3),f("x","y","z",1,-1,t,r,n,i,a,4),f("x","y","z",-1,-1,t,r,-n,i,a,5),this.setIndex(c),this.addAttribute("position",new tt(l,3)),this.addAttribute("normal",new tt(u,3)),this.addAttribute("uv",new tt(h,2))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(dt);function Gt(e){var t={};for(var r in e)for(var n in t[r]={},e[r]){var i=e[r][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?t[r][n]=i.clone():Array.isArray(i)?t[r][n]=i.slice():t[r][n]=i}return t}function kt(e){for(var t={},r=0;r<e.length;r++){var n=Gt(e[r]);for(var i in n)t[i]=n[i]}return t}var Ht={clone:Gt,merge:kt};function jt(e){We.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function Vt(){$.call(this),this.type="Camera",this.matrixWorldInverse=new N,this.projectionMatrix=new N,this.projectionMatrixInverse=new N}function Wt(e,t,r,n){Vt.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==r?r:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}jt.prototype=Object.create(We.prototype),jt.prototype.constructor=jt,jt.prototype.isShaderMaterial=!0,jt.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Gt(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},jt.prototype.toJSON=function(e){var t=We.prototype.toJSON.call(this,e);for(var r in t.uniforms={},this.uniforms){var n=this.uniforms[r].value;n&&n.isTexture?t.uniforms[r]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[r]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[r]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[r]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[r]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[r]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[r]={type:"m4",value:n.toArray()}:t.uniforms[r]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var i={};for(var a in this.extensions)!0===this.extensions[a]&&(i[a]=!0);return Object.keys(i).length>0&&(t.extensions=i),t},Vt.prototype=Object.assign(Object.create($.prototype),{constructor:Vt,isCamera:!0,copy:function(e,t){return $.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new y),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){$.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Wt.prototype=Object.assign(Object.create(Vt.prototype),{constructor:Wt,isPerspectiveCamera:!0,copy:function(e,t){return Vt.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*p.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*p.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*p.RAD2DEG*Math.atan(Math.tan(.5*p.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,r,n,i,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*p.DEG2RAD*this.fov)/this.zoom,r=2*t,n=this.aspect*r,i=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*n/o,t-=a.offsetY*r/s,n*=a.width/o,r*=a.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,t,t-r,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});function qt(e,t,r,n){$.call(this),this.type="CubeCamera";var i=new Wt(90,1,e,t);i.up.set(0,-1,0),i.lookAt(new y(1,0,0)),this.add(i);var a=new Wt(90,1,e,t);a.up.set(0,-1,0),a.lookAt(new y(-1,0,0)),this.add(a);var o=new Wt(90,1,e,t);o.up.set(0,0,1),o.lookAt(new y(0,1,0)),this.add(o);var s=new Wt(90,1,e,t);s.up.set(0,0,-1),s.lookAt(new y(0,-1,0)),this.add(s);var c=new Wt(90,1,e,t);c.up.set(0,-1,0),c.lookAt(new y(0,0,1)),this.add(c);var l=new Wt(90,1,e,t);l.up.set(0,-1,0),l.lookAt(new y(0,0,-1)),this.add(l),n=n||{format:1022,magFilter:1006,minFilter:1006},this.renderTarget=new Xt(r,r,n),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var r=e.getRenderTarget(),n=this.renderTarget,u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,a),e.setRenderTarget(n,2),e.render(t,o),e.setRenderTarget(n,3),e.render(t,s),e.setRenderTarget(n,4),e.render(t,c),n.texture.generateMipmaps=u,e.setRenderTarget(n,5),e.render(t,l),e.setRenderTarget(r)},this.clear=function(e,t,r,n){for(var i=e.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)e.setRenderTarget(a,o),e.clear(t,r,n);e.setRenderTarget(i)}}function Xt(e,t,r){E.call(this,e,t,r)}function Yt(e,t,r,n,i,a,o,s,c,l,u,h){S.call(this,null,a,o,s,c,l,n,i,u,h),this.image={data:e||null,width:t||1,height:r||1},this.magFilter=void 0!==c?c:1003,this.minFilter=void 0!==l?l:1003,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}qt.prototype=Object.create($.prototype),qt.prototype.constructor=qt,Xt.prototype=Object.create(E.prototype),Xt.prototype.constructor=Xt,Xt.prototype.isWebGLRenderTargetCube=!0,Xt.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=t.format,this.texture.encoding=t.encoding;var r=new ee,n={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},i=new jt({type:"CubemapFromEquirect",uniforms:Gt(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});i.uniforms.tEquirect.value=t;var a=new Pt(new Ft(5,5,5),i);r.add(a);var o=new qt(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(e,r),a.geometry.dispose(),a.material.dispose(),this},Yt.prototype=Object.create(S.prototype),Yt.prototype.constructor=Yt,Yt.prototype.isDataTexture=!0;var Zt=new y,Jt=new y,Kt=new w;function Qt(e,t){this.normal=void 0!==e?e:new y(1,0,0),this.constant=void 0!==t?t:0}Object.assign(Qt.prototype,{isPlane:!0,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,r,n){return this.normal.set(e,t,r),this.constant=n,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(e,t,r){var n=Zt.subVectors(r,t).cross(Jt.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new y),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(e,t){void 0===t&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new y);var r=e.delta(Zt),n=this.normal.dot(r);if(0===n)return 0===this.distanceToPoint(e.start)?t.copy(e.start):void 0;var i=-(e.start.dot(this.normal)+this.constant)/n;return i<0||i>1?void 0:t.copy(r).multiplyScalar(i).add(e.start)},intersectsLine:function(e){var t=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return t<0&&r>0||r<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new y),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(e,t){var r=t||Kt.getNormalMatrix(e),n=this.coplanarPoint(Zt).applyMatrix4(e),i=this.normal.applyMatrix3(r).normalize();return this.constant=-n.dot(i),this},translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}});var $t=new ve,er=new y;function tr(e,t,r,n,i,a){this.planes=[void 0!==e?e:new Qt,void 0!==t?t:new Qt,void 0!==r?r:new Qt,void 0!==n?n:new Qt,void 0!==i?i:new Qt,void 0!==a?a:new Qt]}Object.assign(tr.prototype,{set:function(e,t,r,n,i,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(r),o[3].copy(n),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,r=0;r<6;r++)t[r].copy(e.planes[r]);return this},setFromMatrix:function(e){var t=this.planes,r=e.elements,n=r[0],i=r[1],a=r[2],o=r[3],s=r[4],c=r[5],l=r[6],u=r[7],h=r[8],d=r[9],p=r[10],f=r[11],m=r[12],v=r[13],g=r[14],y=r[15];return t[0].setComponents(o-n,u-s,f-h,y-m).normalize(),t[1].setComponents(o+n,u+s,f+h,y+m).normalize(),t[2].setComponents(o+i,u+c,f+d,y+v).normalize(),t[3].setComponents(o-i,u-c,f-d,y-v).normalize(),t[4].setComponents(o-a,u-l,f-p,y-g).normalize(),t[5].setComponents(o+a,u+l,f+p,y+g).normalize(),this},intersectsObject:function(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),$t.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere($t)},intersectsSprite:function(e){return $t.center.set(0,0,0),$t.radius=.7071067811865476,$t.applyMatrix4(e.matrixWorld),this.intersectsSphere($t)},intersectsSphere:function(e){for(var t=this.planes,r=e.center,n=-e.radius,i=0;i<6;i++){if(t[i].distanceToPoint(r)<n)return!1}return!0},intersectsBox:function(e){for(var t=this.planes,r=0;r<6;r++){var n=t[r];if(er.x=n.normal.x>0?e.max.x:e.min.x,er.y=n.normal.y>0?e.max.y:e.min.y,er.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(er)<0)return!1}return!0},containsPoint:function(e){for(var t=this.planes,r=0;r<6;r++)if(t[r].distanceToPoint(e)<0)return!1;return!0}});var rr={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 1.0 ? log2( vFragDepth ) * logDepthBufFC * 0.5 : gl_FragCoord.z;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy *= normalScale;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = clearcoatNormalScale * mapN.xy;\n\t\tclearcoatNormal = normalize( vTBN * mapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\n\t#endif\n#endif",clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#ifdef USE_UV\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},nr={common:{diffuse:{value:new Fe(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new w},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new f(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Fe(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Fe(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new w}},sprite:{diffuse:{value:new Fe(15658734)},opacity:{value:1},center:{value:new f(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new w}}},ir={basic:{uniforms:kt([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.fog]),vertexShader:rr.meshbasic_vert,fragmentShader:rr.meshbasic_frag},lambert:{uniforms:kt([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.fog,nr.lights,{emissive:{value:new Fe(0)}}]),vertexShader:rr.meshlambert_vert,fragmentShader:rr.meshlambert_frag},phong:{uniforms:kt([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.gradientmap,nr.fog,nr.lights,{emissive:{value:new Fe(0)},specular:{value:new Fe(1118481)},shininess:{value:30}}]),vertexShader:rr.meshphong_vert,fragmentShader:rr.meshphong_frag},standard:{uniforms:kt([nr.common,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.roughnessmap,nr.metalnessmap,nr.fog,nr.lights,{emissive:{value:new Fe(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:rr.meshphysical_vert,fragmentShader:rr.meshphysical_frag},matcap:{uniforms:kt([nr.common,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.fog,{matcap:{value:null}}]),vertexShader:rr.meshmatcap_vert,fragmentShader:rr.meshmatcap_frag},points:{uniforms:kt([nr.points,nr.fog]),vertexShader:rr.points_vert,fragmentShader:rr.points_frag},dashed:{uniforms:kt([nr.common,nr.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:rr.linedashed_vert,fragmentShader:rr.linedashed_frag},depth:{uniforms:kt([nr.common,nr.displacementmap]),vertexShader:rr.depth_vert,fragmentShader:rr.depth_frag},normal:{uniforms:kt([nr.common,nr.bumpmap,nr.normalmap,nr.displacementmap,{opacity:{value:1}}]),vertexShader:rr.normal_vert,fragmentShader:rr.normal_frag},sprite:{uniforms:kt([nr.sprite,nr.fog]),vertexShader:rr.sprite_vert,fragmentShader:rr.sprite_frag},background:{uniforms:{uvTransform:{value:new w},t2D:{value:null}},vertexShader:rr.background_vert,fragmentShader:rr.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:rr.cube_vert,fragmentShader:rr.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:rr.equirect_vert,fragmentShader:rr.equirect_frag},distanceRGBA:{uniforms:kt([nr.common,nr.displacementmap,{referencePosition:{value:new y},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:rr.distanceRGBA_vert,fragmentShader:rr.distanceRGBA_frag},shadow:{uniforms:kt([nr.lights,nr.fog,{color:{value:new Fe(0)},opacity:{value:1}}]),vertexShader:rr.shadow_vert,fragmentShader:rr.shadow_frag}};function ar(){var e=null,t=!1,r=null;function n(i,a){!1!==t&&(r(i,a),e.requestAnimationFrame(n))}return{start:function(){!0!==t&&null!==r&&(e.requestAnimationFrame(n),t=!0)},stop:function(){t=!1},setAnimationLoop:function(e){r=e},setContext:function(t){e=t}}}function or(e){var t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(r){r.isInterleavedBufferAttribute&&(r=r.data);var n=t.get(r);n&&(e.deleteBuffer(n.buffer),t.delete(r))},update:function(r,n){r.isInterleavedBufferAttribute&&(r=r.data);var i=t.get(r);void 0===i?t.set(r,function(t,r){var n=t.array,i=t.dynamic?35048:35044,a=e.createBuffer();e.bindBuffer(r,a),e.bufferData(r,n,i),t.onUploadCallback();var o=5126;return n instanceof Float32Array?o=5126:n instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):n instanceof Uint16Array?o=5123:n instanceof Int16Array?o=5122:n instanceof Uint32Array?o=5125:n instanceof Int32Array?o=5124:n instanceof Int8Array?o=5120:n instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:n.BYTES_PER_ELEMENT,version:t.version}}(r,n)):i.version<r.version&&(!function(t,r,n){var i=r.array,a=r.updateRange;e.bindBuffer(n,t),!1===r.dynamic?e.bufferData(n,i,35044):-1===a.count?e.bufferSubData(n,0,i):0===a.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(n,a.offset*i.BYTES_PER_ELEMENT,i.subarray(a.offset,a.offset+a.count)),a.count=-1)}(i.buffer,r,n),i.version=r.version)}}}function sr(e,t,r,n){zt.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n},this.fromBufferGeometry(new cr(e,t,r,n)),this.mergeVertices()}function cr(e,t,r,n){dt.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n};var i,a,o=(e=e||1)/2,s=(t=t||1)/2,c=Math.floor(r)||1,l=Math.floor(n)||1,u=c+1,h=l+1,d=e/c,p=t/l,f=[],m=[],v=[],g=[];for(a=0;a<h;a++){var y=a*p-s;for(i=0;i<u;i++){var x=i*d-o;m.push(x,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-a/l)}}for(a=0;a<l;a++)for(i=0;i<c;i++){var b=i+u*a,w=i+u*(a+1),_=i+1+u*(a+1),M=i+1+u*a;f.push(b,w,M),f.push(w,_,M)}this.setIndex(f),this.addAttribute("position",new tt(m,3)),this.addAttribute("normal",new tt(v,3)),this.addAttribute("uv",new tt(g,2))}function lr(e,t,r,n){var i,a,o=new Fe(0),s=0,c=null,l=0;function u(e,r){t.buffers.color.setClear(e.r,e.g,e.b,r,n)}return{getClearColor:function(){return o},setClearColor:function(e,t){o.set(e),u(o,s=void 0!==t?t:1)},getClearAlpha:function(){return s},setClearAlpha:function(e){u(o,s=e)},render:function(t,n,h,d){var p=n.background,f=e.vr,m=f.getSession&&f.getSession();if(m&&"additive"===m.environmentBlendMode&&(p=null),null===p?(u(o,s),c=null,l=0):p&&p.isColor&&(u(p,1),d=!0,c=null,l=0),(e.autoClear||d)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),p&&(p.isCubeTexture||p.isWebGLRenderTargetCube)){void 0===a&&((a=new Pt(new Ft(1,1,1),new jt({type:"BackgroundCubeMaterial",uniforms:Gt(ir.cube.uniforms),vertexShader:ir.cube.vertexShader,fragmentShader:ir.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)},Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.tCube.value}}),r.update(a));var v=p.isWebGLRenderTargetCube?p.texture:p;a.material.uniforms.tCube.value=v,a.material.uniforms.tFlip.value=p.isWebGLRenderTargetCube?1:-1,c===p&&l===v.version||(a.material.needsUpdate=!0,c=p,l=v.version),t.unshift(a,a.geometry,a.material,0,0,null)}else p&&p.isTexture&&(void 0===i&&((i=new Pt(new cr(2,2),new jt({type:"BackgroundMaterial",uniforms:Gt(ir.background.uniforms),vertexShader:ir.background.vertexShader,fragmentShader:ir.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(i)),i.material.uniforms.t2D.value=p,!0===p.matrixAutoUpdate&&p.updateMatrix(),i.material.uniforms.uvTransform.value.copy(p.matrix),c===p&&l===p.version||(i.material.needsUpdate=!0,c=p,l=p.version),t.unshift(i,i.geometry,i.material,0,0,null))}}}function ur(e,t,r,n){var i;this.setMode=function(e){i=e},this.render=function(t,n){e.drawArrays(i,t,n),r.update(n,i)},this.renderInstances=function(a,o,s,c){if(0!==c){var l,u;if(n.isWebGL2)l=e,u="drawArraysInstanced";else if(u="drawArraysInstancedANGLE",null===(l=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[u](i,o,s,c),r.update(s,i,c)}}}function hr(e,t,r){var n;function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext,o=void 0!==r.precision?r.precision:"highp",s=i(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var c=!0===r.logarithmicDepthBuffer,l=e.getParameter(34930),u=e.getParameter(35660),h=e.getParameter(3379),d=e.getParameter(34076),p=e.getParameter(34921),f=e.getParameter(36347),m=e.getParameter(36348),v=e.getParameter(36349),g=u>0,y=a||!!t.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==n)return n;var r=t.get("EXT_texture_filter_anisotropic");return n=null!==r?e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:c,maxTextures:l,maxVertexTextures:u,maxTextureSize:h,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:a?e.getParameter(36183):0}}function dr(){var e=this,t=null,r=0,n=!1,i=!1,a=new Qt,o=new w,s={value:null,needsUpdate:!1};function c(){s.value!==t&&(s.value=t,s.needsUpdate=r>0),e.numPlanes=r,e.numIntersection=0}function l(t,r,n,i){var c=null!==t?t.length:0,l=null;if(0!==c){if(l=s.value,!0!==i||null===l){var u=n+4*c,h=r.matrixWorldInverse;o.getNormalMatrix(h),(null===l||l.length<u)&&(l=new Float32Array(u));for(var d=0,p=n;d!==c;++d,p+=4)a.copy(t[d]).applyMatrix4(h,o),a.normal.toArray(l,p),l[p+3]=a.constant}s.value=l,s.needsUpdate=!0}return e.numPlanes=c,l}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(e,i,a){var o=0!==e.length||i||0!==r||n;return n=i,t=l(e,a,0),r=e.length,o},this.beginShadows=function(){i=!0,l(null)},this.endShadows=function(){i=!1,c()},this.setState=function(e,a,o,u,h,d){if(!n||null===e||0===e.length||i&&!o)i?l(null):c();else{var p=i?0:r,f=4*p,m=h.clippingState||null;s.value=m,m=l(e,u,f,d);for(var v=0;v!==f;++v)m[v]=t[v];h.clippingState=m,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=p}}}function pr(e){var t={};return{get:function(r){if(void 0!==t[r])return t[r];var n;switch(r){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(r)}return null===n&&console.warn("THREE.WebGLRenderer: "+r+" extension not supported."),t[r]=n,n}}}function fr(e,t,r){var n=new WeakMap,i=new WeakMap;function a(e){var o=e.target,s=n.get(o);for(var c in null!==s.index&&t.remove(s.index),s.attributes)t.remove(s.attributes[c]);o.removeEventListener("dispose",a),n.delete(o);var l=i.get(s);l&&(t.remove(l),i.delete(s)),r.memory.geometries--}function o(e){var r=[],n=e.index,a=e.attributes.position,o=0;if(null!==n){var s=n.array;o=n.version;for(var c=0,l=s.length;c<l;c+=3){var u=s[c+0],h=s[c+1],d=s[c+2];r.push(u,h,h,d,d,u)}}else{s=a.array;o=a.version;for(c=0,l=s.length/3-1;c<l;c+=3){u=c+0,h=c+1,d=c+2;r.push(u,h,h,d,d,u)}}var p=new(it(r)>65535?et:Qe)(r,1);p.version=o,t.update(p,34963);var f=i.get(e);f&&t.remove(f),i.set(e,p)}return{get:function(e,t){var i=n.get(t);return i||(t.addEventListener("dispose",a),t.isBufferGeometry?i=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new dt).setFromObject(e)),i=t._bufferGeometry),n.set(t,i),r.memory.geometries++,i)},update:function(e){var r=e.index,n=e.attributes;for(var i in null!==r&&t.update(r,34963),n)t.update(n[i],34962);var a=e.morphAttributes;for(var i in a)for(var o=a[i],s=0,c=o.length;s<c;s++)t.update(o[s],34962)},getWireframeAttribute:function(e){var t=i.get(e);if(t){var r=e.index;null!==r&&t.version<r.version&&o(e)}else o(e);return i.get(e)}}}function mr(e,t,r,n){var i,a,o;this.setMode=function(e){i=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,n){e.drawElements(i,n,a,t*o),r.update(n,i)},this.renderInstances=function(s,c,l,u){if(0!==u){var h,d;if(n.isWebGL2)h=e,d="drawElementsInstanced";else if(d="drawElementsInstancedANGLE",null===(h=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[d](i,l,a,c*o,u),r.update(l,i,u)}}}function vr(e){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,r,n){switch(n=n||1,t.calls++,r){case 4:t.triangles+=n*(e/3);break;case 5:case 6:t.triangles+=n*(e-2);break;case 1:t.lines+=n*(e/2);break;case 3:t.lines+=n*(e-1);break;case 2:t.lines+=n*e;break;case 0:t.points+=n*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}function gr(e,t){return Math.abs(t[1])-Math.abs(e[1])}function yr(e){var t={},r=new Float32Array(8);return{update:function(n,i,a,o){var s=n.morphTargetInfluences,c=s.length,l=t[i.id];if(void 0===l){l=[];for(var u=0;u<c;u++)l[u]=[u,0];t[i.id]=l}var h=a.morphTargets&&i.morphAttributes.position,d=a.morphNormals&&i.morphAttributes.normal;for(u=0;u<c;u++){0!==(p=l[u])[1]&&(h&&i.removeAttribute("morphTarget"+u),d&&i.removeAttribute("morphNormal"+u))}for(u=0;u<c;u++){(p=l[u])[0]=u,p[1]=s[u]}for(l.sort(gr),u=0;u<8;u++){var p;if(p=l[u]){var f=p[0],m=p[1];if(m){h&&i.addAttribute("morphTarget"+u,h[f]),d&&i.addAttribute("morphNormal"+u,d[f]),r[u]=m;continue}}r[u]=0}o.getUniforms().setValue(e,"morphTargetInfluences",r)}}}function xr(e,t,r,n){var i={};return{update:function(e){var a=n.render.frame,o=e.geometry,s=t.get(e,o);return i[s.id]!==a&&(o.isGeometry&&s.updateFromObject(e),t.update(s),i[s.id]=a),e.isInstancedMesh&&r.update(e.instanceMatrix,34962),s},dispose:function(){i={}}}}function br(e,t,r,n,i,a,o,s,c,l){e=void 0!==e?e:[],t=void 0!==t?t:301,o=void 0!==o?o:1022,S.call(this,e,t,r,n,i,a,o,s,c,l),this.flipY=!1}function wr(e,t,r,n){S.call(this,null),this.image={data:e||null,width:t||1,height:r||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function _r(e,t,r,n){S.call(this,null),this.image={data:e||null,width:t||1,height:r||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}ir.physical={uniforms:kt([ir.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},sheen:{value:new Fe(0)},clearcoatNormalScale:{value:new f(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:rr.meshphysical_vert,fragmentShader:rr.meshphysical_frag},sr.prototype=Object.create(zt.prototype),sr.prototype.constructor=sr,cr.prototype=Object.create(dt.prototype),cr.prototype.constructor=cr,br.prototype=Object.create(S.prototype),br.prototype.constructor=br,br.prototype.isCubeTexture=!0,Object.defineProperty(br.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),wr.prototype=Object.create(S.prototype),wr.prototype.constructor=wr,wr.prototype.isDataTexture2DArray=!0,_r.prototype=Object.create(S.prototype),_r.prototype.constructor=_r,_r.prototype.isDataTexture3D=!0;var Mr=new S,Sr=new wr,Tr=new _r,Er=new br,Ar=[],Lr=[],Rr=new Float32Array(16),Pr=new Float32Array(9),Cr=new Float32Array(4);function Or(e,t,r){var n=e[0];if(n<=0||n>0)return e;var i=t*r,a=Ar[i];if(void 0===a&&(a=new Float32Array(i),Ar[i]=a),0!==t){n.toArray(a,0);for(var o=1,s=0;o!==t;++o)s+=r,e[o].toArray(a,s)}return a}function Ir(e,t){if(e.length!==t.length)return!1;for(var r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}function Dr(e,t){for(var r=0,n=t.length;r<n;r++)e[r]=t[r]}function Nr(e,t){var r=Lr[t];void 0===r&&(r=new Int32Array(t),Lr[t]=r);for(var n=0;n!==t;++n)r[n]=e.allocateTextureUnit();return r}function Br(e,t){var r=this.cache;r[0]!==t&&(e.uniform1f(this.addr,t),r[0]=t)}function zr(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),r[0]=t.x,r[1]=t.y);else{if(Ir(r,t))return;e.uniform2fv(this.addr,t),Dr(r,t)}}function Ur(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y&&r[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),r[0]=t.x,r[1]=t.y,r[2]=t.z);else if(void 0!==t.r)r[0]===t.r&&r[1]===t.g&&r[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),r[0]=t.r,r[1]=t.g,r[2]=t.b);else{if(Ir(r,t))return;e.uniform3fv(this.addr,t),Dr(r,t)}}function Fr(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y&&r[2]===t.z&&r[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),r[0]=t.x,r[1]=t.y,r[2]=t.z,r[3]=t.w);else{if(Ir(r,t))return;e.uniform4fv(this.addr,t),Dr(r,t)}}function Gr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix2fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Cr.set(n),e.uniformMatrix2fv(this.addr,!1,Cr),Dr(r,n)}}function kr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix3fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Pr.set(n),e.uniformMatrix3fv(this.addr,!1,Pr),Dr(r,n)}}function Hr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix4fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Rr.set(n),e.uniformMatrix4fv(this.addr,!1,Rr),Dr(r,n)}}function jr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.safeSetTexture2D(t||Mr,i)}function Vr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.setTexture2DArray(t||Sr,i)}function Wr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.setTexture3D(t||Tr,i)}function qr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.safeSetTextureCube(t||Er,i)}function Xr(e,t){var r=this.cache;r[0]!==t&&(e.uniform1i(this.addr,t),r[0]=t)}function Yr(e,t){var r=this.cache;Ir(r,t)||(e.uniform2iv(this.addr,t),Dr(r,t))}function Zr(e,t){var r=this.cache;Ir(r,t)||(e.uniform3iv(this.addr,t),Dr(r,t))}function Jr(e,t){var r=this.cache;Ir(r,t)||(e.uniform4iv(this.addr,t),Dr(r,t))}function Kr(e,t){e.uniform1fv(this.addr,t)}function Qr(e,t){e.uniform1iv(this.addr,t)}function $r(e,t){e.uniform2iv(this.addr,t)}function en(e,t){e.uniform3iv(this.addr,t)}function tn(e,t){e.uniform4iv(this.addr,t)}function rn(e,t){var r=Or(t,this.size,2);e.uniform2fv(this.addr,r)}function nn(e,t){var r=Or(t,this.size,3);e.uniform3fv(this.addr,r)}function an(e,t){var r=Or(t,this.size,4);e.uniform4fv(this.addr,r)}function on(e,t){var r=Or(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,r)}function sn(e,t){var r=Or(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,r)}function cn(e,t){var r=Or(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,r)}function ln(e,t,r){var n=t.length,i=Nr(r,n);e.uniform1iv(this.addr,i);for(var a=0;a!==n;++a)r.safeSetTexture2D(t[a]||Mr,i[a])}function un(e,t,r){var n=t.length,i=Nr(r,n);e.uniform1iv(this.addr,i);for(var a=0;a!==n;++a)r.safeSetTextureCube(t[a]||Er,i[a])}function hn(e,t,r){this.id=e,this.addr=r,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Br;case 35664:return zr;case 35665:return Ur;case 35666:return Fr;case 35674:return Gr;case 35675:return kr;case 35676:return Hr;case 35678:case 36198:return jr;case 35679:return Wr;case 35680:return qr;case 36289:return Vr;case 5124:case 35670:return Xr;case 35667:case 35671:return Yr;case 35668:case 35672:return Zr;case 35669:case 35673:return Jr}}(t.type)}function dn(e,t,r){this.id=e,this.addr=r,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Kr;case 35664:return rn;case 35665:return nn;case 35666:return an;case 35674:return on;case 35675:return sn;case 35676:return cn;case 35678:return ln;case 35680:return un;case 5124:case 35670:return Qr;case 35667:case 35671:return $r;case 35668:case 35672:return en;case 35669:case 35673:return tn}}(t.type)}function pn(e){this.id=e,this.seq=[],this.map={}}dn.prototype.updateCache=function(e){var t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),Dr(t,e)},pn.prototype.setValue=function(e,t,r){for(var n=this.seq,i=0,a=n.length;i!==a;++i){var o=n[i];o.setValue(e,t[o.id],r)}};var fn=/([\w\d_]+)(\])?(\[|\.)?/g;function mn(e,t){e.seq.push(t),e.map[t.id]=t}function vn(e,t,r){var n=e.name,i=n.length;for(fn.lastIndex=0;;){var a=fn.exec(n),o=fn.lastIndex,s=a[1],c="]"===a[2],l=a[3];if(c&&(s|=0),void 0===l||"["===l&&o+2===i){mn(r,void 0===l?new hn(s,e,t):new dn(s,e,t));break}var u=r.map[s];void 0===u&&mn(r,u=new pn(s)),r=u}}function gn(e,t){this.seq=[],this.map={};for(var r=e.getProgramParameter(t,35718),n=0;n<r;++n){var i=e.getActiveUniform(t,n);vn(i,e.getUniformLocation(t,i.name),this)}}function yn(e,t,r){var n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}gn.prototype.setValue=function(e,t,r,n){var i=this.map[t];void 0!==i&&i.setValue(e,r,n)},gn.prototype.setOptional=function(e,t,r){var n=t[r];void 0!==n&&this.setValue(e,r,n)},gn.upload=function(e,t,r,n){for(var i=0,a=t.length;i!==a;++i){var o=t[i],s=r[o.id];!1!==s.needsUpdate&&o.setValue(e,s.value,n)}},gn.seqWithValue=function(e,t){for(var r=[],n=0,i=e.length;n!==i;++n){var a=e[n];a.id in t&&r.push(a)}return r};var xn=0;function bn(e){switch(e){case 3e3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+e)}}function wn(e,t,r){var n=e.getShaderParameter(t,35713),i=e.getShaderInfoLog(t).trim();return n&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+r+"\n"+i+function(e){for(var t=e.split("\n"),r=0;r<t.length;r++)t[r]=r+1+": "+t[r];return t.join("\n")}(e.getShaderSource(t))}function _n(e,t){var r=bn(t);return"vec4 "+e+"( vec4 value ) { return "+r[0]+"ToLinear"+r[1]+"; }"}function Mn(e,t){var r=bn(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+r[0]+r[1]+"; }"}function Sn(e,t){var r;switch(t){case 1:r="Linear";break;case 2:r="Reinhard";break;case 3:r="Uncharted2";break;case 4:r="OptimizedCineon";break;case 5:r="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+r+"ToneMapping( color ); }"}function Tn(e){return""!==e}function En(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function An(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}var Ln=/^[ \t]*#include +<([\w\d./]+)>/gm;function Rn(e){return e.replace(Ln,Pn)}function Pn(e,t){var r=rr[t];if(void 0===r)throw new Error("Can not resolve #include <"+t+">");return Rn(r)}var Cn=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;function On(e){return e.replace(Cn,In)}function In(e,t,r,n){for(var i="",a=parseInt(t);a<parseInt(r);a++)i+=n.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return i}function Dn(e){var t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Nn(e,t,r,n,i,a){var o,s,c=e.getContext(),l=n.defines,u=i.vertexShader,h=i.fragmentShader,d=function(e){var t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(a),p=function(e,t){var r="ENVMAP_TYPE_CUBE";if(e.envMap)switch(t.envMap.mapping){case 301:case 302:r="ENVMAP_TYPE_CUBE";break;case 306:case 307:r="ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:r="ENVMAP_TYPE_EQUIREC";break;case 305:r="ENVMAP_TYPE_SPHERE"}return r}(a,n),f=function(e,t){var r="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(t.envMap.mapping){case 302:case 304:r="ENVMAP_MODE_REFRACTION"}return r}(a,n),m=function(e,t){var r="ENVMAP_BLENDING_MULTIPLY";if(e.envMap)switch(t.combine){case 0:r="ENVMAP_BLENDING_MULTIPLY";break;case 1:r="ENVMAP_BLENDING_MIX";break;case 2:r="ENVMAP_BLENDING_ADD"}return r}(a,n),v=e.gammaFactor>0?e.gammaFactor:1,g=a.isWebGL2?"":function(e,t,r){return[(e=e||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&r.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&r.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&r.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Tn).join("\n")}(n.extensions,a,t),y=function(e){var t=[];for(var r in e){var n=e[r];!1!==n&&t.push("#define "+r+" "+n)}return t.join("\n")}(l),x=c.createProgram(),b=e.getRenderTarget(),w=b&&b.isWebGLMultiviewRenderTarget?b.numViews:0;if(n.isRawShaderMaterial?((o=[y].filter(Tn).join("\n")).length>0&&(o+="\n"),(s=[g,y].filter(Tn).join("\n")).length>0&&(s+="\n")):(o=[Dn(a),"#define SHADER_NAME "+i.name,y,a.instancing?"#define USE_INSTANCING":"",a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+v,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+f:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+d:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Tn).join("\n"),s=[g,Dn(a),"#define SHADER_NAME "+i.name,y,a.alphaTest?"#define ALPHATEST "+a.alphaTest+(a.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+v,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+p:"",a.envMap?"#define "+f:"",a.envMap?"#define "+m:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.sheen?"#define USE_SHEEN":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+d:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensions&&n.extensions.shaderTextureLOD||a.envMap)&&(a.isWebGL2||t.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",0!==a.toneMapping?"#define TONE_MAPPING":"",0!==a.toneMapping?rr.tonemapping_pars_fragment:"",0!==a.toneMapping?Sn("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.matcapEncoding||a.envMapEncoding||a.emissiveMapEncoding?rr.encodings_pars_fragment:"",a.mapEncoding?_n("mapTexelToLinear",a.mapEncoding):"",a.matcapEncoding?_n("matcapTexelToLinear",a.matcapEncoding):"",a.envMapEncoding?_n("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?_n("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?Mn("linearToOutputTexel",a.outputEncoding):"",a.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Tn).join("\n")),u=An(u=En(u=Rn(u),a),a),h=An(h=En(h=Rn(h),a),a),u=On(u),h=On(h),a.isWebGL2&&!n.isRawShaderMaterial){var _=!1,M=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==u.match(M)&&null!==h.match(M)&&(_=!0,u=u.replace(M,""),h=h.replace(M,"")),o=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+o,s=["#version 300 es\n","#define varying in",_?"":"out highp vec4 pc_fragColor;",_?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+s,w>0&&(o=(o=o.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","layout(num_views = "+w+") in;","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace(["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;"].join("\n"),["uniform mat4 modelViewMatrices["+w+"];","uniform mat4 projectionMatrices["+w+"];","uniform mat4 viewMatrices["+w+"];","uniform mat3 normalMatrices["+w+"];","#define modelViewMatrix modelViewMatrices[VIEW_ID]","#define projectionMatrix projectionMatrices[VIEW_ID]","#define viewMatrix viewMatrices[VIEW_ID]","#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")),s=(s=s.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace("uniform mat4 viewMatrix;",["uniform mat4 viewMatrices["+w+"];","#define viewMatrix viewMatrices[VIEW_ID]"].join("\n")))}var S,T,E=s+h,A=yn(c,35633,o+u),L=yn(c,35632,E);if(c.attachShader(x,A),c.attachShader(x,L),void 0!==n.index0AttributeName?c.bindAttribLocation(x,0,n.index0AttributeName):!0===a.morphTargets&&c.bindAttribLocation(x,0,"position"),c.linkProgram(x),e.debug.checkShaderErrors){var R=c.getProgramInfoLog(x).trim(),P=c.getShaderInfoLog(A).trim(),C=c.getShaderInfoLog(L).trim(),O=!0,I=!0;if(!1===c.getProgramParameter(x,35714)){O=!1;var D=wn(c,A,"vertex"),N=wn(c,L,"fragment");console.error("THREE.WebGLProgram: shader error: ",c.getError(),"35715",c.getProgramParameter(x,35715),"gl.getProgramInfoLog",R,D,N)}else""!==R?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",R):""!==P&&""!==C||(I=!1);I&&(this.diagnostics={runnable:O,material:n,programLog:R,vertexShader:{log:P,prefix:o},fragmentShader:{log:C,prefix:s}})}return c.deleteShader(A),c.deleteShader(L),this.getUniforms=function(){return void 0===S&&(S=new gn(c,x)),S},this.getAttributes=function(){return void 0===T&&(T=function(e,t){for(var r={},n=e.getProgramParameter(t,35721),i=0;i<n;i++){var a=e.getActiveAttrib(t,i).name;r[a]=e.getAttribLocation(t,a)}return r}(c,x)),T},this.destroy=function(){c.deleteProgram(x),this.program=void 0},this.name=i.name,this.id=xn++,this.code=r,this.usedTimes=1,this.program=x,this.vertexShader=A,this.fragmentShader=L,this.numMultiviewViews=w,this}function Bn(e,t,r){var n=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},a=["precision","supportsVertexTextures","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function o(e,t){var r;return e?e.isTexture?r=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),r=e.texture.encoding):r=3e3,3e3===r&&t&&(r=3007),r}this.getParameters=function(t,n,a,s,c,l,u){var h=i[t.type],d=u.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(r.floatVertexTextures)return 1024;var n=r.maxVertexUniforms,i=Math.floor((n-20)/4),a=Math.min(i,t.length);return a<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+a+"."),0):a}(u):0,p=r.precision;null!==t.precision&&(p=r.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",p,"instead.");var f=e.getRenderTarget();return{isWebGL2:r.isWebGL2,shaderID:h,precision:p,instancing:!0===u.isInstancedMesh,supportsVertexTextures:r.vertexTextures,outputEncoding:o(f?f.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:o(t.map,e.gammaInput),matcap:!!t.matcap,matcapEncoding:o(t.matcap,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:o(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(306===t.envMap.mapping||307===t.envMap.mapping),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:o(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:1===t.normalMapType,tangentSpaceNormalMap:0===t.normalMapType,clearcoatNormalMap:!!t.clearcoatNormalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,sheen:!!t.sheen,combine:t.combine,vertexTangents:t.normalMap&&t.vertexTangents,vertexColors:t.vertexColors,vertexUvs:!!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatNormalMap),fog:!!s,useFog:t.fog,fogExp2:s&&s.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:r.logarithmicDepthBuffer,skinning:t.skinning&&d>0,maxBones:d,useVertexTexture:r.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:n.directional.length,numPointLights:n.point.length,numSpotLights:n.spot.length,numRectAreaLights:n.rectArea.length,numHemiLights:n.hemi.length,numDirLightShadows:n.directionalShadowMap.length,numPointLightShadows:n.pointShadowMap.length,numSpotLightShadows:n.spotShadowMap.length,numClippingPlanes:c,numClipIntersection:l,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&a.length>0,shadowMapType:e.shadowMap.type,toneMapping:t.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:2===t.side,flipSided:1===t.side,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,r){var n=[];if(r.shaderID?n.push(r.shaderID):(n.push(t.fragmentShader),n.push(t.vertexShader)),void 0!==t.defines)for(var i in t.defines)n.push(i),n.push(t.defines[i]);for(var o=0;o<a.length;o++)n.push(r[a[o]]);return n.push(t.onBeforeCompile.toString()),n.push(e.gammaOutput),n.push(e.gammaFactor),n.join()},this.acquireProgram=function(r,i,a,o){for(var s,c=0,l=n.length;c<l;c++){var u=n[c];if(u.code===o){++(s=u).usedTimes;break}}return void 0===s&&(s=new Nn(e,t,o,r,i,a),n.push(s)),s},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=n.indexOf(e);n[t]=n[n.length-1],n.pop(),e.destroy()}},this.programs=n}function zn(){var e=new WeakMap;return{get:function(t){var r=e.get(t);return void 0===r&&(r={},e.set(t,r)),r},remove:function(t){e.delete(t)},update:function(t,r,n){e.get(t)[r]=n},dispose:function(){e=new WeakMap}}}function Un(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Fn(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Gn(){var e=[],t=0,r=[],n=[],i={id:-1};function a(r,n,a,o,s,c){var l=e[t];return void 0===l?(l={id:r.id,object:r,geometry:n,material:a,program:a.program||i,groupOrder:o,renderOrder:r.renderOrder,z:s,group:c},e[t]=l):(l.id=r.id,l.object=r,l.geometry=n,l.material=a,l.program=a.program||i,l.groupOrder=o,l.renderOrder=r.renderOrder,l.z=s,l.group=c),t++,l}return{opaque:r,transparent:n,init:function(){t=0,r.length=0,n.length=0},push:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?n:r).push(l)},unshift:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?n:r).unshift(l)},sort:function(){r.length>1&&r.sort(Un),n.length>1&&n.sort(Fn)}}}function kn(){var e=new WeakMap;function t(r){var n=r.target;n.removeEventListener("dispose",t),e.delete(n)}return{get:function(r,n){var i,a=e.get(r);return void 0===a?(i=new Gn,e.set(r,new WeakMap),e.get(r).set(n,i),r.addEventListener("dispose",t)):void 0===(i=a.get(n))&&(i=new Gn,a.set(n,i)),i},dispose:function(){e=new WeakMap}}}function Hn(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var r;switch(t.type){case"DirectionalLight":r={direction:new y,color:new Fe,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f};break;case"SpotLight":r={position:new y,direction:new y,color:new Fe,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f};break;case"PointLight":r={position:new y,color:new Fe,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":r={direction:new y,skyColor:new Fe,groundColor:new Fe};break;case"RectAreaLight":r={color:new Fe,position:new y,halfWidth:new y,halfHeight:new y}}return e[t.id]=r,r}}}var jn=0;function Vn(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function Wn(){for(var e=new Hn,t={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},r=0;r<9;r++)t.probe.push(new y);var n=new y,i=new N,a=new N;return{setup:function(r,o,s){for(var c=0,l=0,u=0,h=0;h<9;h++)t.probe[h].set(0,0,0);var d=0,p=0,f=0,m=0,v=0,g=0,y=0,x=0,b=s.matrixWorldInverse;r.sort(Vn),h=0;for(var w=r.length;h<w;h++){var _=r[h],M=_.color,S=_.intensity,T=_.distance,E=_.shadow&&_.shadow.map?_.shadow.map.texture:null;if(_.isAmbientLight)c+=M.r*S,l+=M.g*S,u+=M.b*S;else if(_.isLightProbe)for(var A=0;A<9;A++)t.probe[A].addScaledVector(_.sh.coefficients[A],S);else if(_.isDirectionalLight){if((R=e.get(_)).color.copy(_.color).multiplyScalar(_.intensity),R.direction.setFromMatrixPosition(_.matrixWorld),n.setFromMatrixPosition(_.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(b),R.shadow=_.castShadow,_.castShadow){var L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,t.directionalShadowMap[d]=E,t.directionalShadowMatrix[d]=_.shadow.matrix,g++}t.directional[d]=R,d++}else if(_.isSpotLight){if((R=e.get(_)).position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),R.color.copy(M).multiplyScalar(S),R.distance=T,R.direction.setFromMatrixPosition(_.matrixWorld),n.setFromMatrixPosition(_.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(b),R.coneCos=Math.cos(_.angle),R.penumbraCos=Math.cos(_.angle*(1-_.penumbra)),R.decay=_.decay,R.shadow=_.castShadow,_.castShadow){L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,t.spotShadowMap[f]=E,t.spotShadowMatrix[f]=_.shadow.matrix,x++}t.spot[f]=R,f++}else if(_.isRectAreaLight){(R=e.get(_)).color.copy(M).multiplyScalar(S),R.position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),a.identity(),i.copy(_.matrixWorld),i.premultiply(b),a.extractRotation(i),R.halfWidth.set(.5*_.width,0,0),R.halfHeight.set(0,.5*_.height,0),R.halfWidth.applyMatrix4(a),R.halfHeight.applyMatrix4(a),t.rectArea[m]=R,m++}else if(_.isPointLight){if((R=e.get(_)).position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),R.color.copy(_.color).multiplyScalar(_.intensity),R.distance=_.distance,R.decay=_.decay,R.shadow=_.castShadow,_.castShadow){L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,R.shadowCameraNear=L.camera.near,R.shadowCameraFar=L.camera.far,t.pointShadowMap[p]=E,t.pointShadowMatrix[p]=_.shadow.matrix,y++}t.point[p]=R,p++}else if(_.isHemisphereLight){var R;(R=e.get(_)).direction.setFromMatrixPosition(_.matrixWorld),R.direction.transformDirection(b),R.direction.normalize(),R.skyColor.copy(_.color).multiplyScalar(S),R.groundColor.copy(_.groundColor).multiplyScalar(S),t.hemi[v]=R,v++}}t.ambient[0]=c,t.ambient[1]=l,t.ambient[2]=u;var P=t.hash;P.directionalLength===d&&P.pointLength===p&&P.spotLength===f&&P.rectAreaLength===m&&P.hemiLength===v&&P.numDirectionalShadows===g&&P.numPointShadows===y&&P.numSpotShadows===x||(t.directional.length=d,t.spot.length=f,t.rectArea.length=m,t.point.length=p,t.hemi.length=v,t.directionalShadowMap.length=g,t.pointShadowMap.length=y,t.spotShadowMap.length=x,t.directionalShadowMatrix.length=g,t.pointShadowMatrix.length=y,t.spotShadowMatrix.length=x,P.directionalLength=d,P.pointLength=p,P.spotLength=f,P.rectAreaLength=m,P.hemiLength=v,P.numDirectionalShadows=g,P.numPointShadows=y,P.numSpotShadows=x,t.version=jn++)},state:t}}function qn(){var e=new Wn,t=[],r=[];return{init:function(){t.length=0,r.length=0},state:{lightsArray:t,shadowsArray:r,lights:e},setupLights:function(n){e.setup(t,r,n)},pushLight:function(e){t.push(e)},pushShadow:function(e){r.push(e)}}}function Xn(){var e=new WeakMap;function t(r){var n=r.target;n.removeEventListener("dispose",t),e.delete(n)}return{get:function(r,n){var i;return!1===e.has(r)?(i=new qn,e.set(r,new WeakMap),e.get(r).set(n,i),r.addEventListener("dispose",t)):!1===e.get(r).has(n)?(i=new qn,e.get(r).set(n,i)):i=e.get(r).get(n),i},dispose:function(){e=new WeakMap}}}function Yn(e){We.call(this),this.type="MeshDepthMaterial",this.depthPacking=3200,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}function Zn(e){We.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new y,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}Yn.prototype=Object.create(We.prototype),Yn.prototype.constructor=Yn,Yn.prototype.isMeshDepthMaterial=!0,Yn.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},Zn.prototype=Object.create(We.prototype),Zn.prototype.constructor=Zn,Zn.prototype.isMeshDistanceMaterial=!0,Zn.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this};function Jn(e,t,r){var n=new tr,i=new f,a=new f,o=new T,s=new Array(4),c=new Array(4),l={},u={0:1,1:0,2:2},h=new jt({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new f},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}"}),d=h.clone();d.defines.HORIZONAL_PASS=1;var p=new dt;p.addAttribute("position",new Xe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));for(var m=new Pt(p,h),v=0;4!==v;++v){var g=0!=(1&v),y=0!=(2&v),x=new Yn({depthPacking:3201,morphTargets:g,skinning:y});s[v]=x;var b=new Zn({morphTargets:g,skinning:y});c[v]=b}var w=this;function _(r,n){var i=t.update(m);h.uniforms.shadow_pass.value=r.map.texture,h.uniforms.resolution.value=r.mapSize,h.uniforms.radius.value=r.radius,e.setRenderTarget(r.mapPass),e.clear(),e.renderBufferDirect(n,null,i,h,m,null),d.uniforms.shadow_pass.value=r.mapPass.texture,d.uniforms.resolution.value=r.mapSize,d.uniforms.radius.value=r.radius,e.setRenderTarget(r.map),e.clear(),e.renderBufferDirect(n,null,i,d,m,null)}function M(t,r,n,i,a,o){var h=t.geometry,d=null,p=s,f=t.customDepthMaterial;if(n.isPointLight&&(p=c,f=t.customDistanceMaterial),f)d=f;else{var m=!1;r.morphTargets&&(h&&h.isBufferGeometry?m=h.morphAttributes&&h.morphAttributes.position&&h.morphAttributes.position.length>0:h&&h.isGeometry&&(m=h.morphTargets&&h.morphTargets.length>0)),t.isSkinnedMesh&&!1===r.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t);var v=0;m&&(v|=1),t.isSkinnedMesh&&r.skinning&&(v|=2),d=p[v]}if(e.localClippingEnabled&&!0===r.clipShadows&&0!==r.clippingPlanes.length){var g=d.uuid,y=r.uuid,x=l[g];void 0===x&&(x={},l[g]=x);var b=x[y];void 0===b&&(b=d.clone(),x[y]=b),d=b}return d.visible=r.visible,d.wireframe=r.wireframe,d.side=3===o?null!=r.shadowSide?r.shadowSide:r.side:null!=r.shadowSide?r.shadowSide:u[r.side],d.clipShadows=r.clipShadows,d.clippingPlanes=r.clippingPlanes,d.clipIntersection=r.clipIntersection,d.wireframeLinewidth=r.wireframeLinewidth,d.linewidth=r.linewidth,n.isPointLight&&d.isMeshDistanceMaterial&&(d.referencePosition.setFromMatrixPosition(n.matrixWorld),d.nearDistance=i,d.farDistance=a),d}function S(r,i,a,o,s){if(!1!==r.visible){if(r.layers.test(i.layers)&&(r.isMesh||r.isLine||r.isPoints)&&(r.castShadow||r.receiveShadow&&3===s)&&(!r.frustumCulled||n.intersectsObject(r))){r.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,r.matrixWorld);var c=t.update(r),l=r.material;if(Array.isArray(l))for(var u=c.groups,h=0,d=u.length;h<d;h++){var p=u[h],f=l[p.materialIndex];if(f&&f.visible){var m=M(r,f,o,a.near,a.far,s);e.renderBufferDirect(a,null,c,m,r,p)}}else if(l.visible){m=M(r,l,o,a.near,a.far,s);e.renderBufferDirect(a,null,c,m,r,null)}}for(var v=r.children,g=0,y=v.length;g<y;g++)S(v[g],i,a,o,s)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,s,c){if(!1!==w.enabled&&(!1!==w.autoUpdate||!1!==w.needsUpdate)&&0!==t.length){var l=e.getRenderTarget(),u=e.getActiveCubeFace(),h=e.getActiveMipmapLevel(),d=e.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,f=t.length;p<f;p++){var m=t[p],v=m.shadow;if(void 0!==v){i.copy(v.mapSize);var g=v.getFrameExtents();if(i.multiply(g),a.copy(v.mapSize),(i.x>r||i.y>r)&&(console.warn("THREE.WebGLShadowMap:",m,"has shadow exceeding max texture size, reducing"),i.x>r&&(a.x=Math.floor(r/g.x),i.x=a.x*g.x,v.mapSize.x=a.x),i.y>r&&(a.y=Math.floor(r/g.y),i.y=a.y*g.y,v.mapSize.y=a.y)),null===v.map&&!v.isPointLightShadow&&3===this.type){var y={minFilter:1006,magFilter:1006,format:1023};v.map=new E(i.x,i.y,y),v.map.texture.name=m.name+".shadowMap",v.mapPass=new E(i.x,i.y,y),v.camera.updateProjectionMatrix()}if(null===v.map){y={minFilter:1003,magFilter:1003,format:1023};v.map=new E(i.x,i.y,y),v.map.texture.name=m.name+".shadowMap",v.camera.updateProjectionMatrix()}e.setRenderTarget(v.map),e.clear();for(var x=v.getViewportCount(),b=0;b<x;b++){var M=v.getViewport(b);o.set(a.x*M.x,a.y*M.y,a.x*M.z,a.y*M.w),d.viewport(o),v.updateMatrices(m,c,b),n=v.getFrustum(),S(s,c,v.camera,m,this.type)}v.isPointLightShadow||3!==this.type||_(v,c)}else console.warn("THREE.WebGLShadowMap:",m,"has no shadow.")}w.needsUpdate=!1,e.setRenderTarget(l,u,h)}}}function Kn(e,t,r,n){var i=new function(){var t=!1,r=new T,n=null,i=new T(0,0,0,0);return{setMask:function(r){n===r||t||(e.colorMask(r,r,r,r),n=r)},setLocked:function(e){t=e},setClear:function(t,n,a,o,s){!0===s&&(t*=o,n*=o,a*=o),r.set(t,n,a,o),!1===i.equals(r)&&(e.clearColor(t,n,a,o),i.copy(r))},reset:function(){t=!1,n=null,i.set(-1,0,0,0)}}},a=new function(){var t=!1,r=null,n=null,i=null;return{setTest:function(e){e?G(2929):k(2929)},setMask:function(n){r===n||t||(e.depthMask(n),r=n)},setFunc:function(t){if(n!==t){if(t)switch(t){case 0:e.depthFunc(512);break;case 1:e.depthFunc(519);break;case 2:e.depthFunc(513);break;case 3:e.depthFunc(515);break;case 4:e.depthFunc(514);break;case 5:e.depthFunc(518);break;case 6:e.depthFunc(516);break;case 7:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);n=t}},setLocked:function(e){t=e},setClear:function(t){i!==t&&(e.clearDepth(t),i=t)},reset:function(){t=!1,r=null,n=null,i=null}}},o=new function(){var t=!1,r=null,n=null,i=null,a=null,o=null,s=null,c=null,l=null;return{setTest:function(e){t||(e?G(2960):k(2960))},setMask:function(n){r===n||t||(e.stencilMask(n),r=n)},setFunc:function(t,r,o){n===t&&i===r&&a===o||(e.stencilFunc(t,r,o),n=t,i=r,a=o)},setOp:function(t,r,n){o===t&&s===r&&c===n||(e.stencilOp(t,r,n),o=t,s=r,c=n)},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearStencil(t),l=t)},reset:function(){t=!1,r=null,n=null,i=null,a=null,o=null,s=null,c=null,l=null}}},s=e.getParameter(34921),c=new Uint8Array(s),l=new Uint8Array(s),u=new Uint8Array(s),h={},d=null,p=null,f=null,m=null,v=null,g=null,y=null,x=null,b=null,w=null,_=!1,M=null,S=null,E=null,A=null,L=null,R=e.getParameter(35661),P=!1,C=0,O=e.getParameter(7938);-1!==O.indexOf("WebGL")?(C=parseFloat(/^WebGL\ ([0-9])/.exec(O)[1]),P=C>=1):-1!==O.indexOf("OpenGL ES")&&(C=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(O)[1]),P=C>=2);var I=null,D={},N=new T,B=new T;function z(t,r,n){var i=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(var o=0;o<n;o++)e.texImage2D(r+o,0,6408,1,1,0,6408,5121,i);return a}var U={};function F(r,i){(c[r]=1,0===l[r]&&(e.enableVertexAttribArray(r),l[r]=1),u[r]!==i)&&((n.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](r,i),u[r]=i)}function G(t){!0!==h[t]&&(e.enable(t),h[t]=!0)}function k(t){!1!==h[t]&&(e.disable(t),h[t]=!1)}function H(t,n,i,a,o,s,c,l){if(0!==t){if(f||(G(3042),f=!0),5===t)o=o||n,s=s||i,c=c||a,n===v&&o===x||(e.blendEquationSeparate(r.convert(n),r.convert(o)),v=n,x=o),i===g&&a===y&&s===b&&c===w||(e.blendFuncSeparate(r.convert(i),r.convert(a),r.convert(s),r.convert(c)),g=i,y=a,b=s,w=c),m=t,_=null;else if(t!==m||l!==_){if(100===v&&100===x||(e.blendEquation(32774),v=100,x=100),l)switch(t){case 1:e.blendFuncSeparate(1,771,1,771);break;case 2:e.blendFunc(1,1);break;case 3:e.blendFuncSeparate(0,0,769,771);break;case 4:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(770,771,1,771);break;case 2:e.blendFunc(770,1);break;case 3:e.blendFunc(0,769);break;case 4:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}g=null,y=null,b=null,w=null,m=t,_=l}}else f&&(k(3042),f=!1)}function j(t){M!==t&&(t?e.frontFace(2304):e.frontFace(2305),M=t)}function V(t){0!==t?(G(2884),t!==S&&(1===t?e.cullFace(1029):2===t?e.cullFace(1028):e.cullFace(1032))):k(2884),S=t}function W(t,r,n){t?(G(32823),A===r&&L===n||(e.polygonOffset(r,n),A=r,L=n)):k(32823)}function q(t){void 0===t&&(t=33984+R-1),I!==t&&(e.activeTexture(t),I=t)}return U[3553]=z(3553,3553,1),U[34067]=z(34067,34069,6),i.setClear(0,0,0,1),a.setClear(1),o.setClear(0),G(2929),a.setFunc(3),j(!1),V(1),G(2884),H(0),{buffers:{color:i,depth:a,stencil:o},initAttributes:function(){for(var e=0,t=c.length;e<t;e++)c[e]=0},enableAttribute:function(e){F(e,0)},enableAttributeAndDivisor:F,disableUnusedAttributes:function(){for(var t=0,r=l.length;t!==r;++t)l[t]!==c[t]&&(e.disableVertexAttribArray(t),l[t]=0)},enable:G,disable:k,getCompressedTextureFormats:function(){if(null===d&&(d=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")||t.get("WEBGL_compressed_texture_astc")))for(var r=e.getParameter(34467),n=0;n<r.length;n++)d.push(r[n]);return d},useProgram:function(t){return p!==t&&(e.useProgram(t),p=t,!0)},setBlending:H,setMaterial:function(e,t){2===e.side?k(2884):G(2884);var r=1===e.side;t&&(r=!r),j(r),1===e.blending&&!1===e.transparent?H(0):H(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),a.setFunc(e.depthFunc),a.setTest(e.depthTest),a.setMask(e.depthWrite),i.setMask(e.colorWrite);var n=e.stencilWrite;o.setTest(n),n&&(o.setMask(e.stencilWriteMask),o.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),o.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),W(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:j,setCullFace:V,setLineWidth:function(t){t!==E&&(P&&e.lineWidth(t),E=t)},setPolygonOffset:W,setScissorTest:function(e){e?G(3089):k(3089)},activeTexture:q,bindTexture:function(t,r){null===I&&q();var n=D[I];void 0===n&&(n={type:void 0,texture:void 0},D[I]=n),n.type===t&&n.texture===r||(e.bindTexture(t,r||U[t]),n.type=t,n.texture=r)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===N.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),N.copy(t))},viewport:function(t){!1===B.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),B.copy(t))},reset:function(){for(var t=0;t<l.length;t++)1===l[t]&&(e.disableVertexAttribArray(t),l[t]=0);h={},d=null,I=null,D={},p=null,m=null,M=null,S=null,i.reset(),a.reset(),o.reset()}}}function Qn(e,t,r,n,i,a,o){var s,c=new WeakMap,l="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d");function u(e,t){return l?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function h(e,t,r,n){var i=1;if((e.width>n||e.height>n)&&(i=n/Math.max(e.width,e.height)),i<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){var a=t?p.floorPowerOfTwo:Math.floor,o=a(i*e.width),c=a(i*e.height);void 0===s&&(s=u(o,c));var l=r?u(o,c):s;return l.width=o,l.height=c,l.getContext("2d").drawImage(e,0,0,o,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+o+"x"+c+")."),l}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function d(e){return p.isPowerOfTwo(e.width)&&p.isPowerOfTwo(e.height)}function f(e,t){return e.generateMipmaps&&t&&1003!==e.minFilter&&1006!==e.minFilter}function m(t,r,i,a){e.generateMipmap(t),n.get(r).__maxMipLevel=Math.log(Math.max(i,a))*Math.LOG2E}function v(e,r){if(!i.isWebGL2)return e;var n=e;return 6403===e&&(5126===r&&(n=33326),5131===r&&(n=33325),5121===r&&(n=33321)),6407===e&&(5126===r&&(n=34837),5131===r&&(n=34843),5121===r&&(n=32849)),6408===e&&(5126===r&&(n=34836),5131===r&&(n=34842),5121===r&&(n=32856)),33325===n||33326===n||34842===n||34836===n?t.get("EXT_color_buffer_float"):34843!==n&&34837!==n||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),n}function g(e){return 1003===e||1004===e||1005===e?9728:9729}function y(t){var r=t.target;r.removeEventListener("dispose",y),function(t){var r=n.get(t);if(void 0===r.__webglInit)return;e.deleteTexture(r.__webglTexture),n.remove(t)}(r),r.isVideoTexture&&c.delete(r),o.memory.textures--}function x(t){var r=t.target;r.removeEventListener("dispose",x),function(t){var r=n.get(t),i=n.get(t.texture);if(!t)return;void 0!==i.__webglTexture&&e.deleteTexture(i.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLRenderTargetCube)for(var a=0;a<6;a++)e.deleteFramebuffer(r.__webglFramebuffer[a]),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[a]);else e.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer);if(t.isWebGLMultiviewRenderTarget){e.deleteTexture(r.__webglColorTexture),e.deleteTexture(r.__webglDepthStencilTexture),o.memory.textures-=2;a=0;for(var s=r.__webglViewFramebuffers.length;a<s;a++)e.deleteFramebuffer(r.__webglViewFramebuffers[a])}n.remove(t.texture),n.remove(t)}(r),o.memory.textures--}var b=0;function w(e,t){var i=n.get(e);if(e.isVideoTexture&&function(e){var t=o.render.frame;c.get(e)!==t&&(c.set(e,t),e.update())}(e),e.version>0&&i.__version!==e.version){var a=e.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void E(i,e,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}r.activeTexture(33984+t),r.bindTexture(3553,i.__webglTexture)}function _(t,o){if(6===t.image.length){var s=n.get(t);if(t.version>0&&s.__version!==t.version){T(s,t),r.activeTexture(33984+o),r.bindTexture(34067,s.__webglTexture),e.pixelStorei(37440,t.flipY);for(var c=t&&t.isCompressedTexture,l=t.image[0]&&t.image[0].isDataTexture,u=[],p=0;p<6;p++)u[p]=c||l?l?t.image[p].image:t.image[p]:h(t.image[p],!1,!0,i.maxCubemapSize);var g,y=u[0],x=d(y)||i.isWebGL2,b=a.convert(t.format),w=a.convert(t.type),_=v(b,w);if(S(34067,t,x),c){for(p=0;p<6;p++){g=u[p].mipmaps;for(var M=0;M<g.length;M++){var E=g[M];1023!==t.format&&1022!==t.format?r.getCompressedTextureFormats().indexOf(b)>-1?r.compressedTexImage2D(34069+p,M,_,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):r.texImage2D(34069+p,M,_,E.width,E.height,0,b,w,E.data)}}s.__maxMipLevel=g.length-1}else{g=t.mipmaps;for(p=0;p<6;p++)if(l){r.texImage2D(34069+p,0,_,u[p].width,u[p].height,0,b,w,u[p].data);for(M=0;M<g.length;M++){var A=(E=g[M]).image[p].image;r.texImage2D(34069+p,M+1,_,A.width,A.height,0,b,w,A.data)}}else{r.texImage2D(34069+p,0,_,b,w,u[p]);for(M=0;M<g.length;M++){E=g[M];r.texImage2D(34069+p,M+1,_,b,w,E.image[p])}}s.__maxMipLevel=g.length}f(t,x)&&m(34067,t,y.width,y.height),s.__version=t.version,t.onUpdate&&t.onUpdate(t)}else r.activeTexture(33984+o),r.bindTexture(34067,s.__webglTexture)}}function M(e,t){r.activeTexture(33984+t),r.bindTexture(34067,n.get(e).__webglTexture)}function S(r,o,s){var c;if(s?(e.texParameteri(r,10242,a.convert(o.wrapS)),e.texParameteri(r,10243,a.convert(o.wrapT)),32879!==r&&35866!==r||e.texParameteri(r,32882,a.convert(o.wrapR)),e.texParameteri(r,10240,a.convert(o.magFilter)),e.texParameteri(r,10241,a.convert(o.minFilter))):(e.texParameteri(r,10242,33071),e.texParameteri(r,10243,33071),32879!==r&&35866!==r||e.texParameteri(r,32882,33071),1001===o.wrapS&&1001===o.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(r,10240,g(o.magFilter)),e.texParameteri(r,10241,g(o.minFilter)),1003!==o.minFilter&&1006!==o.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),c=t.get("EXT_texture_filter_anisotropic")){if(1015===o.type&&null===t.get("OES_texture_float_linear"))return;if(1016===o.type&&null===(i.isWebGL2||t.get("OES_texture_half_float_linear")))return;(o.anisotropy>1||n.get(o).__currentAnisotropy)&&(e.texParameterf(r,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,i.getMaxAnisotropy())),n.get(o).__currentAnisotropy=o.anisotropy)}}function T(t,r){void 0===t.__webglInit&&(t.__webglInit=!0,r.addEventListener("dispose",y),t.__webglTexture=e.createTexture(),o.memory.textures++)}function E(t,n,o){var s=3553;n.isDataTexture2DArray&&(s=35866),n.isDataTexture3D&&(s=32879),T(t,n),r.activeTexture(33984+o),r.bindTexture(s,t.__webglTexture),e.pixelStorei(37440,n.flipY),e.pixelStorei(37441,n.premultiplyAlpha),e.pixelStorei(3317,n.unpackAlignment);var c=function(e){return!i.isWebGL2&&(1001!==e.wrapS||1001!==e.wrapT||1003!==e.minFilter&&1006!==e.minFilter)}(n)&&!1===d(n.image),l=h(n.image,c,!1,i.maxTextureSize),u=d(l)||i.isWebGL2,p=a.convert(n.format),g=a.convert(n.type),y=v(p,g);S(s,n,u);var x,b=n.mipmaps;if(n.isDepthTexture){if(y=6402,1015===n.type){if(!i.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");y=36012}else i.isWebGL2&&(y=33189);1026===n.format&&6402===y&&1012!==n.type&&1014!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=1012,g=a.convert(n.type)),1027===n.format&&(y=34041,1020!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=1020,g=a.convert(n.type))),r.texImage2D(3553,0,y,l.width,l.height,0,p,g,null)}else if(n.isDataTexture)if(b.length>0&&u){for(var w=0,_=b.length;w<_;w++)x=b[w],r.texImage2D(3553,w,y,x.width,x.height,0,p,g,x.data);n.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else r.texImage2D(3553,0,y,l.width,l.height,0,p,g,l.data),t.__maxMipLevel=0;else if(n.isCompressedTexture){for(w=0,_=b.length;w<_;w++)x=b[w],1023!==n.format&&1022!==n.format?r.getCompressedTextureFormats().indexOf(p)>-1?r.compressedTexImage2D(3553,w,y,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texImage2D(3553,w,y,x.width,x.height,0,p,g,x.data);t.__maxMipLevel=b.length-1}else if(n.isDataTexture2DArray)r.texImage3D(35866,0,y,l.width,l.height,l.depth,0,p,g,l.data),t.__maxMipLevel=0;else if(n.isDataTexture3D)r.texImage3D(32879,0,y,l.width,l.height,l.depth,0,p,g,l.data),t.__maxMipLevel=0;else if(b.length>0&&u){for(w=0,_=b.length;w<_;w++)x=b[w],r.texImage2D(3553,w,y,p,g,x);n.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else r.texImage2D(3553,0,y,p,g,l),t.__maxMipLevel=0;f(n,u)&&m(3553,n,l.width,l.height),t.__version=n.version,n.onUpdate&&n.onUpdate(n)}function A(t,i,o,s){var c=a.convert(i.texture.format),l=a.convert(i.texture.type),u=v(c,l);r.texImage2D(s,0,u,i.width,i.height,0,c,l,null),e.bindFramebuffer(36160,t),e.framebufferTexture2D(36160,o,s,n.get(i.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function L(t,r,n){if(e.bindRenderbuffer(36161,t),r.depthBuffer&&!r.stencilBuffer){if(n){var i=P(r);e.renderbufferStorageMultisample(36161,i,33189,r.width,r.height)}else e.renderbufferStorage(36161,33189,r.width,r.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(r.depthBuffer&&r.stencilBuffer){if(n){i=P(r);e.renderbufferStorageMultisample(36161,i,35056,r.width,r.height)}else e.renderbufferStorage(36161,34041,r.width,r.height);e.framebufferRenderbuffer(36160,33306,36161,t)}else{var o=v(a.convert(r.texture.format),a.convert(r.texture.type));if(n){i=P(r);e.renderbufferStorageMultisample(36161,i,o,r.width,r.height)}else e.renderbufferStorage(36161,o,r.width,r.height)}e.bindRenderbuffer(36161,null)}function R(t){var r=n.get(t),i=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,r){if(r&&r.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),w(r.depthTexture,0);var i=n.get(r.depthTexture).__webglTexture;if(1026===r.depthTexture.format)e.framebufferTexture2D(36160,36096,3553,i,0);else{if(1027!==r.depthTexture.format)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(36160,33306,3553,i,0)}}(r.__webglFramebuffer,t)}else if(i){r.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(36160,r.__webglFramebuffer[a]),r.__webglDepthbuffer[a]=e.createRenderbuffer(),L(r.__webglDepthbuffer[a],t)}else e.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),L(r.__webglDepthbuffer,t);e.bindFramebuffer(36160,null)}function P(e){return i.isWebGL2&&e.isWebGLMultisampleRenderTarget?Math.min(i.maxSamples,e.samples):0}var C=!1,O=!1;this.allocateTextureUnit=function(){var e=b;return e>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+i.maxTextures),b+=1,e},this.resetTextureUnits=function(){b=0},this.setTexture2D=w,this.setTexture2DArray=function(e,t){var i=n.get(e);e.version>0&&i.__version!==e.version?E(i,e,t):(r.activeTexture(33984+t),r.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(e,t){var i=n.get(e);e.version>0&&i.__version!==e.version?E(i,e,t):(r.activeTexture(33984+t),r.bindTexture(32879,i.__webglTexture))},this.setTextureCube=_,this.setTextureCubeDynamic=M,this.setupRenderTarget=function(s){var c=n.get(s),l=n.get(s.texture);s.addEventListener("dispose",x),l.__webglTexture=e.createTexture(),o.memory.textures++;var u=!0===s.isWebGLRenderTargetCube,h=!0===s.isWebGLMultisampleRenderTarget,p=!0===s.isWebGLMultiviewRenderTarget,g=d(s)||i.isWebGL2;if(u){c.__webglFramebuffer=[];for(var y=0;y<6;y++)c.__webglFramebuffer[y]=e.createFramebuffer()}else if(c.__webglFramebuffer=e.createFramebuffer(),h)if(i.isWebGL2){c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,c.__webglColorRenderbuffer);var b=v(a.convert(s.texture.format),a.convert(s.texture.type)),w=P(s);e.renderbufferStorageMultisample(36161,w,b,s.width,s.height),e.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),s.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),L(c.__webglDepthRenderbuffer,s,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");else if(p){var _=s.width,M=s.height,T=s.numViews;e.bindFramebuffer(36160,c.__webglFramebuffer);var E=t.get("OVR_multiview2");o.memory.textures+=2;var C=e.createTexture();e.bindTexture(35866,C),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,32856,_,M,T,0,6408,5121,null),E.framebufferTextureMultiviewOVR(36160,36064,C,0,0,T);var O=e.createTexture();e.bindTexture(35866,O),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,35056,_,M,T,0,34041,34042,null),E.framebufferTextureMultiviewOVR(36160,33306,O,0,0,T);var I=new Array(T);for(y=0;y<T;++y)I[y]=e.createFramebuffer(),e.bindFramebuffer(36160,I[y]),e.framebufferTextureLayer(36160,36064,C,0,y);c.__webglColorTexture=C,c.__webglDepthStencilTexture=O,c.__webglViewFramebuffers=I,e.bindFramebuffer(36160,null),e.bindTexture(35866,null)}if(u){r.bindTexture(34067,l.__webglTexture),S(34067,s.texture,g);for(y=0;y<6;y++)A(c.__webglFramebuffer[y],s,36064,34069+y);f(s.texture,g)&&m(34067,s.texture,s.width,s.height),r.bindTexture(34067,null)}else p||(r.bindTexture(3553,l.__webglTexture),S(3553,s.texture,g),A(c.__webglFramebuffer,s,36064,3553),f(s.texture,g)&&m(3553,s.texture,s.width,s.height),r.bindTexture(3553,null));s.depthBuffer&&R(s)},this.updateRenderTargetMipmap=function(e){var t=e.texture;if(f(t,d(e)||i.isWebGL2)){var a=e.isWebGLRenderTargetCube?34067:3553,o=n.get(t).__webglTexture;r.bindTexture(a,o),m(a,t,e.width,e.height),r.bindTexture(a,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(i.isWebGL2){var r=n.get(t);e.bindFramebuffer(36008,r.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,r.__webglFramebuffer);var a=t.width,o=t.height,s=16384;t.depthBuffer&&(s|=256),t.stencilBuffer&&(s|=1024),e.blitFramebuffer(0,0,a,o,0,0,a,o,s,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===C&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),C=!0),e=e.texture),w(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLRenderTargetCube&&(!1===O&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),O=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?_(e,t):M(e,t)}}function $n(e,t,r){return{convert:function(e){var n;if(1e3===e)return 10497;if(1001===e)return 33071;if(1002===e)return 33648;if(1003===e)return 9728;if(1004===e)return 9984;if(1005===e)return 9986;if(1006===e)return 9729;if(1007===e)return 9985;if(1008===e)return 9987;if(1009===e)return 5121;if(1017===e)return 32819;if(1018===e)return 32820;if(1019===e)return 33635;if(1010===e)return 5120;if(1011===e)return 5122;if(1012===e)return 5123;if(1013===e)return 5124;if(1014===e)return 5125;if(1015===e)return 5126;if(1016===e){if(r.isWebGL2)return 5131;if(null!==(n=t.get("OES_texture_half_float")))return n.HALF_FLOAT_OES}if(1021===e)return 6406;if(1022===e)return 6407;if(1023===e)return 6408;if(1024===e)return 6409;if(1025===e)return 6410;if(1026===e)return 6402;if(1027===e)return 34041;if(1028===e)return 6403;if(100===e)return 32774;if(101===e)return 32778;if(102===e)return 32779;if(200===e)return 0;if(201===e)return 1;if(202===e)return 768;if(203===e)return 769;if(204===e)return 770;if(205===e)return 771;if(206===e)return 772;if(207===e)return 773;if(208===e)return 774;if(209===e)return 775;if(210===e)return 776;if((33776===e||33777===e||33778===e||33779===e)&&null!==(n=t.get("WEBGL_compressed_texture_s3tc"))){if(33776===e)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===e)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===e)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===e)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((35840===e||35841===e||35842===e||35843===e)&&null!==(n=t.get("WEBGL_compressed_texture_pvrtc"))){if(35840===e)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===e)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===e)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===e)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===e&&null!==(n=t.get("WEBGL_compressed_texture_etc1")))return n.COMPRESSED_RGB_ETC1_WEBGL;if((37808===e||37809===e||37810===e||37811===e||37812===e||37813===e||37814===e||37815===e||37816===e||37817===e||37818===e||37819===e||37820===e||37821===e)&&null!==(n=t.get("WEBGL_compressed_texture_astc")))return e;if(103===e||104===e){if(r.isWebGL2){if(103===e)return 32775;if(104===e)return 32776}if(null!==(n=t.get("EXT_blend_minmax"))){if(103===e)return n.MIN_EXT;if(104===e)return n.MAX_EXT}}if(1020===e){if(r.isWebGL2)return 34042;if(null!==(n=t.get("WEBGL_depth_texture")))return n.UNSIGNED_INT_24_8_WEBGL}return 0}}}function ei(e,t,r,n){E.call(this,e,t,n),this.depthBuffer=!1,this.stencilBuffer=!1,this.numViews=r}function ti(e,t){var r,n,i,a,o,s,c,l=e.extensions,u=e.properties,h=0;function d(e){return e.isArrayCamera?e.cameras:(o[0]=e,o)}this.isAvailable=function(){if(void 0===c){var e=l.get("OVR_multiview2");if(c=null!==e&&!1===t.getContextAttributes().antialias){h=t.getParameter(e.MAX_VIEWS_OVR),r=new ei(0,0,2),s=new f,a=[],i=[],o=[];for(var n=0;n<h;n++)a[n]=new N,i[n]=new w}}return c},this.attachCamera=function(t){!1!==function(e){if(void 0===e.isArrayCamera)return!0;var t=e.cameras;if(t.length>h)return!1;for(var r=1,n=t.length;r<n;r++)if(t[0].viewport.z!==t[r].viewport.z||t[0].viewport.w!==t[r].viewport.w)return!1;return!0}(t)&&(n=e.getRenderTarget(),function(t){if(n?s.set(n.width,n.height):e.getDrawingBufferSize(s),t.isArrayCamera){var i=t.cameras[0].viewport;r.setSize(i.z,i.w),r.setNumViews(t.cameras.length)}else r.setSize(s.x,s.y),r.setNumViews(2)}(t),e.setRenderTarget(r))},this.detachCamera=function(i){r===e.getRenderTarget()&&(e.setRenderTarget(n),function(e){var n=r,i=n.numViews,a=u.get(n).__webglViewFramebuffers,o=n.width,c=n.height;if(e.isArrayCamera)for(var l=0;l<i;l++){var h=e.cameras[l].viewport,d=h.x,p=h.y,f=d+h.z,m=p+h.w;t.bindFramebuffer(36008,a[l]),t.blitFramebuffer(0,0,o,c,d,p,f,m,16384,9728)}else t.bindFramebuffer(36008,a[0]),t.blitFramebuffer(0,0,o,c,0,0,s.x,s.y,16384,9728)}(i))},this.updateCameraProjectionMatricesUniform=function(e,r){for(var n=d(e),i=0;i<n.length;i++)a[i].copy(n[i].projectionMatrix);r.setValue(t,"projectionMatrices",a)},this.updateCameraViewMatricesUniform=function(e,r){for(var n=d(e),i=0;i<n.length;i++)a[i].copy(n[i].matrixWorldInverse);r.setValue(t,"viewMatrices",a)},this.updateObjectMatricesUniforms=function(e,r,n){for(var o=d(r),s=0;s<o.length;s++)a[s].multiplyMatrices(o[s].matrixWorldInverse,e.matrixWorld),i[s].getNormalMatrix(a[s]);n.setValue(t,"modelViewMatrices",a),n.setValue(t,"normalMatrices",i)}}function ri(){$.call(this),this.type="Group"}function ni(e){Wt.call(this),this.cameras=e||[]}ei.prototype=Object.assign(Object.create(E.prototype),{constructor:ei,isWebGLMultiviewRenderTarget:!0,copy:function(e){return E.prototype.copy.call(this,e),this.numViews=e.numViews,this},setNumViews:function(e){return this.numViews!==e&&(this.numViews=e,this.dispose()),this}}),ri.prototype=Object.assign(Object.create($.prototype),{constructor:ri,isGroup:!0}),ni.prototype=Object.assign(Object.create(Wt.prototype),{constructor:ni,isArrayCamera:!0});var ii,ai=new y,oi=new y;function si(e,t,r){ai.setFromMatrixPosition(t.matrixWorld),oi.setFromMatrixPosition(r.matrixWorld);var n=ai.distanceTo(oi),i=t.projectionMatrix.elements,a=r.projectionMatrix.elements,o=i[14]/(i[10]-1),s=i[14]/(i[10]+1),c=(i[9]+1)/i[5],l=(i[9]-1)/i[5],u=(i[8]-1)/i[0],h=(a[8]+1)/a[0],d=o*u,p=o*h,f=n/(-u+h),m=f*-u;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(f),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.getInverse(e.matrixWorld);var v=o+f,g=s+f,y=d-m,x=p+(n-m),b=c*s/g*v,w=l*s/g*v;e.projectionMatrix.makePerspective(y,x,b,w,v,g)}function ci(e){var t,r,n=this,i=null,a=null,o=null,s=[],c=new N,l=new N,u=1,h="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(a=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",S,!1));var d=new N,p=new m,v=new y,g=new Wt;g.viewport=new T,g.layers.enable(1);var x=new Wt;x.viewport=new T,x.layers.enable(2);var b=new ni([g,x]);function w(){return null!==i&&!0===i.isPresenting}b.layers.enable(1),b.layers.enable(2);var _,M=new f;function S(){if(w()){var a=i.getEyeParameters("left");t=2*a.renderWidth*u,r=a.renderHeight*u,_=e.getPixelRatio(),e.getSize(M),e.setDrawingBufferSize(t,r,1),g.viewport.set(0,0,t/2,r),x.viewport.set(t/2,0,t/2,r),R.start(),n.dispatchEvent({type:"sessionstart"})}else n.enabled&&e.setDrawingBufferSize(M.width,M.height,_),R.stop(),n.dispatchEvent({type:"sessionend"})}var E=[];function A(e){for(var t=navigator.getGamepads&&navigator.getGamepads(),r=0,n=0,i=t.length;r<i;r++){var a=t[r];if(a&&("Daydream Controller"===a.id||"Gear VR Controller"===a.id||"Oculus Go Controller"===a.id||"OpenVR Gamepad"===a.id||a.id.startsWith("Oculus Touch")||a.id.startsWith("HTC Vive Focus")||a.id.startsWith("Spatial Controller"))){if(n===e)return a;n++}}}function L(e,n){null!==n&&4===n.length&&e.set(n[0]*t,n[1]*r,n[2]*t,n[3]*r)}this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new ri).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.getDevice=function(){return i},this.setDevice=function(e){void 0!==e&&(i=e),R.setContext(e)},this.setFramebufferScaleFactor=function(e){u=e},this.setReferenceSpaceType=function(e){h=e},this.setPoseTarget=function(e){void 0!==e&&(o=e)},this.getCamera=function(e){var t="local-floor"===h?1.6:0;if(!1===w())return e.position.set(0,t,0),e.rotation.set(0,0,0),e;if(i.depthNear=e.near,i.depthFar=e.far,i.getFrameData(a),"local-floor"===h){var r=i.stageParameters;r?c.fromArray(r.sittingToStandingTransform):c.makeTranslation(0,t,0)}var n=a.pose,u=null!==o?o:e;u.matrix.copy(c),u.matrix.decompose(u.position,u.quaternion,u.scale),null!==n.orientation&&(p.fromArray(n.orientation),u.quaternion.multiply(p)),null!==n.position&&(p.setFromRotationMatrix(c),v.fromArray(n.position),v.applyQuaternion(p),u.position.add(v)),u.updateMatrixWorld(),g.near=e.near,x.near=e.near,g.far=e.far,x.far=e.far,g.matrixWorldInverse.fromArray(a.leftViewMatrix),x.matrixWorldInverse.fromArray(a.rightViewMatrix),l.getInverse(c),"local-floor"===h&&(g.matrixWorldInverse.multiply(l),x.matrixWorldInverse.multiply(l));var f=u.parent;null!==f&&(d.getInverse(f.matrixWorld),g.matrixWorldInverse.multiply(d),x.matrixWorldInverse.multiply(d)),g.matrixWorld.getInverse(g.matrixWorldInverse),x.matrixWorld.getInverse(x.matrixWorldInverse),g.projectionMatrix.fromArray(a.leftProjectionMatrix),x.projectionMatrix.fromArray(a.rightProjectionMatrix),si(b,g,x);var m=i.getLayers();if(m.length){var y=m[0];L(g.viewport,y.leftBounds),L(x.viewport,y.rightBounds)}return function(){for(var e=0;e<s.length;e++){var t=s[e],r=A(e);if(void 0!==r&&void 0!==r.pose){if(null===r.pose)return;var n=r.pose;!1===n.hasPosition&&t.position.set(.2,-.6,-.05),null!==n.position&&t.position.fromArray(n.position),null!==n.orientation&&t.quaternion.fromArray(n.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(c),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var i="Daydream Controller"===r.id?0:1;void 0===E[e]&&(E[e]=!1),E[e]!==r.buttons[i].pressed&&(E[e]=r.buttons[i].pressed,!0===E[e]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),b},this.getStandingMatrix=function(){return c},this.isPresenting=w;var R=new ar;this.setAnimationLoop=function(e){R.setAnimationLoop(e),w()&&R.start()},this.submitFrame=function(){w()&&i.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",S)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function li(e,t){var r=this,n=null,i=null,a="local-floor",o=null,s=[],c=[];function l(){return null!==n&&null!==i}var u=new Wt;u.layers.enable(1),u.viewport=new T;var h=new Wt;h.layers.enable(2),h.viewport=new T;var d=new ni([u,h]);function p(e){for(var t=0;t<s.length;t++)c[t]===e.inputSource&&s[t].dispatchEvent({type:e.type})}function f(){e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),y.stop(),r.dispatchEvent({type:"sessionend"})}function m(e){i=e,y.setContext(n),y.start(),r.dispatchEvent({type:"sessionstart"})}function v(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.getInverse(e.matrixWorld)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new ri).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.setFramebufferScaleFactor=function(){},this.setReferenceSpaceType=function(e){a=e},this.getSession=function(){return n},this.setSession=function(e){null!==(n=e)&&(n.addEventListener("select",p),n.addEventListener("selectstart",p),n.addEventListener("selectend",p),n.addEventListener("end",f),n.updateRenderState({baseLayer:new XRWebGLLayer(n,t)}),n.requestReferenceSpace(a).then(m),c=n.inputSources,n.addEventListener("inputsourceschange",(function(){c=n.inputSources,console.log(c);for(var e=0;e<s.length;e++){s[e].userData.inputSource=c[e]}})))},this.getCamera=function(e){if(l()){var t=e.parent,r=d.cameras;v(d,t);for(var n=0;n<r.length;n++)v(r[n],t);e.matrixWorld.copy(d.matrixWorld);for(var i=e.children,a=(n=0,i.length);n<a;n++)i[n].updateMatrixWorld(!0);return si(d,u,h),d}return e},this.isPresenting=l;var g=null;var y=new ar;y.setAnimationLoop((function(t,r){if(null!==(o=r.getViewerPose(i))){var a=o.views,l=n.renderState.baseLayer;e.setFramebuffer(l.framebuffer);for(var u=0;u<a.length;u++){var h=a[u],p=l.getViewport(h),f=h.transform.inverse.matrix,m=d.cameras[u];m.matrix.fromArray(f).getInverse(m.matrix),m.projectionMatrix.fromArray(h.projectionMatrix),m.viewport.set(p.x,p.y,p.width,p.height),0===u&&d.matrix.copy(m.matrix)}}for(u=0;u<s.length;u++){var v=s[u],y=c[u];if(y){var x=r.getPose(y.targetRaySpace,i);if(null!==x){v.matrix.fromArray(x.transform.matrix),v.matrix.decompose(v.position,v.rotation,v.scale),v.visible=!0;continue}}v.visible=!1}g&&g(t)})),this.setAnimationLoop=function(e){g=e},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new N},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function ui(e){var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),r=void 0!==e.context?e.context:null,n=void 0!==e.alpha&&e.alpha,i=void 0===e.depth||e.depth,a=void 0===e.stencil||e.stencil,o=void 0!==e.antialias&&e.antialias,s=void 0===e.premultipliedAlpha||e.premultipliedAlpha,c=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,l=void 0!==e.powerPreference?e.powerPreference:"default",u=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat,h=null,d=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=1,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var m,v,g,x,b,w,_,M,S,E,A,L,R,P,C,O,I,D,B=this,z=!1,U=null,F=0,G=0,k=null,H=null,j=-1,V={geometry:null,program:null,wireframe:!1},W=null,q=null,X=new T,Y=new T,Z=null,J=t.width,K=t.height,Q=1,$=new T(0,0,J,K),ee=new T(0,0,J,K),te=!1,re=new tr,ne=new dr,ie=!1,ae=!1,oe=new N,se=new y;function ce(){return null===k?Q:1}try{var le={alpha:n,depth:i,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:l,failIfMajorPerformanceCaveat:u,xrCompatible:!0};if(t.addEventListener("webglcontextlost",fe,!1),t.addEventListener("webglcontextrestored",me,!1),null===(m=r||t.getContext("webgl",le)||t.getContext("experimental-webgl",le)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===m.getShaderPrecisionFormat&&(m.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function ue(){v=new pr(m),!1===(g=new hr(m,v,e)).isWebGL2&&(v.get("WEBGL_depth_texture"),v.get("OES_texture_float"),v.get("OES_texture_half_float"),v.get("OES_texture_half_float_linear"),v.get("OES_standard_derivatives"),v.get("OES_element_index_uint"),v.get("ANGLE_instanced_arrays")),v.get("OES_texture_float_linear"),D=new $n(m,v,g),(x=new Kn(m,v,D,g)).scissor(Y.copy(ee).multiplyScalar(Q).floor()),x.viewport(X.copy($).multiplyScalar(Q).floor()),b=new vr(m),w=new zn,_=new Qn(m,v,x,w,g,D,b),M=new or(m),S=new fr(m,M,b),E=new xr(m,S,M,b),C=new yr(m),A=new Bn(B,v,g),L=new kn,R=new Xn,P=new lr(B,x,E,s),O=new ur(m,v,b,g),I=new mr(m,v,b,g),b.programs=A.programs,B.capabilities=g,B.extensions=v,B.properties=w,B.renderLists=L,B.state=x,B.info=b}ue();var he="undefined"!=typeof navigator&&"xr"in navigator&&"supportsSession"in navigator.xr?new li(B,m):new ci(B);this.vr=he;var de=new ti(B,m),pe=new Jn(B,E,g.maxTextureSize);function fe(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),z=!0}function me(){console.log("THREE.WebGLRenderer: Context Restored."),z=!1,ue()}function ve(e){var t=e.target;t.removeEventListener("dispose",ve),function(e){ge(e),w.remove(e)}(t)}function ge(e){var t=w.get(e).program;e.program=void 0,void 0!==t&&A.releaseProgram(t)}this.shadowMap=pe,this.getContext=function(){return m},this.getContextAttributes=function(){return m.getContextAttributes()},this.forceContextLoss=function(){var e=v.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=v.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return Q},this.setPixelRatio=function(e){void 0!==e&&(Q=e,this.setSize(J,K,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new f),e.set(J,K)},this.setSize=function(e,r,n){he.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(J=e,K=r,t.width=Math.floor(e*Q),t.height=Math.floor(r*Q),!1!==n&&(t.style.width=e+"px",t.style.height=r+"px"),this.setViewport(0,0,e,r))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new f),e.set(J*Q,K*Q).floor()},this.setDrawingBufferSize=function(e,r,n){J=e,K=r,Q=n,t.width=Math.floor(e*n),t.height=Math.floor(r*n),this.setViewport(0,0,e,r)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new T),e.copy(X)},this.getViewport=function(e){return e.copy($)},this.setViewport=function(e,t,r,n){e.isVector4?$.set(e.x,e.y,e.z,e.w):$.set(e,t,r,n),x.viewport(X.copy($).multiplyScalar(Q).floor())},this.getScissor=function(e){return e.copy(ee)},this.setScissor=function(e,t,r,n){e.isVector4?ee.set(e.x,e.y,e.z,e.w):ee.set(e,t,r,n),x.scissor(Y.copy(ee).multiplyScalar(Q).floor())},this.getScissorTest=function(){return te},this.setScissorTest=function(e){x.setScissorTest(te=e)},this.getClearColor=function(){return P.getClearColor()},this.setClearColor=function(){P.setClearColor.apply(P,arguments)},this.getClearAlpha=function(){return P.getClearAlpha()},this.setClearAlpha=function(){P.setClearAlpha.apply(P,arguments)},this.clear=function(e,t,r){var n=0;(void 0===e||e)&&(n|=16384),(void 0===t||t)&&(n|=256),(void 0===r||r)&&(n|=1024),m.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",fe,!1),t.removeEventListener("webglcontextrestored",me,!1),L.dispose(),R.dispose(),w.dispose(),E.dispose(),he.dispose(),xe.stop()},this.renderBufferImmediate=function(e,t){x.initAttributes();var r=w.get(e);e.hasPositions&&!r.position&&(r.position=m.createBuffer()),e.hasNormals&&!r.normal&&(r.normal=m.createBuffer()),e.hasUvs&&!r.uv&&(r.uv=m.createBuffer()),e.hasColors&&!r.color&&(r.color=m.createBuffer());var n=t.getAttributes();e.hasPositions&&(m.bindBuffer(34962,r.position),m.bufferData(34962,e.positionArray,35048),x.enableAttribute(n.position),m.vertexAttribPointer(n.position,3,5126,!1,0,0)),e.hasNormals&&(m.bindBuffer(34962,r.normal),m.bufferData(34962,e.normalArray,35048),x.enableAttribute(n.normal),m.vertexAttribPointer(n.normal,3,5126,!1,0,0)),e.hasUvs&&(m.bindBuffer(34962,r.uv),m.bufferData(34962,e.uvArray,35048),x.enableAttribute(n.uv),m.vertexAttribPointer(n.uv,2,5126,!1,0,0)),e.hasColors&&(m.bindBuffer(34962,r.color),m.bufferData(34962,e.colorArray,35048),x.enableAttribute(n.color),m.vertexAttribPointer(n.color,3,5126,!1,0,0)),x.disableUnusedAttributes(),m.drawArrays(4,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,r,n,i,a){var o=i.isMesh&&i.matrixWorld.determinant()<0;x.setMaterial(n,o);var s=Se(e,t,n,i),c=!1;V.geometry===r.id&&V.program===s.id&&V.wireframe===(!0===n.wireframe)||(V.geometry=r.id,V.program=s.id,V.wireframe=!0===n.wireframe,c=!0),i.morphTargetInfluences&&(C.update(i,r,n,s),c=!0);var l,u=r.index,h=r.attributes.position,d=1;!0===n.wireframe&&(u=S.getWireframeAttribute(r),d=2);var p=O;null!==u&&(l=M.get(u),(p=I).setIndex(l)),c&&(!function(e,t,r,n){if(!1===g.isWebGL2&&(e.isInstancedMesh||t.isInstancedBufferGeometry)&&null===v.get("ANGLE_instanced_arrays"))return;x.initAttributes();var i=t.attributes,a=n.getAttributes(),o=r.defaultAttributeValues;for(var s in a){var c=a[s];if(c>=0){var l=i[s];if(void 0!==l){var u=l.normalized,h=l.itemSize;if(void 0===(_=M.get(l)))continue;var d=_.buffer,p=_.type,f=_.bytesPerElement;if(l.isInterleavedBufferAttribute){var y=l.data,b=y.stride,w=l.offset;y&&y.isInstancedInterleavedBuffer?(x.enableAttributeAndDivisor(c,y.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=y.meshPerAttribute*y.count)):x.enableAttribute(c),m.bindBuffer(34962,d),m.vertexAttribPointer(c,h,p,u,b*f,w*f)}else l.isInstancedBufferAttribute?(x.enableAttributeAndDivisor(c,l.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=l.meshPerAttribute*l.count)):x.enableAttribute(c),m.bindBuffer(34962,d),m.vertexAttribPointer(c,h,p,u,0,0)}else if("instanceMatrix"===s){var _;if(void 0===(_=M.get(e.instanceMatrix)))continue;d=_.buffer,p=_.type;x.enableAttributeAndDivisor(c+0,1),x.enableAttributeAndDivisor(c+1,1),x.enableAttributeAndDivisor(c+2,1),x.enableAttributeAndDivisor(c+3,1),m.bindBuffer(34962,d),m.vertexAttribPointer(c+0,4,p,!1,64,0),m.vertexAttribPointer(c+1,4,p,!1,64,16),m.vertexAttribPointer(c+2,4,p,!1,64,32),m.vertexAttribPointer(c+3,4,p,!1,64,48)}else if(void 0!==o){var S=o[s];if(void 0!==S)switch(S.length){case 2:m.vertexAttrib2fv(c,S);break;case 3:m.vertexAttrib3fv(c,S);break;case 4:m.vertexAttrib4fv(c,S);break;default:m.vertexAttrib1fv(c,S)}}}}x.disableUnusedAttributes()}(i,r,n,s),null!==u&&m.bindBuffer(34963,l.buffer));var f=1/0;null!==u?f=u.count:void 0!==h&&(f=h.count);var y=r.drawRange.start*d,b=r.drawRange.count*d,w=null!==a?a.start*d:0,_=null!==a?a.count*d:1/0,T=Math.max(y,w),E=Math.min(f,y+b,w+_)-1,A=Math.max(0,E-T+1);if(0!==A){if(i.isMesh)if(!0===n.wireframe)x.setLineWidth(n.wireframeLinewidth*ce()),p.setMode(1);else switch(i.drawMode){case 0:p.setMode(4);break;case 1:p.setMode(5);break;case 2:p.setMode(6)}else if(i.isLine){var L=n.linewidth;void 0===L&&(L=1),x.setLineWidth(L*ce()),i.isLineSegments?p.setMode(1):i.isLineLoop?p.setMode(2):p.setMode(3)}else i.isPoints?p.setMode(0):i.isSprite&&p.setMode(4);i.isInstancedMesh?p.renderInstances(r,T,A,i.count):r.isInstancedBufferGeometry?p.renderInstances(r,T,A,r.maxInstancedCount):p.render(T,A)}},this.compile=function(e,t){(d=R.get(e,t)).init(),e.traverse((function(e){e.isLight&&(d.pushLight(e),e.castShadow&&d.pushShadow(e))})),d.setupLights(t),e.traverse((function(t){if(t.material)if(Array.isArray(t.material))for(var r=0;r<t.material.length;r++)Me(t.material[r],e.fog,t);else Me(t.material,e.fog,t)}))};var ye=null;var xe=new ar;function be(e,t,r,n){if(!1!==e.visible){if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)d.pushLight(e),e.castShadow&&d.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||re.intersectsSprite(e)){n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe);var i=E.update(e);(a=e.material).visible&&h.push(e,i,a,r,se.z,null)}}else if(e.isImmediateRenderObject)n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe),h.push(e,null,e.material,r,se.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==b.render.frame&&(e.skeleton.update(),e.skeleton.frame=b.render.frame),!e.frustumCulled||re.intersectsObject(e))){n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe);i=E.update(e);var a=e.material;if(Array.isArray(a))for(var o=i.groups,s=0,c=o.length;s<c;s++){var l=o[s],u=a[l.materialIndex];u&&u.visible&&h.push(e,i,u,r,se.z,l)}else a.visible&&h.push(e,i,a,r,se.z,null)}var p=e.children;for(s=0,c=p.length;s<c;s++)be(p[s],t,r,n)}}function we(e,t,r,n){for(var i=0,a=e.length;i<a;i++){var o=e[i],s=o.object,c=o.geometry,l=void 0===n?o.material:n,u=o.group;if(r.isArrayCamera)if(q=r,he.enabled&&de.isAvailable())_e(s,t,r,c,l,u);else for(var h=r.cameras,p=0,f=h.length;p<f;p++){var m=h[p];s.layers.test(m.layers)&&(x.viewport(X.copy(m.viewport)),d.setupLights(m),_e(s,t,m,c,l,u))}else q=null,_e(s,t,r,c,l,u)}}function _e(e,t,r,n,i,a){if(e.onBeforeRender(B,t,r,n,i,a),d=R.get(t,q||r),e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){x.setMaterial(i);var o=Se(r,t.fog,i,e);V.geometry=null,V.program=null,V.wireframe=!1,function(e,t){e.render((function(e){B.renderBufferImmediate(e,t)}))}(e,o)}else B.renderBufferDirect(r,t.fog,n,i,e,a);e.onAfterRender(B,t,r,n,i,a),d=R.get(t,q||r)}function Me(e,t,r){var n=w.get(e),i=d.state.lights,a=d.state.shadowsArray,o=i.state.version,s=A.getParameters(e,i.state,a,t,ne.numPlanes,ne.numIntersection,r),c=A.getProgramCode(e,s),l=n.program,u=!0;if(void 0===l)e.addEventListener("dispose",ve);else if(l.code!==c)ge(e);else if(n.lightsStateVersion!==o)n.lightsStateVersion=o,u=!1;else{if(void 0!==s.shaderID)return;u=!1}if(u){if(s.shaderID){var h=ir[s.shaderID];n.shader={name:e.type,uniforms:Gt(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}}else n.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(n.shader,B),c=A.getProgramCode(e,s),l=A.acquireProgram(e,n.shader,s,c),n.program=l,e.program=l}var p=l.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var f=0;f<B.maxMorphTargets;f++)p["morphTarget"+f]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(f=0;f<B.maxMorphNormals;f++)p["morphNormal"+f]>=0&&e.numSupportedMorphNormals++}var m=n.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(n.numClippingPlanes=ne.numPlanes,n.numIntersection=ne.numIntersection,m.clippingPlanes=ne.uniform),n.fog=t,n.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),n.lightsStateVersion=o,n.needsLights&&(m.ambientLightColor.value=i.state.ambient,m.lightProbe.value=i.state.probe,m.directionalLights.value=i.state.directional,m.spotLights.value=i.state.spot,m.rectAreaLights.value=i.state.rectArea,m.pointLights.value=i.state.point,m.hemisphereLights.value=i.state.hemi,m.directionalShadowMap.value=i.state.directionalShadowMap,m.directionalShadowMatrix.value=i.state.directionalShadowMatrix,m.spotShadowMap.value=i.state.spotShadowMap,m.spotShadowMatrix.value=i.state.spotShadowMatrix,m.pointShadowMap.value=i.state.pointShadowMap,m.pointShadowMatrix.value=i.state.pointShadowMatrix);var v=n.program.getUniforms(),g=gn.seqWithValue(v.seq,m);n.uniformsList=g}function Se(e,t,r,n){_.resetTextureUnits();var i=w.get(r),a=d.state.lights;if(ie&&(ae||e!==W)){var o=e===W&&r.id===j;ne.setState(r.clippingPlanes,r.clipIntersection,r.clipShadows,e,i,o)}!1===r.needsUpdate&&(void 0===i.program||r.fog&&i.fog!==t||i.needsLights&&i.lightsStateVersion!==a.state.version?r.needsUpdate=!0:void 0===i.numClippingPlanes||i.numClippingPlanes===ne.numPlanes&&i.numIntersection===ne.numIntersection||(r.needsUpdate=!0)),r.needsUpdate&&(Me(r,t,n),r.needsUpdate=!1);var s,c,l=!1,u=!1,h=!1,f=i.program,v=f.getUniforms(),y=i.shader.uniforms;if(x.useProgram(f.program)&&(l=!0,u=!0,h=!0),r.id!==j&&(j=r.id,u=!0),l||W!==e){if(f.numMultiviewViews>0?de.updateCameraProjectionMatricesUniform(e,v):v.setValue(m,"projectionMatrix",e.projectionMatrix),g.logarithmicDepthBuffer&&v.setValue(m,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),W!==e&&(W=e,u=!0,h=!0),r.isShaderMaterial||r.isMeshPhongMaterial||r.isMeshStandardMaterial||r.envMap){var b=v.map.cameraPosition;void 0!==b&&b.setValue(m,se.setFromMatrixPosition(e.matrixWorld))}(r.isMeshPhongMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial||r.skinning)&&(f.numMultiviewViews>0?de.updateCameraViewMatricesUniform(e,v):v.setValue(m,"viewMatrix",e.matrixWorldInverse))}if(r.skinning){v.setOptional(m,n,"bindMatrix"),v.setOptional(m,n,"bindMatrixInverse");var M=n.skeleton;if(M){var S=M.bones;if(g.floatVertexTextures){if(void 0===M.boneTexture){var T=Math.sqrt(4*S.length);T=p.ceilPowerOfTwo(T),T=Math.max(T,4);var E=new Float32Array(T*T*4);E.set(M.boneMatrices);var A=new Yt(E,T,T,1023,1015);M.boneMatrices=E,M.boneTexture=A,M.boneTextureSize=T}v.setValue(m,"boneTexture",M.boneTexture,_),v.setValue(m,"boneTextureSize",M.boneTextureSize)}else v.setOptional(m,M,"boneMatrices")}}return(u||i.receiveShadow!==n.receiveShadow)&&(i.receiveShadow=n.receiveShadow,v.setValue(m,"receiveShadow",n.receiveShadow)),u&&(v.setValue(m,"toneMappingExposure",B.toneMappingExposure),v.setValue(m,"toneMappingWhitePoint",B.toneMappingWhitePoint),i.needsLights&&(c=h,(s=y).ambientLightColor.needsUpdate=c,s.lightProbe.needsUpdate=c,s.directionalLights.needsUpdate=c,s.pointLights.needsUpdate=c,s.spotLights.needsUpdate=c,s.rectAreaLights.needsUpdate=c,s.hemisphereLights.needsUpdate=c),t&&r.fog&&function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(y,t),r.isMeshBasicMaterial?Te(y,r):r.isMeshLambertMaterial?(Te(y,r),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(y,r)):r.isMeshPhongMaterial?(Te(y,r),r.isMeshToonMaterial?function(e,t){Ee(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(y,r):Ee(y,r)):r.isMeshStandardMaterial?(Te(y,r),r.isMeshPhysicalMaterial?function(e,t){Ae(e,t),e.reflectivity.value=t.reflectivity,e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&e.sheen.value.copy(t.sheen);t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&e.clearcoatNormalScale.value.negate());e.transparency.value=t.transparency}(y,r):Ae(y,r)):r.isMeshMatcapMaterial?(Te(y,r),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isMeshDepthMaterial?(Te(y,r),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isMeshDistanceMaterial?(Te(y,r),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(y,r)):r.isMeshNormalMaterial?(Te(y,r),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(y,r),r.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(y,r)):r.isPointsMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*Q,e.scale.value=.5*K,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(y,r):r.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(y,r):r.isShadowMaterial&&(y.color.value.copy(r.color),y.opacity.value=r.opacity),void 0!==y.ltc_1&&(y.ltc_1.value=nr.LTC_1),void 0!==y.ltc_2&&(y.ltc_2.value=nr.LTC_2),gn.upload(m,i.uniformsList,y,_)),r.isShaderMaterial&&!0===r.uniformsNeedUpdate&&(gn.upload(m,i.uniformsList,y,_),r.uniformsNeedUpdate=!1),r.isSpriteMaterial&&v.setValue(m,"center",n.center),f.numMultiviewViews>0?de.updateObjectMatricesUniforms(n,e,v):(v.setValue(m,"modelViewMatrix",n.modelViewMatrix),v.setValue(m,"normalMatrix",n.normalMatrix)),v.setValue(m,"modelMatrix",n.matrixWorld),f}function Te(e,t){var r;e.opacity.value=t.opacity,t.color&&e.diffuse.value.copy(t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=w.get(t.envMap).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?r=t.map:t.specularMap?r=t.specularMap:t.displacementMap?r=t.displacementMap:t.normalMap?r=t.normalMap:t.bumpMap?r=t.bumpMap:t.roughnessMap?r=t.roughnessMap:t.metalnessMap?r=t.metalnessMap:t.alphaMap?r=t.alphaMap:t.emissiveMap&&(r=t.emissiveMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix))}function Ee(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function Ae(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}xe.setAnimationLoop((function(e){he.isPresenting()||ye&&ye(e)})),"undefined"!=typeof window&&xe.setContext(window),this.setAnimationLoop=function(e){ye=e,he.setAnimationLoop(e),xe.start()},this.render=function(e,t){var r,n;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),r=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),n=arguments[3]),t&&t.isCamera){if(!z){V.geometry=null,V.program=null,V.wireframe=!1,j=-1,W=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),he.enabled&&(t=he.getCamera(t)),(d=R.get(e,t)).init(),e.onBeforeRender(B,e,t,r||k),oe.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),re.setFromMatrix(oe),ae=this.localClippingEnabled,ie=ne.init(this.clippingPlanes,ae,t),(h=L.get(e,t)).init(),be(e,t,0,B.sortObjects),!0===B.sortObjects&&h.sort(),ie&&ne.beginShadows();var i=d.state.shadowsArray;pe.render(i,e,t),d.setupLights(t),ie&&ne.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==r&&this.setRenderTarget(r),he.enabled&&de.isAvailable()&&de.attachCamera(t),P.render(h,e,t,n);var a=h.opaque,o=h.transparent;if(e.overrideMaterial){var s=e.overrideMaterial;a.length&&we(a,e,t,s),o.length&&we(o,e,t,s)}else a.length&&we(a,e,t),o.length&&we(o,e,t);e.onAfterRender(B,e,t),null!==k&&(_.updateRenderTargetMipmap(k),_.updateMultisampleRenderTarget(k)),x.buffers.depth.setTest(!0),x.buffers.depth.setMask(!0),x.buffers.color.setMask(!0),x.setPolygonOffset(!1),he.enabled&&(de.isAvailable()&&de.detachCamera(t),he.submitFrame()),h=null,d=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(e){U!==e&&m.bindFramebuffer(36160,e),U=e},this.getActiveCubeFace=function(){return F},this.getActiveMipmapLevel=function(){return G},this.getRenderTarget=function(){return k},this.setRenderTarget=function(e,t,r){k=e,F=t,G=r,e&&void 0===w.get(e).__webglFramebuffer&&_.setupRenderTarget(e);var n=U,i=!1;if(e){var a=w.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(n=a[t||0],i=!0):n=e.isWebGLMultisampleRenderTarget?w.get(e).__webglMultisampledFramebuffer:a,X.copy(e.viewport),Y.copy(e.scissor),Z=e.scissorTest}else X.copy($).multiplyScalar(Q).floor(),Y.copy(ee).multiplyScalar(Q).floor(),Z=te;if(H!==n&&(m.bindFramebuffer(36160,n),H=n),x.viewport(X),x.scissor(Y),x.setScissorTest(Z),i){var o=w.get(e.texture);m.framebufferTexture2D(36160,36064,34069+(t||0),o.__webglTexture,r||0)}},this.readRenderTargetPixels=function(e,t,r,n,i,a,o){if(e&&e.isWebGLRenderTarget){var s=w.get(e).__webglFramebuffer;if(e.isWebGLRenderTargetCube&&void 0!==o&&(s=s[o]),s){var c=!1;s!==H&&(m.bindFramebuffer(36160,s),c=!0);try{var l=e.texture,u=l.format,h=l.type;if(1023!==u&&D.convert(u)!==m.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(1009===h||D.convert(h)===m.getParameter(35738)||1015===h&&(g.isWebGL2||v.get("OES_texture_float")||v.get("WEBGL_color_buffer_float"))||1016===h&&(g.isWebGL2?v.get("EXT_color_buffer_float"):v.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===m.checkFramebufferStatus(36160)?t>=0&&t<=e.width-n&&r>=0&&r<=e.height-i&&m.readPixels(t,r,n,i,D.convert(u),D.convert(h),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&m.bindFramebuffer(36160,H)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(e,t,r){var n=t.image.width,i=t.image.height,a=D.convert(t.format);_.setTexture2D(t,0),m.copyTexImage2D(3553,r||0,a,e.x,e.y,n,i,0)},this.copyTextureToTexture=function(e,t,r,n){var i=t.image.width,a=t.image.height,o=D.convert(r.format),s=D.convert(r.type);_.setTexture2D(r,0),t.isDataTexture?m.texSubImage2D(3553,n||0,e.x,e.y,i,a,o,s,t.image.data):m.texSubImage2D(3553,n||0,e.x,e.y,o,s,t.image)},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function hi(e,t){this.name="",this.color=new Fe(e),this.density=void 0!==t?t:25e-5}function di(e,t,r){this.name="",this.color=new Fe(e),this.near=void 0!==t?t:1,this.far=void 0!==r?r:1e3}function pi(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function fi(e,t,r,n){this.data=e,this.itemSize=t,this.offset=r,this.normalized=!0===n}function mi(e){We.call(this),this.type="SpriteMaterial",this.color=new Fe(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}Object.assign(ci.prototype,u.prototype),Object.assign(li.prototype,u.prototype),Object.assign(hi.prototype,{isFogExp2:!0,clone:function(){return new hi(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(di.prototype,{isFog:!0,clone:function(){return new di(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(pi.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(pi.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.stride,r*=t.stride;for(var n=0,i=this.stride;n<i;n++)this.array[e+n]=t.array[r+n];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Object.defineProperties(fi.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(fi.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this.data.array[e+3]=i,this}}),mi.prototype=Object.create(We.prototype),mi.prototype.constructor=mi,mi.prototype.isSpriteMaterial=!0,mi.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this};var vi=new y,gi=new y,yi=new y,xi=new f,bi=new f,wi=new N,_i=new y,Mi=new y,Si=new y,Ti=new f,Ei=new f,Ai=new f;function Li(e){if($.call(this),this.type="Sprite",void 0===ii){ii=new dt;var t=new pi(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);ii.setIndex([0,1,2,0,2,3]),ii.addAttribute("position",new fi(t,3,0,!1)),ii.addAttribute("uv",new fi(t,2,3,!1))}this.geometry=ii,this.material=void 0!==e?e:new mi,this.center=new f(.5,.5)}function Ri(e,t,r,n,i,a){xi.subVectors(e,r).addScalar(.5).multiply(n),void 0!==i?(bi.x=a*xi.x-i*xi.y,bi.y=i*xi.x+a*xi.y):bi.copy(xi),e.copy(t),e.x+=bi.x,e.y+=bi.y,e.applyMatrix4(wi)}Li.prototype=Object.assign(Object.create($.prototype),{constructor:Li,isSprite:!0,raycast:function(e,t){null===e.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),gi.setFromMatrixScale(this.matrixWorld),wi.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),yi.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&gi.multiplyScalar(-yi.z);var r,n,i=this.material.rotation;0!==i&&(n=Math.cos(i),r=Math.sin(i));var a=this.center;Ri(_i.set(-.5,-.5,0),yi,a,gi,r,n),Ri(Mi.set(.5,-.5,0),yi,a,gi,r,n),Ri(Si.set(.5,.5,0),yi,a,gi,r,n),Ti.set(0,0),Ei.set(1,0),Ai.set(1,1);var o=e.ray.intersectTriangle(_i,Mi,Si,!1,vi);if(null!==o||(Ri(Mi.set(-.5,.5,0),yi,a,gi,r,n),Ei.set(0,1),null!==(o=e.ray.intersectTriangle(_i,Si,Mi,!1,vi)))){var s=e.ray.origin.distanceTo(vi);s<e.near||s>e.far||t.push({distance:s,point:vi.clone(),uv:Ne.getUV(vi,_i,Mi,Si,Ti,Ei,Ai,new f),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return $.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}});var Pi=new y,Ci=new y;function Oi(){$.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function Ii(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),Pt.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new N,this.bindMatrixInverse=new N}Oi.prototype=Object.assign(Object.create($.prototype),{constructor:Oi,isLOD:!0,copy:function(e){$.prototype.copy.call(this,e,!1);for(var t=e.levels,r=0,n=t.length;r<n;r++){var i=t[r];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var r=this.levels,n=0;n<r.length&&!(t<r[n].distance);n++);return r.splice(n,0,{distance:t,object:e}),this.add(e),this},getObjectForDistance:function(e){for(var t=this.levels,r=1,n=t.length;r<n&&!(e<t[r].distance);r++);return t[r-1].object},raycast:function(e,t){Pi.setFromMatrixPosition(this.matrixWorld);var r=e.ray.origin.distanceTo(Pi);this.getObjectForDistance(r).raycast(e,t)},update:function(e){var t=this.levels;if(t.length>1){Pi.setFromMatrixPosition(e.matrixWorld),Ci.setFromMatrixPosition(this.matrixWorld);var r=Pi.distanceTo(Ci);t[0].object.visible=!0;for(var n=1,i=t.length;n<i&&r>=t[n].distance;n++)t[n-1].object.visible=!1,t[n].object.visible=!0;for(;n<i;n++)t[n].object.visible=!1}},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);t.object.levels=[];for(var r=this.levels,n=0,i=r.length;n<i;n++){var a=r[n];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),Ii.prototype=Object.assign(Object.create(Pt.prototype),{constructor:Ii,isSkinnedMesh:!0,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var e=new T,t=this.geometry.attributes.skinWeight,r=0,n=t.count;r<n;r++){e.x=t.getX(r),e.y=t.getY(r),e.z=t.getZ(r),e.w=t.getW(r);var i=1/e.manhattanLength();i!==1/0?e.multiplyScalar(i):e.set(1,0,0,0),t.setXYZW(r,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){Pt.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Di=new N,Ni=new N;function Bi(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var r=0,n=this.bones.length;r<n;r++)this.boneInverses.push(new N)}}function zi(){$.call(this),this.type="Bone"}function Ui(e,t,r){Pt.call(this,e,t),this.instanceMatrix=new Xe(new Float32Array(16*r),16),this.count=r}function Fi(e){We.call(this),this.type="LineBasicMaterial",this.color=new Fe(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}Object.assign(Bi.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var r=new N;this.bones[e]&&r.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(r)}},pose:function(){var e,t,r;for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){for(var e=this.bones,t=this.boneInverses,r=this.boneMatrices,n=this.boneTexture,i=0,a=e.length;i<a;i++){var o=e[i]?e[i].matrixWorld:Ni;Di.multiplyMatrices(o,t[i]),Di.toArray(r,16*i)}void 0!==n&&(n.needsUpdate=!0)},clone:function(){return new Bi(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,r=this.bones.length;t<r;t++){var n=this.bones[t];if(n.name===e)return n}}}),zi.prototype=Object.assign(Object.create($.prototype),{constructor:zi,isBone:!0}),Ui.prototype=Object.assign(Object.create(Pt.prototype),{constructor:Ui,isInstancedMesh:!0,raycast:function(){},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,16*e)},updateMorphTargets:function(){}}),Fi.prototype=Object.create(We.prototype),Fi.prototype.constructor=Fi,Fi.prototype.isLineBasicMaterial=!0,Fi.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this};var Gi=new y,ki=new y,Hi=new N,ji=new Se,Vi=new ve;function Wi(e,t,r){1===r&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),$.call(this),this.type="Line",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new Fi({color:16777215*Math.random()})}Wi.prototype=Object.assign(Object.create($.prototype),{constructor:Wi,isLine:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,r=[0],n=1,i=t.count;n<i;n++)Gi.fromBufferAttribute(t,n-1),ki.fromBufferAttribute(t,n),r[n]=r[n-1],r[n]+=Gi.distanceTo(ki);e.addAttribute("lineDistance",new tt(r,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;(r=e.lineDistances)[0]=0;for(n=1,i=a.length;n<i;n++)r[n]=r[n-1],r[n]+=a[n-1].distanceTo(a[n])}return this},raycast:function(e,t){var r=e.linePrecision,n=this.geometry,i=this.matrixWorld;if(null===n.boundingSphere&&n.computeBoundingSphere(),Vi.copy(n.boundingSphere),Vi.applyMatrix4(i),Vi.radius+=r,!1!==e.ray.intersectsSphere(Vi)){Hi.getInverse(i),ji.copy(e.ray).applyMatrix4(Hi);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,s=new y,c=new y,l=new y,u=new y,h=this&&this.isLineSegments?2:1;if(n.isBufferGeometry){var d=n.index,p=n.attributes.position.array;if(null!==d)for(var f=d.array,m=0,v=f.length-1;m<v;m+=h){var g=f[m],x=f[m+1];if(s.fromArray(p,3*g),c.fromArray(p,3*x),!(ji.distanceSqToSegment(s,c,u,l)>o))u.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(u))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}else for(m=0,v=p.length/3-1;m<v;m+=h){if(s.fromArray(p,3*m),c.fromArray(p,3*m+3),!(ji.distanceSqToSegment(s,c,u,l)>o))u.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(u))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}else if(n.isGeometry){var b=n.vertices,w=b.length;for(m=0;m<w-1;m+=h){var _;if(!(ji.distanceSqToSegment(b[m],b[m+1],u,l)>o))u.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(u))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var qi=new y,Xi=new y;function Yi(e,t){Wi.call(this,e,t),this.type="LineSegments"}function Zi(e,t){Wi.call(this,e,t),this.type="LineLoop"}function Ji(e){We.call(this),this.type="PointsMaterial",this.color=new Fe(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}Yi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Yi,isLineSegments:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,r=[],n=0,i=t.count;n<i;n+=2)qi.fromBufferAttribute(t,n),Xi.fromBufferAttribute(t,n+1),r[n]=0===n?0:r[n-1],r[n+1]=r[n]+qi.distanceTo(Xi);e.addAttribute("lineDistance",new tt(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;for(r=e.lineDistances,n=0,i=a.length;n<i;n+=2)qi.copy(a[n]),Xi.copy(a[n+1]),r[n]=0===n?0:r[n-1],r[n+1]=r[n]+qi.distanceTo(Xi)}return this}}),Zi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Zi,isLineLoop:!0}),Ji.prototype=Object.create(We.prototype),Ji.prototype.constructor=Ji,Ji.prototype.isPointsMaterial=!0,Ji.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this};var Ki=new N,Qi=new Se,$i=new ve,ea=new y;function ta(e,t){$.call(this),this.type="Points",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new Ji({color:16777215*Math.random()}),this.updateMorphTargets()}function ra(e,t,r,n,i,a,o){var s=Qi.distanceSqToPoint(e);if(s<r){var c=new y;Qi.closestPointToPoint(e,c),c.applyMatrix4(n);var l=i.ray.origin.distanceTo(c);if(l<i.near||l>i.far)return;a.push({distance:l,distanceToRay:Math.sqrt(s),point:c,index:t,face:null,object:o})}}function na(e,t,r,n,i,a,o,s,c){S.call(this,e,t,r,n,i,a,o,s,c),this.format=void 0!==o?o:1022,this.minFilter=void 0!==a?a:1006,this.magFilter=void 0!==i?i:1006,this.generateMipmaps=!1}function ia(e,t,r,n,i,a,o,s,c,l,u,h){S.call(this,null,a,o,s,c,l,n,i,u,h),this.image={width:t,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function aa(e,t,r,n,i,a,o,s,c){S.call(this,e,t,r,n,i,a,o,s,c),this.needsUpdate=!0}function oa(e,t,r,n,i,a,o,s,c,l){if(1026!==(l=void 0!==l?l:1026)&&1027!==l)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===r&&1026===l&&(r=1012),void 0===r&&1027===l&&(r=1020),S.call(this,null,n,i,a,o,s,l,r,c),this.image={width:e,height:t},this.magFilter=void 0!==o?o:1003,this.minFilter=void 0!==s?s:1003,this.flipY=!1,this.generateMipmaps=!1}function sa(e){dt.call(this),this.type="WireframeGeometry";var t,r,n,i,a,o,s,c,l,u,h=[],d=[0,0],p={},f=["a","b","c"];if(e&&e.isGeometry){var m=e.faces;for(t=0,n=m.length;t<n;t++){var v=m[t];for(r=0;r<3;r++)s=v[f[r]],c=v[f[(r+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[l=d[0]+","+d[1]]&&(p[l]={index1:d[0],index2:d[1]})}for(l in p)o=p[l],u=e.vertices[o.index1],h.push(u.x,u.y,u.z),u=e.vertices[o.index2],h.push(u.x,u.y,u.z)}else if(e&&e.isBufferGeometry){var g,x,b,w,_,M,S;if(u=new y,null!==e.index){for(g=e.attributes.position,x=e.index,0===(b=e.groups).length&&(b=[{start:0,count:x.count,materialIndex:0}]),i=0,a=b.length;i<a;++i)for(t=_=(w=b[i]).start,n=_+w.count;t<n;t+=3)for(r=0;r<3;r++)s=x.getX(t+r),c=x.getX(t+(r+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[l=d[0]+","+d[1]]&&(p[l]={index1:d[0],index2:d[1]});for(l in p)o=p[l],u.fromBufferAttribute(g,o.index1),h.push(u.x,u.y,u.z),u.fromBufferAttribute(g,o.index2),h.push(u.x,u.y,u.z)}else for(t=0,n=(g=e.attributes.position).count/3;t<n;t++)for(r=0;r<3;r++)M=3*t+r,u.fromBufferAttribute(g,M),h.push(u.x,u.y,u.z),S=3*t+(r+1)%3,u.fromBufferAttribute(g,S),h.push(u.x,u.y,u.z)}this.addAttribute("position",new tt(h,3))}function ca(e,t,r){zt.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:r},this.fromBufferGeometry(new la(e,t,r)),this.mergeVertices()}function la(e,t,r){dt.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:r};var n,i,a=[],o=[],s=[],c=[],l=1e-5,u=new y,h=new y,d=new y,p=new y,f=new y;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var m=t+1;for(n=0;n<=r;n++){var v=n/r;for(i=0;i<=t;i++){var g=i/t;e(g,v,h),o.push(h.x,h.y,h.z),g-l>=0?(e(g-l,v,d),p.subVectors(h,d)):(e(g+l,v,d),p.subVectors(d,h)),v-l>=0?(e(g,v-l,d),f.subVectors(h,d)):(e(g,v+l,d),f.subVectors(d,h)),u.crossVectors(p,f).normalize(),s.push(u.x,u.y,u.z),c.push(g,v)}}for(n=0;n<r;n++)for(i=0;i<t;i++){var x=n*m+i,b=n*m+i+1,w=(n+1)*m+i+1,_=(n+1)*m+i;a.push(x,b,_),a.push(b,w,_)}this.setIndex(a),this.addAttribute("position",new tt(o,3)),this.addAttribute("normal",new tt(s,3)),this.addAttribute("uv",new tt(c,2))}function ua(e,t,r,n){zt.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:n},this.fromBufferGeometry(new ha(e,t,r,n)),this.mergeVertices()}function ha(e,t,r,n){dt.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:n},r=r||1;var i=[],a=[];function o(e,t,r,n){var i,a,o=Math.pow(2,n),c=[];for(i=0;i<=o;i++){c[i]=[];var l=e.clone().lerp(r,i/o),u=t.clone().lerp(r,i/o),h=o-i;for(a=0;a<=h;a++)c[i][a]=0===a&&i===o?l:l.clone().lerp(u,a/h)}for(i=0;i<o;i++)for(a=0;a<2*(o-i)-1;a++){var d=Math.floor(a/2);a%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(e){i.push(e.x,e.y,e.z)}function c(t,r){var n=3*t;r.x=e[n+0],r.y=e[n+1],r.z=e[n+2]}function l(e,t,r,n){n<0&&1===e.x&&(a[t]=e.x-1),0===r.x&&0===r.z&&(a[t]=n/2/Math.PI+.5)}function u(e){return Math.atan2(e.z,-e.x)}!function(e){for(var r=new y,n=new y,i=new y,a=0;a<t.length;a+=3)c(t[a+0],r),c(t[a+1],n),c(t[a+2],i),o(r,n,i,e)}(n=n||0),function(e){for(var t=new y,r=0;r<i.length;r+=3)t.x=i[r+0],t.y=i[r+1],t.z=i[r+2],t.normalize().multiplyScalar(e),i[r+0]=t.x,i[r+1]=t.y,i[r+2]=t.z}(r),function(){for(var e=new y,t=0;t<i.length;t+=3){e.x=i[t+0],e.y=i[t+1],e.z=i[t+2];var r=u(e)/2/Math.PI+.5,n=(o=e,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(r,1-n)}var o;(function(){for(var e=new y,t=new y,r=new y,n=new y,o=new f,s=new f,c=new f,h=0,d=0;h<i.length;h+=9,d+=6){e.set(i[h+0],i[h+1],i[h+2]),t.set(i[h+3],i[h+4],i[h+5]),r.set(i[h+6],i[h+7],i[h+8]),o.set(a[d+0],a[d+1]),s.set(a[d+2],a[d+3]),c.set(a[d+4],a[d+5]),n.copy(e).add(t).add(r).divideScalar(3);var p=u(n);l(o,d+0,e,p),l(s,d+2,t,p),l(c,d+4,r,p)}})(),function(){for(var e=0;e<a.length;e+=6){var t=a[e+0],r=a[e+2],n=a[e+4],i=Math.max(t,r,n),o=Math.min(t,r,n);i>.9&&o<.1&&(t<.2&&(a[e+0]+=1),r<.2&&(a[e+2]+=1),n<.2&&(a[e+4]+=1))}}()}(),this.addAttribute("position",new tt(i,3)),this.addAttribute("normal",new tt(i.slice(),3)),this.addAttribute("uv",new tt(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}function da(e,t){zt.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new pa(e,t)),this.mergeVertices()}function pa(e,t){ha.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function fa(e,t){zt.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ma(e,t)),this.mergeVertices()}function ma(e,t){ha.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function va(e,t){zt.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ga(e,t)),this.mergeVertices()}function ga(e,t){var r=(1+Math.sqrt(5))/2,n=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1];ha.call(this,n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ya(e,t){zt.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new xa(e,t)),this.mergeVertices()}function xa(e,t){var r=(1+Math.sqrt(5))/2,n=1/r,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-r,0,-n,r,0,n,-r,0,n,r,-n,-r,0,-n,r,0,n,-r,0,n,r,0,-r,0,-n,r,0,-n,-r,0,n,r,0,n];ha.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ba(e,t,r,n,i,a){zt.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:n,closed:i},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new wa(e,t,r,n,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function wa(e,t,r,n,i){dt.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:n,closed:i},t=t||64,r=r||1,n=n||8,i=i||!1;var a=e.computeFrenetFrames(t,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,c=new y,l=new y,u=new f,h=new y,d=[],p=[],m=[],v=[];function g(i){h=e.getPointAt(i/t,h);var o=a.normals[i],u=a.binormals[i];for(s=0;s<=n;s++){var f=s/n*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);l.x=v*o.x+m*u.x,l.y=v*o.y+m*u.y,l.z=v*o.z+m*u.z,l.normalize(),p.push(l.x,l.y,l.z),c.x=h.x+r*l.x,c.y=h.y+r*l.y,c.z=h.z+r*l.z,d.push(c.x,c.y,c.z)}}!function(){for(o=0;o<t;o++)g(o);g(!1===i?t:0),function(){for(o=0;o<=t;o++)for(s=0;s<=n;s++)u.x=o/t,u.y=s/n,m.push(u.x,u.y)}(),function(){for(s=1;s<=t;s++)for(o=1;o<=n;o++){var e=(n+1)*(s-1)+(o-1),r=(n+1)*s+(o-1),i=(n+1)*s+o,a=(n+1)*(s-1)+o;v.push(e,r,a),v.push(r,i,a)}}()}(),this.setIndex(v),this.addAttribute("position",new tt(d,3)),this.addAttribute("normal",new tt(p,3)),this.addAttribute("uv",new tt(m,2))}function _a(e,t,r,n,i,a,o){zt.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Ma(e,t,r,n,i,a)),this.mergeVertices()}function Ma(e,t,r,n,i,a){dt.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},e=e||1,t=t||.4,r=Math.floor(r)||64,n=Math.floor(n)||8,i=i||2,a=a||3;var o,s,c=[],l=[],u=[],h=[],d=new y,p=new y,f=new y,m=new y,v=new y,g=new y,x=new y;for(o=0;o<=r;++o){var b=o/r*i*Math.PI*2;for(L(b,i,a,e,f),L(b+.01,i,a,e,m),g.subVectors(m,f),x.addVectors(m,f),v.crossVectors(g,x),x.crossVectors(v,g),v.normalize(),x.normalize(),s=0;s<=n;++s){var w=s/n*Math.PI*2,_=-t*Math.cos(w),M=t*Math.sin(w);d.x=f.x+(_*x.x+M*v.x),d.y=f.y+(_*x.y+M*v.y),d.z=f.z+(_*x.z+M*v.z),l.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),u.push(p.x,p.y,p.z),h.push(o/r),h.push(s/n)}}for(s=1;s<=r;s++)for(o=1;o<=n;o++){var S=(n+1)*(s-1)+(o-1),T=(n+1)*s+(o-1),E=(n+1)*s+o,A=(n+1)*(s-1)+o;c.push(S,T,A),c.push(T,E,A)}function L(e,t,r,n,i){var a=Math.cos(e),o=Math.sin(e),s=r/t*e,c=Math.cos(s);i.x=n*(2+c)*.5*a,i.y=n*(2+c)*o*.5,i.z=n*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new tt(l,3)),this.addAttribute("normal",new tt(u,3)),this.addAttribute("uv",new tt(h,2))}function Sa(e,t,r,n,i){zt.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},this.fromBufferGeometry(new Ta(e,t,r,n,i)),this.mergeVertices()}function Ta(e,t,r,n,i){dt.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},e=e||1,t=t||.4,r=Math.floor(r)||8,n=Math.floor(n)||6,i=i||2*Math.PI;var a,o,s=[],c=[],l=[],u=[],h=new y,d=new y,p=new y;for(a=0;a<=r;a++)for(o=0;o<=n;o++){var f=o/n*i,m=a/r*Math.PI*2;d.x=(e+t*Math.cos(m))*Math.cos(f),d.y=(e+t*Math.cos(m))*Math.sin(f),d.z=t*Math.sin(m),c.push(d.x,d.y,d.z),h.x=e*Math.cos(f),h.y=e*Math.sin(f),p.subVectors(d,h).normalize(),l.push(p.x,p.y,p.z),u.push(o/n),u.push(a/r)}for(a=1;a<=r;a++)for(o=1;o<=n;o++){var v=(n+1)*a+o-1,g=(n+1)*(a-1)+o-1,x=(n+1)*(a-1)+o,b=(n+1)*a+o;s.push(v,g,b),s.push(g,x,b)}this.setIndex(s),this.addAttribute("position",new tt(c,3)),this.addAttribute("normal",new tt(l,3)),this.addAttribute("uv",new tt(u,2))}ta.prototype=Object.assign(Object.create($.prototype),{constructor:ta,isPoints:!0,raycast:function(e,t){var r=this.geometry,n=this.matrixWorld,i=e.params.Points.threshold;if(null===r.boundingSphere&&r.computeBoundingSphere(),$i.copy(r.boundingSphere),$i.applyMatrix4(n),$i.radius+=i,!1!==e.ray.intersectsSphere($i)){Ki.getInverse(n),Qi.copy(e.ray).applyMatrix4(Ki);var a=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(r.isBufferGeometry){var s=r.index,c=r.attributes.position.array;if(null!==s)for(var l=s.array,u=0,h=l.length;u<h;u++){var d=l[u];ea.fromArray(c,3*d),ra(ea,d,o,n,e,t,this)}else{u=0;for(var p=c.length/3;u<p;u++)ea.fromArray(c,3*u),ra(ea,u,o,n,e,t,this)}}else{var f=r.vertices;for(u=0,p=f.length;u<p;u++)ra(f[u],u,o,n,e,t,this)}}},updateMorphTargets:function(){var e,t,r,n=this.geometry;if(n.isBufferGeometry){var i=n.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)r=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}}else{var s=n.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),na.prototype=Object.assign(Object.create(S.prototype),{constructor:na,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),ia.prototype=Object.create(S.prototype),ia.prototype.constructor=ia,ia.prototype.isCompressedTexture=!0,aa.prototype=Object.create(S.prototype),aa.prototype.constructor=aa,aa.prototype.isCanvasTexture=!0,oa.prototype=Object.create(S.prototype),oa.prototype.constructor=oa,oa.prototype.isDepthTexture=!0,sa.prototype=Object.create(dt.prototype),sa.prototype.constructor=sa,ca.prototype=Object.create(zt.prototype),ca.prototype.constructor=ca,la.prototype=Object.create(dt.prototype),la.prototype.constructor=la,ua.prototype=Object.create(zt.prototype),ua.prototype.constructor=ua,ha.prototype=Object.create(dt.prototype),ha.prototype.constructor=ha,da.prototype=Object.create(zt.prototype),da.prototype.constructor=da,pa.prototype=Object.create(ha.prototype),pa.prototype.constructor=pa,fa.prototype=Object.create(zt.prototype),fa.prototype.constructor=fa,ma.prototype=Object.create(ha.prototype),ma.prototype.constructor=ma,va.prototype=Object.create(zt.prototype),va.prototype.constructor=va,ga.prototype=Object.create(ha.prototype),ga.prototype.constructor=ga,ya.prototype=Object.create(zt.prototype),ya.prototype.constructor=ya,xa.prototype=Object.create(ha.prototype),xa.prototype.constructor=xa,ba.prototype=Object.create(zt.prototype),ba.prototype.constructor=ba,wa.prototype=Object.create(dt.prototype),wa.prototype.constructor=wa,wa.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return e.path=this.parameters.path.toJSON(),e},_a.prototype=Object.create(zt.prototype),_a.prototype.constructor=_a,Ma.prototype=Object.create(dt.prototype),Ma.prototype.constructor=Ma,Sa.prototype=Object.create(zt.prototype),Sa.prototype.constructor=Sa,Ta.prototype=Object.create(dt.prototype),Ta.prototype.constructor=Ta;var Ea=function(e,t,r){r=r||2;var n,i,a,o,s,c,l,u=t&&t.length,h=u?t[0]*r:e.length,d=Aa(e,0,h,r,!0),p=[];if(!d||d.next===d.prev)return p;if(u&&(d=function(e,t,r,n){var i,a,o,s,c,l=[];for(i=0,a=t.length;i<a;i++)o=t[i]*n,s=i<a-1?t[i+1]*n:e.length,(c=Aa(e,o,s,n,!1))===c.next&&(c.steiner=!0),l.push(za(c));for(l.sort(Da),i=0;i<l.length;i++)Na(l[i],r),r=La(r,r.next);return r}(e,t,d,r)),e.length>80*r){n=a=e[0],i=o=e[1];for(var f=r;f<h;f+=r)(s=e[f])<n&&(n=s),(c=e[f+1])<i&&(i=c),s>a&&(a=s),c>o&&(o=c);l=0!==(l=Math.max(a-n,o-i))?1/l:0}return Ra(d,p,r,n,i,l),p};function Aa(e,t,r,n,i){var a,o;if(i===function(e,t,r,n){for(var i=0,a=t,o=r-n;a<r;a+=n)i+=(e[o]-e[a])*(e[a+1]+e[o+1]),o=a;return i}(e,t,r,n)>0)for(a=t;a<r;a+=n)o=Wa(a,e[a],e[a+1],o);else for(a=r-n;a>=t;a-=n)o=Wa(a,e[a],e[a+1],o);return o&&ka(o,o.next)&&(qa(o),o=o.next),o}function La(e,t){if(!e)return e;t||(t=e);var r,n=e;do{if(r=!1,n.steiner||!ka(n,n.next)&&0!==Ga(n.prev,n,n.next))n=n.next;else{if(qa(n),(n=t=n.prev)===n.next)break;r=!0}}while(r||n!==t);return t}function Ra(e,t,r,n,i,a,o){if(e){!o&&a&&function(e,t,r,n){var i=e;do{null===i.z&&(i.z=Ba(i.x,i.y,t,r,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==e);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,r,n,i,a,o,s,c,l=1;do{for(r=e,e=null,a=null,o=0;r;){for(o++,n=r,s=0,t=0;t<l&&(s++,n=n.nextZ);t++);for(c=l;s>0||c>0&&n;)0!==s&&(0===c||!n||r.z<=n.z)?(i=r,r=r.nextZ,s--):(i=n,n=n.nextZ,c--),a?a.nextZ=i:e=i,i.prevZ=a,a=i;r=n}a.nextZ=null,l*=2}while(o>1)}(i)}(e,n,i,a);for(var s,c,l=e;e.prev!==e.next;)if(s=e.prev,c=e.next,a?Ca(e,n,i,a):Pa(e))t.push(s.i/r),t.push(e.i/r),t.push(c.i/r),qa(e),e=c.next,l=c.next;else if((e=c)===l){o?1===o?Ra(e=Oa(e,t,r),t,r,n,i,a,2):2===o&&Ia(e,t,r,n,i,a):Ra(La(e),t,r,n,i,a,1);break}}}function Pa(e){var t=e.prev,r=e,n=e.next;if(Ga(t,r,n)>=0)return!1;for(var i=e.next.next;i!==e.prev;){if(Ua(t.x,t.y,r.x,r.y,n.x,n.y,i.x,i.y)&&Ga(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Ca(e,t,r,n){var i=e.prev,a=e,o=e.next;if(Ga(i,a,o)>=0)return!1;for(var s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,c=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,l=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,u=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y,h=Ba(s,c,t,r,n),d=Ba(l,u,t,r,n),p=e.prevZ,f=e.nextZ;p&&p.z>=h&&f&&f.z<=d;){if(p!==e.prev&&p!==e.next&&Ua(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Ga(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==e.prev&&f!==e.next&&Ua(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ga(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=h;){if(p!==e.prev&&p!==e.next&&Ua(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Ga(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==e.prev&&f!==e.next&&Ua(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ga(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function Oa(e,t,r){var n=e;do{var i=n.prev,a=n.next.next;!ka(i,a)&&Ha(i,n,n.next,a)&&ja(i,a)&&ja(a,i)&&(t.push(i.i/r),t.push(n.i/r),t.push(a.i/r),qa(n),qa(n.next),n=e=a),n=n.next}while(n!==e);return n}function Ia(e,t,r,n,i,a){var o=e;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&Fa(o,s)){var c=Va(o,s);return o=La(o,o.next),c=La(c,c.next),Ra(o,t,r,n,i,a),void Ra(c,t,r,n,i,a)}s=s.next}o=o.next}while(o!==e)}function Da(e,t){return e.x-t.x}function Na(e,t){if(t=function(e,t){var r,n=t,i=e.x,a=e.y,o=-1/0;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){var s=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(s<=i&&s>o){if(o=s,s===i){if(a===n.y)return n;if(a===n.next.y)return n.next}r=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!r)return null;if(i===o)return r.prev;var c,l=r,u=r.x,h=r.y,d=1/0;n=r.next;for(;n!==l;)i>=n.x&&n.x>=u&&i!==n.x&&Ua(a<h?i:o,a,u,h,a<h?o:i,a,n.x,n.y)&&((c=Math.abs(a-n.y)/(i-n.x))<d||c===d&&n.x>r.x)&&ja(n,e)&&(r=n,d=c),n=n.next;return r}(e,t)){var r=Va(t,e);La(r,r.next)}}function Ba(e,t,r,n,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function za(e){var t=e,r=e;do{(t.x<r.x||t.x===r.x&&t.y<r.y)&&(r=t),t=t.next}while(t!==e);return r}function Ua(e,t,r,n,i,a,o,s){return(i-o)*(t-s)-(e-o)*(a-s)>=0&&(e-o)*(n-s)-(r-o)*(t-s)>=0&&(r-o)*(a-s)-(i-o)*(n-s)>=0}function Fa(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&Ha(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}(e,t)&&ja(e,t)&&ja(t,e)&&function(e,t){var r=e,n=!1,i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{r.y>a!=r.next.y>a&&r.next.y!==r.y&&i<(r.next.x-r.x)*(a-r.y)/(r.next.y-r.y)+r.x&&(n=!n),r=r.next}while(r!==e);return n}(e,t)}function Ga(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function ka(e,t){return e.x===t.x&&e.y===t.y}function Ha(e,t,r,n){return!!(ka(e,r)&&ka(t,n)||ka(e,n)&&ka(r,t))||Ga(e,t,r)>0!=Ga(e,t,n)>0&&Ga(r,n,e)>0!=Ga(r,n,t)>0}function ja(e,t){return Ga(e.prev,e,e.next)<0?Ga(e,t,e.next)>=0&&Ga(e,e.prev,t)>=0:Ga(e,t,e.prev)<0||Ga(e,e.next,t)<0}function Va(e,t){var r=new Xa(e.i,e.x,e.y),n=new Xa(t.i,t.x,t.y),i=e.next,a=t.prev;return e.next=t,t.prev=e,r.next=i,i.prev=r,n.next=r,r.prev=n,a.next=n,n.prev=a,n}function Wa(e,t,r,n){var i=new Xa(e,t,r);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function qa(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function Xa(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Ya={area:function(e){for(var t=e.length,r=0,n=t-1,i=0;i<t;n=i++)r+=e[n].x*e[i].y-e[i].x*e[n].y;return.5*r},isClockWise:function(e){return Ya.area(e)<0},triangulateShape:function(e,t){var r=[],n=[],i=[];Za(e),Ja(r,e);var a=e.length;t.forEach(Za);for(var o=0;o<t.length;o++)n.push(a),a+=t[o].length,Ja(r,t[o]);var s=Ea(r,n);for(o=0;o<s.length;o+=3)i.push(s.slice(o,o+3));return i}};function Za(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function Ja(e,t){for(var r=0;r<t.length;r++)e.push(t[r].x),e.push(t[r].y)}function Ka(e,t){zt.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new Qa(e,t)),this.mergeVertices()}function Qa(e,t){dt.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];for(var r=this,n=[],i=[],a=0,o=e.length;a<o;a++){s(e[a])}function s(e){var a=[],o=void 0!==t.curveSegments?t.curveSegments:12,s=void 0!==t.steps?t.steps:1,c=void 0!==t.depth?t.depth:100,l=void 0===t.bevelEnabled||t.bevelEnabled,u=void 0!==t.bevelThickness?t.bevelThickness:6,h=void 0!==t.bevelSize?t.bevelSize:u-2,d=void 0!==t.bevelOffset?t.bevelOffset:0,p=void 0!==t.bevelSegments?t.bevelSegments:3,m=t.extrudePath,v=void 0!==t.UVGenerator?t.UVGenerator:$a;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=t.amount);var g,x,b,w,_,M,S,T,E=!1;m&&(g=m.getSpacedPoints(s),E=!0,l=!1,x=m.computeFrenetFrames(s,!1),b=new y,w=new y,_=new y),l||(p=0,u=0,h=0,d=0);var A=e.extractPoints(o),L=A.shape,R=A.holes;if(!Ya.isClockWise(L))for(L=L.reverse(),S=0,T=R.length;S<T;S++)M=R[S],Ya.isClockWise(M)&&(R[S]=M.reverse());var P=Ya.triangulateShape(L,R),C=L;for(S=0,T=R.length;S<T;S++)M=R[S],L=L.concat(M);function O(e,t,r){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(r).add(e)}var I,D,N,B,z,U,F=L.length,G=P.length;function k(e,t,r){var n,i,a,o=e.x-t.x,s=e.y-t.y,c=r.x-e.x,l=r.y-e.y,u=o*o+s*s,h=o*l-s*c;if(Math.abs(h)>Number.EPSILON){var d=Math.sqrt(u),p=Math.sqrt(c*c+l*l),m=t.x-s/d,v=t.y+o/d,g=((r.x-l/p-m)*l-(r.y+c/p-v)*c)/(o*l-s*c),y=(n=m+o*g-e.x)*n+(i=v+s*g-e.y)*i;if(y<=2)return new f(n,i);a=Math.sqrt(y/2)}else{var x=!1;o>Number.EPSILON?c>Number.EPSILON&&(x=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(x=!0):Math.sign(s)===Math.sign(l)&&(x=!0),x?(n=-s,i=o,a=Math.sqrt(u)):(n=o,i=s,a=Math.sqrt(u/2))}return new f(n/a,i/a)}for(var H=[],j=0,V=C.length,W=V-1,q=j+1;j<V;j++,W++,q++)W===V&&(W=0),q===V&&(q=0),H[j]=k(C[j],C[W],C[q]);var X,Y,Z=[],J=H.concat();for(S=0,T=R.length;S<T;S++){for(M=R[S],X=[],j=0,W=(V=M.length)-1,q=j+1;j<V;j++,W++,q++)W===V&&(W=0),q===V&&(q=0),X[j]=k(M[j],M[W],M[q]);Z.push(X),J=J.concat(X)}for(I=0;I<p;I++){for(N=I/p,B=u*Math.cos(N*Math.PI/2),D=h*Math.sin(N*Math.PI/2)+d,j=0,V=C.length;j<V;j++)Q((z=O(C[j],H[j],D)).x,z.y,-B);for(S=0,T=R.length;S<T;S++)for(M=R[S],X=Z[S],j=0,V=M.length;j<V;j++)Q((z=O(M[j],X[j],D)).x,z.y,-B)}for(D=h+d,j=0;j<F;j++)z=l?O(L[j],J[j],D):L[j],E?(w.copy(x.normals[0]).multiplyScalar(z.x),b.copy(x.binormals[0]).multiplyScalar(z.y),_.copy(g[0]).add(w).add(b),Q(_.x,_.y,_.z)):Q(z.x,z.y,0);for(Y=1;Y<=s;Y++)for(j=0;j<F;j++)z=l?O(L[j],J[j],D):L[j],E?(w.copy(x.normals[Y]).multiplyScalar(z.x),b.copy(x.binormals[Y]).multiplyScalar(z.y),_.copy(g[Y]).add(w).add(b),Q(_.x,_.y,_.z)):Q(z.x,z.y,c/s*Y);for(I=p-1;I>=0;I--){for(N=I/p,B=u*Math.cos(N*Math.PI/2),D=h*Math.sin(N*Math.PI/2)+d,j=0,V=C.length;j<V;j++)Q((z=O(C[j],H[j],D)).x,z.y,c+B);for(S=0,T=R.length;S<T;S++)for(M=R[S],X=Z[S],j=0,V=M.length;j<V;j++)z=O(M[j],X[j],D),E?Q(z.x,z.y+g[s-1].y,g[s-1].x+B):Q(z.x,z.y,c+B)}function K(e,t){var r,n;for(j=e.length;--j>=0;){r=j,(n=j-1)<0&&(n=e.length-1);var i=0,a=s+2*p;for(i=0;i<a;i++){var o=F*i,c=F*(i+1);ee(t+r+o,t+n+o,t+n+c,t+r+c)}}}function Q(e,t,r){a.push(e),a.push(t),a.push(r)}function $(e,t,i){te(e),te(t),te(i);var a=n.length/3,o=v.generateTopUV(r,n,a-3,a-2,a-1);re(o[0]),re(o[1]),re(o[2])}function ee(e,t,i,a){te(e),te(t),te(a),te(t),te(i),te(a);var o=n.length/3,s=v.generateSideWallUV(r,n,o-6,o-3,o-2,o-1);re(s[0]),re(s[1]),re(s[3]),re(s[1]),re(s[2]),re(s[3])}function te(e){n.push(a[3*e+0]),n.push(a[3*e+1]),n.push(a[3*e+2])}function re(e){i.push(e.x),i.push(e.y)}!function(){var e=n.length/3;if(l){var t=0,i=F*t;for(j=0;j<G;j++)$((U=P[j])[2]+i,U[1]+i,U[0]+i);for(i=F*(t=s+2*p),j=0;j<G;j++)$((U=P[j])[0]+i,U[1]+i,U[2]+i)}else{for(j=0;j<G;j++)$((U=P[j])[2],U[1],U[0]);for(j=0;j<G;j++)$((U=P[j])[0]+F*s,U[1]+F*s,U[2]+F*s)}r.addGroup(e,n.length/3-e,0)}(),function(){var e=n.length/3,t=0;for(K(C,t),t+=C.length,S=0,T=R.length;S<T;S++)K(M=R[S],t),t+=M.length;r.addGroup(e,n.length/3-e,1)}()}this.addAttribute("position",new tt(n,3)),this.addAttribute("uv",new tt(i,2)),this.computeVertexNormals()}Ka.prototype=Object.create(zt.prototype),Ka.prototype.constructor=Ka,Ka.prototype.toJSON=function(){var e=zt.prototype.toJSON.call(this);return eo(this.parameters.shapes,this.parameters.options,e)},Qa.prototype=Object.create(dt.prototype),Qa.prototype.constructor=Qa,Qa.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return eo(this.parameters.shapes,this.parameters.options,e)};var $a={generateTopUV:function(e,t,r,n,i){var a=t[3*r],o=t[3*r+1],s=t[3*n],c=t[3*n+1],l=t[3*i],u=t[3*i+1];return[new f(a,o),new f(s,c),new f(l,u)]},generateSideWallUV:function(e,t,r,n,i,a){var o=t[3*r],s=t[3*r+1],c=t[3*r+2],l=t[3*n],u=t[3*n+1],h=t[3*n+2],d=t[3*i],p=t[3*i+1],m=t[3*i+2],v=t[3*a],g=t[3*a+1],y=t[3*a+2];return Math.abs(s-u)<.01?[new f(o,1-c),new f(l,1-h),new f(d,1-m),new f(v,1-y)]:[new f(s,1-c),new f(u,1-h),new f(p,1-m),new f(g,1-y)]}};function eo(e,t,r){if(r.shapes=[],Array.isArray(e))for(var n=0,i=e.length;n<i;n++){var a=e[n];r.shapes.push(a.uuid)}else r.shapes.push(e.uuid);return void 0!==t.extrudePath&&(r.options.extrudePath=t.extrudePath.toJSON()),r}function to(e,t){zt.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new ro(e,t)),this.mergeVertices()}function ro(e,t){var r=(t=t||{}).font;if(!r||!r.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new zt;var n=r.generateShapes(e,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),Qa.call(this,n,t),this.type="TextBufferGeometry"}function no(e,t,r,n,i,a,o){zt.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new io(e,t,r,n,i,a,o)),this.mergeVertices()}function io(e,t,r,n,i,a,o){dt.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},e=e||1,t=Math.max(3,Math.floor(t)||8),r=Math.max(2,Math.floor(r)||6),n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,c,l=Math.min(a+o,Math.PI),u=0,h=[],d=new y,p=new y,f=[],m=[],v=[],g=[];for(c=0;c<=r;c++){var x=[],b=c/r,w=0;for(0==c&&0==a?w=.5/t:c==r&&l==Math.PI&&(w=-.5/t),s=0;s<=t;s++){var _=s/t;d.x=-e*Math.cos(n+_*i)*Math.sin(a+b*o),d.y=e*Math.cos(a+b*o),d.z=e*Math.sin(n+_*i)*Math.sin(a+b*o),m.push(d.x,d.y,d.z),p.copy(d).normalize(),v.push(p.x,p.y,p.z),g.push(_+w,1-b),x.push(u++)}h.push(x)}for(c=0;c<r;c++)for(s=0;s<t;s++){var M=h[c][s+1],S=h[c][s],T=h[c+1][s],E=h[c+1][s+1];(0!==c||a>0)&&f.push(M,S,E),(c!==r-1||l<Math.PI)&&f.push(S,T,E)}this.setIndex(f),this.addAttribute("position",new tt(m,3)),this.addAttribute("normal",new tt(v,3)),this.addAttribute("uv",new tt(g,2))}function ao(e,t,r,n,i,a){zt.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new oo(e,t,r,n,i,a)),this.mergeVertices()}function oo(e,t,r,n,i,a){dt.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},e=e||.5,t=t||1,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,r=void 0!==r?Math.max(3,r):8;var o,s,c,l=[],u=[],h=[],d=[],p=e,m=(t-e)/(n=void 0!==n?Math.max(1,n):1),v=new y,g=new f;for(s=0;s<=n;s++){for(c=0;c<=r;c++)o=i+c/r*a,v.x=p*Math.cos(o),v.y=p*Math.sin(o),u.push(v.x,v.y,v.z),h.push(0,0,1),g.x=(v.x/t+1)/2,g.y=(v.y/t+1)/2,d.push(g.x,g.y);p+=m}for(s=0;s<n;s++){var x=s*(r+1);for(c=0;c<r;c++){var b=o=c+x,w=o+r+1,_=o+r+2,M=o+1;l.push(b,w,M),l.push(w,_,M)}}this.setIndex(l),this.addAttribute("position",new tt(u,3)),this.addAttribute("normal",new tt(h,3)),this.addAttribute("uv",new tt(d,2))}function so(e,t,r,n){zt.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},this.fromBufferGeometry(new co(e,t,r,n)),this.mergeVertices()}function co(e,t,r,n){dt.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},t=Math.floor(t)||12,r=r||0,n=n||2*Math.PI,n=p.clamp(n,0,2*Math.PI);var i,a,o,s=[],c=[],l=[],u=1/t,h=new y,d=new f;for(a=0;a<=t;a++){var m=r+a*u*n,v=Math.sin(m),g=Math.cos(m);for(o=0;o<=e.length-1;o++)h.x=e[o].x*v,h.y=e[o].y,h.z=e[o].x*g,c.push(h.x,h.y,h.z),d.x=a/t,d.y=o/(e.length-1),l.push(d.x,d.y)}for(a=0;a<t;a++)for(o=0;o<e.length-1;o++){var x=i=o+a*e.length,b=i+e.length,w=i+e.length+1,_=i+1;s.push(x,b,_),s.push(b,w,_)}if(this.setIndex(s),this.addAttribute("position",new tt(c,3)),this.addAttribute("uv",new tt(l,2)),this.computeVertexNormals(),n===2*Math.PI){var M=this.attributes.normal.array,S=new y,T=new y,E=new y;for(i=t*e.length*3,a=0,o=0;a<e.length;a++,o+=3)S.x=M[o+0],S.y=M[o+1],S.z=M[o+2],T.x=M[i+o+0],T.y=M[i+o+1],T.z=M[i+o+2],E.addVectors(S,T).normalize(),M[o+0]=M[i+o+0]=E.x,M[o+1]=M[i+o+1]=E.y,M[o+2]=M[i+o+2]=E.z}}function lo(e,t){zt.call(this),this.type="ShapeGeometry","object"===c()(t)&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new uo(e,t)),this.mergeVertices()}function uo(e,t){dt.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var r=[],n=[],i=[],a=[],o=0,s=0;if(!1===Array.isArray(e))l(e);else for(var c=0;c<e.length;c++)l(e[c]),this.addGroup(o,s,c),o+=s,s=0;function l(e){var o,c,l,u=n.length/3,h=e.extractPoints(t),d=h.shape,p=h.holes;for(!1===Ya.isClockWise(d)&&(d=d.reverse()),o=0,c=p.length;o<c;o++)l=p[o],!0===Ya.isClockWise(l)&&(p[o]=l.reverse());var f=Ya.triangulateShape(d,p);for(o=0,c=p.length;o<c;o++)l=p[o],d=d.concat(l);for(o=0,c=d.length;o<c;o++){var m=d[o];n.push(m.x,m.y,0),i.push(0,0,1),a.push(m.x,m.y)}for(o=0,c=f.length;o<c;o++){var v=f[o],g=v[0]+u,y=v[1]+u,x=v[2]+u;r.push(g,y,x),s+=3}}this.setIndex(r),this.addAttribute("position",new tt(n,3)),this.addAttribute("normal",new tt(i,3)),this.addAttribute("uv",new tt(a,2))}function ho(e,t){if(t.shapes=[],Array.isArray(e))for(var r=0,n=e.length;r<n;r++){var i=e[r];t.shapes.push(i.uuid)}else t.shapes.push(e.uuid);return t}function po(e,t){dt.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var r,n,i,a,o=[],s=Math.cos(p.DEG2RAD*t),c=[0,0],l={},u=["a","b","c"];e.isBufferGeometry?(a=new zt).fromBufferGeometry(e):a=e.clone(),a.mergeVertices(),a.computeFaceNormals();for(var h=a.vertices,d=a.faces,f=0,m=d.length;f<m;f++)for(var v=d[f],g=0;g<3;g++)r=v[u[g]],n=v[u[(g+1)%3]],c[0]=Math.min(r,n),c[1]=Math.max(r,n),void 0===l[i=c[0]+","+c[1]]?l[i]={index1:c[0],index2:c[1],face1:f,face2:void 0}:l[i].face2=f;for(i in l){var y=l[i];if(void 0===y.face2||d[y.face1].normal.dot(d[y.face2].normal)<=s){var x=h[y.index1];o.push(x.x,x.y,x.z),x=h[y.index2],o.push(x.x,x.y,x.z)}}this.addAttribute("position",new tt(o,3))}function fo(e,t,r,n,i,a,o,s){zt.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new mo(e,t,r,n,i,a,o,s)),this.mergeVertices()}function mo(e,t,r,n,i,a,o,s){dt.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var c=this;e=void 0!==e?e:1,t=void 0!==t?t:1,r=r||1,n=Math.floor(n)||8,i=Math.floor(i)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var l=[],u=[],h=[],d=[],p=0,m=[],v=r/2,g=0;function x(r){var i,a,m,x=new f,b=new y,w=0,_=!0===r?e:t,M=!0===r?1:-1;for(a=p,i=1;i<=n;i++)u.push(0,v*M,0),h.push(0,M,0),d.push(.5,.5),p++;for(m=p,i=0;i<=n;i++){var S=i/n*s+o,T=Math.cos(S),E=Math.sin(S);b.x=_*E,b.y=v*M,b.z=_*T,u.push(b.x,b.y,b.z),h.push(0,M,0),x.x=.5*T+.5,x.y=.5*E*M+.5,d.push(x.x,x.y),p++}for(i=0;i<n;i++){var A=a+i,L=m+i;!0===r?l.push(L,L+1,A):l.push(L+1,L,A),w+=3}c.addGroup(g,w,!0===r?1:2),g+=w}!function(){var a,f,x=new y,b=new y,w=0,_=(t-e)/r;for(f=0;f<=i;f++){var M=[],S=f/i,T=S*(t-e)+e;for(a=0;a<=n;a++){var E=a/n,A=E*s+o,L=Math.sin(A),R=Math.cos(A);b.x=T*L,b.y=-S*r+v,b.z=T*R,u.push(b.x,b.y,b.z),x.set(L,_,R).normalize(),h.push(x.x,x.y,x.z),d.push(E,1-S),M.push(p++)}m.push(M)}for(a=0;a<n;a++)for(f=0;f<i;f++){var P=m[f][a],C=m[f+1][a],O=m[f+1][a+1],I=m[f][a+1];l.push(P,C,I),l.push(C,O,I),w+=6}c.addGroup(g,w,0),g+=w}(),!1===a&&(e>0&&x(!0),t>0&&x(!1)),this.setIndex(l),this.addAttribute("position",new tt(u,3)),this.addAttribute("normal",new tt(h,3)),this.addAttribute("uv",new tt(d,2))}function vo(e,t,r,n,i,a,o){fo.call(this,0,e,t,r,n,i,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}}function go(e,t,r,n,i,a,o){mo.call(this,0,e,t,r,n,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}}function yo(e,t,r,n){zt.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},this.fromBufferGeometry(new xo(e,t,r,n)),this.mergeVertices()}function xo(e,t,r,n){dt.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},e=e||1,t=void 0!==t?Math.max(3,t):8,r=void 0!==r?r:0,n=void 0!==n?n:2*Math.PI;var i,a,o=[],s=[],c=[],l=[],u=new y,h=new f;for(s.push(0,0,0),c.push(0,0,1),l.push(.5,.5),a=0,i=3;a<=t;a++,i+=3){var d=r+a/t*n;u.x=e*Math.cos(d),u.y=e*Math.sin(d),s.push(u.x,u.y,u.z),c.push(0,0,1),h.x=(s[i]/e+1)/2,h.y=(s[i+1]/e+1)/2,l.push(h.x,h.y)}for(i=1;i<=t;i++)o.push(i,i+1,0);this.setIndex(o),this.addAttribute("position",new tt(s,3)),this.addAttribute("normal",new tt(c,3)),this.addAttribute("uv",new tt(l,2))}to.prototype=Object.create(zt.prototype),to.prototype.constructor=to,ro.prototype=Object.create(Qa.prototype),ro.prototype.constructor=ro,no.prototype=Object.create(zt.prototype),no.prototype.constructor=no,io.prototype=Object.create(dt.prototype),io.prototype.constructor=io,ao.prototype=Object.create(zt.prototype),ao.prototype.constructor=ao,oo.prototype=Object.create(dt.prototype),oo.prototype.constructor=oo,so.prototype=Object.create(zt.prototype),so.prototype.constructor=so,co.prototype=Object.create(dt.prototype),co.prototype.constructor=co,lo.prototype=Object.create(zt.prototype),lo.prototype.constructor=lo,lo.prototype.toJSON=function(){var e=zt.prototype.toJSON.call(this);return ho(this.parameters.shapes,e)},uo.prototype=Object.create(dt.prototype),uo.prototype.constructor=uo,uo.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return ho(this.parameters.shapes,e)},po.prototype=Object.create(dt.prototype),po.prototype.constructor=po,fo.prototype=Object.create(zt.prototype),fo.prototype.constructor=fo,mo.prototype=Object.create(dt.prototype),mo.prototype.constructor=mo,vo.prototype=Object.create(fo.prototype),vo.prototype.constructor=vo,go.prototype=Object.create(mo.prototype),go.prototype.constructor=go,yo.prototype=Object.create(zt.prototype),yo.prototype.constructor=yo,xo.prototype=Object.create(dt.prototype),xo.prototype.constructor=xo;var bo=Object.freeze({WireframeGeometry:sa,ParametricGeometry:ca,ParametricBufferGeometry:la,TetrahedronGeometry:da,TetrahedronBufferGeometry:pa,OctahedronGeometry:fa,OctahedronBufferGeometry:ma,IcosahedronGeometry:va,IcosahedronBufferGeometry:ga,DodecahedronGeometry:ya,DodecahedronBufferGeometry:xa,PolyhedronGeometry:ua,PolyhedronBufferGeometry:ha,TubeGeometry:ba,TubeBufferGeometry:wa,TorusKnotGeometry:_a,TorusKnotBufferGeometry:Ma,TorusGeometry:Sa,TorusBufferGeometry:Ta,TextGeometry:to,TextBufferGeometry:ro,SphereGeometry:no,SphereBufferGeometry:io,RingGeometry:ao,RingBufferGeometry:oo,PlaneGeometry:sr,PlaneBufferGeometry:cr,LatheGeometry:so,LatheBufferGeometry:co,ShapeGeometry:lo,ShapeBufferGeometry:uo,ExtrudeGeometry:Ka,ExtrudeBufferGeometry:Qa,EdgesGeometry:po,ConeGeometry:vo,ConeBufferGeometry:go,CylinderGeometry:fo,CylinderBufferGeometry:mo,CircleGeometry:yo,CircleBufferGeometry:xo,BoxGeometry:Ut,BoxBufferGeometry:Ft});function wo(e){We.call(this),this.type="ShadowMaterial",this.color=new Fe(0),this.transparent=!0,this.setValues(e)}function _o(e){jt.call(this,e),this.type="RawShaderMaterial"}function Mo(e){We.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Fe(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function So(e){Mo.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearcoat=0,this.clearcoatRoughness=0,this.sheen=null,this.clearcoatNormalScale=new f(1,1),this.clearcoatNormalMap=null,this.transparency=0,this.setValues(e)}function To(e){We.call(this),this.type="MeshPhongMaterial",this.color=new Fe(16777215),this.specular=new Fe(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Eo(e){To.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(e)}function Ao(e){We.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Lo(e){We.call(this),this.type="MeshLambertMaterial",this.color=new Fe(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Fe(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Ro(e){We.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Fe(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Po(e){Fi.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}wo.prototype=Object.create(We.prototype),wo.prototype.constructor=wo,wo.prototype.isShadowMaterial=!0,wo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this},_o.prototype=Object.create(jt.prototype),_o.prototype.constructor=_o,_o.prototype.isRawShaderMaterial=!0,Mo.prototype=Object.create(We.prototype),Mo.prototype.constructor=Mo,Mo.prototype.isMeshStandardMaterial=!0,Mo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},So.prototype=Object.create(Mo.prototype),So.prototype.constructor=So,So.prototype.isMeshPhysicalMaterial=!0,So.prototype.copy=function(e){return Mo.prototype.copy.call(this,e),this.defines={STANDARD:"",PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearcoat=e.clearcoat,this.clearcoatRoughness=e.clearcoatRoughness,e.sheen?this.sheen=(this.sheen||new Fe).copy(e.sheen):this.sheen=null,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.transparency=e.transparency,this},To.prototype=Object.create(We.prototype),To.prototype.constructor=To,To.prototype.isMeshPhongMaterial=!0,To.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Eo.prototype=Object.create(To.prototype),Eo.prototype.constructor=Eo,Eo.prototype.isMeshToonMaterial=!0,Eo.prototype.copy=function(e){return To.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},Ao.prototype=Object.create(We.prototype),Ao.prototype.constructor=Ao,Ao.prototype.isMeshNormalMaterial=!0,Ao.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Lo.prototype=Object.create(We.prototype),Lo.prototype.constructor=Lo,Lo.prototype.isMeshLambertMaterial=!0,Lo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Ro.prototype=Object.create(We.prototype),Ro.prototype.constructor=Ro,Ro.prototype.isMeshMatcapMaterial=!0,Ro.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Po.prototype=Object.create(Fi.prototype),Po.prototype.constructor=Po,Po.prototype.isLineDashedMaterial=!0,Po.prototype.copy=function(e){return Fi.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var Co=Object.freeze({ShadowMaterial:wo,SpriteMaterial:mi,RawShaderMaterial:_o,ShaderMaterial:jt,PointsMaterial:Ji,MeshPhysicalMaterial:So,MeshStandardMaterial:Mo,MeshPhongMaterial:To,MeshToonMaterial:Eo,MeshNormalMaterial:Ao,MeshLambertMaterial:Lo,MeshDepthMaterial:Yn,MeshDistanceMaterial:Zn,MeshBasicMaterial:qe,MeshMatcapMaterial:Ro,LineDashedMaterial:Po,LineBasicMaterial:Fi,Material:We}),Oo={arraySlice:function(e,t,r){return Oo.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==r?r:e.length)):e.slice(t,r)},convertArray:function(e,t,r){return!e||!r&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,r=new Array(t),n=0;n!==t;++n)r[n]=n;return r.sort((function(t,r){return e[t]-e[r]})),r},sortedArray:function(e,t,r){for(var n=e.length,i=new e.constructor(n),a=0,o=0;o!==n;++a)for(var s=r[a]*t,c=0;c!==t;++c)i[o++]=e[s+c];return i},flattenJSON:function(e,t,r,n){for(var i=1,a=e[0];void 0!==a&&void 0===a[n];)a=e[i++];if(void 0!==a){var o=a[n];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[n])&&(t.push(a.time),r.push.apply(r,o)),a=e[i++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[n])&&(t.push(a.time),o.toArray(r,r.length)),a=e[i++]}while(void 0!==a);else do{void 0!==(o=a[n])&&(t.push(a.time),r.push(o)),a=e[i++]}while(void 0!==a)}}};function Io(e,t,r,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(r),this.sampleValues=t,this.valueSize=r}function Do(e,t,r,n){Io.call(this,e,t,r,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function No(e,t,r,n){Io.call(this,e,t,r,n)}function Bo(e,t,r,n){Io.call(this,e,t,r,n)}function zo(e,t,r,n){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Oo.convertArray(t,this.TimeBufferType),this.values=Oo.convertArray(r,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}function Uo(e,t,r){zo.call(this,e,t,r)}function Fo(e,t,r,n){zo.call(this,e,t,r,n)}function Go(e,t,r,n){zo.call(this,e,t,r,n)}function ko(e,t,r,n){Io.call(this,e,t,r,n)}function Ho(e,t,r,n){zo.call(this,e,t,r,n)}function jo(e,t,r,n){zo.call(this,e,t,r,n)}function Vo(e,t,r,n){zo.call(this,e,t,r,n)}function Wo(e,t,r){this.name=e,this.tracks=r,this.duration=void 0!==t?t:-1,this.uuid=p.generateUUID(),this.duration<0&&this.resetDuration()}function qo(e){if(void 0===e.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Go;case"vector":case"vector2":case"vector3":case"vector4":return Vo;case"color":return Fo;case"quaternion":return Ho;case"bool":case"boolean":return Uo;case"string":return jo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}(e.type);if(void 0===e.times){var r=[],n=[];Oo.flattenJSON(e.keys,r,n,"value"),e.times=r,e.values=n}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(Io.prototype,{evaluate:function(e){var t=this.parameterPositions,r=this._cachedIndex,n=t[r],i=t[r-1];e:{t:{var a;r:{n:if(!(e<n)){for(var o=r+2;;){if(void 0===n){if(e<i)break n;return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,e,i)}if(r===o)break;if(i=n,e<(n=t[++r]))break t}a=t.length;break r}if(e>=i)break e;var s=t[1];e<s&&(r=2,i=s);for(o=r-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(r===o)break;if(n=i,e>=(i=t[--r-1]))break t}a=r,r=0}for(;r<a;){var c=r+a>>>1;e<t[c]?a=c:r=c+1}if(n=t[r],void 0===(i=t[r-1]))return this._cachedIndex=0,this.beforeStart_(0,e,n);if(void 0===n)return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,i,e)}this._cachedIndex=r,this.intervalChanged_(r,i,n)}return this.interpolate_(r,i,e,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n,a=0;a!==n;++a)t[a]=r[i+a];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Io.prototype,{beforeStart_:Io.prototype.copySampleValue_,afterEnd_:Io.prototype.copySampleValue_}),Do.prototype=Object.assign(Object.create(Io.prototype),{constructor:Do,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(e,t,r){var n=this.parameterPositions,i=e-2,a=e+1,o=n[i],s=n[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:i=e,o=2*t-r;break;case 2402:o=t+n[i=n.length-2]-n[i+1];break;default:i=e,o=r}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=e,s=2*r-t;break;case 2402:a=1,s=r+n[1]-n[0];break;default:a=e-1,s=t}var c=.5*(r-t),l=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(s-r),this._offsetPrev=i*l,this._offsetNext=a*l},interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(r-t)/(n-t),f=p*p,m=f*p,v=-h*m+2*h*f-h*p,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,b=0;b!==o;++b)i[b]=v*a[l+b]+g*a[c+b]+y*a[s+b]+x*a[u+b];return i}}),No.prototype=Object.assign(Object.create(Io.prototype),{constructor:No,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(r-t)/(n-t),u=1-l,h=0;h!==o;++h)i[h]=a[c+h]*u+a[s+h]*l;return i}}),Bo.prototype=Object.assign(Object.create(Io.prototype),{constructor:Bo,interpolate_:function(e){return this.copySampleValue_(e-1)}}),Object.assign(zo,{toJSON:function(e){var t,r=e.constructor;if(void 0!==r.toJSON)t=r.toJSON(e);else{t={name:e.name,times:Oo.convertArray(e.times,Array),values:Oo.convertArray(e.values,Array)};var n=e.getInterpolation();n!==e.DefaultInterpolation&&(t.interpolation=n)}return t.type=e.ValueTypeName,t}}),Object.assign(zo.prototype,{constructor:zo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new Bo(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new No(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new Do(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var r="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(r);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",r),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]*=e;return this},trim:function(e,t){for(var r=this.times,n=r.length,i=0,a=n-1;i!==n&&r[i]<e;)++i;for(;-1!==a&&r[a]>t;)--a;if(++a,0!==i||a!==n){i>=a&&(i=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Oo.arraySlice(r,i,a),this.values=Oo.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);var r=this.times,n=this.values,i=r.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);for(var a=null,o=0;o!==i;o++){var s=r[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),e=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),e=!1;break}a=s}if(void 0!==n&&Oo.isTypedArray(n)){o=0;for(var c=n.length;o!==c;++o){var l=n[o];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,l),e=!1;break}}}return e},optimize:function(){for(var e=this.times,t=this.values,r=this.getValueSize(),n=2302===this.getInterpolation(),i=1,a=e.length-1,o=1;o<a;++o){var s=!1,c=e[o];if(c!==e[o+1]&&(1!==o||c!==c[0]))if(n)s=!0;else for(var l=o*r,u=l-r,h=l+r,d=0;d!==r;++d){var p=t[l+d];if(p!==t[u+d]||p!==t[h+d]){s=!0;break}}if(s){if(o!==i){e[i]=e[o];var f=o*r,m=i*r;for(d=0;d!==r;++d)t[m+d]=t[f+d]}++i}}if(a>0){e[i]=e[a];for(f=a*r,m=i*r,d=0;d!==r;++d)t[m+d]=t[f+d];++i}return i!==e.length&&(this.times=Oo.arraySlice(e,0,i),this.values=Oo.arraySlice(t,0,i*r)),this},clone:function(){var e=Oo.arraySlice(this.times,0),t=Oo.arraySlice(this.values,0),r=new(0,this.constructor)(this.name,e,t);return r.createInterpolant=this.createInterpolant,r}}),Uo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Uo,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Fo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Fo,ValueTypeName:"color"}),Go.prototype=Object.assign(Object.create(zo.prototype),{constructor:Go,ValueTypeName:"number"}),ko.prototype=Object.assign(Object.create(Io.prototype),{constructor:ko,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(r-t)/(n-t),l=s+o;s!==l;s+=4)m.slerpFlat(i,0,a,s-o,a,s,c);return i}}),Ho.prototype=Object.assign(Object.create(zo.prototype),{constructor:Ho,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new ko(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),jo.prototype=Object.assign(Object.create(zo.prototype),{constructor:jo,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Vo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Vo,ValueTypeName:"vector"}),Object.assign(Wo,{parse:function(e){for(var t=[],r=e.tracks,n=1/(e.fps||1),i=0,a=r.length;i!==a;++i)t.push(qo(r[i]).scale(n));return new Wo(e.name,e.duration,t)},toJSON:function(e){for(var t=[],r=e.tracks,n={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid},i=0,a=r.length;i!==a;++i)t.push(zo.toJSON(r[i]));return n},CreateFromMorphTargetSequence:function(e,t,r,n){for(var i=t.length,a=[],o=0;o<i;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var l=Oo.getKeyframeOrder(s);s=Oo.sortedArray(s,1,l),c=Oo.sortedArray(c,1,l),n||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new Go(".morphTargetInfluences["+t[o].name+"]",s,c).scale(1/r))}return new Wo(e,-1,a)},findByName:function(e,t){var r=e;if(!Array.isArray(e)){var n=e;r=n.geometry&&n.geometry.animations||n.animations}for(var i=0;i<r.length;i++)if(r[i].name===t)return r[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,r){for(var n={},i=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;a<o;a++){var s=e[a],c=s.name.match(i);if(c&&c.length>1){var l=n[h=c[1]];l||(n[h]=l=[]),l.push(s)}}var u=[];for(var h in n)u.push(Wo.CreateFromMorphTargetSequence(h,n[h],t,r));return u},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var r=function(e,t,r,n,i){if(0!==r.length){var a=[],o=[];Oo.flattenJSON(r,a,o,n),0!==a.length&&i.push(new e(t,a,o))}},n=[],i=e.name||"default",a=e.length||-1,o=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var l=s[c].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var u={},h=0;h<l.length;h++)if(l[h].morphTargets)for(var d=0;d<l[h].morphTargets.length;d++)u[l[h].morphTargets[d]]=-1;for(var p in u){var f=[],m=[];for(d=0;d!==l[h].morphTargets.length;++d){var v=l[h];f.push(v.time),m.push(v.morphTarget===p?1:0)}n.push(new Go(".morphTargetInfluence["+p+"]",f,m))}a=u.length*(o||1)}else{var g=".bones["+t[c].name+"]";r(Vo,g+".position",l,"pos",n),r(Ho,g+".quaternion",l,"rot",n),r(Vo,g+".scale",l,"scl",n)}}return 0===n.length?null:new Wo(i,a,n)}}),Object.assign(Wo.prototype,{resetDuration:function(){for(var e=0,t=0,r=this.tracks.length;t!==r;++t){var n=this.tracks[t];e=Math.max(e,n.times[n.times.length-1])}return this.duration=e,this},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){for(var e=!0,t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){for(var e=[],t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new Wo(this.name,this.duration,e)}});var Xo={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function Yo(e,t,r){var n=this,i=!1,a=0,o=0,s=void 0,c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=r,this.itemStart=function(e){o++,!1===i&&void 0!==n.onStart&&n.onStart(e,a,o),i=!0},this.itemEnd=function(e){a++,void 0!==n.onProgress&&n.onProgress(e,a,o),a===o&&(i=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(e){void 0!==n.onError&&n.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){return s=e,this},this.addHandler=function(e,t){return c.push(e,t),this},this.removeHandler=function(e){var t=c.indexOf(e);return-1!==t&&c.splice(t,2),this},this.getHandler=function(e){for(var t=0,r=c.length;t<r;t+=2){var n=c[t],i=c[t+1];if(n.test(e))return i}return null}}var Zo=new Yo;function Jo(e){this.manager=void 0!==e?e:Zo,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(Jo.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this}});var Ko={};function Qo(e){Jo.call(this,e)}function $o(e){Jo.call(this,e)}function es(e){Jo.call(this,e)}function ts(e){Jo.call(this,e)}function rs(e){Jo.call(this,e)}function ns(e){Jo.call(this,e)}function is(e){Jo.call(this,e)}function as(){this.type="Curve",this.arcLengthDivisions=200}function os(e,t,r,n,i,a,o,s){as.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=r||1,this.yRadius=n||1,this.aStartAngle=i||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function ss(e,t,r,n,i,a){os.call(this,e,t,r,r,n,i,a),this.type="ArcCurve"}function cs(){var e=0,t=0,r=0,n=0;function i(i,a,o,s){e=i,t=o,r=-3*i+3*a-2*o-s,n=2*i-2*a+o+s}return{initCatmullRom:function(e,t,r,n,a){i(t,r,a*(r-e),a*(n-t))},initNonuniformCatmullRom:function(e,t,r,n,a,o,s){var c=(t-e)/a-(r-e)/(a+o)+(r-t)/o,l=(r-t)/o-(n-t)/(o+s)+(n-r)/s;i(t,r,c*=o,l*=o)},calc:function(i){var a=i*i;return e+t*i+r*a+n*(a*i)}}}Qo.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Qo,load:function(e,t,r,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;if(void 0===Ko[e]){var o=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],c=!!o[2],l=o[3];l=decodeURIComponent(l),c&&(l=atob(l));try{var u,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var d=new Uint8Array(l.length),p=0;p<l.length;p++)d[p]=l.charCodeAt(p);u="blob"===h?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;u=f.parseFromString(l,s);break;case"json":u=JSON.parse(l);break;default:u=l}setTimeout((function(){t&&t(u),i.manager.itemEnd(e)}),0)}catch(t){setTimeout((function(){n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)}),0)}}else{Ko[e]=[],Ko[e].push({onLoad:t,onProgress:r,onError:n});var m=new XMLHttpRequest;for(var v in m.open("GET",e,!0),m&&m.addEventListener&&m.addEventListener("load",(function(t){var r=this.response;Xo.add(e,r);var n=Ko[e];if(delete Ko[e],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var a=0,o=n.length;a<o;a++){(s=n[a]).onLoad&&s.onLoad(r)}i.manager.itemEnd(e)}else{for(a=0,o=n.length;a<o;a++){var s;(s=n[a]).onError&&s.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}}),!1),m.addEventListener("progress",(function(t){for(var r=Ko[e],n=0,i=r.length;n<i;n++){var a=r[n];a.onProgress&&a.onProgress(t)}}),!1),m.addEventListener("error",(function(t){var r=Ko[e];delete Ko[e];for(var n=0,a=r.length;n<a;n++){var o=r[n];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}),!1),m.addEventListener("abort",(function(t){var r=Ko[e];delete Ko[e];for(var n=0,a=r.length;n<a;n++){var o=r[n];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}),!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(e),m}Ko[e].push({onLoad:t,onProgress:r,onError:n})},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),$o.prototype=Object.assign(Object.create(Jo.prototype),{constructor:$o,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){for(var t=[],r=0;r<e.length;r++){var n=Wo.parse(e[r]);t.push(n)}return t}}),es.prototype=Object.assign(Object.create(Jo.prototype),{constructor:es,load:function(e,t,r,n){var i=this,a=[],o=new ia;o.image=a;var s=new Qo(this.manager);function c(c){s.load(e[c],(function(e){var r=i.parse(e,!0);a[c]={width:r.width,height:r.height,format:r.format,mipmaps:r.mipmaps},6===(l+=1)&&(1===r.mipmapCount&&(o.minFilter=1006),o.format=r.format,o.needsUpdate=!0,t&&t(o))}),r,n)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(e))for(var l=0,u=0,h=e.length;u<h;++u)c(u);else s.load(e,(function(e){var r=i.parse(e,!0);if(r.isCubemap)for(var n=r.mipmaps.length/r.mipmapCount,s=0;s<n;s++){a[s]={mipmaps:[]};for(var c=0;c<r.mipmapCount;c++)a[s].mipmaps.push(r.mipmaps[s*r.mipmapCount+c]),a[s].format=r.format,a[s].width=r.width,a[s].height=r.height}else o.image.width=r.width,o.image.height=r.height,o.mipmaps=r.mipmaps;1===r.mipmapCount&&(o.minFilter=1006),o.format=r.format,o.needsUpdate=!0,t&&t(o)}),r,n);return o}}),ts.prototype=Object.assign(Object.create(Jo.prototype),{constructor:ts,load:function(e,t,r,n){var i=this,a=new Yt,o=new Qo(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(e,(function(e){var r=i.parse(e);r&&(void 0!==r.image?a.image=r.image:void 0!==r.data&&(a.image.width=r.width,a.image.height=r.height,a.image.data=r.data),a.wrapS=void 0!==r.wrapS?r.wrapS:1001,a.wrapT=void 0!==r.wrapT?r.wrapT:1001,a.magFilter=void 0!==r.magFilter?r.magFilter:1006,a.minFilter=void 0!==r.minFilter?r.minFilter:1008,a.anisotropy=void 0!==r.anisotropy?r.anisotropy:1,void 0!==r.format&&(a.format=r.format),void 0!==r.type&&(a.type=r.type),void 0!==r.mipmaps&&(a.mipmaps=r.mipmaps),1===r.mipmapCount&&(a.minFilter=1006),a.needsUpdate=!0,t&&t(a,r))}),r,n),a}}),rs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:rs,load:function(e,t,r,n){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),Xo.add(e,this),t&&t(this),i.manager.itemEnd(e)}function c(t){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)}return o.addEventListener("load",s,!1),o.addEventListener("error",c,!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(e),o.src=e,o}}),ns.prototype=Object.assign(Object.create(Jo.prototype),{constructor:ns,load:function(e,t,r,n){var i=new br,a=new rs(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(r){a.load(e[r],(function(e){i.images[r]=e,6===++o&&(i.needsUpdate=!0,t&&t(i))}),void 0,n)}for(var c=0;c<e.length;++c)s(c);return i}}),is.prototype=Object.assign(Object.create(Jo.prototype),{constructor:is,load:function(e,t,r,n){var i=new S,a=new rs(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,(function(r){i.image=r;var n=e.search(/\.jpe?g($|\?)/i)>0||0===e.search(/^data\:image\/jpeg/);i.format=n?1022:1023,i.needsUpdate=!0,void 0!==t&&t(i)}),r,n),i}}),Object.assign(as.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var r=this.getUtoTmapping(e);return this.getPoint(r,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPointAt(r/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,r,n=[],i=this.getPoint(0),a=0;for(n.push(0),r=1;r<=e;r++)a+=(t=this.getPoint(r/e)).distanceTo(i),n.push(a),i=t;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var r,n=this.getLengths(),i=0,a=n.length;r=t||e*n[a-1];for(var o,s=0,c=a-1;s<=c;)if((o=n[i=Math.floor(s+(c-s)/2)]-r)<0)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(n[i=c]===r)return i/(a-1);var l=n[i];return(i+(r-l)/(n[i+1]-l))/(a-1)},getTangent:function(e){var t=e-1e-4,r=e+1e-4;t<0&&(t=0),r>1&&(r=1);var n=this.getPoint(t);return this.getPoint(r).clone().sub(n).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var r,n,i,a=new y,o=[],s=[],c=[],l=new y,u=new N;for(r=0;r<=e;r++)n=r/e,o[r]=this.getTangentAt(n),o[r].normalize();s[0]=new y,c[0]=new y;var h=Number.MAX_VALUE,d=Math.abs(o[0].x),f=Math.abs(o[0].y),m=Math.abs(o[0].z);for(d<=h&&(h=d,a.set(1,0,0)),f<=h&&(h=f,a.set(0,1,0)),m<=h&&a.set(0,0,1),l.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],l),c[0].crossVectors(o[0],s[0]),r=1;r<=e;r++)s[r]=s[r-1].clone(),c[r]=c[r-1].clone(),l.crossVectors(o[r-1],o[r]),l.length()>Number.EPSILON&&(l.normalize(),i=Math.acos(p.clamp(o[r-1].dot(o[r]),-1,1)),s[r].applyMatrix4(u.makeRotationAxis(l,i))),c[r].crossVectors(o[r],s[r]);if(!0===t)for(i=Math.acos(p.clamp(s[0].dot(s[e]),-1,1)),i/=e,o[0].dot(l.crossVectors(s[0],s[e]))>0&&(i=-i),r=1;r<=e;r++)s[r].applyMatrix4(u.makeRotationAxis(o[r],i*r)),c[r].crossVectors(o[r],s[r]);return{tangents:o,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),os.prototype=Object.create(as.prototype),os.prototype.constructor=os,os.prototype.isEllipseCurve=!0,os.prototype.getPoint=function(e,t){for(var r=t||new f,n=2*Math.PI,i=this.aEndAngle-this.aStartAngle,a=Math.abs(i)<Number.EPSILON;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=a?0:n),!0!==this.aClockwise||a||(i===n?i=-n:i-=n);var o=this.aStartAngle+e*i,s=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var l=Math.cos(this.aRotation),u=Math.sin(this.aRotation),h=s-this.aX,d=c-this.aY;s=h*l-d*u+this.aX,c=h*u+d*l+this.aY}return r.set(s,c)},os.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},os.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},os.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},ss.prototype=Object.create(os.prototype),ss.prototype.constructor=ss,ss.prototype.isArcCurve=!0;var ls=new y,us=new cs,hs=new cs,ds=new cs;function ps(e,t,r,n){as.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=r||"centripetal",this.tension=n||.5}function fs(e,t,r,n,i){var a=.5*(n-t),o=.5*(i-r),s=e*e;return(2*r-2*n+a+o)*(e*s)+(-3*r+3*n-2*a-o)*s+a*e+r}function ms(e,t,r,n){return function(e,t){var r=1-e;return r*r*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,r)+function(e,t){return e*e*t}(e,n)}function vs(e,t,r,n,i){return function(e,t){var r=1-e;return r*r*r*t}(e,t)+function(e,t){var r=1-e;return 3*r*r*e*t}(e,r)+function(e,t){return 3*(1-e)*e*e*t}(e,n)+function(e,t){return e*e*e*t}(e,i)}function gs(e,t,r,n){as.call(this),this.type="CubicBezierCurve",this.v0=e||new f,this.v1=t||new f,this.v2=r||new f,this.v3=n||new f}function ys(e,t,r,n){as.call(this),this.type="CubicBezierCurve3",this.v0=e||new y,this.v1=t||new y,this.v2=r||new y,this.v3=n||new y}function xs(e,t){as.call(this),this.type="LineCurve",this.v1=e||new f,this.v2=t||new f}function bs(e,t){as.call(this),this.type="LineCurve3",this.v1=e||new y,this.v2=t||new y}function ws(e,t,r){as.call(this),this.type="QuadraticBezierCurve",this.v0=e||new f,this.v1=t||new f,this.v2=r||new f}function _s(e,t,r){as.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new y,this.v1=t||new y,this.v2=r||new y}function Ms(e){as.call(this),this.type="SplineCurve",this.points=e||[]}ps.prototype=Object.create(as.prototype),ps.prototype.constructor=ps,ps.prototype.isCatmullRomCurve3=!0,ps.prototype.getPoint=function(e,t){var r,n,i,a,o=t||new y,s=this.points,c=s.length,l=(c-(this.closed?0:1))*e,u=Math.floor(l),h=l-u;if(this.closed?u+=u>0?0:(Math.floor(Math.abs(u)/c)+1)*c:0===h&&u===c-1&&(u=c-2,h=1),this.closed||u>0?r=s[(u-1)%c]:(ls.subVectors(s[0],s[1]).add(s[0]),r=ls),n=s[u%c],i=s[(u+1)%c],this.closed||u+2<c?a=s[(u+2)%c]:(ls.subVectors(s[c-1],s[c-2]).add(s[c-1]),a=ls),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(r.distanceToSquared(n),d),f=Math.pow(n.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(a),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),us.initNonuniformCatmullRom(r.x,n.x,i.x,a.x,p,f,m),hs.initNonuniformCatmullRom(r.y,n.y,i.y,a.y,p,f,m),ds.initNonuniformCatmullRom(r.z,n.z,i.z,a.z,p,f,m)}else"catmullrom"===this.curveType&&(us.initCatmullRom(r.x,n.x,i.x,a.x,this.tension),hs.initCatmullRom(r.y,n.y,i.y,a.y,this.tension),ds.initCatmullRom(r.z,n.z,i.z,a.z,this.tension));return o.set(us.calc(h),hs.calc(h),ds.calc(h)),o},ps.prototype.copy=function(e){as.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push(n.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},ps.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var n=this.points[t];e.points.push(n.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},ps.prototype.fromJSON=function(e){as.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push((new y).fromArray(n))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},gs.prototype=Object.create(as.prototype),gs.prototype.constructor=gs,gs.prototype.isCubicBezierCurve=!0,gs.prototype.getPoint=function(e,t){var r=t||new f,n=this.v0,i=this.v1,a=this.v2,o=this.v3;return r.set(vs(e,n.x,i.x,a.x,o.x),vs(e,n.y,i.y,a.y,o.y)),r},gs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},gs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},gs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},ys.prototype=Object.create(as.prototype),ys.prototype.constructor=ys,ys.prototype.isCubicBezierCurve3=!0,ys.prototype.getPoint=function(e,t){var r=t||new y,n=this.v0,i=this.v1,a=this.v2,o=this.v3;return r.set(vs(e,n.x,i.x,a.x,o.x),vs(e,n.y,i.y,a.y,o.y),vs(e,n.z,i.z,a.z,o.z)),r},ys.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},ys.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},ys.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},xs.prototype=Object.create(as.prototype),xs.prototype.constructor=xs,xs.prototype.isLineCurve=!0,xs.prototype.getPoint=function(e,t){var r=t||new f;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},xs.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},xs.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},xs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},xs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},xs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},bs.prototype=Object.create(as.prototype),bs.prototype.constructor=bs,bs.prototype.isLineCurve3=!0,bs.prototype.getPoint=function(e,t){var r=t||new y;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},bs.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},bs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},bs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},bs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},ws.prototype=Object.create(as.prototype),ws.prototype.constructor=ws,ws.prototype.isQuadraticBezierCurve=!0,ws.prototype.getPoint=function(e,t){var r=t||new f,n=this.v0,i=this.v1,a=this.v2;return r.set(ms(e,n.x,i.x,a.x),ms(e,n.y,i.y,a.y)),r},ws.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},ws.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},ws.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},_s.prototype=Object.create(as.prototype),_s.prototype.constructor=_s,_s.prototype.isQuadraticBezierCurve3=!0,_s.prototype.getPoint=function(e,t){var r=t||new y,n=this.v0,i=this.v1,a=this.v2;return r.set(ms(e,n.x,i.x,a.x),ms(e,n.y,i.y,a.y),ms(e,n.z,i.z,a.z)),r},_s.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},_s.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},_s.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Ms.prototype=Object.create(as.prototype),Ms.prototype.constructor=Ms,Ms.prototype.isSplineCurve=!0,Ms.prototype.getPoint=function(e,t){var r=t||new f,n=this.points,i=(n.length-1)*e,a=Math.floor(i),o=i-a,s=n[0===a?a:a-1],c=n[a],l=n[a>n.length-2?n.length-1:a+1],u=n[a>n.length-3?n.length-1:a+2];return r.set(fs(o,s.x,c.x,l.x,u.x),fs(o,s.y,c.y,l.y,u.y)),r},Ms.prototype.copy=function(e){as.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push(n.clone())}return this},Ms.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var n=this.points[t];e.points.push(n.toArray())}return e},Ms.prototype.fromJSON=function(e){as.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push((new f).fromArray(n))}return this};var Ss=Object.freeze({ArcCurve:ss,CatmullRomCurve3:ps,CubicBezierCurve:gs,CubicBezierCurve3:ys,EllipseCurve:os,LineCurve:xs,LineCurve3:bs,QuadraticBezierCurve:ws,QuadraticBezierCurve3:_s,SplineCurve:Ms});function Ts(){as.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Es(e){Ts.call(this),this.type="Path",this.currentPoint=new f,e&&this.setFromPoints(e)}function As(e){Es.call(this,e),this.uuid=p.generateUUID(),this.type="Shape",this.holes=[]}function Ls(e,t){$.call(this),this.type="Light",this.color=new Fe(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Rs(e,t,r){Ls.call(this,e,r),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy($.DefaultUp),this.updateMatrix(),this.groundColor=new Fe(t)}function Ps(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new f(512,512),this.map=null,this.mapPass=null,this.matrix=new N,this._frustum=new tr,this._frameExtents=new f(1,1),this._viewportCount=1,this._viewports=[new T(0,0,1,1)]}function Cs(){Ps.call(this,new Wt(50,1,.5,500))}function Os(e,t,r,n,i,a){Ls.call(this,e,t),this.type="SpotLight",this.position.copy($.DefaultUp),this.updateMatrix(),this.target=new $,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==r?r:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new Cs}function Is(){Ps.call(this,new Wt(90,1,.5,500)),this._frameExtents=new f(4,2),this._viewportCount=6,this._viewports=[new T(2,1,1,1),new T(0,1,1,1),new T(3,1,1,1),new T(1,1,1,1),new T(3,0,1,1),new T(1,0,1,1)],this._cubeDirections=[new y(1,0,0),new y(-1,0,0),new y(0,0,1),new y(0,0,-1),new y(0,1,0),new y(0,-1,0)],this._cubeUps=[new y(0,1,0),new y(0,1,0),new y(0,1,0),new y(0,1,0),new y(0,0,1),new y(0,0,-1)]}function Ds(e,t,r,n){Ls.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==r?r:0,this.decay=void 0!==n?n:1,this.shadow=new Is}function Ns(e,t,r,n,i,a){Vt.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==e?e:-1,this.right=void 0!==t?t:1,this.top=void 0!==r?r:1,this.bottom=void 0!==n?n:-1,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Bs(){Ps.call(this,new Ns(-5,5,5,-5,.5,500))}function zs(e,t){Ls.call(this,e,t),this.type="DirectionalLight",this.position.copy($.DefaultUp),this.updateMatrix(),this.target=new $,this.shadow=new Bs}function Us(e,t){Ls.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function Fs(e,t,r,n){Ls.call(this,e,t),this.type="RectAreaLight",this.width=void 0!==r?r:10,this.height=void 0!==n?n:10}function Gs(e){Jo.call(this,e),this.textures={}}Ts.prototype=Object.assign(Object.create(as.prototype),{constructor:Ts,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new xs(t,e))},getPoint:function(e){for(var t=e*this.getLength(),r=this.getCurveLengths(),n=0;n<r.length;){if(r[n]>=t){var i=r[n]-t,a=this.curves[n],o=a.getLength(),s=0===o?0:1-i/o;return a.getPointAt(s)}n++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,r=0,n=this.curves.length;r<n;r++)t+=this.curves[r].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,r=[],n=0,i=this.curves;n<i.length;n++)for(var a=i[n],o=a&&a.isEllipseCurve?2*e:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e,s=a.getPoints(o),c=0;c<s.length;c++){var l=s[c];t&&t.equals(l)||(r.push(l),t=l)}return this.autoClose&&r.length>1&&!r[r.length-1].equals(r[0])&&r.push(r[0]),r},copy:function(e){as.prototype.copy.call(this,e),this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var n=e.curves[t];this.curves.push(n.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=as.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,r=this.curves.length;t<r;t++){var n=this.curves[t];e.curves.push(n.toJSON())}return e},fromJSON:function(e){as.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var n=e.curves[t];this.curves.push((new Ss[n.type]).fromJSON(n))}return this}}),Es.prototype=Object.assign(Object.create(Ts.prototype),{constructor:Es,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,r=e.length;t<r;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var r=new xs(this.currentPoint.clone(),new f(e,t));this.curves.push(r),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,r,n){var i=new ws(this.currentPoint.clone(),new f(e,t),new f(r,n));this.curves.push(i),this.currentPoint.set(r,n)},bezierCurveTo:function(e,t,r,n,i,a){var o=new gs(this.currentPoint.clone(),new f(e,t),new f(r,n),new f(i,a));this.curves.push(o),this.currentPoint.set(i,a)},splineThru:function(e){var t=new Ms([this.currentPoint.clone()].concat(e));this.curves.push(t),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,r,n,i,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+o,t+s,r,n,i,a)},absarc:function(e,t,r,n,i,a){this.absellipse(e,t,r,r,n,i,a)},ellipse:function(e,t,r,n,i,a,o,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,r,n,i,a,o,s)},absellipse:function(e,t,r,n,i,a,o,s){var c=new os(e,t,r,n,i,a,o,s);if(this.curves.length>0){var l=c.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(c);var u=c.getPoint(1);this.currentPoint.copy(u)},copy:function(e){return Ts.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=Ts.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return Ts.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),As.prototype=Object.assign(Object.create(Es.prototype),{constructor:As,getPointsHoles:function(e){for(var t=[],r=0,n=this.holes.length;r<n;r++)t[r]=this.holes[r].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Es.prototype.copy.call(this,e),this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var n=e.holes[t];this.holes.push(n.clone())}return this},toJSON:function(){var e=Es.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,r=this.holes.length;t<r;t++){var n=this.holes[t];e.holes.push(n.toJSON())}return e},fromJSON:function(e){Es.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var n=e.holes[t];this.holes.push((new Es).fromJSON(n))}return this}}),Ls.prototype=Object.assign(Object.create($.prototype),{constructor:Ls,isLight:!0,copy:function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Rs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Rs,isHemisphereLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Ps.prototype,{_projScreenMatrix:new N,_lightPositionWorld:new y,_lookTarget:new y,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){var t=this.camera,r=this.matrix,n=this._projScreenMatrix,i=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(e.matrixWorld),t.position.copy(a),i.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(i),t.updateMatrixWorld(),n.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromMatrix(n),r.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),r.multiply(t.projectionMatrix),r.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Cs.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Cs,isSpotLightShadow:!0,updateMatrices:function(e,t,r){var n=this.camera,i=2*p.RAD2DEG*e.angle,a=this.mapSize.width/this.mapSize.height,o=e.distance||n.far;i===n.fov&&a===n.aspect&&o===n.far||(n.fov=i,n.aspect=a,n.far=o,n.updateProjectionMatrix()),Ps.prototype.updateMatrices.call(this,e,t,r)}}),Os.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Os,isSpotLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Is.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Is,isPointLightShadow:!0,updateMatrices:function(e,t,r){var n=this.camera,i=this.matrix,a=this._lightPositionWorld,o=this._lookTarget,s=this._projScreenMatrix;a.setFromMatrixPosition(e.matrixWorld),n.position.copy(a),o.copy(n.position),o.add(this._cubeDirections[r]),n.up.copy(this._cubeUps[r]),n.lookAt(o),n.updateMatrixWorld(),i.makeTranslation(-a.x,-a.y,-a.z),s.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromMatrix(s)}}),Ds.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Ds,isPointLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),Ns.prototype=Object.assign(Object.create(Vt.prototype),{constructor:Ns,isOrthographicCamera:!0,copy:function(e,t){return Vt.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,r,n,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,n=(this.top+this.bottom)/2,i=r-e,a=r+e,o=n+t,s=n-t;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),u=(this.right-this.left)/this.view.width,h=(this.top-this.bottom)/this.view.height;a=(i+=u*(this.view.offsetX/c))+u*(this.view.width/c),s=(o-=h*(this.view.offsetY/l))-h*(this.view.height/l)}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Bs.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Bs,isDirectionalLightShadow:!0,updateMatrices:function(e,t,r){Ps.prototype.updateMatrices.call(this,e,t,r)}}),zs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:zs,isDirectionalLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Us.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Us,isAmbientLight:!0}),Fs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Fs,isRectAreaLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=Ls.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),Gs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Gs,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){var t=this.textures;function r(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var n=new Co[e.type];if(void 0!==e.uuid&&(n.uuid=e.uuid),void 0!==e.name&&(n.name=e.name),void 0!==e.color&&n.color.setHex(e.color),void 0!==e.roughness&&(n.roughness=e.roughness),void 0!==e.metalness&&(n.metalness=e.metalness),void 0!==e.sheen&&(n.sheen=(new Fe).setHex(e.sheen)),void 0!==e.emissive&&n.emissive.setHex(e.emissive),void 0!==e.specular&&n.specular.setHex(e.specular),void 0!==e.shininess&&(n.shininess=e.shininess),void 0!==e.clearcoat&&(n.clearcoat=e.clearcoat),void 0!==e.clearcoatRoughness&&(n.clearcoatRoughness=e.clearcoatRoughness),void 0!==e.vertexColors&&(n.vertexColors=e.vertexColors),void 0!==e.fog&&(n.fog=e.fog),void 0!==e.flatShading&&(n.flatShading=e.flatShading),void 0!==e.blending&&(n.blending=e.blending),void 0!==e.combine&&(n.combine=e.combine),void 0!==e.side&&(n.side=e.side),void 0!==e.opacity&&(n.opacity=e.opacity),void 0!==e.transparent&&(n.transparent=e.transparent),void 0!==e.alphaTest&&(n.alphaTest=e.alphaTest),void 0!==e.depthTest&&(n.depthTest=e.depthTest),void 0!==e.depthWrite&&(n.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(n.colorWrite=e.colorWrite),void 0!==e.stencilWrite&&(n.stencilWrite=e.stencilWrite),void 0!==e.stencilWriteMask&&(n.stencilWriteMask=e.stencilWriteMask),void 0!==e.stencilFunc&&(n.stencilFunc=e.stencilFunc),void 0!==e.stencilRef&&(n.stencilRef=e.stencilRef),void 0!==e.stencilFuncMask&&(n.stencilFuncMask=e.stencilFuncMask),void 0!==e.stencilFail&&(n.stencilFail=e.stencilFail),void 0!==e.stencilZFail&&(n.stencilZFail=e.stencilZFail),void 0!==e.stencilZPass&&(n.stencilZPass=e.stencilZPass),void 0!==e.wireframe&&(n.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(n.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(n.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(n.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(n.rotation=e.rotation),1!==e.linewidth&&(n.linewidth=e.linewidth),void 0!==e.dashSize&&(n.dashSize=e.dashSize),void 0!==e.gapSize&&(n.gapSize=e.gapSize),void 0!==e.scale&&(n.scale=e.scale),void 0!==e.polygonOffset&&(n.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(n.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(n.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(n.skinning=e.skinning),void 0!==e.morphTargets&&(n.morphTargets=e.morphTargets),void 0!==e.morphNormals&&(n.morphNormals=e.morphNormals),void 0!==e.dithering&&(n.dithering=e.dithering),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.toneMapped&&(n.toneMapped=e.toneMapped),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.uniforms)for(var i in e.uniforms){var a=e.uniforms[i];switch(n.uniforms[i]={},a.type){case"t":n.uniforms[i].value=r(a.value);break;case"c":n.uniforms[i].value=(new Fe).setHex(a.value);break;case"v2":n.uniforms[i].value=(new f).fromArray(a.value);break;case"v3":n.uniforms[i].value=(new y).fromArray(a.value);break;case"v4":n.uniforms[i].value=(new T).fromArray(a.value);break;case"m3":n.uniforms[i].value=(new w).fromArray(a.value);case"m4":n.uniforms[i].value=(new N).fromArray(a.value);break;default:n.uniforms[i].value=a.value}}if(void 0!==e.defines&&(n.defines=e.defines),void 0!==e.vertexShader&&(n.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(n.fragmentShader=e.fragmentShader),void 0!==e.extensions)for(var o in e.extensions)n.extensions[o]=e.extensions[o];if(void 0!==e.shading&&(n.flatShading=1===e.shading),void 0!==e.size&&(n.size=e.size),void 0!==e.sizeAttenuation&&(n.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(n.map=r(e.map)),void 0!==e.matcap&&(n.matcap=r(e.matcap)),void 0!==e.alphaMap&&(n.alphaMap=r(e.alphaMap),n.transparent=!0),void 0!==e.bumpMap&&(n.bumpMap=r(e.bumpMap)),void 0!==e.bumpScale&&(n.bumpScale=e.bumpScale),void 0!==e.normalMap&&(n.normalMap=r(e.normalMap)),void 0!==e.normalMapType&&(n.normalMapType=e.normalMapType),void 0!==e.normalScale){var s=e.normalScale;!1===Array.isArray(s)&&(s=[s,s]),n.normalScale=(new f).fromArray(s)}return void 0!==e.displacementMap&&(n.displacementMap=r(e.displacementMap)),void 0!==e.displacementScale&&(n.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(n.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(n.roughnessMap=r(e.roughnessMap)),void 0!==e.metalnessMap&&(n.metalnessMap=r(e.metalnessMap)),void 0!==e.emissiveMap&&(n.emissiveMap=r(e.emissiveMap)),void 0!==e.emissiveIntensity&&(n.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(n.specularMap=r(e.specularMap)),void 0!==e.envMap&&(n.envMap=r(e.envMap)),void 0!==e.envMapIntensity&&(n.envMapIntensity=e.envMapIntensity),void 0!==e.reflectivity&&(n.reflectivity=e.reflectivity),void 0!==e.refractionRatio&&(n.refractionRatio=e.refractionRatio),void 0!==e.lightMap&&(n.lightMap=r(e.lightMap)),void 0!==e.lightMapIntensity&&(n.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(n.aoMap=r(e.aoMap)),void 0!==e.aoMapIntensity&&(n.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(n.gradientMap=r(e.gradientMap)),void 0!==e.clearcoatNormalMap&&(n.clearcoatNormalMap=r(e.clearcoatNormalMap)),void 0!==e.clearcoatNormalScale&&(n.clearcoatNormalScale=(new f).fromArray(e.clearcoatNormalScale)),n},setTextures:function(e){return this.textures=e,this}});var ks={decodeText:function(e){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);for(var t="",r=0,n=e.length;r<n;r++)t+=String.fromCharCode(e[r]);try{return decodeURIComponent(escape(t))}catch(e){return t}},extractUrlBase:function(e){var t=e.lastIndexOf("/");return-1===t?"./":e.substr(0,t+1)}};function Hs(){dt.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function js(e,t,r,n){"number"==typeof r&&(n=r,r=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Xe.call(this,e,t,r),this.meshPerAttribute=n||1}function Vs(e){Jo.call(this,e)}Hs.prototype=Object.assign(Object.create(dt.prototype),{constructor:Hs,isInstancedBufferGeometry:!0,copy:function(e){return dt.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e=dt.prototype.toJSON.call(this);return e.maxInstancedCount=this.maxInstancedCount,e.isInstancedBufferGeometry=!0,e}}),js.prototype=Object.assign(Object.create(Xe.prototype),{constructor:js,isInstancedBufferAttribute:!0,copy:function(e){return Xe.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){var e=Xe.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}),Vs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Vs,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){var t=e.isInstancedBufferGeometry?new Hs:new dt,r=e.data.index;if(void 0!==r){var n=new Ws[r.type](r.array);t.setIndex(new Xe(n,1))}var i=e.data.attributes;for(var a in i){var o=i[a],s=(n=new Ws[o.type](o.array),new(o.isInstancedBufferAttribute?js:Xe)(n,o.itemSize,o.normalized));void 0!==o.name&&(s.name=o.name),t.addAttribute(a,s)}var c=e.data.morphAttributes;if(c)for(var a in c){for(var l=c[a],u=[],h=0,d=l.length;h<d;h++){o=l[h],s=new Xe(n=new Ws[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(s.name=o.name),u.push(s)}t.morphAttributes[a]=u}var p=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==p){h=0;for(var f=p.length;h!==f;++h){var m=p[h];t.addGroup(m.start,m.count,m.materialIndex)}}var v=e.data.boundingSphere;if(void 0!==v){var g=new y;void 0!==v.center&&g.fromArray(v.center),t.boundingSphere=new ve(g,v.radius)}return e.name&&(t.name=e.name),e.userData&&(t.userData=e.userData),t}});var Ws={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function qs(e){Jo.call(this,e)}qs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:qs,load:function(e,t,r,n){var i=this,a=""===this.path?ks.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;var o=new Qo(i.manager);o.setPath(this.path),o.load(e,(function(r){var a=null;try{a=JSON.parse(r)}catch(t){return void 0!==n&&n(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?i.parse(a,t):console.error("THREE.ObjectLoader: Can't load "+e)}),r,n)},parse:function(e,t){var r=this.parseShape(e.shapes),n=this.parseGeometries(e.geometries,r),i=this.parseImages(e.images,(function(){void 0!==t&&t(s)})),a=this.parseTextures(e.textures,i),o=this.parseMaterials(e.materials,a),s=this.parseObject(e.object,n,o);return e.animations&&(s.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(s),s},parseShape:function(e){var t={};if(void 0!==e)for(var r=0,n=e.length;r<n;r++){var i=(new As).fromJSON(e[r]);t[i.uuid]=i}return t},parseGeometries:function(e,t){var r={};if(void 0!==e)for(var n=new Vs,i=0,a=e.length;i<a;i++){var o,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new bo[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new bo[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new bo[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new bo[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new bo[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new bo[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new bo[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new bo[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new bo[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new bo[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new bo[s.type]((new Ss[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new bo[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new bo[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var c=[],u=0,h=s.shapes.length;u<h;u++){var d=t[s.shapes[u]];c.push(d)}o=new bo[s.type](c,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(c=[],u=0,h=s.shapes.length;u<h;u++){d=t[s.shapes[u]];c.push(d)}var p=s.options.extrudePath;void 0!==p&&(s.options.extrudePath=(new Ss[p.type]).fromJSON(p)),o=new bo[s.type](c,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=n.parse(s);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in l)o=(new l.LegacyJSONLoader).parse(s,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),r[s.uuid]=o}return r},parseMaterials:function(e,t){var r={},n={};if(void 0!==e){var i=new Gs;i.setTextures(t);for(var a=0,o=e.length;a<o;a++){var s=e[a];if("MultiMaterial"===s.type){for(var c=[],l=0;l<s.materials.length;l++){var u=s.materials[l];void 0===r[u.uuid]&&(r[u.uuid]=i.parse(u)),c.push(r[u.uuid])}n[s.uuid]=c}else void 0===r[s.uuid]&&(r[s.uuid]=i.parse(s)),n[s.uuid]=r[s.uuid]}}return n},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r],i=Wo.parse(n);void 0!==n.uuid&&(i.uuid=n.uuid),t.push(i)}return t},parseImages:function(e,t){var r=this,n={};function i(e){return r.manager.itemStart(e),a.load(e,(function(){r.manager.itemEnd(e)}),void 0,(function(){r.manager.itemError(e),r.manager.itemEnd(e)}))}if(void 0!==e&&e.length>0){var a=new rs(new Yo(t));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=e.length;o<s;o++){var c=e[o],l=c.url;if(Array.isArray(l)){n[c.uuid]=[];for(var u=0,h=l.length;u<h;u++){var d=l[u],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:r.resourcePath+d;n[c.uuid].push(i(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:r.resourcePath+c.url;n[c.uuid]=i(p)}}}return n},parseTextures:function(e,t){function r(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var n={};if(void 0!==e)for(var i=0,a=e.length;i<a;i++){var o,s=e[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(t[s.image])?new br(t[s.image]):new S(t[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=r(s.mapping,Ys)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=r(s.wrap[0],Zs),o.wrapT=r(s.wrap[1],Zs)),void 0!==s.format&&(o.format=s.format),void 0!==s.type&&(o.type=s.type),void 0!==s.encoding&&(o.encoding=s.encoding),void 0!==s.minFilter&&(o.minFilter=r(s.minFilter,Js)),void 0!==s.magFilter&&(o.magFilter=r(s.magFilter,Js)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(o.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(o.unpackAlignment=s.unpackAlignment),n[s.uuid]=o}return n},parseObject:function(e,t,r){var n;function i(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n];void 0===r[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),t.push(r[a])}return t}return void 0===r[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),r[e]}}switch(e.type){case"Scene":n=new ee,void 0!==e.background&&Number.isInteger(e.background)&&(n.background=new Fe(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?n.fog=new di(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(n.fog=new hi(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":n=new Wt(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(n.focus=e.focus),void 0!==e.zoom&&(n.zoom=e.zoom),void 0!==e.filmGauge&&(n.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(n.filmOffset=e.filmOffset),void 0!==e.view&&(n.view=Object.assign({},e.view));break;case"OrthographicCamera":n=new Ns(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(n.zoom=e.zoom),void 0!==e.view&&(n.view=Object.assign({},e.view));break;case"AmbientLight":n=new Us(e.color,e.intensity);break;case"DirectionalLight":n=new zs(e.color,e.intensity);break;case"PointLight":n=new Ds(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":n=new Fs(e.color,e.intensity,e.width,e.height);break;case"SpotLight":n=new Os(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":n=new Rs(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=i(e.geometry),s=a(e.material);n=o.bones&&o.bones.length>0?new Ii(o,s):new Pt(o,s),void 0!==e.drawMode&&n.setDrawMode(e.drawMode);break;case"LOD":n=new Oi;break;case"Line":n=new Wi(i(e.geometry),a(e.material),e.mode);break;case"LineLoop":n=new Zi(i(e.geometry),a(e.material));break;case"LineSegments":n=new Yi(i(e.geometry),a(e.material));break;case"PointCloud":case"Points":n=new ta(i(e.geometry),a(e.material));break;case"Sprite":n=new Li(a(e.material));break;case"Group":n=new ri;break;default:n=new $}if(n.uuid=e.uuid,void 0!==e.name&&(n.name=e.name),void 0!==e.matrix?(n.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(n.matrixAutoUpdate=e.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==e.position&&n.position.fromArray(e.position),void 0!==e.rotation&&n.rotation.fromArray(e.rotation),void 0!==e.quaternion&&n.quaternion.fromArray(e.quaternion),void 0!==e.scale&&n.scale.fromArray(e.scale)),void 0!==e.castShadow&&(n.castShadow=e.castShadow),void 0!==e.receiveShadow&&(n.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(n.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(n.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&n.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(n.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.frustumCulled&&(n.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(n.renderOrder=e.renderOrder),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.layers&&(n.layers.mask=e.layers),void 0!==e.children)for(var c=e.children,l=0;l<c.length;l++)n.add(this.parseObject(c[l],t,r));if("LOD"===e.type)for(var u=e.levels,h=0;h<u.length;h++){var d=u[h],p=n.getObjectByProperty("uuid",d.object);void 0!==p&&n.addLevel(p,d.distance)}return n}});var Xs,Ys={UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},Zs={RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},Js={NearestFilter:1003,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:1006,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:1008};function Ks(e){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Jo.call(this,e),this.options=void 0}function Qs(){this.type="ShapePath",this.color=new Fe,this.subPaths=[],this.currentPath=null}function $s(e){this.type="Font",this.data=e}function ec(e,t,r,n,i){var a=i.glyphs[e]||i.glyphs["?"];if(a){var o,s,c,l,u,h,d,p,f=new Qs;if(a.o)for(var m=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),v=0,g=m.length;v<g;){switch(m[v++]){case"m":o=m[v++]*t+r,s=m[v++]*t+n,f.moveTo(o,s);break;case"l":o=m[v++]*t+r,s=m[v++]*t+n,f.lineTo(o,s);break;case"q":c=m[v++]*t+r,l=m[v++]*t+n,u=m[v++]*t+r,h=m[v++]*t+n,f.quadraticCurveTo(u,h,c,l);break;case"b":c=m[v++]*t+r,l=m[v++]*t+n,u=m[v++]*t+r,h=m[v++]*t+n,d=m[v++]*t+r,p=m[v++]*t+n,f.bezierCurveTo(u,h,d,p,c,l)}}return{offsetX:a.ha*t,path:f}}console.error('THREE.Font: character "'+e+'" does not exists in font family '+i.familyName+".")}function tc(e){Jo.call(this,e)}Ks.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Ks,setOptions:function(e){return this.options=e,this},load:function(e,t,r,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;fetch(e).then((function(e){return e.blob()})).then((function(e){return void 0===i.options?createImageBitmap(e):createImageBitmap(e,i.options)})).then((function(r){Xo.add(e,r),t&&t(r),i.manager.itemEnd(e)})).catch((function(t){n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)})),i.manager.itemStart(e)}}),Object.assign(Qs.prototype,{moveTo:function(e,t){this.currentPath=new Es,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,r,n){this.currentPath.quadraticCurveTo(e,t,r,n)},bezierCurveTo:function(e,t,r,n,i,a){this.currentPath.bezierCurveTo(e,t,r,n,i,a)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function r(e){for(var t=[],r=0,n=e.length;r<n;r++){var i=e[r],a=new As;a.curves=i.curves,t.push(a)}return t}function n(e,t){for(var r=t.length,n=!1,i=r-1,a=0;a<r;i=a++){var o=t[i],s=t[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(o=t[a],c=-c,s=t[i],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var u=l*(e.x-o.x)-c*(e.y-o.y);if(0===u)return!0;if(u<0)continue;n=!n}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return n}var i=Ya.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===t)return r(a);var o,s,c,l=[];if(1===a.length)return s=a[0],(c=new As).curves=s.curves,l.push(c),l;var u=!i(a[0].getPoints());u=e?!u:u;var h,d,p=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=a.length;g<y;g++)o=i(h=(s=a[g]).getPoints()),(o=e?!o:o)?(!u&&f[v]&&v++,f[v]={s:new As,p:h},f[v].s.curves=s.curves,u&&v++,m[v]=[]):m[v].push({h:s,p:h[0]});if(!f[0])return r(a);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)p[w]=[];for(w=0,_=f.length;w<_;w++)for(var M=m[w],S=0;S<M.length;S++){for(var T=M[S],E=!0,A=0;A<f.length;A++)n(T.p,f[A].p)&&(w!==A&&b.push({froms:w,tos:A,hole:S}),E?(E=!1,p[A].push(T)):x=!0);E&&p[w].push(T)}b.length>0&&(x||(m=p))}g=0;for(var L=f.length;g<L;g++){c=f[g].s,l.push(c);for(var R=0,P=(d=m[g]).length;R<P;R++)c.holes.push(d[R].h)}return l}}),Object.assign($s.prototype,{isFont:!0,generateShapes:function(e,t){void 0===t&&(t=100);for(var r=[],n=function(e,t,r){for(var n=Array.from?Array.from(e):String(e).split(""),i=t/r.resolution,a=(r.boundingBox.yMax-r.boundingBox.yMin+r.underlineThickness)*i,o=[],s=0,c=0,l=0;l<n.length;l++){var u=n[l];if("\n"===u)s=0,c-=a;else{var h=ec(u,i,s,c,r);s+=h.offsetX,o.push(h.path)}}return o}(e,t,this.data),i=0,a=n.length;i<a;i++)Array.prototype.push.apply(r,n[i].toShapes());return r}}),tc.prototype=Object.assign(Object.create(Jo.prototype),{constructor:tc,load:function(e,t,r,n){var i=this,a=new Qo(this.manager);a.setPath(this.path),a.load(e,(function(e){var r;try{r=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),r=JSON.parse(e.substring(65,e.length-2))}var n=i.parse(r);t&&t(n)}),r,n)},parse:function(e){return new $s(e)}});var rc={getContext:function(){return void 0===Xs&&(Xs=new(window.AudioContext||window.webkitAudioContext)),Xs},setContext:function(e){Xs=e}};function nc(e){Jo.call(this,e)}function ic(){this.coefficients=[];for(var e=0;e<9;e++)this.coefficients.push(new y)}function ac(e,t){Ls.call(this,void 0,t),this.sh=void 0!==e?e:new ic}function oc(e,t,r){ac.call(this,void 0,r);var n=(new Fe).set(e),i=(new Fe).set(t),a=new y(n.r,n.g,n.b),o=new y(i.r,i.g,i.b),s=Math.sqrt(Math.PI),c=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}function sc(e,t){ac.call(this,void 0,t);var r=(new Fe).set(e);this.sh.coefficients[0].set(r.r,r.g,r.b).multiplyScalar(2*Math.sqrt(Math.PI))}nc.prototype=Object.assign(Object.create(Jo.prototype),{constructor:nc,load:function(e,t,r,n){var i=new Qo(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.load(e,(function(e){var r=e.slice(0);rc.getContext().decodeAudioData(r,(function(e){t(e)}))}),r,n)}}),Object.assign(ic.prototype,{isSphericalHarmonics3:!0,set:function(e){for(var t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this},zero:function(){for(var e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this},getAt:function(e,t){var r=e.x,n=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScale(a[1],.488603*n),t.addScale(a[2],.488603*i),t.addScale(a[3],.488603*r),t.addScale(a[4],r*n*1.092548),t.addScale(a[5],n*i*1.092548),t.addScale(a[6],.315392*(3*i*i-1)),t.addScale(a[7],r*i*1.092548),t.addScale(a[8],.546274*(r*r-n*n)),t},getIrradianceAt:function(e,t){var r=e.x,n=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScale(a[1],1.023328*n),t.addScale(a[2],1.023328*i),t.addScale(a[3],1.023328*r),t.addScale(a[4],.858086*r*n),t.addScale(a[5],.858086*n*i),t.addScale(a[6],.743125*i*i-.247708),t.addScale(a[7],.858086*r*i),t.addScale(a[8],.429043*(r*r-n*n)),t},add:function(e){for(var t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this},scale:function(e){for(var t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this},lerp:function(e,t){for(var r=0;r<9;r++)this.coefficients[r].lerp(e.coefficients[r],t);return this},equals:function(e){for(var t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0},copy:function(e){return this.set(e.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(e,t){void 0===t&&(t=0);for(var r=this.coefficients,n=0;n<9;n++)r[n].fromArray(e,t+3*n);return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var r=this.coefficients,n=0;n<9;n++)r[n].toArray(e,t+3*n);return e}}),Object.assign(ic,{getBasisAt:function(e,t){var r=e.x,n=e.y,i=e.z;t[0]=.282095,t[1]=.488603*n,t[2]=.488603*i,t[3]=.488603*r,t[4]=1.092548*r*n,t[5]=1.092548*n*i,t[6]=.315392*(3*i*i-1),t[7]=1.092548*r*i,t[8]=.546274*(r*r-n*n)}}),ac.prototype=Object.assign(Object.create(Ls.prototype),{constructor:ac,isLightProbe:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.sh.copy(e.sh),this.intensity=e.intensity,this},toJSON:function(e){return Ls.prototype.toJSON.call(this,e)}}),oc.prototype=Object.assign(Object.create(ac.prototype),{constructor:oc,isHemisphereLightProbe:!0,copy:function(e){return ac.prototype.copy.call(this,e),this},toJSON:function(e){return ac.prototype.toJSON.call(this,e)}}),sc.prototype=Object.assign(Object.create(ac.prototype),{constructor:sc,isAmbientLightProbe:!0,copy:function(e){return ac.prototype.copy.call(this,e),this},toJSON:function(e){return ac.prototype.toJSON.call(this,e)}});var cc=new N,lc=new N;function uc(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Wt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Wt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function hc(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(uc.prototype,{update:function(e){var t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep;var r,n,i=e.projectionMatrix.clone(),a=t.eyeSep/2,o=a*t.near/t.focus,s=t.near*Math.tan(p.DEG2RAD*t.fov*.5)/t.zoom;lc.elements[12]=-a,cc.elements[12]=a,r=-s*t.aspect+o,n=s*t.aspect+o,i.elements[0]=2*t.near/(n-r),i.elements[8]=(n+r)/(n-r),this.cameraL.projectionMatrix.copy(i),r=-s*t.aspect-o,n=s*t.aspect-o,i.elements[0]=2*t.near/(n-r),i.elements[8]=(n+r)/(n-r),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(lc),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(cc)}}),Object.assign(hc.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}});var dc=new y,pc=new m,fc=new y,mc=new y;function vc(){$.call(this),this.type="AudioListener",this.context=rc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new hc}function gc(e){$.call(this),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}vc.prototype=Object.assign(Object.create($.prototype),{constructor:vc,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(e){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this},updateMatrixWorld:function(e){$.prototype.updateMatrixWorld.call(this,e);var t=this.context.listener,r=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(dc,pc,fc),mc.set(0,0,-1).applyQuaternion(pc),t.positionX){var n=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(dc.x,n),t.positionY.linearRampToValueAtTime(dc.y,n),t.positionZ.linearRampToValueAtTime(dc.z,n),t.forwardX.linearRampToValueAtTime(mc.x,n),t.forwardY.linearRampToValueAtTime(mc.y,n),t.forwardZ.linearRampToValueAtTime(mc.z,n),t.upX.linearRampToValueAtTime(r.x,n),t.upY.linearRampToValueAtTime(r.y,n),t.upZ.linearRampToValueAtTime(r.z,n)}else t.setPosition(dc.x,dc.y,dc.z),t.setOrientation(mc.x,mc.y,mc.z,r.x,r.y,r.z)}}),gc.prototype=Object.assign(Object.create($.prototype),{constructor:gc,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setMediaElementSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this},setMediaStreamSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),this.startTime=this.context.currentTime,e.start(this.startTime,this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},setDetune:function(e){if(this.detune=e,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}});var yc=new y,xc=new m,bc=new y,wc=new y;function _c(e){gc.call(this,e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Mc(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function Sc(e,t,r){this.binding=e,this.valueSize=r;var n,i=Float64Array;switch(t){case"quaternion":n=this._slerp;break;case"string":case"bool":i=Array,n=this._select;break;default:n=this._lerp}this.buffer=new i(4*r),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}_c.prototype=Object.assign(Object.create(gc.prototype),{constructor:_c,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){return this.panner.refDistance=e,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){return this.panner.rolloffFactor=e,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){return this.panner.distanceModel=e,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){return this.panner.maxDistance=e,this},setDirectionalCone:function(e,t,r){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=r,this},updateMatrixWorld:function(e){if($.prototype.updateMatrixWorld.call(this,e),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(yc,xc,bc),wc.set(0,0,1).applyQuaternion(xc);var t=this.panner;if(t.positionX){var r=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(yc.x,r),t.positionY.linearRampToValueAtTime(yc.y,r),t.positionZ.linearRampToValueAtTime(yc.z,r),t.orientationX.linearRampToValueAtTime(wc.x,r),t.orientationY.linearRampToValueAtTime(wc.y,r),t.orientationZ.linearRampToValueAtTime(wc.z,r)}else t.setPosition(yc.x,yc.y,yc.z),t.setOrientation(wc.x,wc.y,wc.z)}}}),Object.assign(Mc.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),r=0;r<t.length;r++)e+=t[r];return e/t.length}}),Object.assign(Sc.prototype,{accumulate:function(e,t){var r=this.buffer,n=this.valueSize,i=e*n+n,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==n;++o)r[i+o]=r[o];a=t}else{var s=t/(a+=t);this._mixBufferRegion(r,i,0,s,n)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,r=this.buffer,n=e*t+t,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,i<1){var o=3*t;this._mixBufferRegion(r,n,o,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(r[s]!==r[s+t]){a.setValue(r,n);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,r=this.valueSize,n=3*r;e.getValue(t,n);for(var i=r,a=n;i!==a;++i)t[i]=t[n+i%r];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,r,n,i){if(n>=.5)for(var a=0;a!==i;++a)e[t+a]=e[r+a]},_slerp:function(e,t,r,n){m.slerpFlat(e,t,e,t,e,r,n)},_lerp:function(e,t,r,n,i){for(var a=1-n,o=0;o!==i;++o){var s=t+o;e[s]=e[s]*a+e[r+o]*n}}});var Tc=new RegExp("[\\[\\]\\.:\\/]","g"),Ec="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Ac=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),Lc=/(WCOD+)?/.source.replace("WCOD",Ec),Rc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Pc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Cc=new RegExp("^"+Ac+Lc+Rc+Pc+"$"),Oc=["material","materials","bones"];function Ic(e,t,r){var n=r||Dc.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,n)}function Dc(e,t,r){this.path=t,this.parsedPath=r||Dc.parseTrackName(t),this.node=Dc.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function Nc(){this.uuid=p.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,r=arguments.length;t!==r;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}function Bc(e,t,r){this._mixer=e,this._clip=t,this._localRoot=r||null;for(var n=t.tracks,i=n.length,a=new Array(i),o={endingStart:2400,endingEnd:2400},s=0;s!==i;++s){var c=n[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function zc(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Uc(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function Fc(e,t,r){pi.call(this,e,t),this.meshPerAttribute=r||1}function Gc(e,t,r,n){this.ray=new Se(e,t),this.near=r||0,this.far=n||1/0,this.camera=null,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function kc(e,t){return e.distance-t.distance}function Hc(e,t,r,n){if(!1!==e.visible&&(e.raycast(t,r),!0===n))for(var i=e.children,a=0,o=i.length;a<o;a++)Hc(i[a],t,r,!0)}function jc(e,t,r){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==r?r:0,this}function Vc(e,t,r){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==r?r:0,this}Object.assign(Ic.prototype,{getValue:function(e,t){this.bind();var r=this._targetGroup.nCachedObjects_,n=this._bindings[r];void 0!==n&&n.getValue(e,t)},setValue:function(e,t){for(var r=this._bindings,n=this._targetGroup.nCachedObjects_,i=r.length;n!==i;++n)r[n].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].unbind()}}),Object.assign(Dc,{Composite:Ic,create:function(e,t,r){return e&&e.isAnimationObjectGroup?new Dc.Composite(e,t,r):new Dc(e,t,r)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(Tc,"")},parseTrackName:function(e){var t=Cc.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var r={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=r.nodeName&&r.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){var i=r.nodeName.substring(n+1);-1!==Oc.indexOf(i)&&(r.nodeName=r.nodeName.substring(0,n),r.objectName=i)}if(null===r.propertyName||0===r.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return r},findNode:function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var r=e.skeleton.getBoneByName(t);if(void 0!==r)return r}if(e.children){var n=function e(r){for(var n=0;n<r.length;n++){var i=r[n];if(i.name===t||i.uuid===t)return i;var a=e(i.children);if(a)return a}return null}(e.children);if(n)return n}return null}}),Object.assign(Dc.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)e[t++]=r[n]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,r=t.objectName,n=t.propertyName,i=t.propertyIndex;if(e||(e=Dc.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(r){var a=t.objectIndex;switch(r){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[r])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[r]}if(void 0!==a){if(void 0===e[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[a]}}var s=e[n];if(void 0!==s){var c=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var l=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(e.geometry.morphAttributes.position[o].name===i){i=o;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===i){i=o;break}}}l=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(l=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(l=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][c]}else{var u=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+u+"."+n+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Dc.prototype,{_getValue_unbound:Dc.prototype.getValue,_setValue_unbound:Dc.prototype.setValue}),Object.assign(Nc.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,n=this._indicesByUUID,i=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,c=void 0,l=0,u=arguments.length;l!==u;++l){var h=arguments[l],d=h.uuid,p=n[d];if(void 0===p){p=t++,n[d]=p,e.push(h);for(var f=0,m=s;f!==m;++f)o[f].push(new Dc(h,i[f],a[f]))}else if(p<r){c=e[p];var v=--r,g=e[v];n[g.uuid]=p,e[p]=g,n[d]=v,e[v]=h;for(f=0,m=s;f!==m;++f){var y=o[f],x=y[v],b=y[p];y[p]=x,void 0===b&&(b=new Dc(h,i[f],a[f])),y[v]=b}}else e[p]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=r},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,r=this._indicesByUUID,n=this._bindings,i=n.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],c=s.uuid,l=r[c];if(void 0!==l&&l>=t){var u=t++,h=e[u];r[h.uuid]=l,e[l]=h,r[c]=u,e[u]=s;for(var d=0,p=i;d!==p;++d){var f=n[d],m=f[u],v=f[l];f[l]=m,f[u]=v}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],l=c.uuid,u=n[l];if(void 0!==u)if(delete n[l],u<r){var h=--r,d=e[h],p=e[y=--t];n[d.uuid]=u,e[u]=d,n[p.uuid]=h,e[h]=p,e.pop();for(var f=0,m=a;f!==m;++f){var v=(x=i[f])[h],g=x[y];x[u]=v,x[h]=g,x.pop()}}else{var y;n[(p=e[y=--t]).uuid]=u,e[u]=p,e.pop();for(f=0,m=a;f!==m;++f){var x;(x=i[f])[u]=x[y],x.pop()}}}this.nCachedObjects_=r},subscribe_:function(e,t){var r=this._bindingsIndicesByPath,n=r[e],i=this._bindings;if(void 0!==n)return i[n];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,u=new Array(c);n=i.length,r[e]=n,a.push(e),o.push(t),i.push(u);for(var h=l,d=s.length;h!==d;++h){var p=s[h];u[h]=new Dc(p,e,t)}return u},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,r=t[e];if(void 0!==r){var n=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];t[e[o]]=r,a[r]=s,a.pop(),i[r]=i[o],i.pop(),n[r]=n[o],n.pop()}}}),Object.assign(Bc.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,r){if(e.fadeOut(t),this.fadeIn(t),r){var n=this._clip.duration,i=e._clip.duration,a=i/n,o=n/i;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,r){return e.crossFadeFrom(this,t,r)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,r){var n=this._mixer,i=n.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+r,c[0]=e/o,c[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,r,n){if(this.enabled){var i=this._startTime;if(null!==i){var a=(e-i)*r;if(a<0||0===r)return;this._startTime=null,t=r*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,u=0,h=c.length;u!==h;++u)c[u].evaluate(o),l[u].accumulate(n,s)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var r=this._weightInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var r=this._timeScaleInterpolant;if(null!==r)t*=r.evaluate(e)[0],e>r.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e,r=this._clip.duration,n=this.loop,i=this._loopCount,a=2202===n;if(0===e)return-1===i?t:a&&1==(1&i)?r-t:t;if(2200===n){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=r)t=r;else{if(!(t<0)){this.time=t;break e}t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=r||t<0){var o=Math.floor(t/r);t-=r*o,i+=Math.abs(o);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?r:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(1===s){var c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=t;if(a&&1==(1&i))return r-t}return t},_setEndings:function(e,t,r){var n=this._interpolantSettings;r?(n.endingStart=2401,n.endingEnd=2401):(n.endingStart=e?this.zeroSlopeAtStart?2401:2400:2402,n.endingEnd=t?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(e,t,r){var n=this._mixer,i=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=t,o[1]=i+e,s[1]=r,this}}),zc.prototype=Object.assign(Object.create(u.prototype),{constructor:zc,_bindAction:function(e,t){var r=e._localRoot||this._root,n=e._clip.tracks,i=n.length,a=e._propertyBindings,o=e._interpolants,s=r.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var u=0;u!==i;++u){var h=n[u],d=h.name,p=l[d];if(void 0!==p)a[u]=p;else{if(void 0!==(p=a[u])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[u].binding.parsedPath;++(p=new Sc(Dc.create(r,d,f),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),a[u]=p}o[u].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,r=e._clip.uuid,n=this._actionsByClip[r];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,r,t)}for(var i=e._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,r){var n=this._actions,i=this._actionsByClip,a=i[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=n.length,n.push(e),a.actionByRoot[r]=e},_removeInactiveAction:function(e){var t=this._actions,r=t[t.length-1],n=e._cacheIndex;r._cacheIndex=n,t[n]=r,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null,delete o.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,r=e._cacheIndex,n=this._nActiveActions++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackAction:function(e){var t=this._actions,r=e._cacheIndex,n=--this._nActiveActions,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_addInactiveBinding:function(e,t,r){var n=this._bindingsByRootAndName,i=n[t],a=this._bindings;void 0===i&&(i={},n[t]=i),i[r]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,r=e.binding,n=r.rootNode.uuid,i=r.path,a=this._bindingsByRootAndName,o=a[n],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete o[i],0===Object.keys(o).length&&delete a[n]},_lendBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=this._nActiveBindings++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=--this._nActiveBindings,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,r=e[t];return void 0===r&&((r=new No(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=r),r},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,r=e.__cacheIndex,n=--this._nActiveControlInterpolants,i=t[n];e.__cacheIndex=n,t[n]=e,i.__cacheIndex=r,t[r]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?Wo.findByName(r,e):e,a=null!==i?i.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[n];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var l=new Bc(this,i,t);return this._bindAction(l,s),this._addInactiveAction(l,a,n),l},existingAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?Wo.findByName(r,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[n]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,r=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(i=0;i!==n;++i)r[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,r=this._nActiveActions,n=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1,o=0;o!==r;++o){t[o]._update(n,e,i,a)}var s=this._bindings,c=this._nActiveBindings;for(o=0;o!==c;++o)s[o].apply(a);return this},setTime:function(e){this.time=0;for(var t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,r=e.uuid,n=this._actionsByClip,i=n[r];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=l,t[l]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete n[r]}},uncacheRoot:function(e){var t=e.uuid,r=this._actionsByClip;for(var n in r){var i=r[n].actionByRoot[t];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var a=this._bindingsByRootAndName[t];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(e,t){var r=this.existingAction(e,t);null!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}}),Uc.prototype.clone=function(){return new Uc(void 0===this.value.clone?this.value:this.value.clone())},Fc.prototype=Object.assign(Object.create(pi.prototype),{constructor:Fc,isInstancedInterleavedBuffer:!0,copy:function(e){return pi.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(Gc.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,r){var n=r||[];return Hc(e,this,n,t),n.sort(kc),n},intersectObjects:function(e,t,r){var n=r||[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),n;for(var i=0,a=e.length;i<a;i++)Hc(e[i],this,n,t);return n.sort(kc),n}}),Object.assign(jc.prototype,{set:function(e,t,r){return this.radius=e,this.phi=t,this.theta=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,r){return this.radius=Math.sqrt(e*e+t*t+r*r),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,r),this.phi=Math.acos(p.clamp(t/this.radius,-1,1))),this}}),Object.assign(Vc.prototype,{set:function(e,t,r){return this.radius=e,this.theta=t,this.y=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,r){return this.radius=Math.sqrt(e*e+r*r),this.theta=Math.atan2(e,r),this.y=t,this}});var Wc=new f;function qc(e,t){this.min=void 0!==e?e:new f(1/0,1/0),this.max=void 0!==t?t:new f(-1/0,-1/0)}Object.assign(qc.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var r=Wc.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new f),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new f),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new f),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new f),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return Wc.copy(e).clamp(this.min,this.max).sub(e).length()},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var Xc=new y,Yc=new y;function Zc(e,t){this.start=void 0!==e?e:new y,this.end=void 0!==t?t:new y}function Jc(e){$.call(this),this.material=e,this.render=function(){}}Object.assign(Zc.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new y),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn("THREE.Line3: .delta() target is now required"),e=new y),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new y),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(e,t){Xc.subVectors(e,this.start),Yc.subVectors(this.end,this.start);var r=Yc.dot(Yc),n=Yc.dot(Xc)/r;return t&&(n=p.clamp(n,0,1)),n},closestPointToPoint:function(e,t,r){var n=this.closestPointToPointParameter(e,t);return void 0===r&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),r=new y),this.delta(r).multiplyScalar(n).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Jc.prototype=Object.create($.prototype),Jc.prototype.constructor=Jc,Jc.prototype.isImmediateRenderObject=!0;var Kc=new y,Qc=new y,$c=new w,el=["a","b","c"];function tl(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16711680,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var c=new dt,l=new tt(2*o*3,3);c.addAttribute("position",l),Yi.call(this,c,new Fi({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}tl.prototype=Object.create(Yi.prototype),tl.prototype.constructor=tl,tl.prototype.update=function(){this.object.updateMatrixWorld(!0),$c.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,t=this.geometry.attributes.position,r=this.object.geometry;if(r&&r.isGeometry)for(var n=r.vertices,i=r.faces,a=0,o=0,s=i.length;o<s;o++)for(var c=i[o],l=0,u=c.vertexNormals.length;l<u;l++){var h=n[c[el[l]]],d=c.vertexNormals[l];Kc.copy(h).applyMatrix4(e),Qc.copy(d).applyMatrix3($c).normalize().multiplyScalar(this.size).add(Kc),t.setXYZ(a,Kc.x,Kc.y,Kc.z),a+=1,t.setXYZ(a,Qc.x,Qc.y,Qc.z),a+=1}else if(r&&r.isBufferGeometry){var p=r.attributes.position,f=r.attributes.normal;for(a=0,l=0,u=p.count;l<u;l++)Kc.set(p.getX(l),p.getY(l),p.getZ(l)).applyMatrix4(e),Qc.set(f.getX(l),f.getY(l),f.getZ(l)),Qc.applyMatrix3($c).normalize().multiplyScalar(this.size).add(Kc),t.setXYZ(a,Kc.x,Kc.y,Kc.z),a+=1,t.setXYZ(a,Qc.x,Qc.y,Qc.z),a+=1}t.needsUpdate=!0};var rl=new y;function nl(e,t){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var r=new dt,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,a=1;i<32;i++,a++){var o=i/32*Math.PI*2,s=a/32*Math.PI*2;n.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}r.addAttribute("position",new tt(n,3));var c=new Fi({fog:!1});this.cone=new Yi(r,c),this.add(this.cone),this.update()}nl.prototype=Object.create($.prototype),nl.prototype.constructor=nl,nl.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},nl.prototype.update=function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),rl.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(rl),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var il=new y,al=new N,ol=new N;function sl(e){for(var t=function e(t){var r=[];t&&t.isBone&&r.push(t);for(var n=0;n<t.children.length;n++)r.push.apply(r,e(t.children[n]));return r}(e),r=new dt,n=[],i=[],a=new Fe(0,0,1),o=new Fe(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),i.push(a.r,a.g,a.b),i.push(o.r,o.g,o.b))}r.addAttribute("position",new tt(n,3)),r.addAttribute("color",new tt(i,3));var l=new Fi({vertexColors:2,depthTest:!1,depthWrite:!1,transparent:!0});Yi.call(this,r,l),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function cl(e,t,r){this.light=e,this.light.updateMatrixWorld(),this.color=r;var n=new io(t,4,2),i=new qe({wireframe:!0,fog:!1});Pt.call(this,n,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function ll(e,t){this.type="RectAreaLightHelper",this.light=e,this.color=t;var r=new dt;r.addAttribute("position",new tt([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere();var n=new Fi({fog:!1});Wi.call(this,r,n);var i=new dt;i.addAttribute("position",new tt([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),i.computeBoundingSphere(),this.add(new Pt(i,new qe({side:1,fog:!1}))),this.update()}sl.prototype=Object.create(Yi.prototype),sl.prototype.constructor=sl,sl.prototype.updateMatrixWorld=function(e){var t=this.bones,r=this.geometry,n=r.getAttribute("position");ol.getInverse(this.root.matrixWorld);for(var i=0,a=0;i<t.length;i++){var o=t[i];o.parent&&o.parent.isBone&&(al.multiplyMatrices(ol,o.matrixWorld),il.setFromMatrixPosition(al),n.setXYZ(a,il.x,il.y,il.z),al.multiplyMatrices(ol,o.parent.matrixWorld),il.setFromMatrixPosition(al),n.setXYZ(a+1,il.x,il.y,il.z),a+=2)}r.getAttribute("position").needsUpdate=!0,$.prototype.updateMatrixWorld.call(this,e)},cl.prototype=Object.create(Pt.prototype),cl.prototype.constructor=cl,cl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},cl.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},ll.prototype=Object.create(Wi.prototype),ll.prototype.constructor=ll,ll.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var e=this.material.color,t=Math.max(e.r,e.g,e.b);t>1&&e.multiplyScalar(1/t),this.children[0].material.color.copy(this.material.color)}},ll.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()};var ul=new y,hl=new Fe,dl=new Fe;function pl(e,t,r){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r;var n=new ma(t);n.rotateY(.5*Math.PI),this.material=new qe({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=2);var i=n.getAttribute("position"),a=new Float32Array(3*i.count);n.addAttribute("color",new Xe(a,3)),this.add(new Pt(n,this.material)),this.update()}function fl(e,t){this.lightProbe=e,this.size=t;var r={GAMMA_OUTPUT:""},n=new jt({defines:r,uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:["varying vec3 vNormal;","void main() {","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#define RECIPROCAL_PI 0.318309886","vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {","\t// matrix is assumed to be orthogonal","\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );","}","vec3 linearToOutput( in vec3 a ) {","\t#ifdef GAMMA_OUTPUT","\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );","\t#else","\t\treturn a;","\t#endif","}","// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf","vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {","\t// normal is assumed to have unit length","\tfloat x = normal.x, y = normal.y, z = normal.z;","\t// band 0","\tvec3 result = shCoefficients[ 0 ] * 0.886227;","\t// band 1","\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;","\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;","\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;","\t// band 2","\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;","\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;","\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );","\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;","\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );","\treturn result;","}","uniform vec3 sh[ 9 ]; // sh coefficients","uniform float intensity; // light probe intensity","varying vec3 vNormal;","void main() {","\tvec3 normal = normalize( vNormal );","\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );","\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );","\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;","\toutgoingLight = linearToOutput( outgoingLight );","\tgl_FragColor = vec4( outgoingLight, 1.0 );","}"].join("\n")}),i=new io(1,32,16);Pt.call(this,i,n),this.onBeforeRender()}function ml(e,t,r,n){e=e||10,t=t||10,r=new Fe(void 0!==r?r:4473924),n=new Fe(void 0!==n?n:8947848);for(var i=t/2,a=e/t,o=e/2,s=[],c=[],l=0,u=0,h=-o;l<=t;l++,h+=a){s.push(-o,0,h,o,0,h),s.push(h,0,-o,h,0,o);var d=l===i?r:n;d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3,d.toArray(c,u),u+=3}var p=new dt;p.addAttribute("position",new tt(s,3)),p.addAttribute("color",new tt(c,3));var f=new Fi({vertexColors:2});Yi.call(this,p,f)}function vl(e,t,r,n,i,a){e=e||10,t=t||16,r=r||8,n=n||64,i=new Fe(void 0!==i?i:4473924),a=new Fe(void 0!==a?a:8947848);var o,s,c,l,u,h,d,p=[],f=[];for(l=0;l<=t;l++)c=l/t*(2*Math.PI),o=Math.sin(c)*e,s=Math.cos(c)*e,p.push(0,0,0),p.push(o,0,s),d=1&l?i:a,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(l=0;l<=r;l++)for(d=1&l?i:a,h=e-e/r*l,u=0;u<n;u++)c=u/n*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b),c=(u+1)/n*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b);var m=new dt;m.addAttribute("position",new tt(p,3)),m.addAttribute("color",new tt(f,3));var v=new Fi({vertexColors:2});Yi.call(this,m,v)}function gl(e,t,r,n){this.audio=e,this.range=t||1,this.divisionsInnerAngle=r||16,this.divisionsOuterAngle=n||2;var i=new dt,a=this.divisionsInnerAngle+2*this.divisionsOuterAngle,o=new Float32Array(3*(3*a+3));i.addAttribute("position",new Xe(o,3));var s=new Fi({color:65280}),c=new Fi({color:16776960});Wi.call(this,i,[c,s]),this.update()}pl.prototype=Object.create($.prototype),pl.prototype.constructor=pl,pl.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},pl.prototype.update=function(){var e=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var t=e.geometry.getAttribute("color");hl.copy(this.light.color),dl.copy(this.light.groundColor);for(var r=0,n=t.count;r<n;r++){var i=r<n/2?hl:dl;t.setXYZ(r,i.r,i.g,i.b)}t.needsUpdate=!0}e.lookAt(ul.setFromMatrixPosition(this.light.matrixWorld).negate())},fl.prototype=Object.create(Pt.prototype),fl.prototype.constructor=fl,fl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},fl.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position),this.scale.set(1,1,1).multiplyScalar(this.size),this.material.uniforms.intensity.value=this.lightProbe.intensity},ml.prototype=Object.assign(Object.create(Yi.prototype),{constructor:ml,copy:function(e){return Yi.prototype.copy.call(this,e),this.geometry.copy(e.geometry),this.material.copy(e.material),this},clone:function(){return(new this.constructor).copy(this)}}),vl.prototype=Object.create(Yi.prototype),vl.prototype.constructor=vl,gl.prototype=Object.create(Wi.prototype),gl.prototype.constructor=gl,gl.prototype.update=function(){var e,t,r=this.audio,n=this.range,i=this.divisionsInnerAngle,a=this.divisionsOuterAngle,o=p.degToRad(r.panner.coneInnerAngle),s=p.degToRad(r.panner.coneOuterAngle),c=o/2,l=s/2,u=0,h=0,d=this.geometry,f=d.attributes.position;function m(r,i,a,o){var s=(i-r)/a;for(f.setXYZ(u,0,0,0),h++,e=r;e<i;e+=s)t=u+h,f.setXYZ(t,Math.sin(e)*n,0,Math.cos(e)*n),f.setXYZ(t+1,Math.sin(Math.min(e+s,i))*n,0,Math.cos(Math.min(e+s,i))*n),f.setXYZ(t+2,0,0,0),h+=3;d.addGroup(u,h,o),u+=h,h=0}d.clearGroups(),m(-l,-c,a,0),m(-c,c,i,1),m(c,l,a,0),f.needsUpdate=!0,o===s&&(this.material[0].visible=!1)},gl.prototype.dispose=function(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()};var yl=new y,xl=new y,bl=new w;function wl(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16776960,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new dt,l=new tt(2*o*3,3);c.addAttribute("position",l),Yi.call(this,c,new Fi({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}wl.prototype=Object.create(Yi.prototype),wl.prototype.constructor=wl,wl.prototype.update=function(){this.object.updateMatrixWorld(!0),bl.getNormalMatrix(this.object.matrixWorld);for(var e=this.object.matrixWorld,t=this.geometry.attributes.position,r=this.object.geometry,n=r.vertices,i=r.faces,a=0,o=0,s=i.length;o<s;o++){var c=i[o],l=c.normal;yl.copy(n[c.a]).add(n[c.b]).add(n[c.c]).divideScalar(3).applyMatrix4(e),xl.copy(l).applyMatrix3(bl).normalize().multiplyScalar(this.size).add(yl),t.setXYZ(a,yl.x,yl.y,yl.z),a+=1,t.setXYZ(a,xl.x,xl.y,xl.z),a+=1}t.needsUpdate=!0};var _l=new y,Ml=new y,Sl=new y;function Tl(e,t,r){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r,void 0===t&&(t=1);var n=new dt;n.addAttribute("position",new tt([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var i=new Fi({fog:!1});this.lightPlane=new Wi(n,i),this.add(this.lightPlane),(n=new dt).addAttribute("position",new tt([0,0,0,0,0,1],3)),this.targetLine=new Wi(n,i),this.add(this.targetLine),this.update()}Tl.prototype=Object.create($.prototype),Tl.prototype.constructor=Tl,Tl.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Tl.prototype.update=function(){_l.setFromMatrixPosition(this.light.matrixWorld),Ml.setFromMatrixPosition(this.light.target.matrixWorld),Sl.subVectors(Ml,_l),this.lightPlane.lookAt(Ml),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Ml),this.targetLine.scale.z=Sl.length()};var El=new y,Al=new Vt;function Ll(e){var t=new dt,r=new Fi({color:16777215,vertexColors:1}),n=[],i=[],a={},o=new Fe(16755200),s=new Fe(16711680),c=new Fe(43775),l=new Fe(16777215),u=new Fe(3355443);function h(e,t,r){d(e,r),d(t,r)}function d(e,t){n.push(0,0,0),i.push(t.r,t.g,t.b),void 0===a[e]&&(a[e]=[]),a[e].push(n.length/3-1)}h("n1","n2",o),h("n2","n4",o),h("n4","n3",o),h("n3","n1",o),h("f1","f2",o),h("f2","f4",o),h("f4","f3",o),h("f3","f1",o),h("n1","f1",o),h("n2","f2",o),h("n3","f3",o),h("n4","f4",o),h("p","n1",s),h("p","n2",s),h("p","n3",s),h("p","n4",s),h("u1","u2",c),h("u2","u3",c),h("u3","u1",c),h("c","t",l),h("p","c",u),h("cn1","cn2",u),h("cn3","cn4",u),h("cf1","cf2",u),h("cf3","cf4",u),t.addAttribute("position",new tt(n,3)),t.addAttribute("color",new tt(i,3)),Yi.call(this,t,r),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function Rl(e,t,r,n,i,a,o){El.set(i,a,o).unproject(n);var s=t[e];if(void 0!==s)for(var c=r.getAttribute("position"),l=0,u=s.length;l<u;l++)c.setXYZ(s[l],El.x,El.y,El.z)}Ll.prototype=Object.create(Yi.prototype),Ll.prototype.constructor=Ll,Ll.prototype.update=function(){var e=this.geometry,t=this.pointMap;Al.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Rl("c",t,e,Al,0,0,-1),Rl("t",t,e,Al,0,0,1),Rl("n1",t,e,Al,-1,-1,-1),Rl("n2",t,e,Al,1,-1,-1),Rl("n3",t,e,Al,-1,1,-1),Rl("n4",t,e,Al,1,1,-1),Rl("f1",t,e,Al,-1,-1,1),Rl("f2",t,e,Al,1,-1,1),Rl("f3",t,e,Al,-1,1,1),Rl("f4",t,e,Al,1,1,1),Rl("u1",t,e,Al,.7,1.1,-1),Rl("u2",t,e,Al,-.7,1.1,-1),Rl("u3",t,e,Al,0,2,-1),Rl("cf1",t,e,Al,-1,0,1),Rl("cf2",t,e,Al,1,0,1),Rl("cf3",t,e,Al,0,-1,1),Rl("cf4",t,e,Al,0,1,1),Rl("cn1",t,e,Al,-1,0,-1),Rl("cn2",t,e,Al,1,0,-1),Rl("cn3",t,e,Al,0,-1,-1),Rl("cn4",t,e,Al,0,1,-1),e.getAttribute("position").needsUpdate=!0};var Pl=new pe;function Cl(e,t){this.object=e,void 0===t&&(t=16776960);var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),i=new dt;i.setIndex(new Xe(r,1)),i.addAttribute("position",new Xe(n,3)),Yi.call(this,i,new Fi({color:t})),this.matrixAutoUpdate=!1,this.update()}function Ol(e,t){this.type="Box3Helper",this.box=e,t=t||16776960;var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new dt;n.setIndex(new Xe(r,1)),n.addAttribute("position",new tt([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Yi.call(this,n,new Fi({color:t})),this.geometry.computeBoundingSphere()}function Il(e,t,r){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var n=void 0!==r?r:16776960,i=new dt;i.addAttribute("position",new tt([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),Wi.call(this,i,new Fi({color:n}));var a=new dt;a.addAttribute("position",new tt([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new Pt(a,new qe({color:n,opacity:.2,transparent:!0,depthWrite:!1})))}Cl.prototype=Object.create(Yi.prototype),Cl.prototype.constructor=Cl,Cl.prototype.update=function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Pl.setFromObject(this.object),!Pl.isEmpty()){var t=Pl.min,r=Pl.max,n=this.geometry.attributes.position,i=n.array;i[0]=r.x,i[1]=r.y,i[2]=r.z,i[3]=t.x,i[4]=r.y,i[5]=r.z,i[6]=t.x,i[7]=t.y,i[8]=r.z,i[9]=r.x,i[10]=t.y,i[11]=r.z,i[12]=r.x,i[13]=r.y,i[14]=t.z,i[15]=t.x,i[16]=r.y,i[17]=t.z,i[18]=t.x,i[19]=t.y,i[20]=t.z,i[21]=r.x,i[22]=t.y,i[23]=t.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Cl.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Cl.prototype.copy=function(e){return Yi.prototype.copy.call(this,e),this.object=e.object,this},Cl.prototype.clone=function(){return(new this.constructor).copy(this)},Ol.prototype=Object.create(Yi.prototype),Ol.prototype.constructor=Ol,Ol.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),$.prototype.updateMatrixWorld.call(this,e))},Il.prototype=Object.create(Wi.prototype),Il.prototype.constructor=Il,Il.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?1:0,this.lookAt(this.plane.normal),$.prototype.updateMatrixWorld.call(this,e)};var Dl,Nl,Bl=new y;function zl(e,t,r,n,i,a){$.call(this),void 0===e&&(e=new y(0,0,1)),void 0===t&&(t=new y(0,0,0)),void 0===r&&(r=1),void 0===n&&(n=16776960),void 0===i&&(i=.2*r),void 0===a&&(a=.2*i),void 0===Dl&&((Dl=new dt).addAttribute("position",new tt([0,0,0,0,1,0],3)),(Nl=new mo(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new Wi(Dl,new Fi({color:n})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Pt(Nl,new qe({color:n})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(r,i,a)}function Ul(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],r=new dt;r.addAttribute("position",new tt(t,3)),r.addAttribute("color",new tt([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var n=new Fi({vertexColors:2});Yi.call(this,r,n)}zl.prototype=Object.create($.prototype),zl.prototype.constructor=zl,zl.prototype.setDirection=function(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Bl.set(e.z,0,-e.x).normalize();var t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Bl,t)}},zl.prototype.setLength=function(e,t,r){void 0===t&&(t=.2*e),void 0===r&&(r=.2*t),this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(r,t,r),this.cone.position.y=e,this.cone.updateMatrix()},zl.prototype.setColor=function(e){this.line.material.color.set(e),this.cone.material.color.set(e)},zl.prototype.copy=function(e){return $.prototype.copy.call(this,e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this},zl.prototype.clone=function(){return(new this.constructor).copy(this)},Ul.prototype=Object.create(Yi.prototype),Ul.prototype.constructor=Ul;function Fl(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom",this.closed=!0}function Gl(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom"}function kl(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom"}as.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(as.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(Ts.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new zt,r=0,n=e.length;r<n;r++){var i=e[r];t.vertices.push(new y(i.x,i.y,i.z||0))}return t}}),Object.assign(Es.prototype,{fromPoints:function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),Fl.prototype=Object.create(ps.prototype),Gl.prototype=Object.create(ps.prototype),kl.prototype=Object.create(ps.prototype),Object.assign(kl.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),ml.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},sl.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Jo.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ks.extractUrlBase(e)}}),Jo.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(qs.prototype,{setTexturePath:function(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}),Object.assign(qc.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign(pe.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),Zc.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(p,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),p.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),p.ceilPowerOfTwo(e)}}),Object.assign(w.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(N.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new y).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,r,n,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,n,r,i,a)}}),Qt.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},m.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(Se.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(Ne.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}}),Object.assign(Ne,{barycoordFromPoint:function(e,t,r,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Ne.getBarycoord(e,t,r,n,i)},normal:function(e,t,r,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Ne.getNormal(e,t,r,n)}}),Object.assign(As.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Ka(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new lo(this,e)}}),Object.assign(f.prototype,{fromAttribute:function(e,t,r){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(y.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,r){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(T.prototype,{fromAttribute:function(e,t,r){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(zt.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign($.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties($.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Oi.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Bi.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Ii.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(as.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),Wt.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(Ls.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(Xe.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}}}),Object.assign(Xe.prototype,{copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(e){return console.warn("THREE.BufferAttribute: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers"),this.count=void 0!==e?e.length/this.itemSize:0,this.array=e,this}}),Object.assign(dt.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,r){void 0!==r&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(dt.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(pi.prototype,{setArray:function(e){return console.warn("THREE.InterleavedBuffer: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers"),this.count=void 0!==e?e.length/this.stride:0,this.array=e,this}}),Object.assign(Qa.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Uc.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(We.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Fe}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}}}),Object.defineProperties(To.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(jt.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(ui.prototype,{clearTarget:function(e,t,r,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,r,n)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(ui.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}}}),Object.defineProperties(Jn.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Xt.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}}),Object.defineProperties(E.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.defineProperties(ci.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),gc.prototype.load=function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new nc).load(e,(function(e){t.setBuffer(e)})),this},Mc.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},qt.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};var Hl={merge:function(e,t,r){var n;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),t.isMesh&&(t.matrixAutoUpdate&&t.updateMatrix(),n=t.matrix,t=t.geometry),e.merge(t,n,r)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}};_.crossOrigin=void 0,_.loadTexture=function(e,t,r,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new is;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},_.loadTextureCube=function(e,t,r,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new ns;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},_.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},_.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var jl={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"109"}})),l.ACESFilmicToneMapping=5,l.AddEquation=100,l.AddOperation=2,l.AdditiveBlending=2,l.AlphaFormat=1021,l.AlwaysDepth=1,l.AlwaysStencilFunc=519,l.AmbientLight=Us,l.AmbientLightProbe=sc,l.AnimationClip=Wo,l.AnimationLoader=$o,l.AnimationMixer=zc,l.AnimationObjectGroup=Nc,l.AnimationUtils=Oo,l.ArcCurve=ss,l.ArrayCamera=ni,l.ArrowHelper=zl,l.Audio=gc,l.AudioAnalyser=Mc,l.AudioContext=rc,l.AudioListener=vc,l.AudioLoader=nc,l.AxesHelper=Ul,l.AxisHelper=function(e){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Ul(e)},l.BackSide=1,l.BasicDepthPacking=3200,l.BasicShadowMap=0,l.BinaryTextureLoader=function(e){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new ts(e)},l.Bone=zi,l.BooleanKeyframeTrack=Uo,l.BoundingBoxHelper=function(e,t){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Cl(e,t)},l.Box2=qc,l.Box3=pe,l.Box3Helper=Ol,l.BoxBufferGeometry=Ft,l.BoxGeometry=Ut,l.BoxHelper=Cl,l.BufferAttribute=Xe,l.BufferGeometry=dt,l.BufferGeometryLoader=Vs,l.ByteType=1010,l.Cache=Xo,l.Camera=Vt,l.CameraHelper=Ll,l.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been removed")},l.CanvasTexture=aa,l.CatmullRomCurve3=ps,l.CineonToneMapping=4,l.CircleBufferGeometry=xo,l.CircleGeometry=yo,l.ClampToEdgeWrapping=1001,l.Clock=hc,l.ClosedSplineCurve3=Fl,l.Color=Fe,l.ColorKeyframeTrack=Fo,l.CompressedTexture=ia,l.CompressedTextureLoader=es,l.ConeBufferGeometry=go,l.ConeGeometry=vo,l.CubeCamera=qt,l.CubeGeometry=Ut,l.CubeReflectionMapping=301,l.CubeRefractionMapping=302,l.CubeTexture=br,l.CubeTextureLoader=ns,l.CubeUVReflectionMapping=306,l.CubeUVRefractionMapping=307,l.CubicBezierCurve=gs,l.CubicBezierCurve3=ys,l.CubicInterpolant=Do,l.CullFaceBack=1,l.CullFaceFront=2,l.CullFaceFrontBack=3,l.CullFaceNone=0,l.Curve=as,l.CurvePath=Ts,l.CustomBlending=5,l.CylinderBufferGeometry=mo,l.CylinderGeometry=fo,l.Cylindrical=Vc,l.DataTexture=Yt,l.DataTexture2DArray=wr,l.DataTexture3D=_r,l.DataTextureLoader=ts,l.DecrementStencilOp=7683,l.DecrementWrapStencilOp=34056,l.DefaultLoadingManager=Zo,l.DepthFormat=1026,l.DepthStencilFormat=1027,l.DepthTexture=oa,l.DirectionalLight=zs,l.DirectionalLightHelper=Tl,l.DirectionalLightShadow=Bs,l.DiscreteInterpolant=Bo,l.DodecahedronBufferGeometry=xa,l.DodecahedronGeometry=ya,l.DoubleSide=2,l.DstAlphaFactor=206,l.DstColorFactor=208,l.DynamicBufferAttribute=function(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new Xe(e,t).setDynamic(!0)},l.EdgesGeometry=po,l.EdgesHelper=function(e,t){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Yi(new po(e.geometry),new Fi({color:void 0!==t?t:16777215}))},l.EllipseCurve=os,l.EqualDepth=4,l.EqualStencilFunc=514,l.EquirectangularReflectionMapping=303,l.EquirectangularRefractionMapping=304,l.Euler=U,l.EventDispatcher=u,l.ExtrudeBufferGeometry=Qa,l.ExtrudeGeometry=Ka,l.Face3=je,l.Face4=function(e,t,r,n,i,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new je(e,t,r,i,a,o)},l.FaceColors=1,l.FaceNormalsHelper=wl,l.FileLoader=Qo,l.FlatShading=1,l.Float32Attribute=function(e,t){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new tt(e,t)},l.Float32BufferAttribute=tt,l.Float64Attribute=function(e,t){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new rt(e,t)},l.Float64BufferAttribute=rt,l.FloatType=1015,l.Fog=di,l.FogExp2=hi,l.Font=$s,l.FontLoader=tc,l.FrontFaceDirectionCCW=1,l.FrontFaceDirectionCW=0,l.FrontSide=0,l.Frustum=tr,l.GammaEncoding=3007,l.Geometry=zt,l.GeometryUtils=Hl,l.GreaterDepth=6,l.GreaterEqualDepth=5,l.GreaterEqualStencilFunc=518,l.GreaterStencilFunc=516,l.GridHelper=ml,l.Group=ri,l.HalfFloatType=1016,l.HemisphereLight=Rs,l.HemisphereLightHelper=pl,l.HemisphereLightProbe=oc,l.IcosahedronBufferGeometry=ga,l.IcosahedronGeometry=va,l.ImageBitmapLoader=Ks,l.ImageLoader=rs,l.ImageUtils=_,l.ImmediateRenderObject=Jc,l.IncrementStencilOp=7682,l.IncrementWrapStencilOp=34055,l.InstancedBufferAttribute=js,l.InstancedBufferGeometry=Hs,l.InstancedInterleavedBuffer=Fc,l.InstancedMesh=Ui,l.Int16Attribute=function(e,t){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Ke(e,t)},l.Int16BufferAttribute=Ke,l.Int32Attribute=function(e,t){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new $e(e,t)},l.Int32BufferAttribute=$e,l.Int8Attribute=function(e,t){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Ye(e,t)},l.Int8BufferAttribute=Ye,l.IntType=1013,l.InterleavedBuffer=pi,l.InterleavedBufferAttribute=fi,l.Interpolant=Io,l.InterpolateDiscrete=2300,l.InterpolateLinear=2301,l.InterpolateSmooth=2302,l.InvertStencilOp=5386,l.JSONLoader=function(){console.error("THREE.JSONLoader has been removed.")},l.KeepStencilOp=7680,l.KeyframeTrack=zo,l.LOD=Oi,l.LatheBufferGeometry=co,l.LatheGeometry=so,l.Layers=F,l.LensFlare=function(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")},l.LessDepth=2,l.LessEqualDepth=3,l.LessEqualStencilFunc=515,l.LessStencilFunc=513,l.Light=Ls,l.LightProbe=ac,l.LightProbeHelper=fl,l.LightShadow=Ps,l.Line=Wi,l.Line3=Zc,l.LineBasicMaterial=Fi,l.LineCurve=xs,l.LineCurve3=bs,l.LineDashedMaterial=Po,l.LineLoop=Zi,l.LinePieces=1,l.LineSegments=Yi,l.LineStrip=0,l.LinearEncoding=3e3,l.LinearFilter=1006,l.LinearInterpolant=No,l.LinearMipMapLinearFilter=1008,l.LinearMipMapNearestFilter=1007,l.LinearMipmapLinearFilter=1008,l.LinearMipmapNearestFilter=1007,l.LinearToneMapping=1,l.Loader=Jo,l.LoaderUtils=ks,l.LoadingManager=Yo,l.LogLuvEncoding=3003,l.LoopOnce=2200,l.LoopPingPong=2202,l.LoopRepeat=2201,l.LuminanceAlphaFormat=1025,l.LuminanceFormat=1024,l.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},l.Material=We,l.MaterialLoader=Gs,l.Math=p,l.Matrix3=w,l.Matrix4=N,l.MaxEquation=104,l.Mesh=Pt,l.MeshBasicMaterial=qe,l.MeshDepthMaterial=Yn,l.MeshDistanceMaterial=Zn,l.MeshFaceMaterial=function(e){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),e},l.MeshLambertMaterial=Lo,l.MeshMatcapMaterial=Ro,l.MeshNormalMaterial=Ao,l.MeshPhongMaterial=To,l.MeshPhysicalMaterial=So,l.MeshStandardMaterial=Mo,l.MeshToonMaterial=Eo,l.MinEquation=103,l.MirroredRepeatWrapping=1002,l.MixOperation=1,l.MultiMaterial=function(e){return void 0===e&&(e=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),e.isMultiMaterial=!0,e.materials=e,e.clone=function(){return e.slice()},e},l.MultiplyBlending=4,l.MultiplyOperation=0,l.NearestFilter=1003,l.NearestMipMapLinearFilter=1005,l.NearestMipMapNearestFilter=1004,l.NearestMipmapLinearFilter=1005,l.NearestMipmapNearestFilter=1004,l.NeverDepth=0,l.NeverStencilFunc=512,l.NoBlending=0,l.NoColors=0,l.NoToneMapping=0,l.NormalBlending=1,l.NotEqualDepth=7,l.NotEqualStencilFunc=517,l.NumberKeyframeTrack=Go,l.Object3D=$,l.ObjectLoader=qs,l.ObjectSpaceNormalMap=1,l.OctahedronBufferGeometry=ma,l.OctahedronGeometry=fa,l.OneFactor=201,l.OneMinusDstAlphaFactor=207,l.OneMinusDstColorFactor=209,l.OneMinusSrcAlphaFactor=205,l.OneMinusSrcColorFactor=203,l.OrthographicCamera=Ns,l.PCFShadowMap=1,l.PCFSoftShadowMap=2,l.ParametricBufferGeometry=la,l.ParametricGeometry=ca,l.Particle=function(e){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Li(e)},l.ParticleBasicMaterial=function(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.ParticleSystem=function(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new ta(e,t)},l.ParticleSystemMaterial=function(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.Path=Es,l.PerspectiveCamera=Wt,l.Plane=Qt,l.PlaneBufferGeometry=cr,l.PlaneGeometry=sr,l.PlaneHelper=Il,l.PointCloud=function(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new ta(e,t)},l.PointCloudMaterial=function(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.PointLight=Ds,l.PointLightHelper=cl,l.Points=ta,l.PointsMaterial=Ji,l.PolarGridHelper=vl,l.PolyhedronBufferGeometry=ha,l.PolyhedronGeometry=ua,l.PositionalAudio=_c,l.PositionalAudioHelper=gl,l.PropertyBinding=Dc,l.PropertyMixer=Sc,l.QuadraticBezierCurve=ws,l.QuadraticBezierCurve3=_s,l.Quaternion=m,l.QuaternionKeyframeTrack=Ho,l.QuaternionLinearInterpolant=ko,l.REVISION="109",l.RGBADepthPacking=3201,l.RGBAFormat=1023,l.RGBA_ASTC_10x10_Format=37819,l.RGBA_ASTC_10x5_Format=37816,l.RGBA_ASTC_10x6_Format=37817,l.RGBA_ASTC_10x8_Format=37818,l.RGBA_ASTC_12x10_Format=37820,l.RGBA_ASTC_12x12_Format=37821,l.RGBA_ASTC_4x4_Format=37808,l.RGBA_ASTC_5x4_Format=37809,l.RGBA_ASTC_5x5_Format=37810,l.RGBA_ASTC_6x5_Format=37811,l.RGBA_ASTC_6x6_Format=37812,l.RGBA_ASTC_8x5_Format=37813,l.RGBA_ASTC_8x6_Format=37814,l.RGBA_ASTC_8x8_Format=37815,l.RGBA_PVRTC_2BPPV1_Format=35843,l.RGBA_PVRTC_4BPPV1_Format=35842,l.RGBA_S3TC_DXT1_Format=33777,l.RGBA_S3TC_DXT3_Format=33778,l.RGBA_S3TC_DXT5_Format=33779,l.RGBDEncoding=3006,l.RGBEEncoding=3002,l.RGBEFormat=1023,l.RGBFormat=1022,l.RGBM16Encoding=3005,l.RGBM7Encoding=3004,l.RGB_ETC1_Format=36196,l.RGB_PVRTC_2BPPV1_Format=35841,l.RGB_PVRTC_4BPPV1_Format=35840,l.RGB_S3TC_DXT1_Format=33776,l.RawShaderMaterial=_o,l.Ray=Se,l.Raycaster=Gc,l.RectAreaLight=Fs,l.RectAreaLightHelper=ll,l.RedFormat=1028,l.ReinhardToneMapping=2,l.RepeatWrapping=1e3,l.ReplaceStencilOp=7681,l.ReverseSubtractEquation=102,l.RingBufferGeometry=oo,l.RingGeometry=ao,l.Scene=ee,l.SceneUtils=jl,l.ShaderChunk=rr,l.ShaderLib=ir,l.ShaderMaterial=jt,l.ShadowMaterial=wo,l.Shape=As,l.ShapeBufferGeometry=uo,l.ShapeGeometry=lo,l.ShapePath=Qs,l.ShapeUtils=Ya,l.ShortType=1011,l.Skeleton=Bi,l.SkeletonHelper=sl,l.SkinnedMesh=Ii,l.SmoothShading=2,l.Sphere=ve,l.SphereBufferGeometry=io,l.SphereGeometry=no,l.Spherical=jc,l.SphericalHarmonics3=ic,l.SphericalReflectionMapping=305,l.Spline=kl,l.SplineCurve=Ms,l.SplineCurve3=Gl,l.SpotLight=Os,l.SpotLightHelper=nl,l.SpotLightShadow=Cs,l.Sprite=Li,l.SpriteMaterial=mi,l.SrcAlphaFactor=204,l.SrcAlphaSaturateFactor=210,l.SrcColorFactor=202,l.StereoCamera=uc,l.StringKeyframeTrack=jo,l.SubtractEquation=101,l.SubtractiveBlending=3,l.TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},l.TangentSpaceNormalMap=0,l.TetrahedronBufferGeometry=pa,l.TetrahedronGeometry=da,l.TextBufferGeometry=ro,l.TextGeometry=to,l.Texture=S,l.TextureLoader=is,l.TorusBufferGeometry=Ta,l.TorusGeometry=Sa,l.TorusKnotBufferGeometry=Ma,l.TorusKnotGeometry=_a,l.Triangle=Ne,l.TriangleFanDrawMode=2,l.TriangleStripDrawMode=1,l.TrianglesDrawMode=0,l.TubeBufferGeometry=wa,l.TubeGeometry=ba,l.UVMapping=300,l.Uint16Attribute=function(e,t){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Qe(e,t)},l.Uint16BufferAttribute=Qe,l.Uint32Attribute=function(e,t){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new et(e,t)},l.Uint32BufferAttribute=et,l.Uint8Attribute=function(e,t){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Ze(e,t)},l.Uint8BufferAttribute=Ze,l.Uint8ClampedAttribute=function(e,t){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Je(e,t)},l.Uint8ClampedBufferAttribute=Je,l.Uncharted2ToneMapping=3,l.Uniform=Uc,l.UniformsLib=nr,l.UniformsUtils=Ht,l.UnsignedByteType=1009,l.UnsignedInt248Type=1020,l.UnsignedIntType=1014,l.UnsignedShort4444Type=1017,l.UnsignedShort5551Type=1018,l.UnsignedShort565Type=1019,l.UnsignedShortType=1012,l.VSMShadowMap=3,l.Vector2=f,l.Vector3=y,l.Vector4=T,l.VectorKeyframeTrack=Vo,l.Vertex=function(e,t,r){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new y(e,t,r)},l.VertexColors=2,l.VertexNormalsHelper=tl,l.VideoTexture=na,l.WebGLMultisampleRenderTarget=A,l.WebGLRenderTarget=E,l.WebGLRenderTargetCube=Xt,l.WebGLRenderer=ui,l.WebGLUtils=$n,l.WireframeGeometry=sa,l.WireframeHelper=function(e,t){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Yi(new sa(e.geometry),new Fi({color:void 0!==t?t:16777215}))},l.WrapAroundEnding=2402,l.XHRLoader=function(e){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Qo(e)},l.ZeroCurvatureEnding=2400,l.ZeroFactor=200,l.ZeroSlopeEnding=2401,l.ZeroStencilOp=0,l.sRGBEncoding=3001;var Vl=l,Wl=function(){return("undefined"==typeof performance?Date:performance).now()},ql=function(e,t){if(!cp.plane){var r=new Vl.PlaneGeometry(1e4,1e4);r.rotateX(-Math.PI/2);var n=new Vl.MeshBasicMaterial({transparent:!0,opacity:0,depthWrite:!1});cp.plane=new Vl.Mesh(r,n),cp.scene.add(cp.plane)}var i=new Vl.Vector3;cp.mouse.x=e/cp.width*2-1,cp.mouse.y=-t/cp.height*2+1,cp.raycaster.setFromCamera(cp.mouse,cp.camera);var a=cp.raycaster.intersectObjects([cp.plane]);return a.length&&i.copy(a[0].point),i};var Xl=function(e,t,r){var n=new Vl.Color(16777215);return n.r=e.r+(t.r-e.r)*r,n.g=e.g+(t.g-e.g)*r,n.b=e.b+(t.b-e.b)*r,n},Yl=function(e,t){return Math.floor(Math.random()*(t-e+1)+e)},Zl=function(e){for(var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=null!==e[0].index,n=new Set(Object.keys(e[0].attributes)),i=new Set(Object.keys(e[0].morphAttributes)),a={},o={},s=e[0].morphTargetsRelative,c=new Vl.BufferGeometry,l=0,u=0;u<e.length;++u){var h=e[u],d=0;if(r!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var p in h.attributes){if(!n.has(p))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+'. All geometries must have compatible attributes; make sure "'+p+'" attribute exists among all geometries, or in none of them.'),null;void 0===a[p]&&(a[p]=[]),a[p].push(h.attributes[p]),d++}if(d!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". Make sure all geometries have the same number of attributes."),null;if(s!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!i.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===o[f]&&(o[f]=[]),o[f].push(h.morphAttributes[f])}if(c.userData.mergedUserData=c.userData.mergedUserData||[],c.userData.mergedUserData.push(h.userData),t){var m=void 0;if(r)m=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+u+". The geometry must have either an index or a position attribute"),null;m=h.attributes.position.count}c.addGroup(l,m,u),l+=m}}if(r){for(var v=0,g=[],y=0;y<e.length;++y){for(var x=e[y].index,b=0;b<x.count;++b)g.push(x.getX(b)+v);v+=e[y].attributes.position.count}c.setIndex(g)}for(var w in a){var _=Jl(a[w]);if(!_)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+w+" attribute."),null;c.setAttribute(w,_)}for(var M in o){var S=o[M][0].length;if(0===S)break;c.morphAttributes=c.morphAttributes||{},c.morphAttributes[M]=[];for(var T=0;T<S;++T){for(var E=[],A=0;A<o[M].length;++A)E.push(o[M][A][T]);var L=Jl(E);if(!L)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+M+" morphAttribute."),null;c.morphAttributes[M].push(L)}}return c};function Jl(e){for(var t,r,n,i=0,a=0;a<e.length;++a){var o=e[a];if(o.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=o.array.constructor),t!==o.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===r&&(r=o.itemSize),r!==o.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===n&&(n=o.normalized),n!==o.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;i+=o.array.length}for(var s=new t(i),c=0,l=0;l<e.length;++l)s.set(e[l].array,c),c+=e[l].array.length;return new Vl.BufferAttribute(s,r,n)}var Kl=function(e){return e[Yl(0,e.length-1)]},Ql={},$l=0,eu=function(e,t,r,n,i){var a,o=0,s=Math.ceil(r/17),c=n.split(".");1==c.length?a=ru[c[0]]:2==c.length&&(a=ru[c[0]]&&ru[c[0]][c[1]]);return $l++,Ql[$l]=!0,function r(n){var c=a(o,e,t-e,s);if(o++,!Ql[n])return!1;o<=s?(i(c),function(e){if(window.requestAnimationFrame)return window.requestAnimationFrame(e);setTimeout((function(){e()}),60)}((function(){return r(n)}))):i(t,!0)}($l),$l},tu=function(e){Ql[e]&&delete Ql[e]},ru={Linear:function(e,t,r,n){return r*e/n+t},Quad:{easeIn:function(e,t,r,n){return r*(e/=n)*e+t},easeOut:function(e,t,r,n){return-r*(e/=n)*(e-2)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e+t:-r/2*(--e*(e-2)-1)+t}},Cubic:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e+t},easeOut:function(e,t,r,n){return r*((e=e/n-1)*e*e+1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e+t:r/2*((e-=2)*e*e+2)+t}},Quart:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e*e+t},easeOut:function(e,t,r,n){return-r*((e=e/n-1)*e*e*e-1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e*e+t:-r/2*((e-=2)*e*e*e-2)+t}},Quint:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e*e*e+t},easeOut:function(e,t,r,n){return r*((e=e/n-1)*e*e*e*e+1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e*e*e+t:r/2*((e-=2)*e*e*e*e+2)+t}},Sine:{easeIn:function(e,t,r,n){return-r*Math.cos(e/n*(Math.PI/2))+r+t},easeOut:function(e,t,r,n){return r*Math.sin(e/n*(Math.PI/2))+t},easeInOut:function(e,t,r,n){return-r/2*(Math.cos(Math.PI*e/n)-1)+t}},Expo:{easeIn:function(e,t,r,n){return 0==e?t:r*Math.pow(2,10*(e/n-1))+t},easeOut:function(e,t,r,n){return e==n?t+r:r*(1-Math.pow(2,-10*e/n))+t},easeInOut:function(e,t,r,n){return 0==e?t:e==n?t+r:(e/=n/2)<1?r/2*Math.pow(2,10*(e-1))+t:r/2*(2-Math.pow(2,-10*--e))+t}},Circ:{easeIn:function(e,t,r,n){return-r*(Math.sqrt(1-(e/=n)*e)-1)+t},easeOut:function(e,t,r,n){return r*Math.sqrt(1-(e=e/n-1)*e)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?-r/2*(Math.sqrt(1-e*e)-1)+t:r/2*(Math.sqrt(1-(e-=2)*e)+1)+t}},Elastic:{easeIn:function(e,t,r,n,i,a){var o;return 0==e?t:1==(e/=n)?t+r:(void 0===a&&(a=.3*n),!i||i<Math.abs(r)?(o=a/4,i=r):o=a/(2*Math.PI)*Math.asin(r/i),-i*Math.pow(2,10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)+t)},easeOut:function(e,t,r,n,i,a){var o;return 0==e?t:1==(e/=n)?t+r:(void 0===a&&(a=.3*n),!i||i<Math.abs(r)?(i=r,o=a/4):o=a/(2*Math.PI)*Math.asin(r/i),i*Math.pow(2,-10*e)*Math.sin((e*n-o)*(2*Math.PI)/a)+r+t)},easeInOut:function(e,t,r,n,i,a){var o;return 0==e?t:2==(e/=n/2)?t+r:(void 0===a&&(a=n*(.3*1.5)),!i||i<Math.abs(r)?(i=r,o=a/4):o=a/(2*Math.PI)*Math.asin(r/i),e<1?i*Math.pow(2,10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)*-.5+t:i*Math.pow(2,-10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)*.5+r+t)}},Back:{easeIn:function(e,t,r,n,i){return void 0===i&&(i=1.70158),r*(e/=n)*e*((i+1)*e-i)+t},easeOut:function(e,t,r,n,i){return void 0===i&&(i=1.70158),r*((e=e/n-1)*e*((i+1)*e+i)+1)+t},easeInOut:function(e,t,r,n,i){return void 0===i&&(i=1.70158),(e/=n/2)<1?r/2*(e*e*((1+(i*=1.525))*e-i))+t:r/2*((e-=2)*e*((1+(i*=1.525))*e+i)+2)+t}},Bounce:{easeIn:function(e,t,r,n){return r-ru.Bounce.easeOut(n-e,0,r,n)+t},easeOut:function(e,t,r,n){return(e/=n)<1/2.75?r*(7.5625*e*e)+t:e<2/2.75?r*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?r*(7.5625*(e-=2.25/2.75)*e+.9375)+t:r*(7.5625*(e-=2.625/2.75)*e+.984375)+t},easeInOut:function(e,t,r,n){return e<n/2?.5*ru.Bounce.easeIn(2*e,0,r,n)+t:.5*ru.Bounce.easeOut(2*e-n,0,r,n)+.5*r+t}}},nu=["touchstart","touchmove","touchend"],iu=function(){function e(){var t=this;i()(this,e),this.eventIds={},this.isTouch=!1,nu.forEach((function(e,r){document.addEventListener(e,(function(e){t[nu[r]](e)}))})),this.hands={};var r=new Vl.SphereGeometry(16,32,16),n=new Vl.MeshBasicMaterial({color:16777215,opacity:.9,depthWrite:!1,transparent:!0});this.meshPoint=new Vl.Mesh(r,n),this.meshPoint.name="eventMeshPoint"}return o()(e,[{key:"touchstart",value:function(e){var t=this;this.isTouch=!0;for(var r=0;r<e.touches.length;r++){var n=e.touches[r],i=this.intersect(n)[0];i?this.eventIds[i.object.uuid]=this.touchObjectData("touchstart",i,n):this.updateTouch(n)}if(cp.selectId){var a=!1;Object.keys(this.eventIds).forEach((function(e){var r=t.eventIds[e],n=r.data.obj;(cp.selectId==n.id||n.parent&&n.parent.id==cp.selectId)&&(a=!0),r.isUi&&(a=!0)})),a||(cp.selectedObjects=null)}this.dispatchEvent("touchstart",e)}},{key:"touchmove",value:function(e){if(!this.isTouch)return!1;for(var t=0;t<e.changedTouches.length;t++){var r=e.changedTouches[t];for(var n in this.eventIds){var i=this.eventIds[n];if(i.data.touche.identifier===r.identifier){(Math.abs(r.clientX-i.data.touche.clientX)>4||Math.abs(r.clientY-i.data.touche.clientY)>4)&&(i.isMove=!0),i.type="touchmove",i.data.touche=r;break}}}this.dispatchEvent("touchmove",e)}},{key:"touchend",value:function(e){for(var t=0;t<e.changedTouches.length;t++){var r=e.changedTouches[t];for(var n in this.eventIds){var i=this.eventIds[n];i.data.touche.identifier===r.identifier&&(i.isMove||(i.click=!0),i.type="touchend",i.data.touche=r)}}this.isTouch=!1,this.dispatchEvent("touchend",e)}},{key:"dispatchEvent",value:function(e,t){t.touches.length>=2?cp.controls[e](t):(this.dispatch(e,this.eventIds),this.stopEventPass?cp.controls.cannelScrollTo():cp.controls[e]({touches:[t.changedTouches[0],{pageX:t.changedTouches[0].pageX+1,pageY:t.changedTouches[0].pageY+1}]}))}},{key:"dispatch",value:function(e,t){var r=this,n=[],i=[],a=[],o=function(r){var o=t[r],s=o.data,c=s.obj.parent;o.type===e&&c[e]&&i.push({sort:c.zIndex,cb:function(){c[e](s.touche,s.point,s.uv)}}),o.click&&c.click&&a.push({sort:c.zIndex,cb:function(){c.click(s.touche,s.point,s.uv)}}),"touchend"===e&&n.push(r)};for(var s in t)o(s);i=i.sort((function(e,t){return t.sort-e.sort})),a=a.sort((function(e,t){return t.sort-e.sort})),this.stopEventPass=!1,i.forEach((function(e){r.stopEventPass||e.cb()})),a.forEach((function(e){r.stopEventPass||e.cb()})),n.forEach((function(e){return delete t[e]}))}},{key:"intersect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:cp.scene.children,r=[];return cp.mouse.x=e.pageX/cp.width*2-1,cp.mouse.y=-e.pageY/cp.height*2+1,cp.raycaster.setFromCamera(cp.mouse,cp.camera),t.forEach((function(e){e.isCustom&&e.children&&e.children.length&&r.push(e.children[0])})),cp.raycaster.intersectObjects(r)}},{key:"touchObjectData",value:function(e,t,r){return{type:e,isUi:t.object.parent.isUi,data:{touche:r,uv:t.uv,point:t.point,isMove:!1,obj:t.object}}}},{key:"updateTouch",value:function(e){var t=this,r=null;this.hands[e.identifier]?(r=this.hands[e.identifier].point,tu(this.hands[e.identifier].ani)):(r=this.meshPoint.clone(),cp.scene.add(r),this.hands[e.identifier]={point:r,ani:null});var n=cp.camera,i=1/cp.camera.zoom;r.position.copy(n.position),r.rotation.copy(n.rotation),r.scale.set(i,i,i),r.translateZ(-100),r.translateX(-(cp.width/2-e.pageX)*i),r.translateY((cp.height/2-e.pageY)*i),r.updateMatrix(),this.hands[e.identifier].ani=eu(.4,.88,300,"Quad.easeOut",(function(n,a){var o=i+i*n;r.scale.set(o,o,o),r.material.opacity=1-n,a&&(cp.scene.remove(r),t.hands[e.identifier]=null)}))}}]),e}(),au=r(3),ou=r.n(au),su=r(4),cu=r.n(su),lu=r(2),uu=r.n(lu);function hu(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var du=function(e){ou()(r,e);var t=hu(r);function r(){var e;return i()(this,r),(e=t.call(this,{antialias:!0,canvas:window.canvas})).autoClear=!1,e.physicallyCorrectLights=!0,e.outputEncoding=Vl.sRGBEncoding,e.toneMapping=Vl.ACESFilmicToneMapping,e.gammaOutput=!0,e.gammaFactor=2.2,e.shadowMap.enabled=!0,e.shadowMap.shadowMapEnabled=!0,e.shadowMap.shadowMapSoft=!0,e.shadowMap.type=Vl.PCFSoftShadowMap,e.setSize(window.innerWidth,window.innerHeight),e.setPixelRatio(window.devicePixelRatio),e}return o()(r)}(Vl.WebGLRenderer),pu=function(){function e(t){i()(this,e),this.camera=t,this.cameraPosition=new Vl.Vector3,this.startTime=0,this.endTime=0}return o()(e,[{key:"touchstart",value:function(e){var t=e.touches[0],r=e.touches[1];this.touches={x1:t.pageX,y1:t.pageY,x2:r.pageX,y2:r.pageY},this.startTime=Wl(),this.isMove=!1,this.cameraPosition.copy(this.camera.position),this.cannelScrollTo()}},{key:"touchmove",value:function(e){var t,r,n,i,a,o=Wl(),s=e.touches[0],c=e.touches[1],l={x1:s.pageX,y1:s.pageY,x2:c.pageX,y2:c.pageY};if(this.touchIsMove(l,this.touches)){var u=(t=this.touches.x1,r=this.touches.y1,n=l.x1,i=l.y1,a=ql(t,r),ql(n,i).sub(a));this.camera.position.x-=u.x,this.camera.position.z-=u.z,o-this.startTime<300&&(this.startTime=o)}else{var h=this.getDistance({x:l.x1,y:l.y1},{x:l.x2,y:l.y2})/this.getDistance({x:this.touches.x1,y:this.touches.y1},{x:this.touches.x2,y:this.touches.y2});h=1-h>0?.95*this.camera.zoom:this.camera.zoom/.95,this.camera.zoom=Math.max(2,Math.min(10,h)),this.camera.updateProjectionMatrix()}this.touches=l}},{key:"touchend",value:function(e,t){if(this.endTime=Wl(),this.isMove){var r=this.endTime-this.startTime,n=this.camera.position.x-this.cameraPosition.x,i=this.camera.position.z-this.cameraPosition.z,a=Math.abs(n)/r,o=Math.abs(i)/r,s=this.camera.position.x+a/.2*(n<0?-1:1),c=this.camera.position.z+o/.2*(i<0?-1:1);this.scrollTo(s,c)}}},{key:"getDistance",value:function(e,t){return Math.hypot(t.x-e.x,t.y-e.y)}},{key:"touchIsMove",value:function(e,t){var r=e.x1-t.x1,n=e.x2-t.x2,i=e.y1-t.y1,a=e.y2-t.y2;return r>0&&n>0||r<0&&n<0||i>0&&a>0||i<0&&a<0}},{key:"scrollTo",value:function(e,t){var r=this,n=this.camera.position.x,i=this.camera.position.z,a=e-n,o=t-i;this.scroller=eu(0,1,500,"Quad.easeOut",(function(e){r.camera.position.x=n+e*a,r.camera.position.z=i+e*o}))}},{key:"cannelScrollTo",value:function(){this.scroller&&(tu(this.scroller),this.scroller=null)}}]),e}(),fu={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}"},mu=Vl.BufferGeometry,vu=Vl.Float32BufferAttribute,gu=Vl.OrthographicCamera,yu=Vl.Mesh,xu=function(){function e(){i()(this,e),this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}return o()(e,[{key:"setSize",value:function(){}},{key:"render",value:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}]),e}(),bu=new gu(-1,1,1,-1,0,1),wu=new mu;wu.setAttribute("position",new vu([-1,3,0,-1,-1,0,3,-1,0],3)),wu.setAttribute("uv",new vu([0,2,0,0,2,0],2));var _u=function(){function e(t){i()(this,e),this._mesh=new yu(wu,t)}return o()(e,[{key:"dispose",value:function(){this._mesh.geometry.dispose()}},{key:"render",value:function(e){e.render(this._mesh,bu)}},{key:"material",get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}}]),e}();function Mu(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Su=Vl.ShaderMaterial,Tu=Vl.UniformsUtils,Eu=function(e){ou()(r,e);var t=Mu(r);function r(e,n){var a;return i()(this,r),(a=t.call(this)).textureID=void 0!==n?n:"tDiffuse",e instanceof Su?(a.uniforms=e.uniforms,a.material=e):e&&(a.uniforms=Tu.clone(e.uniforms),a.material=new Su({defines:Object.assign({},e.defines),uniforms:a.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),a.fsQuad=new _u(a.material),a}return o()(r,[{key:"render",value:function(e,t,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}}]),r}(xu);function Au(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Lu=function(e){ou()(r,e);var t=Au(r);function r(e,n){var a;return i()(this,r),(a=t.call(this)).scene=e,a.camera=n,a.clear=!0,a.needsSwap=!1,a.inverse=!1,a}return o()(r,[{key:"render",value:function(e,t,r){var n,i,a=e.getContext(),o=e.state;o.buffers.color.setMask(!1),o.buffers.depth.setMask(!1),o.buffers.color.setLocked(!0),o.buffers.depth.setLocked(!0),this.inverse?(n=0,i=1):(n=1,i=0),o.buffers.stencil.setTest(!0),o.buffers.stencil.setOp(a.REPLACE,a.REPLACE,a.REPLACE),o.buffers.stencil.setFunc(a.ALWAYS,n,4294967295),o.buffers.stencil.setClear(i),o.buffers.stencil.setLocked(!0),e.setRenderTarget(r),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),o.buffers.color.setLocked(!1),o.buffers.depth.setLocked(!1),o.buffers.stencil.setLocked(!1),o.buffers.stencil.setFunc(a.EQUAL,1,4294967295),o.buffers.stencil.setOp(a.KEEP,a.KEEP,a.KEEP),o.buffers.stencil.setLocked(!0)}}]),r}(xu),Ru=function(e){ou()(r,e);var t=Au(r);function r(){var e;return i()(this,r),(e=t.call(this)).needsSwap=!1,e}return o()(r,[{key:"render",value:function(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}]),r}(xu),Pu=Vl.BufferGeometry,Cu=Vl.Clock,Ou=Vl.Float32BufferAttribute,Iu=Vl.LinearFilter,Du=(Vl.Mesh,Vl.OrthographicCamera),Nu=Vl.RGBAFormat,Bu=Vl.Vector2,zu=Vl.WebGLRenderTarget,Uu=function(){function e(t,r){if(i()(this,e),this.renderer=t,void 0===r){var n={minFilter:Iu,magFilter:Iu,format:Nu},a=t.getSize(new Bu);this._pixelRatio=t.getPixelRatio(),this._width=a.width,this._height=a.height,(r=new zu(this._width*this._pixelRatio,this._height*this._pixelRatio,n)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=r.width,this._height=r.height;this.renderTarget1=r,this.renderTarget2=r.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===fu&&console.error("THREE.EffectComposer relies on CopyShader"),void 0===Eu&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new Eu(fu),this.clock=new Cu}return o()(e,[{key:"swapBuffers",value:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}},{key:"addPass",value:function(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}},{key:"insertPass",value:function(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}},{key:"removePass",value:function(e){var t=this.passes.indexOf(e);-1!==t&&this.passes.splice(t,1)}},{key:"isLastEnabledPass",value:function(e){for(var t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}},{key:"render",value:function(e){void 0===e&&(e=this.clock.getDelta());for(var t=this.renderer.getRenderTarget(),r=!1,n=0,i=this.passes.length;n<i;n++){var a=this.passes[n];if(!1!==a.enabled){if(a.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(n),a.render(this.renderer,this.writeBuffer,this.readBuffer,e,r),a.needsSwap){if(r){var o=this.renderer.getContext(),s=this.renderer.state.buffers.stencil;s.setFunc(o.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),s.setFunc(o.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==Lu&&(a instanceof Lu?r=!0:a instanceof Ru&&(r=!1))}}this.renderer.setRenderTarget(t)}},{key:"reset",value:function(e){if(void 0===e){var t=this.renderer.getSize(new Bu);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,(e=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}},{key:"setSize",value:function(e,t){this._width=e,this._height=t;var r=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget1.setSize(r,n),this.renderTarget2.setSize(r,n);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(r,n)}},{key:"setPixelRatio",value:function(e){this._pixelRatio=e,this.setSize(this._width,this._height)}}]),e}(),Fu=(new Du(-1,1,1,-1,0,1),new Pu);Fu.setAttribute("position",new Ou([-1,3,0,-1,-1,0,3,-1,0],3)),Fu.setAttribute("uv",new Ou([0,2,0,0,2,0],2));function Gu(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var ku=Vl.AdditiveBlending,Hu=Vl.Color,ju=Vl.DoubleSide,Vu=Vl.LinearFilter,Wu=Vl.Matrix4,qu=Vl.MeshBasicMaterial,Xu=Vl.MeshDepthMaterial,Yu=Vl.NoBlending,Zu=Vl.RGBADepthPacking,Ju=Vl.RGBAFormat,Ku=Vl.ShaderMaterial,Qu=Vl.UniformsUtils,$u=Vl.Vector2,eh=Vl.Vector3,th=Vl.WebGLRenderTarget,rh=function(e){ou()(r,e);var t=Gu(r);function r(e,n,a,o){var s;i()(this,r),(s=t.call(this)).renderScene=n,s.renderCamera=a,s.selectedObjects=void 0!==o?o:[],s.visibleEdgeColor=new Hu(1,1,1),s.hiddenEdgeColor=new Hu(.1,.04,.02),s.edgeGlow=0,s.usePatternTexture=!1,s.edgeThickness=1,s.edgeStrength=3,s.downSampleRatio=2,s.pulsePeriod=0,s._visibilityCache=new Map,s.resolution=void 0!==e?new $u(e.x,e.y):new $u(256,256);var c={minFilter:Vu,magFilter:Vu,format:Ju},l=Math.round(s.resolution.x/s.downSampleRatio),u=Math.round(s.resolution.y/s.downSampleRatio);s.maskBufferMaterial=new qu({color:16777215}),s.maskBufferMaterial.side=ju,s.renderTargetMaskBuffer=new th(s.resolution.x,s.resolution.y,c),s.renderTargetMaskBuffer.texture.name="OutlinePass.mask",s.renderTargetMaskBuffer.texture.generateMipmaps=!1,s.depthMaterial=new Xu,s.depthMaterial.side=ju,s.depthMaterial.depthPacking=Zu,s.depthMaterial.blending=Yu,s.prepareMaskMaterial=s.getPrepareMaskMaterial(),s.prepareMaskMaterial.side=ju,s.prepareMaskMaterial.fragmentShader=function(e,t){var r=t.isPerspectiveCamera?"perspective":"orthographic";return e.replace(/DEPTH_TO_VIEW_Z/g,r+"DepthToViewZ")}(s.prepareMaskMaterial.fragmentShader,s.renderCamera),s.renderTargetDepthBuffer=new th(s.resolution.x,s.resolution.y,c),s.renderTargetDepthBuffer.texture.name="OutlinePass.depth",s.renderTargetDepthBuffer.texture.generateMipmaps=!1,s.renderTargetMaskDownSampleBuffer=new th(l,u,c),s.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",s.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,s.renderTargetBlurBuffer1=new th(l,u,c),s.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",s.renderTargetBlurBuffer1.texture.generateMipmaps=!1,s.renderTargetBlurBuffer2=new th(Math.round(l/2),Math.round(u/2),c),s.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",s.renderTargetBlurBuffer2.texture.generateMipmaps=!1,s.edgeDetectionMaterial=s.getEdgeDetectionMaterial(),s.renderTargetEdgeBuffer1=new th(l,u,c),s.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",s.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,s.renderTargetEdgeBuffer2=new th(Math.round(l/2),Math.round(u/2),c),s.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",s.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;s.separableBlurMaterial1=s.getSeperableBlurMaterial(4),s.separableBlurMaterial1.uniforms.texSize.value.set(l,u),s.separableBlurMaterial1.uniforms.kernelRadius.value=1,s.separableBlurMaterial2=s.getSeperableBlurMaterial(4),s.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(l/2),Math.round(u/2)),s.separableBlurMaterial2.uniforms.kernelRadius.value=4,s.overlayMaterial=s.getOverlayMaterial(),void 0===fu&&console.error("THREE.OutlinePass relies on CopyShader");var h=fu;return s.copyUniforms=Qu.clone(h.uniforms),s.copyUniforms.opacity.value=1,s.materialCopy=new Ku({uniforms:s.copyUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,blending:Yu,depthTest:!1,depthWrite:!1,transparent:!0}),s.enabled=!0,s.needsSwap=!1,s._oldClearColor=new Hu,s.oldClearAlpha=1,s.fsQuad=new _u(null),s.tempPulseColor1=new Hu,s.tempPulseColor2=new Hu,s.textureMatrix=new Wu,s}return o()(r,[{key:"dispose",value:function(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose()}},{key:"setSize",value:function(e,t){this.renderTargetMaskBuffer.setSize(e,t),this.renderTargetDepthBuffer.setSize(e,t);var r=Math.round(e/this.downSampleRatio),n=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(r,n),this.renderTargetBlurBuffer1.setSize(r,n),this.renderTargetEdgeBuffer1.setSize(r,n),this.separableBlurMaterial1.uniforms.texSize.value.set(r,n),r=Math.round(r/2),n=Math.round(n/2),this.renderTargetBlurBuffer2.setSize(r,n),this.renderTargetEdgeBuffer2.setSize(r,n),this.separableBlurMaterial2.uniforms.texSize.value.set(r,n)}},{key:"changeVisibilityOfSelectedObjects",value:function(e){var t=this._visibilityCache;function r(r){r.isMesh&&(!0===e?r.visible=t.get(r):(t.set(r,r.visible),r.visible=e))}for(var n=0;n<this.selectedObjects.length;n++){this.selectedObjects[n].traverse(r)}}},{key:"changeVisibilityOfNonSelectedObjects",value:function(e){var t=this._visibilityCache,r=[];function n(e){e.isMesh&&r.push(e)}for(var i=0;i<this.selectedObjects.length;i++){this.selectedObjects[i].traverse(n)}this.renderScene.traverse((function(n){if(n.isMesh||n.isSprite){for(var i=!1,a=0;a<r.length;a++){if(r[a].id===n.id){i=!0;break}}if(!1===i){var o=n.visible;!1!==e&&!0!==t.get(n)||(n.visible=e),t.set(n,o)}}else(n.isPoints||n.isLine)&&(!0===e?n.visible=t.get(n):(t.set(n,n.visible),n.visible=e))}))}},{key:"updateTextureMatrix",value:function(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}},{key:"render",value:function(e,t,n,i,a){if(this.selectedObjects.length>0){e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();var o=e.autoClear;e.autoClear=!1,a&&e.state.buffers.stencil.setTest(!1),e.setClearColor(16777215,1),this.changeVisibilityOfSelectedObjects(!1);var s=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,e.setRenderTarget(this.renderTargetDepthBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this._visibilityCache.clear(),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=null,this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),this.renderScene.background=s,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),this.fsQuad.render(e),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){var c=.625+.75*Math.cos(.01*performance.now()/this.pulsePeriod)/2;this.tempPulseColor1.multiplyScalar(c),this.tempPulseColor2.multiplyScalar(c)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=r.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=r.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=r.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=r.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,a&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(n),this.fsQuad.render(e),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=o}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=n.texture,e.setRenderTarget(null),this.fsQuad.render(e))}},{key:"getPrepareMaskMaterial",value:function(){return new Ku({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new $u(.5,.5)},textureMatrix:{value:null}},vertexShader:"#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}",fragmentShader:"#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}"})}},{key:"getEdgeDetectionMaterial",value:function(){return new Ku({uniforms:{maskTexture:{value:null},texSize:{value:new $u(.5,.5)},visibleEdgeColor:{value:new eh(1,1,1)},hiddenEdgeColor:{value:new eh(1,1,1)}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}"})}},{key:"getSeperableBlurMaterial",value:function(e){return new Ku({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new $u(.5,.5)},direction:{value:new $u(.5,.5)},kernelRadius:{value:1}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}"})}},{key:"getOverlayMaterial",value:function(){return new Ku({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}",blending:ku,depthTest:!1,depthWrite:!1,transparent:!0})}}]),r}(xu);function nh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}rh.BlurDirectionX=new $u(1,0),rh.BlurDirectionY=new $u(0,1);var ih=Vl.Color,ah=function(e){ou()(r,e);var t=nh(r);function r(e,n,a,o,s){var c;return i()(this,r),(c=t.call(this)).scene=e,c.camera=n,c.overrideMaterial=a,c.clearColor=o,c.clearAlpha=void 0!==s?s:0,c.clear=!0,c.clearDepth=!1,c.needsSwap=!1,c._oldClearColor=new ih,c}return o()(r,[{key:"render",value:function(e,t,r){var n,i,a=e.autoClear;e.autoClear=!1,void 0!==this.overrideMaterial&&(i=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),n=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:r),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,n),void 0!==this.overrideMaterial&&(this.scene.overrideMaterial=i),e.autoClear=a}}]),r}(xu),oh=function(){function e(t){i()(this,e),this.colors=[new Vl.Color(14933453),new Vl.Color(12503750),new Vl.Color(14672563),new Vl.Color(14272155),new Vl.Color(4340531)],this.time=0,this.scene=new Vl.Scene,this.camera=new Vl.OrthographicCamera(t.width/-2,t.width/2,t.height/2,t.height/-2,1,400),this.scene.background=this.colors[0],this.topColor=this.colors[0],this.bottomColor=this.colors[0],this.colorIndex=0,this.colorCommon=new Vl.Color(16777215),this.renderer=t.renderer,this.ambientLight=t.ambientLight}return o()(e,[{key:"render",value:function(){this.time=Math.min(1,this.time+.02),1!==this.time&&(this.scene.background=Xl(this.topColor,this.bottomColor,this.time),this.colorIndex===this.colors.length-1?this.ambientLight.color=Xl(this.topColor,this.colorCommon,this.time):this.ambientLight.color=this.scene.background),this.renderer.render(this.scene,this.camera)}},{key:"switch",value:function(){var e=this.colors,t=e.indexOf(this.bottomColor),r=t+1;t>e.length-1&&(t=0),r>e.length-1&&(r=0),this.topColor=Xl(this.topColor,this.bottomColor,this.time),this.bottomColor=e[r],this.colorIndex=r,this.time=0}}]),e}(),sh=function(){function e(t){i()(this,e),this.chaos=t,this.scene=t.scene,this.camera=t.camera,this.composer=new Uu(t.renderer),this.outlinePass=new rh(new Vl.Vector2(t.width,t.height),t.scene,t.camera),this.renderScene=new ah(t.scene,t.camera),this.composer.addPass(this.renderScene),this.composer.addPass(this.outlinePass),this.customOutline()}return o()(e,[{key:"customOutline",value:function(){var e=new Vl.Color(16777215);e.convertSRGBToLinear(),this.outlinePass.edgeStrength=4,this.outlinePass.edgeGlow=.5,this.outlinePass.edgeThickness=1,this.outlinePass.visibleEdgeColor.set(e),this.outlinePass.hiddenEdgeColor.set(e)}},{key:"render",value:function(){this.composer.render()}}]),e}(),ch=r(6),lh=r.n(ch);function uh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var hh=Vl.BufferGeometry,dh=Vl.FileLoader,ph=Vl.Float32BufferAttribute,fh=Vl.Group,mh=Vl.LineBasicMaterial,vh=Vl.LineSegments,gh=Vl.Loader,yh=Vl.Material,xh=Vl.Mesh,bh=Vl.MeshPhongMaterial,wh=Vl.Points,_h=Vl.PointsMaterial,Mh=Vl.Vector3,Sh=/^[og]\s*(.+)?/,Th=/^mtllib /,Eh=/^usemtl /,Ah=/^usemap /,Lh=new Mh,Rh=new Mh,Ph=new Mh,Ch=new Mh,Oh=new Mh;function Ih(){var e={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],colors:[],uvs:[],hasUVIndices:!1},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var n={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var n=r.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var n=this.vertices,i=this.object.geometry.vertices;i.push(n[e+0],n[e+1],n[e+2]),i.push(n[t+0],n[t+1],n[t+2]),i.push(n[r+0],n[r+1],n[r+2])},addVertexPoint:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addVertexLine:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addNormal:function(e,t,r){var n=this.normals,i=this.object.geometry.normals;i.push(n[e+0],n[e+1],n[e+2]),i.push(n[t+0],n[t+1],n[t+2]),i.push(n[r+0],n[r+1],n[r+2])},addFaceNormal:function(e,t,r){var n=this.vertices,i=this.object.geometry.normals;Lh.fromArray(n,e),Rh.fromArray(n,t),Ph.fromArray(n,r),Oh.subVectors(Ph,Rh),Ch.subVectors(Lh,Rh),Oh.cross(Ch),Oh.normalize(),i.push(Oh.x,Oh.y,Oh.z),i.push(Oh.x,Oh.y,Oh.z),i.push(Oh.x,Oh.y,Oh.z)},addColor:function(e,t,r){var n=this.colors,i=this.object.geometry.colors;void 0!==n[e]&&i.push(n[e+0],n[e+1],n[e+2]),void 0!==n[t]&&i.push(n[t+0],n[t+1],n[t+2]),void 0!==n[r]&&i.push(n[r+0],n[r+1],n[r+2])},addUV:function(e,t,r){var n=this.uvs,i=this.object.geometry.uvs;i.push(n[e+0],n[e+1]),i.push(n[t+0],n[t+1]),i.push(n[r+0],n[r+1])},addDefaultUV:function(){var e=this.object.geometry.uvs;e.push(0,0),e.push(0,0),e.push(0,0)},addUVLine:function(e){var t=this.uvs;this.object.geometry.uvs.push(t[e+0],t[e+1])},addFace:function(e,t,r,n,i,a,o,s,c){var l=this.vertices.length,u=this.parseVertexIndex(e,l),h=this.parseVertexIndex(t,l),d=this.parseVertexIndex(r,l);if(this.addVertex(u,h,d),this.addColor(u,h,d),void 0!==o&&""!==o){var p=this.normals.length;u=this.parseNormalIndex(o,p),h=this.parseNormalIndex(s,p),d=this.parseNormalIndex(c,p),this.addNormal(u,h,d)}else this.addFaceNormal(u,h,d);if(void 0!==n&&""!==n){var f=this.uvs.length;u=this.parseUVIndex(n,f),h=this.parseUVIndex(i,f),d=this.parseUVIndex(a,f),this.addUV(u,h,d),this.object.geometry.hasUVIndices=!0}else this.addDefaultUV()},addPointGeometry:function(e){this.object.geometry.type="Points";for(var t=this.vertices.length,r=0,n=e.length;r<n;r++){var i=this.parseVertexIndex(e[r],t);this.addVertexPoint(i),this.addColor(i)}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,n=this.uvs.length,i=0,a=e.length;i<a;i++)this.addVertexLine(this.parseVertexIndex(e[i],r));for(var o=0,s=t.length;o<s;o++)this.addUVLine(this.parseUVIndex(t[o],n))}};return e.startObject("",!1),e}var Dh=function(e){ou()(r,e);var t=uh(r);function r(e){var n;return i()(this,r),(n=t.call(this,e)).materials=null,n}return o()(r,[{key:"load",value:function(e,t,r,n){var i=this,a=new dh(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,(function(r){try{t(i.parse(r))}catch(t){n?n(t):console.error(t),i.manager.itemError(e)}}),r,n)}},{key:"setMaterials",value:function(e){return this.materials=e,this}},{key:"parse",value:function(e){var t=new Ih;-1!==e.indexOf("\r\n")&&(e=e.replace(/\r\n/g,"\n")),-1!==e.indexOf("\\\n")&&(e=e.replace(/\\\n/g,""));for(var r=e.split("\n"),n="",i="",a=[],o="function"==typeof"".trimLeft,s=0,c=r.length;s<c;s++)if(n=r[s],0!==(n=o?n.trimLeft():n.trim()).length&&"#"!==(i=n.charAt(0)))if("v"===i){var l=n.split(/\s+/);switch(l[0]){case"v":t.vertices.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3])),l.length>=7?t.colors.push(parseFloat(l[4]),parseFloat(l[5]),parseFloat(l[6])):t.colors.push(void 0,void 0,void 0);break;case"vn":t.normals.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3]));break;case"vt":t.uvs.push(parseFloat(l[1]),parseFloat(l[2]))}}else if("f"===i){for(var u=n.substr(1).trim().split(/\s+/),h=[],d=0,p=u.length;d<p;d++){var f=u[d];if(f.length>0){var m=f.split("/");h.push(m)}}for(var v=h[0],g=1,y=h.length-1;g<y;g++){var x=h[g],b=h[g+1];t.addFace(v[0],x[0],b[0],v[1],x[1],b[1],v[2],x[2],b[2])}}else if("l"===i){var w=n.substring(1).trim().split(" "),_=[],M=[];if(-1===n.indexOf("/"))_=w;else for(var S=0,T=w.length;S<T;S++){var E=w[S].split("/");""!==E[0]&&_.push(E[0]),""!==E[1]&&M.push(E[1])}t.addLineGeometry(_,M)}else if("p"===i){var A=n.substr(1).trim().split(" ");t.addPointGeometry(A)}else if(null!==(a=Sh.exec(n))){var L=(" "+a[0].substr(1).trim()).substr(1);t.startObject(L)}else if(Eh.test(n))t.object.startMaterial(n.substring(7).trim(),t.materialLibraries);else if(Th.test(n))t.materialLibraries.push(n.substring(7).trim());else if(Ah.test(n))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===i){if((a=n.split(" ")).length>1){var R=a[1].trim().toLowerCase();t.object.smooth="0"!==R&&"off"!==R}else t.object.smooth=!0;var P=t.object.currentMaterial();P&&(P.smooth=t.object.smooth)}else{if("\0"===n)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+n+'"')}t.finalize();var C=new fh;if(C.materialLibraries=[].concat(t.materialLibraries),!0===!(1===t.objects.length&&0===t.objects[0].geometry.vertices.length))for(var O=0,I=t.objects.length;O<I;O++){var D=t.objects[O],N=D.geometry,B=D.materials,z="Line"===N.type,U="Points"===N.type,F=!1;if(0!==N.vertices.length){var G=new hh;G.setAttribute("position",new ph(N.vertices,3)),N.normals.length>0&&G.setAttribute("normal",new ph(N.normals,3)),N.colors.length>0&&(F=!0,G.setAttribute("color",new ph(N.colors,3))),!0===N.hasUVIndices&&G.setAttribute("uv",new ph(N.uvs,2));for(var k=[],H=0,j=B.length;H<j;H++){var V=B[H],W=V.name+"_"+V.smooth+"_"+F,q=t.materials[W];if(null!==this.materials)if(q=this.materials.create(V.name),!z||!q||q instanceof mh){if(U&&q&&!(q instanceof _h)){var X=new _h({size:10,sizeAttenuation:!1});yh.prototype.copy.call(X,q),X.color.copy(q.color),X.map=q.map,q=X}}else{var Y=new mh;yh.prototype.copy.call(Y,q),Y.color.copy(q.color),q=Y}void 0===q&&((q=z?new mh:U?new _h({size:1,sizeAttenuation:!1}):new bh).name=V.name,q.flatShading=!V.smooth,q.vertexColors=F,t.materials[W]=q),k.push(q)}var Z=void 0;if(k.length>1){for(var J=0,K=B.length;J<K;J++){var Q=B[J];G.addGroup(Q.groupStart,Q.groupCount,J)}Z=z?new vh(G,k):U?new wh(G,k):new xh(G,k)}else Z=z?new vh(G,k[0]):U?new wh(G,k[0]):new xh(G,k[0]);Z.name=D.name,C.add(Z)}}else if(t.vertices.length>0){var $=new _h({size:1,sizeAttenuation:!1}),ee=new hh;ee.setAttribute("position",new ph(t.vertices,3)),t.colors.length>0&&void 0!==t.colors[0]&&(ee.setAttribute("color",new ph(t.colors,3)),$.vertexColors=!0);var te=new wh(ee,$);C.add(te)}return C}}]),r}(gh),Nh=Vl.AnimationClip,Bh=Vl.Bone,zh=Vl.BufferAttribute,Uh=Vl.BufferGeometry,Fh=Vl.ClampToEdgeWrapping,Gh=Vl.Color,kh=Vl.DirectionalLight,Hh=Vl.DoubleSide,jh=Vl.FileLoader,Vh=Vl.FrontSide,Wh=Vl.Group,qh=Vl.InterleavedBuffer,Xh=Vl.InterleavedBufferAttribute,Yh=Vl.Interpolant,Zh=Vl.InterpolateDiscrete,Jh=Vl.InterpolateLinear,Kh=Vl.Line,Qh=Vl.LineBasicMaterial,$h=Vl.LineLoop,ed=Vl.LineSegments,td=Vl.LinearFilter,rd=Vl.LinearMipmapLinearFilter,nd=Vl.LinearMipmapNearestFilter,id=Vl.Loader,ad=Vl.LoaderUtils,od=Vl.Material,sd=Vl.Math,cd=Vl.Matrix4,ld=Vl.Mesh,ud=Vl.MeshBasicMaterial,hd=Vl.MeshStandardMaterial,dd=Vl.MirroredRepeatWrapping,pd=Vl.NearestFilter,fd=Vl.NearestMipmapLinearFilter,md=Vl.NearestMipmapNearestFilter,vd=Vl.NumberKeyframeTrack,gd=Vl.Object3D,yd=Vl.OrthographicCamera,xd=Vl.PerspectiveCamera,bd=Vl.PointLight,wd=Vl.Points,_d=Vl.PointsMaterial,Md=Vl.PropertyBinding,Sd=Vl.QuaternionKeyframeTrack,Td=Vl.RGBAFormat,Ed=Vl.RGBFormat,Ad=Vl.RepeatWrapping,Ld=Vl.Scene,Rd=Vl.ShaderLib,Pd=Vl.ShaderMaterial,Cd=Vl.Skeleton,Od=Vl.SkinnedMesh,Id=Vl.SpotLight,Dd=Vl.TextureLoader,Nd=Vl.TriangleFanDrawMode,Bd=Vl.TriangleStripDrawMode,zd=Vl.UniformsUtils,Ud=Vl.Vector2,Fd=Vl.VectorKeyframeTrack,Gd=Vl.VertexColors,kd=Vl.sRGBEncoding,Hd=function(){function e(e){id.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(id.prototype),{constructor:e,load:function(e,t,r,n){var i,a=this;i=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:ad.extractUrlBase(e),a.manager.itemStart(e);var o=function(t){n?n(t):console.error(t),a.manager.itemError(e),a.manager.itemEnd(e)},s=new jh(a.manager);s.setPath(this.path),s.setResponseType("arraybuffer"),"use-credentials"===a.crossOrigin&&s.setWithCredentials(!0),s.load(e,(function(r){try{a.parse(r,i,(function(r){t(r),a.manager.itemEnd(e)}),o)}catch(e){o(e)}}),r,o)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,s,c){var l,f={};if("string"==typeof e)l=e;else if(ad.decodeText(new Uint8Array(e,0,4))===o){try{f[r.KHR_BINARY_GLTF]=new u(e)}catch(e){return void(c&&c(e))}l=f[r.KHR_BINARY_GLTF].content}else l=ad.decodeText(new Uint8Array(e));var m=JSON.parse(l);if(void 0===m.asset||m.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead."));else{if(m.extensionsUsed)for(var v=0;v<m.extensionsUsed.length;++v){var g=m.extensionsUsed[v],y=m.extensionsRequired||[];switch(g){case r.KHR_LIGHTS_PUNCTUAL:f[g]=new i(m);break;case r.KHR_MATERIALS_UNLIT:f[g]=new a;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:f[g]=new p;break;case r.KHR_DRACO_MESH_COMPRESSION:f[g]=new h(m,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:f[r.MSFT_TEXTURE_DDS]=new n(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:f[r.KHR_TEXTURE_TRANSFORM]=new d;break;default:y.indexOf(g)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+g+'".')}}new G(m,f,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(s,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function n(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function a(){this.name=r.KHR_MATERIALS_UNLIT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],n=new Gh(16777215);void 0!==r.color&&n.fromArray(r.color);var i=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new kh(n)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new bd(n)).distance=i;break;case"spot":(t=new Id(n)).distance=i,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:sd.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},a.prototype.getMaterialType=function(){return ud},a.prototype.extendParams=function(e,t,r){var n=[];e.color=new Gh(1,1,1),e.opacity=1;var i=t.pbrMetallicRoughness;if(i){if(Array.isArray(i.baseColorFactor)){var a=i.baseColorFactor;e.color.fromArray(a),e.opacity=a[3]}void 0!==i.baseColorTexture&&n.push(r.assignTexture(e,"map",i.baseColorTexture))}return Promise.all(n)};var o="glTF",s=1313821514,l=5130562;function u(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:ad.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==o)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.");for(var n=new DataView(e,12),i=0;i<n.byteLength;){var a=n.getUint32(i,!0);i+=4;var c=n.getUint32(i,!0);if(i+=4,c===s){var u=new Uint8Array(e,12+i,a);this.content=ad.decodeText(u)}else if(c===l){var h=12+i;this.body=e.slice(h,h+a)}i+=a}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function h(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t}function d(){this.name=r.KHR_TEXTURE_TRANSFORM}function p(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return Pd},extendParams:function(e,t,r){var n=t.extensions[this.name],i=Rd.standard,a=zd.clone(i.uniforms),o=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),s=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),c=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),l=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),u=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),h=i.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;").replace("uniform float metalness;","uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>",o).replace("#include <metalnessmap_pars_fragment>",s).replace("#include <roughnessmap_fragment>",c).replace("#include <metalnessmap_fragment>",l).replace("#include <lights_physical_fragment>",u);delete a.roughness,delete a.metalness,delete a.roughnessMap,delete a.metalnessMap,a.specular={value:(new Gh).setHex(1118481)},a.glossiness={value:.5},a.specularMap={value:null},a.glossinessMap={value:null},e.vertexShader=i.vertexShader,e.fragmentShader=h,e.uniforms=a,e.defines={STANDARD:""},e.color=new Gh(1,1,1),e.opacity=1;var d=[];if(Array.isArray(n.diffuseFactor)){var p=n.diffuseFactor;e.color.fromArray(p),e.opacity=p[3]}if(void 0!==n.diffuseTexture&&d.push(r.assignTexture(e,"map",n.diffuseTexture)),e.emissive=new Gh(0,0,0),e.glossiness=void 0!==n.glossinessFactor?n.glossinessFactor:1,e.specular=new Gh(1,1,1),Array.isArray(n.specularFactor)&&e.specular.fromArray(n.specularFactor),void 0!==n.specularGlossinessTexture){var f=n.specularGlossinessTexture;d.push(r.assignTexture(e,"glossinessMap",f)),d.push(r.assignTexture(e,"specularMap",f))}return Promise.all(d)},createMaterial:function(e){var t=new Pd({defines:e.defines,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,uniforms:e.uniforms,fog:!0,lights:!0,opacity:e.opacity,transparent:e.transparent});return t.isGLTFSpecularGlossinessMaterial=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t.extensions.derivatives=!0,t},cloneMaterial:function(e){var t=e.clone();t.isGLTFSpecularGlossinessMaterial=!0;for(var r=this.specularGlossinessParams,n=0,i=r.length;n<i;n++){var a=e[r[n]];t[r[n]]=a&&a.isColor?a.clone():a}return t},refreshUniforms:function(e,t,r,n,i){if(!0===i.isGLTFSpecularGlossinessMaterial){var a,o=i.uniforms,s=i.defines;o.opacity.value=i.opacity,o.diffuse.value.copy(i.color),o.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),o.map.value=i.map,o.specularMap.value=i.specularMap,o.alphaMap.value=i.alphaMap,o.lightMap.value=i.lightMap,o.lightMapIntensity.value=i.lightMapIntensity,o.aoMap.value=i.aoMap,o.aoMapIntensity.value=i.aoMapIntensity,i.map?a=i.map:i.specularMap?a=i.specularMap:i.displacementMap?a=i.displacementMap:i.normalMap?a=i.normalMap:i.bumpMap?a=i.bumpMap:i.glossinessMap?a=i.glossinessMap:i.alphaMap?a=i.alphaMap:i.emissiveMap&&(a=i.emissiveMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),o.uvTransform.value.copy(a.matrix)),i.envMap&&(o.envMap.value=i.envMap,o.envMapIntensity.value=i.envMapIntensity,o.flipEnvMap.value=i.envMap.isCubeTexture?-1:1,o.reflectivity.value=i.reflectivity,o.refractionRatio.value=i.refractionRatio,o.maxMipLevel.value=e.properties.get(i.envMap).__maxMipLevel),o.specular.value.copy(i.specular),o.glossiness.value=i.glossiness,o.glossinessMap.value=i.glossinessMap,o.emissiveMap.value=i.emissiveMap,o.bumpMap.value=i.bumpMap,o.normalMap.value=i.normalMap,o.displacementMap.value=i.displacementMap,o.displacementScale.value=i.displacementScale,o.displacementBias.value=i.displacementBias,null!==o.glossinessMap.value&&void 0===s.USE_GLOSSINESSMAP&&(s.USE_GLOSSINESSMAP="",s.USE_ROUGHNESSMAP=""),null===o.glossinessMap.value&&void 0!==s.USE_GLOSSINESSMAP&&(delete s.USE_GLOSSINESSMAP,delete s.USE_ROUGHNESSMAP)}}}}function f(e,t,r,n){Yh.call(this,e,t,r,n)}h.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,i=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,o={},s={},c={};for(var l in a){var u=A[l]||l.toLowerCase();o[u]=a[l]}for(l in e.attributes){u=A[l]||l.toLowerCase();if(void 0!==a[l]){var h=r.accessors[e.attributes[l]],d=M[h.componentType];c[u]=d,s[u]=!0===h.normalized}}return t.getDependency("bufferView",i).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],i=s[r];void 0!==i&&(n.normalized=i)}t(e)}),o,c)}))}))},d.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},f.prototype=Object.create(Yh.prototype),f.prototype.constructor=f,f.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n*3+n,a=0;a!==n;a++)t[a]=r[i+a];return t},f.prototype.beforeStart_=f.prototype.copySampleValue_,f.prototype.afterEnd_=f.prototype.copySampleValue_,f.prototype.interpolate_=function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=2*o,c=3*o,l=n-t,u=(r-t)/l,h=u*u,d=h*u,p=e*c,f=p-c,m=-2*d+3*h,v=d-h,g=1-m,y=v-h+u,x=0;x!==o;x++){var b=a[f+x+o],w=a[f+x+s]*l,_=a[p+x+o],M=a[p+x]*l;i[x]=g*b+y*w+m*_+v*M}return i};var m,v=0,g=1,y=2,x=3,b=4,w=5,_=6,M={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},S={9728:pd,9729:td,9984:md,9985:nd,9986:fd,9987:rd},T={33071:Fh,33648:dd,10497:Ad},E={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},A={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},L={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},R={CUBICSPLINE:void 0,LINEAR:Jh,STEP:Zh},P="OPAQUE",C="MASK",O="BLEND",I={"image/png":Td,"image/jpeg":Ed};function D(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function N(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function B(e,t){void 0!==t.extras&&("object"===c()(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function z(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var i=t.extras.targetNames;if(e.morphTargetInfluences.length===i.length){e.morphTargetDictionary={};for(r=0,n=i.length;r<n;r++)e.morphTargetDictionary[i[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function U(e){for(var t="",r=Object.keys(e).sort(),n=0,i=r.length;n<i;n++)t+=r[n]+":"+e[r[n]]+";";return t}function F(e){if(e.isInterleavedBufferAttribute){for(var t=e.count,r=e.itemSize,n=e.array.slice(0,t*r),i=0,a=0;i<t;++i)n[a++]=e.getX(i),r>=2&&(n[a++]=e.getY(i)),r>=3&&(n[a++]=e.getZ(i)),r>=4&&(n[a++]=e.getW(i));return new zh(n,r,e.normalized)}return e.clone()}function G(e,r,n){this.json=e||{},this.extensions=r||{},this.options=n||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new Dd(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new jh(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function k(e,t,r){var n=t.attributes,i=[];function a(t,n){return r.getDependency("accessor",t).then((function(t){e.addAttribute(n,t)}))}for(var o in n){var s=A[o]||o.toLowerCase();s in e.attributes||i.push(a(n[o],s))}if(void 0!==t.indices&&!e.index){var c=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));i.push(c)}return B(e,t),Promise.all(i).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,i=!1,a=0,o=t.length;a<o;a++){if(void 0!==(l=t[a]).POSITION&&(n=!0),void 0!==l.NORMAL&&(i=!0),n&&i)break}if(!n&&!i)return Promise.resolve(e);var s=[],c=[];for(a=0,o=t.length;a<o;a++){var l=t[a];if(n){var u=void 0!==l.POSITION?r.getDependency("accessor",l.POSITION):e.attributes.position;s.push(u)}if(i){u=void 0!==l.NORMAL?r.getDependency("accessor",l.NORMAL):e.attributes.normal;c.push(u)}}return Promise.all([Promise.all(s),Promise.all(c)]).then((function(r){for(var a=r[0],o=r[1],s=0,c=a.length;s<c;s++)e.attributes.position!==a[s]&&(a[s]=F(a[s]));for(s=0,c=o.length;s<c;s++)e.attributes.normal!==o[s]&&(o[s]=F(o[s]));for(s=0,c=t.length;s<c;s++){var l=t[s],u="morphTarget"+s;if(n&&void 0!==l.POSITION){var h=a[s];h.name=u;for(var d=e.attributes.position,p=0,f=h.count;p<f;p++)h.setXYZ(p,h.getX(p)+d.getX(p),h.getY(p)+d.getY(p),h.getZ(p)+d.getZ(p))}if(i&&void 0!==l.NORMAL){var m=o[s];m.name=u;var v=e.attributes.normal;for(p=0,f=m.count;p<f;p++)m.setXYZ(p,m.getX(p)+v.getX(p),m.getY(p)+v.getY(p),m.getZ(p)+v.getZ(p))}}return n&&(e.morphAttributes.position=a),i&&(e.morphAttributes.normal=o),e}))}(e,t.targets,r):e}))}return G.prototype.parse=function(e,t){var r=this,n=this.json,i=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var a={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};N(i,a,n),B(a,n),e(a)})).catch(t)},G.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},i={},a=0,o=t.length;a<o;a++)for(var s=t[a].joints,c=0,l=s.length;c<l;c++)e[s[c]].isBone=!0;for(var u=0,h=e.length;u<h;u++){var d=e[u];void 0!==d.mesh&&(void 0===n[d.mesh]&&(n[d.mesh]=i[d.mesh]=0),n[d.mesh]++,void 0!==d.skin&&(r[d.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=i},G.prototype.getDependency=function(e,t){var n=e+":"+t,i=this.cache.get(n);if(!i){switch(e){case"scene":i=this.loadScene(t);break;case"node":i=this.loadNode(t);break;case"mesh":i=this.loadMesh(t);break;case"accessor":i=this.loadAccessor(t);break;case"bufferView":i=this.loadBufferView(t);break;case"buffer":i=this.loadBuffer(t);break;case"material":i=this.loadMaterial(t);break;case"texture":i=this.loadTexture(t);break;case"skin":i=this.loadSkin(t);break;case"animation":i=this.loadAnimation(t);break;case"camera":i=this.loadCamera(t);break;case"light":i=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,i)}return i},G.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},G.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var i=this.options;return new Promise((function(e,r){n.load(D(t.uri,i.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},G.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},G.prototype.loadAccessor=function(e){var t=this,r=this.json,n=this.json.accessors[e];if(void 0===n.bufferView&&void 0===n.sparse)return Promise.resolve(null);var i=[];return void 0!==n.bufferView?i.push(this.getDependency("bufferView",n.bufferView)):i.push(null),void 0!==n.sparse&&(i.push(this.getDependency("bufferView",n.sparse.indices.bufferView)),i.push(this.getDependency("bufferView",n.sparse.values.bufferView))),Promise.all(i).then((function(e){var i,a,o=e[0],s=E[n.type],c=M[n.componentType],l=c.BYTES_PER_ELEMENT,u=l*s,h=n.byteOffset||0,d=void 0!==n.bufferView?r.bufferViews[n.bufferView].byteStride:void 0,p=!0===n.normalized;if(d&&d!==u){var f=sd.floor(h/d),m="InterleavedBuffer:"+n.bufferView+":"+n.componentType+":"+f+":"+n.count,v=t.cache.get(m);v||(i=new c(o,f*d,n.count*d/l),v=new qh(i,d/l),t.cache.add(m,v)),a=new Xh(v,s,h%d/l,p)}else i=null===o?new c(n.count*s):new c(o,h,n.count*s),a=new zh(i,s,p);if(void 0!==n.sparse){var g=E.SCALAR,y=M[n.sparse.indices.componentType],x=n.sparse.indices.byteOffset||0,b=n.sparse.values.byteOffset||0,w=new y(e[1],x,n.sparse.count*g),_=new c(e[2],b,n.sparse.count*s);null!==o&&(a=new zh(a.array.slice(),a.itemSize,a.normalized));for(var S=0,T=w.length;S<T;S++){var A=w[S];if(a.setX(A,_[S*s]),s>=2&&a.setY(A,_[S*s+1]),s>=3&&a.setZ(A,_[S*s+2]),s>=4&&a.setW(A,_[S*s+3]),s>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return a}))},G.prototype.loadTexture=function(e){var t,n=this,i=this.json,a=this.options,o=this.textureLoader,s=window.URL||window.webkitURL,c=i.textures[e],l=c.extensions||{},u=(t=l[r.MSFT_TEXTURE_DDS]?i.images[l[r.MSFT_TEXTURE_DDS].source]:i.images[c.source]).uri,h=!1;return void 0!==t.bufferView&&(u=n.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var r=new Blob([e],{type:t.mimeType});return u=s.createObjectURL(r)}))),Promise.resolve(u).then((function(e){var t=a.manager.getHandler(e);return t||(t=l[r.MSFT_TEXTURE_DDS]?n.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise((function(r,n){t.load(D(e,a.path),r,void 0,n)}))})).then((function(e){!0===h&&s.revokeObjectURL(u),e.flipY=!1,void 0!==c.name&&(e.name=c.name),t.mimeType in I&&(e.format=I[t.mimeType]);var r=(i.samplers||{})[c.sampler]||{};return e.magFilter=S[r.magFilter]||td,e.minFilter=S[r.minFilter]||rd,e.wrapS=T[r.wrapS]||Ad,e.wrapT=T[r.wrapT]||Ad,e}))},G.prototype.assignTexture=function(e,t,n){var i=this;return this.getDependency("texture",n.index).then((function(a){if(!a.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":a.format=Ed}if(i.extensions[r.KHR_TEXTURE_TRANSFORM]){var o=void 0!==n.extensions?n.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;o&&(a=i.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(a,o))}e[t]=a}))},G.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,i=this.extensions,a=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,s=void 0===t.attributes.normal,c=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,u=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var h="PointsMaterial:"+n.uuid,d=this.cache.get(h);d||(d=new _d,od.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(h,d)),n=d}else if(e.isLine){h="LineBasicMaterial:"+n.uuid;var p=this.cache.get(h);p||(p=new Qh,od.prototype.copy.call(p,n),p.color.copy(n.color),this.cache.add(h,p)),n=p}if(a||o||s||c||l){h="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(h+="specular-glossiness:"),c&&(h+="skinning:"),a&&(h+="vertex-tangents:"),o&&(h+="vertex-colors:"),s&&(h+="flat-shading:"),l&&(h+="morph-targets:"),u&&(h+="morph-normals:");var f=this.cache.get(h);f||(f=n.isGLTFSpecularGlossinessMaterial?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(n):n.clone(),c&&(f.skinning=!0),a&&(f.vertexTangents=!0),o&&(f.vertexColors=Gd),s&&(f.flatShading=!0),l&&(f.morphTargets=!0),u&&(f.morphNormals=!0),this.cache.add(h,f)),n=f}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&(console.log("THREE.GLTFLoader: Duplicating UVs to support aoMap."),t.addAttribute("uv2",new zh(t.attributes.uv.array,2))),n.isGLTFSpecularGlossinessMaterial&&(e.onBeforeRender=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms),e.material=n},G.prototype.loadMaterial=function(e){var t,n=this.json,i=this.extensions,a=n.materials[e],o={},s=a.extensions||{},c=[];if(s[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var l=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=l.getMaterialType(),c.push(l.extendParams(o,a,this))}else if(s[r.KHR_MATERIALS_UNLIT]){var u=i[r.KHR_MATERIALS_UNLIT];t=u.getMaterialType(),c.push(u.extendParams(o,a,this))}else{t=hd;var h=a.pbrMetallicRoughness||{};if(o.color=new Gh(1,1,1),o.opacity=1,Array.isArray(h.baseColorFactor)){var d=h.baseColorFactor;o.color.fromArray(d),o.opacity=d[3]}void 0!==h.baseColorTexture&&c.push(this.assignTexture(o,"map",h.baseColorTexture)),o.metalness=void 0!==h.metallicFactor?h.metallicFactor:1,o.roughness=void 0!==h.roughnessFactor?h.roughnessFactor:1,void 0!==h.metallicRoughnessTexture&&(c.push(this.assignTexture(o,"metalnessMap",h.metallicRoughnessTexture)),c.push(this.assignTexture(o,"roughnessMap",h.metallicRoughnessTexture)))}!0===a.doubleSided&&(o.side=Hh);var p=a.alphaMode||P;return p===O?o.transparent=!0:(o.transparent=!1,p===C&&(o.alphaTest=void 0!==a.alphaCutoff?a.alphaCutoff:.5)),void 0!==a.normalTexture&&t!==ud&&(c.push(this.assignTexture(o,"normalMap",a.normalTexture)),o.normalScale=new Ud(1,1),void 0!==a.normalTexture.scale&&o.normalScale.set(a.normalTexture.scale,a.normalTexture.scale)),void 0!==a.occlusionTexture&&t!==ud&&(c.push(this.assignTexture(o,"aoMap",a.occlusionTexture)),void 0!==a.occlusionTexture.strength&&(o.aoMapIntensity=a.occlusionTexture.strength)),void 0!==a.emissiveFactor&&t!==ud&&(o.emissive=(new Gh).fromArray(a.emissiveFactor)),void 0!==a.emissiveTexture&&t!==ud&&c.push(this.assignTexture(o,"emissiveMap",a.emissiveTexture)),Promise.all(c).then((function(){var e;return e=t===Pd?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(o):new t(o),void 0!==a.name&&(e.name=a.name),e.map&&(e.map.encoding=kd),e.emissiveMap&&(e.emissiveMap.encoding=kd),e.specularMap&&(e.specularMap.encoding=kd),B(e,a),a.extensions&&N(i,e,a),e}))},G.prototype.loadGeometries=function(e){var t=this,n=this.extensions,i=this.primitiveCache;function a(e){return n[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return k(r,e,t)}))}for(var o,s,c=[],l=0,u=e.length;l<u;l++){var h,d=e[l],p=(s=void 0,(s=(o=d).extensions&&o.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+s.bufferView+":"+s.indices+":"+U(s.attributes):o.indices+":"+U(o.attributes)+":"+o.mode),f=i[p];if(f)c.push(f.promise);else h=d.extensions&&d.extensions[r.KHR_DRACO_MESH_COMPRESSION]?a(d):k(new Uh,d,t),i[p]={primitive:d,promise:h},c.push(h)}return Promise.all(c)},G.prototype.loadMesh=function(e){for(var t=this,r=this.json.meshes[e],n=r.primitives,i=[],a=0,o=n.length;a<o;a++){var s=void 0===n[a].material?m=m||new hd({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:Vh}):this.getDependency("material",n[a].material);i.push(s)}return Promise.all(i).then((function(i){return t.loadGeometries(n).then((function(a){for(var o=[],s=0,c=a.length;s<c;s++){var l,u=a[s],h=n[s],d=i[s];if(h.mode===b||h.mode===w||h.mode===_||void 0===h.mode)!0!==(l=!0===r.isSkinnedMesh?new Od(u,d):new ld(u,d)).isSkinnedMesh||l.geometry.attributes.skinWeight.normalized||l.normalizeSkinWeights(),h.mode===w?l.drawMode=Bd:h.mode===_&&(l.drawMode=Nd);else if(h.mode===g)l=new ed(u,d);else if(h.mode===x)l=new Kh(u,d);else if(h.mode===y)l=new $h(u,d);else{if(h.mode!==v)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+h.mode);l=new wd(u,d)}Object.keys(l.geometry.morphAttributes).length>0&&z(l,r),l.name=r.name||"mesh_"+e,a.length>1&&(l.name+="_"+s),B(l,r),t.assignFinalMaterial(l),o.push(l)}if(1===o.length)return o[0];var p=new Wh;for(s=0,c=o.length;s<c;s++)p.add(o[s]);return p}))}))},G.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],n=r[r.type];if(n)return"perspective"===r.type?t=new xd(_Math.radToDeg(n.yfov),n.aspectRatio||1,n.znear||1,n.zfar||2e6):"orthographic"===r.type&&(t=new yd(n.xmag/-2,n.xmag/2,n.ymag/2,n.ymag/-2,n.znear,n.zfar)),void 0!==r.name&&(t.name=r.name),B(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},G.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},G.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],n=[],i=[],a=[],o=[],s=0,c=t.channels.length;s<c;s++){var l=t.channels[s],u=t.samplers[l.sampler],h=l.target,d=void 0!==h.node?h.node:h.id,p=void 0!==t.parameters?t.parameters[u.input]:u.input,m=void 0!==t.parameters?t.parameters[u.output]:u.output;r.push(this.getDependency("node",d)),n.push(this.getDependency("accessor",p)),i.push(this.getDependency("accessor",m)),a.push(u),o.push(h)}return Promise.all([Promise.all(r),Promise.all(n),Promise.all(i),Promise.all(a),Promise.all(o)]).then((function(r){for(var n=r[0],i=r[1],a=r[2],o=r[3],s=r[4],c=[],l=0,u=n.length;l<u;l++){var h=n[l],d=i[l],p=a[l],m=o[l],v=s[l];if(void 0!==h){var g;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,L[v.path]){case L.weights:g=vd;break;case L.rotation:g=Sd;break;case L.position:case L.scale:default:g=Fd}var y=h.name?h.name:h.uuid,x=void 0!==m.interpolation?R[m.interpolation]:Jh,b=[];L[v.path]===L.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&b.push(e.name?e.name:e.uuid)})):b.push(y);var w=p.array;if(p.normalized){var _;if(w.constructor===Int8Array)_=1/127;else if(w.constructor===Uint8Array)_=1/255;else if(w.constructor==Int16Array)_=1/32767;else{if(w.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");_=1/65535}for(var M=new Float32Array(w.length),S=0,T=w.length;S<T;S++)M[S]=w[S]*_;w=M}for(S=0,T=b.length;S<T;S++){var E=new g(b[S]+"."+L[v.path],d.array,w,x);"CUBICSPLINE"===m.interpolation&&(E.createInterpolant=function(e){return new f(this.times,this.values,this.getValueSize()/3,e)},E.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(E)}}}var A=void 0!==t.name?t.name:"animation_"+e;return new Nh(A,void 0,c)}))},G.prototype.loadNode=function(e){var t,n=this.json,i=this.extensions,a=this,o=n.meshReferences,s=n.meshUses,c=n.nodes[e];return(t=[],void 0!==c.mesh&&t.push(a.getDependency("mesh",c.mesh).then((function(e){var t;if(o[c.mesh]>1){var r=s[c.mesh]++;(t=e.clone()).name+="_instance_"+r,t.onBeforeRender=e.onBeforeRender;for(var n=0,i=t.children.length;n<i;n++)t.children[n].name+="_instance_"+r,t.children[n].onBeforeRender=e.children[n].onBeforeRender}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=c.weights.length;t<r;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(a.getDependency("camera",c.camera)),c.extensions&&c.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(a.getDependency("light",c.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new Bh:e.length>1?new Wh:1===e.length?e[0]:new gd)!==e[0])for(var r=0,n=e.length;r<n;r++)t.add(e[r]);if(void 0!==c.name&&(t.userData.name=c.name,t.name=Md.sanitizeNodeName(c.name)),B(t,c),c.extensions&&N(i,t,c),void 0!==c.matrix){var a=new cd;a.fromArray(c.matrix),t.applyMatrix(a)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},G.prototype.loadScene=function(){function e(t,r,n,i){var a=n.nodes[t];return i.getDependency("node",t).then((function(e){return void 0===a.skin?e:i.getDependency("skin",a.skin).then((function(e){for(var r=[],n=0,a=(t=e).joints.length;n<a;n++)r.push(i.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var n=[],i=[],a=0,o=r.length;a<o;a++){var s=r[a];if(s){n.push(s);var c=new cd;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*a),i.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[a])}e.bind(new Cd(n,i),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var o=[];if(a.children)for(var s=a.children,c=0,l=s.length;c<l;c++){var u=s[c];o.push(e(u,t,n,i))}return Promise.all(o)}))}return function(t){var r=this.json,n=this.extensions,i=this.json.scenes[t],a=new Ld;void 0!==i.name&&(a.name=i.name),B(a,i),i.extensions&&N(n,a,i);for(var o=i.nodes||[],s=[],c=0,l=o.length;c<l;c++)s.push(e(o[c],a,r,this));return Promise.all(s).then((function(){return a}))}}(),e}();function jd(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Vd=function(e){ou()(r,e);var t=jd(r);function r(e){var n;return i()(this,r),(n=t.call(this,e)).loader=new Dh,n}return o()(r,[{key:"load",value:function(e,t,r,n){var i=this;new Vl.FileLoader(this.manager).load(e,(function(r){try{var a=function(e){for(var t=JSON.parse(e),r="",n=function(e){var n=t.index[e];t.data[e].forEach((function(e){r+="".concat(n," ").concat(e," \n")}))},i=0;i<t.index.length;i++)n(i);return r}(r);t(i.loader.parse(a))}catch(t){n?n(t):console.error(t),i.manager.itemError(e)}}),r,n)}}]),r}(Vl.Loader),Wd=new Dh,qd=new Hd,Xd=new Vd,Yd=new Vl.TextureLoader,Zd={},Jd=function(e){var t=Zd[e];return $d(t)},Kd=function(e){return new Promise((function(t,r){var n=null,i=null;if(e.indexOf(".obj")>-1&&(n=Wd,i=$d),e.indexOf(".gltf")>-1&&(n=qd,i=Qd),e.indexOf(".o.json")>-1&&(n=Xd,i=$d),(e.indexOf(".png")>-1||e.indexOf(".jpg")>-1)&&(n=Yd,i=ep),Zd[e])return t(i(Zd[e]));n.load(e,(function(r){Zd[e]=r,t(i(Zd[e]))}))}))},Qd=function(e){var t={animations:e.animations,scene:e.scene.clone(!0)},r={};e.scene.traverse((function(e){e.isSkinnedMesh&&(r[e.name]=e)}));var n={},i={};for(var a in t.scene.traverse((function(e){e.isBone&&(n[e.name]=e),e.isSkinnedMesh&&(i[e.name]=e)})),r){for(var o=r[a].skeleton,s=i[a],c=[],l=0;l<o.bones.length;++l){var u=n[o.bones[l].name];c.push(u)}s.bind(new Vl.Skeleton(c,o.boneInverses),s.matrixWorld)}return t},$d=function(e){return e.clone()},ep=function(e){return e};function tp(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function rp(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?tp(Object(r),!0).forEach((function(t){lh()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):tp(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var np={},ip="\n  varying vec2 vUv;\n  void main(){\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",ap=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise((function(r,n){Kd(e).then((function(e){var n=new Vl.ShaderMaterial(rp({uniforms:{uTexture:{type:"t",value:e}},vertexShader:ip,fragmentShader:"    \n            uniform sampler2D uTexture;\n            varying vec2 vUv;\n            void main() {\n              gl_FragColor = texture2D(uTexture, vUv);\n            }\n          ",depthWrite:!1},t));r(n)}))}))},op=function(){var e="Transparent";return np[e]||(np[e]=new Vl.ShaderMaterial({uniforms:{},vertexShader:ip,fragmentShader:"    \n        uniform sampler2D uTexture;\n        varying vec2 vUv;\n        void main() {\n          gl_FragColor = vec4(1.0, 1.0, 1.0, 0.0);\n        }\n      ",transparent:!0,depthWrite:!1})),np[e]},sp=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"#FFFFFF",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n="Matcap_".concat(e);if(np[n])return np[n];var i=new Vl.MeshLambertMaterial(rp({color:new Vl.Color(e)},t));return r&&(np[n]=i),i.color.convertSRGBToLinear(),i},cp=new(function(){function e(){i()(this,e),window.Chaos=this,this.scene=new Vl.Scene,this.width=window.innerWidth,this.height=window.innerHeight,this.camera=new Vl.OrthographicCamera(this.width/-2,this.width/2,this.height/2,this.height/-2,1,2e3),this.renderer=new du,this.mouse=new Vl.Vector2,this.raycaster=new Vl.Raycaster;var t,r=((t=new Vl.DirectionalLight("#ffffff",1)).castShadow=!0,t.shadowBias=-.001,t.shadow.camera.near=1,t.shadow.camera.far=1e3,t.shadow.mapSize.set(1024,1024),t.shadow.normalBias=0,t.shadow.camera.top=100,t.shadow.camera.bottom=-100,t.shadow.camera.left=-100,t.shadow.camera.right=100,t.position.set(0,800,400),{directionalLight:t,ambientLight:new Vl.AmbientLight("#ffffff",1)});this.targetObject=new Vl.Object3D,r.directionalLight.target=this.targetObject,this.ambientLight=r.ambientLight,this.scene.add(r.directionalLight),this.scene.add(r.ambientLight),this.lightHelper=new Vl.DirectionalLightHelper(r.directionalLight),this.scene.add(this.targetObject),this.controls=new pu(this.camera),this.controlsDisabled=!0,this.camera.position.set(400,600,400),this.camera.zoom=6,this.camera.zoom=10,this.camera.updateProjectionMatrix(),this.camera.lookAt(new Vl.Vector3),this.event=new iu(this),this.sky=new oh(this),this.outline=new sh(this),this.gridSize=10}return o()(e,[{key:"start",value:function(){this.loop()}},{key:"render",value:function(){this.targetObject.position.set(this.camera.position.x-400,this.camera.position.y-600,this.camera.position.z-400),this.scene.children.forEach((function(e){e.isCustom&&e.update()})),this.renderer.clear(),this.sky.render(),this.outline.render(),this.updateSelectedObjectDisabled()}},{key:"loop",value:function(){var e=this;this.render(),requestAnimationFrame((function(){return e.loop()}))}},{key:"selectedObjects",get:function(){return this.outline.outlinePass.selectedObjects},set:function(e){e?(this.selectId=e[0].id,this.outline.outlinePass.selectedObjects=e):(this.selectId=null,this.outline.outlinePass.selectedObjects=[])}},{key:"setSelectedObjectDisabled",value:function(e){this.selectedObjectDisabled=!!e}},{key:"updateSelectedObjectDisabled",value:function(){var e;if(this.selectErrorer||(this.selectErrorer=new Vl.Mesh(new Vl.PlaneGeometry(18,18),(e=(new Vl.TextureLoader).load("./texture/selectErrorer.png"),new Vl.ShaderMaterial({uniforms:{uTexture:{type:"t",value:e}},vertexShader:ip,fragmentShader:"\n      varying vec2 vUv;\n      uniform sampler2D uTexture;\n    \n      void main(){\n        vec3 color = vec3(1.0, 0.0, 0.0);\n        vec4 map = texture2D(uTexture, vUv);\n        gl_FragColor = vec4(color, smoothstep(0.0, 1.0, map.y));\n      }\n    ",transparent:!0,depthWrite:!1}))),this.selectErrorer.rotateX(-Math.PI/2),this.scene.add(this.selectErrorer)),this.selectedObjectDisabled){var t=this.outline.outlinePass.selectedObjects[0];this.selectErrorer.position.x=t.position.x,this.selectErrorer.position.y=t.position.y-(t.box.max.y-t.box.min.y)/2,this.selectErrorer.position.z=t.position.z,this.selectErrorer.visible=!0}else this.selectErrorer.visible=!1}},{key:"preventDefault",value:function(){this.event.stopEventPass=!0}}]),e}()),lp=r(8),up=r.n(lp);function hp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var dp={floor:"地板",ceiling:"天花板",table:"桌子",lego:"乐高",vase:"花瓶"},pp=function(e){ou()(r,e);var t=hp(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()(this,r),e=t.call(this),n.position&&e.position.copy(n.position),n.quaternion&&e.quaternion.copy(n.quaternion),e.isCustom=!0,e.isCollision=!0,e.zIndex=1,e.collisionType=[dp.floor],e.alpha=.4,e.sourcePosition=new Vl.Vector3,e.targetPosition=(new Vl.Vector3).copy(e.position),e}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}},{key:"update",value:function(){this.position.lerp(this.targetPosition,this.alpha)}},{key:"touchstart",value:function(e){if(this.sourcePosition.copy(this.position),this.targetPosition.copy(this.position),this.isReset=!0,this.alpha=.4,cp.selectId===this.id)return this.isTouch=!0,!1;this.touchBefore()}},{key:"touchmove",value:function(e){if(!this.isTouch)return this.toucher&&clearTimeout(this.toucher),!1;cp.preventDefault(),this.disableSelectedObjectsCollision();var t=this.getIntersect(e);if(t)this.targetPosition.x=Math.round(t.position.x/cp.gridSize)*cp.gridSize,this.targetPosition.z=Math.round(t.position.z/cp.gridSize)*cp.gridSize,this.isReset=this.getCollisionBetween(this.getCollisionMinY(t));else{var r=ql(e.pageX,e.pageY);this.targetPosition.x=Math.round(r.x/cp.gridSize)*cp.gridSize,this.targetPosition.z=Math.round(r.z/cp.gridSize)*cp.gridSize,this.isReset=this.getCollisionBetween()}this.targetPosition.y+=2,this.synchronousSelectedObjectsCollision(),this.enableSelectedObjectsCollision(),this.isReset?cp.setSelectedObjectDisabled(!0):cp.setSelectedObjectDisabled()}},{key:"touchend",value:function(e){this.isReset?(this.targetPosition.copy(this.sourcePosition),this.alpha=.2):(this.targetPosition.y-=2,this.alpha=.1),this.synchronousSelectedObjectsCollision(),cp.setSelectedObjectDisabled()}},{key:"click",value:function(){this.toucher&&clearTimeout(this.toucher),this.isTouch=!0,this.collisionType.includes(dp.ceiling)||this.collisionType.includes(dp.table)||this.collisionType.includes(dp.lego)?cp.selectedObjects=[this].concat(up()(this.getSelectNodes())):(this.computeBoundingBox(),cp.selectedObjects=[this]),this.toucher=null}},{key:"computeBoundingBox",value:function(){var e=this.children[0];if(this.indexX=Math.round(this.targetPosition.x/cp.gridSize),this.indexZ=Math.round(this.targetPosition.z/cp.gridSize),e){var t=new Vl.Box3;e.geometry.computeBoundingBox(),t.copy(e.geometry.boundingBox).applyMatrix4(e.matrixWorld);var r={x:(t.max.x-t.min.x)/2,y:(t.max.y-t.min.y)/2,z:(t.max.z-t.min.z)/2},n=this.position;this.box={min:{x:n.x-r.x,y:n.y-r.y,z:n.z-r.z},max:{x:n.x+r.x,y:n.y+r.y,z:n.z+r.z}}}else this.box={min:this.position,max:this.position}}},{key:"touchBefore",value:function(){var e=this;this.toucher&&clearTimeout(this.toucher),this.isTouch=!1,this.toucher=setTimeout((function(){return e.click()}),300)}},{key:"getIntersect",value:function(e){for(var t=cp.event.intersect(e)||[],r=0;r<t.length;r++){var n=t[r];if(n.object&&n.object.parent&&!n.object.parent.isUi)return n.object.parent}return!1}},{key:"disableSelectedObjectsCollision",value:function(){cp.selectedObjects.forEach((function(e){e.isCustom=!1,e.isCollision=!1}))}},{key:"enableSelectedObjectsCollision",value:function(){cp.selectedObjects.forEach((function(e){e.isCustom=!0,e.isCollision=!0}))}},{key:"synchronousSelectedObjectsCollision",value:function(){var e=this,t=null,r=0;cp.selectedObjects.forEach((function(n){t?(n.targetPosition.x=e.targetPosition.x,n.targetPosition.z=e.targetPosition.z,n.alpha=e.alpha,r+=(n.box.max.y-n.box.min.y)/2,n.targetPosition.y=r,r+=(n.box.max.y-n.box.min.y)/2):r=n.targetPosition.y+(n.box.max.y-n.box.min.y)/2,t=n}))}},{key:"getSelectNodes",value:function(){var e=this,t=[];return cp.scene.children.forEach((function(e){e.isCollision&&e.computeBoundingBox()})),cp.scene.children.forEach((function(r){r.isCollision&&r.id!==e.id&&r.indexX==e.indexX&&r.indexZ==e.indexZ&&t.push(r)})),t.filter((function(t){return t.position.y>=e.position.y})).sort((function(e,t){return e.position.y-t.position.y}))}},{key:"getCollisionMinY",value:function(e){var t=[e].concat(up()(e.getSelectNodes())),r=null;return t.forEach((function(e){1e4>e.position.y&&(r=e)})),r}},{key:"getCollisionBetween",value:function(e){var t=!1;if(e){this.targetPosition.y=e.box.max.y+(this.box.max.y-this.box.min.y)/2;var r=e.collisionType.includes(dp.ceiling),n=e.collisionType.includes(dp.table),i=e.collisionType.includes(dp.lego),a=this.collisionType.includes(dp.floor),o=(this.collisionType.includes(dp.ceiling),this.collisionType.includes(dp.table),this.collisionType.includes(dp.lego));r||n&&!a||i&&o||(t=!0)}else this.targetPosition.y=0,this.collisionType.includes(dp.floor)||(t=!0);return t}}]),r}(Vl.Object3D);function fp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}lh()(pp,"CollisionType",dp);var mp=function(e){ou()(r,e);var t=fp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Jd("硬币");return a.material=sp("#d5ae34"),n.add(a),n.collisionType=[pp.CollisionType.lego],n}return o()(r)}(pp),vp=r(7),gp=r.n(vp),yp=new(function(){function e(){i()(this,e),this.meshs={},this.maxCount=100}return o()(e,[{key:"getMesh",value:function(e,t,r){return this.meshs[e]?(this.meshs[e].index+1>this.meshs[e].max&&(cp.scene.remove(this.meshs[e].instance),this.meshs[e].max+=this.maxCount,this.meshs[e].instance=new Vl.InstancedMesh(t,r,this.meshs[e].max),cp.scene.add(this.meshs[e].instance)),this.meshs[e].index+=1,this.meshs[e].instance.count=this.meshs[e].index+1,this.meshs[e].index):(this.meshs[e]={index:0,max:this.maxCount,instance:new Vl.InstancedMesh(t,r,this.maxCount)},this.meshs[e].instance.count=1,this.meshs[e].instance.castShadow=!0,this.meshs[e].instance.receiveShadow=!0,this.meshs[e].instance.customDepthMaterial=new Vl.MeshDepthMaterial({depthPacking:Vl.RGBADepthPacking,alphaTest:.5}),cp.scene.add(this.meshs[e].instance),0)}},{key:"deleteMesh",value:function(e){this.meshs[e]&&(1===this.meshs[e].instance.count?(this.meshs[e].instance.material.dispose(),this.meshs[e].instance.geometry.dispose(),cp.scene.remove(this.meshs[e].instance),delete this.meshs[e]):this.meshs[e].instance.count-=1)}},{key:"setMatrixAt",value:function(e,t,r){this.meshs[e]&&(this.meshs[e].instance.setMatrixAt(t,r),this.meshs[e].instance.instanceMatrix.needsUpdate=!0)}}]),e}());function xp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var bp=[[{x:-.65,y:.58,z:0,s:1.2},{x:-.36,y:-.18,z:.54,s:.9},{x:.66,y:.24,z:-.21,s:1.2},{x:.47,y:-.02,z:-.43,s:.92},{x:.07,y:.02,z:-.43,s:.46}],[{x:-.42,y:-.9,z:-.2,s:1},{x:-1.56,y:.036,z:.036,s:.5},{x:.3,y:.21,z:.56,s:.87},{x:-.96,y:.45,z:.81,s:.92}],[{x:-1.56,y:.036,z:.036,s:.5},{x:0,y:0,z:-.21,s:1.1}]],wp=function(e){ou()(r,e);var t=xp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a,o,s=Jd("许愿池");return s.material[0]=sp("#cfc6b8"),s.material[1]=(a={uColorStart:new Vl.Color("#f8f8f8"),uColorEnd:new Vl.Color("#28ccdf")},np[o="WishingWell"]||(np[o]=new Vl.ShaderMaterial({uniforms:{uTime:{value:0},uColorStart:{value:a.uColorStart},uColorEnd:{value:a.uColorEnd}},vertexShader:ip,fragmentShader:"\n  varying vec2 vUv;\n  uniform float uTime;\n  uniform vec3 uColorStart;\n  uniform vec3 uColorEnd;\n\n  //  Classic Perlin 3D Noise \n  //  by Stefan Gustavson\n  //\n  vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\n  vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n  vec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\n\n  float cnoise(vec3 P) {\n      vec3 Pi0 = floor(P); // Integer part for indexing\n      vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n      Pi0 = mod(Pi0, 289.0);\n      Pi1 = mod(Pi1, 289.0);\n      vec3 Pf0 = fract(P); // Fractional part for interpolation\n      vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n      vec4 iy = vec4(Pi0.yy, Pi1.yy);\n      vec4 iz0 = Pi0.zzzz;\n      vec4 iz1 = Pi1.zzzz;\n\n      vec4 ixy = permute(permute(ix) + iy);\n      vec4 ixy0 = permute(ixy + iz0);\n      vec4 ixy1 = permute(ixy + iz1);\n\n      vec4 gx0 = ixy0 / 7.0;\n      vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n      gx0 = fract(gx0);\n      vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n      vec4 sz0 = step(gz0, vec4(0.0));\n      gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n      gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n      vec4 gx1 = ixy1 / 7.0;\n      vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n      gx1 = fract(gx1);\n      vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n      vec4 sz1 = step(gz1, vec4(0.0));\n      gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n      gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n      vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n      vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n      vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n      vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n      vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n      vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n      vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n      vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n      vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n      g000 *= norm0.x;\n      g010 *= norm0.y;\n      g100 *= norm0.z;\n      g110 *= norm0.w;\n      vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n      g001 *= norm1.x;\n      g011 *= norm1.y;\n      g101 *= norm1.z;\n      g111 *= norm1.w;\n\n      float n000 = dot(g000, Pf0);\n      float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n      float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n      float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n      float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n      float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n      float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n      float n111 = dot(g111, Pf1);\n\n      vec3 fade_xyz = fade(Pf0);\n      vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n      vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n      float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n\n      return 2.2 * n_xyz;\n  }\n\n  void main(){\n    vec2 displacedUv = vUv + cnoise(vec3(vUv * 5.0, uTime * 0.1));\n\n    float strength = cnoise(vec3(displacedUv * 5.0, uTime * 0.2));\n    \n    float outerGlow = distance(vUv, vec2(0.5)) * 5.0 - 1.4;\n    strength += outerGlow;\n\n    strength += step(-0.2, strength) * 0.8;\n\n    vec3 mixedColor = mix(uColorStart, uColorEnd, strength);\n\n    gl_FragColor = vec4(mixedColor, 1.0);\n  }\n",transparent:!0,depthWrite:!1})),np[o]),n.add(s),n.collisionType=[pp.CollisionType.vase],n.createCloud(),n}return o()(r,[{key:"createCloud",value:function(){var e=this;this.clouds=[],this.cloudNames=[],this.cloudhDummy=new Vl.Object3D,this.cloudhMaterial=sp("#feffff");for(var t=[],r=[],n=0;n<3;n++){for(var i=[],a=bp[n],o=0;o<a.length;o++){var s=a[o],c=new Vl.SphereBufferGeometry(1,20,20);c.translate(s.x,s.y,s.z),c.scale(s.s,.9*s.s,s.s),i.push(c)}var l=Zl(i,!0);t.push("云".concat(n)),r.push({name:"云".concat(n),geometry:l})}for(var u=Math.PI/180,h=[0,70*u,120*u,160*u],d=0;d<9;d++)r.forEach((function(t){yp.getMesh(t.name,t.geometry,e.cloudhMaterial)})),this.clouds.push({deg:40*d,names:t,name:Kl(t),ps:(new Vl.Vector3).copy(this.position),rot:new Vl.Vector3(Yl(0,180*u),Yl(0,180*u),Yl(0,180*u)),time:h[d%(h.length-1)]})}},{key:"updateCloud",value:function(){var e=this,t=Math.PI/180;this.clouds.forEach((function(r,n){e.cloudhDummy.scale.set(1,1,1),e.cloudhDummy.rotation.set(0,0,0),e.cloudhDummy.position.set(r.ps.x+6*Math.sin(r.deg*t),r.ps.y,r.ps.z+6*Math.cos(r.deg*t)),r.time+=Yl(1,2)*t,r.rot.x+=Math.random()*t,r.rot.z+=Math.random()*t;var i=Math.sin(r.time);e.cloudhDummy.rotation.y=r.deg*t,e.cloudhDummy.scale.multiplyScalar(Math.max(0,i)),e.cloudhDummy.rotation.set(r.rot.x,r.rot.y,r.rot.z),e.cloudhDummy.updateMatrix(),yp.setMatrixAt(r.name,n,e.cloudhDummy.matrix),i<0&&r.time>Math.PI&&(r.time-=180*t,r.ps.x=e.position.x,r.ps.y=e.position.y,r.ps.z=e.position.z,r.name=Kl(r.names),r.rot.x=Yl(0*t,180*t),r.rot.y=Yl(0*t,180*t),r.rot.z=Yl(0*t,180*t))}))}},{key:"update",value:function(){gp()(uu()(r.prototype),"update",this).call(this),this.children[0].material[1].uniforms.uTime.value+=.04,this.updateCloud()}}]),r}(pp);function _p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Mp=function(e){ou()(r,e);var t=_p(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Jd("草");return a.material[0]=sp("#b6d53c"),a.material[1]=sp("#bf7958"),n.add(a),n}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}}]),r}(pp);function Sp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Tp=function(e){ou()(r,e);var t=Sp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Jd("块");return a.material=sp("#ffffff"),n.add(a),n.collisionType=[pp.CollisionType.floor,pp.CollisionType.ceiling],n}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}}]),r}(pp);function Ep(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Ap=function(e){ou()(r,e);var t=Ep(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()(this,r),(e=t.call(this)).x=n.x||0,e.y=n.y||0,e.isCustom=!0,e.isUi=!0,e.zIndex=0,e}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}},{key:"update",value:function(){var e=cp.camera,t=1/cp.camera.zoom;this.position.copy(e.position),this.rotation.copy(e.rotation),this.scale.set(t,t,t),this.translateZ(-100),this.translateX(this.x*t),this.translateY(this.y*t),this.updateMatrix()}},{key:"touchstart",value:function(e){cp.preventDefault()}},{key:"touchmove",value:function(e){cp.preventDefault()}},{key:"touchend",value:function(e){cp.preventDefault()}},{key:"click",value:function(e){cp.preventDefault()}}]),r}(Vl.Object3D);function Lp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}function Rp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=uu()(e);if(t){var i=uu()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return cu()(this,r)}}var Pp={Coin:mp,WishingWell:wp,Grass:Mp,Whiteboard:Tp,SkySwitch:function(e){ou()(r,e);var t=Lp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=new Vl.BoxGeometry(50,50,50),o=new Vl.Mesh(a,op());return n.add(o),n.x=-100,n.y=-cp.height/2+50,ap("./texture/skySwitch.png",{transparent:!0}).then((function(e){var t=new Vl.PlaneGeometry(60,60),r=new Vl.Mesh(t,e);n.add(r)})),n}return o()(r,[{key:"touchstart",value:function(e){this.animationer&&tu(this.animationer);var t=this.children[1];t&&(t.material.opacity=.68)}},{key:"touchend",value:function(e){var t=this.children[1];t&&(t.material.opacity=1,this.animationer=eu(.6,1,800,"Elastic.easeOut",(function(e){t.scale.set(e,e,1)})))}},{key:"click",value:function(){cp.sky&&cp.sky.switch()}}]),r}(Ap),Around:function(e){ou()(r,e);var t=Rp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=new Vl.BoxGeometry(50,50,50),o=new Vl.Mesh(a,op());return n.add(o),n.x=0,n.y=-cp.height/2+50,ap("./texture/around.png",{transparent:!0}).then((function(e){var t=new Vl.PlaneGeometry(60,60),r=new Vl.Mesh(t,e);n.add(r)})),n}return o()(r,[{key:"touchstart",value:function(e){this.animationer&&tu(this.animationer);var t=this.children[1];t&&(t.material.opacity=.68)}},{key:"touchend",value:function(e){var t=this.children[1];t&&(t.material.opacity=1,this.animationer=eu(0,1,800,"Cubic.easeOut",(function(e){t.rotation.z=-2*e*Math.PI})))}},{key:"click",value:function(){if(gp()(uu()(r.prototype),"click",this).call(this),cp.selectId){this.animationer2&&tu(this.animationer2);var e=[],t=-Math.PI/2;cp.selectedObjects.forEach((function(r){var n=r.rotation.y,i=t*Math.ceil(n/t)+t;Math.abs(n)>Math.abs(4*t)&&(n-=8*t,i-=8*t);var a=i-n;e.push({mesh:r,from:n,to:i,cz:a})})),this.animationer2=eu(0,1,800,"Cubic.easeOut",(function(t){e.forEach((function(e){e.mesh.rotation.y=e.from+t*e.cz}))}))}}}]),r}(Ap)};cp.start(),Kd("./json/data.o.json").then((function(e){e.children.forEach((function(e){Zd[e.name]=e,e.traverse((function(e){e instanceof Vl.Mesh&&(e.castShadow=!0,e.receiveShadow=!0)}))})),Cp()}));var Cp=function(){for(var e=cp.gridSize,t=e/2,r=t*t,n=0;n<r;n++){var i=(n%t-2)*e,a=(Math.floor(n/t)-2)*e,o=new Pp.Whiteboard({position:new Vl.Vector3(i,0,a)});o.name="item_".concat(n),cp.scene.add(o)}for(var s=0;s<2;s++){var c=(s%t-2)*e,l=new Pp.Coin({position:new Vl.Vector3(c,5,0)});l.name="coin".concat(s),cp.scene.add(l)}var u=new Pp.WishingWell({position:new Vl.Vector3(0,7.2,0)});u.name="wishingWell",cp.scene.add(u)};cp.scene.add(new Pp.SkySwitch),cp.scene.add(new Pp.Around)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,