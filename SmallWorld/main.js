!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=19)}([function(e,t){function r(t){return e.exports=r=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(12);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&n(e,t)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(5).default,i=r(13);e.exports=function(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return i(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){function r(t){return e.exports=r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(18);function i(){return"undefined"!=typeof Reflect&&Reflect.get?(e.exports=i=Reflect.get.bind(),e.exports.__esModule=!0,e.exports.default=e.exports):(e.exports=i=function(e,t,r){var i=n(e,t);if(i){var a=Object.getOwnPropertyDescriptor(i,t);return a.get?a.get.call(arguments.length<3?e:r):a.value}},e.exports.__esModule=!0,e.exports.default=e.exports),i.apply(this,arguments)}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(14),i=r(15),a=r(16),o=r(17);e.exports=function(e){return n(e)||i(e)||a(e)||o()},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){r(11)},function(e,t){window.canvas=document.createElement("canvas"),document.body.appendChild(window.canvas)},function(e,t){function r(t,n){return e.exports=r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},e.exports.__esModule=!0,e.exports.default=e.exports,r(t,n)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(9);e.exports=function(e){if(Array.isArray(e))return n(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(9);e.exports=function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){var n=r(0);e.exports=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=n(e)););return e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,r){"use strict";r.r(t);r(10);var n=r(1),i=r.n(n),a=r(2),o=r.n(a),s=r(5),c=r.n(s),l={};void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}),void 0===Math.sign&&(Math.sign=function(e){return e<0?-1:e>0?1:+e}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),r=1;r<arguments.length;r++){var n=arguments[r];if(null!=n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t});function h(){}Object.assign(h.prototype,{addEventListener:function(e,t){void 0===this._listeners&&(this._listeners={});var r=this._listeners;void 0===r[e]&&(r[e]=[]),-1===r[e].indexOf(t)&&r[e].push(t)},hasEventListener:function(e,t){if(void 0===this._listeners)return!1;var r=this._listeners;return void 0!==r[e]&&-1!==r[e].indexOf(t)},removeEventListener:function(e,t){if(void 0!==this._listeners){var r=this._listeners[e];if(void 0!==r){var n=r.indexOf(t);-1!==n&&r.splice(n,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var t=this._listeners[e.type];if(void 0!==t){e.target=this;for(var r=t.slice(0),n=0,i=r.length;n<i;n++)r[n].call(this,e)}}}});for(var u=[],d=0;d<256;d++)u[d]=(d<16?"0":"")+d.toString(16);var p={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,r=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(u[255&e]+u[e>>8&255]+u[e>>16&255]+u[e>>24&255]+"-"+u[255&t]+u[t>>8&255]+"-"+u[t>>16&15|64]+u[t>>24&255]+"-"+u[63&r|128]+u[r>>8&255]+"-"+u[r>>16&255]+u[r>>24&255]+u[255&n]+u[n>>8&255]+u[n>>16&255]+u[n>>24&255]).toUpperCase()},clamp:function(e,t,r){return Math.max(t,Math.min(r,e))},euclideanModulo:function(e,t){return(e%t+t)%t},mapLinear:function(e,t,r,n,i){return n+(e-t)*(i-n)/(r-t)},lerp:function(e,t,r){return(1-r)*e+r*t},smoothstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*(3-2*e)},smootherstep:function(e,t,r){return e<=t?0:e>=r?1:(e=(e-t)/(r-t))*e*e*(e*(6*e-15)+10)},randInt:function(e,t){return e+Math.floor(Math.random()*(t-e+1))},randFloat:function(e,t){return e+Math.random()*(t-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*p.DEG2RAD},radToDeg:function(e){return e*p.RAD2DEG},isPowerOfTwo:function(e){return 0==(e&e-1)&&0!==e},ceilPowerOfTwo:function(e){return Math.pow(2,Math.ceil(Math.log(e)/Math.LN2))},floorPowerOfTwo:function(e){return Math.pow(2,Math.floor(Math.log(e)/Math.LN2))}};function f(e,t){this.x=e||0,this.y=t||0}function m(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._w=void 0!==n?n:1}Object.defineProperties(f.prototype,{width:{get:function(){return this.x},set:function(e){this.x=e}},height:{get:function(){return this.y},set:function(e){this.y=e}}}),Object.assign(f.prototype,{isVector2:!0,set:function(e,t){return this.x=e,this.y=t,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},applyMatrix3:function(e){var t=this.x,r=this.y,n=e.elements;return this.x=n[0]*t+n[3]*r+n[6],this.y=n[1]*t+n[4]*r+n[7],this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},cross:function(e){return this.x*e.y-this.y*e.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var e=Math.atan2(this.y,this.x);return e<0&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y;return t*t+r*r},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this},rotateAround:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=this.x-e.x,a=this.y-e.y;return this.x=i*r-a*n+e.x,this.y=i*n+a*r+e.y,this}}),Object.assign(m,{slerp:function(e,t,r,n){return r.copy(e).slerp(t,n)},slerpFlat:function(e,t,r,n,i,a,o){var s=r[n+0],c=r[n+1],l=r[n+2],h=r[n+3],u=i[a+0],d=i[a+1],p=i[a+2],f=i[a+3];if(h!==f||s!==u||c!==d||l!==p){var m=1-o,v=s*u+c*d+l*p+h*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,o=Math.sin(o*b)/x}var w=o*g;if(s=s*m+u*w,c=c*m+d*w,l=l*m+p*w,h=h*m+f*w,m===1-o){var _=1/Math.sqrt(s*s+c*c+l*l+h*h);s*=_,c*=_,l*=_,h*=_}}e[t]=s,e[t+1]=c,e[t+2]=l,e[t+3]=h}}),Object.defineProperties(m.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(e){this._w=e,this._onChangeCallback()}}}),Object.assign(m.prototype,{isQuaternion:!0,set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._w=n,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this},setFromEuler:function(e,t){if(!e||!e.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var r=e._x,n=e._y,i=e._z,a=e.order,o=Math.cos,s=Math.sin,c=o(r/2),l=o(n/2),h=o(i/2),u=s(r/2),d=s(n/2),p=s(i/2);return"XYZ"===a?(this._x=u*l*h+c*d*p,this._y=c*d*h-u*l*p,this._z=c*l*p+u*d*h,this._w=c*l*h-u*d*p):"YXZ"===a?(this._x=u*l*h+c*d*p,this._y=c*d*h-u*l*p,this._z=c*l*p-u*d*h,this._w=c*l*h+u*d*p):"ZXY"===a?(this._x=u*l*h-c*d*p,this._y=c*d*h+u*l*p,this._z=c*l*p+u*d*h,this._w=c*l*h-u*d*p):"ZYX"===a?(this._x=u*l*h-c*d*p,this._y=c*d*h+u*l*p,this._z=c*l*p-u*d*h,this._w=c*l*h+u*d*p):"YZX"===a?(this._x=u*l*h+c*d*p,this._y=c*d*h+u*l*p,this._z=c*l*p-u*d*h,this._w=c*l*h-u*d*p):"XZY"===a&&(this._x=u*l*h-c*d*p,this._y=c*d*h-u*l*p,this._z=c*l*p+u*d*h,this._w=c*l*h+u*d*p),!1!==t&&this._onChangeCallback(),this},setFromAxisAngle:function(e,t){var r=t/2,n=Math.sin(r);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(r),this._onChangeCallback(),this},setFromRotationMatrix:function(e){var t,r=e.elements,n=r[0],i=r[4],a=r[8],o=r[1],s=r[5],c=r[9],l=r[2],h=r[6],u=r[10],d=n+s+u;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(h-c)*t,this._y=(a-l)*t,this._z=(o-i)*t):n>s&&n>u?(t=2*Math.sqrt(1+n-s-u),this._w=(h-c)/t,this._x=.25*t,this._y=(i+o)/t,this._z=(a+l)/t):s>u?(t=2*Math.sqrt(1+s-n-u),this._w=(a-l)/t,this._x=(i+o)/t,this._y=.25*t,this._z=(c+h)/t):(t=2*Math.sqrt(1+u-n-s),this._w=(o-i)/t,this._x=(a+l)/t,this._y=(c+h)/t,this._z=.25*t),this._onChangeCallback(),this},setFromUnitVectors:function(e,t){var r=e.dot(t)+1;return r<1e-6?(r=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=r):(this._x=0,this._y=-e.z,this._z=e.y,this._w=r)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=r),this.normalize()},angleTo:function(e){return 2*Math.acos(Math.abs(p.clamp(this.dot(e),-1,1)))},rotateTowards:function(e,t){var r=this.angleTo(e);if(0===r)return this;var n=Math.min(1,t/r);return this.slerp(e,n),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,t){var r=e._x,n=e._y,i=e._z,a=e._w,o=t._x,s=t._y,c=t._z,l=t._w;return this._x=r*l+a*o+n*c-i*s,this._y=n*l+a*s+i*o-r*c,this._z=i*l+a*c+r*s-n*o,this._w=a*l-r*o-n*s-i*c,this._onChangeCallback(),this},slerp:function(e,t){if(0===t)return this;if(1===t)return this.copy(e);var r=this._x,n=this._y,i=this._z,a=this._w,o=a*e._w+r*e._x+n*e._y+i*e._z;if(o<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=r,this._y=n,this._z=i,this;var s=1-o*o;if(s<=Number.EPSILON){var c=1-t;return this._w=c*a+t*this._w,this._x=c*r+t*this._x,this._y=c*n+t*this._y,this._z=c*i+t*this._z,this.normalize(),this._onChangeCallback(),this}var l=Math.sqrt(s),h=Math.atan2(l,o),u=Math.sin((1-t)*h)/l,d=Math.sin(t*h)/l;return this._w=a*u+this._w*d,this._x=r*u+this._x*d,this._y=n*u+this._y*d,this._z=i*u+this._z*d,this._onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,t){return void 0===t&&(t=0),this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}});var v=new y,g=new m;function y(e,t,r){this.x=e||0,this.y=t||0,this.z=r||0}Object.assign(y.prototype,{isVector3:!0,set:function(e,t,r){return this.x=e,this.y=t,this.z=r,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,t)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this},multiplyVectors:function(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this},applyEuler:function(e){return e&&e.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(g.setFromEuler(e))},applyAxisAngle:function(e,t){return this.applyQuaternion(g.setFromAxisAngle(e,t))},applyMatrix3:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[3]*r+i[6]*n,this.y=i[1]*t+i[4]*r+i[7]*n,this.z=i[2]*t+i[5]*r+i[8]*n,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements,a=1/(i[3]*t+i[7]*r+i[11]*n+i[15]);return this.x=(i[0]*t+i[4]*r+i[8]*n+i[12])*a,this.y=(i[1]*t+i[5]*r+i[9]*n+i[13])*a,this.z=(i[2]*t+i[6]*r+i[10]*n+i[14])*a,this},applyQuaternion:function(e){var t=this.x,r=this.y,n=this.z,i=e.x,a=e.y,o=e.z,s=e.w,c=s*t+a*n-o*r,l=s*r+o*t-i*n,h=s*n+i*r-a*t,u=-i*t-a*r-o*n;return this.x=c*s+u*-i+l*-o-h*-a,this.y=l*s+u*-a+h*-i-c*-o,this.z=h*s+u*-o+c*-a-l*-i,this},project:function(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)},unproject:function(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)},transformDirection:function(e){var t=this.x,r=this.y,n=this.z,i=e.elements;return this.x=i[0]*t+i[4]*r+i[8]*n,this.y=i[1]*t+i[5]*r+i[9]*n,this.z=i[2]*t+i[6]*r+i[10]*n,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},cross:function(e,t){return void 0!==t?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,t)):this.crossVectors(this,e)},crossVectors:function(e,t){var r=e.x,n=e.y,i=e.z,a=t.x,o=t.y,s=t.z;return this.x=n*s-i*o,this.y=i*a-r*s,this.z=r*o-n*a,this},projectOnVector:function(e){var t=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(t)},projectOnPlane:function(e){return v.copy(this).projectOnVector(e),this.sub(v)},reflect:function(e){return this.sub(v.copy(e).multiplyScalar(2*this.dot(e)))},angleTo:function(e){var t=Math.sqrt(this.lengthSq()*e.lengthSq());0===t&&console.error("THREE.Vector3: angleTo() can't handle zero length vectors.");var r=this.dot(e)/t;return Math.acos(p.clamp(r,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var t=this.x-e.x,r=this.y-e.y,n=this.z-e.z;return t*t+r*r+n*n},manhattanDistanceTo:function(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)},setFromSpherical:function(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)},setFromSphericalCoords:function(e,t,r){var n=Math.sin(t)*e;return this.x=n*Math.sin(r),this.y=Math.cos(t)*e,this.z=n*Math.cos(r),this},setFromCylindrical:function(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)},setFromCylindricalCoords:function(e,t,r){return this.x=e*Math.sin(t),this.y=r,this.z=e*Math.cos(t),this},setFromMatrixPosition:function(e){var t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this},setFromMatrixScale:function(e){var t=this.setFromMatrixColumn(e,0).length(),r=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=r,this.z=n,this},setFromMatrixColumn:function(e,t){return this.fromArray(e.elements,4*t)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}});var x,b=new y;function w(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.assign(w.prototype,{isMatrix3:!0,set:function(e,t,r,n,i,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=n,l[2]=o,l[3]=t,l[4]=i,l[5]=s,l[6]=r,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],this},setFromMatrix4:function(e){var t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this},applyToBufferAttribute:function(e){for(var t=0,r=e.count;t<r;t++)b.x=e.getX(t),b.y=e.getY(t),b.z=e.getZ(t),b.applyMatrix3(this),e.setXYZ(t,b.x,b.y,b.z);return e},multiply:function(e){return this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,a=r[0],o=r[3],s=r[6],c=r[1],l=r[4],h=r[7],u=r[2],d=r[5],p=r[8],f=n[0],m=n[3],v=n[6],g=n[1],y=n[4],x=n[7],b=n[2],w=n[5],_=n[8];return i[0]=a*f+o*g+s*b,i[3]=a*m+o*y+s*w,i[6]=a*v+o*x+s*_,i[1]=c*f+l*g+h*b,i[4]=c*m+l*y+h*w,i[7]=c*v+l*x+h*_,i[2]=u*f+d*g+p*b,i[5]=u*m+d*y+p*w,i[8]=u*v+d*x+p*_,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this},determinant:function(){var e=this.elements,t=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return t*a*l-t*o*c-r*i*l+r*o*s+n*i*c-n*a*s},getInverse:function(e,t){e&&e.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var r=e.elements,n=this.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],l=r[5],h=r[6],u=r[7],d=r[8],p=d*c-l*u,f=l*h-d*s,m=u*s-c*h,v=i*p+a*f+o*m;if(0===v){var g="THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(g);return console.warn(g),this.identity()}var y=1/v;return n[0]=p*y,n[1]=(o*u-d*a)*y,n[2]=(l*a-o*c)*y,n[3]=f*y,n[4]=(d*i-o*h)*y,n[5]=(o*s-l*i)*y,n[6]=m*y,n[7]=(a*h-u*i)*y,n[8]=(c*i-a*s)*y,this},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this},setUvTransform:function(e,t,r,n,i,a,o){var s=Math.cos(i),c=Math.sin(i);this.set(r*s,r*c,-r*(s*a+c*o)+a+e,-n*c,n*s,-n*(-c*a+s*o)+o+t,0,0,1)},scale:function(e,t){var r=this.elements;return r[0]*=e,r[3]*=e,r[6]*=e,r[1]*=t,r[4]*=t,r[7]*=t,this},rotate:function(e){var t=Math.cos(e),r=Math.sin(e),n=this.elements,i=n[0],a=n[3],o=n[6],s=n[1],c=n[4],l=n[7];return n[0]=t*i+r*s,n[3]=t*a+r*c,n[6]=t*o+r*l,n[1]=-r*i+t*s,n[4]=-r*a+t*c,n[7]=-r*o+t*l,this},translate:function(e,t){var r=this.elements;return r[0]+=e*r[2],r[3]+=e*r[5],r[6]+=e*r[8],r[1]+=t*r[2],r[4]+=t*r[5],r[7]+=t*r[8],this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;n<9;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<9;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e}});var _={getDataURL:function(e){var t;if("undefined"==typeof HTMLCanvasElement)return e.src;if(e instanceof HTMLCanvasElement)t=e;else{void 0===x&&(x=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),x.width=e.width,x.height=e.height;var r=x.getContext("2d");e instanceof ImageData?r.putImageData(e,0,0):r.drawImage(e,0,0,e.width,e.height),t=x}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}},M=0;function S(e,t,r,n,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:M++}),this.uuid=p.generateUUID(),this.name="",this.image=void 0!==e?e:S.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==t?t:S.DEFAULT_MAPPING,this.wrapS=void 0!==r?r:1001,this.wrapT=void 0!==n?n:1001,this.magFilter=void 0!==i?i:1006,this.minFilter=void 0!==a?a:1008,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:1023,this.type=void 0!==s?s:1009,this.offset=new f(0,0),this.repeat=new f(1,1),this.center=new f(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new w,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:3e3,this.version=0,this.onUpdate=null}function T(e,t,r,n){this.x=e||0,this.y=t||0,this.z=r||0,this.w=void 0!==n?n:1}function E(e,t,r){this.width=e,this.height=t,this.scissor=new T(0,0,e,t),this.scissorTest=!1,this.viewport=new T(0,0,e,t),r=r||{},this.texture=new S(void 0,void 0,r.wrapS,r.wrapT,r.magFilter,r.minFilter,r.format,r.type,r.anisotropy,r.encoding),this.texture.image={},this.texture.image.width=e,this.texture.image.height=t,this.texture.generateMipmaps=void 0!==r.generateMipmaps&&r.generateMipmaps,this.texture.minFilter=void 0!==r.minFilter?r.minFilter:1006,this.depthBuffer=void 0===r.depthBuffer||r.depthBuffer,this.stencilBuffer=void 0===r.stencilBuffer||r.stencilBuffer,this.depthTexture=void 0!==r.depthTexture?r.depthTexture:null}function A(e,t,r){E.call(this,e,t,r),this.samples=4}S.DEFAULT_IMAGE=void 0,S.DEFAULT_MAPPING=300,S.prototype=Object.assign(Object.create(h.prototype),{constructor:S,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.name=e.name,this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){var t=void 0===e||"string"==typeof e;if(!t&&void 0!==e.textures[this.uuid])return e.textures[this.uuid];var r={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var n=this.image;if(void 0===n.uuid&&(n.uuid=p.generateUUID()),!t&&void 0===e.images[n.uuid]){var i;if(Array.isArray(n)){i=[];for(var a=0,o=n.length;a<o;a++)i.push(_.getDataURL(n[a]))}else i=_.getDataURL(n);e.images[n.uuid]={uuid:n.uuid,url:i}}r.image=n.uuid}return t||(e.textures[this.uuid]=r),r},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(300!==this.mapping)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case 1e3:e.x=e.x-Math.floor(e.x);break;case 1001:e.x=e.x<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case 1e3:e.y=e.y-Math.floor(e.y);break;case 1001:e.y=e.y<0?0:1;break;case 1002:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}return this.flipY&&(e.y=1-e.y),e}}),Object.defineProperty(S.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.defineProperties(T.prototype,{width:{get:function(){return this.z},set:function(e){this.z=e}},height:{get:function(){return this.w},set:function(e){this.w=e}}}),Object.assign(T.prototype,{isVector4:!0,set:function(e,t,r,n){return this.x=e,this.y=t,this.z=r,this.w=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,t)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this},addScaledVector:function(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this},sub:function(e,t){return void 0!==t?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,t)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this},multiplyScalar:function(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this},applyMatrix4:function(e){var t=this.x,r=this.y,n=this.z,i=this.w,a=e.elements;return this.x=a[0]*t+a[4]*r+a[8]*n+a[12]*i,this.y=a[1]*t+a[5]*r+a[9]*n+a[13]*i,this.z=a[2]*t+a[6]*r+a[10]*n+a[14]*i,this.w=a[3]*t+a[7]*r+a[11]*n+a[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this},setAxisAngleFromRotationMatrix:function(e){var t,r,n,i,a=e.elements,o=a[0],s=a[4],c=a[8],l=a[1],h=a[5],u=a[9],d=a[2],p=a[6],f=a[10];if(Math.abs(s-l)<.01&&Math.abs(c-d)<.01&&Math.abs(u-p)<.01){if(Math.abs(s+l)<.1&&Math.abs(c+d)<.1&&Math.abs(u+p)<.1&&Math.abs(o+h+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;var m=(o+1)/2,v=(h+1)/2,g=(f+1)/2,y=(s+l)/4,x=(c+d)/4,b=(u+p)/4;return m>v&&m>g?m<.01?(r=0,n=.707106781,i=.707106781):(n=y/(r=Math.sqrt(m)),i=x/r):v>g?v<.01?(r=.707106781,n=0,i=.707106781):(r=y/(n=Math.sqrt(v)),i=b/n):g<.01?(r=.707106781,n=.707106781,i=0):(r=x/(i=Math.sqrt(g)),n=b/i),this.set(r,n,i,t),this}var w=Math.sqrt((p-u)*(p-u)+(c-d)*(c-d)+(l-s)*(l-s));return Math.abs(w)<.001&&(w=1),this.x=(p-u)/w,this.y=(c-d)/w,this.z=(l-s)/w,this.w=Math.acos((o+h+f-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this},clampScalar:function(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this},clampLength:function(e,t){var r=this.length();return this.divideScalar(r||1).multiplyScalar(Math.max(e,Math.min(t,r)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(e){return this.normalize().multiplyScalar(e)},lerp:function(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this},lerpVectors:function(e,t,r){return this.subVectors(t,e).multiplyScalar(r).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,t){return void 0===t&&(t=0),this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e},fromBufferAttribute:function(e,t,r){return void 0!==r&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}}),E.prototype=Object.assign(Object.create(h.prototype),{constructor:E,isWebGLRenderTarget:!0,setSize:function(e,t){this.width===e&&this.height===t||(this.width=e,this.height=t,this.texture.image.width=e,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),A.prototype=Object.assign(Object.create(E.prototype),{constructor:A,isWebGLMultisampleRenderTarget:!0,copy:function(e){return E.prototype.copy.call(this,e),this.samples=e.samples,this}});var L=new y,R=new N,P=new y(0,0,0),C=new y(1,1,1),O=new y,I=new y,D=new y;function N(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(N.prototype,{isMatrix4:!0,set:function(e,t,r,n,i,a,o,s,c,l,h,u,d,p,f,m){var v=this.elements;return v[0]=e,v[4]=t,v[8]=r,v[12]=n,v[1]=i,v[5]=a,v[9]=o,v[13]=s,v[2]=c,v[6]=l,v[10]=h,v[14]=u,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new N).fromArray(this.elements)},copy:function(e){var t=this.elements,r=e.elements;return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t[6]=r[6],t[7]=r[7],t[8]=r[8],t[9]=r[9],t[10]=r[10],t[11]=r[11],t[12]=r[12],t[13]=r[13],t[14]=r[14],t[15]=r[15],this},copyPosition:function(e){var t=this.elements,r=e.elements;return t[12]=r[12],t[13]=r[13],t[14]=r[14],this},extractBasis:function(e,t,r){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),r.setFromMatrixColumn(this,2),this},makeBasis:function(e,t,r){return this.set(e.x,t.x,r.x,0,e.y,t.y,r.y,0,e.z,t.z,r.z,0,0,0,0,1),this},extractRotation:function(e){var t=this.elements,r=e.elements,n=1/L.setFromMatrixColumn(e,0).length(),i=1/L.setFromMatrixColumn(e,1).length(),a=1/L.setFromMatrixColumn(e,2).length();return t[0]=r[0]*n,t[1]=r[1]*n,t[2]=r[2]*n,t[3]=0,t[4]=r[4]*i,t[5]=r[5]*i,t[6]=r[6]*i,t[7]=0,t[8]=r[8]*a,t[9]=r[9]*a,t[10]=r[10]*a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromEuler:function(e){e&&e.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=this.elements,r=e.x,n=e.y,i=e.z,a=Math.cos(r),o=Math.sin(r),s=Math.cos(n),c=Math.sin(n),l=Math.cos(i),h=Math.sin(i);if("XYZ"===e.order){var u=a*l,d=a*h,p=o*l,f=o*h;t[0]=s*l,t[4]=-s*h,t[8]=c,t[1]=d+p*c,t[5]=u-f*c,t[9]=-o*s,t[2]=f-u*c,t[6]=p+d*c,t[10]=a*s}else if("YXZ"===e.order){var m=s*l,v=s*h,g=c*l,y=c*h;t[0]=m+y*o,t[4]=g*o-v,t[8]=a*c,t[1]=a*h,t[5]=a*l,t[9]=-o,t[2]=v*o-g,t[6]=y+m*o,t[10]=a*s}else if("ZXY"===e.order){m=s*l,v=s*h,g=c*l,y=c*h;t[0]=m-y*o,t[4]=-a*h,t[8]=g+v*o,t[1]=v+g*o,t[5]=a*l,t[9]=y-m*o,t[2]=-a*c,t[6]=o,t[10]=a*s}else if("ZYX"===e.order){u=a*l,d=a*h,p=o*l,f=o*h;t[0]=s*l,t[4]=p*c-d,t[8]=u*c+f,t[1]=s*h,t[5]=f*c+u,t[9]=d*c-p,t[2]=-c,t[6]=o*s,t[10]=a*s}else if("YZX"===e.order){var x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=_-x*h,t[8]=w*h+b,t[1]=h,t[5]=a*l,t[9]=-o*l,t[2]=-c*l,t[6]=b*h+w,t[10]=x-_*h}else if("XZY"===e.order){x=a*s,b=a*c,w=o*s,_=o*c;t[0]=s*l,t[4]=-h,t[8]=c*l,t[1]=x*h+_,t[5]=a*l,t[9]=b*h-w,t[2]=w*h-b,t[6]=o*l,t[10]=_*h+x}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this},makeRotationFromQuaternion:function(e){return this.compose(P,e,C)},lookAt:function(e,t,r){var n=this.elements;return D.subVectors(e,t),0===D.lengthSq()&&(D.z=1),D.normalize(),O.crossVectors(r,D),0===O.lengthSq()&&(1===Math.abs(r.z)?D.x+=1e-4:D.z+=1e-4,D.normalize(),O.crossVectors(r,D)),O.normalize(),I.crossVectors(D,O),n[0]=O.x,n[4]=I.x,n[8]=D.x,n[1]=O.y,n[5]=I.y,n[9]=D.y,n[2]=O.z,n[6]=I.z,n[10]=D.z,this},multiply:function(e,t){return void 0!==t?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,t)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,t){var r=e.elements,n=t.elements,i=this.elements,a=r[0],o=r[4],s=r[8],c=r[12],l=r[1],h=r[5],u=r[9],d=r[13],p=r[2],f=r[6],m=r[10],v=r[14],g=r[3],y=r[7],x=r[11],b=r[15],w=n[0],_=n[4],M=n[8],S=n[12],T=n[1],E=n[5],A=n[9],L=n[13],R=n[2],P=n[6],C=n[10],O=n[14],I=n[3],D=n[7],N=n[11],B=n[15];return i[0]=a*w+o*T+s*R+c*I,i[4]=a*_+o*E+s*P+c*D,i[8]=a*M+o*A+s*C+c*N,i[12]=a*S+o*L+s*O+c*B,i[1]=l*w+h*T+u*R+d*I,i[5]=l*_+h*E+u*P+d*D,i[9]=l*M+h*A+u*C+d*N,i[13]=l*S+h*L+u*O+d*B,i[2]=p*w+f*T+m*R+v*I,i[6]=p*_+f*E+m*P+v*D,i[10]=p*M+f*A+m*C+v*N,i[14]=p*S+f*L+m*O+v*B,i[3]=g*w+y*T+x*R+b*I,i[7]=g*_+y*E+x*P+b*D,i[11]=g*M+y*A+x*C+b*N,i[15]=g*S+y*L+x*O+b*B,this},multiplyScalar:function(e){var t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this},applyToBufferAttribute:function(e){for(var t=0,r=e.count;t<r;t++)L.x=e.getX(t),L.y=e.getY(t),L.z=e.getZ(t),L.applyMatrix4(this),e.setXYZ(t,L.x,L.y,L.z);return e},determinant:function(){var e=this.elements,t=e[0],r=e[4],n=e[8],i=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],h=e[6],u=e[10],d=e[14];return e[3]*(+i*s*h-n*c*h-i*o*u+r*c*u+n*o*d-r*s*d)+e[7]*(+t*s*d-t*c*u+i*a*u-n*a*d+n*c*l-i*s*l)+e[11]*(+t*c*h-t*o*d-i*a*h+r*a*d+i*o*l-r*c*l)+e[15]*(-n*o*l-t*s*h+t*o*u+n*a*h-r*a*u+r*s*l)},transpose:function(){var e,t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this},setPosition:function(e,t,r){var n=this.elements;return e.isVector3?(n[12]=e.x,n[13]=e.y,n[14]=e.z):(n[12]=e,n[13]=t,n[14]=r),this},getInverse:function(e,t){var r=this.elements,n=e.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],h=n[6],u=n[7],d=n[8],p=n[9],f=n[10],m=n[11],v=n[12],g=n[13],y=n[14],x=n[15],b=p*y*u-g*f*u+g*h*m-l*y*m-p*h*x+l*f*x,w=v*f*u-d*y*u-v*h*m+c*y*m+d*h*x-c*f*x,_=d*g*u-v*p*u+v*l*m-c*g*m-d*l*x+c*p*x,M=v*p*h-d*g*h-v*l*f+c*g*f+d*l*y-c*p*y,S=i*b+a*w+o*_+s*M;if(0===S){var T="THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";if(!0===t)throw new Error(T);return console.warn(T),this.identity()}var E=1/S;return r[0]=b*E,r[1]=(g*f*s-p*y*s-g*o*m+a*y*m+p*o*x-a*f*x)*E,r[2]=(l*y*s-g*h*s+g*o*u-a*y*u-l*o*x+a*h*x)*E,r[3]=(p*h*s-l*f*s-p*o*u+a*f*u+l*o*m-a*h*m)*E,r[4]=w*E,r[5]=(d*y*s-v*f*s+v*o*m-i*y*m-d*o*x+i*f*x)*E,r[6]=(v*h*s-c*y*s-v*o*u+i*y*u+c*o*x-i*h*x)*E,r[7]=(c*f*s-d*h*s+d*o*u-i*f*u-c*o*m+i*h*m)*E,r[8]=_*E,r[9]=(v*p*s-d*g*s-v*a*m+i*g*m+d*a*x-i*p*x)*E,r[10]=(c*g*s-v*l*s+v*a*u-i*g*u-c*a*x+i*l*x)*E,r[11]=(d*l*s-c*p*s-d*a*u+i*p*u+c*a*m-i*l*m)*E,r[12]=M*E,r[13]=(d*g*o-v*p*o+v*a*f-i*g*f-d*a*y+i*p*y)*E,r[14]=(v*l*o-c*g*o-v*a*h+i*g*h+c*a*y-i*l*y)*E,r[15]=(c*p*o-d*l*o+d*a*h-i*p*h-c*a*f+i*l*f)*E,this},scale:function(e){var t=this.elements,r=e.x,n=e.y,i=e.z;return t[0]*=r,t[4]*=n,t[8]*=i,t[1]*=r,t[5]*=n,t[9]*=i,t[2]*=r,t[6]*=n,t[10]*=i,t[3]*=r,t[7]*=n,t[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],r=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,r,n))},makeTranslation:function(e,t,r){return this.set(1,0,0,e,0,1,0,t,0,0,1,r,0,0,0,1),this},makeRotationX:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(1,0,0,0,0,t,-r,0,0,r,t,0,0,0,0,1),this},makeRotationY:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,0,r,0,0,1,0,0,-r,0,t,0,0,0,0,1),this},makeRotationZ:function(e){var t=Math.cos(e),r=Math.sin(e);return this.set(t,-r,0,0,r,t,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,t){var r=Math.cos(t),n=Math.sin(t),i=1-r,a=e.x,o=e.y,s=e.z,c=i*a,l=i*o;return this.set(c*a+r,c*o-n*s,c*s+n*o,0,c*o+n*s,l*o+r,l*s-n*a,0,c*s-n*o,l*s+n*a,i*s*s+r,0,0,0,0,1),this},makeScale:function(e,t,r){return this.set(e,0,0,0,0,t,0,0,0,0,r,0,0,0,0,1),this},makeShear:function(e,t,r){return this.set(1,t,r,0,e,1,r,0,e,t,1,0,0,0,0,1),this},compose:function(e,t,r){var n=this.elements,i=t._x,a=t._y,o=t._z,s=t._w,c=i+i,l=a+a,h=o+o,u=i*c,d=i*l,p=i*h,f=a*l,m=a*h,v=o*h,g=s*c,y=s*l,x=s*h,b=r.x,w=r.y,_=r.z;return n[0]=(1-(f+v))*b,n[1]=(d+x)*b,n[2]=(p-y)*b,n[3]=0,n[4]=(d-x)*w,n[5]=(1-(u+v))*w,n[6]=(m+g)*w,n[7]=0,n[8]=(p+y)*_,n[9]=(m-g)*_,n[10]=(1-(u+f))*_,n[11]=0,n[12]=e.x,n[13]=e.y,n[14]=e.z,n[15]=1,this},decompose:function(e,t,r){var n=this.elements,i=L.set(n[0],n[1],n[2]).length(),a=L.set(n[4],n[5],n[6]).length(),o=L.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),e.x=n[12],e.y=n[13],e.z=n[14],R.copy(this);var s=1/i,c=1/a,l=1/o;return R.elements[0]*=s,R.elements[1]*=s,R.elements[2]*=s,R.elements[4]*=c,R.elements[5]*=c,R.elements[6]*=c,R.elements[8]*=l,R.elements[9]*=l,R.elements[10]*=l,t.setFromRotationMatrix(R),r.x=i,r.y=a,r.z=o,this},makePerspective:function(e,t,r,n,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*i/(t-e),c=2*i/(r-n),l=(t+e)/(t-e),h=(r+n)/(r-n),u=-(a+i)/(a-i),d=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=u,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(e,t,r,n,i,a){var o=this.elements,s=1/(t-e),c=1/(r-n),l=1/(a-i),h=(t+e)*s,u=(r+n)*c,d=(a+i)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-u,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var t=this.elements,r=e.elements,n=0;n<16;n++)if(t[n]!==r[n])return!1;return!0},fromArray:function(e,t){void 0===t&&(t=0);for(var r=0;r<16;r++)this.elements[r]=e[r+t];return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);var r=this.elements;return e[t]=r[0],e[t+1]=r[1],e[t+2]=r[2],e[t+3]=r[3],e[t+4]=r[4],e[t+5]=r[5],e[t+6]=r[6],e[t+7]=r[7],e[t+8]=r[8],e[t+9]=r[9],e[t+10]=r[10],e[t+11]=r[11],e[t+12]=r[12],e[t+13]=r[13],e[t+14]=r[14],e[t+15]=r[15],e}});var B=new N,z=new m;function F(e,t,r,n){this._x=e||0,this._y=t||0,this._z=r||0,this._order=n||F.DefaultOrder}function U(){this.mask=1}F.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],F.DefaultOrder="XYZ",Object.defineProperties(F.prototype,{x:{get:function(){return this._x},set:function(e){this._x=e,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(e){this._y=e,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(e){this._z=e,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(e){this._order=e,this._onChangeCallback()}}}),Object.assign(F.prototype,{isEuler:!0,set:function(e,t,r,n){return this._x=e,this._y=t,this._z=r,this._order=n||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this},setFromRotationMatrix:function(e,t,r){var n=p.clamp,i=e.elements,a=i[0],o=i[4],s=i[8],c=i[1],l=i[5],h=i[9],u=i[2],d=i[6],f=i[10];return"XYZ"===(t=t||this._order)?(this._y=Math.asin(n(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(d,l),this._z=0)):"YXZ"===t?(this._x=Math.asin(-n(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(s,f),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-u,a),this._z=0)):"ZXY"===t?(this._x=Math.asin(n(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===t?(this._y=Math.asin(-n(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):"YZX"===t?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-u,a)):(this._x=0,this._y=Math.atan2(s,f))):"XZY"===t?(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-h,f),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+t),this._order=t,!1!==r&&this._onChangeCallback(),this},setFromQuaternion:function(e,t,r){return B.makeRotationFromQuaternion(e),this.setFromRotationMatrix(B,t,r)},setFromVector3:function(e,t){return this.set(e.x,e.y,e.z,t||this._order)},reorder:function(e){return z.setFromEuler(this),this.setFromQuaternion(z,e)},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this._onChangeCallback(),this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new y(this._x,this._y,this._z)},_onChange:function(e){return this._onChangeCallback=e,this},_onChangeCallback:function(){}}),Object.assign(U.prototype,{set:function(e){this.mask=1<<e|0},enable:function(e){this.mask|=1<<e|0},enableAll:function(){this.mask=-1},toggle:function(e){this.mask^=1<<e|0},disable:function(e){this.mask&=~(1<<e|0)},disableAll:function(){this.mask=0},test:function(e){return 0!=(this.mask&e.mask)}});var G=0,H=new y,k=new m,j=new N,V=new y,W=new y,q=new y,X=new m,Y=new y(1,0,0),Z=new y(0,1,0),J=new y(0,0,1),K={type:"added"},Q={type:"removed"};function $(){Object.defineProperty(this,"id",{value:G++}),this.uuid=p.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=$.DefaultUp.clone();var e=new y,t=new F,r=new m,n=new y(1,1,1);t._onChange((function(){r.setFromEuler(t,!1)})),r._onChange((function(){t.setFromQuaternion(r,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:r},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new N},normalMatrix:{value:new w}}),this.matrix=new N,this.matrixWorld=new N,this.matrixAutoUpdate=$.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new U,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function ee(){$.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}$.DefaultUp=new y(0,1,0),$.DefaultMatrixAutoUpdate=!0,$.prototype=Object.assign(Object.create(h.prototype),{constructor:$,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(e){return this.quaternion.premultiply(e),this},setRotationFromAxisAngle:function(e,t){this.quaternion.setFromAxisAngle(e,t)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(e,t){return k.setFromAxisAngle(e,t),this.quaternion.multiply(k),this},rotateOnWorldAxis:function(e,t){return k.setFromAxisAngle(e,t),this.quaternion.premultiply(k),this},rotateX:function(e){return this.rotateOnAxis(Y,e)},rotateY:function(e){return this.rotateOnAxis(Z,e)},rotateZ:function(e){return this.rotateOnAxis(J,e)},translateOnAxis:function(e,t){return H.copy(e).applyQuaternion(this.quaternion),this.position.add(H.multiplyScalar(t)),this},translateX:function(e){return this.translateOnAxis(Y,e)},translateY:function(e){return this.translateOnAxis(Z,e)},translateZ:function(e){return this.translateOnAxis(J,e)},localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(e){return e.applyMatrix4(j.getInverse(this.matrixWorld))},lookAt:function(e,t,r){e.isVector3?V.copy(e):V.set(e,t,r);var n=this.parent;this.updateWorldMatrix(!0,!1),W.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?j.lookAt(W,V,this.up):j.lookAt(V,W,this.up),this.quaternion.setFromRotationMatrix(j),n&&(j.extractRotation(n.matrixWorld),k.setFromRotationMatrix(j),this.quaternion.premultiply(k.inverse()))},add:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(K)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1){for(var t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}var r=this.children.indexOf(e);return-1!==r&&(e.parent=null,this.children.splice(r,1),e.dispatchEvent(Q)),this},attach:function(e){return this.updateWorldMatrix(!0,!1),j.getInverse(this.matrixWorld),null!==e.parent&&(e.parent.updateWorldMatrix(!0,!1),j.multiply(e.parent.matrixWorld)),e.applyMatrix(j),e.updateWorldMatrix(!1,!1),this.add(e),this},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,t){if(this[e]===t)return this;for(var r=0,n=this.children.length;r<n;r++){var i=this.children[r].getObjectByProperty(e,t);if(void 0!==i)return i}},getWorldPosition:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),e=new y),this.updateMatrixWorld(!0),e.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),e=new m),this.updateMatrixWorld(!0),this.matrixWorld.decompose(W,e,q),e},getWorldScale:function(e){return void 0===e&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),e=new y),this.updateMatrixWorld(!0),this.matrixWorld.decompose(W,X,e),e},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),e=new y),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(e){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverse(e)},traverseVisible:function(e){if(!1!==this.visible){e(this);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].traverseVisible(e)}},traverseAncestors:function(e){var t=this.parent;null!==t&&(e(t),t.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var t=this.children,r=0,n=t.length;r<n;r++)t[r].updateMatrixWorld(e)},updateWorldMatrix:function(e,t){var r=this.parent;if(!0===e&&null!==r&&r.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===t)for(var n=this.children,i=0,a=n.length;i<a;i++)n[i].updateWorldMatrix(!1,!0)},toJSON:function(e){var t=void 0===e||"string"==typeof e,r={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{}},r.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var n={};function i(t,r){return void 0===t[r.uuid]&&(t[r.uuid]=r.toJSON(e)),r.uuid}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),!0===this.castShadow&&(n.castShadow=!0),!0===this.receiveShadow&&(n.receiveShadow=!0),!1===this.visible&&(n.visible=!1),!1===this.frustumCulled&&(n.frustumCulled=!1),0!==this.renderOrder&&(n.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(n.matrixAutoUpdate=!1),this.isMesh&&0!==this.drawMode&&(n.drawMode=this.drawMode),this.isMesh||this.isLine||this.isPoints){n.geometry=i(e.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,c=o.length;s<c;s++){var l=o[s];i(e.shapes,l)}else i(e.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var h=[];for(s=0,c=this.material.length;s<c;s++)h.push(i(e.materials,this.material[s]));n.material=h}else n.material=i(e.materials,this.material);if(this.children.length>0){n.children=[];for(s=0;s<this.children.length;s++)n.children.push(this.children[s].toJSON(e).object)}if(t){var u=m(e.geometries),d=m(e.materials),p=m(e.textures),f=m(e.images);o=m(e.shapes);u.length>0&&(r.geometries=u),d.length>0&&(r.materials=d),p.length>0&&(r.textures=p),f.length>0&&(r.images=f),o.length>0&&(r.shapes=o)}return r.object=n,r;function m(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,t){if(void 0===t&&(t=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),!0===t)for(var r=0;r<e.children.length;r++){var n=e.children[r];this.add(n.clone())}return this}}),ee.prototype=Object.assign(Object.create($.prototype),{constructor:ee,isScene:!0,copy:function(e,t){return $.prototype.copy.call(this,e,t),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return null!==this.background&&(t.object.background=this.background.toJSON(e)),null!==this.fog&&(t.object.fog=this.fog.toJSON()),t},dispose:function(){this.dispatchEvent({type:"dispose"})}});var te=[new y,new y,new y,new y,new y,new y,new y,new y],re=new y,ne=new y,ie=new y,ae=new y,oe=new y,se=new y,ce=new y,le=new y,he=new y,ue=new y,de=new y;function pe(e,t){this.min=void 0!==e?e:new y(1/0,1/0,1/0),this.max=void 0!==t?t:new y(-1/0,-1/0,-1/0)}function fe(e,t,r,n,i){var a,o;for(a=0,o=e.length-3;a<=o;a+=3){de.fromArray(e,a);var s=i.x*Math.abs(de.x)+i.y*Math.abs(de.y)+i.z*Math.abs(de.z),c=t.dot(de),l=r.dot(de),h=n.dot(de);if(Math.max(-Math.max(c,l,h),Math.min(c,l,h))>s)return!1}return!0}Object.assign(pe.prototype,{isBox3:!0,set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromArray:function(e){for(var t=1/0,r=1/0,n=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.length;s<c;s+=3){var l=e[s],h=e[s+1],u=e[s+2];l<t&&(t=l),h<r&&(r=h),u<n&&(n=u),l>i&&(i=l),h>a&&(a=h),u>o&&(o=u)}return this.min.set(t,r,n),this.max.set(i,a,o),this},setFromBufferAttribute:function(e){for(var t=1/0,r=1/0,n=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=e.count;s<c;s++){var l=e.getX(s),h=e.getY(s),u=e.getZ(s);l<t&&(t=l),h<r&&(r=h),u<n&&(n=u),l>i&&(i=l),h>a&&(a=h),u>o&&(o=u)}return this.min.set(t,r,n),this.max.set(i,a,o),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var r=re.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this},setFromObject:function(e){return this.makeEmpty(),this.expandByObject(e)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box3: .getCenter() target is now required"),e=new y),this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box3: .getSize() target is now required"),e=new y),this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},expandByObject:function(e){var t,r;e.updateWorldMatrix(!1,!1);var n=e.geometry;if(void 0!==n)if(n.isGeometry){var i=n.vertices;for(t=0,r=i.length;t<r;t++)re.copy(i[t]),re.applyMatrix4(e.matrixWorld),this.expandByPoint(re)}else if(n.isBufferGeometry){var a=n.attributes.position;if(void 0!==a)for(t=0,r=a.count;t<r;t++)re.fromBufferAttribute(a,t).applyMatrix4(e.matrixWorld),this.expandByPoint(re)}var o=e.children;for(t=0,r=o.length;t<r;t++)this.expandByObject(o[t]);return this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .getParameter() target is now required"),t=new y),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(e){return this.clampPoint(e.center,re),re.distanceToSquared(e.center)<=e.radius*e.radius},intersectsPlane:function(e){var t,r;return e.normal.x>0?(t=e.normal.x*this.min.x,r=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,r=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,r+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,r+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,r+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,r+=e.normal.z*this.min.z),t<=-e.constant&&r>=-e.constant},intersectsTriangle:function(e){if(this.isEmpty())return!1;this.getCenter(le),he.subVectors(this.max,le),ne.subVectors(e.a,le),ie.subVectors(e.b,le),ae.subVectors(e.c,le),oe.subVectors(ie,ne),se.subVectors(ae,ie),ce.subVectors(ne,ae);var t=[0,-oe.z,oe.y,0,-se.z,se.y,0,-ce.z,ce.y,oe.z,0,-oe.x,se.z,0,-se.x,ce.z,0,-ce.x,-oe.y,oe.x,0,-se.y,se.x,0,-ce.y,ce.x,0];return!!fe(t,ne,ie,ae,he)&&(!!fe(t=[1,0,0,0,1,0,0,0,1],ne,ie,ae,he)&&(ue.crossVectors(oe,se),fe(t=[ue.x,ue.y,ue.z],ne,ie,ae,he)))},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box3: .clampPoint() target is now required"),t=new y),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return re.copy(e).clamp(this.min,this.max).sub(e).length()},getBoundingSphere:function(e){return void 0===e&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(e.center),e.radius=.5*this.getSize(re).length(),e},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(e){return this.isEmpty()||(te[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),te[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),te[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),te[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),te[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),te[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),te[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),te[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(te)),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var me=new pe;function ve(e,t){this.center=void 0!==e?e:new y,this.radius=void 0!==t?t:0}Object.assign(ve.prototype,{set:function(e,t){return this.center.copy(e),this.radius=t,this},setFromPoints:function(e,t){var r=this.center;void 0!==t?r.copy(t):me.setFromPoints(e).getCenter(r);for(var n=0,i=0,a=e.length;i<a;i++)n=Math.max(n,r.distanceToSquared(e[i]));return this.radius=Math.sqrt(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius},clampPoint:function(e,t){var r=this.center.distanceToSquared(e);return void 0===t&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),t=new y),t.copy(e),r>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t},getBoundingBox:function(e){return void 0===e&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),e=new pe),e.set(this.center,this.center),e.expandByScalar(this.radius),e},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}});var ge=new y,ye=new y,xe=new y,be=new y,we=new y,_e=new y,Me=new y;function Se(e,t){this.origin=void 0!==e?e:new y,this.direction=void 0!==t?t:new y}Object.assign(Se.prototype,{set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){return void 0===t&&(console.warn("THREE.Ray: .at() target is now required"),t=new y),t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(e){return this.origin.copy(this.at(e,ge)),this},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),t=new y),t.subVectors(e,this.origin);var r=t.dot(this.direction);return r<0?t.copy(this.origin):t.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(e){var t=ge.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ge.copy(this.direction).multiplyScalar(t).add(this.origin),ge.distanceToSquared(e))},distanceSqToSegment:function(e,t,r,n){ye.copy(e).add(t).multiplyScalar(.5),xe.copy(t).sub(e).normalize(),be.copy(this.origin).sub(ye);var i,a,o,s,c=.5*e.distanceTo(t),l=-this.direction.dot(xe),h=be.dot(this.direction),u=-be.dot(xe),d=be.lengthSq(),p=Math.abs(1-l*l);if(p>0)if(a=l*h-u,s=c*p,(i=l*u-h)>=0)if(a>=-s)if(a<=s){var f=1/p;o=(i*=f)*(i+l*(a*=f)+2*h)+a*(l*i+a+2*u)+d}else a=c,o=-(i=Math.max(0,-(l*a+h)))*i+a*(a+2*u)+d;else a=-c,o=-(i=Math.max(0,-(l*a+h)))*i+a*(a+2*u)+d;else a<=-s?o=-(i=Math.max(0,-(-l*c+h)))*i+(a=i>0?-c:Math.min(Math.max(-c,-u),c))*(a+2*u)+d:a<=s?(i=0,o=(a=Math.min(Math.max(-c,-u),c))*(a+2*u)+d):o=-(i=Math.max(0,-(l*c+h)))*i+(a=i>0?c:Math.min(Math.max(-c,-u),c))*(a+2*u)+d;else a=l>0?-c:c,o=-(i=Math.max(0,-(l*a+h)))*i+a*(a+2*u)+d;return r&&r.copy(this.direction).multiplyScalar(i).add(this.origin),n&&n.copy(xe).multiplyScalar(a).add(ye),o},intersectSphere:function(e,t){ge.subVectors(e.center,this.origin);var r=ge.dot(this.direction),n=ge.dot(ge)-r*r,i=e.radius*e.radius;if(n>i)return null;var a=Math.sqrt(i-n),o=r-a,s=r+a;return o<0&&s<0?null:o<0?this.at(s,t):this.at(o,t)},intersectsSphere:function(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0===t)return 0===e.distanceToPoint(this.origin)?0:null;var r=-(this.origin.dot(e.normal)+e.constant)/t;return r>=0?r:null},intersectPlane:function(e,t){var r=this.distanceToPlane(e);return null===r?null:this.at(r,t)},intersectsPlane:function(e){var t=e.distanceToPoint(this.origin);return 0===t||e.normal.dot(this.direction)*t<0},intersectBox:function(e,t){var r,n,i,a,o,s,c=1/this.direction.x,l=1/this.direction.y,h=1/this.direction.z,u=this.origin;return c>=0?(r=(e.min.x-u.x)*c,n=(e.max.x-u.x)*c):(r=(e.max.x-u.x)*c,n=(e.min.x-u.x)*c),l>=0?(i=(e.min.y-u.y)*l,a=(e.max.y-u.y)*l):(i=(e.max.y-u.y)*l,a=(e.min.y-u.y)*l),r>a||i>n?null:((i>r||r!=r)&&(r=i),(a<n||n!=n)&&(n=a),h>=0?(o=(e.min.z-u.z)*h,s=(e.max.z-u.z)*h):(o=(e.max.z-u.z)*h,s=(e.min.z-u.z)*h),r>s||o>n?null:((o>r||r!=r)&&(r=o),(s<n||n!=n)&&(n=s),n<0?null:this.at(r>=0?r:n,t)))},intersectsBox:function(e){return null!==this.intersectBox(e,ge)},intersectTriangle:function(e,t,r,n,i){we.subVectors(t,e),_e.subVectors(r,e),Me.crossVectors(we,_e);var a,o=this.direction.dot(Me);if(o>0){if(n)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}be.subVectors(this.origin,e);var s=a*this.direction.dot(_e.crossVectors(be,_e));if(s<0)return null;var c=a*this.direction.dot(we.cross(be));if(c<0)return null;if(s+c>o)return null;var l=-a*be.dot(Me);return l<0?null:this.at(l/o,i)},applyMatrix4:function(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}});var Te=new y,Ee=new y,Ae=new y,Le=new y,Re=new y,Pe=new y,Ce=new y,Oe=new y,Ie=new y,De=new y;function Ne(e,t,r){this.a=void 0!==e?e:new y,this.b=void 0!==t?t:new y,this.c=void 0!==r?r:new y}Object.assign(Ne,{getNormal:function(e,t,r,n){void 0===n&&(console.warn("THREE.Triangle: .getNormal() target is now required"),n=new y),n.subVectors(r,t),Te.subVectors(e,t),n.cross(Te);var i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)},getBarycoord:function(e,t,r,n,i){Te.subVectors(n,t),Ee.subVectors(r,t),Ae.subVectors(e,t);var a=Te.dot(Te),o=Te.dot(Ee),s=Te.dot(Ae),c=Ee.dot(Ee),l=Ee.dot(Ae),h=a*c-o*o;if(void 0===i&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),i=new y),0===h)return i.set(-2,-1,-1);var u=1/h,d=(c*s-o*l)*u,p=(a*l-o*s)*u;return i.set(1-d-p,p,d)},containsPoint:function(e,t,r,n){return Ne.getBarycoord(e,t,r,n,Le),Le.x>=0&&Le.y>=0&&Le.x+Le.y<=1},getUV:function(e,t,r,n,i,a,o,s){return this.getBarycoord(e,t,r,n,Le),s.set(0,0),s.addScaledVector(i,Le.x),s.addScaledVector(a,Le.y),s.addScaledVector(o,Le.z),s},isFrontFacing:function(e,t,r,n){return Te.subVectors(r,t),Ee.subVectors(e,t),Te.cross(Ee).dot(n)<0}}),Object.assign(Ne.prototype,{set:function(e,t,r){return this.a.copy(e),this.b.copy(t),this.c.copy(r),this},setFromPointsAndIndices:function(e,t,r,n){return this.a.copy(e[t]),this.b.copy(e[r]),this.c.copy(e[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},getArea:function(){return Te.subVectors(this.c,this.b),Ee.subVectors(this.a,this.b),.5*Te.cross(Ee).length()},getMidpoint:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),e=new y),e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(e){return Ne.getNormal(this.a,this.b,this.c,e)},getPlane:function(e){return void 0===e&&(console.warn("THREE.Triangle: .getPlane() target is now required"),e=new y),e.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(e,t){return Ne.getBarycoord(e,this.a,this.b,this.c,t)},getUV:function(e,t,r,n,i){return Ne.getUV(e,this.a,this.b,this.c,t,r,n,i)},containsPoint:function(e){return Ne.containsPoint(e,this.a,this.b,this.c)},isFrontFacing:function(e){return Ne.isFrontFacing(this.a,this.b,this.c,e)},intersectsBox:function(e){return e.intersectsTriangle(this)},closestPointToPoint:function(e,t){void 0===t&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),t=new y);var r,n,i=this.a,a=this.b,o=this.c;Re.subVectors(a,i),Pe.subVectors(o,i),Oe.subVectors(e,i);var s=Re.dot(Oe),c=Pe.dot(Oe);if(s<=0&&c<=0)return t.copy(i);Ie.subVectors(e,a);var l=Re.dot(Ie),h=Pe.dot(Ie);if(l>=0&&h<=l)return t.copy(a);var u=s*h-l*c;if(u<=0&&s>=0&&l<=0)return r=s/(s-l),t.copy(i).addScaledVector(Re,r);De.subVectors(e,o);var d=Re.dot(De),p=Pe.dot(De);if(p>=0&&d<=p)return t.copy(o);var f=d*c-s*p;if(f<=0&&c>=0&&p<=0)return n=c/(c-p),t.copy(i).addScaledVector(Pe,n);var m=l*p-d*h;if(m<=0&&h-l>=0&&d-p>=0)return Ce.subVectors(o,a),n=(h-l)/(h-l+(d-p)),t.copy(a).addScaledVector(Ce,n);var v=1/(m+f+u);return r=f*v,n=u*v,t.copy(i).addScaledVector(Re,r).addScaledVector(Pe,n)},equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}});var Be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ze={h:0,s:0,l:0},Fe={h:0,s:0,l:0};function Ue(e,t,r){return void 0===t&&void 0===r?this.set(e):this.setRGB(e,t,r)}function Ge(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+6*(t-e)*r:r<.5?t:r<2/3?e+6*(t-e)*(2/3-r):e}function He(e){return e<.04045?.0773993808*e:Math.pow(.9478672986*e+.0521327014,2.4)}function ke(e){return e<.0031308?12.92*e:1.055*Math.pow(e,.41666)-.055}function je(e,t,r,n,i,a){this.a=e,this.b=t,this.c=r,this.normal=n&&n.isVector3?n:new y,this.vertexNormals=Array.isArray(n)?n:[],this.color=i&&i.isColor?i:new Ue,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0}Object.assign(Ue.prototype,{isColor:!0,r:1,g:1,b:1,set:function(e){return e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){return this.r=e,this.g=e,this.b=e,this},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,t,r){return this.r=e,this.g=t,this.b=r,this},setHSL:function(e,t,r){if(e=p.euclideanModulo(e,1),t=p.clamp(t,0,1),r=p.clamp(r,0,1),0===t)this.r=this.g=this.b=r;else{var n=r<=.5?r*(1+t):r+t-r*t,i=2*r-n;this.r=Ge(i,n,e+1/3),this.g=Ge(i,n,e),this.b=Ge(i,n,e-1/3)}return this},setStyle:function(e){function t(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var r;if(r=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var n,i=r[1],a=r[2];switch(i){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,t(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,t(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return t(n[5]),this.setHSL(o,s,c)}}}else if(r=/^\#([A-Fa-f0-9]+)$/.exec(e)){var l,h=(l=r[1]).length;if(3===h)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}e&&e.length>0&&(void 0!==(l=Be[e])?this.setHex(l):console.warn("THREE.Color: Unknown color "+e));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,t){return void 0===t&&(t=2),this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},copyLinearToGamma:function(e,t){void 0===t&&(t=2);var r=t>0?1/t:1;return this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},convertGammaToLinear:function(e){return this.copyGammaToLinear(this,e),this},convertLinearToGamma:function(e){return this.copyLinearToGamma(this,e),this},copySRGBToLinear:function(e){return this.r=He(e.r),this.g=He(e.g),this.b=He(e.b),this},copyLinearToSRGB:function(e){return this.r=ke(e.r),this.g=ke(e.g),this.b=ke(e.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){void 0===e&&(console.warn("THREE.Color: .getHSL() target is now required"),e={h:0,s:0,l:0});var t,r,n=this.r,i=this.g,a=this.b,o=Math.max(n,i,a),s=Math.min(n,i,a),c=(s+o)/2;if(s===o)t=0,r=0;else{var l=o-s;switch(r=c<=.5?l/(o+s):l/(2-o-s),o){case n:t=(i-a)/l+(i<a?6:0);break;case i:t=(a-n)/l+2;break;case a:t=(n-i)/l+4}t/=6}return e.h=t,e.s=r,e.l=c,e},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,t,r){return this.getHSL(ze),ze.h+=e,ze.s+=t,ze.l+=r,this.setHSL(ze.h,ze.s,ze.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},sub:function(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this},lerpHSL:function(e,t){this.getHSL(ze),e.getHSL(Fe);var r=p.lerp(ze.h,Fe.h,t),n=p.lerp(ze.s,Fe.s,t),i=p.lerp(ze.l,Fe.l,t);return this.setHSL(r,n,i),this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,t){return void 0===t&&(t=0),this.r=e[t],this.g=e[t+1],this.b=e[t+2],this},toArray:function(e,t){return void 0===e&&(e=[]),void 0===t&&(t=0),e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e},toJSON:function(){return this.getHex()}}),Object.assign(je.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(t=0,r=e.vertexColors.length;t<r;t++)this.vertexColors[t]=e.vertexColors[t].clone();return this}});var Ve=0;function We(){Object.defineProperty(this,"id",{value:Ve++}),this.uuid=p.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.flatShading=!1,this.vertexTangents=!1,this.vertexColors=0,this.opacity=1,this.transparent=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.needsUpdate=!0}function qe(e){We.call(this),this.type="MeshBasicMaterial",this.color=new Ue(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(e)}function Xe(e,t,r){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=e,this.itemSize=t,this.count=void 0!==e?e.length/t:0,this.normalized=!0===r,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function Ye(e,t,r){Xe.call(this,new Int8Array(e),t,r)}function Ze(e,t,r){Xe.call(this,new Uint8Array(e),t,r)}function Je(e,t,r){Xe.call(this,new Uint8ClampedArray(e),t,r)}function Ke(e,t,r){Xe.call(this,new Int16Array(e),t,r)}function Qe(e,t,r){Xe.call(this,new Uint16Array(e),t,r)}function $e(e,t,r){Xe.call(this,new Int32Array(e),t,r)}function et(e,t,r){Xe.call(this,new Uint32Array(e),t,r)}function tt(e,t,r){Xe.call(this,new Float32Array(e),t,r)}function rt(e,t,r){Xe.call(this,new Float64Array(e),t,r)}function nt(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function it(e){if(0===e.length)return-1/0;for(var t=e[0],r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t}We.prototype=Object.assign(Object.create(h.prototype),{constructor:We,isMaterial:!0,onBeforeCompile:function(){},setValues:function(e){if(void 0!==e)for(var t in e){var r=e[t];if(void 0!==r)if("shading"!==t){var n=this[t];void 0!==n?n&&n.isColor?n.set(r):n&&n.isVector3&&r&&r.isVector3?n.copy(r):this[t]=r:console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===r;else console.warn("THREE.Material: '"+t+"' parameter is undefined.")}},toJSON:function(e){var t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{}});var r={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function n(e){var t=[];for(var r in e){var n=e[r];delete n.metadata,t.push(n)}return t}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),this.color&&this.color.isColor&&(r.color=this.color.getHex()),void 0!==this.roughness&&(r.roughness=this.roughness),void 0!==this.metalness&&(r.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(r.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(r.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(r.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(r.specular=this.specular.getHex()),void 0!==this.shininess&&(r.shininess=this.shininess),void 0!==this.clearcoat&&(r.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(r.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(r.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,r.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(r.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(r.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(r.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(r.lightMap=this.lightMap.toJSON(e).uuid),this.aoMap&&this.aoMap.isTexture&&(r.aoMap=this.aoMap.toJSON(e).uuid,r.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(r.bumpMap=this.bumpMap.toJSON(e).uuid,r.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(r.normalMap=this.normalMap.toJSON(e).uuid,r.normalMapType=this.normalMapType,r.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(r.displacementMap=this.displacementMap.toJSON(e).uuid,r.displacementScale=this.displacementScale,r.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(r.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(r.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(r.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(r.specularMap=this.specularMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(r.envMap=this.envMap.toJSON(e).uuid,r.reflectivity=this.reflectivity,r.refractionRatio=this.refractionRatio,void 0!==this.combine&&(r.combine=this.combine),void 0!==this.envMapIntensity&&(r.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(r.gradientMap=this.gradientMap.toJSON(e).uuid),void 0!==this.size&&(r.size=this.size),void 0!==this.sizeAttenuation&&(r.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(r.blending=this.blending),!0===this.flatShading&&(r.flatShading=this.flatShading),0!==this.side&&(r.side=this.side),0!==this.vertexColors&&(r.vertexColors=this.vertexColors),this.opacity<1&&(r.opacity=this.opacity),!0===this.transparent&&(r.transparent=this.transparent),r.depthFunc=this.depthFunc,r.depthTest=this.depthTest,r.depthWrite=this.depthWrite,r.stencilWrite=this.stencilWrite,r.stencilWriteMask=this.stencilWriteMask,r.stencilFunc=this.stencilFunc,r.stencilRef=this.stencilRef,r.stencilFuncMask=this.stencilFuncMask,r.stencilFail=this.stencilFail,r.stencilZFail=this.stencilZFail,r.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(r.rotation=this.rotation),!0===this.polygonOffset&&(r.polygonOffset=!0),0!==this.polygonOffsetFactor&&(r.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(r.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(r.linewidth=this.linewidth),void 0!==this.dashSize&&(r.dashSize=this.dashSize),void 0!==this.gapSize&&(r.gapSize=this.gapSize),void 0!==this.scale&&(r.scale=this.scale),!0===this.dithering&&(r.dithering=!0),this.alphaTest>0&&(r.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(r.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(r.wireframe=this.wireframe),this.wireframeLinewidth>1&&(r.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(r.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(r.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(r.morphTargets=!0),!0===this.morphNormals&&(r.morphNormals=!0),!0===this.skinning&&(r.skinning=!0),!1===this.visible&&(r.visible=!1),!1===this.toneMapped&&(r.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),t){var i=n(e.textures),a=n(e.images);i.length>0&&(r.textures=i),a.length>0&&(r.images=a)}return r},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.blending=e.blending,this.side=e.side,this.flatShading=e.flatShading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWrite=e.stencilWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this.clipShadows=e.clipShadows,this.clipIntersection=e.clipIntersection;var t=e.clippingPlanes,r=null;if(null!==t){var n=t.length;r=new Array(n);for(var i=0;i!==n;++i)r[i]=t[i].clone()}return this.clippingPlanes=r,this.shadowSide=e.shadowSide,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),qe.prototype=Object.create(We.prototype),qe.prototype.constructor=qe,qe.prototype.isMeshBasicMaterial=!0,qe.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},Object.defineProperty(Xe.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(Xe.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.itemSize,r*=t.itemSize;for(var n=0,i=this.itemSize;n<i;n++)this.array[e+n]=t.array[r+n];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new Ue),t[r++]=a.r,t[r++]=a.g,t[r++]=a.b}return this},copyVector2sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new f),t[r++]=a.x,t[r++]=a.y}return this},copyVector3sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new y),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z}return this},copyVector4sArray:function(e){for(var t=this.array,r=0,n=0,i=e.length;n<i;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new T),t[r++]=a.x,t[r++]=a.y,t[r++]=a.z,t[r++]=a.w}return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,t){return this.array[e*this.itemSize]=t,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,t){return this.array[e*this.itemSize+1]=t,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,t){return this.array[e*this.itemSize+2]=t,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,t){return this.array[e*this.itemSize+3]=t,this},setXY:function(e,t,r){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e*=this.itemSize,this.array[e+0]=t,this.array[e+1]=r,this.array[e+2]=n,this.array[e+3]=i,this},onUpload:function(e){return this.onUploadCallback=e,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),Ye.prototype=Object.create(Xe.prototype),Ye.prototype.constructor=Ye,Ze.prototype=Object.create(Xe.prototype),Ze.prototype.constructor=Ze,Je.prototype=Object.create(Xe.prototype),Je.prototype.constructor=Je,Ke.prototype=Object.create(Xe.prototype),Ke.prototype.constructor=Ke,Qe.prototype=Object.create(Xe.prototype),Qe.prototype.constructor=Qe,$e.prototype=Object.create(Xe.prototype),$e.prototype.constructor=$e,et.prototype=Object.create(Xe.prototype),et.prototype.constructor=et,tt.prototype=Object.create(Xe.prototype),tt.prototype.constructor=tt,rt.prototype=Object.create(Xe.prototype),rt.prototype.constructor=rt,Object.assign(nt.prototype,{computeGroups:function(e){for(var t,r=[],n=void 0,i=e.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==n&&(n=o.materialIndex,void 0!==t&&(t.count=3*a-t.start,r.push(t)),t={start:3*a,materialIndex:n})}void 0!==t&&(t.count=3*a-t.start,r.push(t)),this.groups=r},fromGeometry:function(e){var t,r=e.faces,n=e.vertices,i=e.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){t=[];for(var l=0;l<c;l++)t[l]={name:s[l].name,data:[]};this.morphTargets.position=t}var h,u=e.morphNormals,d=u.length;if(d>0){h=[];for(l=0;l<d;l++)h[l]={name:u[l].name,data:[]};this.morphTargets.normal=h}var p=e.skinIndices,m=e.skinWeights,v=p.length===n.length,g=m.length===n.length;n.length>0&&0===r.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(l=0;l<r.length;l++){var y=r[l];this.vertices.push(n[y.a],n[y.b],n[y.c]);var x=y.vertexNormals;if(3===x.length)this.normals.push(x[0],x[1],x[2]);else{var b=y.normal;this.normals.push(b,b,b)}var w,_=y.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var M=y.color;this.colors.push(M,M,M)}if(!0===a)void 0!==(w=i[0][l])?this.uvs.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",l),this.uvs.push(new f,new f,new f));if(!0===o)void 0!==(w=i[1][l])?this.uvs2.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",l),this.uvs2.push(new f,new f,new f));for(var S=0;S<c;S++){var T=s[S].vertices;t[S].data.push(T[y.a],T[y.b],T[y.c])}for(S=0;S<d;S++){var E=u[S].vertexNormals[l];h[S].data.push(E.a,E.b,E.c)}v&&this.skinIndices.push(p[y.a],p[y.b],p[y.c]),g&&this.skinWeights.push(m[y.a],m[y.b],m[y.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}});var at=1,ot=new N,st=new $,ct=new y,lt=new pe,ht=new pe,ut=new y;function dt(){Object.defineProperty(this,"id",{value:at+=2}),this.uuid=p.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}dt.prototype=Object.assign(Object.create(h.prototype),{constructor:dt,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(e){Array.isArray(e)?this.index=new(it(e)>65535?et:Qe)(e,1):this.index=e},addAttribute:function(e,t){return t&&t.isBufferAttribute||t&&t.isInterleavedBufferAttribute?"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(e,t):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(e,new Xe(arguments[1],arguments[2])))},getAttribute:function(e){return this.attributes[e]},setAttribute:function(e,t){return this.attributes[e]=t,this},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,t,r){this.groups.push({start:e,count:t,materialIndex:void 0!==r?r:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,t){this.drawRange.start=e,this.drawRange.count=t},applyMatrix:function(e){var t=this.attributes.position;void 0!==t&&(e.applyToBufferAttribute(t),t.needsUpdate=!0);var r=this.attributes.normal;void 0!==r&&((new w).getNormalMatrix(e).applyToBufferAttribute(r),r.needsUpdate=!0);var n=this.attributes.tangent;void 0!==n&&((new w).getNormalMatrix(e).applyToBufferAttribute(n),n.needsUpdate=!0);return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(e){return ot.makeRotationX(e),this.applyMatrix(ot),this},rotateY:function(e){return ot.makeRotationY(e),this.applyMatrix(ot),this},rotateZ:function(e){return ot.makeRotationZ(e),this.applyMatrix(ot),this},translate:function(e,t,r){return ot.makeTranslation(e,t,r),this.applyMatrix(ot),this},scale:function(e,t,r){return ot.makeScale(e,t,r),this.applyMatrix(ot),this},lookAt:function(e){return st.lookAt(e),st.updateMatrix(),this.applyMatrix(st.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(ct).negate(),this.translate(ct.x,ct.y,ct.z),this},setFromObject:function(e){var t=e.geometry;if(e.isPoints||e.isLine){var r=new tt(3*t.vertices.length,3),n=new tt(3*t.colors.length,3);if(this.addAttribute("position",r.copyVector3sArray(t.vertices)),this.addAttribute("color",n.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){var i=new tt(t.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(t.lineDistances))}null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone())}else e.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(e){for(var t=[],r=0,n=e.length;r<n;r++){var i=e[r];t.push(i.x,i.y,i.z||0)}return this.addAttribute("position",new tt(t,3)),this},updateFromObject:function(e){var t,r=e.geometry;if(e.isMesh){var n=r.__directGeometry;if(!0===r.elementsNeedUpdate&&(n=void 0,r.elementsNeedUpdate=!1),void 0===n)return this.fromGeometry(r);n.verticesNeedUpdate=r.verticesNeedUpdate,n.normalsNeedUpdate=r.normalsNeedUpdate,n.colorsNeedUpdate=r.colorsNeedUpdate,n.uvsNeedUpdate=r.uvsNeedUpdate,n.groupsNeedUpdate=r.groupsNeedUpdate,r.verticesNeedUpdate=!1,r.normalsNeedUpdate=!1,r.colorsNeedUpdate=!1,r.uvsNeedUpdate=!1,r.groupsNeedUpdate=!1,r=n}return!0===r.verticesNeedUpdate&&(void 0!==(t=this.attributes.position)&&(t.copyVector3sArray(r.vertices),t.needsUpdate=!0),r.verticesNeedUpdate=!1),!0===r.normalsNeedUpdate&&(void 0!==(t=this.attributes.normal)&&(t.copyVector3sArray(r.normals),t.needsUpdate=!0),r.normalsNeedUpdate=!1),!0===r.colorsNeedUpdate&&(void 0!==(t=this.attributes.color)&&(t.copyColorsArray(r.colors),t.needsUpdate=!0),r.colorsNeedUpdate=!1),r.uvsNeedUpdate&&(void 0!==(t=this.attributes.uv)&&(t.copyVector2sArray(r.uvs),t.needsUpdate=!0),r.uvsNeedUpdate=!1),r.lineDistancesNeedUpdate&&(void 0!==(t=this.attributes.lineDistance)&&(t.copyArray(r.lineDistances),t.needsUpdate=!0),r.lineDistancesNeedUpdate=!1),r.groupsNeedUpdate&&(r.computeGroups(e.geometry),this.groups=r.groups,r.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new nt).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var t=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new Xe(t,3).copyVector3sArray(e.vertices)),e.normals.length>0){var r=new Float32Array(3*e.normals.length);this.addAttribute("normal",new Xe(r,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var n=new Float32Array(3*e.colors.length);this.addAttribute("color",new Xe(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new Xe(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new Xe(a,2).copyVector2sArray(e.uvs2))}for(var o in this.groups=e.groups,e.morphTargets){for(var s=[],c=e.morphTargets[o],l=0,h=c.length;l<h;l++){var u=c[l],d=new tt(3*u.data.length,3);d.name=u.name,s.push(d.copyVector3sArray(u.data))}this.morphAttributes[o]=s}if(e.skinIndices.length>0){var p=new tt(4*e.skinIndices.length,4);this.addAttribute("skinIndex",p.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var f=new tt(4*e.skinWeights.length,4);this.addAttribute("skinWeight",f.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new pe);var e=this.attributes.position,t=this.morphAttributes.position;if(void 0!==e){if(this.boundingBox.setFromBufferAttribute(e),t)for(var r=0,n=t.length;r<n;r++){var i=t[r];lt.setFromBufferAttribute(i),this.boundingBox.expandByPoint(lt.min),this.boundingBox.expandByPoint(lt.max)}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new ve);var e=this.attributes.position,t=this.morphAttributes.position;if(e){var r=this.boundingSphere.center;if(lt.setFromBufferAttribute(e),t)for(var n=0,i=t.length;n<i;n++){var a=t[n];ht.setFromBufferAttribute(a),lt.expandByPoint(ht.min),lt.expandByPoint(ht.max)}lt.getCenter(r);var o=0;for(n=0,i=e.count;n<i;n++)ut.fromBufferAttribute(e,n),o=Math.max(o,r.distanceToSquared(ut));if(t)for(n=0,i=t.length;n<i;n++)for(var s=0,c=(a=t[n]).count;s<c;s++)ut.fromBufferAttribute(a,s),o=Math.max(o,r.distanceToSquared(ut));this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,t=this.attributes;if(t.position){var r=t.position.array;if(void 0===t.normal)this.addAttribute("normal",new Xe(new Float32Array(r.length),3));else for(var n=t.normal.array,i=0,a=n.length;i<a;i++)n[i]=0;var o,s,c,l=t.normal.array,h=new y,u=new y,d=new y,p=new y,f=new y;if(e){var m=e.array;for(i=0,a=e.count;i<a;i+=3)o=3*m[i+0],s=3*m[i+1],c=3*m[i+2],h.fromArray(r,o),u.fromArray(r,s),d.fromArray(r,c),p.subVectors(d,u),f.subVectors(h,u),p.cross(f),l[o]+=p.x,l[o+1]+=p.y,l[o+2]+=p.z,l[s]+=p.x,l[s+1]+=p.y,l[s+2]+=p.z,l[c]+=p.x,l[c+1]+=p.y,l[c+2]+=p.z}else for(i=0,a=r.length;i<a;i+=9)h.fromArray(r,i),u.fromArray(r,i+3),d.fromArray(r,i+6),p.subVectors(d,u),f.subVectors(h,u),p.cross(f),l[i]=p.x,l[i+1]=p.y,l[i+2]=p.z,l[i+3]=p.x,l[i+4]=p.y,l[i+5]=p.z,l[i+6]=p.x,l[i+7]=p.y,l[i+8]=p.z;this.normalizeNormals(),t.normal.needsUpdate=!0}},merge:function(e,t){if(e&&e.isBufferGeometry){void 0===t&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var r=this.attributes;for(var n in r)if(void 0!==e.attributes[n])for(var i=r[n].array,a=e.attributes[n],o=a.array,s=a.itemSize*t,c=Math.min(o.length,i.length-s),l=0,h=s;l<c;l++,h++)i[h]=o[l];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e)},normalizeNormals:function(){for(var e=this.attributes.normal,t=0,r=e.count;t<r;t++)ut.x=e.getX(t),ut.y=e.getY(t),ut.z=e.getZ(t),ut.normalize(),e.setXYZ(t,ut.x,ut.y,ut.z)},toNonIndexed:function(){function e(e,t){for(var r=e.array,n=e.itemSize,i=new r.constructor(t.length*n),a=0,o=0,s=0,c=t.length;s<c;s++){a=t[s]*n;for(var l=0;l<n;l++)i[o++]=r[a++]}return new Xe(i,n)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var t=new dt,r=this.index.array,n=this.attributes;for(var i in n){var a=e(n[i],r);t.addAttribute(i,a)}var o=this.morphAttributes;for(i in o){for(var s=[],c=o[i],l=0,h=c.length;l<h;l++){a=e(c[l],r);s.push(a)}t.morphAttributes[i]=s}for(var u=this.groups,d=(l=0,u.length);l<d;l++){var p=u[l];t.addGroup(p.start,p.count,p.materialIndex)}return t},toJSON:function(){var e={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}e.data={attributes:{}};var n=this.index;null!==n&&(e.data.index={type:n.array.constructor.name,array:Array.prototype.slice.call(n.array)});var i=this.attributes;for(var r in i){var a=(d=i[r]).toJSON();""!==d.name&&(a.name=d.name),e.data.attributes[r]=a}var o={},s=!1;for(var r in this.morphAttributes){for(var c=this.morphAttributes[r],l=[],h=0,u=c.length;h<u;h++){var d;a=(d=c[h]).toJSON();""!==d.name&&(a.name=d.name),l.push(a)}l.length>0&&(o[r]=l,s=!0)}s&&(e.data.morphAttributes=o);var p=this.groups;p.length>0&&(e.data.groups=JSON.parse(JSON.stringify(p)));var f=this.boundingSphere;return null!==f&&(e.data.boundingSphere={center:f.center.toArray(),radius:f.radius}),e},clone:function(){return(new dt).copy(this)},copy:function(e){var t,r,n;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var i=e.index;null!==i&&this.setIndex(i.clone());var a=e.attributes;for(t in a){var o=a[t];this.addAttribute(t,o.clone())}var s=e.morphAttributes;for(t in s){var c=[],l=s[t];for(r=0,n=l.length;r<n;r++)c.push(l[r].clone());this.morphAttributes[t]=c}var h=e.groups;for(r=0,n=h.length;r<n;r++){var u=h[r];this.addGroup(u.start,u.count,u.materialIndex)}var d=e.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=e.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var pt=new N,ft=new Se,mt=new ve,vt=new y,gt=new y,yt=new y,xt=new y,bt=new y,wt=new y,_t=new y,Mt=new y,St=new y,Tt=new f,Et=new f,At=new f,Lt=new y,Rt=new y;function Pt(e,t){$.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new qe({color:16777215*Math.random()}),this.drawMode=0,this.updateMorphTargets()}function Ct(e,t,r,n,i,a,o,s){if(null===(1===t.side?n.intersectTriangle(o,a,i,!0,s):n.intersectTriangle(i,a,o,2!==t.side,s)))return null;Rt.copy(s),Rt.applyMatrix4(e.matrixWorld);var c=r.ray.origin.distanceTo(Rt);return c<r.near||c>r.far?null:{distance:c,point:Rt.clone(),object:e}}function Ot(e,t,r,n,i,a,o,s,c,l,h){vt.fromBufferAttribute(i,c),gt.fromBufferAttribute(i,l),yt.fromBufferAttribute(i,h);var u=e.morphTargetInfluences;if(t.morphTargets&&a&&u){_t.set(0,0,0),Mt.set(0,0,0),St.set(0,0,0);for(var d=0,p=a.length;d<p;d++){var m=u[d],v=a[d];0!==m&&(xt.fromBufferAttribute(v,c),bt.fromBufferAttribute(v,l),wt.fromBufferAttribute(v,h),_t.addScaledVector(xt.sub(vt),m),Mt.addScaledVector(bt.sub(gt),m),St.addScaledVector(wt.sub(yt),m))}vt.add(_t),gt.add(Mt),yt.add(St)}var g=Ct(e,t,r,n,vt,gt,yt,Lt);if(g){o&&(Tt.fromBufferAttribute(o,c),Et.fromBufferAttribute(o,l),At.fromBufferAttribute(o,h),g.uv=Ne.getUV(Lt,vt,gt,yt,Tt,Et,At,new f)),s&&(Tt.fromBufferAttribute(s,c),Et.fromBufferAttribute(s,l),At.fromBufferAttribute(s,h),g.uv2=Ne.getUV(Lt,vt,gt,yt,Tt,Et,At,new f));var y=new je(c,l,h);Ne.getNormal(vt,gt,yt,y.normal),g.face=y}return g}Pt.prototype=Object.assign(Object.create($.prototype),{constructor:Pt,isMesh:!0,setDrawMode:function(e){this.drawMode=e},copy:function(e){return $.prototype.copy.call(this,e),this.drawMode=e.drawMode,void 0!==e.morphTargetInfluences&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),void 0!==e.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this},updateMorphTargets:function(){var e,t,r,n=this.geometry;if(n.isBufferGeometry){var i=n.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)r=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}}else{var s=n.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(e,t){var r,n=this.geometry,i=this.material,a=this.matrixWorld;if(void 0!==i&&(null===n.boundingSphere&&n.computeBoundingSphere(),mt.copy(n.boundingSphere),mt.applyMatrix4(a),!1!==e.ray.intersectsSphere(mt)&&(pt.getInverse(a),ft.copy(e.ray).applyMatrix4(pt),null===n.boundingBox||!1!==ft.intersectsBox(n.boundingBox))))if(n.isBufferGeometry){var o,s,c,l,h,u,d,p,m,v=n.index,g=n.attributes.position,y=n.morphAttributes.position,x=n.attributes.uv,b=n.attributes.uv2,w=n.groups,_=n.drawRange;if(null!==v)if(Array.isArray(i))for(l=0,u=w.length;l<u;l++)for(m=i[(p=w[l]).materialIndex],h=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);h<d;h+=3)o=v.getX(h),s=v.getX(h+1),c=v.getX(h+2),(r=Ot(this,m,e,ft,g,y,x,b,o,s,c))&&(r.faceIndex=Math.floor(h/3),r.face.materialIndex=p.materialIndex,t.push(r));else for(l=Math.max(0,_.start),u=Math.min(v.count,_.start+_.count);l<u;l+=3)o=v.getX(l),s=v.getX(l+1),c=v.getX(l+2),(r=Ot(this,i,e,ft,g,y,x,b,o,s,c))&&(r.faceIndex=Math.floor(l/3),t.push(r));else if(void 0!==g)if(Array.isArray(i))for(l=0,u=w.length;l<u;l++)for(m=i[(p=w[l]).materialIndex],h=Math.max(p.start,_.start),d=Math.min(p.start+p.count,_.start+_.count);h<d;h+=3)(r=Ot(this,m,e,ft,g,y,x,b,o=h,s=h+1,c=h+2))&&(r.faceIndex=Math.floor(h/3),r.face.materialIndex=p.materialIndex,t.push(r));else for(l=Math.max(0,_.start),u=Math.min(g.count,_.start+_.count);l<u;l+=3)(r=Ot(this,i,e,ft,g,y,x,b,o=l,s=l+1,c=l+2))&&(r.faceIndex=Math.floor(l/3),t.push(r))}else if(n.isGeometry){var M,S,T,E,A=Array.isArray(i),L=n.vertices,R=n.faces,P=n.faceVertexUvs[0];P.length>0&&(E=P);for(var C=0,O=R.length;C<O;C++){var I=R[C],D=A?i[I.materialIndex]:i;if(void 0!==D&&(M=L[I.a],S=L[I.b],T=L[I.c],r=Ct(this,D,e,ft,M,S,T,Lt))){if(E&&E[C]){var N=E[C];Tt.copy(N[0]),Et.copy(N[1]),At.copy(N[2]),r.uv=Ne.getUV(Lt,M,S,T,Tt,Et,At,new f)}r.face=I,r.faceIndex=C,t.push(r)}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var It=0,Dt=new N,Nt=new $,Bt=new y;function zt(){Object.defineProperty(this,"id",{value:It+=2}),this.uuid=p.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}zt.prototype=Object.assign(Object.create(h.prototype),{constructor:zt,isGeometry:!0,applyMatrix:function(e){for(var t=(new w).getNormalMatrix(e),r=0,n=this.vertices.length;r<n;r++){this.vertices[r].applyMatrix4(e)}for(r=0,n=this.faces.length;r<n;r++){var i=this.faces[r];i.normal.applyMatrix3(t).normalize();for(var a=0,o=i.vertexNormals.length;a<o;a++)i.vertexNormals[a].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(e){return Dt.makeRotationX(e),this.applyMatrix(Dt),this},rotateY:function(e){return Dt.makeRotationY(e),this.applyMatrix(Dt),this},rotateZ:function(e){return Dt.makeRotationZ(e),this.applyMatrix(Dt),this},translate:function(e,t,r){return Dt.makeTranslation(e,t,r),this.applyMatrix(Dt),this},scale:function(e,t,r){return Dt.makeScale(e,t,r),this.applyMatrix(Dt),this},lookAt:function(e){return Nt.lookAt(e),Nt.updateMatrix(),this.applyMatrix(Nt.matrix),this},fromBufferGeometry:function(e){var t=this,r=null!==e.index?e.index.array:void 0,n=e.attributes;if(void 0===n.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var i=n.position.array,a=void 0!==n.normal?n.normal.array:void 0,o=void 0!==n.color?n.color.array:void 0,s=void 0!==n.uv?n.uv.array:void 0,c=void 0!==n.uv2?n.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var l=0;l<i.length;l+=3)t.vertices.push((new y).fromArray(i,l)),void 0!==o&&t.colors.push((new Ue).fromArray(o,l));function h(e,r,n,i){var l=void 0===o?[]:[t.colors[e].clone(),t.colors[r].clone(),t.colors[n].clone()],h=new je(e,r,n,void 0===a?[]:[(new y).fromArray(a,3*e),(new y).fromArray(a,3*r),(new y).fromArray(a,3*n)],l,i);t.faces.push(h),void 0!==s&&t.faceVertexUvs[0].push([(new f).fromArray(s,2*e),(new f).fromArray(s,2*r),(new f).fromArray(s,2*n)]),void 0!==c&&t.faceVertexUvs[1].push([(new f).fromArray(c,2*e),(new f).fromArray(c,2*r),(new f).fromArray(c,2*n)])}var u=e.groups;if(u.length>0)for(l=0;l<u.length;l++)for(var d=u[l],p=d.start,m=p,v=p+d.count;m<v;m+=3)void 0!==r?h(r[m],r[m+1],r[m+2],d.materialIndex):h(m,m+1,m+2,d.materialIndex);else if(void 0!==r)for(l=0;l<r.length;l+=3)h(r[l],r[l+1],r[l+2]);else for(l=0;l<i.length/3;l+=3)h(l,l+1,l+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Bt).negate(),this.translate(Bt.x,Bt.y,Bt.z),this},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,n=new N;return n.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var e=new y,t=new y,r=0,n=this.faces.length;r<n;r++){var i=this.faces[r],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,o),t.subVectors(a,o),e.cross(t),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){var t,r,n,i,a,o;for(void 0===e&&(e=!0),o=new Array(this.vertices.length),t=0,r=this.vertices.length;t<r;t++)o[t]=new y;if(e){var s,c,l,h=new y,u=new y;for(n=0,i=this.faces.length;n<i;n++)a=this.faces[n],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],h.subVectors(l,c),u.subVectors(s,c),h.cross(u),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(this.computeFaceNormals(),n=0,i=this.faces.length;n<i;n++)o[(a=this.faces[n]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(t=0,r=this.vertices.length;t<r;t++)o[t].normalize();for(n=0,i=this.faces.length;n<i;n++){var d=(a=this.faces[n]).vertexNormals;3===d.length?(d[0].copy(o[a.a]),d[1].copy(o[a.b]),d[2].copy(o[a.c])):(d[0]=o[a.a].clone(),d[1]=o[a.b].clone(),d[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var e,t,r;for(this.computeFaceNormals(),e=0,t=this.faces.length;e<t;e++){var n=(r=this.faces[e]).vertexNormals;3===n.length?(n[0].copy(r.normal),n[1].copy(r.normal),n[2].copy(r.normal)):(n[0]=r.normal.clone(),n[1]=r.normal.clone(),n[2]=r.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,t,r,n,i;for(r=0,n=this.faces.length;r<n;r++)for((i=this.faces[r]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,t=i.vertexNormals.length;e<t;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var a=new zt;for(a.faces=this.faces,e=0,t=this.morphTargets.length;e<t;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o=this.morphNormals[e].faceNormals,s=this.morphNormals[e].vertexNormals;for(r=0,n=this.faces.length;r<n;r++)c=new y,l={a:new y,b:new y,c:new y},o.push(c),s.push(l)}var c,l,h=this.morphNormals[e];for(a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals(),r=0,n=this.faces.length;r<n;r++)i=this.faces[r],c=h.faceNormals[r],l=h.vertexNormals[r],c.copy(i.normal),l.a.copy(i.vertexNormals[0]),l.b.copy(i.vertexNormals[1]),l.c.copy(i.vertexNormals[2])}for(r=0,n=this.faces.length;r<n;r++)(i=this.faces[r]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new pe),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new ve),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,t,r){if(e&&e.isGeometry){var n,i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.colors,h=e.colors;void 0===r&&(r=0),void 0!==t&&(n=(new w).getNormalMatrix(t));for(var u=0,d=o.length;u<d;u++){var p=o[u].clone();void 0!==t&&p.applyMatrix4(t),a.push(p)}for(u=0,d=h.length;u<d;u++)l.push(h[u].clone());for(u=0,d=c.length;u<d;u++){var f,m,v,g=c[u],y=g.vertexNormals,x=g.vertexColors;(f=new je(g.a+i,g.b+i,g.c+i)).normal.copy(g.normal),void 0!==n&&f.normal.applyMatrix3(n).normalize();for(var b=0,_=y.length;b<_;b++)m=y[b].clone(),void 0!==n&&m.applyMatrix3(n).normalize(),f.vertexNormals.push(m);f.color.copy(g.color);for(b=0,_=x.length;b<_;b++)v=x[b],f.vertexColors.push(v.clone());f.materialIndex=g.materialIndex+r,s.push(f)}for(u=0,d=e.faceVertexUvs.length;u<d;u++){var M=e.faceVertexUvs[u];void 0===this.faceVertexUvs[u]&&(this.faceVertexUvs[u]=[]);for(b=0,_=M.length;b<_;b++){for(var S=M[b],T=[],E=0,A=S.length;E<A;E++)T.push(S[E].clone());this.faceVertexUvs[u].push(T)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},mergeMesh:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},mergeVertices:function(){var e,t,r,n,i,a,o,s,c={},l=[],h=[],u=Math.pow(10,4);for(r=0,n=this.vertices.length;r<n;r++)e=this.vertices[r],void 0===c[t=Math.round(e.x*u)+"_"+Math.round(e.y*u)+"_"+Math.round(e.z*u)]?(c[t]=r,l.push(this.vertices[r]),h[r]=l.length-1):h[r]=h[c[t]];var d=[];for(r=0,n=this.faces.length;r<n;r++){(i=this.faces[r]).a=h[i.a],i.b=h[i.b],i.c=h[i.c],a=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(a[p]===a[(p+1)%3]){d.push(r);break}}for(r=d.length-1;r>=0;r--){var f=d[r];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-l.length;return this.vertices=l,m},setFromPoints:function(e){this.vertices=[];for(var t=0,r=e.length;t<r;t++){var n=e[t];this.vertices.push(new y(n.x,n.y,n.z||0))}return this},sortFacesByMaterialIndex:function(){for(var e=this.faces,t=e.length,r=0;r<t;r++)e[r]._id=r;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var n,i,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===t&&(n=[]),o&&o.length===t&&(i=[]);for(r=0;r<t;r++){var s=e[r]._id;n&&n.push(a[s]),i&&i.push(o[s])}n&&(this.faceVertexUvs[0]=n),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}for(var n=[],i=0;i<this.vertices.length;i++){var a=this.vertices[i];n.push(a.x,a.y,a.z)}var o=[],s=[],c={},l=[],h={},u=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),o.push(x),o.push(p.a,p.b,p.c),o.push(p.materialIndex),f){var b=this.faceVertexUvs[0][i];o.push(E(b[0]),E(b[1]),E(b[2]))}if(m&&o.push(S(p.normal)),v){var w=p.vertexNormals;o.push(S(w[0]),S(w[1]),S(w[2]))}if(g&&o.push(T(p.color)),y){var _=p.vertexColors;o.push(T(_[0]),T(_[1]),T(_[2]))}}function M(e,t,r){return r?e|1<<t:e&~(1<<t)}function S(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==c[t]||(c[t]=s.length/3,s.push(e.x,e.y,e.z)),c[t]}function T(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==h[t]||(h[t]=l.length,l.push(e.getHex())),h[t]}function E(e){var t=e.x.toString()+e.y.toString();return void 0!==d[t]||(d[t]=u.length/2,u.push(e.x,e.y)),d[t]}return e.data={},e.data.vertices=n,e.data.normals=s,l.length>0&&(e.data.colors=l),u.length>0&&(e.data.uvs=[u]),e.data.faces=o,e},clone:function(){return(new zt).copy(this)},copy:function(e){var t,r,n,i,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;var s=e.vertices;for(t=0,r=s.length;t<r;t++)this.vertices.push(s[t].clone());var c=e.colors;for(t=0,r=c.length;t<r;t++)this.colors.push(c[t].clone());var l=e.faces;for(t=0,r=l.length;t<r;t++)this.faces.push(l[t].clone());for(t=0,r=e.faceVertexUvs.length;t<r;t++){var h=e.faceVertexUvs[t];for(void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]),n=0,i=h.length;n<i;n++){var u=h[n],d=[];for(a=0,o=u.length;a<o;a++){var p=u[a];d.push(p.clone())}this.faceVertexUvs[t].push(d)}}var f=e.morphTargets;for(t=0,r=f.length;t<r;t++){var m={};if(m.name=f[t].name,void 0!==f[t].vertices)for(m.vertices=[],n=0,i=f[t].vertices.length;n<i;n++)m.vertices.push(f[t].vertices[n].clone());if(void 0!==f[t].normals)for(m.normals=[],n=0,i=f[t].normals.length;n<i;n++)m.normals.push(f[t].normals[n].clone());this.morphTargets.push(m)}var v=e.morphNormals;for(t=0,r=v.length;t<r;t++){var g={};if(void 0!==v[t].vertexNormals)for(g.vertexNormals=[],n=0,i=v[t].vertexNormals.length;n<i;n++){var y=v[t].vertexNormals[n],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[t].faceNormals)for(g.faceNormals=[],n=0,i=v[t].faceNormals.length;n<i;n++)g.faceNormals.push(v[t].faceNormals[n].clone());this.morphNormals.push(g)}var b=e.skinWeights;for(t=0,r=b.length;t<r;t++)this.skinWeights.push(b[t].clone());var w=e.skinIndices;for(t=0,r=w.length;t<r;t++)this.skinIndices.push(w[t].clone());var _=e.lineDistances;for(t=0,r=_.length;t<r;t++)this.lineDistances.push(_[t]);var M=e.boundingBox;null!==M&&(this.boundingBox=M.clone());var S=e.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var Ft=function(e){function t(t,r,n,i,a,o){e.call(this),this.type="BoxGeometry",this.parameters={width:t,height:r,depth:n,widthSegments:i,heightSegments:a,depthSegments:o},this.fromBufferGeometry(new Ut(t,r,n,i,a,o)),this.mergeVertices()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(zt),Ut=function(e){function t(t,r,n,i,a,o){e.call(this),this.type="BoxBufferGeometry",this.parameters={width:t,height:r,depth:n,widthSegments:i,heightSegments:a,depthSegments:o};var s=this;t=t||1,r=r||1,n=n||1,i=Math.floor(i)||1,a=Math.floor(a)||1,o=Math.floor(o)||1;var c=[],l=[],h=[],u=[],d=0,p=0;function f(e,t,r,n,i,a,o,f,m,v,g){var x,b,w=a/m,_=o/v,M=a/2,S=o/2,T=f/2,E=m+1,A=v+1,L=0,R=0,P=new y;for(b=0;b<A;b++){var C=b*_-S;for(x=0;x<E;x++){var O=x*w-M;P[e]=O*n,P[t]=C*i,P[r]=T,l.push(P.x,P.y,P.z),P[e]=0,P[t]=0,P[r]=f>0?1:-1,h.push(P.x,P.y,P.z),u.push(x/m),u.push(1-b/v),L+=1}}for(b=0;b<v;b++)for(x=0;x<m;x++){var I=d+x+E*b,D=d+x+E*(b+1),N=d+(x+1)+E*(b+1),B=d+(x+1)+E*b;c.push(I,D,B),c.push(D,N,B),R+=6}s.addGroup(p,R,g),p+=R,d+=L}f("z","y","x",-1,-1,n,r,t,o,a,0),f("z","y","x",1,-1,n,r,-t,o,a,1),f("x","z","y",1,1,t,n,r,i,o,2),f("x","z","y",1,-1,t,n,-r,i,o,3),f("x","y","z",1,-1,t,r,n,i,a,4),f("x","y","z",-1,-1,t,r,-n,i,a,5),this.setIndex(c),this.addAttribute("position",new tt(l,3)),this.addAttribute("normal",new tt(h,3)),this.addAttribute("uv",new tt(u,2))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(dt);function Gt(e){var t={};for(var r in e)for(var n in t[r]={},e[r]){var i=e[r][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?t[r][n]=i.clone():Array.isArray(i)?t[r][n]=i.slice():t[r][n]=i}return t}function Ht(e){for(var t={},r=0;r<e.length;r++){var n=Gt(e[r]);for(var i in n)t[i]=n[i]}return t}var kt={clone:Gt,merge:Ht};function jt(e){We.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))}function Vt(){$.call(this),this.type="Camera",this.matrixWorldInverse=new N,this.projectionMatrix=new N,this.projectionMatrixInverse=new N}function Wt(e,t,r,n){Vt.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==r?r:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==t?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}jt.prototype=Object.create(We.prototype),jt.prototype.constructor=jt,jt.prototype.isShaderMaterial=!0,jt.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Gt(e.uniforms),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},jt.prototype.toJSON=function(e){var t=We.prototype.toJSON.call(this,e);for(var r in t.uniforms={},this.uniforms){var n=this.uniforms[r].value;n&&n.isTexture?t.uniforms[r]={type:"t",value:n.toJSON(e).uuid}:n&&n.isColor?t.uniforms[r]={type:"c",value:n.getHex()}:n&&n.isVector2?t.uniforms[r]={type:"v2",value:n.toArray()}:n&&n.isVector3?t.uniforms[r]={type:"v3",value:n.toArray()}:n&&n.isVector4?t.uniforms[r]={type:"v4",value:n.toArray()}:n&&n.isMatrix3?t.uniforms[r]={type:"m3",value:n.toArray()}:n&&n.isMatrix4?t.uniforms[r]={type:"m4",value:n.toArray()}:t.uniforms[r]={value:n}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;var i={};for(var a in this.extensions)!0===this.extensions[a]&&(i[a]=!0);return Object.keys(i).length>0&&(t.extensions=i),t},Vt.prototype=Object.assign(Object.create($.prototype),{constructor:Vt,isCamera:!0,copy:function(e,t){return $.prototype.copy.call(this,e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this},getWorldDirection:function(e){void 0===e&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),e=new y),this.updateMatrixWorld(!0);var t=this.matrixWorld.elements;return e.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(e){$.prototype.updateMatrixWorld.call(this,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),Wt.prototype=Object.assign(Object.create(Vt.prototype),{constructor:Wt,isPerspectiveCamera:!0,copy:function(e,t){return Vt.prototype.copy.call(this,e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var t=.5*this.getFilmHeight()/e;this.fov=2*p.RAD2DEG*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*p.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*p.RAD2DEG*Math.atan(Math.tan(.5*p.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,t,r,n,i,a){this.aspect=e/t,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,t=e*Math.tan(.5*p.DEG2RAD*this.fov)/this.zoom,r=2*t,n=this.aspect*r,i=-.5*n,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*n/o,t-=a.offsetY*r/s,n*=a.width/o,r*=a.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+n,t,t-r,e,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,null!==this.view&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});function qt(e,t,r,n){$.call(this),this.type="CubeCamera";var i=new Wt(90,1,e,t);i.up.set(0,-1,0),i.lookAt(new y(1,0,0)),this.add(i);var a=new Wt(90,1,e,t);a.up.set(0,-1,0),a.lookAt(new y(-1,0,0)),this.add(a);var o=new Wt(90,1,e,t);o.up.set(0,0,1),o.lookAt(new y(0,1,0)),this.add(o);var s=new Wt(90,1,e,t);s.up.set(0,0,-1),s.lookAt(new y(0,-1,0)),this.add(s);var c=new Wt(90,1,e,t);c.up.set(0,-1,0),c.lookAt(new y(0,0,1)),this.add(c);var l=new Wt(90,1,e,t);l.up.set(0,-1,0),l.lookAt(new y(0,0,-1)),this.add(l),n=n||{format:1022,magFilter:1006,minFilter:1006},this.renderTarget=new Xt(r,r,n),this.renderTarget.texture.name="CubeCamera",this.update=function(e,t){null===this.parent&&this.updateMatrixWorld();var r=e.getRenderTarget(),n=this.renderTarget,h=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0),e.render(t,i),e.setRenderTarget(n,1),e.render(t,a),e.setRenderTarget(n,2),e.render(t,o),e.setRenderTarget(n,3),e.render(t,s),e.setRenderTarget(n,4),e.render(t,c),n.texture.generateMipmaps=h,e.setRenderTarget(n,5),e.render(t,l),e.setRenderTarget(r)},this.clear=function(e,t,r,n){for(var i=e.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)e.setRenderTarget(a,o),e.clear(t,r,n);e.setRenderTarget(i)}}function Xt(e,t,r){E.call(this,e,t,r)}function Yt(e,t,r,n,i,a,o,s,c,l,h,u){S.call(this,null,a,o,s,c,l,n,i,h,u),this.image={data:e||null,width:t||1,height:r||1},this.magFilter=void 0!==c?c:1003,this.minFilter=void 0!==l?l:1003,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}qt.prototype=Object.create($.prototype),qt.prototype.constructor=qt,Xt.prototype=Object.create(E.prototype),Xt.prototype.constructor=Xt,Xt.prototype.isWebGLRenderTargetCube=!0,Xt.prototype.fromEquirectangularTexture=function(e,t){this.texture.type=t.type,this.texture.format=t.format,this.texture.encoding=t.encoding;var r=new ee,n={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},i=new jt({type:"CubemapFromEquirect",uniforms:Gt(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:1,blending:0});i.uniforms.tEquirect.value=t;var a=new Pt(new Ut(5,5,5),i);r.add(a);var o=new qt(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(e,r),a.geometry.dispose(),a.material.dispose(),this},Yt.prototype=Object.create(S.prototype),Yt.prototype.constructor=Yt,Yt.prototype.isDataTexture=!0;var Zt=new y,Jt=new y,Kt=new w;function Qt(e,t){this.normal=void 0!==e?e:new y(1,0,0),this.constant=void 0!==t?t:0}Object.assign(Qt.prototype,{isPlane:!0,set:function(e,t){return this.normal.copy(e),this.constant=t,this},setComponents:function(e,t,r,n){return this.normal.set(e,t,r),this.constant=n,this},setFromNormalAndCoplanarPoint:function(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this},setFromCoplanarPoints:function(e,t,r){var n=Zt.subVectors(r,t).cross(Jt.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(n,e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,t){return void 0===t&&(console.warn("THREE.Plane: .projectPoint() target is now required"),t=new y),t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e)},intersectLine:function(e,t){void 0===t&&(console.warn("THREE.Plane: .intersectLine() target is now required"),t=new y);var r=e.delta(Zt),n=this.normal.dot(r);if(0===n)return 0===this.distanceToPoint(e.start)?t.copy(e.start):void 0;var i=-(e.start.dot(this.normal)+this.constant)/n;return i<0||i>1?void 0:t.copy(r).multiplyScalar(i).add(e.start)},intersectsLine:function(e){var t=this.distanceToPoint(e.start),r=this.distanceToPoint(e.end);return t<0&&r>0||r<0&&t>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){return void 0===e&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),e=new y),e.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(e,t){var r=t||Kt.getNormalMatrix(e),n=this.coplanarPoint(Zt).applyMatrix4(e),i=this.normal.applyMatrix3(r).normalize();return this.constant=-n.dot(i),this},translate:function(e){return this.constant-=e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}});var $t=new ve,er=new y;function tr(e,t,r,n,i,a){this.planes=[void 0!==e?e:new Qt,void 0!==t?t:new Qt,void 0!==r?r:new Qt,void 0!==n?n:new Qt,void 0!==i?i:new Qt,void 0!==a?a:new Qt]}Object.assign(tr.prototype,{set:function(e,t,r,n,i,a){var o=this.planes;return o[0].copy(e),o[1].copy(t),o[2].copy(r),o[3].copy(n),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var t=this.planes,r=0;r<6;r++)t[r].copy(e.planes[r]);return this},setFromMatrix:function(e){var t=this.planes,r=e.elements,n=r[0],i=r[1],a=r[2],o=r[3],s=r[4],c=r[5],l=r[6],h=r[7],u=r[8],d=r[9],p=r[10],f=r[11],m=r[12],v=r[13],g=r[14],y=r[15];return t[0].setComponents(o-n,h-s,f-u,y-m).normalize(),t[1].setComponents(o+n,h+s,f+u,y+m).normalize(),t[2].setComponents(o+i,h+c,f+d,y+v).normalize(),t[3].setComponents(o-i,h-c,f-d,y-v).normalize(),t[4].setComponents(o-a,h-l,f-p,y-g).normalize(),t[5].setComponents(o+a,h+l,f+p,y+g).normalize(),this},intersectsObject:function(e){var t=e.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),$t.copy(t.boundingSphere).applyMatrix4(e.matrixWorld),this.intersectsSphere($t)},intersectsSprite:function(e){return $t.center.set(0,0,0),$t.radius=.7071067811865476,$t.applyMatrix4(e.matrixWorld),this.intersectsSphere($t)},intersectsSphere:function(e){for(var t=this.planes,r=e.center,n=-e.radius,i=0;i<6;i++){if(t[i].distanceToPoint(r)<n)return!1}return!0},intersectsBox:function(e){for(var t=this.planes,r=0;r<6;r++){var n=t[r];if(er.x=n.normal.x>0?e.max.x:e.min.x,er.y=n.normal.y>0?e.max.y:e.min.y,er.z=n.normal.z>0?e.max.z:e.min.z,n.distanceToPoint(er)<0)return!1}return!0},containsPoint:function(e){for(var t=this.planes,r=0;r<6;r++)if(t[r].distanceToPoint(e)<0)return!1;return!0}});var rr={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 1.0 ? log2( vFragDepth ) * logDepthBufFC * 0.5 : gl_FragCoord.z;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, normalScale, normalMap );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 normalScale, in sampler2D normalMap ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy *= normalScale;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tbool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\t\t\tmapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\t\t#else\n\t\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = clearcoatNormalScale * mapN.xy;\n\t\tclearcoatNormal = normalize( vTBN * mapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatNormalScale, clearcoatNormalMap );\n\t#endif\n#endif",clearcoat_normalmap_pars_fragment:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 encodeHalfRGBA ( vec2 v ) {\n\tvec4 encoded = vec4( 0.0 );\n\tconst vec2 offset = vec2( 1.0 / 255.0, 0.0 );\n\tencoded.xy = vec2( v.x, fract( v.x * 255.0 ) );\n\tencoded.xy = encoded.xy - ( encoded.yy * offset );\n\tencoded.zw = vec2( v.y, fract( v.y * 255.0 ) );\n\tencoded.zw = encoded.zw - ( encoded.ww * offset );\n\treturn encoded;\n}\nvec2 decodeHalfRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn decodeHalfRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#ifdef USE_UV\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},nr={common:{diffuse:{value:new Ue(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new w},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new f(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ue(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Ue(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new w}},sprite:{diffuse:{value:new Ue(15658734)},opacity:{value:1},center:{value:new f(.5,.5)},rotation:{value:0},map:{value:null},uvTransform:{value:new w}}},ir={basic:{uniforms:Ht([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.fog]),vertexShader:rr.meshbasic_vert,fragmentShader:rr.meshbasic_frag},lambert:{uniforms:Ht([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.fog,nr.lights,{emissive:{value:new Ue(0)}}]),vertexShader:rr.meshlambert_vert,fragmentShader:rr.meshlambert_frag},phong:{uniforms:Ht([nr.common,nr.specularmap,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.gradientmap,nr.fog,nr.lights,{emissive:{value:new Ue(0)},specular:{value:new Ue(1118481)},shininess:{value:30}}]),vertexShader:rr.meshphong_vert,fragmentShader:rr.meshphong_frag},standard:{uniforms:Ht([nr.common,nr.envmap,nr.aomap,nr.lightmap,nr.emissivemap,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.roughnessmap,nr.metalnessmap,nr.fog,nr.lights,{emissive:{value:new Ue(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:rr.meshphysical_vert,fragmentShader:rr.meshphysical_frag},matcap:{uniforms:Ht([nr.common,nr.bumpmap,nr.normalmap,nr.displacementmap,nr.fog,{matcap:{value:null}}]),vertexShader:rr.meshmatcap_vert,fragmentShader:rr.meshmatcap_frag},points:{uniforms:Ht([nr.points,nr.fog]),vertexShader:rr.points_vert,fragmentShader:rr.points_frag},dashed:{uniforms:Ht([nr.common,nr.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:rr.linedashed_vert,fragmentShader:rr.linedashed_frag},depth:{uniforms:Ht([nr.common,nr.displacementmap]),vertexShader:rr.depth_vert,fragmentShader:rr.depth_frag},normal:{uniforms:Ht([nr.common,nr.bumpmap,nr.normalmap,nr.displacementmap,{opacity:{value:1}}]),vertexShader:rr.normal_vert,fragmentShader:rr.normal_frag},sprite:{uniforms:Ht([nr.sprite,nr.fog]),vertexShader:rr.sprite_vert,fragmentShader:rr.sprite_frag},background:{uniforms:{uvTransform:{value:new w},t2D:{value:null}},vertexShader:rr.background_vert,fragmentShader:rr.background_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:rr.cube_vert,fragmentShader:rr.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:rr.equirect_vert,fragmentShader:rr.equirect_frag},distanceRGBA:{uniforms:Ht([nr.common,nr.displacementmap,{referencePosition:{value:new y},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:rr.distanceRGBA_vert,fragmentShader:rr.distanceRGBA_frag},shadow:{uniforms:Ht([nr.lights,nr.fog,{color:{value:new Ue(0)},opacity:{value:1}}]),vertexShader:rr.shadow_vert,fragmentShader:rr.shadow_frag}};function ar(){var e=null,t=!1,r=null;function n(i,a){!1!==t&&(r(i,a),e.requestAnimationFrame(n))}return{start:function(){!0!==t&&null!==r&&(e.requestAnimationFrame(n),t=!0)},stop:function(){t=!1},setAnimationLoop:function(e){r=e},setContext:function(t){e=t}}}function or(e){var t=new WeakMap;return{get:function(e){return e.isInterleavedBufferAttribute&&(e=e.data),t.get(e)},remove:function(r){r.isInterleavedBufferAttribute&&(r=r.data);var n=t.get(r);n&&(e.deleteBuffer(n.buffer),t.delete(r))},update:function(r,n){r.isInterleavedBufferAttribute&&(r=r.data);var i=t.get(r);void 0===i?t.set(r,function(t,r){var n=t.array,i=t.dynamic?35048:35044,a=e.createBuffer();e.bindBuffer(r,a),e.bufferData(r,n,i),t.onUploadCallback();var o=5126;return n instanceof Float32Array?o=5126:n instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):n instanceof Uint16Array?o=5123:n instanceof Int16Array?o=5122:n instanceof Uint32Array?o=5125:n instanceof Int32Array?o=5124:n instanceof Int8Array?o=5120:n instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:n.BYTES_PER_ELEMENT,version:t.version}}(r,n)):i.version<r.version&&(!function(t,r,n){var i=r.array,a=r.updateRange;e.bindBuffer(n,t),!1===r.dynamic?e.bufferData(n,i,35044):-1===a.count?e.bufferSubData(n,0,i):0===a.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(n,a.offset*i.BYTES_PER_ELEMENT,i.subarray(a.offset,a.offset+a.count)),a.count=-1)}(i.buffer,r,n),i.version=r.version)}}}function sr(e,t,r,n){zt.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n},this.fromBufferGeometry(new cr(e,t,r,n)),this.mergeVertices()}function cr(e,t,r,n){dt.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:t,widthSegments:r,heightSegments:n};var i,a,o=(e=e||1)/2,s=(t=t||1)/2,c=Math.floor(r)||1,l=Math.floor(n)||1,h=c+1,u=l+1,d=e/c,p=t/l,f=[],m=[],v=[],g=[];for(a=0;a<u;a++){var y=a*p-s;for(i=0;i<h;i++){var x=i*d-o;m.push(x,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-a/l)}}for(a=0;a<l;a++)for(i=0;i<c;i++){var b=i+h*a,w=i+h*(a+1),_=i+1+h*(a+1),M=i+1+h*a;f.push(b,w,M),f.push(w,_,M)}this.setIndex(f),this.addAttribute("position",new tt(m,3)),this.addAttribute("normal",new tt(v,3)),this.addAttribute("uv",new tt(g,2))}function lr(e,t,r,n){var i,a,o=new Ue(0),s=0,c=null,l=0;function h(e,r){t.buffers.color.setClear(e.r,e.g,e.b,r,n)}return{getClearColor:function(){return o},setClearColor:function(e,t){o.set(e),h(o,s=void 0!==t?t:1)},getClearAlpha:function(){return s},setClearAlpha:function(e){h(o,s=e)},render:function(t,n,u,d){var p=n.background,f=e.vr,m=f.getSession&&f.getSession();if(m&&"additive"===m.environmentBlendMode&&(p=null),null===p?(h(o,s),c=null,l=0):p&&p.isColor&&(h(p,1),d=!0,c=null,l=0),(e.autoClear||d)&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),p&&(p.isCubeTexture||p.isWebGLRenderTargetCube)){void 0===a&&((a=new Pt(new Ut(1,1,1),new jt({type:"BackgroundCubeMaterial",uniforms:Gt(ir.cube.uniforms),vertexShader:ir.cube.vertexShader,fragmentShader:ir.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),a.geometry.removeAttribute("uv"),a.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)},Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.tCube.value}}),r.update(a));var v=p.isWebGLRenderTargetCube?p.texture:p;a.material.uniforms.tCube.value=v,a.material.uniforms.tFlip.value=p.isWebGLRenderTargetCube?1:-1,c===p&&l===v.version||(a.material.needsUpdate=!0,c=p,l=v.version),t.unshift(a,a.geometry,a.material,0,0,null)}else p&&p.isTexture&&(void 0===i&&((i=new Pt(new cr(2,2),new jt({type:"BackgroundMaterial",uniforms:Gt(ir.background.uniforms),vertexShader:ir.background.vertexShader,fragmentShader:ir.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.removeAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),r.update(i)),i.material.uniforms.t2D.value=p,!0===p.matrixAutoUpdate&&p.updateMatrix(),i.material.uniforms.uvTransform.value.copy(p.matrix),c===p&&l===p.version||(i.material.needsUpdate=!0,c=p,l=p.version),t.unshift(i,i.geometry,i.material,0,0,null))}}}function hr(e,t,r,n){var i;this.setMode=function(e){i=e},this.render=function(t,n){e.drawArrays(i,t,n),r.update(n,i)},this.renderInstances=function(a,o,s,c){if(0!==c){var l,h;if(n.isWebGL2)l=e,h="drawArraysInstanced";else if(h="drawArraysInstancedANGLE",null===(l=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[h](i,o,s,c),r.update(s,i,c)}}}function ur(e,t,r){var n;function i(t){if("highp"===t){if(e.getShaderPrecisionFormat(35633,36338).precision>0&&e.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(35633,36337).precision>0&&e.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext,o=void 0!==r.precision?r.precision:"highp",s=i(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var c=!0===r.logarithmicDepthBuffer,l=e.getParameter(34930),h=e.getParameter(35660),u=e.getParameter(3379),d=e.getParameter(34076),p=e.getParameter(34921),f=e.getParameter(36347),m=e.getParameter(36348),v=e.getParameter(36349),g=h>0,y=a||!!t.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==n)return n;var r=t.get("EXT_texture_filter_anisotropic");return n=null!==r?e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:c,maxTextures:l,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:a?e.getParameter(36183):0}}function dr(){var e=this,t=null,r=0,n=!1,i=!1,a=new Qt,o=new w,s={value:null,needsUpdate:!1};function c(){s.value!==t&&(s.value=t,s.needsUpdate=r>0),e.numPlanes=r,e.numIntersection=0}function l(t,r,n,i){var c=null!==t?t.length:0,l=null;if(0!==c){if(l=s.value,!0!==i||null===l){var h=n+4*c,u=r.matrixWorldInverse;o.getNormalMatrix(u),(null===l||l.length<h)&&(l=new Float32Array(h));for(var d=0,p=n;d!==c;++d,p+=4)a.copy(t[d]).applyMatrix4(u,o),a.normal.toArray(l,p),l[p+3]=a.constant}s.value=l,s.needsUpdate=!0}return e.numPlanes=c,l}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(e,i,a){var o=0!==e.length||i||0!==r||n;return n=i,t=l(e,a,0),r=e.length,o},this.beginShadows=function(){i=!0,l(null)},this.endShadows=function(){i=!1,c()},this.setState=function(e,a,o,h,u,d){if(!n||null===e||0===e.length||i&&!o)i?l(null):c();else{var p=i?0:r,f=4*p,m=u.clippingState||null;s.value=m,m=l(e,h,f,d);for(var v=0;v!==f;++v)m[v]=t[v];u.clippingState=m,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=p}}}function pr(e){var t={};return{get:function(r){if(void 0!==t[r])return t[r];var n;switch(r){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:n=e.getExtension(r)}return null===n&&console.warn("THREE.WebGLRenderer: "+r+" extension not supported."),t[r]=n,n}}}function fr(e,t,r){var n=new WeakMap,i=new WeakMap;function a(e){var o=e.target,s=n.get(o);for(var c in null!==s.index&&t.remove(s.index),s.attributes)t.remove(s.attributes[c]);o.removeEventListener("dispose",a),n.delete(o);var l=i.get(s);l&&(t.remove(l),i.delete(s)),r.memory.geometries--}function o(e){var r=[],n=e.index,a=e.attributes.position,o=0;if(null!==n){var s=n.array;o=n.version;for(var c=0,l=s.length;c<l;c+=3){var h=s[c+0],u=s[c+1],d=s[c+2];r.push(h,u,u,d,d,h)}}else{s=a.array;o=a.version;for(c=0,l=s.length/3-1;c<l;c+=3){h=c+0,u=c+1,d=c+2;r.push(h,u,u,d,d,h)}}var p=new(it(r)>65535?et:Qe)(r,1);p.version=o,t.update(p,34963);var f=i.get(e);f&&t.remove(f),i.set(e,p)}return{get:function(e,t){var i=n.get(t);return i||(t.addEventListener("dispose",a),t.isBufferGeometry?i=t:t.isGeometry&&(void 0===t._bufferGeometry&&(t._bufferGeometry=(new dt).setFromObject(e)),i=t._bufferGeometry),n.set(t,i),r.memory.geometries++,i)},update:function(e){var r=e.index,n=e.attributes;for(var i in null!==r&&t.update(r,34963),n)t.update(n[i],34962);var a=e.morphAttributes;for(var i in a)for(var o=a[i],s=0,c=o.length;s<c;s++)t.update(o[s],34962)},getWireframeAttribute:function(e){var t=i.get(e);if(t){var r=e.index;null!==r&&t.version<r.version&&o(e)}else o(e);return i.get(e)}}}function mr(e,t,r,n){var i,a,o;this.setMode=function(e){i=e},this.setIndex=function(e){a=e.type,o=e.bytesPerElement},this.render=function(t,n){e.drawElements(i,n,a,t*o),r.update(n,i)},this.renderInstances=function(s,c,l,h){if(0!==h){var u,d;if(n.isWebGL2)u=e,d="drawElementsInstanced";else if(d="drawElementsInstancedANGLE",null===(u=t.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");u[d](i,l,a,c*o,h),r.update(l,i,h)}}}function vr(e){var t={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:t,programs:null,autoReset:!0,reset:function(){t.frame++,t.calls=0,t.triangles=0,t.points=0,t.lines=0},update:function(e,r,n){switch(n=n||1,t.calls++,r){case 4:t.triangles+=n*(e/3);break;case 5:case 6:t.triangles+=n*(e-2);break;case 1:t.lines+=n*(e/2);break;case 3:t.lines+=n*(e-1);break;case 2:t.lines+=n*e;break;case 0:t.points+=n*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}function gr(e,t){return Math.abs(t[1])-Math.abs(e[1])}function yr(e){var t={},r=new Float32Array(8);return{update:function(n,i,a,o){var s=n.morphTargetInfluences,c=s.length,l=t[i.id];if(void 0===l){l=[];for(var h=0;h<c;h++)l[h]=[h,0];t[i.id]=l}var u=a.morphTargets&&i.morphAttributes.position,d=a.morphNormals&&i.morphAttributes.normal;for(h=0;h<c;h++){0!==(p=l[h])[1]&&(u&&i.removeAttribute("morphTarget"+h),d&&i.removeAttribute("morphNormal"+h))}for(h=0;h<c;h++){(p=l[h])[0]=h,p[1]=s[h]}for(l.sort(gr),h=0;h<8;h++){var p;if(p=l[h]){var f=p[0],m=p[1];if(m){u&&i.addAttribute("morphTarget"+h,u[f]),d&&i.addAttribute("morphNormal"+h,d[f]),r[h]=m;continue}}r[h]=0}o.getUniforms().setValue(e,"morphTargetInfluences",r)}}}function xr(e,t,r,n){var i={};return{update:function(e){var a=n.render.frame,o=e.geometry,s=t.get(e,o);return i[s.id]!==a&&(o.isGeometry&&s.updateFromObject(e),t.update(s),i[s.id]=a),e.isInstancedMesh&&r.update(e.instanceMatrix,34962),s},dispose:function(){i={}}}}function br(e,t,r,n,i,a,o,s,c,l){e=void 0!==e?e:[],t=void 0!==t?t:301,o=void 0!==o?o:1022,S.call(this,e,t,r,n,i,a,o,s,c,l),this.flipY=!1}function wr(e,t,r,n){S.call(this,null),this.image={data:e||null,width:t||1,height:r||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function _r(e,t,r,n){S.call(this,null),this.image={data:e||null,width:t||1,height:r||1,depth:n||1},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}ir.physical={uniforms:Ht([ir.standard.uniforms,{transparency:{value:0},clearcoat:{value:0},clearcoatRoughness:{value:0},sheen:{value:new Ue(0)},clearcoatNormalScale:{value:new f(1,1)},clearcoatNormalMap:{value:null}}]),vertexShader:rr.meshphysical_vert,fragmentShader:rr.meshphysical_frag},sr.prototype=Object.create(zt.prototype),sr.prototype.constructor=sr,cr.prototype=Object.create(dt.prototype),cr.prototype.constructor=cr,br.prototype=Object.create(S.prototype),br.prototype.constructor=br,br.prototype.isCubeTexture=!0,Object.defineProperty(br.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),wr.prototype=Object.create(S.prototype),wr.prototype.constructor=wr,wr.prototype.isDataTexture2DArray=!0,_r.prototype=Object.create(S.prototype),_r.prototype.constructor=_r,_r.prototype.isDataTexture3D=!0;var Mr=new S,Sr=new wr,Tr=new _r,Er=new br,Ar=[],Lr=[],Rr=new Float32Array(16),Pr=new Float32Array(9),Cr=new Float32Array(4);function Or(e,t,r){var n=e[0];if(n<=0||n>0)return e;var i=t*r,a=Ar[i];if(void 0===a&&(a=new Float32Array(i),Ar[i]=a),0!==t){n.toArray(a,0);for(var o=1,s=0;o!==t;++o)s+=r,e[o].toArray(a,s)}return a}function Ir(e,t){if(e.length!==t.length)return!1;for(var r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}function Dr(e,t){for(var r=0,n=t.length;r<n;r++)e[r]=t[r]}function Nr(e,t){var r=Lr[t];void 0===r&&(r=new Int32Array(t),Lr[t]=r);for(var n=0;n!==t;++n)r[n]=e.allocateTextureUnit();return r}function Br(e,t){var r=this.cache;r[0]!==t&&(e.uniform1f(this.addr,t),r[0]=t)}function zr(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y||(e.uniform2f(this.addr,t.x,t.y),r[0]=t.x,r[1]=t.y);else{if(Ir(r,t))return;e.uniform2fv(this.addr,t),Dr(r,t)}}function Fr(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y&&r[2]===t.z||(e.uniform3f(this.addr,t.x,t.y,t.z),r[0]=t.x,r[1]=t.y,r[2]=t.z);else if(void 0!==t.r)r[0]===t.r&&r[1]===t.g&&r[2]===t.b||(e.uniform3f(this.addr,t.r,t.g,t.b),r[0]=t.r,r[1]=t.g,r[2]=t.b);else{if(Ir(r,t))return;e.uniform3fv(this.addr,t),Dr(r,t)}}function Ur(e,t){var r=this.cache;if(void 0!==t.x)r[0]===t.x&&r[1]===t.y&&r[2]===t.z&&r[3]===t.w||(e.uniform4f(this.addr,t.x,t.y,t.z,t.w),r[0]=t.x,r[1]=t.y,r[2]=t.z,r[3]=t.w);else{if(Ir(r,t))return;e.uniform4fv(this.addr,t),Dr(r,t)}}function Gr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix2fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Cr.set(n),e.uniformMatrix2fv(this.addr,!1,Cr),Dr(r,n)}}function Hr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix3fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Pr.set(n),e.uniformMatrix3fv(this.addr,!1,Pr),Dr(r,n)}}function kr(e,t){var r=this.cache,n=t.elements;if(void 0===n){if(Ir(r,t))return;e.uniformMatrix4fv(this.addr,!1,t),Dr(r,t)}else{if(Ir(r,n))return;Rr.set(n),e.uniformMatrix4fv(this.addr,!1,Rr),Dr(r,n)}}function jr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.safeSetTexture2D(t||Mr,i)}function Vr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.setTexture2DArray(t||Sr,i)}function Wr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.setTexture3D(t||Tr,i)}function qr(e,t,r){var n=this.cache,i=r.allocateTextureUnit();n[0]!==i&&(e.uniform1i(this.addr,i),n[0]=i),r.safeSetTextureCube(t||Er,i)}function Xr(e,t){var r=this.cache;r[0]!==t&&(e.uniform1i(this.addr,t),r[0]=t)}function Yr(e,t){var r=this.cache;Ir(r,t)||(e.uniform2iv(this.addr,t),Dr(r,t))}function Zr(e,t){var r=this.cache;Ir(r,t)||(e.uniform3iv(this.addr,t),Dr(r,t))}function Jr(e,t){var r=this.cache;Ir(r,t)||(e.uniform4iv(this.addr,t),Dr(r,t))}function Kr(e,t){e.uniform1fv(this.addr,t)}function Qr(e,t){e.uniform1iv(this.addr,t)}function $r(e,t){e.uniform2iv(this.addr,t)}function en(e,t){e.uniform3iv(this.addr,t)}function tn(e,t){e.uniform4iv(this.addr,t)}function rn(e,t){var r=Or(t,this.size,2);e.uniform2fv(this.addr,r)}function nn(e,t){var r=Or(t,this.size,3);e.uniform3fv(this.addr,r)}function an(e,t){var r=Or(t,this.size,4);e.uniform4fv(this.addr,r)}function on(e,t){var r=Or(t,this.size,4);e.uniformMatrix2fv(this.addr,!1,r)}function sn(e,t){var r=Or(t,this.size,9);e.uniformMatrix3fv(this.addr,!1,r)}function cn(e,t){var r=Or(t,this.size,16);e.uniformMatrix4fv(this.addr,!1,r)}function ln(e,t,r){var n=t.length,i=Nr(r,n);e.uniform1iv(this.addr,i);for(var a=0;a!==n;++a)r.safeSetTexture2D(t[a]||Mr,i[a])}function hn(e,t,r){var n=t.length,i=Nr(r,n);e.uniform1iv(this.addr,i);for(var a=0;a!==n;++a)r.safeSetTextureCube(t[a]||Er,i[a])}function un(e,t,r){this.id=e,this.addr=r,this.cache=[],this.setValue=function(e){switch(e){case 5126:return Br;case 35664:return zr;case 35665:return Fr;case 35666:return Ur;case 35674:return Gr;case 35675:return Hr;case 35676:return kr;case 35678:case 36198:return jr;case 35679:return Wr;case 35680:return qr;case 36289:return Vr;case 5124:case 35670:return Xr;case 35667:case 35671:return Yr;case 35668:case 35672:return Zr;case 35669:case 35673:return Jr}}(t.type)}function dn(e,t,r){this.id=e,this.addr=r,this.cache=[],this.size=t.size,this.setValue=function(e){switch(e){case 5126:return Kr;case 35664:return rn;case 35665:return nn;case 35666:return an;case 35674:return on;case 35675:return sn;case 35676:return cn;case 35678:return ln;case 35680:return hn;case 5124:case 35670:return Qr;case 35667:case 35671:return $r;case 35668:case 35672:return en;case 35669:case 35673:return tn}}(t.type)}function pn(e){this.id=e,this.seq=[],this.map={}}dn.prototype.updateCache=function(e){var t=this.cache;e instanceof Float32Array&&t.length!==e.length&&(this.cache=new Float32Array(e.length)),Dr(t,e)},pn.prototype.setValue=function(e,t,r){for(var n=this.seq,i=0,a=n.length;i!==a;++i){var o=n[i];o.setValue(e,t[o.id],r)}};var fn=/([\w\d_]+)(\])?(\[|\.)?/g;function mn(e,t){e.seq.push(t),e.map[t.id]=t}function vn(e,t,r){var n=e.name,i=n.length;for(fn.lastIndex=0;;){var a=fn.exec(n),o=fn.lastIndex,s=a[1],c="]"===a[2],l=a[3];if(c&&(s|=0),void 0===l||"["===l&&o+2===i){mn(r,void 0===l?new un(s,e,t):new dn(s,e,t));break}var h=r.map[s];void 0===h&&mn(r,h=new pn(s)),r=h}}function gn(e,t){this.seq=[],this.map={};for(var r=e.getProgramParameter(t,35718),n=0;n<r;++n){var i=e.getActiveUniform(t,n);vn(i,e.getUniformLocation(t,i.name),this)}}function yn(e,t,r){var n=e.createShader(t);return e.shaderSource(n,r),e.compileShader(n),n}gn.prototype.setValue=function(e,t,r,n){var i=this.map[t];void 0!==i&&i.setValue(e,r,n)},gn.prototype.setOptional=function(e,t,r){var n=t[r];void 0!==n&&this.setValue(e,r,n)},gn.upload=function(e,t,r,n){for(var i=0,a=t.length;i!==a;++i){var o=t[i],s=r[o.id];!1!==s.needsUpdate&&o.setValue(e,s.value,n)}},gn.seqWithValue=function(e,t){for(var r=[],n=0,i=e.length;n!==i;++n){var a=e[n];a.id in t&&r.push(a)}return r};var xn=0;function bn(e){switch(e){case 3e3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case 3003:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+e)}}function wn(e,t,r){var n=e.getShaderParameter(t,35713),i=e.getShaderInfoLog(t).trim();return n&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+r+"\n"+i+function(e){for(var t=e.split("\n"),r=0;r<t.length;r++)t[r]=r+1+": "+t[r];return t.join("\n")}(e.getShaderSource(t))}function _n(e,t){var r=bn(t);return"vec4 "+e+"( vec4 value ) { return "+r[0]+"ToLinear"+r[1]+"; }"}function Mn(e,t){var r=bn(t);return"vec4 "+e+"( vec4 value ) { return LinearTo"+r[0]+r[1]+"; }"}function Sn(e,t){var r;switch(t){case 1:r="Linear";break;case 2:r="Reinhard";break;case 3:r="Uncharted2";break;case 4:r="OptimizedCineon";break;case 5:r="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+t)}return"vec3 "+e+"( vec3 color ) { return "+r+"ToneMapping( color ); }"}function Tn(e){return""!==e}function En(e,t){return e.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function An(e,t){return e.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}var Ln=/^[ \t]*#include +<([\w\d./]+)>/gm;function Rn(e){return e.replace(Ln,Pn)}function Pn(e,t){var r=rr[t];if(void 0===r)throw new Error("Can not resolve #include <"+t+">");return Rn(r)}var Cn=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;function On(e){return e.replace(Cn,In)}function In(e,t,r,n){for(var i="",a=parseInt(t);a<parseInt(r);a++)i+=n.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return i}function Dn(e){var t="precision "+e.precision+" float;\nprecision "+e.precision+" int;";return"highp"===e.precision?t+="\n#define HIGH_PRECISION":"mediump"===e.precision?t+="\n#define MEDIUM_PRECISION":"lowp"===e.precision&&(t+="\n#define LOW_PRECISION"),t}function Nn(e,t,r,n,i,a){var o,s,c=e.getContext(),l=n.defines,h=i.vertexShader,u=i.fragmentShader,d=function(e){var t="SHADOWMAP_TYPE_BASIC";return 1===e.shadowMapType?t="SHADOWMAP_TYPE_PCF":2===e.shadowMapType?t="SHADOWMAP_TYPE_PCF_SOFT":3===e.shadowMapType&&(t="SHADOWMAP_TYPE_VSM"),t}(a),p=function(e,t){var r="ENVMAP_TYPE_CUBE";if(e.envMap)switch(t.envMap.mapping){case 301:case 302:r="ENVMAP_TYPE_CUBE";break;case 306:case 307:r="ENVMAP_TYPE_CUBE_UV";break;case 303:case 304:r="ENVMAP_TYPE_EQUIREC";break;case 305:r="ENVMAP_TYPE_SPHERE"}return r}(a,n),f=function(e,t){var r="ENVMAP_MODE_REFLECTION";if(e.envMap)switch(t.envMap.mapping){case 302:case 304:r="ENVMAP_MODE_REFRACTION"}return r}(a,n),m=function(e,t){var r="ENVMAP_BLENDING_MULTIPLY";if(e.envMap)switch(t.combine){case 0:r="ENVMAP_BLENDING_MULTIPLY";break;case 1:r="ENVMAP_BLENDING_MIX";break;case 2:r="ENVMAP_BLENDING_ADD"}return r}(a,n),v=e.gammaFactor>0?e.gammaFactor:1,g=a.isWebGL2?"":function(e,t,r){return[(e=e||{}).derivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||t.logarithmicDepthBuffer)&&r.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&r.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||t.envMap)&&r.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Tn).join("\n")}(n.extensions,a,t),y=function(e){var t=[];for(var r in e){var n=e[r];!1!==n&&t.push("#define "+r+" "+n)}return t.join("\n")}(l),x=c.createProgram(),b=e.getRenderTarget(),w=b&&b.isWebGLMultiviewRenderTarget?b.numViews:0;if(n.isRawShaderMaterial?((o=[y].filter(Tn).join("\n")).length>0&&(o+="\n"),(s=[g,y].filter(Tn).join("\n")).length>0&&(s+="\n")):(o=[Dn(a),"#define SHADER_NAME "+i.name,y,a.instancing?"#define USE_INSTANCING":"",a.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+v,"#define MAX_BONES "+a.maxBones,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+f:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.displacementMap&&a.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.flatShading?"#define FLAT_SHADED":"",a.skinning?"#define USE_SKINNING":"",a.useVertexTexture?"#define BONE_TEXTURE":"",a.morphTargets?"#define USE_MORPHTARGETS":"",a.morphNormals&&!1===a.flatShading?"#define USE_MORPHNORMALS":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+d:"",a.sizeAttenuation?"#define USE_SIZEATTENUATION":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Tn).join("\n"),s=[g,Dn(a),"#define SHADER_NAME "+i.name,y,a.alphaTest?"#define ALPHATEST "+a.alphaTest+(a.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+v,a.useFog&&a.fog?"#define USE_FOG":"",a.useFog&&a.fogExp2?"#define FOG_EXP2":"",a.map?"#define USE_MAP":"",a.matcap?"#define USE_MATCAP":"",a.envMap?"#define USE_ENVMAP":"",a.envMap?"#define "+p:"",a.envMap?"#define "+f:"",a.envMap?"#define "+m:"",a.lightMap?"#define USE_LIGHTMAP":"",a.aoMap?"#define USE_AOMAP":"",a.emissiveMap?"#define USE_EMISSIVEMAP":"",a.bumpMap?"#define USE_BUMPMAP":"",a.normalMap?"#define USE_NORMALMAP":"",a.normalMap&&a.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",a.normalMap&&a.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",a.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",a.specularMap?"#define USE_SPECULARMAP":"",a.roughnessMap?"#define USE_ROUGHNESSMAP":"",a.metalnessMap?"#define USE_METALNESSMAP":"",a.alphaMap?"#define USE_ALPHAMAP":"",a.sheen?"#define USE_SHEEN":"",a.vertexTangents?"#define USE_TANGENT":"",a.vertexColors?"#define USE_COLOR":"",a.vertexUvs?"#define USE_UV":"",a.gradientMap?"#define USE_GRADIENTMAP":"",a.flatShading?"#define FLAT_SHADED":"",a.doubleSided?"#define DOUBLE_SIDED":"",a.flipSided?"#define FLIP_SIDED":"",a.shadowMapEnabled?"#define USE_SHADOWMAP":"",a.shadowMapEnabled?"#define "+d:"",a.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",a.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",a.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",a.logarithmicDepthBuffer&&(a.isWebGL2||t.get("EXT_frag_depth"))?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensions&&n.extensions.shaderTextureLOD||a.envMap)&&(a.isWebGL2||t.get("EXT_shader_texture_lod"))?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",0!==a.toneMapping?"#define TONE_MAPPING":"",0!==a.toneMapping?rr.tonemapping_pars_fragment:"",0!==a.toneMapping?Sn("toneMapping",a.toneMapping):"",a.dithering?"#define DITHERING":"",a.outputEncoding||a.mapEncoding||a.matcapEncoding||a.envMapEncoding||a.emissiveMapEncoding?rr.encodings_pars_fragment:"",a.mapEncoding?_n("mapTexelToLinear",a.mapEncoding):"",a.matcapEncoding?_n("matcapTexelToLinear",a.matcapEncoding):"",a.envMapEncoding?_n("envMapTexelToLinear",a.envMapEncoding):"",a.emissiveMapEncoding?_n("emissiveMapTexelToLinear",a.emissiveMapEncoding):"",a.outputEncoding?Mn("linearToOutputTexel",a.outputEncoding):"",a.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Tn).join("\n")),h=An(h=En(h=Rn(h),a),a),u=An(u=En(u=Rn(u),a),a),h=On(h),u=On(u),a.isWebGL2&&!n.isRawShaderMaterial){var _=!1,M=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==h.match(M)&&null!==u.match(M)&&(_=!0,h=h.replace(M,""),u=u.replace(M,"")),o=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+o,s=["#version 300 es\n","#define varying in",_?"":"out highp vec4 pc_fragColor;",_?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+s,w>0&&(o=(o=o.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","layout(num_views = "+w+") in;","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace(["uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;"].join("\n"),["uniform mat4 modelViewMatrices["+w+"];","uniform mat4 projectionMatrices["+w+"];","uniform mat4 viewMatrices["+w+"];","uniform mat3 normalMatrices["+w+"];","#define modelViewMatrix modelViewMatrices[VIEW_ID]","#define projectionMatrix projectionMatrices[VIEW_ID]","#define viewMatrix viewMatrices[VIEW_ID]","#define normalMatrix normalMatrices[VIEW_ID]"].join("\n")),s=(s=s.replace("#version 300 es\n",["#version 300 es\n","#extension GL_OVR_multiview2 : require","#define VIEW_ID gl_ViewID_OVR"].join("\n"))).replace("uniform mat4 viewMatrix;",["uniform mat4 viewMatrices["+w+"];","#define viewMatrix viewMatrices[VIEW_ID]"].join("\n")))}var S,T,E=s+u,A=yn(c,35633,o+h),L=yn(c,35632,E);if(c.attachShader(x,A),c.attachShader(x,L),void 0!==n.index0AttributeName?c.bindAttribLocation(x,0,n.index0AttributeName):!0===a.morphTargets&&c.bindAttribLocation(x,0,"position"),c.linkProgram(x),e.debug.checkShaderErrors){var R=c.getProgramInfoLog(x).trim(),P=c.getShaderInfoLog(A).trim(),C=c.getShaderInfoLog(L).trim(),O=!0,I=!0;if(!1===c.getProgramParameter(x,35714)){O=!1;var D=wn(c,A,"vertex"),N=wn(c,L,"fragment");console.error("THREE.WebGLProgram: shader error: ",c.getError(),"35715",c.getProgramParameter(x,35715),"gl.getProgramInfoLog",R,D,N)}else""!==R?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",R):""!==P&&""!==C||(I=!1);I&&(this.diagnostics={runnable:O,material:n,programLog:R,vertexShader:{log:P,prefix:o},fragmentShader:{log:C,prefix:s}})}return c.deleteShader(A),c.deleteShader(L),this.getUniforms=function(){return void 0===S&&(S=new gn(c,x)),S},this.getAttributes=function(){return void 0===T&&(T=function(e,t){for(var r={},n=e.getProgramParameter(t,35721),i=0;i<n;i++){var a=e.getActiveAttrib(t,i).name;r[a]=e.getAttribLocation(t,a)}return r}(c,x)),T},this.destroy=function(){c.deleteProgram(x),this.program=void 0},this.name=i.name,this.id=xn++,this.code=r,this.usedTimes=1,this.program=x,this.vertexShader=A,this.fragmentShader=L,this.numMultiviewViews=w,this}function Bn(e,t,r){var n=[],i={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},a=["precision","supportsVertexTextures","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function o(e,t){var r;return e?e.isTexture?r=e.encoding:e.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),r=e.texture.encoding):r=3e3,3e3===r&&t&&(r=3007),r}this.getParameters=function(t,n,a,s,c,l,h){var u=i[t.type],d=h.isSkinnedMesh?function(e){var t=e.skeleton.bones;if(r.floatVertexTextures)return 1024;var n=r.maxVertexUniforms,i=Math.floor((n-20)/4),a=Math.min(i,t.length);return a<t.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+t.length+" bones. This GPU supports "+a+"."),0):a}(h):0,p=r.precision;null!==t.precision&&(p=r.getMaxPrecision(t.precision))!==t.precision&&console.warn("THREE.WebGLProgram.getParameters:",t.precision,"not supported, using",p,"instead.");var f=e.getRenderTarget();return{isWebGL2:r.isWebGL2,shaderID:u,precision:p,instancing:!0===h.isInstancedMesh,supportsVertexTextures:r.vertexTextures,outputEncoding:o(f?f.texture:null,e.gammaOutput),map:!!t.map,mapEncoding:o(t.map,e.gammaInput),matcap:!!t.matcap,matcapEncoding:o(t.matcap,e.gammaInput),envMap:!!t.envMap,envMapMode:t.envMap&&t.envMap.mapping,envMapEncoding:o(t.envMap,e.gammaInput),envMapCubeUV:!!t.envMap&&(306===t.envMap.mapping||307===t.envMap.mapping),lightMap:!!t.lightMap,aoMap:!!t.aoMap,emissiveMap:!!t.emissiveMap,emissiveMapEncoding:o(t.emissiveMap,e.gammaInput),bumpMap:!!t.bumpMap,normalMap:!!t.normalMap,objectSpaceNormalMap:1===t.normalMapType,tangentSpaceNormalMap:0===t.normalMapType,clearcoatNormalMap:!!t.clearcoatNormalMap,displacementMap:!!t.displacementMap,roughnessMap:!!t.roughnessMap,metalnessMap:!!t.metalnessMap,specularMap:!!t.specularMap,alphaMap:!!t.alphaMap,gradientMap:!!t.gradientMap,sheen:!!t.sheen,combine:t.combine,vertexTangents:t.normalMap&&t.vertexTangents,vertexColors:t.vertexColors,vertexUvs:!!(t.map||t.bumpMap||t.normalMap||t.specularMap||t.alphaMap||t.emissiveMap||t.roughnessMap||t.metalnessMap||t.clearcoatNormalMap),fog:!!s,useFog:t.fog,fogExp2:s&&s.isFogExp2,flatShading:t.flatShading,sizeAttenuation:t.sizeAttenuation,logarithmicDepthBuffer:r.logarithmicDepthBuffer,skinning:t.skinning&&d>0,maxBones:d,useVertexTexture:r.floatVertexTextures,morphTargets:t.morphTargets,morphNormals:t.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:n.directional.length,numPointLights:n.point.length,numSpotLights:n.spot.length,numRectAreaLights:n.rectArea.length,numHemiLights:n.hemi.length,numDirLightShadows:n.directionalShadowMap.length,numPointLightShadows:n.pointShadowMap.length,numSpotLightShadows:n.spotShadowMap.length,numClippingPlanes:c,numClipIntersection:l,dithering:t.dithering,shadowMapEnabled:e.shadowMap.enabled&&a.length>0,shadowMapType:e.shadowMap.type,toneMapping:t.toneMapped?e.toneMapping:0,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:t.premultipliedAlpha,alphaTest:t.alphaTest,doubleSided:2===t.side,flipSided:1===t.side,depthPacking:void 0!==t.depthPacking&&t.depthPacking}},this.getProgramCode=function(t,r){var n=[];if(r.shaderID?n.push(r.shaderID):(n.push(t.fragmentShader),n.push(t.vertexShader)),void 0!==t.defines)for(var i in t.defines)n.push(i),n.push(t.defines[i]);for(var o=0;o<a.length;o++)n.push(r[a[o]]);return n.push(t.onBeforeCompile.toString()),n.push(e.gammaOutput),n.push(e.gammaFactor),n.join()},this.acquireProgram=function(r,i,a,o){for(var s,c=0,l=n.length;c<l;c++){var h=n[c];if(h.code===o){++(s=h).usedTimes;break}}return void 0===s&&(s=new Nn(e,t,o,r,i,a),n.push(s)),s},this.releaseProgram=function(e){if(0==--e.usedTimes){var t=n.indexOf(e);n[t]=n[n.length-1],n.pop(),e.destroy()}},this.programs=n}function zn(){var e=new WeakMap;return{get:function(t){var r=e.get(t);return void 0===r&&(r={},e.set(t,r)),r},remove:function(t){e.delete(t)},update:function(t,r,n){e.get(t)[r]=n},dispose:function(){e=new WeakMap}}}function Fn(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program!==t.program?e.program.id-t.program.id:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Un(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Gn(){var e=[],t=0,r=[],n=[],i={id:-1};function a(r,n,a,o,s,c){var l=e[t];return void 0===l?(l={id:r.id,object:r,geometry:n,material:a,program:a.program||i,groupOrder:o,renderOrder:r.renderOrder,z:s,group:c},e[t]=l):(l.id=r.id,l.object=r,l.geometry=n,l.material=a,l.program=a.program||i,l.groupOrder=o,l.renderOrder=r.renderOrder,l.z=s,l.group=c),t++,l}return{opaque:r,transparent:n,init:function(){t=0,r.length=0,n.length=0},push:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?n:r).push(l)},unshift:function(e,t,i,o,s,c){var l=a(e,t,i,o,s,c);(!0===i.transparent?n:r).unshift(l)},sort:function(){r.length>1&&r.sort(Fn),n.length>1&&n.sort(Un)}}}function Hn(){var e=new WeakMap;function t(r){var n=r.target;n.removeEventListener("dispose",t),e.delete(n)}return{get:function(r,n){var i,a=e.get(r);return void 0===a?(i=new Gn,e.set(r,new WeakMap),e.get(r).set(n,i),r.addEventListener("dispose",t)):void 0===(i=a.get(n))&&(i=new Gn,a.set(n,i)),i},dispose:function(){e=new WeakMap}}}function kn(){var e={};return{get:function(t){if(void 0!==e[t.id])return e[t.id];var r;switch(t.type){case"DirectionalLight":r={direction:new y,color:new Ue,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f};break;case"SpotLight":r={position:new y,direction:new y,color:new Ue,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f};break;case"PointLight":r={position:new y,color:new Ue,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new f,shadowCameraNear:1,shadowCameraFar:1e3};break;case"HemisphereLight":r={direction:new y,skyColor:new Ue,groundColor:new Ue};break;case"RectAreaLight":r={color:new Ue,position:new y,halfWidth:new y,halfHeight:new y}}return e[t.id]=r,r}}}var jn=0;function Vn(e,t){return(t.castShadow?1:0)-(e.castShadow?1:0)}function Wn(){for(var e=new kn,t={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},r=0;r<9;r++)t.probe.push(new y);var n=new y,i=new N,a=new N;return{setup:function(r,o,s){for(var c=0,l=0,h=0,u=0;u<9;u++)t.probe[u].set(0,0,0);var d=0,p=0,f=0,m=0,v=0,g=0,y=0,x=0,b=s.matrixWorldInverse;r.sort(Vn),u=0;for(var w=r.length;u<w;u++){var _=r[u],M=_.color,S=_.intensity,T=_.distance,E=_.shadow&&_.shadow.map?_.shadow.map.texture:null;if(_.isAmbientLight)c+=M.r*S,l+=M.g*S,h+=M.b*S;else if(_.isLightProbe)for(var A=0;A<9;A++)t.probe[A].addScaledVector(_.sh.coefficients[A],S);else if(_.isDirectionalLight){if((R=e.get(_)).color.copy(_.color).multiplyScalar(_.intensity),R.direction.setFromMatrixPosition(_.matrixWorld),n.setFromMatrixPosition(_.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(b),R.shadow=_.castShadow,_.castShadow){var L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,t.directionalShadowMap[d]=E,t.directionalShadowMatrix[d]=_.shadow.matrix,g++}t.directional[d]=R,d++}else if(_.isSpotLight){if((R=e.get(_)).position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),R.color.copy(M).multiplyScalar(S),R.distance=T,R.direction.setFromMatrixPosition(_.matrixWorld),n.setFromMatrixPosition(_.target.matrixWorld),R.direction.sub(n),R.direction.transformDirection(b),R.coneCos=Math.cos(_.angle),R.penumbraCos=Math.cos(_.angle*(1-_.penumbra)),R.decay=_.decay,R.shadow=_.castShadow,_.castShadow){L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,t.spotShadowMap[f]=E,t.spotShadowMatrix[f]=_.shadow.matrix,x++}t.spot[f]=R,f++}else if(_.isRectAreaLight){(R=e.get(_)).color.copy(M).multiplyScalar(S),R.position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),a.identity(),i.copy(_.matrixWorld),i.premultiply(b),a.extractRotation(i),R.halfWidth.set(.5*_.width,0,0),R.halfHeight.set(0,.5*_.height,0),R.halfWidth.applyMatrix4(a),R.halfHeight.applyMatrix4(a),t.rectArea[m]=R,m++}else if(_.isPointLight){if((R=e.get(_)).position.setFromMatrixPosition(_.matrixWorld),R.position.applyMatrix4(b),R.color.copy(_.color).multiplyScalar(_.intensity),R.distance=_.distance,R.decay=_.decay,R.shadow=_.castShadow,_.castShadow){L=_.shadow;R.shadowBias=L.bias,R.shadowRadius=L.radius,R.shadowMapSize=L.mapSize,R.shadowCameraNear=L.camera.near,R.shadowCameraFar=L.camera.far,t.pointShadowMap[p]=E,t.pointShadowMatrix[p]=_.shadow.matrix,y++}t.point[p]=R,p++}else if(_.isHemisphereLight){var R;(R=e.get(_)).direction.setFromMatrixPosition(_.matrixWorld),R.direction.transformDirection(b),R.direction.normalize(),R.skyColor.copy(_.color).multiplyScalar(S),R.groundColor.copy(_.groundColor).multiplyScalar(S),t.hemi[v]=R,v++}}t.ambient[0]=c,t.ambient[1]=l,t.ambient[2]=h;var P=t.hash;P.directionalLength===d&&P.pointLength===p&&P.spotLength===f&&P.rectAreaLength===m&&P.hemiLength===v&&P.numDirectionalShadows===g&&P.numPointShadows===y&&P.numSpotShadows===x||(t.directional.length=d,t.spot.length=f,t.rectArea.length=m,t.point.length=p,t.hemi.length=v,t.directionalShadowMap.length=g,t.pointShadowMap.length=y,t.spotShadowMap.length=x,t.directionalShadowMatrix.length=g,t.pointShadowMatrix.length=y,t.spotShadowMatrix.length=x,P.directionalLength=d,P.pointLength=p,P.spotLength=f,P.rectAreaLength=m,P.hemiLength=v,P.numDirectionalShadows=g,P.numPointShadows=y,P.numSpotShadows=x,t.version=jn++)},state:t}}function qn(){var e=new Wn,t=[],r=[];return{init:function(){t.length=0,r.length=0},state:{lightsArray:t,shadowsArray:r,lights:e},setupLights:function(n){e.setup(t,r,n)},pushLight:function(e){t.push(e)},pushShadow:function(e){r.push(e)}}}function Xn(){var e=new WeakMap;function t(r){var n=r.target;n.removeEventListener("dispose",t),e.delete(n)}return{get:function(r,n){var i;return!1===e.has(r)?(i=new qn,e.set(r,new WeakMap),e.get(r).set(n,i),r.addEventListener("dispose",t)):!1===e.get(r).has(n)?(i=new qn,e.get(r).set(n,i)):i=e.get(r).get(n),i},dispose:function(){e=new WeakMap}}}function Yn(e){We.call(this),this.type="MeshDepthMaterial",this.depthPacking=3200,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(e)}function Zn(e){We.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new y,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(e)}Yn.prototype=Object.create(We.prototype),Yn.prototype.constructor=Yn,Yn.prototype.isMeshDepthMaterial=!0,Yn.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},Zn.prototype=Object.create(We.prototype),Zn.prototype.constructor=Zn,Zn.prototype.isMeshDistanceMaterial=!0,Zn.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.referencePosition.copy(e.referencePosition),this.nearDistance=e.nearDistance,this.farDistance=e.farDistance,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this};function Jn(e,t,r){var n=new tr,i=new f,a=new f,o=new T,s=new Array(4),c=new Array(4),l={},h={0:1,1:0,2:2},u=new jt({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new f},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n  \n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = decodeHalfRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = pow( squared_mean - mean * mean, 0.5 );\n  gl_FragColor = encodeHalfRGBA( vec2( mean, std_dev ) );\n}"}),d=u.clone();d.defines.HORIZONAL_PASS=1;var p=new dt;p.addAttribute("position",new Xe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));for(var m=new Pt(p,u),v=0;4!==v;++v){var g=0!=(1&v),y=0!=(2&v),x=new Yn({depthPacking:3201,morphTargets:g,skinning:y});s[v]=x;var b=new Zn({morphTargets:g,skinning:y});c[v]=b}var w=this;function _(r,n){var i=t.update(m);u.uniforms.shadow_pass.value=r.map.texture,u.uniforms.resolution.value=r.mapSize,u.uniforms.radius.value=r.radius,e.setRenderTarget(r.mapPass),e.clear(),e.renderBufferDirect(n,null,i,u,m,null),d.uniforms.shadow_pass.value=r.mapPass.texture,d.uniforms.resolution.value=r.mapSize,d.uniforms.radius.value=r.radius,e.setRenderTarget(r.map),e.clear(),e.renderBufferDirect(n,null,i,d,m,null)}function M(t,r,n,i,a,o){var u=t.geometry,d=null,p=s,f=t.customDepthMaterial;if(n.isPointLight&&(p=c,f=t.customDistanceMaterial),f)d=f;else{var m=!1;r.morphTargets&&(u&&u.isBufferGeometry?m=u.morphAttributes&&u.morphAttributes.position&&u.morphAttributes.position.length>0:u&&u.isGeometry&&(m=u.morphTargets&&u.morphTargets.length>0)),t.isSkinnedMesh&&!1===r.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",t);var v=0;m&&(v|=1),t.isSkinnedMesh&&r.skinning&&(v|=2),d=p[v]}if(e.localClippingEnabled&&!0===r.clipShadows&&0!==r.clippingPlanes.length){var g=d.uuid,y=r.uuid,x=l[g];void 0===x&&(x={},l[g]=x);var b=x[y];void 0===b&&(b=d.clone(),x[y]=b),d=b}return d.visible=r.visible,d.wireframe=r.wireframe,d.side=3===o?null!=r.shadowSide?r.shadowSide:r.side:null!=r.shadowSide?r.shadowSide:h[r.side],d.clipShadows=r.clipShadows,d.clippingPlanes=r.clippingPlanes,d.clipIntersection=r.clipIntersection,d.wireframeLinewidth=r.wireframeLinewidth,d.linewidth=r.linewidth,n.isPointLight&&d.isMeshDistanceMaterial&&(d.referencePosition.setFromMatrixPosition(n.matrixWorld),d.nearDistance=i,d.farDistance=a),d}function S(r,i,a,o,s){if(!1!==r.visible){if(r.layers.test(i.layers)&&(r.isMesh||r.isLine||r.isPoints)&&(r.castShadow||r.receiveShadow&&3===s)&&(!r.frustumCulled||n.intersectsObject(r))){r.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,r.matrixWorld);var c=t.update(r),l=r.material;if(Array.isArray(l))for(var h=c.groups,u=0,d=h.length;u<d;u++){var p=h[u],f=l[p.materialIndex];if(f&&f.visible){var m=M(r,f,o,a.near,a.far,s);e.renderBufferDirect(a,null,c,m,r,p)}}else if(l.visible){m=M(r,l,o,a.near,a.far,s);e.renderBufferDirect(a,null,c,m,r,null)}}for(var v=r.children,g=0,y=v.length;g<y;g++)S(v[g],i,a,o,s)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(t,s,c){if(!1!==w.enabled&&(!1!==w.autoUpdate||!1!==w.needsUpdate)&&0!==t.length){var l=e.getRenderTarget(),h=e.getActiveCubeFace(),u=e.getActiveMipmapLevel(),d=e.state;d.setBlending(0),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,f=t.length;p<f;p++){var m=t[p],v=m.shadow;if(void 0!==v){i.copy(v.mapSize);var g=v.getFrameExtents();if(i.multiply(g),a.copy(v.mapSize),(i.x>r||i.y>r)&&(console.warn("THREE.WebGLShadowMap:",m,"has shadow exceeding max texture size, reducing"),i.x>r&&(a.x=Math.floor(r/g.x),i.x=a.x*g.x,v.mapSize.x=a.x),i.y>r&&(a.y=Math.floor(r/g.y),i.y=a.y*g.y,v.mapSize.y=a.y)),null===v.map&&!v.isPointLightShadow&&3===this.type){var y={minFilter:1006,magFilter:1006,format:1023};v.map=new E(i.x,i.y,y),v.map.texture.name=m.name+".shadowMap",v.mapPass=new E(i.x,i.y,y),v.camera.updateProjectionMatrix()}if(null===v.map){y={minFilter:1003,magFilter:1003,format:1023};v.map=new E(i.x,i.y,y),v.map.texture.name=m.name+".shadowMap",v.camera.updateProjectionMatrix()}e.setRenderTarget(v.map),e.clear();for(var x=v.getViewportCount(),b=0;b<x;b++){var M=v.getViewport(b);o.set(a.x*M.x,a.y*M.y,a.x*M.z,a.y*M.w),d.viewport(o),v.updateMatrices(m,c,b),n=v.getFrustum(),S(s,c,v.camera,m,this.type)}v.isPointLightShadow||3!==this.type||_(v,c)}else console.warn("THREE.WebGLShadowMap:",m,"has no shadow.")}w.needsUpdate=!1,e.setRenderTarget(l,h,u)}}}function Kn(e,t,r,n){var i=new function(){var t=!1,r=new T,n=null,i=new T(0,0,0,0);return{setMask:function(r){n===r||t||(e.colorMask(r,r,r,r),n=r)},setLocked:function(e){t=e},setClear:function(t,n,a,o,s){!0===s&&(t*=o,n*=o,a*=o),r.set(t,n,a,o),!1===i.equals(r)&&(e.clearColor(t,n,a,o),i.copy(r))},reset:function(){t=!1,n=null,i.set(-1,0,0,0)}}},a=new function(){var t=!1,r=null,n=null,i=null;return{setTest:function(e){e?G(2929):H(2929)},setMask:function(n){r===n||t||(e.depthMask(n),r=n)},setFunc:function(t){if(n!==t){if(t)switch(t){case 0:e.depthFunc(512);break;case 1:e.depthFunc(519);break;case 2:e.depthFunc(513);break;case 3:e.depthFunc(515);break;case 4:e.depthFunc(514);break;case 5:e.depthFunc(518);break;case 6:e.depthFunc(516);break;case 7:e.depthFunc(517);break;default:e.depthFunc(515)}else e.depthFunc(515);n=t}},setLocked:function(e){t=e},setClear:function(t){i!==t&&(e.clearDepth(t),i=t)},reset:function(){t=!1,r=null,n=null,i=null}}},o=new function(){var t=!1,r=null,n=null,i=null,a=null,o=null,s=null,c=null,l=null;return{setTest:function(e){t||(e?G(2960):H(2960))},setMask:function(n){r===n||t||(e.stencilMask(n),r=n)},setFunc:function(t,r,o){n===t&&i===r&&a===o||(e.stencilFunc(t,r,o),n=t,i=r,a=o)},setOp:function(t,r,n){o===t&&s===r&&c===n||(e.stencilOp(t,r,n),o=t,s=r,c=n)},setLocked:function(e){t=e},setClear:function(t){l!==t&&(e.clearStencil(t),l=t)},reset:function(){t=!1,r=null,n=null,i=null,a=null,o=null,s=null,c=null,l=null}}},s=e.getParameter(34921),c=new Uint8Array(s),l=new Uint8Array(s),h=new Uint8Array(s),u={},d=null,p=null,f=null,m=null,v=null,g=null,y=null,x=null,b=null,w=null,_=!1,M=null,S=null,E=null,A=null,L=null,R=e.getParameter(35661),P=!1,C=0,O=e.getParameter(7938);-1!==O.indexOf("WebGL")?(C=parseFloat(/^WebGL\ ([0-9])/.exec(O)[1]),P=C>=1):-1!==O.indexOf("OpenGL ES")&&(C=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(O)[1]),P=C>=2);var I=null,D={},N=new T,B=new T;function z(t,r,n){var i=new Uint8Array(4),a=e.createTexture();e.bindTexture(t,a),e.texParameteri(t,10241,9728),e.texParameteri(t,10240,9728);for(var o=0;o<n;o++)e.texImage2D(r+o,0,6408,1,1,0,6408,5121,i);return a}var F={};function U(r,i){(c[r]=1,0===l[r]&&(e.enableVertexAttribArray(r),l[r]=1),h[r]!==i)&&((n.isWebGL2?e:t.get("ANGLE_instanced_arrays"))[n.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](r,i),h[r]=i)}function G(t){!0!==u[t]&&(e.enable(t),u[t]=!0)}function H(t){!1!==u[t]&&(e.disable(t),u[t]=!1)}function k(t,n,i,a,o,s,c,l){if(0!==t){if(f||(G(3042),f=!0),5===t)o=o||n,s=s||i,c=c||a,n===v&&o===x||(e.blendEquationSeparate(r.convert(n),r.convert(o)),v=n,x=o),i===g&&a===y&&s===b&&c===w||(e.blendFuncSeparate(r.convert(i),r.convert(a),r.convert(s),r.convert(c)),g=i,y=a,b=s,w=c),m=t,_=null;else if(t!==m||l!==_){if(100===v&&100===x||(e.blendEquation(32774),v=100,x=100),l)switch(t){case 1:e.blendFuncSeparate(1,771,1,771);break;case 2:e.blendFunc(1,1);break;case 3:e.blendFuncSeparate(0,0,769,771);break;case 4:e.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}else switch(t){case 1:e.blendFuncSeparate(770,771,1,771);break;case 2:e.blendFunc(770,1);break;case 3:e.blendFunc(0,769);break;case 4:e.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",t)}g=null,y=null,b=null,w=null,m=t,_=l}}else f&&(H(3042),f=!1)}function j(t){M!==t&&(t?e.frontFace(2304):e.frontFace(2305),M=t)}function V(t){0!==t?(G(2884),t!==S&&(1===t?e.cullFace(1029):2===t?e.cullFace(1028):e.cullFace(1032))):H(2884),S=t}function W(t,r,n){t?(G(32823),A===r&&L===n||(e.polygonOffset(r,n),A=r,L=n)):H(32823)}function q(t){void 0===t&&(t=33984+R-1),I!==t&&(e.activeTexture(t),I=t)}return F[3553]=z(3553,3553,1),F[34067]=z(34067,34069,6),i.setClear(0,0,0,1),a.setClear(1),o.setClear(0),G(2929),a.setFunc(3),j(!1),V(1),G(2884),k(0),{buffers:{color:i,depth:a,stencil:o},initAttributes:function(){for(var e=0,t=c.length;e<t;e++)c[e]=0},enableAttribute:function(e){U(e,0)},enableAttributeAndDivisor:U,disableUnusedAttributes:function(){for(var t=0,r=l.length;t!==r;++t)l[t]!==c[t]&&(e.disableVertexAttribArray(t),l[t]=0)},enable:G,disable:H,getCompressedTextureFormats:function(){if(null===d&&(d=[],t.get("WEBGL_compressed_texture_pvrtc")||t.get("WEBGL_compressed_texture_s3tc")||t.get("WEBGL_compressed_texture_etc1")||t.get("WEBGL_compressed_texture_astc")))for(var r=e.getParameter(34467),n=0;n<r.length;n++)d.push(r[n]);return d},useProgram:function(t){return p!==t&&(e.useProgram(t),p=t,!0)},setBlending:k,setMaterial:function(e,t){2===e.side?H(2884):G(2884);var r=1===e.side;t&&(r=!r),j(r),1===e.blending&&!1===e.transparent?k(0):k(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),a.setFunc(e.depthFunc),a.setTest(e.depthTest),a.setMask(e.depthWrite),i.setMask(e.colorWrite);var n=e.stencilWrite;o.setTest(n),n&&(o.setMask(e.stencilWriteMask),o.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),o.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),W(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)},setFlipSided:j,setCullFace:V,setLineWidth:function(t){t!==E&&(P&&e.lineWidth(t),E=t)},setPolygonOffset:W,setScissorTest:function(e){e?G(3089):H(3089)},activeTexture:q,bindTexture:function(t,r){null===I&&q();var n=D[I];void 0===n&&(n={type:void 0,texture:void 0},D[I]=n),n.type===t&&n.texture===r||(e.bindTexture(t,r||F[t]),n.type=t,n.texture=r)},compressedTexImage2D:function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage2D:function(){try{e.texImage2D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},texImage3D:function(){try{e.texImage3D.apply(e,arguments)}catch(e){console.error("THREE.WebGLState:",e)}},scissor:function(t){!1===N.equals(t)&&(e.scissor(t.x,t.y,t.z,t.w),N.copy(t))},viewport:function(t){!1===B.equals(t)&&(e.viewport(t.x,t.y,t.z,t.w),B.copy(t))},reset:function(){for(var t=0;t<l.length;t++)1===l[t]&&(e.disableVertexAttribArray(t),l[t]=0);u={},d=null,I=null,D={},p=null,m=null,M=null,S=null,i.reset(),a.reset(),o.reset()}}}function Qn(e,t,r,n,i,a,o){var s,c=new WeakMap,l="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d");function h(e,t){return l?new OffscreenCanvas(e,t):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function u(e,t,r,n){var i=1;if((e.width>n||e.height>n)&&(i=n/Math.max(e.width,e.height)),i<1||!0===t){if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap){var a=t?p.floorPowerOfTwo:Math.floor,o=a(i*e.width),c=a(i*e.height);void 0===s&&(s=h(o,c));var l=r?h(o,c):s;return l.width=o,l.height=c,l.getContext("2d").drawImage(e,0,0,o,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+e.width+"x"+e.height+") to ("+o+"x"+c+")."),l}return"data"in e&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+e.width+"x"+e.height+")."),e}return e}function d(e){return p.isPowerOfTwo(e.width)&&p.isPowerOfTwo(e.height)}function f(e,t){return e.generateMipmaps&&t&&1003!==e.minFilter&&1006!==e.minFilter}function m(t,r,i,a){e.generateMipmap(t),n.get(r).__maxMipLevel=Math.log(Math.max(i,a))*Math.LOG2E}function v(e,r){if(!i.isWebGL2)return e;var n=e;return 6403===e&&(5126===r&&(n=33326),5131===r&&(n=33325),5121===r&&(n=33321)),6407===e&&(5126===r&&(n=34837),5131===r&&(n=34843),5121===r&&(n=32849)),6408===e&&(5126===r&&(n=34836),5131===r&&(n=34842),5121===r&&(n=32856)),33325===n||33326===n||34842===n||34836===n?t.get("EXT_color_buffer_float"):34843!==n&&34837!==n||console.warn("THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead."),n}function g(e){return 1003===e||1004===e||1005===e?9728:9729}function y(t){var r=t.target;r.removeEventListener("dispose",y),function(t){var r=n.get(t);if(void 0===r.__webglInit)return;e.deleteTexture(r.__webglTexture),n.remove(t)}(r),r.isVideoTexture&&c.delete(r),o.memory.textures--}function x(t){var r=t.target;r.removeEventListener("dispose",x),function(t){var r=n.get(t),i=n.get(t.texture);if(!t)return;void 0!==i.__webglTexture&&e.deleteTexture(i.__webglTexture);t.depthTexture&&t.depthTexture.dispose();if(t.isWebGLRenderTargetCube)for(var a=0;a<6;a++)e.deleteFramebuffer(r.__webglFramebuffer[a]),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer[a]);else e.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&e.deleteRenderbuffer(r.__webglDepthbuffer);if(t.isWebGLMultiviewRenderTarget){e.deleteTexture(r.__webglColorTexture),e.deleteTexture(r.__webglDepthStencilTexture),o.memory.textures-=2;a=0;for(var s=r.__webglViewFramebuffers.length;a<s;a++)e.deleteFramebuffer(r.__webglViewFramebuffers[a])}n.remove(t.texture),n.remove(t)}(r),o.memory.textures--}var b=0;function w(e,t){var i=n.get(e);if(e.isVideoTexture&&function(e){var t=o.render.frame;c.get(e)!==t&&(c.set(e,t),e.update())}(e),e.version>0&&i.__version!==e.version){var a=e.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void E(i,e,t);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}r.activeTexture(33984+t),r.bindTexture(3553,i.__webglTexture)}function _(t,o){if(6===t.image.length){var s=n.get(t);if(t.version>0&&s.__version!==t.version){T(s,t),r.activeTexture(33984+o),r.bindTexture(34067,s.__webglTexture),e.pixelStorei(37440,t.flipY);for(var c=t&&t.isCompressedTexture,l=t.image[0]&&t.image[0].isDataTexture,h=[],p=0;p<6;p++)h[p]=c||l?l?t.image[p].image:t.image[p]:u(t.image[p],!1,!0,i.maxCubemapSize);var g,y=h[0],x=d(y)||i.isWebGL2,b=a.convert(t.format),w=a.convert(t.type),_=v(b,w);if(S(34067,t,x),c){for(p=0;p<6;p++){g=h[p].mipmaps;for(var M=0;M<g.length;M++){var E=g[M];1023!==t.format&&1022!==t.format?r.getCompressedTextureFormats().indexOf(b)>-1?r.compressedTexImage2D(34069+p,M,_,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):r.texImage2D(34069+p,M,_,E.width,E.height,0,b,w,E.data)}}s.__maxMipLevel=g.length-1}else{g=t.mipmaps;for(p=0;p<6;p++)if(l){r.texImage2D(34069+p,0,_,h[p].width,h[p].height,0,b,w,h[p].data);for(M=0;M<g.length;M++){var A=(E=g[M]).image[p].image;r.texImage2D(34069+p,M+1,_,A.width,A.height,0,b,w,A.data)}}else{r.texImage2D(34069+p,0,_,b,w,h[p]);for(M=0;M<g.length;M++){E=g[M];r.texImage2D(34069+p,M+1,_,b,w,E.image[p])}}s.__maxMipLevel=g.length}f(t,x)&&m(34067,t,y.width,y.height),s.__version=t.version,t.onUpdate&&t.onUpdate(t)}else r.activeTexture(33984+o),r.bindTexture(34067,s.__webglTexture)}}function M(e,t){r.activeTexture(33984+t),r.bindTexture(34067,n.get(e).__webglTexture)}function S(r,o,s){var c;if(s?(e.texParameteri(r,10242,a.convert(o.wrapS)),e.texParameteri(r,10243,a.convert(o.wrapT)),32879!==r&&35866!==r||e.texParameteri(r,32882,a.convert(o.wrapR)),e.texParameteri(r,10240,a.convert(o.magFilter)),e.texParameteri(r,10241,a.convert(o.minFilter))):(e.texParameteri(r,10242,33071),e.texParameteri(r,10243,33071),32879!==r&&35866!==r||e.texParameteri(r,32882,33071),1001===o.wrapS&&1001===o.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),e.texParameteri(r,10240,g(o.magFilter)),e.texParameteri(r,10241,g(o.minFilter)),1003!==o.minFilter&&1006!==o.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),c=t.get("EXT_texture_filter_anisotropic")){if(1015===o.type&&null===t.get("OES_texture_float_linear"))return;if(1016===o.type&&null===(i.isWebGL2||t.get("OES_texture_half_float_linear")))return;(o.anisotropy>1||n.get(o).__currentAnisotropy)&&(e.texParameterf(r,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,i.getMaxAnisotropy())),n.get(o).__currentAnisotropy=o.anisotropy)}}function T(t,r){void 0===t.__webglInit&&(t.__webglInit=!0,r.addEventListener("dispose",y),t.__webglTexture=e.createTexture(),o.memory.textures++)}function E(t,n,o){var s=3553;n.isDataTexture2DArray&&(s=35866),n.isDataTexture3D&&(s=32879),T(t,n),r.activeTexture(33984+o),r.bindTexture(s,t.__webglTexture),e.pixelStorei(37440,n.flipY),e.pixelStorei(37441,n.premultiplyAlpha),e.pixelStorei(3317,n.unpackAlignment);var c=function(e){return!i.isWebGL2&&(1001!==e.wrapS||1001!==e.wrapT||1003!==e.minFilter&&1006!==e.minFilter)}(n)&&!1===d(n.image),l=u(n.image,c,!1,i.maxTextureSize),h=d(l)||i.isWebGL2,p=a.convert(n.format),g=a.convert(n.type),y=v(p,g);S(s,n,h);var x,b=n.mipmaps;if(n.isDepthTexture){if(y=6402,1015===n.type){if(!i.isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");y=36012}else i.isWebGL2&&(y=33189);1026===n.format&&6402===y&&1012!==n.type&&1014!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),n.type=1012,g=a.convert(n.type)),1027===n.format&&(y=34041,1020!==n.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),n.type=1020,g=a.convert(n.type))),r.texImage2D(3553,0,y,l.width,l.height,0,p,g,null)}else if(n.isDataTexture)if(b.length>0&&h){for(var w=0,_=b.length;w<_;w++)x=b[w],r.texImage2D(3553,w,y,x.width,x.height,0,p,g,x.data);n.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else r.texImage2D(3553,0,y,l.width,l.height,0,p,g,l.data),t.__maxMipLevel=0;else if(n.isCompressedTexture){for(w=0,_=b.length;w<_;w++)x=b[w],1023!==n.format&&1022!==n.format?r.getCompressedTextureFormats().indexOf(p)>-1?r.compressedTexImage2D(3553,w,y,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texImage2D(3553,w,y,x.width,x.height,0,p,g,x.data);t.__maxMipLevel=b.length-1}else if(n.isDataTexture2DArray)r.texImage3D(35866,0,y,l.width,l.height,l.depth,0,p,g,l.data),t.__maxMipLevel=0;else if(n.isDataTexture3D)r.texImage3D(32879,0,y,l.width,l.height,l.depth,0,p,g,l.data),t.__maxMipLevel=0;else if(b.length>0&&h){for(w=0,_=b.length;w<_;w++)x=b[w],r.texImage2D(3553,w,y,p,g,x);n.generateMipmaps=!1,t.__maxMipLevel=b.length-1}else r.texImage2D(3553,0,y,p,g,l),t.__maxMipLevel=0;f(n,h)&&m(3553,n,l.width,l.height),t.__version=n.version,n.onUpdate&&n.onUpdate(n)}function A(t,i,o,s){var c=a.convert(i.texture.format),l=a.convert(i.texture.type),h=v(c,l);r.texImage2D(s,0,h,i.width,i.height,0,c,l,null),e.bindFramebuffer(36160,t),e.framebufferTexture2D(36160,o,s,n.get(i.texture).__webglTexture,0),e.bindFramebuffer(36160,null)}function L(t,r,n){if(e.bindRenderbuffer(36161,t),r.depthBuffer&&!r.stencilBuffer){if(n){var i=P(r);e.renderbufferStorageMultisample(36161,i,33189,r.width,r.height)}else e.renderbufferStorage(36161,33189,r.width,r.height);e.framebufferRenderbuffer(36160,36096,36161,t)}else if(r.depthBuffer&&r.stencilBuffer){if(n){i=P(r);e.renderbufferStorageMultisample(36161,i,35056,r.width,r.height)}else e.renderbufferStorage(36161,34041,r.width,r.height);e.framebufferRenderbuffer(36160,33306,36161,t)}else{var o=v(a.convert(r.texture.format),a.convert(r.texture.type));if(n){i=P(r);e.renderbufferStorageMultisample(36161,i,o,r.width,r.height)}else e.renderbufferStorage(36161,o,r.width,r.height)}e.bindRenderbuffer(36161,null)}function R(t){var r=n.get(t),i=!0===t.isWebGLRenderTargetCube;if(t.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(t,r){if(r&&r.isWebGLRenderTargetCube)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,t),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),w(r.depthTexture,0);var i=n.get(r.depthTexture).__webglTexture;if(1026===r.depthTexture.format)e.framebufferTexture2D(36160,36096,3553,i,0);else{if(1027!==r.depthTexture.format)throw new Error("Unknown depthTexture format");e.framebufferTexture2D(36160,33306,3553,i,0)}}(r.__webglFramebuffer,t)}else if(i){r.__webglDepthbuffer=[];for(var a=0;a<6;a++)e.bindFramebuffer(36160,r.__webglFramebuffer[a]),r.__webglDepthbuffer[a]=e.createRenderbuffer(),L(r.__webglDepthbuffer[a],t)}else e.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=e.createRenderbuffer(),L(r.__webglDepthbuffer,t);e.bindFramebuffer(36160,null)}function P(e){return i.isWebGL2&&e.isWebGLMultisampleRenderTarget?Math.min(i.maxSamples,e.samples):0}var C=!1,O=!1;this.allocateTextureUnit=function(){var e=b;return e>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+e+" texture units while this GPU supports only "+i.maxTextures),b+=1,e},this.resetTextureUnits=function(){b=0},this.setTexture2D=w,this.setTexture2DArray=function(e,t){var i=n.get(e);e.version>0&&i.__version!==e.version?E(i,e,t):(r.activeTexture(33984+t),r.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(e,t){var i=n.get(e);e.version>0&&i.__version!==e.version?E(i,e,t):(r.activeTexture(33984+t),r.bindTexture(32879,i.__webglTexture))},this.setTextureCube=_,this.setTextureCubeDynamic=M,this.setupRenderTarget=function(s){var c=n.get(s),l=n.get(s.texture);s.addEventListener("dispose",x),l.__webglTexture=e.createTexture(),o.memory.textures++;var h=!0===s.isWebGLRenderTargetCube,u=!0===s.isWebGLMultisampleRenderTarget,p=!0===s.isWebGLMultiviewRenderTarget,g=d(s)||i.isWebGL2;if(h){c.__webglFramebuffer=[];for(var y=0;y<6;y++)c.__webglFramebuffer[y]=e.createFramebuffer()}else if(c.__webglFramebuffer=e.createFramebuffer(),u)if(i.isWebGL2){c.__webglMultisampledFramebuffer=e.createFramebuffer(),c.__webglColorRenderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,c.__webglColorRenderbuffer);var b=v(a.convert(s.texture.format),a.convert(s.texture.type)),w=P(s);e.renderbufferStorageMultisample(36161,w,b,s.width,s.height),e.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),e.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),e.bindRenderbuffer(36161,null),s.depthBuffer&&(c.__webglDepthRenderbuffer=e.createRenderbuffer(),L(c.__webglDepthRenderbuffer,s,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");else if(p){var _=s.width,M=s.height,T=s.numViews;e.bindFramebuffer(36160,c.__webglFramebuffer);var E=t.get("OVR_multiview2");o.memory.textures+=2;var C=e.createTexture();e.bindTexture(35866,C),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,32856,_,M,T,0,6408,5121,null),E.framebufferTextureMultiviewOVR(36160,36064,C,0,0,T);var O=e.createTexture();e.bindTexture(35866,O),e.texParameteri(35866,10240,9728),e.texParameteri(35866,10241,9728),e.texImage3D(35866,0,35056,_,M,T,0,34041,34042,null),E.framebufferTextureMultiviewOVR(36160,33306,O,0,0,T);var I=new Array(T);for(y=0;y<T;++y)I[y]=e.createFramebuffer(),e.bindFramebuffer(36160,I[y]),e.framebufferTextureLayer(36160,36064,C,0,y);c.__webglColorTexture=C,c.__webglDepthStencilTexture=O,c.__webglViewFramebuffers=I,e.bindFramebuffer(36160,null),e.bindTexture(35866,null)}if(h){r.bindTexture(34067,l.__webglTexture),S(34067,s.texture,g);for(y=0;y<6;y++)A(c.__webglFramebuffer[y],s,36064,34069+y);f(s.texture,g)&&m(34067,s.texture,s.width,s.height),r.bindTexture(34067,null)}else p||(r.bindTexture(3553,l.__webglTexture),S(3553,s.texture,g),A(c.__webglFramebuffer,s,36064,3553),f(s.texture,g)&&m(3553,s.texture,s.width,s.height),r.bindTexture(3553,null));s.depthBuffer&&R(s)},this.updateRenderTargetMipmap=function(e){var t=e.texture;if(f(t,d(e)||i.isWebGL2)){var a=e.isWebGLRenderTargetCube?34067:3553,o=n.get(t).__webglTexture;r.bindTexture(a,o),m(a,t,e.width,e.height),r.bindTexture(a,null)}},this.updateMultisampleRenderTarget=function(t){if(t.isWebGLMultisampleRenderTarget)if(i.isWebGL2){var r=n.get(t);e.bindFramebuffer(36008,r.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,r.__webglFramebuffer);var a=t.width,o=t.height,s=16384;t.depthBuffer&&(s|=256),t.stencilBuffer&&(s|=1024),e.blitFramebuffer(0,0,a,o,0,0,a,o,s,9728)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(e,t){e&&e.isWebGLRenderTarget&&(!1===C&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),C=!0),e=e.texture),w(e,t)},this.safeSetTextureCube=function(e,t){e&&e.isWebGLRenderTargetCube&&(!1===O&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),O=!0),e=e.texture),e&&e.isCubeTexture||Array.isArray(e.image)&&6===e.image.length?_(e,t):M(e,t)}}function $n(e,t,r){return{convert:function(e){var n;if(1e3===e)return 10497;if(1001===e)return 33071;if(1002===e)return 33648;if(1003===e)return 9728;if(1004===e)return 9984;if(1005===e)return 9986;if(1006===e)return 9729;if(1007===e)return 9985;if(1008===e)return 9987;if(1009===e)return 5121;if(1017===e)return 32819;if(1018===e)return 32820;if(1019===e)return 33635;if(1010===e)return 5120;if(1011===e)return 5122;if(1012===e)return 5123;if(1013===e)return 5124;if(1014===e)return 5125;if(1015===e)return 5126;if(1016===e){if(r.isWebGL2)return 5131;if(null!==(n=t.get("OES_texture_half_float")))return n.HALF_FLOAT_OES}if(1021===e)return 6406;if(1022===e)return 6407;if(1023===e)return 6408;if(1024===e)return 6409;if(1025===e)return 6410;if(1026===e)return 6402;if(1027===e)return 34041;if(1028===e)return 6403;if(100===e)return 32774;if(101===e)return 32778;if(102===e)return 32779;if(200===e)return 0;if(201===e)return 1;if(202===e)return 768;if(203===e)return 769;if(204===e)return 770;if(205===e)return 771;if(206===e)return 772;if(207===e)return 773;if(208===e)return 774;if(209===e)return 775;if(210===e)return 776;if((33776===e||33777===e||33778===e||33779===e)&&null!==(n=t.get("WEBGL_compressed_texture_s3tc"))){if(33776===e)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(33777===e)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(33778===e)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(33779===e)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((35840===e||35841===e||35842===e||35843===e)&&null!==(n=t.get("WEBGL_compressed_texture_pvrtc"))){if(35840===e)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===e)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===e)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===e)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===e&&null!==(n=t.get("WEBGL_compressed_texture_etc1")))return n.COMPRESSED_RGB_ETC1_WEBGL;if((37808===e||37809===e||37810===e||37811===e||37812===e||37813===e||37814===e||37815===e||37816===e||37817===e||37818===e||37819===e||37820===e||37821===e)&&null!==(n=t.get("WEBGL_compressed_texture_astc")))return e;if(103===e||104===e){if(r.isWebGL2){if(103===e)return 32775;if(104===e)return 32776}if(null!==(n=t.get("EXT_blend_minmax"))){if(103===e)return n.MIN_EXT;if(104===e)return n.MAX_EXT}}if(1020===e){if(r.isWebGL2)return 34042;if(null!==(n=t.get("WEBGL_depth_texture")))return n.UNSIGNED_INT_24_8_WEBGL}return 0}}}function ei(e,t,r,n){E.call(this,e,t,n),this.depthBuffer=!1,this.stencilBuffer=!1,this.numViews=r}function ti(e,t){var r,n,i,a,o,s,c,l=e.extensions,h=e.properties,u=0;function d(e){return e.isArrayCamera?e.cameras:(o[0]=e,o)}this.isAvailable=function(){if(void 0===c){var e=l.get("OVR_multiview2");if(c=null!==e&&!1===t.getContextAttributes().antialias){u=t.getParameter(e.MAX_VIEWS_OVR),r=new ei(0,0,2),s=new f,a=[],i=[],o=[];for(var n=0;n<u;n++)a[n]=new N,i[n]=new w}}return c},this.attachCamera=function(t){!1!==function(e){if(void 0===e.isArrayCamera)return!0;var t=e.cameras;if(t.length>u)return!1;for(var r=1,n=t.length;r<n;r++)if(t[0].viewport.z!==t[r].viewport.z||t[0].viewport.w!==t[r].viewport.w)return!1;return!0}(t)&&(n=e.getRenderTarget(),function(t){if(n?s.set(n.width,n.height):e.getDrawingBufferSize(s),t.isArrayCamera){var i=t.cameras[0].viewport;r.setSize(i.z,i.w),r.setNumViews(t.cameras.length)}else r.setSize(s.x,s.y),r.setNumViews(2)}(t),e.setRenderTarget(r))},this.detachCamera=function(i){r===e.getRenderTarget()&&(e.setRenderTarget(n),function(e){var n=r,i=n.numViews,a=h.get(n).__webglViewFramebuffers,o=n.width,c=n.height;if(e.isArrayCamera)for(var l=0;l<i;l++){var u=e.cameras[l].viewport,d=u.x,p=u.y,f=d+u.z,m=p+u.w;t.bindFramebuffer(36008,a[l]),t.blitFramebuffer(0,0,o,c,d,p,f,m,16384,9728)}else t.bindFramebuffer(36008,a[0]),t.blitFramebuffer(0,0,o,c,0,0,s.x,s.y,16384,9728)}(i))},this.updateCameraProjectionMatricesUniform=function(e,r){for(var n=d(e),i=0;i<n.length;i++)a[i].copy(n[i].projectionMatrix);r.setValue(t,"projectionMatrices",a)},this.updateCameraViewMatricesUniform=function(e,r){for(var n=d(e),i=0;i<n.length;i++)a[i].copy(n[i].matrixWorldInverse);r.setValue(t,"viewMatrices",a)},this.updateObjectMatricesUniforms=function(e,r,n){for(var o=d(r),s=0;s<o.length;s++)a[s].multiplyMatrices(o[s].matrixWorldInverse,e.matrixWorld),i[s].getNormalMatrix(a[s]);n.setValue(t,"modelViewMatrices",a),n.setValue(t,"normalMatrices",i)}}function ri(){$.call(this),this.type="Group"}function ni(e){Wt.call(this),this.cameras=e||[]}ei.prototype=Object.assign(Object.create(E.prototype),{constructor:ei,isWebGLMultiviewRenderTarget:!0,copy:function(e){return E.prototype.copy.call(this,e),this.numViews=e.numViews,this},setNumViews:function(e){return this.numViews!==e&&(this.numViews=e,this.dispose()),this}}),ri.prototype=Object.assign(Object.create($.prototype),{constructor:ri,isGroup:!0}),ni.prototype=Object.assign(Object.create(Wt.prototype),{constructor:ni,isArrayCamera:!0});var ii,ai=new y,oi=new y;function si(e,t,r){ai.setFromMatrixPosition(t.matrixWorld),oi.setFromMatrixPosition(r.matrixWorld);var n=ai.distanceTo(oi),i=t.projectionMatrix.elements,a=r.projectionMatrix.elements,o=i[14]/(i[10]-1),s=i[14]/(i[10]+1),c=(i[9]+1)/i[5],l=(i[9]-1)/i[5],h=(i[8]-1)/i[0],u=(a[8]+1)/a[0],d=o*h,p=o*u,f=n/(-h+u),m=f*-h;t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(f),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.getInverse(e.matrixWorld);var v=o+f,g=s+f,y=d-m,x=p+(n-m),b=c*s/g*v,w=l*s/g*v;e.projectionMatrix.makePerspective(y,x,b,w,v,g)}function ci(e){var t,r,n=this,i=null,a=null,o=null,s=[],c=new N,l=new N,h=1,u="local-floor";"undefined"!=typeof window&&"VRFrameData"in window&&(a=new window.VRFrameData,window.addEventListener("vrdisplaypresentchange",S,!1));var d=new N,p=new m,v=new y,g=new Wt;g.viewport=new T,g.layers.enable(1);var x=new Wt;x.viewport=new T,x.layers.enable(2);var b=new ni([g,x]);function w(){return null!==i&&!0===i.isPresenting}b.layers.enable(1),b.layers.enable(2);var _,M=new f;function S(){if(w()){var a=i.getEyeParameters("left");t=2*a.renderWidth*h,r=a.renderHeight*h,_=e.getPixelRatio(),e.getSize(M),e.setDrawingBufferSize(t,r,1),g.viewport.set(0,0,t/2,r),x.viewport.set(t/2,0,t/2,r),R.start(),n.dispatchEvent({type:"sessionstart"})}else n.enabled&&e.setDrawingBufferSize(M.width,M.height,_),R.stop(),n.dispatchEvent({type:"sessionend"})}var E=[];function A(e){for(var t=navigator.getGamepads&&navigator.getGamepads(),r=0,n=0,i=t.length;r<i;r++){var a=t[r];if(a&&("Daydream Controller"===a.id||"Gear VR Controller"===a.id||"Oculus Go Controller"===a.id||"OpenVR Gamepad"===a.id||a.id.startsWith("Oculus Touch")||a.id.startsWith("HTC Vive Focus")||a.id.startsWith("Spatial Controller"))){if(n===e)return a;n++}}}function L(e,n){null!==n&&4===n.length&&e.set(n[0]*t,n[1]*r,n[2]*t,n[3]*r)}this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new ri).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.getDevice=function(){return i},this.setDevice=function(e){void 0!==e&&(i=e),R.setContext(e)},this.setFramebufferScaleFactor=function(e){h=e},this.setReferenceSpaceType=function(e){u=e},this.setPoseTarget=function(e){void 0!==e&&(o=e)},this.getCamera=function(e){var t="local-floor"===u?1.6:0;if(!1===w())return e.position.set(0,t,0),e.rotation.set(0,0,0),e;if(i.depthNear=e.near,i.depthFar=e.far,i.getFrameData(a),"local-floor"===u){var r=i.stageParameters;r?c.fromArray(r.sittingToStandingTransform):c.makeTranslation(0,t,0)}var n=a.pose,h=null!==o?o:e;h.matrix.copy(c),h.matrix.decompose(h.position,h.quaternion,h.scale),null!==n.orientation&&(p.fromArray(n.orientation),h.quaternion.multiply(p)),null!==n.position&&(p.setFromRotationMatrix(c),v.fromArray(n.position),v.applyQuaternion(p),h.position.add(v)),h.updateMatrixWorld(),g.near=e.near,x.near=e.near,g.far=e.far,x.far=e.far,g.matrixWorldInverse.fromArray(a.leftViewMatrix),x.matrixWorldInverse.fromArray(a.rightViewMatrix),l.getInverse(c),"local-floor"===u&&(g.matrixWorldInverse.multiply(l),x.matrixWorldInverse.multiply(l));var f=h.parent;null!==f&&(d.getInverse(f.matrixWorld),g.matrixWorldInverse.multiply(d),x.matrixWorldInverse.multiply(d)),g.matrixWorld.getInverse(g.matrixWorldInverse),x.matrixWorld.getInverse(x.matrixWorldInverse),g.projectionMatrix.fromArray(a.leftProjectionMatrix),x.projectionMatrix.fromArray(a.rightProjectionMatrix),si(b,g,x);var m=i.getLayers();if(m.length){var y=m[0];L(g.viewport,y.leftBounds),L(x.viewport,y.rightBounds)}return function(){for(var e=0;e<s.length;e++){var t=s[e],r=A(e);if(void 0!==r&&void 0!==r.pose){if(null===r.pose)return;var n=r.pose;!1===n.hasPosition&&t.position.set(.2,-.6,-.05),null!==n.position&&t.position.fromArray(n.position),null!==n.orientation&&t.quaternion.fromArray(n.orientation),t.matrix.compose(t.position,t.quaternion,t.scale),t.matrix.premultiply(c),t.matrix.decompose(t.position,t.quaternion,t.scale),t.matrixWorldNeedsUpdate=!0,t.visible=!0;var i="Daydream Controller"===r.id?0:1;void 0===E[e]&&(E[e]=!1),E[e]!==r.buttons[i].pressed&&(E[e]=r.buttons[i].pressed,!0===E[e]?t.dispatchEvent({type:"selectstart"}):(t.dispatchEvent({type:"selectend"}),t.dispatchEvent({type:"select"})))}else t.visible=!1}}(),b},this.getStandingMatrix=function(){return c},this.isPresenting=w;var R=new ar;this.setAnimationLoop=function(e){R.setAnimationLoop(e),w()&&R.start()},this.submitFrame=function(){w()&&i.submitFrame()},this.dispose=function(){"undefined"!=typeof window&&window.removeEventListener("vrdisplaypresentchange",S)},this.setFrameOfReferenceType=function(){console.warn("THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.")}}function li(e,t){var r=this,n=null,i=null,a="local-floor",o=null,s=[],c=[];function l(){return null!==n&&null!==i}var h=new Wt;h.layers.enable(1),h.viewport=new T;var u=new Wt;u.layers.enable(2),u.viewport=new T;var d=new ni([h,u]);function p(e){for(var t=0;t<s.length;t++)c[t]===e.inputSource&&s[t].dispatchEvent({type:e.type})}function f(){e.setFramebuffer(null),e.setRenderTarget(e.getRenderTarget()),y.stop(),r.dispatchEvent({type:"sessionend"})}function m(e){i=e,y.setContext(n),y.start(),r.dispatchEvent({type:"sessionstart"})}function v(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.getInverse(e.matrixWorld)}d.layers.enable(1),d.layers.enable(2),this.enabled=!1,this.getController=function(e){var t=s[e];return void 0===t&&((t=new ri).matrixAutoUpdate=!1,t.visible=!1,s[e]=t),t},this.setFramebufferScaleFactor=function(){},this.setReferenceSpaceType=function(e){a=e},this.getSession=function(){return n},this.setSession=function(e){null!==(n=e)&&(n.addEventListener("select",p),n.addEventListener("selectstart",p),n.addEventListener("selectend",p),n.addEventListener("end",f),n.updateRenderState({baseLayer:new XRWebGLLayer(n,t)}),n.requestReferenceSpace(a).then(m),c=n.inputSources,n.addEventListener("inputsourceschange",(function(){c=n.inputSources,console.log(c);for(var e=0;e<s.length;e++){s[e].userData.inputSource=c[e]}})))},this.getCamera=function(e){if(l()){var t=e.parent,r=d.cameras;v(d,t);for(var n=0;n<r.length;n++)v(r[n],t);e.matrixWorld.copy(d.matrixWorld);for(var i=e.children,a=(n=0,i.length);n<a;n++)i[n].updateMatrixWorld(!0);return si(d,h,u),d}return e},this.isPresenting=l;var g=null;var y=new ar;y.setAnimationLoop((function(t,r){if(null!==(o=r.getViewerPose(i))){var a=o.views,l=n.renderState.baseLayer;e.setFramebuffer(l.framebuffer);for(var h=0;h<a.length;h++){var u=a[h],p=l.getViewport(u),f=u.transform.inverse.matrix,m=d.cameras[h];m.matrix.fromArray(f).getInverse(m.matrix),m.projectionMatrix.fromArray(u.projectionMatrix),m.viewport.set(p.x,p.y,p.width,p.height),0===h&&d.matrix.copy(m.matrix)}}for(h=0;h<s.length;h++){var v=s[h],y=c[h];if(y){var x=r.getPose(y.targetRaySpace,i);if(null!==x){v.matrix.fromArray(x.transform.matrix),v.matrix.decompose(v.position,v.rotation,v.scale),v.visible=!0;continue}}v.visible=!1}g&&g(t)})),this.setAnimationLoop=function(e){g=e},this.dispose=function(){},this.getStandingMatrix=function(){return console.warn("THREE.WebXRManager: getStandingMatrix() is no longer needed."),new N},this.getDevice=function(){console.warn("THREE.WebXRManager: getDevice() has been deprecated.")},this.setDevice=function(){console.warn("THREE.WebXRManager: setDevice() has been deprecated.")},this.setFrameOfReferenceType=function(){console.warn("THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.")},this.submitFrame=function(){}}function hi(e){var t=void 0!==(e=e||{}).canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),r=void 0!==e.context?e.context:null,n=void 0!==e.alpha&&e.alpha,i=void 0===e.depth||e.depth,a=void 0===e.stencil||e.stencil,o=void 0!==e.antialias&&e.antialias,s=void 0===e.premultipliedAlpha||e.premultipliedAlpha,c=void 0!==e.preserveDrawingBuffer&&e.preserveDrawingBuffer,l=void 0!==e.powerPreference?e.powerPreference:"default",h=void 0!==e.failIfMajorPerformanceCaveat&&e.failIfMajorPerformanceCaveat,u=null,d=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=1,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var m,v,g,x,b,w,_,M,S,E,A,L,R,P,C,O,I,D,B=this,z=!1,F=null,U=0,G=0,H=null,k=null,j=-1,V={geometry:null,program:null,wireframe:!1},W=null,q=null,X=new T,Y=new T,Z=null,J=t.width,K=t.height,Q=1,$=new T(0,0,J,K),ee=new T(0,0,J,K),te=!1,re=new tr,ne=new dr,ie=!1,ae=!1,oe=new N,se=new y;function ce(){return null===H?Q:1}try{var le={alpha:n,depth:i,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:l,failIfMajorPerformanceCaveat:h,xrCompatible:!0};if(t.addEventListener("webglcontextlost",fe,!1),t.addEventListener("webglcontextrestored",me,!1),null===(m=r||t.getContext("webgl",le)||t.getContext("experimental-webgl",le)))throw null!==t.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===m.getShaderPrecisionFormat&&(m.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(e){throw console.error("THREE.WebGLRenderer: "+e.message),e}function he(){v=new pr(m),!1===(g=new ur(m,v,e)).isWebGL2&&(v.get("WEBGL_depth_texture"),v.get("OES_texture_float"),v.get("OES_texture_half_float"),v.get("OES_texture_half_float_linear"),v.get("OES_standard_derivatives"),v.get("OES_element_index_uint"),v.get("ANGLE_instanced_arrays")),v.get("OES_texture_float_linear"),D=new $n(m,v,g),(x=new Kn(m,v,D,g)).scissor(Y.copy(ee).multiplyScalar(Q).floor()),x.viewport(X.copy($).multiplyScalar(Q).floor()),b=new vr(m),w=new zn,_=new Qn(m,v,x,w,g,D,b),M=new or(m),S=new fr(m,M,b),E=new xr(m,S,M,b),C=new yr(m),A=new Bn(B,v,g),L=new Hn,R=new Xn,P=new lr(B,x,E,s),O=new hr(m,v,b,g),I=new mr(m,v,b,g),b.programs=A.programs,B.capabilities=g,B.extensions=v,B.properties=w,B.renderLists=L,B.state=x,B.info=b}he();var ue="undefined"!=typeof navigator&&"xr"in navigator&&"supportsSession"in navigator.xr?new li(B,m):new ci(B);this.vr=ue;var de=new ti(B,m),pe=new Jn(B,E,g.maxTextureSize);function fe(e){e.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),z=!0}function me(){console.log("THREE.WebGLRenderer: Context Restored."),z=!1,he()}function ve(e){var t=e.target;t.removeEventListener("dispose",ve),function(e){ge(e),w.remove(e)}(t)}function ge(e){var t=w.get(e).program;e.program=void 0,void 0!==t&&A.releaseProgram(t)}this.shadowMap=pe,this.getContext=function(){return m},this.getContextAttributes=function(){return m.getContextAttributes()},this.forceContextLoss=function(){var e=v.get("WEBGL_lose_context");e&&e.loseContext()},this.forceContextRestore=function(){var e=v.get("WEBGL_lose_context");e&&e.restoreContext()},this.getPixelRatio=function(){return Q},this.setPixelRatio=function(e){void 0!==e&&(Q=e,this.setSize(J,K,!1))},this.getSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),e=new f),e.set(J,K)},this.setSize=function(e,r,n){ue.isPresenting()?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(J=e,K=r,t.width=Math.floor(e*Q),t.height=Math.floor(r*Q),!1!==n&&(t.style.width=e+"px",t.style.height=r+"px"),this.setViewport(0,0,e,r))},this.getDrawingBufferSize=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),e=new f),e.set(J*Q,K*Q).floor()},this.setDrawingBufferSize=function(e,r,n){J=e,K=r,Q=n,t.width=Math.floor(e*n),t.height=Math.floor(r*n),this.setViewport(0,0,e,r)},this.getCurrentViewport=function(e){return void 0===e&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),e=new T),e.copy(X)},this.getViewport=function(e){return e.copy($)},this.setViewport=function(e,t,r,n){e.isVector4?$.set(e.x,e.y,e.z,e.w):$.set(e,t,r,n),x.viewport(X.copy($).multiplyScalar(Q).floor())},this.getScissor=function(e){return e.copy(ee)},this.setScissor=function(e,t,r,n){e.isVector4?ee.set(e.x,e.y,e.z,e.w):ee.set(e,t,r,n),x.scissor(Y.copy(ee).multiplyScalar(Q).floor())},this.getScissorTest=function(){return te},this.setScissorTest=function(e){x.setScissorTest(te=e)},this.getClearColor=function(){return P.getClearColor()},this.setClearColor=function(){P.setClearColor.apply(P,arguments)},this.getClearAlpha=function(){return P.getClearAlpha()},this.setClearAlpha=function(){P.setClearAlpha.apply(P,arguments)},this.clear=function(e,t,r){var n=0;(void 0===e||e)&&(n|=16384),(void 0===t||t)&&(n|=256),(void 0===r||r)&&(n|=1024),m.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",fe,!1),t.removeEventListener("webglcontextrestored",me,!1),L.dispose(),R.dispose(),w.dispose(),E.dispose(),ue.dispose(),xe.stop()},this.renderBufferImmediate=function(e,t){x.initAttributes();var r=w.get(e);e.hasPositions&&!r.position&&(r.position=m.createBuffer()),e.hasNormals&&!r.normal&&(r.normal=m.createBuffer()),e.hasUvs&&!r.uv&&(r.uv=m.createBuffer()),e.hasColors&&!r.color&&(r.color=m.createBuffer());var n=t.getAttributes();e.hasPositions&&(m.bindBuffer(34962,r.position),m.bufferData(34962,e.positionArray,35048),x.enableAttribute(n.position),m.vertexAttribPointer(n.position,3,5126,!1,0,0)),e.hasNormals&&(m.bindBuffer(34962,r.normal),m.bufferData(34962,e.normalArray,35048),x.enableAttribute(n.normal),m.vertexAttribPointer(n.normal,3,5126,!1,0,0)),e.hasUvs&&(m.bindBuffer(34962,r.uv),m.bufferData(34962,e.uvArray,35048),x.enableAttribute(n.uv),m.vertexAttribPointer(n.uv,2,5126,!1,0,0)),e.hasColors&&(m.bindBuffer(34962,r.color),m.bufferData(34962,e.colorArray,35048),x.enableAttribute(n.color),m.vertexAttribPointer(n.color,3,5126,!1,0,0)),x.disableUnusedAttributes(),m.drawArrays(4,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,r,n,i,a){var o=i.isMesh&&i.matrixWorld.determinant()<0;x.setMaterial(n,o);var s=Se(e,t,n,i),c=!1;V.geometry===r.id&&V.program===s.id&&V.wireframe===(!0===n.wireframe)||(V.geometry=r.id,V.program=s.id,V.wireframe=!0===n.wireframe,c=!0),i.morphTargetInfluences&&(C.update(i,r,n,s),c=!0);var l,h=r.index,u=r.attributes.position,d=1;!0===n.wireframe&&(h=S.getWireframeAttribute(r),d=2);var p=O;null!==h&&(l=M.get(h),(p=I).setIndex(l)),c&&(!function(e,t,r,n){if(!1===g.isWebGL2&&(e.isInstancedMesh||t.isInstancedBufferGeometry)&&null===v.get("ANGLE_instanced_arrays"))return;x.initAttributes();var i=t.attributes,a=n.getAttributes(),o=r.defaultAttributeValues;for(var s in a){var c=a[s];if(c>=0){var l=i[s];if(void 0!==l){var h=l.normalized,u=l.itemSize;if(void 0===(_=M.get(l)))continue;var d=_.buffer,p=_.type,f=_.bytesPerElement;if(l.isInterleavedBufferAttribute){var y=l.data,b=y.stride,w=l.offset;y&&y.isInstancedInterleavedBuffer?(x.enableAttributeAndDivisor(c,y.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=y.meshPerAttribute*y.count)):x.enableAttribute(c),m.bindBuffer(34962,d),m.vertexAttribPointer(c,u,p,h,b*f,w*f)}else l.isInstancedBufferAttribute?(x.enableAttributeAndDivisor(c,l.meshPerAttribute),void 0===t.maxInstancedCount&&(t.maxInstancedCount=l.meshPerAttribute*l.count)):x.enableAttribute(c),m.bindBuffer(34962,d),m.vertexAttribPointer(c,u,p,h,0,0)}else if("instanceMatrix"===s){var _;if(void 0===(_=M.get(e.instanceMatrix)))continue;d=_.buffer,p=_.type;x.enableAttributeAndDivisor(c+0,1),x.enableAttributeAndDivisor(c+1,1),x.enableAttributeAndDivisor(c+2,1),x.enableAttributeAndDivisor(c+3,1),m.bindBuffer(34962,d),m.vertexAttribPointer(c+0,4,p,!1,64,0),m.vertexAttribPointer(c+1,4,p,!1,64,16),m.vertexAttribPointer(c+2,4,p,!1,64,32),m.vertexAttribPointer(c+3,4,p,!1,64,48)}else if(void 0!==o){var S=o[s];if(void 0!==S)switch(S.length){case 2:m.vertexAttrib2fv(c,S);break;case 3:m.vertexAttrib3fv(c,S);break;case 4:m.vertexAttrib4fv(c,S);break;default:m.vertexAttrib1fv(c,S)}}}}x.disableUnusedAttributes()}(i,r,n,s),null!==h&&m.bindBuffer(34963,l.buffer));var f=1/0;null!==h?f=h.count:void 0!==u&&(f=u.count);var y=r.drawRange.start*d,b=r.drawRange.count*d,w=null!==a?a.start*d:0,_=null!==a?a.count*d:1/0,T=Math.max(y,w),E=Math.min(f,y+b,w+_)-1,A=Math.max(0,E-T+1);if(0!==A){if(i.isMesh)if(!0===n.wireframe)x.setLineWidth(n.wireframeLinewidth*ce()),p.setMode(1);else switch(i.drawMode){case 0:p.setMode(4);break;case 1:p.setMode(5);break;case 2:p.setMode(6)}else if(i.isLine){var L=n.linewidth;void 0===L&&(L=1),x.setLineWidth(L*ce()),i.isLineSegments?p.setMode(1):i.isLineLoop?p.setMode(2):p.setMode(3)}else i.isPoints?p.setMode(0):i.isSprite&&p.setMode(4);i.isInstancedMesh?p.renderInstances(r,T,A,i.count):r.isInstancedBufferGeometry?p.renderInstances(r,T,A,r.maxInstancedCount):p.render(T,A)}},this.compile=function(e,t){(d=R.get(e,t)).init(),e.traverse((function(e){e.isLight&&(d.pushLight(e),e.castShadow&&d.pushShadow(e))})),d.setupLights(t),e.traverse((function(t){if(t.material)if(Array.isArray(t.material))for(var r=0;r<t.material.length;r++)Me(t.material[r],e.fog,t);else Me(t.material,e.fog,t)}))};var ye=null;var xe=new ar;function be(e,t,r,n){if(!1!==e.visible){if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder;else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)d.pushLight(e),e.castShadow&&d.pushShadow(e);else if(e.isSprite){if(!e.frustumCulled||re.intersectsSprite(e)){n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe);var i=E.update(e);(a=e.material).visible&&u.push(e,i,a,r,se.z,null)}}else if(e.isImmediateRenderObject)n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe),u.push(e,null,e.material,r,se.z,null);else if((e.isMesh||e.isLine||e.isPoints)&&(e.isSkinnedMesh&&e.skeleton.frame!==b.render.frame&&(e.skeleton.update(),e.skeleton.frame=b.render.frame),!e.frustumCulled||re.intersectsObject(e))){n&&se.setFromMatrixPosition(e.matrixWorld).applyMatrix4(oe);i=E.update(e);var a=e.material;if(Array.isArray(a))for(var o=i.groups,s=0,c=o.length;s<c;s++){var l=o[s],h=a[l.materialIndex];h&&h.visible&&u.push(e,i,h,r,se.z,l)}else a.visible&&u.push(e,i,a,r,se.z,null)}var p=e.children;for(s=0,c=p.length;s<c;s++)be(p[s],t,r,n)}}function we(e,t,r,n){for(var i=0,a=e.length;i<a;i++){var o=e[i],s=o.object,c=o.geometry,l=void 0===n?o.material:n,h=o.group;if(r.isArrayCamera)if(q=r,ue.enabled&&de.isAvailable())_e(s,t,r,c,l,h);else for(var u=r.cameras,p=0,f=u.length;p<f;p++){var m=u[p];s.layers.test(m.layers)&&(x.viewport(X.copy(m.viewport)),d.setupLights(m),_e(s,t,m,c,l,h))}else q=null,_e(s,t,r,c,l,h)}}function _e(e,t,r,n,i,a){if(e.onBeforeRender(B,t,r,n,i,a),d=R.get(t,q||r),e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix),e.isImmediateRenderObject){x.setMaterial(i);var o=Se(r,t.fog,i,e);V.geometry=null,V.program=null,V.wireframe=!1,function(e,t){e.render((function(e){B.renderBufferImmediate(e,t)}))}(e,o)}else B.renderBufferDirect(r,t.fog,n,i,e,a);e.onAfterRender(B,t,r,n,i,a),d=R.get(t,q||r)}function Me(e,t,r){var n=w.get(e),i=d.state.lights,a=d.state.shadowsArray,o=i.state.version,s=A.getParameters(e,i.state,a,t,ne.numPlanes,ne.numIntersection,r),c=A.getProgramCode(e,s),l=n.program,h=!0;if(void 0===l)e.addEventListener("dispose",ve);else if(l.code!==c)ge(e);else if(n.lightsStateVersion!==o)n.lightsStateVersion=o,h=!1;else{if(void 0!==s.shaderID)return;h=!1}if(h){if(s.shaderID){var u=ir[s.shaderID];n.shader={name:e.type,uniforms:Gt(u.uniforms),vertexShader:u.vertexShader,fragmentShader:u.fragmentShader}}else n.shader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.onBeforeCompile(n.shader,B),c=A.getProgramCode(e,s),l=A.acquireProgram(e,n.shader,s,c),n.program=l,e.program=l}var p=l.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var f=0;f<B.maxMorphTargets;f++)p["morphTarget"+f]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(f=0;f<B.maxMorphNormals;f++)p["morphNormal"+f]>=0&&e.numSupportedMorphNormals++}var m=n.shader.uniforms;(e.isShaderMaterial||e.isRawShaderMaterial)&&!0!==e.clipping||(n.numClippingPlanes=ne.numPlanes,n.numIntersection=ne.numIntersection,m.clippingPlanes=ne.uniform),n.fog=t,n.needsLights=function(e){return e.isMeshLambertMaterial||e.isMeshPhongMaterial||e.isMeshStandardMaterial||e.isShadowMaterial||e.isShaderMaterial&&!0===e.lights}(e),n.lightsStateVersion=o,n.needsLights&&(m.ambientLightColor.value=i.state.ambient,m.lightProbe.value=i.state.probe,m.directionalLights.value=i.state.directional,m.spotLights.value=i.state.spot,m.rectAreaLights.value=i.state.rectArea,m.pointLights.value=i.state.point,m.hemisphereLights.value=i.state.hemi,m.directionalShadowMap.value=i.state.directionalShadowMap,m.directionalShadowMatrix.value=i.state.directionalShadowMatrix,m.spotShadowMap.value=i.state.spotShadowMap,m.spotShadowMatrix.value=i.state.spotShadowMatrix,m.pointShadowMap.value=i.state.pointShadowMap,m.pointShadowMatrix.value=i.state.pointShadowMatrix);var v=n.program.getUniforms(),g=gn.seqWithValue(v.seq,m);n.uniformsList=g}function Se(e,t,r,n){_.resetTextureUnits();var i=w.get(r),a=d.state.lights;if(ie&&(ae||e!==W)){var o=e===W&&r.id===j;ne.setState(r.clippingPlanes,r.clipIntersection,r.clipShadows,e,i,o)}!1===r.needsUpdate&&(void 0===i.program||r.fog&&i.fog!==t||i.needsLights&&i.lightsStateVersion!==a.state.version?r.needsUpdate=!0:void 0===i.numClippingPlanes||i.numClippingPlanes===ne.numPlanes&&i.numIntersection===ne.numIntersection||(r.needsUpdate=!0)),r.needsUpdate&&(Me(r,t,n),r.needsUpdate=!1);var s,c,l=!1,h=!1,u=!1,f=i.program,v=f.getUniforms(),y=i.shader.uniforms;if(x.useProgram(f.program)&&(l=!0,h=!0,u=!0),r.id!==j&&(j=r.id,h=!0),l||W!==e){if(f.numMultiviewViews>0?de.updateCameraProjectionMatricesUniform(e,v):v.setValue(m,"projectionMatrix",e.projectionMatrix),g.logarithmicDepthBuffer&&v.setValue(m,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),W!==e&&(W=e,h=!0,u=!0),r.isShaderMaterial||r.isMeshPhongMaterial||r.isMeshStandardMaterial||r.envMap){var b=v.map.cameraPosition;void 0!==b&&b.setValue(m,se.setFromMatrixPosition(e.matrixWorld))}(r.isMeshPhongMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial||r.skinning)&&(f.numMultiviewViews>0?de.updateCameraViewMatricesUniform(e,v):v.setValue(m,"viewMatrix",e.matrixWorldInverse))}if(r.skinning){v.setOptional(m,n,"bindMatrix"),v.setOptional(m,n,"bindMatrixInverse");var M=n.skeleton;if(M){var S=M.bones;if(g.floatVertexTextures){if(void 0===M.boneTexture){var T=Math.sqrt(4*S.length);T=p.ceilPowerOfTwo(T),T=Math.max(T,4);var E=new Float32Array(T*T*4);E.set(M.boneMatrices);var A=new Yt(E,T,T,1023,1015);M.boneMatrices=E,M.boneTexture=A,M.boneTextureSize=T}v.setValue(m,"boneTexture",M.boneTexture,_),v.setValue(m,"boneTextureSize",M.boneTextureSize)}else v.setOptional(m,M,"boneMatrices")}}return(h||i.receiveShadow!==n.receiveShadow)&&(i.receiveShadow=n.receiveShadow,v.setValue(m,"receiveShadow",n.receiveShadow)),h&&(v.setValue(m,"toneMappingExposure",B.toneMappingExposure),v.setValue(m,"toneMappingWhitePoint",B.toneMappingWhitePoint),i.needsLights&&(c=u,(s=y).ambientLightColor.needsUpdate=c,s.lightProbe.needsUpdate=c,s.directionalLights.needsUpdate=c,s.pointLights.needsUpdate=c,s.spotLights.needsUpdate=c,s.rectAreaLights.needsUpdate=c,s.hemisphereLights.needsUpdate=c),t&&r.fog&&function(e,t){e.fogColor.value.copy(t.color),t.isFog?(e.fogNear.value=t.near,e.fogFar.value=t.far):t.isFogExp2&&(e.fogDensity.value=t.density)}(y,t),r.isMeshBasicMaterial?Te(y,r):r.isMeshLambertMaterial?(Te(y,r),function(e,t){t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap)}(y,r)):r.isMeshPhongMaterial?(Te(y,r),r.isMeshToonMaterial?function(e,t){Ee(e,t),t.gradientMap&&(e.gradientMap.value=t.gradientMap)}(y,r):Ee(y,r)):r.isMeshStandardMaterial?(Te(y,r),r.isMeshPhysicalMaterial?function(e,t){Ae(e,t),e.reflectivity.value=t.reflectivity,e.clearcoat.value=t.clearcoat,e.clearcoatRoughness.value=t.clearcoatRoughness,t.sheen&&e.sheen.value.copy(t.sheen);t.clearcoatNormalMap&&(e.clearcoatNormalScale.value.copy(t.clearcoatNormalScale),e.clearcoatNormalMap.value=t.clearcoatNormalMap,1===t.side&&e.clearcoatNormalScale.value.negate());e.transparency.value=t.transparency}(y,r):Ae(y,r)):r.isMeshMatcapMaterial?(Te(y,r),function(e,t){t.matcap&&(e.matcap.value=t.matcap);t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isMeshDepthMaterial?(Te(y,r),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isMeshDistanceMaterial?(Te(y,r),function(e,t){t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias);e.referencePosition.value.copy(t.referencePosition),e.nearDistance.value=t.nearDistance,e.farDistance.value=t.farDistance}(y,r)):r.isMeshNormalMaterial?(Te(y,r),function(e,t){t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1));t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate());t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}(y,r)):r.isLineBasicMaterial?(function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity}(y,r),r.isLineDashedMaterial&&function(e,t){e.dashSize.value=t.dashSize,e.totalSize.value=t.dashSize+t.gapSize,e.scale.value=t.scale}(y,r)):r.isPointsMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.size.value=t.size*Q,e.scale.value=.5*K,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(y,r):r.isSpriteMaterial?function(e,t){e.diffuse.value.copy(t.color),e.opacity.value=t.opacity,e.rotation.value=t.rotation,e.map.value=t.map,null!==t.map&&(!0===t.map.matrixAutoUpdate&&t.map.updateMatrix(),e.uvTransform.value.copy(t.map.matrix))}(y,r):r.isShadowMaterial&&(y.color.value.copy(r.color),y.opacity.value=r.opacity),void 0!==y.ltc_1&&(y.ltc_1.value=nr.LTC_1),void 0!==y.ltc_2&&(y.ltc_2.value=nr.LTC_2),gn.upload(m,i.uniformsList,y,_)),r.isShaderMaterial&&!0===r.uniformsNeedUpdate&&(gn.upload(m,i.uniformsList,y,_),r.uniformsNeedUpdate=!1),r.isSpriteMaterial&&v.setValue(m,"center",n.center),f.numMultiviewViews>0?de.updateObjectMatricesUniforms(n,e,v):(v.setValue(m,"modelViewMatrix",n.modelViewMatrix),v.setValue(m,"normalMatrix",n.normalMatrix)),v.setValue(m,"modelMatrix",n.matrixWorld),f}function Te(e,t){var r;e.opacity.value=t.opacity,t.color&&e.diffuse.value.copy(t.color),t.emissive&&e.emissive.value.copy(t.emissive).multiplyScalar(t.emissiveIntensity),t.map&&(e.map.value=t.map),t.alphaMap&&(e.alphaMap.value=t.alphaMap),t.specularMap&&(e.specularMap.value=t.specularMap),t.envMap&&(e.envMap.value=t.envMap,e.flipEnvMap.value=t.envMap.isCubeTexture?-1:1,e.reflectivity.value=t.reflectivity,e.refractionRatio.value=t.refractionRatio,e.maxMipLevel.value=w.get(t.envMap).__maxMipLevel),t.lightMap&&(e.lightMap.value=t.lightMap,e.lightMapIntensity.value=t.lightMapIntensity),t.aoMap&&(e.aoMap.value=t.aoMap,e.aoMapIntensity.value=t.aoMapIntensity),t.map?r=t.map:t.specularMap?r=t.specularMap:t.displacementMap?r=t.displacementMap:t.normalMap?r=t.normalMap:t.bumpMap?r=t.bumpMap:t.roughnessMap?r=t.roughnessMap:t.metalnessMap?r=t.metalnessMap:t.alphaMap?r=t.alphaMap:t.emissiveMap&&(r=t.emissiveMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix))}function Ee(e,t){e.specular.value.copy(t.specular),e.shininess.value=Math.max(t.shininess,1e-4),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias)}function Ae(e,t){e.roughness.value=t.roughness,e.metalness.value=t.metalness,t.roughnessMap&&(e.roughnessMap.value=t.roughnessMap),t.metalnessMap&&(e.metalnessMap.value=t.metalnessMap),t.emissiveMap&&(e.emissiveMap.value=t.emissiveMap),t.bumpMap&&(e.bumpMap.value=t.bumpMap,e.bumpScale.value=t.bumpScale,1===t.side&&(e.bumpScale.value*=-1)),t.normalMap&&(e.normalMap.value=t.normalMap,e.normalScale.value.copy(t.normalScale),1===t.side&&e.normalScale.value.negate()),t.displacementMap&&(e.displacementMap.value=t.displacementMap,e.displacementScale.value=t.displacementScale,e.displacementBias.value=t.displacementBias),t.envMap&&(e.envMapIntensity.value=t.envMapIntensity)}xe.setAnimationLoop((function(e){ue.isPresenting()||ye&&ye(e)})),"undefined"!=typeof window&&xe.setContext(window),this.setAnimationLoop=function(e){ye=e,ue.setAnimationLoop(e),xe.start()},this.render=function(e,t){var r,n;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),r=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),n=arguments[3]),t&&t.isCamera){if(!z){V.geometry=null,V.program=null,V.wireframe=!1,j=-1,W=null,!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),ue.enabled&&(t=ue.getCamera(t)),(d=R.get(e,t)).init(),e.onBeforeRender(B,e,t,r||H),oe.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),re.setFromMatrix(oe),ae=this.localClippingEnabled,ie=ne.init(this.clippingPlanes,ae,t),(u=L.get(e,t)).init(),be(e,t,0,B.sortObjects),!0===B.sortObjects&&u.sort(),ie&&ne.beginShadows();var i=d.state.shadowsArray;pe.render(i,e,t),d.setupLights(t),ie&&ne.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==r&&this.setRenderTarget(r),ue.enabled&&de.isAvailable()&&de.attachCamera(t),P.render(u,e,t,n);var a=u.opaque,o=u.transparent;if(e.overrideMaterial){var s=e.overrideMaterial;a.length&&we(a,e,t,s),o.length&&we(o,e,t,s)}else a.length&&we(a,e,t),o.length&&we(o,e,t);e.onAfterRender(B,e,t),null!==H&&(_.updateRenderTargetMipmap(H),_.updateMultisampleRenderTarget(H)),x.buffers.depth.setTest(!0),x.buffers.depth.setMask(!0),x.buffers.color.setMask(!0),x.setPolygonOffset(!1),ue.enabled&&(de.isAvailable()&&de.detachCamera(t),ue.submitFrame()),u=null,d=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(e){F!==e&&m.bindFramebuffer(36160,e),F=e},this.getActiveCubeFace=function(){return U},this.getActiveMipmapLevel=function(){return G},this.getRenderTarget=function(){return H},this.setRenderTarget=function(e,t,r){H=e,U=t,G=r,e&&void 0===w.get(e).__webglFramebuffer&&_.setupRenderTarget(e);var n=F,i=!1;if(e){var a=w.get(e).__webglFramebuffer;e.isWebGLRenderTargetCube?(n=a[t||0],i=!0):n=e.isWebGLMultisampleRenderTarget?w.get(e).__webglMultisampledFramebuffer:a,X.copy(e.viewport),Y.copy(e.scissor),Z=e.scissorTest}else X.copy($).multiplyScalar(Q).floor(),Y.copy(ee).multiplyScalar(Q).floor(),Z=te;if(k!==n&&(m.bindFramebuffer(36160,n),k=n),x.viewport(X),x.scissor(Y),x.setScissorTest(Z),i){var o=w.get(e.texture);m.framebufferTexture2D(36160,36064,34069+(t||0),o.__webglTexture,r||0)}},this.readRenderTargetPixels=function(e,t,r,n,i,a,o){if(e&&e.isWebGLRenderTarget){var s=w.get(e).__webglFramebuffer;if(e.isWebGLRenderTargetCube&&void 0!==o&&(s=s[o]),s){var c=!1;s!==k&&(m.bindFramebuffer(36160,s),c=!0);try{var l=e.texture,h=l.format,u=l.type;if(1023!==h&&D.convert(h)!==m.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(1009===u||D.convert(u)===m.getParameter(35738)||1015===u&&(g.isWebGL2||v.get("OES_texture_float")||v.get("WEBGL_color_buffer_float"))||1016===u&&(g.isWebGL2?v.get("EXT_color_buffer_float"):v.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===m.checkFramebufferStatus(36160)?t>=0&&t<=e.width-n&&r>=0&&r<=e.height-i&&m.readPixels(t,r,n,i,D.convert(h),D.convert(u),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&m.bindFramebuffer(36160,k)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(e,t,r){var n=t.image.width,i=t.image.height,a=D.convert(t.format);_.setTexture2D(t,0),m.copyTexImage2D(3553,r||0,a,e.x,e.y,n,i,0)},this.copyTextureToTexture=function(e,t,r,n){var i=t.image.width,a=t.image.height,o=D.convert(r.format),s=D.convert(r.type);_.setTexture2D(r,0),t.isDataTexture?m.texSubImage2D(3553,n||0,e.x,e.y,i,a,o,s,t.image.data):m.texSubImage2D(3553,n||0,e.x,e.y,o,s,t.image)},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function ui(e,t){this.name="",this.color=new Ue(e),this.density=void 0!==t?t:25e-5}function di(e,t,r){this.name="",this.color=new Ue(e),this.near=void 0!==t?t:1,this.far=void 0!==r?r:1e3}function pi(e,t){this.array=e,this.stride=t,this.count=void 0!==e?e.length/t:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0}function fi(e,t,r,n){this.data=e,this.itemSize=t,this.offset=r,this.normalized=!0===n}function mi(e){We.call(this),this.type="SpriteMaterial",this.color=new Ue(16777215),this.map=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(e)}Object.assign(ci.prototype,h.prototype),Object.assign(li.prototype,h.prototype),Object.assign(ui.prototype,{isFogExp2:!0,clone:function(){return new ui(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(di.prototype,{isFog:!0,clone:function(){return new di(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(pi.prototype,"needsUpdate",{set:function(e){!0===e&&this.version++}}),Object.assign(pi.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,t,r){e*=this.stride,r*=t.stride;for(var n=0,i=this.stride;n<i;n++)this.array[e+n]=t.array[r+n];return this},set:function(e,t){return void 0===t&&(t=0),this.array.set(e,t),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(e){return this.onUploadCallback=e,this}}),Object.defineProperties(fi.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(fi.prototype,{isInterleavedBufferAttribute:!0,setX:function(e,t){return this.data.array[e*this.data.stride+this.offset]=t,this},setY:function(e,t){return this.data.array[e*this.data.stride+this.offset+1]=t,this},setZ:function(e,t){return this.data.array[e*this.data.stride+this.offset+2]=t,this},setW:function(e,t){return this.data.array[e*this.data.stride+this.offset+3]=t,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,t,r){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this},setXYZ:function(e,t,r,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this},setXYZW:function(e,t,r,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=t,this.data.array[e+1]=r,this.data.array[e+2]=n,this.data.array[e+3]=i,this}}),mi.prototype=Object.create(We.prototype),mi.prototype.constructor=mi,mi.prototype.isSpriteMaterial=!0,mi.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this};var vi=new y,gi=new y,yi=new y,xi=new f,bi=new f,wi=new N,_i=new y,Mi=new y,Si=new y,Ti=new f,Ei=new f,Ai=new f;function Li(e){if($.call(this),this.type="Sprite",void 0===ii){ii=new dt;var t=new pi(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);ii.setIndex([0,1,2,0,2,3]),ii.addAttribute("position",new fi(t,3,0,!1)),ii.addAttribute("uv",new fi(t,2,3,!1))}this.geometry=ii,this.material=void 0!==e?e:new mi,this.center=new f(.5,.5)}function Ri(e,t,r,n,i,a){xi.subVectors(e,r).addScalar(.5).multiply(n),void 0!==i?(bi.x=a*xi.x-i*xi.y,bi.y=i*xi.x+a*xi.y):bi.copy(xi),e.copy(t),e.x+=bi.x,e.y+=bi.y,e.applyMatrix4(wi)}Li.prototype=Object.assign(Object.create($.prototype),{constructor:Li,isSprite:!0,raycast:function(e,t){null===e.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),gi.setFromMatrixScale(this.matrixWorld),wi.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),yi.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&gi.multiplyScalar(-yi.z);var r,n,i=this.material.rotation;0!==i&&(n=Math.cos(i),r=Math.sin(i));var a=this.center;Ri(_i.set(-.5,-.5,0),yi,a,gi,r,n),Ri(Mi.set(.5,-.5,0),yi,a,gi,r,n),Ri(Si.set(.5,.5,0),yi,a,gi,r,n),Ti.set(0,0),Ei.set(1,0),Ai.set(1,1);var o=e.ray.intersectTriangle(_i,Mi,Si,!1,vi);if(null!==o||(Ri(Mi.set(-.5,.5,0),yi,a,gi,r,n),Ei.set(0,1),null!==(o=e.ray.intersectTriangle(_i,Si,Mi,!1,vi)))){var s=e.ray.origin.distanceTo(vi);s<e.near||s>e.far||t.push({distance:s,point:vi.clone(),uv:Ne.getUV(vi,_i,Mi,Si,Ti,Ei,Ai,new f),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(e){return $.prototype.copy.call(this,e),void 0!==e.center&&this.center.copy(e.center),this}});var Pi=new y,Ci=new y;function Oi(){$.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function Ii(e,t){e&&e.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),Pt.call(this,e,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new N,this.bindMatrixInverse=new N}Oi.prototype=Object.assign(Object.create($.prototype),{constructor:Oi,isLOD:!0,copy:function(e){$.prototype.copy.call(this,e,!1);for(var t=e.levels,r=0,n=t.length;r<n;r++){var i=t[r];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,t){void 0===t&&(t=0),t=Math.abs(t);for(var r=this.levels,n=0;n<r.length&&!(t<r[n].distance);n++);return r.splice(n,0,{distance:t,object:e}),this.add(e),this},getObjectForDistance:function(e){for(var t=this.levels,r=1,n=t.length;r<n&&!(e<t[r].distance);r++);return t[r-1].object},raycast:function(e,t){Pi.setFromMatrixPosition(this.matrixWorld);var r=e.ray.origin.distanceTo(Pi);this.getObjectForDistance(r).raycast(e,t)},update:function(e){var t=this.levels;if(t.length>1){Pi.setFromMatrixPosition(e.matrixWorld),Ci.setFromMatrixPosition(this.matrixWorld);var r=Pi.distanceTo(Ci);t[0].object.visible=!0;for(var n=1,i=t.length;n<i&&r>=t[n].distance;n++)t[n-1].object.visible=!1,t[n].object.visible=!0;for(;n<i;n++)t[n].object.visible=!1}},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);t.object.levels=[];for(var r=this.levels,n=0,i=r.length;n<i;n++){var a=r[n];t.object.levels.push({object:a.object.uuid,distance:a.distance})}return t}}),Ii.prototype=Object.assign(Object.create(Pt.prototype),{constructor:Ii,isSkinnedMesh:!0,bind:function(e,t){this.skeleton=e,void 0===t&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var e=new T,t=this.geometry.attributes.skinWeight,r=0,n=t.count;r<n;r++){e.x=t.getX(r),e.y=t.getY(r),e.z=t.getZ(r),e.w=t.getW(r);var i=1/e.manhattanLength();i!==1/0?e.multiplyScalar(i):e.set(1,0,0,0),t.setXYZW(r,e.x,e.y,e.z,e.w)}},updateMatrixWorld:function(e){Pt.prototype.updateMatrixWorld.call(this,e),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var Di=new N,Ni=new N;function Bi(e,t){if(e=e||[],this.bones=e.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===t)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var r=0,n=this.bones.length;r<n;r++)this.boneInverses.push(new N)}}function zi(){$.call(this),this.type="Bone"}function Fi(e,t,r){Pt.call(this,e,t),this.instanceMatrix=new Xe(new Float32Array(16*r),16),this.count=r}function Ui(e){We.call(this),this.type="LineBasicMaterial",this.color=new Ue(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(e)}Object.assign(Bi.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,t=this.bones.length;e<t;e++){var r=new N;this.bones[e]&&r.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(r)}},pose:function(){var e,t,r;for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&e.matrixWorld.getInverse(this.boneInverses[t]);for(t=0,r=this.bones.length;t<r;t++)(e=this.bones[t])&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){for(var e=this.bones,t=this.boneInverses,r=this.boneMatrices,n=this.boneTexture,i=0,a=e.length;i<a;i++){var o=e[i]?e[i].matrixWorld:Ni;Di.multiplyMatrices(o,t[i]),Di.toArray(r,16*i)}void 0!==n&&(n.needsUpdate=!0)},clone:function(){return new Bi(this.bones,this.boneInverses)},getBoneByName:function(e){for(var t=0,r=this.bones.length;t<r;t++){var n=this.bones[t];if(n.name===e)return n}}}),zi.prototype=Object.assign(Object.create($.prototype),{constructor:zi,isBone:!0}),Fi.prototype=Object.assign(Object.create(Pt.prototype),{constructor:Fi,isInstancedMesh:!0,raycast:function(){},setMatrixAt:function(e,t){t.toArray(this.instanceMatrix.array,16*e)},updateMorphTargets:function(){}}),Ui.prototype=Object.create(We.prototype),Ui.prototype.constructor=Ui,Ui.prototype.isLineBasicMaterial=!0,Ui.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this};var Gi=new y,Hi=new y,ki=new N,ji=new Se,Vi=new ve;function Wi(e,t,r){1===r&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),$.call(this),this.type="Line",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new Ui({color:16777215*Math.random()})}Wi.prototype=Object.assign(Object.create($.prototype),{constructor:Wi,isLine:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,r=[0],n=1,i=t.count;n<i;n++)Gi.fromBufferAttribute(t,n-1),Hi.fromBufferAttribute(t,n),r[n]=r[n-1],r[n]+=Gi.distanceTo(Hi);e.addAttribute("lineDistance",new tt(r,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;(r=e.lineDistances)[0]=0;for(n=1,i=a.length;n<i;n++)r[n]=r[n-1],r[n]+=a[n-1].distanceTo(a[n])}return this},raycast:function(e,t){var r=e.linePrecision,n=this.geometry,i=this.matrixWorld;if(null===n.boundingSphere&&n.computeBoundingSphere(),Vi.copy(n.boundingSphere),Vi.applyMatrix4(i),Vi.radius+=r,!1!==e.ray.intersectsSphere(Vi)){ki.getInverse(i),ji.copy(e.ray).applyMatrix4(ki);var a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,s=new y,c=new y,l=new y,h=new y,u=this&&this.isLineSegments?2:1;if(n.isBufferGeometry){var d=n.index,p=n.attributes.position.array;if(null!==d)for(var f=d.array,m=0,v=f.length-1;m<v;m+=u){var g=f[m],x=f[m+1];if(s.fromArray(p,3*g),c.fromArray(p,3*x),!(ji.distanceSqToSegment(s,c,h,l)>o))h.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(h))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}else for(m=0,v=p.length/3-1;m<v;m+=u){if(s.fromArray(p,3*m),c.fromArray(p,3*m+3),!(ji.distanceSqToSegment(s,c,h,l)>o))h.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(h))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}else if(n.isGeometry){var b=n.vertices,w=b.length;for(m=0;m<w-1;m+=u){var _;if(!(ji.distanceSqToSegment(b[m],b[m+1],h,l)>o))h.applyMatrix4(this.matrixWorld),(_=e.ray.origin.distanceTo(h))<e.near||_>e.far||t.push({distance:_,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var qi=new y,Xi=new y;function Yi(e,t){Wi.call(this,e,t),this.type="LineSegments"}function Zi(e,t){Wi.call(this,e,t),this.type="LineLoop"}function Ji(e){We.call(this),this.type="PointsMaterial",this.color=new Ue(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(e)}Yi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Yi,isLineSegments:!0,computeLineDistances:function(){var e=this.geometry;if(e.isBufferGeometry)if(null===e.index){for(var t=e.attributes.position,r=[],n=0,i=t.count;n<i;n+=2)qi.fromBufferAttribute(t,n),Xi.fromBufferAttribute(t,n+1),r[n]=0===n?0:r[n-1],r[n+1]=r[n]+qi.distanceTo(Xi);e.addAttribute("lineDistance",new tt(r,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(e.isGeometry){var a=e.vertices;for(r=e.lineDistances,n=0,i=a.length;n<i;n+=2)qi.copy(a[n]),Xi.copy(a[n+1]),r[n]=0===n?0:r[n-1],r[n+1]=r[n]+qi.distanceTo(Xi)}return this}}),Zi.prototype=Object.assign(Object.create(Wi.prototype),{constructor:Zi,isLineLoop:!0}),Ji.prototype=Object.create(We.prototype),Ji.prototype.constructor=Ji,Ji.prototype.isPointsMaterial=!0,Ji.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.morphTargets=e.morphTargets,this};var Ki=new N,Qi=new Se,$i=new ve,ea=new y;function ta(e,t){$.call(this),this.type="Points",this.geometry=void 0!==e?e:new dt,this.material=void 0!==t?t:new Ji({color:16777215*Math.random()}),this.updateMorphTargets()}function ra(e,t,r,n,i,a,o){var s=Qi.distanceSqToPoint(e);if(s<r){var c=new y;Qi.closestPointToPoint(e,c),c.applyMatrix4(n);var l=i.ray.origin.distanceTo(c);if(l<i.near||l>i.far)return;a.push({distance:l,distanceToRay:Math.sqrt(s),point:c,index:t,face:null,object:o})}}function na(e,t,r,n,i,a,o,s,c){S.call(this,e,t,r,n,i,a,o,s,c),this.format=void 0!==o?o:1022,this.minFilter=void 0!==a?a:1006,this.magFilter=void 0!==i?i:1006,this.generateMipmaps=!1}function ia(e,t,r,n,i,a,o,s,c,l,h,u){S.call(this,null,a,o,s,c,l,n,i,h,u),this.image={width:t,height:r},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}function aa(e,t,r,n,i,a,o,s,c){S.call(this,e,t,r,n,i,a,o,s,c),this.needsUpdate=!0}function oa(e,t,r,n,i,a,o,s,c,l){if(1026!==(l=void 0!==l?l:1026)&&1027!==l)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===r&&1026===l&&(r=1012),void 0===r&&1027===l&&(r=1020),S.call(this,null,n,i,a,o,s,l,r,c),this.image={width:e,height:t},this.magFilter=void 0!==o?o:1003,this.minFilter=void 0!==s?s:1003,this.flipY=!1,this.generateMipmaps=!1}function sa(e){dt.call(this),this.type="WireframeGeometry";var t,r,n,i,a,o,s,c,l,h,u=[],d=[0,0],p={},f=["a","b","c"];if(e&&e.isGeometry){var m=e.faces;for(t=0,n=m.length;t<n;t++){var v=m[t];for(r=0;r<3;r++)s=v[f[r]],c=v[f[(r+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[l=d[0]+","+d[1]]&&(p[l]={index1:d[0],index2:d[1]})}for(l in p)o=p[l],h=e.vertices[o.index1],u.push(h.x,h.y,h.z),h=e.vertices[o.index2],u.push(h.x,h.y,h.z)}else if(e&&e.isBufferGeometry){var g,x,b,w,_,M,S;if(h=new y,null!==e.index){for(g=e.attributes.position,x=e.index,0===(b=e.groups).length&&(b=[{start:0,count:x.count,materialIndex:0}]),i=0,a=b.length;i<a;++i)for(t=_=(w=b[i]).start,n=_+w.count;t<n;t+=3)for(r=0;r<3;r++)s=x.getX(t+r),c=x.getX(t+(r+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[l=d[0]+","+d[1]]&&(p[l]={index1:d[0],index2:d[1]});for(l in p)o=p[l],h.fromBufferAttribute(g,o.index1),u.push(h.x,h.y,h.z),h.fromBufferAttribute(g,o.index2),u.push(h.x,h.y,h.z)}else for(t=0,n=(g=e.attributes.position).count/3;t<n;t++)for(r=0;r<3;r++)M=3*t+r,h.fromBufferAttribute(g,M),u.push(h.x,h.y,h.z),S=3*t+(r+1)%3,h.fromBufferAttribute(g,S),u.push(h.x,h.y,h.z)}this.addAttribute("position",new tt(u,3))}function ca(e,t,r){zt.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:t,stacks:r},this.fromBufferGeometry(new la(e,t,r)),this.mergeVertices()}function la(e,t,r){dt.call(this),this.type="ParametricBufferGeometry",this.parameters={func:e,slices:t,stacks:r};var n,i,a=[],o=[],s=[],c=[],l=1e-5,h=new y,u=new y,d=new y,p=new y,f=new y;e.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var m=t+1;for(n=0;n<=r;n++){var v=n/r;for(i=0;i<=t;i++){var g=i/t;e(g,v,u),o.push(u.x,u.y,u.z),g-l>=0?(e(g-l,v,d),p.subVectors(u,d)):(e(g+l,v,d),p.subVectors(d,u)),v-l>=0?(e(g,v-l,d),f.subVectors(u,d)):(e(g,v+l,d),f.subVectors(d,u)),h.crossVectors(p,f).normalize(),s.push(h.x,h.y,h.z),c.push(g,v)}}for(n=0;n<r;n++)for(i=0;i<t;i++){var x=n*m+i,b=n*m+i+1,w=(n+1)*m+i+1,_=(n+1)*m+i;a.push(x,b,_),a.push(b,w,_)}this.setIndex(a),this.addAttribute("position",new tt(o,3)),this.addAttribute("normal",new tt(s,3)),this.addAttribute("uv",new tt(c,2))}function ha(e,t,r,n){zt.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:n},this.fromBufferGeometry(new ua(e,t,r,n)),this.mergeVertices()}function ua(e,t,r,n){dt.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:e,indices:t,radius:r,detail:n},r=r||1;var i=[],a=[];function o(e,t,r,n){var i,a,o=Math.pow(2,n),c=[];for(i=0;i<=o;i++){c[i]=[];var l=e.clone().lerp(r,i/o),h=t.clone().lerp(r,i/o),u=o-i;for(a=0;a<=u;a++)c[i][a]=0===a&&i===o?l:l.clone().lerp(h,a/u)}for(i=0;i<o;i++)for(a=0;a<2*(o-i)-1;a++){var d=Math.floor(a/2);a%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(e){i.push(e.x,e.y,e.z)}function c(t,r){var n=3*t;r.x=e[n+0],r.y=e[n+1],r.z=e[n+2]}function l(e,t,r,n){n<0&&1===e.x&&(a[t]=e.x-1),0===r.x&&0===r.z&&(a[t]=n/2/Math.PI+.5)}function h(e){return Math.atan2(e.z,-e.x)}!function(e){for(var r=new y,n=new y,i=new y,a=0;a<t.length;a+=3)c(t[a+0],r),c(t[a+1],n),c(t[a+2],i),o(r,n,i,e)}(n=n||0),function(e){for(var t=new y,r=0;r<i.length;r+=3)t.x=i[r+0],t.y=i[r+1],t.z=i[r+2],t.normalize().multiplyScalar(e),i[r+0]=t.x,i[r+1]=t.y,i[r+2]=t.z}(r),function(){for(var e=new y,t=0;t<i.length;t+=3){e.x=i[t+0],e.y=i[t+1],e.z=i[t+2];var r=h(e)/2/Math.PI+.5,n=(o=e,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(r,1-n)}var o;(function(){for(var e=new y,t=new y,r=new y,n=new y,o=new f,s=new f,c=new f,u=0,d=0;u<i.length;u+=9,d+=6){e.set(i[u+0],i[u+1],i[u+2]),t.set(i[u+3],i[u+4],i[u+5]),r.set(i[u+6],i[u+7],i[u+8]),o.set(a[d+0],a[d+1]),s.set(a[d+2],a[d+3]),c.set(a[d+4],a[d+5]),n.copy(e).add(t).add(r).divideScalar(3);var p=h(n);l(o,d+0,e,p),l(s,d+2,t,p),l(c,d+4,r,p)}})(),function(){for(var e=0;e<a.length;e+=6){var t=a[e+0],r=a[e+2],n=a[e+4],i=Math.max(t,r,n),o=Math.min(t,r,n);i>.9&&o<.1&&(t<.2&&(a[e+0]+=1),r<.2&&(a[e+2]+=1),n<.2&&(a[e+4]+=1))}}()}(),this.addAttribute("position",new tt(i,3)),this.addAttribute("normal",new tt(i.slice(),3)),this.addAttribute("uv",new tt(a,2)),0===n?this.computeVertexNormals():this.normalizeNormals()}function da(e,t){zt.call(this),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new pa(e,t)),this.mergeVertices()}function pa(e,t){ua.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],e,t),this.type="TetrahedronBufferGeometry",this.parameters={radius:e,detail:t}}function fa(e,t){zt.call(this),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ma(e,t)),this.mergeVertices()}function ma(e,t){ua.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],e,t),this.type="OctahedronBufferGeometry",this.parameters={radius:e,detail:t}}function va(e,t){zt.call(this),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new ga(e,t)),this.mergeVertices()}function ga(e,t){var r=(1+Math.sqrt(5))/2,n=[-1,r,0,1,r,0,-1,-r,0,1,-r,0,0,-1,r,0,1,r,0,-1,-r,0,1,-r,r,0,-1,r,0,1,-r,0,-1,-r,0,1];ua.call(this,n,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],e,t),this.type="IcosahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ya(e,t){zt.call(this),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t},this.fromBufferGeometry(new xa(e,t)),this.mergeVertices()}function xa(e,t){var r=(1+Math.sqrt(5))/2,n=1/r,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-r,0,-n,r,0,n,-r,0,n,r,-n,-r,0,-n,r,0,n,-r,0,n,r,0,-r,0,-n,r,0,-n,-r,0,n,r,0,n];ua.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],e,t),this.type="DodecahedronBufferGeometry",this.parameters={radius:e,detail:t}}function ba(e,t,r,n,i,a){zt.call(this),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:n,closed:i},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new wa(e,t,r,n,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function wa(e,t,r,n,i){dt.call(this),this.type="TubeBufferGeometry",this.parameters={path:e,tubularSegments:t,radius:r,radialSegments:n,closed:i},t=t||64,r=r||1,n=n||8,i=i||!1;var a=e.computeFrenetFrames(t,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,c=new y,l=new y,h=new f,u=new y,d=[],p=[],m=[],v=[];function g(i){u=e.getPointAt(i/t,u);var o=a.normals[i],h=a.binormals[i];for(s=0;s<=n;s++){var f=s/n*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);l.x=v*o.x+m*h.x,l.y=v*o.y+m*h.y,l.z=v*o.z+m*h.z,l.normalize(),p.push(l.x,l.y,l.z),c.x=u.x+r*l.x,c.y=u.y+r*l.y,c.z=u.z+r*l.z,d.push(c.x,c.y,c.z)}}!function(){for(o=0;o<t;o++)g(o);g(!1===i?t:0),function(){for(o=0;o<=t;o++)for(s=0;s<=n;s++)h.x=o/t,h.y=s/n,m.push(h.x,h.y)}(),function(){for(s=1;s<=t;s++)for(o=1;o<=n;o++){var e=(n+1)*(s-1)+(o-1),r=(n+1)*s+(o-1),i=(n+1)*s+o,a=(n+1)*(s-1)+o;v.push(e,r,a),v.push(r,i,a)}}()}(),this.setIndex(v),this.addAttribute("position",new tt(d,3)),this.addAttribute("normal",new tt(p,3)),this.addAttribute("uv",new tt(m,2))}function _a(e,t,r,n,i,a,o){zt.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Ma(e,t,r,n,i,a)),this.mergeVertices()}function Ma(e,t,r,n,i,a){dt.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:t,tubularSegments:r,radialSegments:n,p:i,q:a},e=e||1,t=t||.4,r=Math.floor(r)||64,n=Math.floor(n)||8,i=i||2,a=a||3;var o,s,c=[],l=[],h=[],u=[],d=new y,p=new y,f=new y,m=new y,v=new y,g=new y,x=new y;for(o=0;o<=r;++o){var b=o/r*i*Math.PI*2;for(L(b,i,a,e,f),L(b+.01,i,a,e,m),g.subVectors(m,f),x.addVectors(m,f),v.crossVectors(g,x),x.crossVectors(v,g),v.normalize(),x.normalize(),s=0;s<=n;++s){var w=s/n*Math.PI*2,_=-t*Math.cos(w),M=t*Math.sin(w);d.x=f.x+(_*x.x+M*v.x),d.y=f.y+(_*x.y+M*v.y),d.z=f.z+(_*x.z+M*v.z),l.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),h.push(p.x,p.y,p.z),u.push(o/r),u.push(s/n)}}for(s=1;s<=r;s++)for(o=1;o<=n;o++){var S=(n+1)*(s-1)+(o-1),T=(n+1)*s+(o-1),E=(n+1)*s+o,A=(n+1)*(s-1)+o;c.push(S,T,A),c.push(T,E,A)}function L(e,t,r,n,i){var a=Math.cos(e),o=Math.sin(e),s=r/t*e,c=Math.cos(s);i.x=n*(2+c)*.5*a,i.y=n*(2+c)*o*.5,i.z=n*Math.sin(s)*.5}this.setIndex(c),this.addAttribute("position",new tt(l,3)),this.addAttribute("normal",new tt(h,3)),this.addAttribute("uv",new tt(u,2))}function Sa(e,t,r,n,i){zt.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},this.fromBufferGeometry(new Ta(e,t,r,n,i)),this.mergeVertices()}function Ta(e,t,r,n,i){dt.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:t,radialSegments:r,tubularSegments:n,arc:i},e=e||1,t=t||.4,r=Math.floor(r)||8,n=Math.floor(n)||6,i=i||2*Math.PI;var a,o,s=[],c=[],l=[],h=[],u=new y,d=new y,p=new y;for(a=0;a<=r;a++)for(o=0;o<=n;o++){var f=o/n*i,m=a/r*Math.PI*2;d.x=(e+t*Math.cos(m))*Math.cos(f),d.y=(e+t*Math.cos(m))*Math.sin(f),d.z=t*Math.sin(m),c.push(d.x,d.y,d.z),u.x=e*Math.cos(f),u.y=e*Math.sin(f),p.subVectors(d,u).normalize(),l.push(p.x,p.y,p.z),h.push(o/n),h.push(a/r)}for(a=1;a<=r;a++)for(o=1;o<=n;o++){var v=(n+1)*a+o-1,g=(n+1)*(a-1)+o-1,x=(n+1)*(a-1)+o,b=(n+1)*a+o;s.push(v,g,b),s.push(g,x,b)}this.setIndex(s),this.addAttribute("position",new tt(c,3)),this.addAttribute("normal",new tt(l,3)),this.addAttribute("uv",new tt(h,2))}ta.prototype=Object.assign(Object.create($.prototype),{constructor:ta,isPoints:!0,raycast:function(e,t){var r=this.geometry,n=this.matrixWorld,i=e.params.Points.threshold;if(null===r.boundingSphere&&r.computeBoundingSphere(),$i.copy(r.boundingSphere),$i.applyMatrix4(n),$i.radius+=i,!1!==e.ray.intersectsSphere($i)){Ki.getInverse(n),Qi.copy(e.ray).applyMatrix4(Ki);var a=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(r.isBufferGeometry){var s=r.index,c=r.attributes.position.array;if(null!==s)for(var l=s.array,h=0,u=l.length;h<u;h++){var d=l[h];ea.fromArray(c,3*d),ra(ea,d,o,n,e,t,this)}else{h=0;for(var p=c.length/3;h<p;h++)ea.fromArray(c,3*h),ra(ea,h,o,n,e,t,this)}}else{var f=r.vertices;for(h=0,p=f.length;h<p;h++)ra(f[h],h,o,n,e,t,this)}}},updateMorphTargets:function(){var e,t,r,n=this.geometry;if(n.isBufferGeometry){var i=n.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},e=0,t=o.length;e<t;e++)r=o[e].name||String(e),this.morphTargetInfluences.push(0),this.morphTargetDictionary[r]=e}}else{var s=n.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),na.prototype=Object.assign(Object.create(S.prototype),{constructor:na,isVideoTexture:!0,update:function(){var e=this.image;e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),ia.prototype=Object.create(S.prototype),ia.prototype.constructor=ia,ia.prototype.isCompressedTexture=!0,aa.prototype=Object.create(S.prototype),aa.prototype.constructor=aa,aa.prototype.isCanvasTexture=!0,oa.prototype=Object.create(S.prototype),oa.prototype.constructor=oa,oa.prototype.isDepthTexture=!0,sa.prototype=Object.create(dt.prototype),sa.prototype.constructor=sa,ca.prototype=Object.create(zt.prototype),ca.prototype.constructor=ca,la.prototype=Object.create(dt.prototype),la.prototype.constructor=la,ha.prototype=Object.create(zt.prototype),ha.prototype.constructor=ha,ua.prototype=Object.create(dt.prototype),ua.prototype.constructor=ua,da.prototype=Object.create(zt.prototype),da.prototype.constructor=da,pa.prototype=Object.create(ua.prototype),pa.prototype.constructor=pa,fa.prototype=Object.create(zt.prototype),fa.prototype.constructor=fa,ma.prototype=Object.create(ua.prototype),ma.prototype.constructor=ma,va.prototype=Object.create(zt.prototype),va.prototype.constructor=va,ga.prototype=Object.create(ua.prototype),ga.prototype.constructor=ga,ya.prototype=Object.create(zt.prototype),ya.prototype.constructor=ya,xa.prototype=Object.create(ua.prototype),xa.prototype.constructor=xa,ba.prototype=Object.create(zt.prototype),ba.prototype.constructor=ba,wa.prototype=Object.create(dt.prototype),wa.prototype.constructor=wa,wa.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return e.path=this.parameters.path.toJSON(),e},_a.prototype=Object.create(zt.prototype),_a.prototype.constructor=_a,Ma.prototype=Object.create(dt.prototype),Ma.prototype.constructor=Ma,Sa.prototype=Object.create(zt.prototype),Sa.prototype.constructor=Sa,Ta.prototype=Object.create(dt.prototype),Ta.prototype.constructor=Ta;var Ea=function(e,t,r){r=r||2;var n,i,a,o,s,c,l,h=t&&t.length,u=h?t[0]*r:e.length,d=Aa(e,0,u,r,!0),p=[];if(!d||d.next===d.prev)return p;if(h&&(d=function(e,t,r,n){var i,a,o,s,c,l=[];for(i=0,a=t.length;i<a;i++)o=t[i]*n,s=i<a-1?t[i+1]*n:e.length,(c=Aa(e,o,s,n,!1))===c.next&&(c.steiner=!0),l.push(za(c));for(l.sort(Da),i=0;i<l.length;i++)Na(l[i],r),r=La(r,r.next);return r}(e,t,d,r)),e.length>80*r){n=a=e[0],i=o=e[1];for(var f=r;f<u;f+=r)(s=e[f])<n&&(n=s),(c=e[f+1])<i&&(i=c),s>a&&(a=s),c>o&&(o=c);l=0!==(l=Math.max(a-n,o-i))?1/l:0}return Ra(d,p,r,n,i,l),p};function Aa(e,t,r,n,i){var a,o;if(i===function(e,t,r,n){for(var i=0,a=t,o=r-n;a<r;a+=n)i+=(e[o]-e[a])*(e[a+1]+e[o+1]),o=a;return i}(e,t,r,n)>0)for(a=t;a<r;a+=n)o=Wa(a,e[a],e[a+1],o);else for(a=r-n;a>=t;a-=n)o=Wa(a,e[a],e[a+1],o);return o&&Ha(o,o.next)&&(qa(o),o=o.next),o}function La(e,t){if(!e)return e;t||(t=e);var r,n=e;do{if(r=!1,n.steiner||!Ha(n,n.next)&&0!==Ga(n.prev,n,n.next))n=n.next;else{if(qa(n),(n=t=n.prev)===n.next)break;r=!0}}while(r||n!==t);return t}function Ra(e,t,r,n,i,a,o){if(e){!o&&a&&function(e,t,r,n){var i=e;do{null===i.z&&(i.z=Ba(i.x,i.y,t,r,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==e);i.prevZ.nextZ=null,i.prevZ=null,function(e){var t,r,n,i,a,o,s,c,l=1;do{for(r=e,e=null,a=null,o=0;r;){for(o++,n=r,s=0,t=0;t<l&&(s++,n=n.nextZ);t++);for(c=l;s>0||c>0&&n;)0!==s&&(0===c||!n||r.z<=n.z)?(i=r,r=r.nextZ,s--):(i=n,n=n.nextZ,c--),a?a.nextZ=i:e=i,i.prevZ=a,a=i;r=n}a.nextZ=null,l*=2}while(o>1)}(i)}(e,n,i,a);for(var s,c,l=e;e.prev!==e.next;)if(s=e.prev,c=e.next,a?Ca(e,n,i,a):Pa(e))t.push(s.i/r),t.push(e.i/r),t.push(c.i/r),qa(e),e=c.next,l=c.next;else if((e=c)===l){o?1===o?Ra(e=Oa(e,t,r),t,r,n,i,a,2):2===o&&Ia(e,t,r,n,i,a):Ra(La(e),t,r,n,i,a,1);break}}}function Pa(e){var t=e.prev,r=e,n=e.next;if(Ga(t,r,n)>=0)return!1;for(var i=e.next.next;i!==e.prev;){if(Fa(t.x,t.y,r.x,r.y,n.x,n.y,i.x,i.y)&&Ga(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function Ca(e,t,r,n){var i=e.prev,a=e,o=e.next;if(Ga(i,a,o)>=0)return!1;for(var s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,c=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,l=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,h=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y,u=Ba(s,c,t,r,n),d=Ba(l,h,t,r,n),p=e.prevZ,f=e.nextZ;p&&p.z>=u&&f&&f.z<=d;){if(p!==e.prev&&p!==e.next&&Fa(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Ga(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==e.prev&&f!==e.next&&Fa(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ga(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=u;){if(p!==e.prev&&p!==e.next&&Fa(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&Ga(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==e.prev&&f!==e.next&&Fa(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&Ga(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function Oa(e,t,r){var n=e;do{var i=n.prev,a=n.next.next;!Ha(i,a)&&ka(i,n,n.next,a)&&ja(i,a)&&ja(a,i)&&(t.push(i.i/r),t.push(n.i/r),t.push(a.i/r),qa(n),qa(n.next),n=e=a),n=n.next}while(n!==e);return n}function Ia(e,t,r,n,i,a){var o=e;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&Ua(o,s)){var c=Va(o,s);return o=La(o,o.next),c=La(c,c.next),Ra(o,t,r,n,i,a),void Ra(c,t,r,n,i,a)}s=s.next}o=o.next}while(o!==e)}function Da(e,t){return e.x-t.x}function Na(e,t){if(t=function(e,t){var r,n=t,i=e.x,a=e.y,o=-1/0;do{if(a<=n.y&&a>=n.next.y&&n.next.y!==n.y){var s=n.x+(a-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(s<=i&&s>o){if(o=s,s===i){if(a===n.y)return n;if(a===n.next.y)return n.next}r=n.x<n.next.x?n:n.next}}n=n.next}while(n!==t);if(!r)return null;if(i===o)return r.prev;var c,l=r,h=r.x,u=r.y,d=1/0;n=r.next;for(;n!==l;)i>=n.x&&n.x>=h&&i!==n.x&&Fa(a<u?i:o,a,h,u,a<u?o:i,a,n.x,n.y)&&((c=Math.abs(a-n.y)/(i-n.x))<d||c===d&&n.x>r.x)&&ja(n,e)&&(r=n,d=c),n=n.next;return r}(e,t)){var r=Va(t,e);La(r,r.next)}}function Ba(e,t,r,n,i){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*i)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function za(e){var t=e,r=e;do{(t.x<r.x||t.x===r.x&&t.y<r.y)&&(r=t),t=t.next}while(t!==e);return r}function Fa(e,t,r,n,i,a,o,s){return(i-o)*(t-s)-(e-o)*(a-s)>=0&&(e-o)*(n-s)-(r-o)*(t-s)>=0&&(r-o)*(a-s)-(i-o)*(n-s)>=0}function Ua(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var r=e;do{if(r.i!==e.i&&r.next.i!==e.i&&r.i!==t.i&&r.next.i!==t.i&&ka(r,r.next,e,t))return!0;r=r.next}while(r!==e);return!1}(e,t)&&ja(e,t)&&ja(t,e)&&function(e,t){var r=e,n=!1,i=(e.x+t.x)/2,a=(e.y+t.y)/2;do{r.y>a!=r.next.y>a&&r.next.y!==r.y&&i<(r.next.x-r.x)*(a-r.y)/(r.next.y-r.y)+r.x&&(n=!n),r=r.next}while(r!==e);return n}(e,t)}function Ga(e,t,r){return(t.y-e.y)*(r.x-t.x)-(t.x-e.x)*(r.y-t.y)}function Ha(e,t){return e.x===t.x&&e.y===t.y}function ka(e,t,r,n){return!!(Ha(e,r)&&Ha(t,n)||Ha(e,n)&&Ha(r,t))||Ga(e,t,r)>0!=Ga(e,t,n)>0&&Ga(r,n,e)>0!=Ga(r,n,t)>0}function ja(e,t){return Ga(e.prev,e,e.next)<0?Ga(e,t,e.next)>=0&&Ga(e,e.prev,t)>=0:Ga(e,t,e.prev)<0||Ga(e,e.next,t)<0}function Va(e,t){var r=new Xa(e.i,e.x,e.y),n=new Xa(t.i,t.x,t.y),i=e.next,a=t.prev;return e.next=t,t.prev=e,r.next=i,i.prev=r,n.next=r,r.prev=n,a.next=n,n.prev=a,n}function Wa(e,t,r,n){var i=new Xa(e,t,r);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function qa(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function Xa(e,t,r){this.i=e,this.x=t,this.y=r,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var Ya={area:function(e){for(var t=e.length,r=0,n=t-1,i=0;i<t;n=i++)r+=e[n].x*e[i].y-e[i].x*e[n].y;return.5*r},isClockWise:function(e){return Ya.area(e)<0},triangulateShape:function(e,t){var r=[],n=[],i=[];Za(e),Ja(r,e);var a=e.length;t.forEach(Za);for(var o=0;o<t.length;o++)n.push(a),a+=t[o].length,Ja(r,t[o]);var s=Ea(r,n);for(o=0;o<s.length;o+=3)i.push(s.slice(o,o+3));return i}};function Za(e){var t=e.length;t>2&&e[t-1].equals(e[0])&&e.pop()}function Ja(e,t){for(var r=0;r<t.length;r++)e.push(t[r].x),e.push(t[r].y)}function Ka(e,t){zt.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},this.fromBufferGeometry(new Qa(e,t)),this.mergeVertices()}function Qa(e,t){dt.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];for(var r=this,n=[],i=[],a=0,o=e.length;a<o;a++){s(e[a])}function s(e){var a=[],o=void 0!==t.curveSegments?t.curveSegments:12,s=void 0!==t.steps?t.steps:1,c=void 0!==t.depth?t.depth:100,l=void 0===t.bevelEnabled||t.bevelEnabled,h=void 0!==t.bevelThickness?t.bevelThickness:6,u=void 0!==t.bevelSize?t.bevelSize:h-2,d=void 0!==t.bevelOffset?t.bevelOffset:0,p=void 0!==t.bevelSegments?t.bevelSegments:3,m=t.extrudePath,v=void 0!==t.UVGenerator?t.UVGenerator:$a;void 0!==t.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=t.amount);var g,x,b,w,_,M,S,T,E=!1;m&&(g=m.getSpacedPoints(s),E=!0,l=!1,x=m.computeFrenetFrames(s,!1),b=new y,w=new y,_=new y),l||(p=0,h=0,u=0,d=0);var A=e.extractPoints(o),L=A.shape,R=A.holes;if(!Ya.isClockWise(L))for(L=L.reverse(),S=0,T=R.length;S<T;S++)M=R[S],Ya.isClockWise(M)&&(R[S]=M.reverse());var P=Ya.triangulateShape(L,R),C=L;for(S=0,T=R.length;S<T;S++)M=R[S],L=L.concat(M);function O(e,t,r){return t||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().multiplyScalar(r).add(e)}var I,D,N,B,z,F,U=L.length,G=P.length;function H(e,t,r){var n,i,a,o=e.x-t.x,s=e.y-t.y,c=r.x-e.x,l=r.y-e.y,h=o*o+s*s,u=o*l-s*c;if(Math.abs(u)>Number.EPSILON){var d=Math.sqrt(h),p=Math.sqrt(c*c+l*l),m=t.x-s/d,v=t.y+o/d,g=((r.x-l/p-m)*l-(r.y+c/p-v)*c)/(o*l-s*c),y=(n=m+o*g-e.x)*n+(i=v+s*g-e.y)*i;if(y<=2)return new f(n,i);a=Math.sqrt(y/2)}else{var x=!1;o>Number.EPSILON?c>Number.EPSILON&&(x=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(x=!0):Math.sign(s)===Math.sign(l)&&(x=!0),x?(n=-s,i=o,a=Math.sqrt(h)):(n=o,i=s,a=Math.sqrt(h/2))}return new f(n/a,i/a)}for(var k=[],j=0,V=C.length,W=V-1,q=j+1;j<V;j++,W++,q++)W===V&&(W=0),q===V&&(q=0),k[j]=H(C[j],C[W],C[q]);var X,Y,Z=[],J=k.concat();for(S=0,T=R.length;S<T;S++){for(M=R[S],X=[],j=0,W=(V=M.length)-1,q=j+1;j<V;j++,W++,q++)W===V&&(W=0),q===V&&(q=0),X[j]=H(M[j],M[W],M[q]);Z.push(X),J=J.concat(X)}for(I=0;I<p;I++){for(N=I/p,B=h*Math.cos(N*Math.PI/2),D=u*Math.sin(N*Math.PI/2)+d,j=0,V=C.length;j<V;j++)Q((z=O(C[j],k[j],D)).x,z.y,-B);for(S=0,T=R.length;S<T;S++)for(M=R[S],X=Z[S],j=0,V=M.length;j<V;j++)Q((z=O(M[j],X[j],D)).x,z.y,-B)}for(D=u+d,j=0;j<U;j++)z=l?O(L[j],J[j],D):L[j],E?(w.copy(x.normals[0]).multiplyScalar(z.x),b.copy(x.binormals[0]).multiplyScalar(z.y),_.copy(g[0]).add(w).add(b),Q(_.x,_.y,_.z)):Q(z.x,z.y,0);for(Y=1;Y<=s;Y++)for(j=0;j<U;j++)z=l?O(L[j],J[j],D):L[j],E?(w.copy(x.normals[Y]).multiplyScalar(z.x),b.copy(x.binormals[Y]).multiplyScalar(z.y),_.copy(g[Y]).add(w).add(b),Q(_.x,_.y,_.z)):Q(z.x,z.y,c/s*Y);for(I=p-1;I>=0;I--){for(N=I/p,B=h*Math.cos(N*Math.PI/2),D=u*Math.sin(N*Math.PI/2)+d,j=0,V=C.length;j<V;j++)Q((z=O(C[j],k[j],D)).x,z.y,c+B);for(S=0,T=R.length;S<T;S++)for(M=R[S],X=Z[S],j=0,V=M.length;j<V;j++)z=O(M[j],X[j],D),E?Q(z.x,z.y+g[s-1].y,g[s-1].x+B):Q(z.x,z.y,c+B)}function K(e,t){var r,n;for(j=e.length;--j>=0;){r=j,(n=j-1)<0&&(n=e.length-1);var i=0,a=s+2*p;for(i=0;i<a;i++){var o=U*i,c=U*(i+1);ee(t+r+o,t+n+o,t+n+c,t+r+c)}}}function Q(e,t,r){a.push(e),a.push(t),a.push(r)}function $(e,t,i){te(e),te(t),te(i);var a=n.length/3,o=v.generateTopUV(r,n,a-3,a-2,a-1);re(o[0]),re(o[1]),re(o[2])}function ee(e,t,i,a){te(e),te(t),te(a),te(t),te(i),te(a);var o=n.length/3,s=v.generateSideWallUV(r,n,o-6,o-3,o-2,o-1);re(s[0]),re(s[1]),re(s[3]),re(s[1]),re(s[2]),re(s[3])}function te(e){n.push(a[3*e+0]),n.push(a[3*e+1]),n.push(a[3*e+2])}function re(e){i.push(e.x),i.push(e.y)}!function(){var e=n.length/3;if(l){var t=0,i=U*t;for(j=0;j<G;j++)$((F=P[j])[2]+i,F[1]+i,F[0]+i);for(i=U*(t=s+2*p),j=0;j<G;j++)$((F=P[j])[0]+i,F[1]+i,F[2]+i)}else{for(j=0;j<G;j++)$((F=P[j])[2],F[1],F[0]);for(j=0;j<G;j++)$((F=P[j])[0]+U*s,F[1]+U*s,F[2]+U*s)}r.addGroup(e,n.length/3-e,0)}(),function(){var e=n.length/3,t=0;for(K(C,t),t+=C.length,S=0,T=R.length;S<T;S++)K(M=R[S],t),t+=M.length;r.addGroup(e,n.length/3-e,1)}()}this.addAttribute("position",new tt(n,3)),this.addAttribute("uv",new tt(i,2)),this.computeVertexNormals()}Ka.prototype=Object.create(zt.prototype),Ka.prototype.constructor=Ka,Ka.prototype.toJSON=function(){var e=zt.prototype.toJSON.call(this);return eo(this.parameters.shapes,this.parameters.options,e)},Qa.prototype=Object.create(dt.prototype),Qa.prototype.constructor=Qa,Qa.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return eo(this.parameters.shapes,this.parameters.options,e)};var $a={generateTopUV:function(e,t,r,n,i){var a=t[3*r],o=t[3*r+1],s=t[3*n],c=t[3*n+1],l=t[3*i],h=t[3*i+1];return[new f(a,o),new f(s,c),new f(l,h)]},generateSideWallUV:function(e,t,r,n,i,a){var o=t[3*r],s=t[3*r+1],c=t[3*r+2],l=t[3*n],h=t[3*n+1],u=t[3*n+2],d=t[3*i],p=t[3*i+1],m=t[3*i+2],v=t[3*a],g=t[3*a+1],y=t[3*a+2];return Math.abs(s-h)<.01?[new f(o,1-c),new f(l,1-u),new f(d,1-m),new f(v,1-y)]:[new f(s,1-c),new f(h,1-u),new f(p,1-m),new f(g,1-y)]}};function eo(e,t,r){if(r.shapes=[],Array.isArray(e))for(var n=0,i=e.length;n<i;n++){var a=e[n];r.shapes.push(a.uuid)}else r.shapes.push(e.uuid);return void 0!==t.extrudePath&&(r.options.extrudePath=t.extrudePath.toJSON()),r}function to(e,t){zt.call(this),this.type="TextGeometry",this.parameters={text:e,parameters:t},this.fromBufferGeometry(new ro(e,t)),this.mergeVertices()}function ro(e,t){var r=(t=t||{}).font;if(!r||!r.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new zt;var n=r.generateShapes(e,t.size);t.depth=void 0!==t.height?t.height:50,void 0===t.bevelThickness&&(t.bevelThickness=10),void 0===t.bevelSize&&(t.bevelSize=8),void 0===t.bevelEnabled&&(t.bevelEnabled=!1),Qa.call(this,n,t),this.type="TextBufferGeometry"}function no(e,t,r,n,i,a,o){zt.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new io(e,t,r,n,i,a,o)),this.mergeVertices()}function io(e,t,r,n,i,a,o){dt.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:r,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},e=e||1,t=Math.max(3,Math.floor(t)||8),r=Math.max(2,Math.floor(r)||6),n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,c,l=Math.min(a+o,Math.PI),h=0,u=[],d=new y,p=new y,f=[],m=[],v=[],g=[];for(c=0;c<=r;c++){var x=[],b=c/r,w=0;for(0==c&&0==a?w=.5/t:c==r&&l==Math.PI&&(w=-.5/t),s=0;s<=t;s++){var _=s/t;d.x=-e*Math.cos(n+_*i)*Math.sin(a+b*o),d.y=e*Math.cos(a+b*o),d.z=e*Math.sin(n+_*i)*Math.sin(a+b*o),m.push(d.x,d.y,d.z),p.copy(d).normalize(),v.push(p.x,p.y,p.z),g.push(_+w,1-b),x.push(h++)}u.push(x)}for(c=0;c<r;c++)for(s=0;s<t;s++){var M=u[c][s+1],S=u[c][s],T=u[c+1][s],E=u[c+1][s+1];(0!==c||a>0)&&f.push(M,S,E),(c!==r-1||l<Math.PI)&&f.push(S,T,E)}this.setIndex(f),this.addAttribute("position",new tt(m,3)),this.addAttribute("normal",new tt(v,3)),this.addAttribute("uv",new tt(g,2))}function ao(e,t,r,n,i,a){zt.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new oo(e,t,r,n,i,a)),this.mergeVertices()}function oo(e,t,r,n,i,a){dt.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:r,phiSegments:n,thetaStart:i,thetaLength:a},e=e||.5,t=t||1,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,r=void 0!==r?Math.max(3,r):8;var o,s,c,l=[],h=[],u=[],d=[],p=e,m=(t-e)/(n=void 0!==n?Math.max(1,n):1),v=new y,g=new f;for(s=0;s<=n;s++){for(c=0;c<=r;c++)o=i+c/r*a,v.x=p*Math.cos(o),v.y=p*Math.sin(o),h.push(v.x,v.y,v.z),u.push(0,0,1),g.x=(v.x/t+1)/2,g.y=(v.y/t+1)/2,d.push(g.x,g.y);p+=m}for(s=0;s<n;s++){var x=s*(r+1);for(c=0;c<r;c++){var b=o=c+x,w=o+r+1,_=o+r+2,M=o+1;l.push(b,w,M),l.push(w,_,M)}}this.setIndex(l),this.addAttribute("position",new tt(h,3)),this.addAttribute("normal",new tt(u,3)),this.addAttribute("uv",new tt(d,2))}function so(e,t,r,n){zt.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},this.fromBufferGeometry(new co(e,t,r,n)),this.mergeVertices()}function co(e,t,r,n){dt.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:t,phiStart:r,phiLength:n},t=Math.floor(t)||12,r=r||0,n=n||2*Math.PI,n=p.clamp(n,0,2*Math.PI);var i,a,o,s=[],c=[],l=[],h=1/t,u=new y,d=new f;for(a=0;a<=t;a++){var m=r+a*h*n,v=Math.sin(m),g=Math.cos(m);for(o=0;o<=e.length-1;o++)u.x=e[o].x*v,u.y=e[o].y,u.z=e[o].x*g,c.push(u.x,u.y,u.z),d.x=a/t,d.y=o/(e.length-1),l.push(d.x,d.y)}for(a=0;a<t;a++)for(o=0;o<e.length-1;o++){var x=i=o+a*e.length,b=i+e.length,w=i+e.length+1,_=i+1;s.push(x,b,_),s.push(b,w,_)}if(this.setIndex(s),this.addAttribute("position",new tt(c,3)),this.addAttribute("uv",new tt(l,2)),this.computeVertexNormals(),n===2*Math.PI){var M=this.attributes.normal.array,S=new y,T=new y,E=new y;for(i=t*e.length*3,a=0,o=0;a<e.length;a++,o+=3)S.x=M[o+0],S.y=M[o+1],S.z=M[o+2],T.x=M[i+o+0],T.y=M[i+o+1],T.z=M[i+o+2],E.addVectors(S,T).normalize(),M[o+0]=M[i+o+0]=E.x,M[o+1]=M[i+o+1]=E.y,M[o+2]=M[i+o+2]=E.z}}function lo(e,t){zt.call(this),this.type="ShapeGeometry","object"===c()(t)&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),t=t.curveSegments),this.parameters={shapes:e,curveSegments:t},this.fromBufferGeometry(new ho(e,t)),this.mergeVertices()}function ho(e,t){dt.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:e,curveSegments:t},t=t||12;var r=[],n=[],i=[],a=[],o=0,s=0;if(!1===Array.isArray(e))l(e);else for(var c=0;c<e.length;c++)l(e[c]),this.addGroup(o,s,c),o+=s,s=0;function l(e){var o,c,l,h=n.length/3,u=e.extractPoints(t),d=u.shape,p=u.holes;for(!1===Ya.isClockWise(d)&&(d=d.reverse()),o=0,c=p.length;o<c;o++)l=p[o],!0===Ya.isClockWise(l)&&(p[o]=l.reverse());var f=Ya.triangulateShape(d,p);for(o=0,c=p.length;o<c;o++)l=p[o],d=d.concat(l);for(o=0,c=d.length;o<c;o++){var m=d[o];n.push(m.x,m.y,0),i.push(0,0,1),a.push(m.x,m.y)}for(o=0,c=f.length;o<c;o++){var v=f[o],g=v[0]+h,y=v[1]+h,x=v[2]+h;r.push(g,y,x),s+=3}}this.setIndex(r),this.addAttribute("position",new tt(n,3)),this.addAttribute("normal",new tt(i,3)),this.addAttribute("uv",new tt(a,2))}function uo(e,t){if(t.shapes=[],Array.isArray(e))for(var r=0,n=e.length;r<n;r++){var i=e[r];t.shapes.push(i.uuid)}else t.shapes.push(e.uuid);return t}function po(e,t){dt.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:t},t=void 0!==t?t:1;var r,n,i,a,o=[],s=Math.cos(p.DEG2RAD*t),c=[0,0],l={},h=["a","b","c"];e.isBufferGeometry?(a=new zt).fromBufferGeometry(e):a=e.clone(),a.mergeVertices(),a.computeFaceNormals();for(var u=a.vertices,d=a.faces,f=0,m=d.length;f<m;f++)for(var v=d[f],g=0;g<3;g++)r=v[h[g]],n=v[h[(g+1)%3]],c[0]=Math.min(r,n),c[1]=Math.max(r,n),void 0===l[i=c[0]+","+c[1]]?l[i]={index1:c[0],index2:c[1],face1:f,face2:void 0}:l[i].face2=f;for(i in l){var y=l[i];if(void 0===y.face2||d[y.face1].normal.dot(d[y.face2].normal)<=s){var x=u[y.index1];o.push(x.x,x.y,x.z),x=u[y.index2],o.push(x.x,x.y,x.z)}}this.addAttribute("position",new tt(o,3))}function fo(e,t,r,n,i,a,o,s){zt.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new mo(e,t,r,n,i,a,o,s)),this.mergeVertices()}function mo(e,t,r,n,i,a,o,s){dt.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:r,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var c=this;e=void 0!==e?e:1,t=void 0!==t?t:1,r=r||1,n=Math.floor(n)||8,i=Math.floor(i)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var l=[],h=[],u=[],d=[],p=0,m=[],v=r/2,g=0;function x(r){var i,a,m,x=new f,b=new y,w=0,_=!0===r?e:t,M=!0===r?1:-1;for(a=p,i=1;i<=n;i++)h.push(0,v*M,0),u.push(0,M,0),d.push(.5,.5),p++;for(m=p,i=0;i<=n;i++){var S=i/n*s+o,T=Math.cos(S),E=Math.sin(S);b.x=_*E,b.y=v*M,b.z=_*T,h.push(b.x,b.y,b.z),u.push(0,M,0),x.x=.5*T+.5,x.y=.5*E*M+.5,d.push(x.x,x.y),p++}for(i=0;i<n;i++){var A=a+i,L=m+i;!0===r?l.push(L,L+1,A):l.push(L+1,L,A),w+=3}c.addGroup(g,w,!0===r?1:2),g+=w}!function(){var a,f,x=new y,b=new y,w=0,_=(t-e)/r;for(f=0;f<=i;f++){var M=[],S=f/i,T=S*(t-e)+e;for(a=0;a<=n;a++){var E=a/n,A=E*s+o,L=Math.sin(A),R=Math.cos(A);b.x=T*L,b.y=-S*r+v,b.z=T*R,h.push(b.x,b.y,b.z),x.set(L,_,R).normalize(),u.push(x.x,x.y,x.z),d.push(E,1-S),M.push(p++)}m.push(M)}for(a=0;a<n;a++)for(f=0;f<i;f++){var P=m[f][a],C=m[f+1][a],O=m[f+1][a+1],I=m[f][a+1];l.push(P,C,I),l.push(C,O,I),w+=6}c.addGroup(g,w,0),g+=w}(),!1===a&&(e>0&&x(!0),t>0&&x(!1)),this.setIndex(l),this.addAttribute("position",new tt(h,3)),this.addAttribute("normal",new tt(u,3)),this.addAttribute("uv",new tt(d,2))}function vo(e,t,r,n,i,a,o){fo.call(this,0,e,t,r,n,i,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}}function go(e,t,r,n,i,a,o){mo.call(this,0,e,t,r,n,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:t,radialSegments:r,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}}function yo(e,t,r,n){zt.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},this.fromBufferGeometry(new xo(e,t,r,n)),this.mergeVertices()}function xo(e,t,r,n){dt.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:t,thetaStart:r,thetaLength:n},e=e||1,t=void 0!==t?Math.max(3,t):8,r=void 0!==r?r:0,n=void 0!==n?n:2*Math.PI;var i,a,o=[],s=[],c=[],l=[],h=new y,u=new f;for(s.push(0,0,0),c.push(0,0,1),l.push(.5,.5),a=0,i=3;a<=t;a++,i+=3){var d=r+a/t*n;h.x=e*Math.cos(d),h.y=e*Math.sin(d),s.push(h.x,h.y,h.z),c.push(0,0,1),u.x=(s[i]/e+1)/2,u.y=(s[i+1]/e+1)/2,l.push(u.x,u.y)}for(i=1;i<=t;i++)o.push(i,i+1,0);this.setIndex(o),this.addAttribute("position",new tt(s,3)),this.addAttribute("normal",new tt(c,3)),this.addAttribute("uv",new tt(l,2))}to.prototype=Object.create(zt.prototype),to.prototype.constructor=to,ro.prototype=Object.create(Qa.prototype),ro.prototype.constructor=ro,no.prototype=Object.create(zt.prototype),no.prototype.constructor=no,io.prototype=Object.create(dt.prototype),io.prototype.constructor=io,ao.prototype=Object.create(zt.prototype),ao.prototype.constructor=ao,oo.prototype=Object.create(dt.prototype),oo.prototype.constructor=oo,so.prototype=Object.create(zt.prototype),so.prototype.constructor=so,co.prototype=Object.create(dt.prototype),co.prototype.constructor=co,lo.prototype=Object.create(zt.prototype),lo.prototype.constructor=lo,lo.prototype.toJSON=function(){var e=zt.prototype.toJSON.call(this);return uo(this.parameters.shapes,e)},ho.prototype=Object.create(dt.prototype),ho.prototype.constructor=ho,ho.prototype.toJSON=function(){var e=dt.prototype.toJSON.call(this);return uo(this.parameters.shapes,e)},po.prototype=Object.create(dt.prototype),po.prototype.constructor=po,fo.prototype=Object.create(zt.prototype),fo.prototype.constructor=fo,mo.prototype=Object.create(dt.prototype),mo.prototype.constructor=mo,vo.prototype=Object.create(fo.prototype),vo.prototype.constructor=vo,go.prototype=Object.create(mo.prototype),go.prototype.constructor=go,yo.prototype=Object.create(zt.prototype),yo.prototype.constructor=yo,xo.prototype=Object.create(dt.prototype),xo.prototype.constructor=xo;var bo=Object.freeze({WireframeGeometry:sa,ParametricGeometry:ca,ParametricBufferGeometry:la,TetrahedronGeometry:da,TetrahedronBufferGeometry:pa,OctahedronGeometry:fa,OctahedronBufferGeometry:ma,IcosahedronGeometry:va,IcosahedronBufferGeometry:ga,DodecahedronGeometry:ya,DodecahedronBufferGeometry:xa,PolyhedronGeometry:ha,PolyhedronBufferGeometry:ua,TubeGeometry:ba,TubeBufferGeometry:wa,TorusKnotGeometry:_a,TorusKnotBufferGeometry:Ma,TorusGeometry:Sa,TorusBufferGeometry:Ta,TextGeometry:to,TextBufferGeometry:ro,SphereGeometry:no,SphereBufferGeometry:io,RingGeometry:ao,RingBufferGeometry:oo,PlaneGeometry:sr,PlaneBufferGeometry:cr,LatheGeometry:so,LatheBufferGeometry:co,ShapeGeometry:lo,ShapeBufferGeometry:ho,ExtrudeGeometry:Ka,ExtrudeBufferGeometry:Qa,EdgesGeometry:po,ConeGeometry:vo,ConeBufferGeometry:go,CylinderGeometry:fo,CylinderBufferGeometry:mo,CircleGeometry:yo,CircleBufferGeometry:xo,BoxGeometry:Ft,BoxBufferGeometry:Ut});function wo(e){We.call(this),this.type="ShadowMaterial",this.color=new Ue(0),this.transparent=!0,this.setValues(e)}function _o(e){jt.call(this,e),this.type="RawShaderMaterial"}function Mo(e){We.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ue(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function So(e){Mo.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearcoat=0,this.clearcoatRoughness=0,this.sheen=null,this.clearcoatNormalScale=new f(1,1),this.clearcoatNormalMap=null,this.transparency=0,this.setValues(e)}function To(e){We.call(this),this.type="MeshPhongMaterial",this.color=new Ue(16777215),this.specular=new Ue(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Eo(e){To.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(e)}function Ao(e){We.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Lo(e){We.call(this),this.type="MeshLambertMaterial",this.color=new Ue(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ue(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Ro(e){We.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ue(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new f(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)}function Po(e){Ui.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}wo.prototype=Object.create(We.prototype),wo.prototype.constructor=wo,wo.prototype.isShadowMaterial=!0,wo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this},_o.prototype=Object.create(jt.prototype),_o.prototype.constructor=_o,_o.prototype.isRawShaderMaterial=!0,Mo.prototype=Object.create(We.prototype),Mo.prototype.constructor=Mo,Mo.prototype.isMeshStandardMaterial=!0,Mo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},So.prototype=Object.create(Mo.prototype),So.prototype.constructor=So,So.prototype.isMeshPhysicalMaterial=!0,So.prototype.copy=function(e){return Mo.prototype.copy.call(this,e),this.defines={STANDARD:"",PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearcoat=e.clearcoat,this.clearcoatRoughness=e.clearcoatRoughness,e.sheen?this.sheen=(this.sheen||new Ue).copy(e.sheen):this.sheen=null,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.transparency=e.transparency,this},To.prototype=Object.create(We.prototype),To.prototype.constructor=To,To.prototype.isMeshPhongMaterial=!0,To.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Eo.prototype=Object.create(To.prototype),Eo.prototype.constructor=Eo,Eo.prototype.isMeshToonMaterial=!0,Eo.prototype.copy=function(e){return To.prototype.copy.call(this,e),this.gradientMap=e.gradientMap,this},Ao.prototype=Object.create(We.prototype),Ao.prototype.constructor=Ao,Ao.prototype.isMeshNormalMaterial=!0,Ao.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Lo.prototype=Object.create(We.prototype),Lo.prototype.constructor=Lo,Lo.prototype.isMeshLambertMaterial=!0,Lo.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Ro.prototype=Object.create(We.prototype),Ro.prototype.constructor=Ro,Ro.prototype.isMeshMatcapMaterial=!0,Ro.prototype.copy=function(e){return We.prototype.copy.call(this,e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},Po.prototype=Object.create(Ui.prototype),Po.prototype.constructor=Po,Po.prototype.isLineDashedMaterial=!0,Po.prototype.copy=function(e){return Ui.prototype.copy.call(this,e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this};var Co=Object.freeze({ShadowMaterial:wo,SpriteMaterial:mi,RawShaderMaterial:_o,ShaderMaterial:jt,PointsMaterial:Ji,MeshPhysicalMaterial:So,MeshStandardMaterial:Mo,MeshPhongMaterial:To,MeshToonMaterial:Eo,MeshNormalMaterial:Ao,MeshLambertMaterial:Lo,MeshDepthMaterial:Yn,MeshDistanceMaterial:Zn,MeshBasicMaterial:qe,MeshMatcapMaterial:Ro,LineDashedMaterial:Po,LineBasicMaterial:Ui,Material:We}),Oo={arraySlice:function(e,t,r){return Oo.isTypedArray(e)?new e.constructor(e.subarray(t,void 0!==r?r:e.length)):e.slice(t,r)},convertArray:function(e,t,r){return!e||!r&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){for(var t=e.length,r=new Array(t),n=0;n!==t;++n)r[n]=n;return r.sort((function(t,r){return e[t]-e[r]})),r},sortedArray:function(e,t,r){for(var n=e.length,i=new e.constructor(n),a=0,o=0;o!==n;++a)for(var s=r[a]*t,c=0;c!==t;++c)i[o++]=e[s+c];return i},flattenJSON:function(e,t,r,n){for(var i=1,a=e[0];void 0!==a&&void 0===a[n];)a=e[i++];if(void 0!==a){var o=a[n];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[n])&&(t.push(a.time),r.push.apply(r,o)),a=e[i++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[n])&&(t.push(a.time),o.toArray(r,r.length)),a=e[i++]}while(void 0!==a);else do{void 0!==(o=a[n])&&(t.push(a.time),r.push(o)),a=e[i++]}while(void 0!==a)}}};function Io(e,t,r,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new t.constructor(r),this.sampleValues=t,this.valueSize=r}function Do(e,t,r,n){Io.call(this,e,t,r,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function No(e,t,r,n){Io.call(this,e,t,r,n)}function Bo(e,t,r,n){Io.call(this,e,t,r,n)}function zo(e,t,r,n){if(void 0===e)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===t||0===t.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=Oo.convertArray(t,this.TimeBufferType),this.values=Oo.convertArray(r,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation)}function Fo(e,t,r){zo.call(this,e,t,r)}function Uo(e,t,r,n){zo.call(this,e,t,r,n)}function Go(e,t,r,n){zo.call(this,e,t,r,n)}function Ho(e,t,r,n){Io.call(this,e,t,r,n)}function ko(e,t,r,n){zo.call(this,e,t,r,n)}function jo(e,t,r,n){zo.call(this,e,t,r,n)}function Vo(e,t,r,n){zo.call(this,e,t,r,n)}function Wo(e,t,r){this.name=e,this.tracks=r,this.duration=void 0!==t?t:-1,this.uuid=p.generateUUID(),this.duration<0&&this.resetDuration()}function qo(e){if(void 0===e.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var t=function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Go;case"vector":case"vector2":case"vector3":case"vector4":return Vo;case"color":return Uo;case"quaternion":return ko;case"bool":case"boolean":return Fo;case"string":return jo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+e)}(e.type);if(void 0===e.times){var r=[],n=[];Oo.flattenJSON(e.keys,r,n,"value"),e.times=r,e.values=n}return void 0!==t.parse?t.parse(e):new t(e.name,e.times,e.values,e.interpolation)}Object.assign(Io.prototype,{evaluate:function(e){var t=this.parameterPositions,r=this._cachedIndex,n=t[r],i=t[r-1];e:{t:{var a;r:{n:if(!(e<n)){for(var o=r+2;;){if(void 0===n){if(e<i)break n;return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,e,i)}if(r===o)break;if(i=n,e<(n=t[++r]))break t}a=t.length;break r}if(e>=i)break e;var s=t[1];e<s&&(r=2,i=s);for(o=r-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(r===o)break;if(n=i,e>=(i=t[--r-1]))break t}a=r,r=0}for(;r<a;){var c=r+a>>>1;e<t[c]?a=c:r=c+1}if(n=t[r],void 0===(i=t[r-1]))return this._cachedIndex=0,this.beforeStart_(0,e,n);if(void 0===n)return r=t.length,this._cachedIndex=r,this.afterEnd_(r-1,i,e)}this._cachedIndex=r,this.intervalChanged_(r,i,n)}return this.interpolate_(r,i,e,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n,a=0;a!==n;++a)t[a]=r[i+a];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Io.prototype,{beforeStart_:Io.prototype.copySampleValue_,afterEnd_:Io.prototype.copySampleValue_}),Do.prototype=Object.assign(Object.create(Io.prototype),{constructor:Do,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(e,t,r){var n=this.parameterPositions,i=e-2,a=e+1,o=n[i],s=n[a];if(void 0===o)switch(this.getSettings_().endingStart){case 2401:i=e,o=2*t-r;break;case 2402:o=t+n[i=n.length-2]-n[i+1];break;default:i=e,o=r}if(void 0===s)switch(this.getSettings_().endingEnd){case 2401:a=e,s=2*r-t;break;case 2402:a=1,s=r+n[1]-n[0];break;default:a=e-1,s=t}var c=.5*(r-t),l=this.valueSize;this._weightPrev=c/(t-o),this._weightNext=c/(s-r),this._offsetPrev=i*l,this._offsetNext=a*l},interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(r-t)/(n-t),f=p*p,m=f*p,v=-u*m+2*u*f-u*p,g=(1+u)*m+(-1.5-2*u)*f+(-.5+u)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,b=0;b!==o;++b)i[b]=v*a[l+b]+g*a[c+b]+y*a[s+b]+x*a[h+b];return i}}),No.prototype=Object.assign(Object.create(Io.prototype),{constructor:No,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(r-t)/(n-t),h=1-l,u=0;u!==o;++u)i[u]=a[c+u]*h+a[s+u]*l;return i}}),Bo.prototype=Object.assign(Object.create(Io.prototype),{constructor:Bo,interpolate_:function(e){return this.copySampleValue_(e-1)}}),Object.assign(zo,{toJSON:function(e){var t,r=e.constructor;if(void 0!==r.toJSON)t=r.toJSON(e);else{t={name:e.name,times:Oo.convertArray(e.times,Array),values:Oo.convertArray(e.values,Array)};var n=e.getInterpolation();n!==e.DefaultInterpolation&&(t.interpolation=n)}return t.type=e.ValueTypeName,t}}),Object.assign(zo.prototype,{constructor:zo,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(e){return new Bo(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new No(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new Do(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var t;switch(e){case 2300:t=this.InterpolantFactoryMethodDiscrete;break;case 2301:t=this.InterpolantFactoryMethodLinear;break;case 2302:t=this.InterpolantFactoryMethodSmooth}if(void 0===t){var r="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(r);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",r),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]+=e;return this},scale:function(e){if(1!==e)for(var t=this.times,r=0,n=t.length;r!==n;++r)t[r]*=e;return this},trim:function(e,t){for(var r=this.times,n=r.length,i=0,a=n-1;i!==n&&r[i]<e;)++i;for(;-1!==a&&r[a]>t;)--a;if(++a,0!==i||a!==n){i>=a&&(i=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=Oo.arraySlice(r,i,a),this.values=Oo.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var e=!0,t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);var r=this.times,n=this.values,i=r.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);for(var a=null,o=0;o!==i;o++){var s=r[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),e=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),e=!1;break}a=s}if(void 0!==n&&Oo.isTypedArray(n)){o=0;for(var c=n.length;o!==c;++o){var l=n[o];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,l),e=!1;break}}}return e},optimize:function(){for(var e=this.times,t=this.values,r=this.getValueSize(),n=2302===this.getInterpolation(),i=1,a=e.length-1,o=1;o<a;++o){var s=!1,c=e[o];if(c!==e[o+1]&&(1!==o||c!==c[0]))if(n)s=!0;else for(var l=o*r,h=l-r,u=l+r,d=0;d!==r;++d){var p=t[l+d];if(p!==t[h+d]||p!==t[u+d]){s=!0;break}}if(s){if(o!==i){e[i]=e[o];var f=o*r,m=i*r;for(d=0;d!==r;++d)t[m+d]=t[f+d]}++i}}if(a>0){e[i]=e[a];for(f=a*r,m=i*r,d=0;d!==r;++d)t[m+d]=t[f+d];++i}return i!==e.length&&(this.times=Oo.arraySlice(e,0,i),this.values=Oo.arraySlice(t,0,i*r)),this},clone:function(){var e=Oo.arraySlice(this.times,0),t=Oo.arraySlice(this.values,0),r=new(0,this.constructor)(this.name,e,t);return r.createInterpolant=this.createInterpolant,r}}),Fo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Fo,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Uo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Uo,ValueTypeName:"color"}),Go.prototype=Object.assign(Object.create(zo.prototype),{constructor:Go,ValueTypeName:"number"}),Ho.prototype=Object.assign(Object.create(Io.prototype),{constructor:Ho,interpolate_:function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(r-t)/(n-t),l=s+o;s!==l;s+=4)m.slerpFlat(i,0,a,s-o,a,s,c);return i}}),ko.prototype=Object.assign(Object.create(zo.prototype),{constructor:ko,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(e){return new Ho(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),jo.prototype=Object.assign(Object.create(zo.prototype),{constructor:jo,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),Vo.prototype=Object.assign(Object.create(zo.prototype),{constructor:Vo,ValueTypeName:"vector"}),Object.assign(Wo,{parse:function(e){for(var t=[],r=e.tracks,n=1/(e.fps||1),i=0,a=r.length;i!==a;++i)t.push(qo(r[i]).scale(n));return new Wo(e.name,e.duration,t)},toJSON:function(e){for(var t=[],r=e.tracks,n={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid},i=0,a=r.length;i!==a;++i)t.push(zo.toJSON(r[i]));return n},CreateFromMorphTargetSequence:function(e,t,r,n){for(var i=t.length,a=[],o=0;o<i;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var l=Oo.getKeyframeOrder(s);s=Oo.sortedArray(s,1,l),c=Oo.sortedArray(c,1,l),n||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new Go(".morphTargetInfluences["+t[o].name+"]",s,c).scale(1/r))}return new Wo(e,-1,a)},findByName:function(e,t){var r=e;if(!Array.isArray(e)){var n=e;r=n.geometry&&n.geometry.animations||n.animations}for(var i=0;i<r.length;i++)if(r[i].name===t)return r[i];return null},CreateClipsFromMorphTargetSequences:function(e,t,r){for(var n={},i=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;a<o;a++){var s=e[a],c=s.name.match(i);if(c&&c.length>1){var l=n[u=c[1]];l||(n[u]=l=[]),l.push(s)}}var h=[];for(var u in n)h.push(Wo.CreateFromMorphTargetSequence(u,n[u],t,r));return h},parseAnimation:function(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var r=function(e,t,r,n,i){if(0!==r.length){var a=[],o=[];Oo.flattenJSON(r,a,o,n),0!==a.length&&i.push(new e(t,a,o))}},n=[],i=e.name||"default",a=e.length||-1,o=e.fps||30,s=e.hierarchy||[],c=0;c<s.length;c++){var l=s[c].keys;if(l&&0!==l.length)if(l[0].morphTargets){for(var h={},u=0;u<l.length;u++)if(l[u].morphTargets)for(var d=0;d<l[u].morphTargets.length;d++)h[l[u].morphTargets[d]]=-1;for(var p in h){var f=[],m=[];for(d=0;d!==l[u].morphTargets.length;++d){var v=l[u];f.push(v.time),m.push(v.morphTarget===p?1:0)}n.push(new Go(".morphTargetInfluence["+p+"]",f,m))}a=h.length*(o||1)}else{var g=".bones["+t[c].name+"]";r(Vo,g+".position",l,"pos",n),r(ko,g+".quaternion",l,"rot",n),r(Vo,g+".scale",l,"scl",n)}}return 0===n.length?null:new Wo(i,a,n)}}),Object.assign(Wo.prototype,{resetDuration:function(){for(var e=0,t=0,r=this.tracks.length;t!==r;++t){var n=this.tracks[t];e=Math.max(e,n.times[n.times.length-1])}return this.duration=e,this},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},validate:function(){for(var e=!0,t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this},clone:function(){for(var e=[],t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new Wo(this.name,this.duration,e)}});var Xo={enabled:!1,files:{},add:function(e,t){!1!==this.enabled&&(this.files[e]=t)},get:function(e){if(!1!==this.enabled)return this.files[e]},remove:function(e){delete this.files[e]},clear:function(){this.files={}}};function Yo(e,t,r){var n=this,i=!1,a=0,o=0,s=void 0,c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=r,this.itemStart=function(e){o++,!1===i&&void 0!==n.onStart&&n.onStart(e,a,o),i=!0},this.itemEnd=function(e){a++,void 0!==n.onProgress&&n.onProgress(e,a,o),a===o&&(i=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(e){void 0!==n.onError&&n.onError(e)},this.resolveURL=function(e){return s?s(e):e},this.setURLModifier=function(e){return s=e,this},this.addHandler=function(e,t){return c.push(e,t),this},this.removeHandler=function(e){var t=c.indexOf(e);return-1!==t&&c.splice(t,2),this},this.getHandler=function(e){for(var t=0,r=c.length;t<r;t+=2){var n=c[t],i=c[t+1];if(n.test(e))return i}return null}}var Zo=new Yo;function Jo(e){this.manager=void 0!==e?e:Zo,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(Jo.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this},setResourcePath:function(e){return this.resourcePath=e,this}});var Ko={};function Qo(e){Jo.call(this,e)}function $o(e){Jo.call(this,e)}function es(e){Jo.call(this,e)}function ts(e){Jo.call(this,e)}function rs(e){Jo.call(this,e)}function ns(e){Jo.call(this,e)}function is(e){Jo.call(this,e)}function as(){this.type="Curve",this.arcLengthDivisions=200}function os(e,t,r,n,i,a,o,s){as.call(this),this.type="EllipseCurve",this.aX=e||0,this.aY=t||0,this.xRadius=r||1,this.yRadius=n||1,this.aStartAngle=i||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function ss(e,t,r,n,i,a){os.call(this,e,t,r,r,n,i,a),this.type="ArcCurve"}function cs(){var e=0,t=0,r=0,n=0;function i(i,a,o,s){e=i,t=o,r=-3*i+3*a-2*o-s,n=2*i-2*a+o+s}return{initCatmullRom:function(e,t,r,n,a){i(t,r,a*(r-e),a*(n-t))},initNonuniformCatmullRom:function(e,t,r,n,a,o,s){var c=(t-e)/a-(r-e)/(a+o)+(r-t)/o,l=(r-t)/o-(n-t)/(o+s)+(n-r)/s;i(t,r,c*=o,l*=o)},calc:function(i){var a=i*i;return e+t*i+r*a+n*(a*i)}}}Qo.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Qo,load:function(e,t,r,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;if(void 0===Ko[e]){var o=e.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],c=!!o[2],l=o[3];l=decodeURIComponent(l),c&&(l=atob(l));try{var h,u=(this.responseType||"").toLowerCase();switch(u){case"arraybuffer":case"blob":for(var d=new Uint8Array(l.length),p=0;p<l.length;p++)d[p]=l.charCodeAt(p);h="blob"===u?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;h=f.parseFromString(l,s);break;case"json":h=JSON.parse(l);break;default:h=l}setTimeout((function(){t&&t(h),i.manager.itemEnd(e)}),0)}catch(t){setTimeout((function(){n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)}),0)}}else{Ko[e]=[],Ko[e].push({onLoad:t,onProgress:r,onError:n});var m=new XMLHttpRequest;for(var v in m.open("GET",e,!0),m&&m.addEventListener&&m.addEventListener("load",(function(t){var r=this.response;Xo.add(e,r);var n=Ko[e];if(delete Ko[e],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received.");for(var a=0,o=n.length;a<o;a++){(s=n[a]).onLoad&&s.onLoad(r)}i.manager.itemEnd(e)}else{for(a=0,o=n.length;a<o;a++){var s;(s=n[a]).onError&&s.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}}),!1),m.addEventListener("progress",(function(t){for(var r=Ko[e],n=0,i=r.length;n<i;n++){var a=r[n];a.onProgress&&a.onProgress(t)}}),!1),m.addEventListener("error",(function(t){var r=Ko[e];delete Ko[e];for(var n=0,a=r.length;n<a;n++){var o=r[n];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}),!1),m.addEventListener("abort",(function(t){var r=Ko[e];delete Ko[e];for(var n=0,a=r.length;n<a;n++){var o=r[n];o.onError&&o.onError(t)}i.manager.itemError(e),i.manager.itemEnd(e)}),!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(e),m}Ko[e].push({onLoad:t,onProgress:r,onError:n})},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this},setMimeType:function(e){return this.mimeType=e,this},setRequestHeader:function(e){return this.requestHeader=e,this}}),$o.prototype=Object.assign(Object.create(Jo.prototype),{constructor:$o,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){for(var t=[],r=0;r<e.length;r++){var n=Wo.parse(e[r]);t.push(n)}return t}}),es.prototype=Object.assign(Object.create(Jo.prototype),{constructor:es,load:function(e,t,r,n){var i=this,a=[],o=new ia;o.image=a;var s=new Qo(this.manager);function c(c){s.load(e[c],(function(e){var r=i.parse(e,!0);a[c]={width:r.width,height:r.height,format:r.format,mipmaps:r.mipmaps},6===(l+=1)&&(1===r.mipmapCount&&(o.minFilter=1006),o.format=r.format,o.needsUpdate=!0,t&&t(o))}),r,n)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(e))for(var l=0,h=0,u=e.length;h<u;++h)c(h);else s.load(e,(function(e){var r=i.parse(e,!0);if(r.isCubemap)for(var n=r.mipmaps.length/r.mipmapCount,s=0;s<n;s++){a[s]={mipmaps:[]};for(var c=0;c<r.mipmapCount;c++)a[s].mipmaps.push(r.mipmaps[s*r.mipmapCount+c]),a[s].format=r.format,a[s].width=r.width,a[s].height=r.height}else o.image.width=r.width,o.image.height=r.height,o.mipmaps=r.mipmaps;1===r.mipmapCount&&(o.minFilter=1006),o.format=r.format,o.needsUpdate=!0,t&&t(o)}),r,n);return o}}),ts.prototype=Object.assign(Object.create(Jo.prototype),{constructor:ts,load:function(e,t,r,n){var i=this,a=new Yt,o=new Qo(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(e,(function(e){var r=i.parse(e);r&&(void 0!==r.image?a.image=r.image:void 0!==r.data&&(a.image.width=r.width,a.image.height=r.height,a.image.data=r.data),a.wrapS=void 0!==r.wrapS?r.wrapS:1001,a.wrapT=void 0!==r.wrapT?r.wrapT:1001,a.magFilter=void 0!==r.magFilter?r.magFilter:1006,a.minFilter=void 0!==r.minFilter?r.minFilter:1008,a.anisotropy=void 0!==r.anisotropy?r.anisotropy:1,void 0!==r.format&&(a.format=r.format),void 0!==r.type&&(a.type=r.type),void 0!==r.mipmaps&&(a.mipmaps=r.mipmaps),1===r.mipmapCount&&(a.minFilter=1006),a.needsUpdate=!0,t&&t(a,r))}),r,n),a}}),rs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:rs,load:function(e,t,r,n){void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),Xo.add(e,this),t&&t(this),i.manager.itemEnd(e)}function c(t){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)}return o.addEventListener("load",s,!1),o.addEventListener("error",c,!1),"data:"!==e.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(e),o.src=e,o}}),ns.prototype=Object.assign(Object.create(Jo.prototype),{constructor:ns,load:function(e,t,r,n){var i=new br,a=new rs(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(r){a.load(e[r],(function(e){i.images[r]=e,6===++o&&(i.needsUpdate=!0,t&&t(i))}),void 0,n)}for(var c=0;c<e.length;++c)s(c);return i}}),is.prototype=Object.assign(Object.create(Jo.prototype),{constructor:is,load:function(e,t,r,n){var i=new S,a=new rs(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,(function(r){i.image=r;var n=e.search(/\.jpe?g($|\?)/i)>0||0===e.search(/^data\:image\/jpeg/);i.format=n?1022:1023,i.needsUpdate=!0,void 0!==t&&t(i)}),r,n),i}}),Object.assign(as.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(e,t){var r=this.getUtoTmapping(e);return this.getPoint(r,t)},getPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return t},getSpacedPoints:function(e){void 0===e&&(e=5);for(var t=[],r=0;r<=e;r++)t.push(this.getPointAt(r/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(void 0===e&&(e=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var t,r,n=[],i=this.getPoint(0),a=0;for(n.push(0),r=1;r<=e;r++)a+=(t=this.getPoint(r/e)).distanceTo(i),n.push(a),i=t;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,t){var r,n=this.getLengths(),i=0,a=n.length;r=t||e*n[a-1];for(var o,s=0,c=a-1;s<=c;)if((o=n[i=Math.floor(s+(c-s)/2)]-r)<0)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(n[i=c]===r)return i/(a-1);var l=n[i];return(i+(r-l)/(n[i+1]-l))/(a-1)},getTangent:function(e){var t=e-1e-4,r=e+1e-4;t<0&&(t=0),r>1&&(r=1);var n=this.getPoint(t);return this.getPoint(r).clone().sub(n).normalize()},getTangentAt:function(e){var t=this.getUtoTmapping(e);return this.getTangent(t)},computeFrenetFrames:function(e,t){var r,n,i,a=new y,o=[],s=[],c=[],l=new y,h=new N;for(r=0;r<=e;r++)n=r/e,o[r]=this.getTangentAt(n),o[r].normalize();s[0]=new y,c[0]=new y;var u=Number.MAX_VALUE,d=Math.abs(o[0].x),f=Math.abs(o[0].y),m=Math.abs(o[0].z);for(d<=u&&(u=d,a.set(1,0,0)),f<=u&&(u=f,a.set(0,1,0)),m<=u&&a.set(0,0,1),l.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],l),c[0].crossVectors(o[0],s[0]),r=1;r<=e;r++)s[r]=s[r-1].clone(),c[r]=c[r-1].clone(),l.crossVectors(o[r-1],o[r]),l.length()>Number.EPSILON&&(l.normalize(),i=Math.acos(p.clamp(o[r-1].dot(o[r]),-1,1)),s[r].applyMatrix4(h.makeRotationAxis(l,i))),c[r].crossVectors(o[r],s[r]);if(!0===t)for(i=Math.acos(p.clamp(s[0].dot(s[e]),-1,1)),i/=e,o[0].dot(l.crossVectors(s[0],s[e]))>0&&(i=-i),r=1;r<=e;r++)s[r].applyMatrix4(h.makeRotationAxis(o[r],i*r)),c[r].crossVectors(o[r],s[r]);return{tangents:o,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this},toJSON:function(){var e={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e},fromJSON:function(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}),os.prototype=Object.create(as.prototype),os.prototype.constructor=os,os.prototype.isEllipseCurve=!0,os.prototype.getPoint=function(e,t){for(var r=t||new f,n=2*Math.PI,i=this.aEndAngle-this.aStartAngle,a=Math.abs(i)<Number.EPSILON;i<0;)i+=n;for(;i>n;)i-=n;i<Number.EPSILON&&(i=a?0:n),!0!==this.aClockwise||a||(i===n?i=-n:i-=n);var o=this.aStartAngle+e*i,s=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var l=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=s-this.aX,d=c-this.aY;s=u*l-d*h+this.aX,c=u*h+d*l+this.aY}return r.set(s,c)},os.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},os.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e},os.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this},ss.prototype=Object.create(os.prototype),ss.prototype.constructor=ss,ss.prototype.isArcCurve=!0;var ls=new y,hs=new cs,us=new cs,ds=new cs;function ps(e,t,r,n){as.call(this),this.type="CatmullRomCurve3",this.points=e||[],this.closed=t||!1,this.curveType=r||"centripetal",this.tension=n||.5}function fs(e,t,r,n,i){var a=.5*(n-t),o=.5*(i-r),s=e*e;return(2*r-2*n+a+o)*(e*s)+(-3*r+3*n-2*a-o)*s+a*e+r}function ms(e,t,r,n){return function(e,t){var r=1-e;return r*r*t}(e,t)+function(e,t){return 2*(1-e)*e*t}(e,r)+function(e,t){return e*e*t}(e,n)}function vs(e,t,r,n,i){return function(e,t){var r=1-e;return r*r*r*t}(e,t)+function(e,t){var r=1-e;return 3*r*r*e*t}(e,r)+function(e,t){return 3*(1-e)*e*e*t}(e,n)+function(e,t){return e*e*e*t}(e,i)}function gs(e,t,r,n){as.call(this),this.type="CubicBezierCurve",this.v0=e||new f,this.v1=t||new f,this.v2=r||new f,this.v3=n||new f}function ys(e,t,r,n){as.call(this),this.type="CubicBezierCurve3",this.v0=e||new y,this.v1=t||new y,this.v2=r||new y,this.v3=n||new y}function xs(e,t){as.call(this),this.type="LineCurve",this.v1=e||new f,this.v2=t||new f}function bs(e,t){as.call(this),this.type="LineCurve3",this.v1=e||new y,this.v2=t||new y}function ws(e,t,r){as.call(this),this.type="QuadraticBezierCurve",this.v0=e||new f,this.v1=t||new f,this.v2=r||new f}function _s(e,t,r){as.call(this),this.type="QuadraticBezierCurve3",this.v0=e||new y,this.v1=t||new y,this.v2=r||new y}function Ms(e){as.call(this),this.type="SplineCurve",this.points=e||[]}ps.prototype=Object.create(as.prototype),ps.prototype.constructor=ps,ps.prototype.isCatmullRomCurve3=!0,ps.prototype.getPoint=function(e,t){var r,n,i,a,o=t||new y,s=this.points,c=s.length,l=(c-(this.closed?0:1))*e,h=Math.floor(l),u=l-h;if(this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/c)+1)*c:0===u&&h===c-1&&(h=c-2,u=1),this.closed||h>0?r=s[(h-1)%c]:(ls.subVectors(s[0],s[1]).add(s[0]),r=ls),n=s[h%c],i=s[(h+1)%c],this.closed||h+2<c?a=s[(h+2)%c]:(ls.subVectors(s[c-1],s[c-2]).add(s[c-1]),a=ls),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(r.distanceToSquared(n),d),f=Math.pow(n.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(a),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),hs.initNonuniformCatmullRom(r.x,n.x,i.x,a.x,p,f,m),us.initNonuniformCatmullRom(r.y,n.y,i.y,a.y,p,f,m),ds.initNonuniformCatmullRom(r.z,n.z,i.z,a.z,p,f,m)}else"catmullrom"===this.curveType&&(hs.initCatmullRom(r.x,n.x,i.x,a.x,this.tension),us.initCatmullRom(r.y,n.y,i.y,a.y,this.tension),ds.initCatmullRom(r.z,n.z,i.z,a.z,this.tension));return o.set(hs.calc(u),us.calc(u),ds.calc(u)),o},ps.prototype.copy=function(e){as.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push(n.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},ps.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var n=this.points[t];e.points.push(n.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e},ps.prototype.fromJSON=function(e){as.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push((new y).fromArray(n))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this},gs.prototype=Object.create(as.prototype),gs.prototype.constructor=gs,gs.prototype.isCubicBezierCurve=!0,gs.prototype.getPoint=function(e,t){var r=t||new f,n=this.v0,i=this.v1,a=this.v2,o=this.v3;return r.set(vs(e,n.x,i.x,a.x,o.x),vs(e,n.y,i.y,a.y,o.y)),r},gs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},gs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},gs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},ys.prototype=Object.create(as.prototype),ys.prototype.constructor=ys,ys.prototype.isCubicBezierCurve3=!0,ys.prototype.getPoint=function(e,t){var r=t||new y,n=this.v0,i=this.v1,a=this.v2,o=this.v3;return r.set(vs(e,n.x,i.x,a.x,o.x),vs(e,n.y,i.y,a.y,o.y),vs(e,n.z,i.z,a.z,o.z)),r},ys.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this},ys.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e},ys.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this},xs.prototype=Object.create(as.prototype),xs.prototype.constructor=xs,xs.prototype.isLineCurve=!0,xs.prototype.getPoint=function(e,t){var r=t||new f;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},xs.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},xs.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},xs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},xs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},xs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},bs.prototype=Object.create(as.prototype),bs.prototype.constructor=bs,bs.prototype.isLineCurve3=!0,bs.prototype.getPoint=function(e,t){var r=t||new y;return 1===e?r.copy(this.v2):(r.copy(this.v2).sub(this.v1),r.multiplyScalar(e).add(this.v1)),r},bs.prototype.getPointAt=function(e,t){return this.getPoint(e,t)},bs.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v1.copy(e.v1),this.v2.copy(e.v2),this},bs.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},bs.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},ws.prototype=Object.create(as.prototype),ws.prototype.constructor=ws,ws.prototype.isQuadraticBezierCurve=!0,ws.prototype.getPoint=function(e,t){var r=t||new f,n=this.v0,i=this.v1,a=this.v2;return r.set(ms(e,n.x,i.x,a.x),ms(e,n.y,i.y,a.y)),r},ws.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},ws.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},ws.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},_s.prototype=Object.create(as.prototype),_s.prototype.constructor=_s,_s.prototype.isQuadraticBezierCurve3=!0,_s.prototype.getPoint=function(e,t){var r=t||new y,n=this.v0,i=this.v1,a=this.v2;return r.set(ms(e,n.x,i.x,a.x),ms(e,n.y,i.y,a.y),ms(e,n.z,i.z,a.z)),r},_s.prototype.copy=function(e){return as.prototype.copy.call(this,e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this},_s.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e},_s.prototype.fromJSON=function(e){return as.prototype.fromJSON.call(this,e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this},Ms.prototype=Object.create(as.prototype),Ms.prototype.constructor=Ms,Ms.prototype.isSplineCurve=!0,Ms.prototype.getPoint=function(e,t){var r=t||new f,n=this.points,i=(n.length-1)*e,a=Math.floor(i),o=i-a,s=n[0===a?a:a-1],c=n[a],l=n[a>n.length-2?n.length-1:a+1],h=n[a>n.length-3?n.length-1:a+2];return r.set(fs(o,s.x,c.x,l.x,h.x),fs(o,s.y,c.y,l.y,h.y)),r},Ms.prototype.copy=function(e){as.prototype.copy.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push(n.clone())}return this},Ms.prototype.toJSON=function(){var e=as.prototype.toJSON.call(this);e.points=[];for(var t=0,r=this.points.length;t<r;t++){var n=this.points[t];e.points.push(n.toArray())}return e},Ms.prototype.fromJSON=function(e){as.prototype.fromJSON.call(this,e),this.points=[];for(var t=0,r=e.points.length;t<r;t++){var n=e.points[t];this.points.push((new f).fromArray(n))}return this};var Ss=Object.freeze({ArcCurve:ss,CatmullRomCurve3:ps,CubicBezierCurve:gs,CubicBezierCurve3:ys,EllipseCurve:os,LineCurve:xs,LineCurve3:bs,QuadraticBezierCurve:ws,QuadraticBezierCurve3:_s,SplineCurve:Ms});function Ts(){as.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Es(e){Ts.call(this),this.type="Path",this.currentPoint=new f,e&&this.setFromPoints(e)}function As(e){Es.call(this,e),this.uuid=p.generateUUID(),this.type="Shape",this.holes=[]}function Ls(e,t){$.call(this),this.type="Light",this.color=new Ue(e),this.intensity=void 0!==t?t:1,this.receiveShadow=void 0}function Rs(e,t,r){Ls.call(this,e,r),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy($.DefaultUp),this.updateMatrix(),this.groundColor=new Ue(t)}function Ps(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new f(512,512),this.map=null,this.mapPass=null,this.matrix=new N,this._frustum=new tr,this._frameExtents=new f(1,1),this._viewportCount=1,this._viewports=[new T(0,0,1,1)]}function Cs(){Ps.call(this,new Wt(50,1,.5,500))}function Os(e,t,r,n,i,a){Ls.call(this,e,t),this.type="SpotLight",this.position.copy($.DefaultUp),this.updateMatrix(),this.target=new $,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==r?r:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new Cs}function Is(){Ps.call(this,new Wt(90,1,.5,500)),this._frameExtents=new f(4,2),this._viewportCount=6,this._viewports=[new T(2,1,1,1),new T(0,1,1,1),new T(3,1,1,1),new T(1,1,1,1),new T(3,0,1,1),new T(1,0,1,1)],this._cubeDirections=[new y(1,0,0),new y(-1,0,0),new y(0,0,1),new y(0,0,-1),new y(0,1,0),new y(0,-1,0)],this._cubeUps=[new y(0,1,0),new y(0,1,0),new y(0,1,0),new y(0,1,0),new y(0,0,1),new y(0,0,-1)]}function Ds(e,t,r,n){Ls.call(this,e,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==r?r:0,this.decay=void 0!==n?n:1,this.shadow=new Is}function Ns(e,t,r,n,i,a){Vt.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==e?e:-1,this.right=void 0!==t?t:1,this.top=void 0!==r?r:1,this.bottom=void 0!==n?n:-1,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function Bs(){Ps.call(this,new Ns(-5,5,5,-5,.5,500))}function zs(e,t){Ls.call(this,e,t),this.type="DirectionalLight",this.position.copy($.DefaultUp),this.updateMatrix(),this.target=new $,this.shadow=new Bs}function Fs(e,t){Ls.call(this,e,t),this.type="AmbientLight",this.castShadow=void 0}function Us(e,t,r,n){Ls.call(this,e,t),this.type="RectAreaLight",this.width=void 0!==r?r:10,this.height=void 0!==n?n:10}function Gs(e){Jo.call(this,e),this.textures={}}Ts.prototype=Object.assign(Object.create(as.prototype),{constructor:Ts,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);e.equals(t)||this.curves.push(new xs(t,e))},getPoint:function(e){for(var t=e*this.getLength(),r=this.getCurveLengths(),n=0;n<r.length;){if(r[n]>=t){var i=r[n]-t,a=this.curves[n],o=a.getLength(),s=0===o?0:1-i/o;return a.getPointAt(s)}n++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],t=0,r=0,n=this.curves.length;r<n;r++)t+=this.curves[r].getLength(),e.push(t);return this.cacheLengths=e,e},getSpacedPoints:function(e){void 0===e&&(e=40);for(var t=[],r=0;r<=e;r++)t.push(this.getPoint(r/e));return this.autoClose&&t.push(t[0]),t},getPoints:function(e){e=e||12;for(var t,r=[],n=0,i=this.curves;n<i.length;n++)for(var a=i[n],o=a&&a.isEllipseCurve?2*e:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?e*a.points.length:e,s=a.getPoints(o),c=0;c<s.length;c++){var l=s[c];t&&t.equals(l)||(r.push(l),t=l)}return this.autoClose&&r.length>1&&!r[r.length-1].equals(r[0])&&r.push(r[0]),r},copy:function(e){as.prototype.copy.call(this,e),this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var n=e.curves[t];this.curves.push(n.clone())}return this.autoClose=e.autoClose,this},toJSON:function(){var e=as.prototype.toJSON.call(this);e.autoClose=this.autoClose,e.curves=[];for(var t=0,r=this.curves.length;t<r;t++){var n=this.curves[t];e.curves.push(n.toJSON())}return e},fromJSON:function(e){as.prototype.fromJSON.call(this,e),this.autoClose=e.autoClose,this.curves=[];for(var t=0,r=e.curves.length;t<r;t++){var n=e.curves[t];this.curves.push((new Ss[n.type]).fromJSON(n))}return this}}),Es.prototype=Object.assign(Object.create(Ts.prototype),{constructor:Es,setFromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,r=e.length;t<r;t++)this.lineTo(e[t].x,e[t].y)},moveTo:function(e,t){this.currentPoint.set(e,t)},lineTo:function(e,t){var r=new xs(this.currentPoint.clone(),new f(e,t));this.curves.push(r),this.currentPoint.set(e,t)},quadraticCurveTo:function(e,t,r,n){var i=new ws(this.currentPoint.clone(),new f(e,t),new f(r,n));this.curves.push(i),this.currentPoint.set(r,n)},bezierCurveTo:function(e,t,r,n,i,a){var o=new gs(this.currentPoint.clone(),new f(e,t),new f(r,n),new f(i,a));this.curves.push(o),this.currentPoint.set(i,a)},splineThru:function(e){var t=new Ms([this.currentPoint.clone()].concat(e));this.curves.push(t),this.currentPoint.copy(e[e.length-1])},arc:function(e,t,r,n,i,a){var o=this.currentPoint.x,s=this.currentPoint.y;this.absarc(e+o,t+s,r,n,i,a)},absarc:function(e,t,r,n,i,a){this.absellipse(e,t,r,r,n,i,a)},ellipse:function(e,t,r,n,i,a,o,s){var c=this.currentPoint.x,l=this.currentPoint.y;this.absellipse(e+c,t+l,r,n,i,a,o,s)},absellipse:function(e,t,r,n,i,a,o,s){var c=new os(e,t,r,n,i,a,o,s);if(this.curves.length>0){var l=c.getPoint(0);l.equals(this.currentPoint)||this.lineTo(l.x,l.y)}this.curves.push(c);var h=c.getPoint(1);this.currentPoint.copy(h)},copy:function(e){return Ts.prototype.copy.call(this,e),this.currentPoint.copy(e.currentPoint),this},toJSON:function(){var e=Ts.prototype.toJSON.call(this);return e.currentPoint=this.currentPoint.toArray(),e},fromJSON:function(e){return Ts.prototype.fromJSON.call(this,e),this.currentPoint.fromArray(e.currentPoint),this}}),As.prototype=Object.assign(Object.create(Es.prototype),{constructor:As,getPointsHoles:function(e){for(var t=[],r=0,n=this.holes.length;r<n;r++)t[r]=this.holes[r].getPoints(e);return t},extractPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},copy:function(e){Es.prototype.copy.call(this,e),this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var n=e.holes[t];this.holes.push(n.clone())}return this},toJSON:function(){var e=Es.prototype.toJSON.call(this);e.uuid=this.uuid,e.holes=[];for(var t=0,r=this.holes.length;t<r;t++){var n=this.holes[t];e.holes.push(n.toJSON())}return e},fromJSON:function(e){Es.prototype.fromJSON.call(this,e),this.uuid=e.uuid,this.holes=[];for(var t=0,r=e.holes.length;t<r;t++){var n=e.holes[t];this.holes.push((new Es).fromJSON(n))}return this}}),Ls.prototype=Object.assign(Object.create($.prototype),{constructor:Ls,isLight:!0,copy:function(e){return $.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,void 0!==this.groundColor&&(t.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(t.object.distance=this.distance),void 0!==this.angle&&(t.object.angle=this.angle),void 0!==this.decay&&(t.object.decay=this.decay),void 0!==this.penumbra&&(t.object.penumbra=this.penumbra),void 0!==this.shadow&&(t.object.shadow=this.shadow.toJSON()),t}}),Rs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Rs,isHemisphereLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),Object.assign(Ps.prototype,{_projScreenMatrix:new N,_lightPositionWorld:new y,_lookTarget:new y,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(e){var t=this.camera,r=this.matrix,n=this._projScreenMatrix,i=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(e.matrixWorld),t.position.copy(a),i.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(i),t.updateMatrixWorld(),n.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromMatrix(n),r.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),r.multiply(t.projectionMatrix),r.multiply(t.matrixWorldInverse)},getViewport:function(e){return this._viewports[e]},getFrameExtents:function(){return this._frameExtents},copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e={};return 0!==this.bias&&(e.bias=this.bias),1!==this.radius&&(e.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}),Cs.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Cs,isSpotLightShadow:!0,updateMatrices:function(e,t,r){var n=this.camera,i=2*p.RAD2DEG*e.angle,a=this.mapSize.width/this.mapSize.height,o=e.distance||n.far;i===n.fov&&a===n.aspect&&o===n.far||(n.fov=i,n.aspect=a,n.far=o,n.updateProjectionMatrix()),Ps.prototype.updateMatrices.call(this,e,t,r)}}),Os.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Os,isSpotLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Is.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Is,isPointLightShadow:!0,updateMatrices:function(e,t,r){var n=this.camera,i=this.matrix,a=this._lightPositionWorld,o=this._lookTarget,s=this._projScreenMatrix;a.setFromMatrixPosition(e.matrixWorld),n.position.copy(a),o.copy(n.position),o.add(this._cubeDirections[r]),n.up.copy(this._cubeUps[r]),n.lookAt(o),n.updateMatrixWorld(),i.makeTranslation(-a.x,-a.y,-a.z),s.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromMatrix(s)}}),Ds.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Ds,isPointLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),Ns.prototype=Object.assign(Object.create(Vt.prototype),{constructor:Ns,isOrthographicCamera:!0,copy:function(e,t){return Vt.prototype.copy.call(this,e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,t,r,n,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=r,this.view.offsetY=n,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),r=(this.right+this.left)/2,n=(this.top+this.bottom)/2,i=r-e,a=r+e,o=n+t,s=n-t;if(null!==this.view&&this.view.enabled){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),h=(this.right-this.left)/this.view.width,u=(this.top-this.bottom)/this.view.height;a=(i+=h*(this.view.offsetX/c))+h*(this.view.width/c),s=(o-=u*(this.view.offsetY/l))-u*(this.view.height/l)}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(e){var t=$.prototype.toJSON.call(this,e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,null!==this.view&&(t.object.view=Object.assign({},this.view)),t}}),Bs.prototype=Object.assign(Object.create(Ps.prototype),{constructor:Bs,isDirectionalLightShadow:!0,updateMatrices:function(e,t,r){Ps.prototype.updateMatrices.call(this,e,t,r)}}),zs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:zs,isDirectionalLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),Fs.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Fs,isAmbientLight:!0}),Us.prototype=Object.assign(Object.create(Ls.prototype),{constructor:Us,isRectAreaLight:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.width=e.width,this.height=e.height,this},toJSON:function(e){var t=Ls.prototype.toJSON.call(this,e);return t.object.width=this.width,t.object.height=this.height,t}}),Gs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Gs,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){var t=this.textures;function r(e){return void 0===t[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),t[e]}var n=new Co[e.type];if(void 0!==e.uuid&&(n.uuid=e.uuid),void 0!==e.name&&(n.name=e.name),void 0!==e.color&&n.color.setHex(e.color),void 0!==e.roughness&&(n.roughness=e.roughness),void 0!==e.metalness&&(n.metalness=e.metalness),void 0!==e.sheen&&(n.sheen=(new Ue).setHex(e.sheen)),void 0!==e.emissive&&n.emissive.setHex(e.emissive),void 0!==e.specular&&n.specular.setHex(e.specular),void 0!==e.shininess&&(n.shininess=e.shininess),void 0!==e.clearcoat&&(n.clearcoat=e.clearcoat),void 0!==e.clearcoatRoughness&&(n.clearcoatRoughness=e.clearcoatRoughness),void 0!==e.vertexColors&&(n.vertexColors=e.vertexColors),void 0!==e.fog&&(n.fog=e.fog),void 0!==e.flatShading&&(n.flatShading=e.flatShading),void 0!==e.blending&&(n.blending=e.blending),void 0!==e.combine&&(n.combine=e.combine),void 0!==e.side&&(n.side=e.side),void 0!==e.opacity&&(n.opacity=e.opacity),void 0!==e.transparent&&(n.transparent=e.transparent),void 0!==e.alphaTest&&(n.alphaTest=e.alphaTest),void 0!==e.depthTest&&(n.depthTest=e.depthTest),void 0!==e.depthWrite&&(n.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(n.colorWrite=e.colorWrite),void 0!==e.stencilWrite&&(n.stencilWrite=e.stencilWrite),void 0!==e.stencilWriteMask&&(n.stencilWriteMask=e.stencilWriteMask),void 0!==e.stencilFunc&&(n.stencilFunc=e.stencilFunc),void 0!==e.stencilRef&&(n.stencilRef=e.stencilRef),void 0!==e.stencilFuncMask&&(n.stencilFuncMask=e.stencilFuncMask),void 0!==e.stencilFail&&(n.stencilFail=e.stencilFail),void 0!==e.stencilZFail&&(n.stencilZFail=e.stencilZFail),void 0!==e.stencilZPass&&(n.stencilZPass=e.stencilZPass),void 0!==e.wireframe&&(n.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(n.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.wireframeLinecap&&(n.wireframeLinecap=e.wireframeLinecap),void 0!==e.wireframeLinejoin&&(n.wireframeLinejoin=e.wireframeLinejoin),void 0!==e.rotation&&(n.rotation=e.rotation),1!==e.linewidth&&(n.linewidth=e.linewidth),void 0!==e.dashSize&&(n.dashSize=e.dashSize),void 0!==e.gapSize&&(n.gapSize=e.gapSize),void 0!==e.scale&&(n.scale=e.scale),void 0!==e.polygonOffset&&(n.polygonOffset=e.polygonOffset),void 0!==e.polygonOffsetFactor&&(n.polygonOffsetFactor=e.polygonOffsetFactor),void 0!==e.polygonOffsetUnits&&(n.polygonOffsetUnits=e.polygonOffsetUnits),void 0!==e.skinning&&(n.skinning=e.skinning),void 0!==e.morphTargets&&(n.morphTargets=e.morphTargets),void 0!==e.morphNormals&&(n.morphNormals=e.morphNormals),void 0!==e.dithering&&(n.dithering=e.dithering),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.toneMapped&&(n.toneMapped=e.toneMapped),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.uniforms)for(var i in e.uniforms){var a=e.uniforms[i];switch(n.uniforms[i]={},a.type){case"t":n.uniforms[i].value=r(a.value);break;case"c":n.uniforms[i].value=(new Ue).setHex(a.value);break;case"v2":n.uniforms[i].value=(new f).fromArray(a.value);break;case"v3":n.uniforms[i].value=(new y).fromArray(a.value);break;case"v4":n.uniforms[i].value=(new T).fromArray(a.value);break;case"m3":n.uniforms[i].value=(new w).fromArray(a.value);case"m4":n.uniforms[i].value=(new N).fromArray(a.value);break;default:n.uniforms[i].value=a.value}}if(void 0!==e.defines&&(n.defines=e.defines),void 0!==e.vertexShader&&(n.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(n.fragmentShader=e.fragmentShader),void 0!==e.extensions)for(var o in e.extensions)n.extensions[o]=e.extensions[o];if(void 0!==e.shading&&(n.flatShading=1===e.shading),void 0!==e.size&&(n.size=e.size),void 0!==e.sizeAttenuation&&(n.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(n.map=r(e.map)),void 0!==e.matcap&&(n.matcap=r(e.matcap)),void 0!==e.alphaMap&&(n.alphaMap=r(e.alphaMap),n.transparent=!0),void 0!==e.bumpMap&&(n.bumpMap=r(e.bumpMap)),void 0!==e.bumpScale&&(n.bumpScale=e.bumpScale),void 0!==e.normalMap&&(n.normalMap=r(e.normalMap)),void 0!==e.normalMapType&&(n.normalMapType=e.normalMapType),void 0!==e.normalScale){var s=e.normalScale;!1===Array.isArray(s)&&(s=[s,s]),n.normalScale=(new f).fromArray(s)}return void 0!==e.displacementMap&&(n.displacementMap=r(e.displacementMap)),void 0!==e.displacementScale&&(n.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(n.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(n.roughnessMap=r(e.roughnessMap)),void 0!==e.metalnessMap&&(n.metalnessMap=r(e.metalnessMap)),void 0!==e.emissiveMap&&(n.emissiveMap=r(e.emissiveMap)),void 0!==e.emissiveIntensity&&(n.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(n.specularMap=r(e.specularMap)),void 0!==e.envMap&&(n.envMap=r(e.envMap)),void 0!==e.envMapIntensity&&(n.envMapIntensity=e.envMapIntensity),void 0!==e.reflectivity&&(n.reflectivity=e.reflectivity),void 0!==e.refractionRatio&&(n.refractionRatio=e.refractionRatio),void 0!==e.lightMap&&(n.lightMap=r(e.lightMap)),void 0!==e.lightMapIntensity&&(n.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(n.aoMap=r(e.aoMap)),void 0!==e.aoMapIntensity&&(n.aoMapIntensity=e.aoMapIntensity),void 0!==e.gradientMap&&(n.gradientMap=r(e.gradientMap)),void 0!==e.clearcoatNormalMap&&(n.clearcoatNormalMap=r(e.clearcoatNormalMap)),void 0!==e.clearcoatNormalScale&&(n.clearcoatNormalScale=(new f).fromArray(e.clearcoatNormalScale)),n},setTextures:function(e){return this.textures=e,this}});var Hs={decodeText:function(e){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(e);for(var t="",r=0,n=e.length;r<n;r++)t+=String.fromCharCode(e[r]);try{return decodeURIComponent(escape(t))}catch(e){return t}},extractUrlBase:function(e){var t=e.lastIndexOf("/");return-1===t?"./":e.substr(0,t+1)}};function ks(){dt.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function js(e,t,r,n){"number"==typeof r&&(n=r,r=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Xe.call(this,e,t,r),this.meshPerAttribute=n||1}function Vs(e){Jo.call(this,e)}ks.prototype=Object.assign(Object.create(dt.prototype),{constructor:ks,isInstancedBufferGeometry:!0,copy:function(e){return dt.prototype.copy.call(this,e),this.maxInstancedCount=e.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var e=dt.prototype.toJSON.call(this);return e.maxInstancedCount=this.maxInstancedCount,e.isInstancedBufferGeometry=!0,e}}),js.prototype=Object.assign(Object.create(Xe.prototype),{constructor:js,isInstancedBufferAttribute:!0,copy:function(e){return Xe.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},toJSON:function(){var e=Xe.prototype.toJSON.call(this);return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}),Vs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Vs,load:function(e,t,r,n){var i=this,a=new Qo(i.manager);a.setPath(i.path),a.load(e,(function(e){t(i.parse(JSON.parse(e)))}),r,n)},parse:function(e){var t=e.isInstancedBufferGeometry?new ks:new dt,r=e.data.index;if(void 0!==r){var n=new Ws[r.type](r.array);t.setIndex(new Xe(n,1))}var i=e.data.attributes;for(var a in i){var o=i[a],s=(n=new Ws[o.type](o.array),new(o.isInstancedBufferAttribute?js:Xe)(n,o.itemSize,o.normalized));void 0!==o.name&&(s.name=o.name),t.addAttribute(a,s)}var c=e.data.morphAttributes;if(c)for(var a in c){for(var l=c[a],h=[],u=0,d=l.length;u<d;u++){o=l[u],s=new Xe(n=new Ws[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(s.name=o.name),h.push(s)}t.morphAttributes[a]=h}var p=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==p){u=0;for(var f=p.length;u!==f;++u){var m=p[u];t.addGroup(m.start,m.count,m.materialIndex)}}var v=e.data.boundingSphere;if(void 0!==v){var g=new y;void 0!==v.center&&g.fromArray(v.center),t.boundingSphere=new ve(g,v.radius)}return e.name&&(t.name=e.name),e.userData&&(t.userData=e.userData),t}});var Ws={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function qs(e){Jo.call(this,e)}qs.prototype=Object.assign(Object.create(Jo.prototype),{constructor:qs,load:function(e,t,r,n){var i=this,a=""===this.path?Hs.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||a;var o=new Qo(i.manager);o.setPath(this.path),o.load(e,(function(r){var a=null;try{a=JSON.parse(r)}catch(t){return void 0!==n&&n(t),void console.error("THREE:ObjectLoader: Can't parse "+e+".",t.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?i.parse(a,t):console.error("THREE.ObjectLoader: Can't load "+e)}),r,n)},parse:function(e,t){var r=this.parseShape(e.shapes),n=this.parseGeometries(e.geometries,r),i=this.parseImages(e.images,(function(){void 0!==t&&t(s)})),a=this.parseTextures(e.textures,i),o=this.parseMaterials(e.materials,a),s=this.parseObject(e.object,n,o);return e.animations&&(s.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==t&&t(s),s},parseShape:function(e){var t={};if(void 0!==e)for(var r=0,n=e.length;r<n;r++){var i=(new As).fromJSON(e[r]);t[i.uuid]=i}return t},parseGeometries:function(e,t){var r={};if(void 0!==e)for(var n=new Vs,i=0,a=e.length;i<a;i++){var o,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new bo[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new bo[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new bo[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new bo[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new bo[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new bo[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new bo[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new bo[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new bo[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new bo[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new bo[s.type]((new Ss[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new bo[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new bo[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var c=[],h=0,u=s.shapes.length;h<u;h++){var d=t[s.shapes[h]];c.push(d)}o=new bo[s.type](c,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(c=[],h=0,u=s.shapes.length;h<u;h++){d=t[s.shapes[h]];c.push(d)}var p=s.options.extrudePath;void 0!==p&&(s.options.extrudePath=(new Ss[p.type]).fromJSON(p)),o=new bo[s.type](c,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=n.parse(s);break;case"Geometry":if("THREE"in window&&"LegacyJSONLoader"in l)o=(new l.LegacyJSONLoader).parse(s,this.resourcePath).geometry;else console.error('THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),r[s.uuid]=o}return r},parseMaterials:function(e,t){var r={},n={};if(void 0!==e){var i=new Gs;i.setTextures(t);for(var a=0,o=e.length;a<o;a++){var s=e[a];if("MultiMaterial"===s.type){for(var c=[],l=0;l<s.materials.length;l++){var h=s.materials[l];void 0===r[h.uuid]&&(r[h.uuid]=i.parse(h)),c.push(r[h.uuid])}n[s.uuid]=c}else void 0===r[s.uuid]&&(r[s.uuid]=i.parse(s)),n[s.uuid]=r[s.uuid]}}return n},parseAnimations:function(e){for(var t=[],r=0;r<e.length;r++){var n=e[r],i=Wo.parse(n);void 0!==n.uuid&&(i.uuid=n.uuid),t.push(i)}return t},parseImages:function(e,t){var r=this,n={};function i(e){return r.manager.itemStart(e),a.load(e,(function(){r.manager.itemEnd(e)}),void 0,(function(){r.manager.itemError(e),r.manager.itemEnd(e)}))}if(void 0!==e&&e.length>0){var a=new rs(new Yo(t));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=e.length;o<s;o++){var c=e[o],l=c.url;if(Array.isArray(l)){n[c.uuid]=[];for(var h=0,u=l.length;h<u;h++){var d=l[h],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:r.resourcePath+d;n[c.uuid].push(i(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:r.resourcePath+c.url;n[c.uuid]=i(p)}}}return n},parseTextures:function(e,t){function r(e,t){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),t[e])}var n={};if(void 0!==e)for(var i=0,a=e.length;i<a;i++){var o,s=e[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===t[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(t[s.image])?new br(t[s.image]):new S(t[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=r(s.mapping,Ys)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=r(s.wrap[0],Zs),o.wrapT=r(s.wrap[1],Zs)),void 0!==s.format&&(o.format=s.format),void 0!==s.type&&(o.type=s.type),void 0!==s.encoding&&(o.encoding=s.encoding),void 0!==s.minFilter&&(o.minFilter=r(s.minFilter,Js)),void 0!==s.magFilter&&(o.magFilter=r(s.magFilter,Js)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(o.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(o.unpackAlignment=s.unpackAlignment),n[s.uuid]=o}return n},parseObject:function(e,t,r){var n;function i(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function a(e){if(void 0!==e){if(Array.isArray(e)){for(var t=[],n=0,i=e.length;n<i;n++){var a=e[n];void 0===r[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),t.push(r[a])}return t}return void 0===r[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),r[e]}}switch(e.type){case"Scene":n=new ee,void 0!==e.background&&Number.isInteger(e.background)&&(n.background=new Ue(e.background)),void 0!==e.fog&&("Fog"===e.fog.type?n.fog=new di(e.fog.color,e.fog.near,e.fog.far):"FogExp2"===e.fog.type&&(n.fog=new ui(e.fog.color,e.fog.density)));break;case"PerspectiveCamera":n=new Wt(e.fov,e.aspect,e.near,e.far),void 0!==e.focus&&(n.focus=e.focus),void 0!==e.zoom&&(n.zoom=e.zoom),void 0!==e.filmGauge&&(n.filmGauge=e.filmGauge),void 0!==e.filmOffset&&(n.filmOffset=e.filmOffset),void 0!==e.view&&(n.view=Object.assign({},e.view));break;case"OrthographicCamera":n=new Ns(e.left,e.right,e.top,e.bottom,e.near,e.far),void 0!==e.zoom&&(n.zoom=e.zoom),void 0!==e.view&&(n.view=Object.assign({},e.view));break;case"AmbientLight":n=new Fs(e.color,e.intensity);break;case"DirectionalLight":n=new zs(e.color,e.intensity);break;case"PointLight":n=new Ds(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":n=new Us(e.color,e.intensity,e.width,e.height);break;case"SpotLight":n=new Os(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":n=new Rs(e.color,e.groundColor,e.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var o=i(e.geometry),s=a(e.material);n=o.bones&&o.bones.length>0?new Ii(o,s):new Pt(o,s),void 0!==e.drawMode&&n.setDrawMode(e.drawMode);break;case"LOD":n=new Oi;break;case"Line":n=new Wi(i(e.geometry),a(e.material),e.mode);break;case"LineLoop":n=new Zi(i(e.geometry),a(e.material));break;case"LineSegments":n=new Yi(i(e.geometry),a(e.material));break;case"PointCloud":case"Points":n=new ta(i(e.geometry),a(e.material));break;case"Sprite":n=new Li(a(e.material));break;case"Group":n=new ri;break;default:n=new $}if(n.uuid=e.uuid,void 0!==e.name&&(n.name=e.name),void 0!==e.matrix?(n.matrix.fromArray(e.matrix),void 0!==e.matrixAutoUpdate&&(n.matrixAutoUpdate=e.matrixAutoUpdate),n.matrixAutoUpdate&&n.matrix.decompose(n.position,n.quaternion,n.scale)):(void 0!==e.position&&n.position.fromArray(e.position),void 0!==e.rotation&&n.rotation.fromArray(e.rotation),void 0!==e.quaternion&&n.quaternion.fromArray(e.quaternion),void 0!==e.scale&&n.scale.fromArray(e.scale)),void 0!==e.castShadow&&(n.castShadow=e.castShadow),void 0!==e.receiveShadow&&(n.receiveShadow=e.receiveShadow),e.shadow&&(void 0!==e.shadow.bias&&(n.shadow.bias=e.shadow.bias),void 0!==e.shadow.radius&&(n.shadow.radius=e.shadow.radius),void 0!==e.shadow.mapSize&&n.shadow.mapSize.fromArray(e.shadow.mapSize),void 0!==e.shadow.camera&&(n.shadow.camera=this.parseObject(e.shadow.camera))),void 0!==e.visible&&(n.visible=e.visible),void 0!==e.frustumCulled&&(n.frustumCulled=e.frustumCulled),void 0!==e.renderOrder&&(n.renderOrder=e.renderOrder),void 0!==e.userData&&(n.userData=e.userData),void 0!==e.layers&&(n.layers.mask=e.layers),void 0!==e.children)for(var c=e.children,l=0;l<c.length;l++)n.add(this.parseObject(c[l],t,r));if("LOD"===e.type)for(var h=e.levels,u=0;u<h.length;u++){var d=h[u],p=n.getObjectByProperty("uuid",d.object);void 0!==p&&n.addLevel(p,d.distance)}return n}});var Xs,Ys={UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},Zs={RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},Js={NearestFilter:1003,NearestMipmapNearestFilter:1004,NearestMipmapLinearFilter:1005,LinearFilter:1006,LinearMipmapNearestFilter:1007,LinearMipmapLinearFilter:1008};function Ks(e){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),Jo.call(this,e),this.options=void 0}function Qs(){this.type="ShapePath",this.color=new Ue,this.subPaths=[],this.currentPath=null}function $s(e){this.type="Font",this.data=e}function ec(e,t,r,n,i){var a=i.glyphs[e]||i.glyphs["?"];if(a){var o,s,c,l,h,u,d,p,f=new Qs;if(a.o)for(var m=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),v=0,g=m.length;v<g;){switch(m[v++]){case"m":o=m[v++]*t+r,s=m[v++]*t+n,f.moveTo(o,s);break;case"l":o=m[v++]*t+r,s=m[v++]*t+n,f.lineTo(o,s);break;case"q":c=m[v++]*t+r,l=m[v++]*t+n,h=m[v++]*t+r,u=m[v++]*t+n,f.quadraticCurveTo(h,u,c,l);break;case"b":c=m[v++]*t+r,l=m[v++]*t+n,h=m[v++]*t+r,u=m[v++]*t+n,d=m[v++]*t+r,p=m[v++]*t+n,f.bezierCurveTo(h,u,d,p,c,l)}}return{offsetX:a.ha*t,path:f}}console.error('THREE.Font: character "'+e+'" does not exists in font family '+i.familyName+".")}function tc(e){Jo.call(this,e)}Ks.prototype=Object.assign(Object.create(Jo.prototype),{constructor:Ks,setOptions:function(e){return this.options=e,this},load:function(e,t,r,n){void 0===e&&(e=""),void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e);var i=this,a=Xo.get(e);if(void 0!==a)return i.manager.itemStart(e),setTimeout((function(){t&&t(a),i.manager.itemEnd(e)}),0),a;fetch(e).then((function(e){return e.blob()})).then((function(e){return void 0===i.options?createImageBitmap(e):createImageBitmap(e,i.options)})).then((function(r){Xo.add(e,r),t&&t(r),i.manager.itemEnd(e)})).catch((function(t){n&&n(t),i.manager.itemError(e),i.manager.itemEnd(e)})),i.manager.itemStart(e)}}),Object.assign(Qs.prototype,{moveTo:function(e,t){this.currentPath=new Es,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t)},lineTo:function(e,t){this.currentPath.lineTo(e,t)},quadraticCurveTo:function(e,t,r,n){this.currentPath.quadraticCurveTo(e,t,r,n)},bezierCurveTo:function(e,t,r,n,i,a){this.currentPath.bezierCurveTo(e,t,r,n,i,a)},splineThru:function(e){this.currentPath.splineThru(e)},toShapes:function(e,t){function r(e){for(var t=[],r=0,n=e.length;r<n;r++){var i=e[r],a=new As;a.curves=i.curves,t.push(a)}return t}function n(e,t){for(var r=t.length,n=!1,i=r-1,a=0;a<r;i=a++){var o=t[i],s=t[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(o=t[a],c=-c,s=t[i],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var h=l*(e.x-o.x)-c*(e.y-o.y);if(0===h)return!0;if(h<0)continue;n=!n}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return n}var i=Ya.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===t)return r(a);var o,s,c,l=[];if(1===a.length)return s=a[0],(c=new As).curves=s.curves,l.push(c),l;var h=!i(a[0].getPoints());h=e?!h:h;var u,d,p=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=a.length;g<y;g++)o=i(u=(s=a[g]).getPoints()),(o=e?!o:o)?(!h&&f[v]&&v++,f[v]={s:new As,p:u},f[v].s.curves=s.curves,h&&v++,m[v]=[]):m[v].push({h:s,p:u[0]});if(!f[0])return r(a);if(f.length>1){for(var x=!1,b=[],w=0,_=f.length;w<_;w++)p[w]=[];for(w=0,_=f.length;w<_;w++)for(var M=m[w],S=0;S<M.length;S++){for(var T=M[S],E=!0,A=0;A<f.length;A++)n(T.p,f[A].p)&&(w!==A&&b.push({froms:w,tos:A,hole:S}),E?(E=!1,p[A].push(T)):x=!0);E&&p[w].push(T)}b.length>0&&(x||(m=p))}g=0;for(var L=f.length;g<L;g++){c=f[g].s,l.push(c);for(var R=0,P=(d=m[g]).length;R<P;R++)c.holes.push(d[R].h)}return l}}),Object.assign($s.prototype,{isFont:!0,generateShapes:function(e,t){void 0===t&&(t=100);for(var r=[],n=function(e,t,r){for(var n=Array.from?Array.from(e):String(e).split(""),i=t/r.resolution,a=(r.boundingBox.yMax-r.boundingBox.yMin+r.underlineThickness)*i,o=[],s=0,c=0,l=0;l<n.length;l++){var h=n[l];if("\n"===h)s=0,c-=a;else{var u=ec(h,i,s,c,r);s+=u.offsetX,o.push(u.path)}}return o}(e,t,this.data),i=0,a=n.length;i<a;i++)Array.prototype.push.apply(r,n[i].toShapes());return r}}),tc.prototype=Object.assign(Object.create(Jo.prototype),{constructor:tc,load:function(e,t,r,n){var i=this,a=new Qo(this.manager);a.setPath(this.path),a.load(e,(function(e){var r;try{r=JSON.parse(e)}catch(t){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),r=JSON.parse(e.substring(65,e.length-2))}var n=i.parse(r);t&&t(n)}),r,n)},parse:function(e){return new $s(e)}});var rc={getContext:function(){return void 0===Xs&&(Xs=new(window.AudioContext||window.webkitAudioContext)),Xs},setContext:function(e){Xs=e}};function nc(e){Jo.call(this,e)}function ic(){this.coefficients=[];for(var e=0;e<9;e++)this.coefficients.push(new y)}function ac(e,t){Ls.call(this,void 0,t),this.sh=void 0!==e?e:new ic}function oc(e,t,r){ac.call(this,void 0,r);var n=(new Ue).set(e),i=(new Ue).set(t),a=new y(n.r,n.g,n.b),o=new y(i.r,i.g,i.b),s=Math.sqrt(Math.PI),c=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}function sc(e,t){ac.call(this,void 0,t);var r=(new Ue).set(e);this.sh.coefficients[0].set(r.r,r.g,r.b).multiplyScalar(2*Math.sqrt(Math.PI))}nc.prototype=Object.assign(Object.create(Jo.prototype),{constructor:nc,load:function(e,t,r,n){var i=new Qo(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.load(e,(function(e){var r=e.slice(0);rc.getContext().decodeAudioData(r,(function(e){t(e)}))}),r,n)}}),Object.assign(ic.prototype,{isSphericalHarmonics3:!0,set:function(e){for(var t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this},zero:function(){for(var e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this},getAt:function(e,t){var r=e.x,n=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.282095),t.addScale(a[1],.488603*n),t.addScale(a[2],.488603*i),t.addScale(a[3],.488603*r),t.addScale(a[4],r*n*1.092548),t.addScale(a[5],n*i*1.092548),t.addScale(a[6],.315392*(3*i*i-1)),t.addScale(a[7],r*i*1.092548),t.addScale(a[8],.546274*(r*r-n*n)),t},getIrradianceAt:function(e,t){var r=e.x,n=e.y,i=e.z,a=this.coefficients;return t.copy(a[0]).multiplyScalar(.886227),t.addScale(a[1],1.023328*n),t.addScale(a[2],1.023328*i),t.addScale(a[3],1.023328*r),t.addScale(a[4],.858086*r*n),t.addScale(a[5],.858086*n*i),t.addScale(a[6],.743125*i*i-.247708),t.addScale(a[7],.858086*r*i),t.addScale(a[8],.429043*(r*r-n*n)),t},add:function(e){for(var t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this},scale:function(e){for(var t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this},lerp:function(e,t){for(var r=0;r<9;r++)this.coefficients[r].lerp(e.coefficients[r],t);return this},equals:function(e){for(var t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0},copy:function(e){return this.set(e.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(e,t){void 0===t&&(t=0);for(var r=this.coefficients,n=0;n<9;n++)r[n].fromArray(e,t+3*n);return this},toArray:function(e,t){void 0===e&&(e=[]),void 0===t&&(t=0);for(var r=this.coefficients,n=0;n<9;n++)r[n].toArray(e,t+3*n);return e}}),Object.assign(ic,{getBasisAt:function(e,t){var r=e.x,n=e.y,i=e.z;t[0]=.282095,t[1]=.488603*n,t[2]=.488603*i,t[3]=.488603*r,t[4]=1.092548*r*n,t[5]=1.092548*n*i,t[6]=.315392*(3*i*i-1),t[7]=1.092548*r*i,t[8]=.546274*(r*r-n*n)}}),ac.prototype=Object.assign(Object.create(Ls.prototype),{constructor:ac,isLightProbe:!0,copy:function(e){return Ls.prototype.copy.call(this,e),this.sh.copy(e.sh),this.intensity=e.intensity,this},toJSON:function(e){return Ls.prototype.toJSON.call(this,e)}}),oc.prototype=Object.assign(Object.create(ac.prototype),{constructor:oc,isHemisphereLightProbe:!0,copy:function(e){return ac.prototype.copy.call(this,e),this},toJSON:function(e){return ac.prototype.toJSON.call(this,e)}}),sc.prototype=Object.assign(Object.create(ac.prototype),{constructor:sc,isAmbientLightProbe:!0,copy:function(e){return ac.prototype.copy.call(this,e),this},toJSON:function(e){return ac.prototype.toJSON.call(this,e)}});var cc=new N,lc=new N;function hc(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Wt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Wt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function uc(e){this.autoStart=void 0===e||e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(hc.prototype,{update:function(e){var t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep;var r,n,i=e.projectionMatrix.clone(),a=t.eyeSep/2,o=a*t.near/t.focus,s=t.near*Math.tan(p.DEG2RAD*t.fov*.5)/t.zoom;lc.elements[12]=-a,cc.elements[12]=a,r=-s*t.aspect+o,n=s*t.aspect+o,i.elements[0]=2*t.near/(n-r),i.elements[8]=(n+r)/(n-r),this.cameraL.projectionMatrix.copy(i),r=-s*t.aspect-o,n=s*t.aspect-o,i.elements[0]=2*t.near/(n-r),i.elements[8]=(n+r)/(n-r),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(lc),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(cc)}}),Object.assign(uc.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var t=("undefined"==typeof performance?Date:performance).now();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}});var dc=new y,pc=new m,fc=new y,mc=new y;function vc(){$.call(this),this.type="AudioListener",this.context=rc.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new uc}function gc(e){$.call(this),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.startTime=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}vc.prototype=Object.assign(Object.create($.prototype),{constructor:vc,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(e){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this},updateMatrixWorld:function(e){$.prototype.updateMatrixWorld.call(this,e);var t=this.context.listener,r=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(dc,pc,fc),mc.set(0,0,-1).applyQuaternion(pc),t.positionX){var n=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(dc.x,n),t.positionY.linearRampToValueAtTime(dc.y,n),t.positionZ.linearRampToValueAtTime(dc.z,n),t.forwardX.linearRampToValueAtTime(mc.x,n),t.forwardY.linearRampToValueAtTime(mc.y,n),t.forwardZ.linearRampToValueAtTime(mc.z,n),t.upX.linearRampToValueAtTime(r.x,n),t.upY.linearRampToValueAtTime(r.y,n),t.upZ.linearRampToValueAtTime(r.z,n)}else t.setPosition(dc.x,dc.y,dc.z),t.setOrientation(mc.x,mc.y,mc.z,r.x,r.y,r.z)}}),gc.prototype=Object.assign(Object.create($.prototype),{constructor:gc,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setMediaElementSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this},setMediaStreamSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this},setBuffer:function(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.onended=this.onEnded.bind(this),this.startTime=this.context.currentTime,e.start(this.startTime,this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this.source.stop(),this.source.onended=null,this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this.source.stop(),this.source.onended=null,this.offset=0,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),!0===this.isPlaying?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},setDetune:function(e){if(this.detune=e,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){if(!1!==this.hasPlaybackControl)return this.playbackRate=e,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(e){if(!1!==this.hasPlaybackControl)return this.loop=e,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}});var yc=new y,xc=new m,bc=new y,wc=new y;function _c(e){gc.call(this,e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Mc(e,t){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==t?t:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}function Sc(e,t,r){this.binding=e,this.valueSize=r;var n,i=Float64Array;switch(t){case"quaternion":n=this._slerp;break;case"string":case"bool":i=Array,n=this._select;break;default:n=this._lerp}this.buffer=new i(4*r),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}_c.prototype=Object.assign(Object.create(gc.prototype),{constructor:_c,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){return this.panner.refDistance=e,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){return this.panner.rolloffFactor=e,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){return this.panner.distanceModel=e,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){return this.panner.maxDistance=e,this},setDirectionalCone:function(e,t,r){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=r,this},updateMatrixWorld:function(e){if($.prototype.updateMatrixWorld.call(this,e),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(yc,xc,bc),wc.set(0,0,1).applyQuaternion(xc);var t=this.panner;if(t.positionX){var r=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(yc.x,r),t.positionY.linearRampToValueAtTime(yc.y,r),t.positionZ.linearRampToValueAtTime(yc.z,r),t.orientationX.linearRampToValueAtTime(wc.x,r),t.orientationY.linearRampToValueAtTime(wc.y,r),t.orientationZ.linearRampToValueAtTime(wc.z,r)}else t.setPosition(yc.x,yc.y,yc.z),t.setOrientation(wc.x,wc.y,wc.z)}}}),Object.assign(Mc.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,t=this.getFrequencyData(),r=0;r<t.length;r++)e+=t[r];return e/t.length}}),Object.assign(Sc.prototype,{accumulate:function(e,t){var r=this.buffer,n=this.valueSize,i=e*n+n,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==n;++o)r[i+o]=r[o];a=t}else{var s=t/(a+=t);this._mixBufferRegion(r,i,0,s,n)}this.cumulativeWeight=a},apply:function(e){var t=this.valueSize,r=this.buffer,n=e*t+t,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,i<1){var o=3*t;this._mixBufferRegion(r,n,o,1-i,t)}for(var s=t,c=t+t;s!==c;++s)if(r[s]!==r[s+t]){a.setValue(r,n);break}},saveOriginalState:function(){var e=this.binding,t=this.buffer,r=this.valueSize,n=3*r;e.getValue(t,n);for(var i=r,a=n;i!==a;++i)t[i]=t[n+i%r];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,t,r,n,i){if(n>=.5)for(var a=0;a!==i;++a)e[t+a]=e[r+a]},_slerp:function(e,t,r,n){m.slerpFlat(e,t,e,t,e,r,n)},_lerp:function(e,t,r,n,i){for(var a=1-n,o=0;o!==i;++o){var s=t+o;e[s]=e[s]*a+e[r+o]*n}}});var Tc=new RegExp("[\\[\\]\\.:\\/]","g"),Ec="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Ac=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),Lc=/(WCOD+)?/.source.replace("WCOD",Ec),Rc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Pc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),Cc=new RegExp("^"+Ac+Lc+Rc+Pc+"$"),Oc=["material","materials","bones"];function Ic(e,t,r){var n=r||Dc.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,n)}function Dc(e,t,r){this.path=t,this.parsedPath=r||Dc.parseTrackName(t),this.node=Dc.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e}function Nc(){this.uuid=p.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var e={};this._indicesByUUID=e;for(var t=0,r=arguments.length;t!==r;++t)e[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var n=this;this.stats={objects:{get total(){return n._objects.length},get inUse(){return this.total-n.nCachedObjects_}},get bindingsPerObject(){return n._bindings.length}}}function Bc(e,t,r){this._mixer=e,this._clip=t,this._localRoot=r||null;for(var n=t.tracks,i=n.length,a=new Array(i),o={endingStart:2400,endingEnd:2400},s=0;s!==i;++s){var c=n[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function zc(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Fc(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e}function Uc(e,t,r){pi.call(this,e,t),this.meshPerAttribute=r||1}function Gc(e,t,r,n){this.ray=new Se(e,t),this.near=r||0,this.far=n||1/0,this.camera=null,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Hc(e,t){return e.distance-t.distance}function kc(e,t,r,n){if(!1!==e.visible&&(e.raycast(t,r),!0===n))for(var i=e.children,a=0,o=i.length;a<o;a++)kc(i[a],t,r,!0)}function jc(e,t,r){return this.radius=void 0!==e?e:1,this.phi=void 0!==t?t:0,this.theta=void 0!==r?r:0,this}function Vc(e,t,r){return this.radius=void 0!==e?e:1,this.theta=void 0!==t?t:0,this.y=void 0!==r?r:0,this}Object.assign(Ic.prototype,{getValue:function(e,t){this.bind();var r=this._targetGroup.nCachedObjects_,n=this._bindings[r];void 0!==n&&n.getValue(e,t)},setValue:function(e,t){for(var r=this._bindings,n=this._targetGroup.nCachedObjects_,i=r.length;n!==i;++n)r[n].setValue(e,t)},bind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].bind()},unbind:function(){for(var e=this._bindings,t=this._targetGroup.nCachedObjects_,r=e.length;t!==r;++t)e[t].unbind()}}),Object.assign(Dc,{Composite:Ic,create:function(e,t,r){return e&&e.isAnimationObjectGroup?new Dc.Composite(e,t,r):new Dc(e,t,r)},sanitizeNodeName:function(e){return e.replace(/\s/g,"_").replace(Tc,"")},parseTrackName:function(e){var t=Cc.exec(e);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+e);var r={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},n=r.nodeName&&r.nodeName.lastIndexOf(".");if(void 0!==n&&-1!==n){var i=r.nodeName.substring(n+1);-1!==Oc.indexOf(i)&&(r.nodeName=r.nodeName.substring(0,n),r.objectName=i)}if(null===r.propertyName||0===r.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return r},findNode:function(e,t){if(!t||""===t||"root"===t||"."===t||-1===t||t===e.name||t===e.uuid)return e;if(e.skeleton){var r=e.skeleton.getBoneByName(t);if(void 0!==r)return r}if(e.children){var n=function e(r){for(var n=0;n<r.length;n++){var i=r[n];if(i.name===t||i.uuid===t)return i;var a=e(i.children);if(a)return a}return null}(e.children);if(n)return n}return null}}),Object.assign(Dc.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,t){e[t]=this.node[this.propertyName]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)e[t++]=r[n]},function(e,t){e[t]=this.resolvedProperty[this.propertyIndex]},function(e,t){this.resolvedProperty.toArray(e,t)}],SetterByBindingTypeAndVersioning:[[function(e,t){this.targetObject[this.propertyName]=e[t]},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++]},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.needsUpdate=!0},function(e,t){for(var r=this.resolvedProperty,n=0,i=r.length;n!==i;++n)r[n]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty[this.propertyIndex]=e[t]},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,t){this.resolvedProperty.fromArray(e,t)},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0},function(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(e,t){this.bind(),this.getValue(e,t)},setValue:function(e,t){this.bind(),this.setValue(e,t)},bind:function(){var e=this.node,t=this.parsedPath,r=t.objectName,n=t.propertyName,i=t.propertyIndex;if(e||(e=Dc.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,e){if(r){var a=t.objectIndex;switch(r){case"materials":if(!e.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!e.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[r])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);e=e[r]}if(void 0!==a){if(void 0===e[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);e=e[a]}}var s=e[n];if(void 0!==s){var c=this.Versioning.None;this.targetObject=e,void 0!==e.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==e.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var l=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!e.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(e.geometry.isBufferGeometry){if(!e.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(e.geometry.morphAttributes.position[o].name===i){i=o;break}}else{if(!e.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===i){i=o;break}}}l=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(l=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(l=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][c]}else{var h=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+h+"."+n+" but it wasn't found.",e)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign(Dc.prototype,{_getValue_unbound:Dc.prototype.getValue,_setValue_unbound:Dc.prototype.setValue}),Object.assign(Nc.prototype,{isAnimationObjectGroup:!0,add:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,n=this._indicesByUUID,i=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,c=void 0,l=0,h=arguments.length;l!==h;++l){var u=arguments[l],d=u.uuid,p=n[d];if(void 0===p){p=t++,n[d]=p,e.push(u);for(var f=0,m=s;f!==m;++f)o[f].push(new Dc(u,i[f],a[f]))}else if(p<r){c=e[p];var v=--r,g=e[v];n[g.uuid]=p,e[p]=g,n[d]=v,e[v]=u;for(f=0,m=s;f!==m;++f){var y=o[f],x=y[v],b=y[p];y[p]=x,void 0===b&&(b=new Dc(u,i[f],a[f])),y[v]=b}}else e[p]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=r},remove:function(){for(var e=this._objects,t=this.nCachedObjects_,r=this._indicesByUUID,n=this._bindings,i=n.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],c=s.uuid,l=r[c];if(void 0!==l&&l>=t){var h=t++,u=e[h];r[u.uuid]=l,e[l]=u,r[c]=h,e[h]=s;for(var d=0,p=i;d!==p;++d){var f=n[d],m=f[h],v=f[l];f[l]=m,f[h]=v}}}this.nCachedObjects_=t},uncache:function(){for(var e=this._objects,t=e.length,r=this.nCachedObjects_,n=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],l=c.uuid,h=n[l];if(void 0!==h)if(delete n[l],h<r){var u=--r,d=e[u],p=e[y=--t];n[d.uuid]=h,e[h]=d,n[p.uuid]=u,e[u]=p,e.pop();for(var f=0,m=a;f!==m;++f){var v=(x=i[f])[u],g=x[y];x[h]=v,x[u]=g,x.pop()}}else{var y;n[(p=e[y=--t]).uuid]=h,e[h]=p,e.pop();for(f=0,m=a;f!==m;++f){var x;(x=i[f])[h]=x[y],x.pop()}}}this.nCachedObjects_=r},subscribe_:function(e,t){var r=this._bindingsIndicesByPath,n=r[e],i=this._bindings;if(void 0!==n)return i[n];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,h=new Array(c);n=i.length,r[e]=n,a.push(e),o.push(t),i.push(h);for(var u=l,d=s.length;u!==d;++u){var p=s[u];h[u]=new Dc(p,e,t)}return h},unsubscribe_:function(e){var t=this._bindingsIndicesByPath,r=t[e];if(void 0!==r){var n=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];t[e[o]]=r,a[r]=s,a.pop(),i[r]=i[o],i.pop(),n[r]=n[o],n.pop()}}}),Object.assign(Bc.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,t){return this.loop=e,this.repetitions=t,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,t,r){if(e.fadeOut(t),this.fadeIn(t),r){var n=this._clip.duration,i=e._clip.duration,a=i/n,o=n/i;e.warp(1,a,t),this.warp(o,1,t)}return this},crossFadeTo:function(e,t,r){return e.crossFadeFrom(this,t,r)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,t,r){var n=this._mixer,i=n.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+r,c[0]=e/o,c[1]=t/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,t,r,n){if(this.enabled){var i=this._startTime;if(null!==i){var a=(e-i)*r;if(a<0||0===r)return;this._startTime=null,t=r*a}t*=this._updateTimeScale(e);var o=this._updateTime(t),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,h=0,u=c.length;h!==u;++h)c[h].evaluate(o),l[h].accumulate(n,s)}else this._updateWeight(e)},_updateWeight:function(e){var t=0;if(this.enabled){t=this.weight;var r=this._weightInterpolant;if(null!==r){var n=r.evaluate(e)[0];t*=n,e>r.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t},_updateTimeScale:function(e){var t=0;if(!this.paused){t=this.timeScale;var r=this._timeScaleInterpolant;if(null!==r)t*=r.evaluate(e)[0],e>r.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}return this._effectiveTimeScale=t,t},_updateTime:function(e){var t=this.time+e,r=this._clip.duration,n=this.loop,i=this._loopCount,a=2202===n;if(0===e)return-1===i?t:a&&1==(1&i)?r-t:t;if(2200===n){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(t>=r)t=r;else{if(!(t<0)){this.time=t;break e}t=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),t>=r||t<0){var o=Math.floor(t/r);t-=r*o,i+=Math.abs(o);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,t=e>0?r:0,this.time=t,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(1===s){var c=e<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=t,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=t;if(a&&1==(1&i))return r-t}return t},_setEndings:function(e,t,r){var n=this._interpolantSettings;r?(n.endingStart=2401,n.endingEnd=2401):(n.endingStart=e?this.zeroSlopeAtStart?2401:2400:2402,n.endingEnd=t?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(e,t,r){var n=this._mixer,i=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=t,o[1]=i+e,s[1]=r,this}}),zc.prototype=Object.assign(Object.create(h.prototype),{constructor:zc,_bindAction:function(e,t){var r=e._localRoot||this._root,n=e._clip.tracks,i=n.length,a=e._propertyBindings,o=e._interpolants,s=r.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var h=0;h!==i;++h){var u=n[h],d=u.name,p=l[d];if(void 0!==p)a[h]=p;else{if(void 0!==(p=a[h])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=t&&t._propertyBindings[h].binding.parsedPath;++(p=new Sc(Dc.create(r,d,f),u.ValueTypeName,u.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),a[h]=p}o[h].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var t=(e._localRoot||this._root).uuid,r=e._clip.uuid,n=this._actionsByClip[r];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,r,t)}for(var i=e._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var t=e._cacheIndex;return null!==t&&t<this._nActiveActions},_addInactiveAction:function(e,t,r){var n=this._actions,i=this._actionsByClip,a=i[t];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[t]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=n.length,n.push(e),a.actionByRoot[r]=e},_removeInactiveAction:function(e){var t=this._actions,r=t[t.length-1],n=e._cacheIndex;r._cacheIndex=n,t[n]=r,t.pop(),e._cacheIndex=null;var i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null,delete o.actionByRoot[(e._localRoot||this._root).uuid],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var t=e._propertyBindings,r=0,n=t.length;r!==n;++r){var i=t[r];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var t=this._actions,r=e._cacheIndex,n=this._nActiveActions++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackAction:function(e){var t=this._actions,r=e._cacheIndex,n=--this._nActiveActions,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_addInactiveBinding:function(e,t,r){var n=this._bindingsByRootAndName,i=n[t],a=this._bindings;void 0===i&&(i={},n[t]=i),i[r]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var t=this._bindings,r=e.binding,n=r.rootNode.uuid,i=r.path,a=this._bindingsByRootAndName,o=a[n],s=t[t.length-1],c=e._cacheIndex;s._cacheIndex=c,t[c]=s,t.pop(),delete o[i],0===Object.keys(o).length&&delete a[n]},_lendBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=this._nActiveBindings++,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_takeBackBinding:function(e){var t=this._bindings,r=e._cacheIndex,n=--this._nActiveBindings,i=t[n];e._cacheIndex=n,t[n]=e,i._cacheIndex=r,t[r]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,t=this._nActiveControlInterpolants++,r=e[t];return void 0===r&&((r=new No(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=t,e[t]=r),r},_takeBackControlInterpolant:function(e){var t=this._controlInterpolants,r=e.__cacheIndex,n=--this._nActiveControlInterpolants,i=t[n];e.__cacheIndex=n,t[n]=e,i.__cacheIndex=r,t[r]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?Wo.findByName(r,e):e,a=null!==i?i.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[n];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var l=new Bc(this,i,t);return this._bindAction(l,s),this._addInactiveAction(l,a,n),l},existingAction:function(e,t){var r=t||this._root,n=r.uuid,i="string"==typeof e?Wo.findByName(r,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[n]||null},stopAllAction:function(){var e=this._actions,t=this._nActiveActions,r=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==t;++i)e[i].reset();for(i=0;i!==n;++i)r[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var t=this._actions,r=this._nActiveActions,n=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1,o=0;o!==r;++o){t[o]._update(n,e,i,a)}var s=this._bindings,c=this._nActiveBindings;for(o=0;o!==c;++o)s[o].apply(a);return this},setTime:function(e){this.time=0;for(var t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)},getRoot:function(){return this._root},uncacheClip:function(e){var t=this._actions,r=e.uuid,n=this._actionsByClip,i=n[r];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,h=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=l,t[l]=h,t.pop(),this._removeInactiveBindingsForAction(c)}delete n[r]}},uncacheRoot:function(e){var t=e.uuid,r=this._actionsByClip;for(var n in r){var i=r[n].actionByRoot[t];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var a=this._bindingsByRootAndName[t];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(e,t){var r=this.existingAction(e,t);null!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}}),Fc.prototype.clone=function(){return new Fc(void 0===this.value.clone?this.value:this.value.clone())},Uc.prototype=Object.assign(Object.create(pi.prototype),{constructor:Uc,isInstancedInterleavedBuffer:!0,copy:function(e){return pi.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this}}),Object.assign(Gc.prototype,{linePrecision:1,set:function(e,t){this.ray.set(e,t)},setFromCamera:function(e,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,t,r){var n=r||[];return kc(e,this,n,t),n.sort(Hc),n},intersectObjects:function(e,t,r){var n=r||[];if(!1===Array.isArray(e))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),n;for(var i=0,a=e.length;i<a;i++)kc(e[i],this,n,t);return n.sort(Hc),n}}),Object.assign(jc.prototype,{set:function(e,t,r){return this.radius=e,this.phi=t,this.theta=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,r){return this.radius=Math.sqrt(e*e+t*t+r*r),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,r),this.phi=Math.acos(p.clamp(t/this.radius,-1,1))),this}}),Object.assign(Vc.prototype,{set:function(e,t,r){return this.radius=e,this.theta=t,this.y=r,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this},setFromVector3:function(e){return this.setFromCartesianCoords(e.x,e.y,e.z)},setFromCartesianCoords:function(e,t,r){return this.radius=Math.sqrt(e*e+r*r),this.theta=Math.atan2(e,r),this.y=t,this}});var Wc=new f;function qc(e,t){this.min=void 0!==e?e:new f(1/0,1/0),this.max=void 0!==t?t:new f(-1/0,-1/0)}Object.assign(qc.prototype,{set:function(e,t){return this.min.copy(e),this.max.copy(t),this},setFromPoints:function(e){this.makeEmpty();for(var t=0,r=e.length;t<r;t++)this.expandByPoint(e[t]);return this},setFromCenterAndSize:function(e,t){var r=Wc.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(r),this.max.copy(e).add(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(e){return void 0===e&&(console.warn("THREE.Box2: .getCenter() target is now required"),e=new f),this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(e){return void 0===e&&(console.warn("THREE.Box2: .getSize() target is now required"),e=new f),this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .getParameter() target is now required"),t=new f),t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,t){return void 0===t&&(console.warn("THREE.Box2: .clampPoint() target is now required"),t=new f),t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(e){return Wc.copy(e).clamp(this.min,this.max).sub(e).length()},intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}});var Xc=new y,Yc=new y;function Zc(e,t){this.start=void 0!==e?e:new y,this.end=void 0!==t?t:new y}function Jc(e){$.call(this),this.material=e,this.render=function(){}}Object.assign(Zc.prototype,{set:function(e,t){return this.start.copy(e),this.end.copy(t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},getCenter:function(e){return void 0===e&&(console.warn("THREE.Line3: .getCenter() target is now required"),e=new y),e.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){return void 0===e&&(console.warn("THREE.Line3: .delta() target is now required"),e=new y),e.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){return void 0===t&&(console.warn("THREE.Line3: .at() target is now required"),t=new y),this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(e,t){Xc.subVectors(e,this.start),Yc.subVectors(this.end,this.start);var r=Yc.dot(Yc),n=Yc.dot(Xc)/r;return t&&(n=p.clamp(n,0,1)),n},closestPointToPoint:function(e,t,r){var n=this.closestPointToPointParameter(e,t);return void 0===r&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),r=new y),this.delta(r).multiplyScalar(n).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}}),Jc.prototype=Object.create($.prototype),Jc.prototype.constructor=Jc,Jc.prototype.isImmediateRenderObject=!0;var Kc=new y,Qc=new y,$c=new w,el=["a","b","c"];function tl(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16711680,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=3*s.faces.length:s&&s.isBufferGeometry&&(o=s.attributes.normal.count);var c=new dt,l=new tt(2*o*3,3);c.addAttribute("position",l),Yi.call(this,c,new Ui({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}tl.prototype=Object.create(Yi.prototype),tl.prototype.constructor=tl,tl.prototype.update=function(){this.object.updateMatrixWorld(!0),$c.getNormalMatrix(this.object.matrixWorld);var e=this.object.matrixWorld,t=this.geometry.attributes.position,r=this.object.geometry;if(r&&r.isGeometry)for(var n=r.vertices,i=r.faces,a=0,o=0,s=i.length;o<s;o++)for(var c=i[o],l=0,h=c.vertexNormals.length;l<h;l++){var u=n[c[el[l]]],d=c.vertexNormals[l];Kc.copy(u).applyMatrix4(e),Qc.copy(d).applyMatrix3($c).normalize().multiplyScalar(this.size).add(Kc),t.setXYZ(a,Kc.x,Kc.y,Kc.z),a+=1,t.setXYZ(a,Qc.x,Qc.y,Qc.z),a+=1}else if(r&&r.isBufferGeometry){var p=r.attributes.position,f=r.attributes.normal;for(a=0,l=0,h=p.count;l<h;l++)Kc.set(p.getX(l),p.getY(l),p.getZ(l)).applyMatrix4(e),Qc.set(f.getX(l),f.getY(l),f.getZ(l)),Qc.applyMatrix3($c).normalize().multiplyScalar(this.size).add(Kc),t.setXYZ(a,Kc.x,Kc.y,Kc.z),a+=1,t.setXYZ(a,Qc.x,Qc.y,Qc.z),a+=1}t.needsUpdate=!0};var rl=new y;function nl(e,t){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t;for(var r=new dt,n=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,a=1;i<32;i++,a++){var o=i/32*Math.PI*2,s=a/32*Math.PI*2;n.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}r.addAttribute("position",new tt(n,3));var c=new Ui({fog:!1});this.cone=new Yi(r,c),this.add(this.cone),this.update()}nl.prototype=Object.create($.prototype),nl.prototype.constructor=nl,nl.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},nl.prototype.update=function(){this.light.updateMatrixWorld();var e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),rl.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(rl),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var il=new y,al=new N,ol=new N;function sl(e){for(var t=function e(t){var r=[];t&&t.isBone&&r.push(t);for(var n=0;n<t.children.length;n++)r.push.apply(r,e(t.children[n]));return r}(e),r=new dt,n=[],i=[],a=new Ue(0,0,1),o=new Ue(0,1,0),s=0;s<t.length;s++){var c=t[s];c.parent&&c.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),i.push(a.r,a.g,a.b),i.push(o.r,o.g,o.b))}r.addAttribute("position",new tt(n,3)),r.addAttribute("color",new tt(i,3));var l=new Ui({vertexColors:2,depthTest:!1,depthWrite:!1,transparent:!0});Yi.call(this,r,l),this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}function cl(e,t,r){this.light=e,this.light.updateMatrixWorld(),this.color=r;var n=new io(t,4,2),i=new qe({wireframe:!0,fog:!1});Pt.call(this,n,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}function ll(e,t){this.type="RectAreaLightHelper",this.light=e,this.color=t;var r=new dt;r.addAttribute("position",new tt([1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),r.computeBoundingSphere();var n=new Ui({fog:!1});Wi.call(this,r,n);var i=new dt;i.addAttribute("position",new tt([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),i.computeBoundingSphere(),this.add(new Pt(i,new qe({side:1,fog:!1}))),this.update()}sl.prototype=Object.create(Yi.prototype),sl.prototype.constructor=sl,sl.prototype.updateMatrixWorld=function(e){var t=this.bones,r=this.geometry,n=r.getAttribute("position");ol.getInverse(this.root.matrixWorld);for(var i=0,a=0;i<t.length;i++){var o=t[i];o.parent&&o.parent.isBone&&(al.multiplyMatrices(ol,o.matrixWorld),il.setFromMatrixPosition(al),n.setXYZ(a,il.x,il.y,il.z),al.multiplyMatrices(ol,o.parent.matrixWorld),il.setFromMatrixPosition(al),n.setXYZ(a+1,il.x,il.y,il.z),a+=2)}r.getAttribute("position").needsUpdate=!0,$.prototype.updateMatrixWorld.call(this,e)},cl.prototype=Object.create(Pt.prototype),cl.prototype.constructor=cl,cl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},cl.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)},ll.prototype=Object.create(Wi.prototype),ll.prototype.constructor=ll,ll.prototype.update=function(){if(this.scale.set(.5*this.light.width,.5*this.light.height,1),void 0!==this.color)this.material.color.set(this.color),this.children[0].material.color.set(this.color);else{this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);var e=this.material.color,t=Math.max(e.r,e.g,e.b);t>1&&e.multiplyScalar(1/t),this.children[0].material.color.copy(this.material.color)}},ll.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()};var hl=new y,ul=new Ue,dl=new Ue;function pl(e,t,r){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r;var n=new ma(t);n.rotateY(.5*Math.PI),this.material=new qe({wireframe:!0,fog:!1}),void 0===this.color&&(this.material.vertexColors=2);var i=n.getAttribute("position"),a=new Float32Array(3*i.count);n.addAttribute("color",new Xe(a,3)),this.add(new Pt(n,this.material)),this.update()}function fl(e,t){this.lightProbe=e,this.size=t;var r={GAMMA_OUTPUT:""},n=new jt({defines:r,uniforms:{sh:{value:this.lightProbe.sh.coefficients},intensity:{value:this.lightProbe.intensity}},vertexShader:["varying vec3 vNormal;","void main() {","\tvNormal = normalize( normalMatrix * normal );","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#define RECIPROCAL_PI 0.318309886","vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {","\t// matrix is assumed to be orthogonal","\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );","}","vec3 linearToOutput( in vec3 a ) {","\t#ifdef GAMMA_OUTPUT","\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );","\t#else","\t\treturn a;","\t#endif","}","// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf","vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {","\t// normal is assumed to have unit length","\tfloat x = normal.x, y = normal.y, z = normal.z;","\t// band 0","\tvec3 result = shCoefficients[ 0 ] * 0.886227;","\t// band 1","\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;","\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;","\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;","\t// band 2","\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;","\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;","\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );","\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;","\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );","\treturn result;","}","uniform vec3 sh[ 9 ]; // sh coefficients","uniform float intensity; // light probe intensity","varying vec3 vNormal;","void main() {","\tvec3 normal = normalize( vNormal );","\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );","\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );","\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;","\toutgoingLight = linearToOutput( outgoingLight );","\tgl_FragColor = vec4( outgoingLight, 1.0 );","}"].join("\n")}),i=new io(1,32,16);Pt.call(this,i,n),this.onBeforeRender()}function ml(e,t,r,n){e=e||10,t=t||10,r=new Ue(void 0!==r?r:4473924),n=new Ue(void 0!==n?n:8947848);for(var i=t/2,a=e/t,o=e/2,s=[],c=[],l=0,h=0,u=-o;l<=t;l++,u+=a){s.push(-o,0,u,o,0,u),s.push(u,0,-o,u,0,o);var d=l===i?r:n;d.toArray(c,h),h+=3,d.toArray(c,h),h+=3,d.toArray(c,h),h+=3,d.toArray(c,h),h+=3}var p=new dt;p.addAttribute("position",new tt(s,3)),p.addAttribute("color",new tt(c,3));var f=new Ui({vertexColors:2});Yi.call(this,p,f)}function vl(e,t,r,n,i,a){e=e||10,t=t||16,r=r||8,n=n||64,i=new Ue(void 0!==i?i:4473924),a=new Ue(void 0!==a?a:8947848);var o,s,c,l,h,u,d,p=[],f=[];for(l=0;l<=t;l++)c=l/t*(2*Math.PI),o=Math.sin(c)*e,s=Math.cos(c)*e,p.push(0,0,0),p.push(o,0,s),d=1&l?i:a,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(l=0;l<=r;l++)for(d=1&l?i:a,u=e-e/r*l,h=0;h<n;h++)c=h/n*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,p.push(o,0,s),f.push(d.r,d.g,d.b),c=(h+1)/n*(2*Math.PI),o=Math.sin(c)*u,s=Math.cos(c)*u,p.push(o,0,s),f.push(d.r,d.g,d.b);var m=new dt;m.addAttribute("position",new tt(p,3)),m.addAttribute("color",new tt(f,3));var v=new Ui({vertexColors:2});Yi.call(this,m,v)}function gl(e,t,r,n){this.audio=e,this.range=t||1,this.divisionsInnerAngle=r||16,this.divisionsOuterAngle=n||2;var i=new dt,a=this.divisionsInnerAngle+2*this.divisionsOuterAngle,o=new Float32Array(3*(3*a+3));i.addAttribute("position",new Xe(o,3));var s=new Ui({color:65280}),c=new Ui({color:16776960});Wi.call(this,i,[c,s]),this.update()}pl.prototype=Object.create($.prototype),pl.prototype.constructor=pl,pl.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},pl.prototype.update=function(){var e=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var t=e.geometry.getAttribute("color");ul.copy(this.light.color),dl.copy(this.light.groundColor);for(var r=0,n=t.count;r<n;r++){var i=r<n/2?ul:dl;t.setXYZ(r,i.r,i.g,i.b)}t.needsUpdate=!0}e.lookAt(hl.setFromMatrixPosition(this.light.matrixWorld).negate())},fl.prototype=Object.create(Pt.prototype),fl.prototype.constructor=fl,fl.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},fl.prototype.onBeforeRender=function(){this.position.copy(this.lightProbe.position),this.scale.set(1,1,1).multiplyScalar(this.size),this.material.uniforms.intensity.value=this.lightProbe.intensity},ml.prototype=Object.assign(Object.create(Yi.prototype),{constructor:ml,copy:function(e){return Yi.prototype.copy.call(this,e),this.geometry.copy(e.geometry),this.material.copy(e.material),this},clone:function(){return(new this.constructor).copy(this)}}),vl.prototype=Object.create(Yi.prototype),vl.prototype.constructor=vl,gl.prototype=Object.create(Wi.prototype),gl.prototype.constructor=gl,gl.prototype.update=function(){var e,t,r=this.audio,n=this.range,i=this.divisionsInnerAngle,a=this.divisionsOuterAngle,o=p.degToRad(r.panner.coneInnerAngle),s=p.degToRad(r.panner.coneOuterAngle),c=o/2,l=s/2,h=0,u=0,d=this.geometry,f=d.attributes.position;function m(r,i,a,o){var s=(i-r)/a;for(f.setXYZ(h,0,0,0),u++,e=r;e<i;e+=s)t=h+u,f.setXYZ(t,Math.sin(e)*n,0,Math.cos(e)*n),f.setXYZ(t+1,Math.sin(Math.min(e+s,i))*n,0,Math.cos(Math.min(e+s,i))*n),f.setXYZ(t+2,0,0,0),u+=3;d.addGroup(h,u,o),h+=u,u=0}d.clearGroups(),m(-l,-c,a,0),m(-c,c,i,1),m(c,l,a,0),f.needsUpdate=!0,o===s&&(this.material[0].visible=!1)},gl.prototype.dispose=function(){this.geometry.dispose(),this.material[0].dispose(),this.material[1].dispose()};var yl=new y,xl=new y,bl=new w;function wl(e,t,r,n){this.object=e,this.size=void 0!==t?t:1;var i=void 0!==r?r:16776960,a=void 0!==n?n:1,o=0,s=this.object.geometry;s&&s.isGeometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new dt,l=new tt(2*o*3,3);c.addAttribute("position",l),Yi.call(this,c,new Ui({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()}wl.prototype=Object.create(Yi.prototype),wl.prototype.constructor=wl,wl.prototype.update=function(){this.object.updateMatrixWorld(!0),bl.getNormalMatrix(this.object.matrixWorld);for(var e=this.object.matrixWorld,t=this.geometry.attributes.position,r=this.object.geometry,n=r.vertices,i=r.faces,a=0,o=0,s=i.length;o<s;o++){var c=i[o],l=c.normal;yl.copy(n[c.a]).add(n[c.b]).add(n[c.c]).divideScalar(3).applyMatrix4(e),xl.copy(l).applyMatrix3(bl).normalize().multiplyScalar(this.size).add(yl),t.setXYZ(a,yl.x,yl.y,yl.z),a+=1,t.setXYZ(a,xl.x,xl.y,xl.z),a+=1}t.needsUpdate=!0};var _l=new y,Ml=new y,Sl=new y;function Tl(e,t,r){$.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=r,void 0===t&&(t=1);var n=new dt;n.addAttribute("position",new tt([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));var i=new Ui({fog:!1});this.lightPlane=new Wi(n,i),this.add(this.lightPlane),(n=new dt).addAttribute("position",new tt([0,0,0,0,0,1],3)),this.targetLine=new Wi(n,i),this.add(this.targetLine),this.update()}Tl.prototype=Object.create($.prototype),Tl.prototype.constructor=Tl,Tl.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Tl.prototype.update=function(){_l.setFromMatrixPosition(this.light.matrixWorld),Ml.setFromMatrixPosition(this.light.target.matrixWorld),Sl.subVectors(Ml,_l),this.lightPlane.lookAt(Ml),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Ml),this.targetLine.scale.z=Sl.length()};var El=new y,Al=new Vt;function Ll(e){var t=new dt,r=new Ui({color:16777215,vertexColors:1}),n=[],i=[],a={},o=new Ue(16755200),s=new Ue(16711680),c=new Ue(43775),l=new Ue(16777215),h=new Ue(3355443);function u(e,t,r){d(e,r),d(t,r)}function d(e,t){n.push(0,0,0),i.push(t.r,t.g,t.b),void 0===a[e]&&(a[e]=[]),a[e].push(n.length/3-1)}u("n1","n2",o),u("n2","n4",o),u("n4","n3",o),u("n3","n1",o),u("f1","f2",o),u("f2","f4",o),u("f4","f3",o),u("f3","f1",o),u("n1","f1",o),u("n2","f2",o),u("n3","f3",o),u("n4","f4",o),u("p","n1",s),u("p","n2",s),u("p","n3",s),u("p","n4",s),u("u1","u2",c),u("u2","u3",c),u("u3","u1",c),u("c","t",l),u("p","c",h),u("cn1","cn2",h),u("cn3","cn4",h),u("cf1","cf2",h),u("cf3","cf4",h),t.addAttribute("position",new tt(n,3)),t.addAttribute("color",new tt(i,3)),Yi.call(this,t,r),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function Rl(e,t,r,n,i,a,o){El.set(i,a,o).unproject(n);var s=t[e];if(void 0!==s)for(var c=r.getAttribute("position"),l=0,h=s.length;l<h;l++)c.setXYZ(s[l],El.x,El.y,El.z)}Ll.prototype=Object.create(Yi.prototype),Ll.prototype.constructor=Ll,Ll.prototype.update=function(){var e=this.geometry,t=this.pointMap;Al.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Rl("c",t,e,Al,0,0,-1),Rl("t",t,e,Al,0,0,1),Rl("n1",t,e,Al,-1,-1,-1),Rl("n2",t,e,Al,1,-1,-1),Rl("n3",t,e,Al,-1,1,-1),Rl("n4",t,e,Al,1,1,-1),Rl("f1",t,e,Al,-1,-1,1),Rl("f2",t,e,Al,1,-1,1),Rl("f3",t,e,Al,-1,1,1),Rl("f4",t,e,Al,1,1,1),Rl("u1",t,e,Al,.7,1.1,-1),Rl("u2",t,e,Al,-.7,1.1,-1),Rl("u3",t,e,Al,0,2,-1),Rl("cf1",t,e,Al,-1,0,1),Rl("cf2",t,e,Al,1,0,1),Rl("cf3",t,e,Al,0,-1,1),Rl("cf4",t,e,Al,0,1,1),Rl("cn1",t,e,Al,-1,0,-1),Rl("cn2",t,e,Al,1,0,-1),Rl("cn3",t,e,Al,0,-1,-1),Rl("cn4",t,e,Al,0,1,-1),e.getAttribute("position").needsUpdate=!0};var Pl=new pe;function Cl(e,t){this.object=e,void 0===t&&(t=16776960);var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),i=new dt;i.setIndex(new Xe(r,1)),i.addAttribute("position",new Xe(n,3)),Yi.call(this,i,new Ui({color:t})),this.matrixAutoUpdate=!1,this.update()}function Ol(e,t){this.type="Box3Helper",this.box=e,t=t||16776960;var r=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new dt;n.setIndex(new Xe(r,1)),n.addAttribute("position",new tt([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),Yi.call(this,n,new Ui({color:t})),this.geometry.computeBoundingSphere()}function Il(e,t,r){this.type="PlaneHelper",this.plane=e,this.size=void 0===t?1:t;var n=void 0!==r?r:16776960,i=new dt;i.addAttribute("position",new tt([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),Wi.call(this,i,new Ui({color:n}));var a=new dt;a.addAttribute("position",new tt([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new Pt(a,new qe({color:n,opacity:.2,transparent:!0,depthWrite:!1})))}Cl.prototype=Object.create(Yi.prototype),Cl.prototype.constructor=Cl,Cl.prototype.update=function(e){if(void 0!==e&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Pl.setFromObject(this.object),!Pl.isEmpty()){var t=Pl.min,r=Pl.max,n=this.geometry.attributes.position,i=n.array;i[0]=r.x,i[1]=r.y,i[2]=r.z,i[3]=t.x,i[4]=r.y,i[5]=r.z,i[6]=t.x,i[7]=t.y,i[8]=r.z,i[9]=r.x,i[10]=t.y,i[11]=r.z,i[12]=r.x,i[13]=r.y,i[14]=t.z,i[15]=t.x,i[16]=r.y,i[17]=t.z,i[18]=t.x,i[19]=t.y,i[20]=t.z,i[21]=r.x,i[22]=t.y,i[23]=t.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Cl.prototype.setFromObject=function(e){return this.object=e,this.update(),this},Cl.prototype.copy=function(e){return Yi.prototype.copy.call(this,e),this.object=e.object,this},Cl.prototype.clone=function(){return(new this.constructor).copy(this)},Ol.prototype=Object.create(Yi.prototype),Ol.prototype.constructor=Ol,Ol.prototype.updateMatrixWorld=function(e){var t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),$.prototype.updateMatrixWorld.call(this,e))},Il.prototype=Object.create(Wi.prototype),Il.prototype.constructor=Il,Il.prototype.updateMatrixWorld=function(e){var t=-this.plane.constant;Math.abs(t)<1e-8&&(t=1e-8),this.scale.set(.5*this.size,.5*this.size,t),this.children[0].material.side=t<0?1:0,this.lookAt(this.plane.normal),$.prototype.updateMatrixWorld.call(this,e)};var Dl,Nl,Bl=new y;function zl(e,t,r,n,i,a){$.call(this),void 0===e&&(e=new y(0,0,1)),void 0===t&&(t=new y(0,0,0)),void 0===r&&(r=1),void 0===n&&(n=16776960),void 0===i&&(i=.2*r),void 0===a&&(a=.2*i),void 0===Dl&&((Dl=new dt).addAttribute("position",new tt([0,0,0,0,1,0],3)),(Nl=new mo(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(t),this.line=new Wi(Dl,new Ui({color:n})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Pt(Nl,new qe({color:n})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(r,i,a)}function Fl(e){var t=[0,0,0,e=e||1,0,0,0,0,0,0,e,0,0,0,0,0,0,e],r=new dt;r.addAttribute("position",new tt(t,3)),r.addAttribute("color",new tt([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var n=new Ui({vertexColors:2});Yi.call(this,r,n)}zl.prototype=Object.create($.prototype),zl.prototype.constructor=zl,zl.prototype.setDirection=function(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Bl.set(e.z,0,-e.x).normalize();var t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Bl,t)}},zl.prototype.setLength=function(e,t,r){void 0===t&&(t=.2*e),void 0===r&&(r=.2*t),this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(r,t,r),this.cone.position.y=e,this.cone.updateMatrix()},zl.prototype.setColor=function(e){this.line.material.color.set(e),this.cone.material.color.set(e)},zl.prototype.copy=function(e){return $.prototype.copy.call(this,e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this},zl.prototype.clone=function(){return(new this.constructor).copy(this)},Fl.prototype=Object.create(Yi.prototype),Fl.prototype.constructor=Fl;function Ul(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom",this.closed=!0}function Gl(e){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom"}function Hl(e){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),ps.call(this,e),this.type="catmullrom"}as.create=function(e,t){return console.log("THREE.Curve.create() has been deprecated"),e.prototype=Object.create(as.prototype),e.prototype.constructor=e,e.prototype.getPoint=t,e},Object.assign(Ts.prototype,{createPointsGeometry:function(e){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getPoints(e);return this.createGeometry(t)},createSpacedPointsGeometry:function(e){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var t=this.getSpacedPoints(e);return this.createGeometry(t)},createGeometry:function(e){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var t=new zt,r=0,n=e.length;r<n;r++){var i=e[r];t.vertices.push(new y(i.x,i.y,i.z||0))}return t}}),Object.assign(Es.prototype,{fromPoints:function(e){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(e)}}),Ul.prototype=Object.create(ps.prototype),Gl.prototype=Object.create(ps.prototype),Hl.prototype=Object.create(ps.prototype),Object.assign(Hl.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),ml.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},sl.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Jo.prototype,{extractUrlBase:function(e){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Hs.extractUrlBase(e)}}),Jo.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(qs.prototype,{setTexturePath:function(e){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(e)}}),Object.assign(qc.prototype,{center:function(e){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},size:function(e){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(e)}}),Object.assign(pe.prototype,{center:function(e){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(e)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)},size:function(e){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(e)}}),Zc.prototype.center=function(e){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(e)},Object.assign(p,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(e){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),p.floorPowerOfTwo(e)},nextPowerOfTwo:function(e){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),p.ceilPowerOfTwo(e)}}),Object.assign(w.prototype,{flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(N.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},flattenToArrayOffset:function(e,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(e,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new y).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(e){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(e)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(e,t,r,n,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(e,t,n,r,i,a)}}),Qt.prototype.isIntersectionLine=function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)},m.prototype.multiplyVector3=function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},Object.assign(Se.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(Ne.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(e,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(e,t)},midpoint:function(e){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(e)},normal:function(e){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(e)},plane:function(e){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(e)}}),Object.assign(Ne,{barycoordFromPoint:function(e,t,r,n,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Ne.getBarycoord(e,t,r,n,i)},normal:function(e,t,r,n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Ne.getNormal(e,t,r,n)}}),Object.assign(As.prototype,{extractAllPoints:function(e){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(e)},extrude:function(e){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Ka(this,e)},makeGeometry:function(e){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new lo(this,e)}}),Object.assign(f.prototype,{fromAttribute:function(e,t,r){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(y.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,e)},applyProjection:function(e){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(e)},fromAttribute:function(e,t,r){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},distanceToManhattan:function(e){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(e)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(T.prototype,{fromAttribute:function(e,t,r){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(e,t,r)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(zt.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}}),Object.assign($.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,e)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")}}),Object.defineProperties($.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(Oi.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Bi.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Ii.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(as.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(e){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=e}}),Wt.prototype.setLens=function(e,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==t&&(this.filmGauge=t),this.setFocalLength(e)},Object.defineProperties(Ls.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(Xe.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}}}),Object.assign(Xe.prototype,{copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(e){return console.warn("THREE.BufferAttribute: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers"),this.count=void 0!==e?e.length/this.itemSize:0,this.array=e,this}}),Object.assign(dt.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,t,r){void 0!==r&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(dt.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.assign(pi.prototype,{setArray:function(e){return console.warn("THREE.InterleavedBuffer: .setArray has been deprecated. Use BufferGeometry .setAttribute to replace/resize attribute buffers"),this.count=void 0!==e?e.length/this.stride:0,this.array=e,this}}),Object.assign(Qa.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(Fc.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(We.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Ue}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===e}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(e){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=e}}}),Object.defineProperties(To.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(jt.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),Object.assign(hi.prototype,{clearTarget:function(e,t,r,n){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(e),this.clear(t,r,n)},animate:function(e){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(e)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(hi.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}}}),Object.defineProperties(Jn.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(Xt.prototype,{activeCubeFace:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().")}},activeMipMapLevel:{set:function(){console.warn("THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().")}}}),Object.defineProperties(E.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.defineProperties(ci.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}},userHeight:{set:function(){console.warn("THREE.WebVRManager: .userHeight has been removed.")}}}),gc.prototype.load=function(e){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var t=this;return(new nc).load(e,(function(e){t.setBuffer(e)})),this},Mc.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},qt.prototype.updateCubeMap=function(e,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(e,t)};var kl={merge:function(e,t,r){var n;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),t.isMesh&&(t.matrixAutoUpdate&&t.updateMatrix(),n=t.matrix,t=t.geometry),e.merge(t,n,r)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}};_.crossOrigin=void 0,_.loadTexture=function(e,t,r,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new is;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},_.loadTextureCube=function(e,t,r,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new ns;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,r,void 0,n);return t&&(a.mapping=t),a},_.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},_.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var jl={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js")}};"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"109"}})),l.ACESFilmicToneMapping=5,l.AddEquation=100,l.AddOperation=2,l.AdditiveBlending=2,l.AlphaFormat=1021,l.AlwaysDepth=1,l.AlwaysStencilFunc=519,l.AmbientLight=Fs,l.AmbientLightProbe=sc,l.AnimationClip=Wo,l.AnimationLoader=$o,l.AnimationMixer=zc,l.AnimationObjectGroup=Nc,l.AnimationUtils=Oo,l.ArcCurve=ss,l.ArrayCamera=ni,l.ArrowHelper=zl,l.Audio=gc,l.AudioAnalyser=Mc,l.AudioContext=rc,l.AudioListener=vc,l.AudioLoader=nc,l.AxesHelper=Fl,l.AxisHelper=function(e){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Fl(e)},l.BackSide=1,l.BasicDepthPacking=3200,l.BasicShadowMap=0,l.BinaryTextureLoader=function(e){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new ts(e)},l.Bone=zi,l.BooleanKeyframeTrack=Fo,l.BoundingBoxHelper=function(e,t){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Cl(e,t)},l.Box2=qc,l.Box3=pe,l.Box3Helper=Ol,l.BoxBufferGeometry=Ut,l.BoxGeometry=Ft,l.BoxHelper=Cl,l.BufferAttribute=Xe,l.BufferGeometry=dt,l.BufferGeometryLoader=Vs,l.ByteType=1010,l.Cache=Xo,l.Camera=Vt,l.CameraHelper=Ll,l.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been removed")},l.CanvasTexture=aa,l.CatmullRomCurve3=ps,l.CineonToneMapping=4,l.CircleBufferGeometry=xo,l.CircleGeometry=yo,l.ClampToEdgeWrapping=1001,l.Clock=uc,l.ClosedSplineCurve3=Ul,l.Color=Ue,l.ColorKeyframeTrack=Uo,l.CompressedTexture=ia,l.CompressedTextureLoader=es,l.ConeBufferGeometry=go,l.ConeGeometry=vo,l.CubeCamera=qt,l.CubeGeometry=Ft,l.CubeReflectionMapping=301,l.CubeRefractionMapping=302,l.CubeTexture=br,l.CubeTextureLoader=ns,l.CubeUVReflectionMapping=306,l.CubeUVRefractionMapping=307,l.CubicBezierCurve=gs,l.CubicBezierCurve3=ys,l.CubicInterpolant=Do,l.CullFaceBack=1,l.CullFaceFront=2,l.CullFaceFrontBack=3,l.CullFaceNone=0,l.Curve=as,l.CurvePath=Ts,l.CustomBlending=5,l.CylinderBufferGeometry=mo,l.CylinderGeometry=fo,l.Cylindrical=Vc,l.DataTexture=Yt,l.DataTexture2DArray=wr,l.DataTexture3D=_r,l.DataTextureLoader=ts,l.DecrementStencilOp=7683,l.DecrementWrapStencilOp=34056,l.DefaultLoadingManager=Zo,l.DepthFormat=1026,l.DepthStencilFormat=1027,l.DepthTexture=oa,l.DirectionalLight=zs,l.DirectionalLightHelper=Tl,l.DirectionalLightShadow=Bs,l.DiscreteInterpolant=Bo,l.DodecahedronBufferGeometry=xa,l.DodecahedronGeometry=ya,l.DoubleSide=2,l.DstAlphaFactor=206,l.DstColorFactor=208,l.DynamicBufferAttribute=function(e,t){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new Xe(e,t).setDynamic(!0)},l.EdgesGeometry=po,l.EdgesHelper=function(e,t){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new Yi(new po(e.geometry),new Ui({color:void 0!==t?t:16777215}))},l.EllipseCurve=os,l.EqualDepth=4,l.EqualStencilFunc=514,l.EquirectangularReflectionMapping=303,l.EquirectangularRefractionMapping=304,l.Euler=F,l.EventDispatcher=h,l.ExtrudeBufferGeometry=Qa,l.ExtrudeGeometry=Ka,l.Face3=je,l.Face4=function(e,t,r,n,i,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new je(e,t,r,i,a,o)},l.FaceColors=1,l.FaceNormalsHelper=wl,l.FileLoader=Qo,l.FlatShading=1,l.Float32Attribute=function(e,t){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new tt(e,t)},l.Float32BufferAttribute=tt,l.Float64Attribute=function(e,t){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new rt(e,t)},l.Float64BufferAttribute=rt,l.FloatType=1015,l.Fog=di,l.FogExp2=ui,l.Font=$s,l.FontLoader=tc,l.FrontFaceDirectionCCW=1,l.FrontFaceDirectionCW=0,l.FrontSide=0,l.Frustum=tr,l.GammaEncoding=3007,l.Geometry=zt,l.GeometryUtils=kl,l.GreaterDepth=6,l.GreaterEqualDepth=5,l.GreaterEqualStencilFunc=518,l.GreaterStencilFunc=516,l.GridHelper=ml,l.Group=ri,l.HalfFloatType=1016,l.HemisphereLight=Rs,l.HemisphereLightHelper=pl,l.HemisphereLightProbe=oc,l.IcosahedronBufferGeometry=ga,l.IcosahedronGeometry=va,l.ImageBitmapLoader=Ks,l.ImageLoader=rs,l.ImageUtils=_,l.ImmediateRenderObject=Jc,l.IncrementStencilOp=7682,l.IncrementWrapStencilOp=34055,l.InstancedBufferAttribute=js,l.InstancedBufferGeometry=ks,l.InstancedInterleavedBuffer=Uc,l.InstancedMesh=Fi,l.Int16Attribute=function(e,t){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Ke(e,t)},l.Int16BufferAttribute=Ke,l.Int32Attribute=function(e,t){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new $e(e,t)},l.Int32BufferAttribute=$e,l.Int8Attribute=function(e,t){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Ye(e,t)},l.Int8BufferAttribute=Ye,l.IntType=1013,l.InterleavedBuffer=pi,l.InterleavedBufferAttribute=fi,l.Interpolant=Io,l.InterpolateDiscrete=2300,l.InterpolateLinear=2301,l.InterpolateSmooth=2302,l.InvertStencilOp=5386,l.JSONLoader=function(){console.error("THREE.JSONLoader has been removed.")},l.KeepStencilOp=7680,l.KeyframeTrack=zo,l.LOD=Oi,l.LatheBufferGeometry=co,l.LatheGeometry=so,l.Layers=U,l.LensFlare=function(){console.error("THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js")},l.LessDepth=2,l.LessEqualDepth=3,l.LessEqualStencilFunc=515,l.LessStencilFunc=513,l.Light=Ls,l.LightProbe=ac,l.LightProbeHelper=fl,l.LightShadow=Ps,l.Line=Wi,l.Line3=Zc,l.LineBasicMaterial=Ui,l.LineCurve=xs,l.LineCurve3=bs,l.LineDashedMaterial=Po,l.LineLoop=Zi,l.LinePieces=1,l.LineSegments=Yi,l.LineStrip=0,l.LinearEncoding=3e3,l.LinearFilter=1006,l.LinearInterpolant=No,l.LinearMipMapLinearFilter=1008,l.LinearMipMapNearestFilter=1007,l.LinearMipmapLinearFilter=1008,l.LinearMipmapNearestFilter=1007,l.LinearToneMapping=1,l.Loader=Jo,l.LoaderUtils=Hs,l.LoadingManager=Yo,l.LogLuvEncoding=3003,l.LoopOnce=2200,l.LoopPingPong=2202,l.LoopRepeat=2201,l.LuminanceAlphaFormat=1025,l.LuminanceFormat=1024,l.MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},l.Material=We,l.MaterialLoader=Gs,l.Math=p,l.Matrix3=w,l.Matrix4=N,l.MaxEquation=104,l.Mesh=Pt,l.MeshBasicMaterial=qe,l.MeshDepthMaterial=Yn,l.MeshDistanceMaterial=Zn,l.MeshFaceMaterial=function(e){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),e},l.MeshLambertMaterial=Lo,l.MeshMatcapMaterial=Ro,l.MeshNormalMaterial=Ao,l.MeshPhongMaterial=To,l.MeshPhysicalMaterial=So,l.MeshStandardMaterial=Mo,l.MeshToonMaterial=Eo,l.MinEquation=103,l.MirroredRepeatWrapping=1002,l.MixOperation=1,l.MultiMaterial=function(e){return void 0===e&&(e=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),e.isMultiMaterial=!0,e.materials=e,e.clone=function(){return e.slice()},e},l.MultiplyBlending=4,l.MultiplyOperation=0,l.NearestFilter=1003,l.NearestMipMapLinearFilter=1005,l.NearestMipMapNearestFilter=1004,l.NearestMipmapLinearFilter=1005,l.NearestMipmapNearestFilter=1004,l.NeverDepth=0,l.NeverStencilFunc=512,l.NoBlending=0,l.NoColors=0,l.NoToneMapping=0,l.NormalBlending=1,l.NotEqualDepth=7,l.NotEqualStencilFunc=517,l.NumberKeyframeTrack=Go,l.Object3D=$,l.ObjectLoader=qs,l.ObjectSpaceNormalMap=1,l.OctahedronBufferGeometry=ma,l.OctahedronGeometry=fa,l.OneFactor=201,l.OneMinusDstAlphaFactor=207,l.OneMinusDstColorFactor=209,l.OneMinusSrcAlphaFactor=205,l.OneMinusSrcColorFactor=203,l.OrthographicCamera=Ns,l.PCFShadowMap=1,l.PCFSoftShadowMap=2,l.ParametricBufferGeometry=la,l.ParametricGeometry=ca,l.Particle=function(e){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Li(e)},l.ParticleBasicMaterial=function(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.ParticleSystem=function(e,t){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new ta(e,t)},l.ParticleSystemMaterial=function(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.Path=Es,l.PerspectiveCamera=Wt,l.Plane=Qt,l.PlaneBufferGeometry=cr,l.PlaneGeometry=sr,l.PlaneHelper=Il,l.PointCloud=function(e,t){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new ta(e,t)},l.PointCloudMaterial=function(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Ji(e)},l.PointLight=Ds,l.PointLightHelper=cl,l.Points=ta,l.PointsMaterial=Ji,l.PolarGridHelper=vl,l.PolyhedronBufferGeometry=ua,l.PolyhedronGeometry=ha,l.PositionalAudio=_c,l.PositionalAudioHelper=gl,l.PropertyBinding=Dc,l.PropertyMixer=Sc,l.QuadraticBezierCurve=ws,l.QuadraticBezierCurve3=_s,l.Quaternion=m,l.QuaternionKeyframeTrack=ko,l.QuaternionLinearInterpolant=Ho,l.REVISION="109",l.RGBADepthPacking=3201,l.RGBAFormat=1023,l.RGBA_ASTC_10x10_Format=37819,l.RGBA_ASTC_10x5_Format=37816,l.RGBA_ASTC_10x6_Format=37817,l.RGBA_ASTC_10x8_Format=37818,l.RGBA_ASTC_12x10_Format=37820,l.RGBA_ASTC_12x12_Format=37821,l.RGBA_ASTC_4x4_Format=37808,l.RGBA_ASTC_5x4_Format=37809,l.RGBA_ASTC_5x5_Format=37810,l.RGBA_ASTC_6x5_Format=37811,l.RGBA_ASTC_6x6_Format=37812,l.RGBA_ASTC_8x5_Format=37813,l.RGBA_ASTC_8x6_Format=37814,l.RGBA_ASTC_8x8_Format=37815,l.RGBA_PVRTC_2BPPV1_Format=35843,l.RGBA_PVRTC_4BPPV1_Format=35842,l.RGBA_S3TC_DXT1_Format=33777,l.RGBA_S3TC_DXT3_Format=33778,l.RGBA_S3TC_DXT5_Format=33779,l.RGBDEncoding=3006,l.RGBEEncoding=3002,l.RGBEFormat=1023,l.RGBFormat=1022,l.RGBM16Encoding=3005,l.RGBM7Encoding=3004,l.RGB_ETC1_Format=36196,l.RGB_PVRTC_2BPPV1_Format=35841,l.RGB_PVRTC_4BPPV1_Format=35840,l.RGB_S3TC_DXT1_Format=33776,l.RawShaderMaterial=_o,l.Ray=Se,l.Raycaster=Gc,l.RectAreaLight=Us,l.RectAreaLightHelper=ll,l.RedFormat=1028,l.ReinhardToneMapping=2,l.RepeatWrapping=1e3,l.ReplaceStencilOp=7681,l.ReverseSubtractEquation=102,l.RingBufferGeometry=oo,l.RingGeometry=ao,l.Scene=ee,l.SceneUtils=jl,l.ShaderChunk=rr,l.ShaderLib=ir,l.ShaderMaterial=jt,l.ShadowMaterial=wo,l.Shape=As,l.ShapeBufferGeometry=ho,l.ShapeGeometry=lo,l.ShapePath=Qs,l.ShapeUtils=Ya,l.ShortType=1011,l.Skeleton=Bi,l.SkeletonHelper=sl,l.SkinnedMesh=Ii,l.SmoothShading=2,l.Sphere=ve,l.SphereBufferGeometry=io,l.SphereGeometry=no,l.Spherical=jc,l.SphericalHarmonics3=ic,l.SphericalReflectionMapping=305,l.Spline=Hl,l.SplineCurve=Ms,l.SplineCurve3=Gl,l.SpotLight=Os,l.SpotLightHelper=nl,l.SpotLightShadow=Cs,l.Sprite=Li,l.SpriteMaterial=mi,l.SrcAlphaFactor=204,l.SrcAlphaSaturateFactor=210,l.SrcColorFactor=202,l.StereoCamera=hc,l.StringKeyframeTrack=jo,l.SubtractEquation=101,l.SubtractiveBlending=3,l.TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},l.TangentSpaceNormalMap=0,l.TetrahedronBufferGeometry=pa,l.TetrahedronGeometry=da,l.TextBufferGeometry=ro,l.TextGeometry=to,l.Texture=S,l.TextureLoader=is,l.TorusBufferGeometry=Ta,l.TorusGeometry=Sa,l.TorusKnotBufferGeometry=Ma,l.TorusKnotGeometry=_a,l.Triangle=Ne,l.TriangleFanDrawMode=2,l.TriangleStripDrawMode=1,l.TrianglesDrawMode=0,l.TubeBufferGeometry=wa,l.TubeGeometry=ba,l.UVMapping=300,l.Uint16Attribute=function(e,t){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Qe(e,t)},l.Uint16BufferAttribute=Qe,l.Uint32Attribute=function(e,t){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new et(e,t)},l.Uint32BufferAttribute=et,l.Uint8Attribute=function(e,t){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Ze(e,t)},l.Uint8BufferAttribute=Ze,l.Uint8ClampedAttribute=function(e,t){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Je(e,t)},l.Uint8ClampedBufferAttribute=Je,l.Uncharted2ToneMapping=3,l.Uniform=Fc,l.UniformsLib=nr,l.UniformsUtils=kt,l.UnsignedByteType=1009,l.UnsignedInt248Type=1020,l.UnsignedIntType=1014,l.UnsignedShort4444Type=1017,l.UnsignedShort5551Type=1018,l.UnsignedShort565Type=1019,l.UnsignedShortType=1012,l.VSMShadowMap=3,l.Vector2=f,l.Vector3=y,l.Vector4=T,l.VectorKeyframeTrack=Vo,l.Vertex=function(e,t,r){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new y(e,t,r)},l.VertexColors=2,l.VertexNormalsHelper=tl,l.VideoTexture=na,l.WebGLMultisampleRenderTarget=A,l.WebGLRenderTarget=E,l.WebGLRenderTargetCube=Xt,l.WebGLRenderer=hi,l.WebGLUtils=$n,l.WireframeGeometry=sa,l.WireframeHelper=function(e,t){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new Yi(new sa(e.geometry),new Ui({color:void 0!==t?t:16777215}))},l.WrapAroundEnding=2402,l.XHRLoader=function(e){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Qo(e)},l.ZeroCurvatureEnding=2400,l.ZeroFactor=200,l.ZeroSlopeEnding=2401,l.ZeroStencilOp=0,l.sRGBEncoding=3001;var Vl=l,Wl=function(){return("undefined"==typeof performance?Date:performance).now()},ql=function(e,t){if(!iu.plane){var r=new Vl.PlaneGeometry(1e4,1e4);r.rotateX(-Math.PI/2);var n=new Vl.MeshBasicMaterial({transparent:!0,opacity:0,depthWrite:!1});iu.plane=new Vl.Mesh(r,n),iu.scene.add(iu.plane)}var i=new Vl.Vector3;iu.mouse.x=e/iu.width*2-1,iu.mouse.y=-t/iu.height*2+1,iu.raycaster.setFromCamera(iu.mouse,iu.camera);var a=iu.raycaster.intersectObjects([iu.plane]);return a.length&&i.copy(a[0].point),i};var Xl=function(e,t,r){var n=new Vl.Color(16777215);return n.r=e.r+(t.r-e.r)*r,n.g=e.g+(t.g-e.g)*r,n.b=e.b+(t.b-e.b)*r,n},Yl={},Zl=0,Jl=function(e,t,r,n,i){var a,o=0,s=Math.ceil(r/17),c=n.split(".");1==c.length?a=Ql[c[0]]:2==c.length&&(a=Ql[c[0]]&&Ql[c[0]][c[1]]);return Zl++,Yl[Zl]=!0,function r(n){var c=a(o,e,t-e,s);if(o++,!Yl[n])return!1;o<=s?(i(c),function(e){if(window.requestAnimationFrame)return window.requestAnimationFrame(e);setTimeout((function(){e()}),fps)}((function(){return r(n)}))):i(t,!0)}(Zl),Zl},Kl=function(e){Yl[e]&&delete Yl[e]},Ql={Linear:function(e,t,r,n){return r*e/n+t},Quad:{easeIn:function(e,t,r,n){return r*(e/=n)*e+t},easeOut:function(e,t,r,n){return-r*(e/=n)*(e-2)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e+t:-r/2*(--e*(e-2)-1)+t}},Cubic:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e+t},easeOut:function(e,t,r,n){return r*((e=e/n-1)*e*e+1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e+t:r/2*((e-=2)*e*e+2)+t}},Quart:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e*e+t},easeOut:function(e,t,r,n){return-r*((e=e/n-1)*e*e*e-1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e*e+t:-r/2*((e-=2)*e*e*e-2)+t}},Quint:{easeIn:function(e,t,r,n){return r*(e/=n)*e*e*e*e+t},easeOut:function(e,t,r,n){return r*((e=e/n-1)*e*e*e*e+1)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?r/2*e*e*e*e*e+t:r/2*((e-=2)*e*e*e*e+2)+t}},Sine:{easeIn:function(e,t,r,n){return-r*Math.cos(e/n*(Math.PI/2))+r+t},easeOut:function(e,t,r,n){return r*Math.sin(e/n*(Math.PI/2))+t},easeInOut:function(e,t,r,n){return-r/2*(Math.cos(Math.PI*e/n)-1)+t}},Expo:{easeIn:function(e,t,r,n){return 0==e?t:r*Math.pow(2,10*(e/n-1))+t},easeOut:function(e,t,r,n){return e==n?t+r:r*(1-Math.pow(2,-10*e/n))+t},easeInOut:function(e,t,r,n){return 0==e?t:e==n?t+r:(e/=n/2)<1?r/2*Math.pow(2,10*(e-1))+t:r/2*(2-Math.pow(2,-10*--e))+t}},Circ:{easeIn:function(e,t,r,n){return-r*(Math.sqrt(1-(e/=n)*e)-1)+t},easeOut:function(e,t,r,n){return r*Math.sqrt(1-(e=e/n-1)*e)+t},easeInOut:function(e,t,r,n){return(e/=n/2)<1?-r/2*(Math.sqrt(1-e*e)-1)+t:r/2*(Math.sqrt(1-(e-=2)*e)+1)+t}},Elastic:{easeIn:function(e,t,r,n,i,a){var o;return 0==e?t:1==(e/=n)?t+r:(void 0===a&&(a=.3*n),!i||i<Math.abs(r)?(o=a/4,i=r):o=a/(2*Math.PI)*Math.asin(r/i),-i*Math.pow(2,10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)+t)},easeOut:function(e,t,r,n,i,a){var o;return 0==e?t:1==(e/=n)?t+r:(void 0===a&&(a=.3*n),!i||i<Math.abs(r)?(i=r,o=a/4):o=a/(2*Math.PI)*Math.asin(r/i),i*Math.pow(2,-10*e)*Math.sin((e*n-o)*(2*Math.PI)/a)+r+t)},easeInOut:function(e,t,r,n,i,a){var o;return 0==e?t:2==(e/=n/2)?t+r:(void 0===a&&(a=n*(.3*1.5)),!i||i<Math.abs(r)?(i=r,o=a/4):o=a/(2*Math.PI)*Math.asin(r/i),e<1?i*Math.pow(2,10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)*-.5+t:i*Math.pow(2,-10*(e-=1))*Math.sin((e*n-o)*(2*Math.PI)/a)*.5+r+t)}},Back:{easeIn:function(e,t,r,n,i){return void 0===i&&(i=1.70158),r*(e/=n)*e*((i+1)*e-i)+t},easeOut:function(e,t,r,n,i){return void 0===i&&(i=1.70158),r*((e=e/n-1)*e*((i+1)*e+i)+1)+t},easeInOut:function(e,t,r,n,i){return void 0===i&&(i=1.70158),(e/=n/2)<1?r/2*(e*e*((1+(i*=1.525))*e-i))+t:r/2*((e-=2)*e*((1+(i*=1.525))*e+i)+2)+t}},Bounce:{easeIn:function(e,t,r,n){return r-Ql.Bounce.easeOut(n-e,0,r,n)+t},easeOut:function(e,t,r,n){return(e/=n)<1/2.75?r*(7.5625*e*e)+t:e<2/2.75?r*(7.5625*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?r*(7.5625*(e-=2.25/2.75)*e+.9375)+t:r*(7.5625*(e-=2.625/2.75)*e+.984375)+t},easeInOut:function(e,t,r,n){return e<n/2?.5*Ql.Bounce.easeIn(2*e,0,r,n)+t:.5*Ql.Bounce.easeOut(2*e-n,0,r,n)+.5*r+t}}},$l=["touchstart","touchmove","touchend"],eh=function(){function e(){var t=this;i()(this,e),this.eventIds={},this.isTouch=!1,$l.forEach((function(e,r){document.addEventListener(e,(function(e){t[$l[r]](e)}))})),this.hands={};var r=new Vl.SphereGeometry(16,32,16),n=new Vl.MeshBasicMaterial({color:16777215,opacity:.9,depthWrite:!1,transparent:!0});this.meshPoint=new Vl.Mesh(r,n),this.meshPoint.name="eventMeshPoint"}return o()(e,[{key:"touchstart",value:function(e){var t=this;this.isTouch=!0;for(var r=0;r<e.touches.length;r++){var n=e.touches[r],i=this.intersect(n)[0];i?this.eventIds[i.object.uuid]=this.touchObjectData("touchstart",i,n):this.updateTouch(n)}if(iu.selectId){var a=!1;Object.keys(this.eventIds).forEach((function(e){var r=t.eventIds[e],n=r.data.obj;(iu.selectId==n.id||n.parent&&n.parent.id==iu.selectId)&&(a=!0),r.isUi&&(a=!0)})),a||(iu.selectedObjects=null)}this.dispatchEvent("touchstart",e)}},{key:"touchmove",value:function(e){if(!this.isTouch)return!1;for(var t=0;t<e.changedTouches.length;t++){var r=e.changedTouches[t];for(var n in this.eventIds){var i=this.eventIds[n];if(i.data.touche.identifier===r.identifier){(Math.abs(r.clientX-i.data.touche.clientX)>4||Math.abs(r.clientY-i.data.touche.clientY)>4)&&(i.isMove=!0),i.type="touchmove",i.data.touche=r;break}}}this.dispatchEvent("touchmove",e)}},{key:"touchend",value:function(e){for(var t=0;t<e.changedTouches.length;t++){var r=e.changedTouches[t];for(var n in this.eventIds){var i=this.eventIds[n];i.data.touche.identifier===r.identifier&&(i.isMove||(i.click=!0),i.type="touchend",i.data.touche=r)}}this.isTouch=!1,this.dispatchEvent("touchend",e)}},{key:"dispatchEvent",value:function(e,t){t.touches.length>=2?iu.controls[e](t):(this.dispatch(e,this.eventIds),this.stopEventPass?iu.controls.cannelScrollTo():iu.controls[e]({touches:[t.changedTouches[0],{pageX:t.changedTouches[0].pageX+1,pageY:t.changedTouches[0].pageY+1}]}))}},{key:"dispatch",value:function(e,t){var r=this,n=[],i=[],a=[],o=function(r){var o=t[r],s=o.data,c=s.obj.parent;o.type===e&&c[e]&&i.push({sort:c.zIndex,cb:function(){c[e](s.touche,s.point,s.uv)}}),o.click&&c.click&&a.push({sort:c.zIndex,cb:function(){c.click(s.touche,s.point,s.uv)}}),"touchend"===e&&n.push(r)};for(var s in t)o(s);i=i.sort((function(e,t){return t.sort-e.sort})),a=a.sort((function(e,t){return t.sort-e.sort})),this.stopEventPass=!1,i.forEach((function(e){r.stopEventPass||e.cb()})),a.forEach((function(e){r.stopEventPass||e.cb()})),n.forEach((function(e){return delete t[e]}))}},{key:"intersect",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:iu.scene.children,r=[];return iu.mouse.x=e.pageX/iu.width*2-1,iu.mouse.y=-e.pageY/iu.height*2+1,iu.raycaster.setFromCamera(iu.mouse,iu.camera),t.forEach((function(e){e.isCustom&&e.children&&e.children.length&&r.push(e.children[0])})),iu.raycaster.intersectObjects(r)}},{key:"touchObjectData",value:function(e,t,r){return{type:e,isUi:t.object.parent.isUi,data:{touche:r,uv:t.uv,point:t.point,isMove:!1,obj:t.object}}}},{key:"updateTouch",value:function(e){var t=this,r=null;this.hands[e.identifier]?(r=this.hands[e.identifier].point,Kl(this.hands[e.identifier].ani)):(r=this.meshPoint.clone(),iu.scene.add(r),this.hands[e.identifier]={point:r,ani:null});var n=iu.camera,i=1/iu.camera.zoom;r.position.copy(n.position),r.rotation.copy(n.rotation),r.scale.set(i,i,i),r.translateZ(-100),r.translateX(-(iu.width/2-e.pageX)*i),r.translateY((iu.height/2-e.pageY)*i),r.updateMatrix(),this.hands[e.identifier].ani=Jl(.4,.88,300,"Quad.easeOut",(function(n,a){var o=i+i*n;r.scale.set(o,o,o),r.material.opacity=1-n,a&&(iu.scene.remove(r),t.hands[e.identifier]=null)}))}}]),e}(),th=r(3),rh=r.n(th),nh=r(4),ih=r.n(nh),ah=r(0),oh=r.n(ah);function sh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var ch=function(e){rh()(r,e);var t=sh(r);function r(){var e;return i()(this,r),(e=t.call(this,{antialias:!0,canvas:window.canvas})).autoClear=!1,e.physicallyCorrectLights=!0,e.outputEncoding=Vl.sRGBEncoding,e.toneMapping=Vl.ACESFilmicToneMapping,e.gammaOutput=!0,e.gammaFactor=2.2,e.shadowMap.enabled=!0,e.shadowMap.shadowMapEnabled=!0,e.shadowMap.shadowMapSoft=!0,e.shadowMap.type=Vl.PCFSoftShadowMap,e.setSize(window.innerWidth,window.innerHeight),e.setPixelRatio(window.devicePixelRatio),e}return o()(r)}(Vl.WebGLRenderer),lh=function(){function e(t){i()(this,e),this.camera=t,this.cameraPosition=new Vl.Vector3,this.startTime=0,this.endTime=0}return o()(e,[{key:"touchstart",value:function(e){var t=e.touches[0],r=e.touches[1];this.touches={x1:t.pageX,y1:t.pageY,x2:r.pageX,y2:r.pageY},this.startTime=Wl(),this.isMove=!1,this.cameraPosition.copy(this.camera.position),this.cannelScrollTo()}},{key:"touchmove",value:function(e){var t,r,n,i,a,o=Wl(),s=e.touches[0],c=e.touches[1],l={x1:s.pageX,y1:s.pageY,x2:c.pageX,y2:c.pageY};if(this.touchIsMove(l,this.touches)){var h=(t=this.touches.x1,r=this.touches.y1,n=l.x1,i=l.y1,a=ql(t,r),ql(n,i).sub(a));this.camera.position.x-=h.x,this.camera.position.z-=h.z,o-this.startTime<300&&(this.startTime=o)}else{var u=this.getDistance({x:l.x1,y:l.y1},{x:l.x2,y:l.y2})/this.getDistance({x:this.touches.x1,y:this.touches.y1},{x:this.touches.x2,y:this.touches.y2});u=1-u>0?.95*this.camera.zoom:this.camera.zoom/.95,this.camera.zoom=Math.max(2,Math.min(10,u)),this.camera.updateProjectionMatrix()}this.touches=l}},{key:"touchend",value:function(e,t){if(this.endTime=Wl(),this.isMove){var r=this.endTime-this.startTime,n=this.camera.position.x-this.cameraPosition.x,i=this.camera.position.z-this.cameraPosition.z,a=Math.abs(n)/r,o=Math.abs(i)/r,s=this.camera.position.x+a/.2*(n<0?-1:1),c=this.camera.position.z+o/.2*(i<0?-1:1);this.scrollTo(s,c)}}},{key:"getDistance",value:function(e,t){return Math.hypot(t.x-e.x,t.y-e.y)}},{key:"touchIsMove",value:function(e,t){var r=e.x1-t.x1,n=e.x2-t.x2,i=e.y1-t.y1,a=e.y2-t.y2;return r>0&&n>0||r<0&&n<0||i>0&&a>0||i<0&&a<0}},{key:"scrollTo",value:function(e,t){var r=this,n=this.camera.position.x,i=this.camera.position.z,a=e-n,o=t-i;this.scroller=Jl(0,1,500,"Quad.easeOut",(function(e){r.camera.position.x=n+e*a,r.camera.position.z=i+e*o}))}},{key:"cannelScrollTo",value:function(){this.scroller&&(Kl(this.scroller),this.scroller=null)}}]),e}(),hh={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}",fragmentShader:"\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}"},uh=Vl.BufferGeometry,dh=Vl.Float32BufferAttribute,ph=Vl.OrthographicCamera,fh=Vl.Mesh,mh=function(){function e(){i()(this,e),this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}return o()(e,[{key:"setSize",value:function(){}},{key:"render",value:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}]),e}(),vh=new ph(-1,1,1,-1,0,1),gh=new uh;gh.setAttribute("position",new dh([-1,3,0,-1,-1,0,3,-1,0],3)),gh.setAttribute("uv",new dh([0,2,0,0,2,0],2));var yh=function(){function e(t){i()(this,e),this._mesh=new fh(gh,t)}return o()(e,[{key:"dispose",value:function(){this._mesh.geometry.dispose()}},{key:"render",value:function(e){e.render(this._mesh,vh)}},{key:"material",get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}}]),e}();function xh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var bh=Vl.ShaderMaterial,wh=Vl.UniformsUtils,_h=function(e){rh()(r,e);var t=xh(r);function r(e,n){var a;return i()(this,r),(a=t.call(this)).textureID=void 0!==n?n:"tDiffuse",e instanceof bh?(a.uniforms=e.uniforms,a.material=e):e&&(a.uniforms=wh.clone(e.uniforms),a.material=new bh({defines:Object.assign({},e.defines),uniforms:a.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader})),a.fsQuad=new yh(a.material),a}return o()(r,[{key:"render",value:function(e,t,r){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=r.texture),this.fsQuad.material=this.material,this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(t),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),this.fsQuad.render(e))}}]),r}(mh);function Mh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var Sh=function(e){rh()(r,e);var t=Mh(r);function r(e,n){var a;return i()(this,r),(a=t.call(this)).scene=e,a.camera=n,a.clear=!0,a.needsSwap=!1,a.inverse=!1,a}return o()(r,[{key:"render",value:function(e,t,r){var n,i,a=e.getContext(),o=e.state;o.buffers.color.setMask(!1),o.buffers.depth.setMask(!1),o.buffers.color.setLocked(!0),o.buffers.depth.setLocked(!0),this.inverse?(n=0,i=1):(n=1,i=0),o.buffers.stencil.setTest(!0),o.buffers.stencil.setOp(a.REPLACE,a.REPLACE,a.REPLACE),o.buffers.stencil.setFunc(a.ALWAYS,n,4294967295),o.buffers.stencil.setClear(i),o.buffers.stencil.setLocked(!0),e.setRenderTarget(r),this.clear&&e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(t),this.clear&&e.clear(),e.render(this.scene,this.camera),o.buffers.color.setLocked(!1),o.buffers.depth.setLocked(!1),o.buffers.stencil.setLocked(!1),o.buffers.stencil.setFunc(a.EQUAL,1,4294967295),o.buffers.stencil.setOp(a.KEEP,a.KEEP,a.KEEP),o.buffers.stencil.setLocked(!0)}}]),r}(mh),Th=function(e){rh()(r,e);var t=Mh(r);function r(){var e;return i()(this,r),(e=t.call(this)).needsSwap=!1,e}return o()(r,[{key:"render",value:function(e){e.state.buffers.stencil.setLocked(!1),e.state.buffers.stencil.setTest(!1)}}]),r}(mh),Eh=Vl.BufferGeometry,Ah=Vl.Clock,Lh=Vl.Float32BufferAttribute,Rh=Vl.LinearFilter,Ph=(Vl.Mesh,Vl.OrthographicCamera),Ch=Vl.RGBAFormat,Oh=Vl.Vector2,Ih=Vl.WebGLRenderTarget,Dh=function(){function e(t,r){if(i()(this,e),this.renderer=t,void 0===r){var n={minFilter:Rh,magFilter:Rh,format:Ch},a=t.getSize(new Oh);this._pixelRatio=t.getPixelRatio(),this._width=a.width,this._height=a.height,(r=new Ih(this._width*this._pixelRatio,this._height*this._pixelRatio,n)).texture.name="EffectComposer.rt1"}else this._pixelRatio=1,this._width=r.width,this._height=r.height;this.renderTarget1=r,this.renderTarget2=r.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],void 0===hh&&console.error("THREE.EffectComposer relies on CopyShader"),void 0===_h&&console.error("THREE.EffectComposer relies on ShaderPass"),this.copyPass=new _h(hh),this.clock=new Ah}return o()(e,[{key:"swapBuffers",value:function(){var e=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=e}},{key:"addPass",value:function(e){this.passes.push(e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}},{key:"insertPass",value:function(e,t){this.passes.splice(t,0,e),e.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}},{key:"removePass",value:function(e){var t=this.passes.indexOf(e);-1!==t&&this.passes.splice(t,1)}},{key:"isLastEnabledPass",value:function(e){for(var t=e+1;t<this.passes.length;t++)if(this.passes[t].enabled)return!1;return!0}},{key:"render",value:function(e){void 0===e&&(e=this.clock.getDelta());for(var t=this.renderer.getRenderTarget(),r=!1,n=0,i=this.passes.length;n<i;n++){var a=this.passes[n];if(!1!==a.enabled){if(a.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(n),a.render(this.renderer,this.writeBuffer,this.readBuffer,e,r),a.needsSwap){if(r){var o=this.renderer.getContext(),s=this.renderer.state.buffers.stencil;s.setFunc(o.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,e),s.setFunc(o.EQUAL,1,4294967295)}this.swapBuffers()}void 0!==Sh&&(a instanceof Sh?r=!0:a instanceof Th&&(r=!1))}}this.renderer.setRenderTarget(t)}},{key:"reset",value:function(e){if(void 0===e){var t=this.renderer.getSize(new Oh);this._pixelRatio=this.renderer.getPixelRatio(),this._width=t.width,this._height=t.height,(e=this.renderTarget1.clone()).setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=e,this.renderTarget2=e.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}},{key:"setSize",value:function(e,t){this._width=e,this._height=t;var r=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget1.setSize(r,n),this.renderTarget2.setSize(r,n);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(r,n)}},{key:"setPixelRatio",value:function(e){this._pixelRatio=e,this.setSize(this._width,this._height)}}]),e}(),Nh=(new Ph(-1,1,1,-1,0,1),new Eh);Nh.setAttribute("position",new Lh([-1,3,0,-1,-1,0,3,-1,0],3)),Nh.setAttribute("uv",new Lh([0,2,0,0,2,0],2));function Bh(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var zh=Vl.AdditiveBlending,Fh=Vl.Color,Uh=Vl.DoubleSide,Gh=Vl.LinearFilter,Hh=Vl.Matrix4,kh=Vl.MeshBasicMaterial,jh=Vl.MeshDepthMaterial,Vh=Vl.NoBlending,Wh=Vl.RGBADepthPacking,qh=Vl.RGBAFormat,Xh=Vl.ShaderMaterial,Yh=Vl.UniformsUtils,Zh=Vl.Vector2,Jh=Vl.Vector3,Kh=Vl.WebGLRenderTarget,Qh=function(e){rh()(r,e);var t=Bh(r);function r(e,n,a,o){var s;i()(this,r),(s=t.call(this)).renderScene=n,s.renderCamera=a,s.selectedObjects=void 0!==o?o:[],s.visibleEdgeColor=new Fh(1,1,1),s.hiddenEdgeColor=new Fh(.1,.04,.02),s.edgeGlow=0,s.usePatternTexture=!1,s.edgeThickness=1,s.edgeStrength=3,s.downSampleRatio=2,s.pulsePeriod=0,s._visibilityCache=new Map,s.resolution=void 0!==e?new Zh(e.x,e.y):new Zh(256,256);var c={minFilter:Gh,magFilter:Gh,format:qh},l=Math.round(s.resolution.x/s.downSampleRatio),h=Math.round(s.resolution.y/s.downSampleRatio);s.maskBufferMaterial=new kh({color:16777215}),s.maskBufferMaterial.side=Uh,s.renderTargetMaskBuffer=new Kh(s.resolution.x,s.resolution.y,c),s.renderTargetMaskBuffer.texture.name="OutlinePass.mask",s.renderTargetMaskBuffer.texture.generateMipmaps=!1,s.depthMaterial=new jh,s.depthMaterial.side=Uh,s.depthMaterial.depthPacking=Wh,s.depthMaterial.blending=Vh,s.prepareMaskMaterial=s.getPrepareMaskMaterial(),s.prepareMaskMaterial.side=Uh,s.prepareMaskMaterial.fragmentShader=function(e,t){var r=t.isPerspectiveCamera?"perspective":"orthographic";return e.replace(/DEPTH_TO_VIEW_Z/g,r+"DepthToViewZ")}(s.prepareMaskMaterial.fragmentShader,s.renderCamera),s.renderTargetDepthBuffer=new Kh(s.resolution.x,s.resolution.y,c),s.renderTargetDepthBuffer.texture.name="OutlinePass.depth",s.renderTargetDepthBuffer.texture.generateMipmaps=!1,s.renderTargetMaskDownSampleBuffer=new Kh(l,h,c),s.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",s.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,s.renderTargetBlurBuffer1=new Kh(l,h,c),s.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",s.renderTargetBlurBuffer1.texture.generateMipmaps=!1,s.renderTargetBlurBuffer2=new Kh(Math.round(l/2),Math.round(h/2),c),s.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",s.renderTargetBlurBuffer2.texture.generateMipmaps=!1,s.edgeDetectionMaterial=s.getEdgeDetectionMaterial(),s.renderTargetEdgeBuffer1=new Kh(l,h,c),s.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",s.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,s.renderTargetEdgeBuffer2=new Kh(Math.round(l/2),Math.round(h/2),c),s.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",s.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;s.separableBlurMaterial1=s.getSeperableBlurMaterial(4),s.separableBlurMaterial1.uniforms.texSize.value.set(l,h),s.separableBlurMaterial1.uniforms.kernelRadius.value=1,s.separableBlurMaterial2=s.getSeperableBlurMaterial(4),s.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(l/2),Math.round(h/2)),s.separableBlurMaterial2.uniforms.kernelRadius.value=4,s.overlayMaterial=s.getOverlayMaterial(),void 0===hh&&console.error("THREE.OutlinePass relies on CopyShader");var u=hh;return s.copyUniforms=Yh.clone(u.uniforms),s.copyUniforms.opacity.value=1,s.materialCopy=new Xh({uniforms:s.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:Vh,depthTest:!1,depthWrite:!1,transparent:!0}),s.enabled=!0,s.needsSwap=!1,s._oldClearColor=new Fh,s.oldClearAlpha=1,s.fsQuad=new yh(null),s.tempPulseColor1=new Fh,s.tempPulseColor2=new Fh,s.textureMatrix=new Hh,s}return o()(r,[{key:"dispose",value:function(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose()}},{key:"setSize",value:function(e,t){this.renderTargetMaskBuffer.setSize(e,t),this.renderTargetDepthBuffer.setSize(e,t);var r=Math.round(e/this.downSampleRatio),n=Math.round(t/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(r,n),this.renderTargetBlurBuffer1.setSize(r,n),this.renderTargetEdgeBuffer1.setSize(r,n),this.separableBlurMaterial1.uniforms.texSize.value.set(r,n),r=Math.round(r/2),n=Math.round(n/2),this.renderTargetBlurBuffer2.setSize(r,n),this.renderTargetEdgeBuffer2.setSize(r,n),this.separableBlurMaterial2.uniforms.texSize.value.set(r,n)}},{key:"changeVisibilityOfSelectedObjects",value:function(e){var t=this._visibilityCache;function r(r){r.isMesh&&(!0===e?r.visible=t.get(r):(t.set(r,r.visible),r.visible=e))}for(var n=0;n<this.selectedObjects.length;n++){this.selectedObjects[n].traverse(r)}}},{key:"changeVisibilityOfNonSelectedObjects",value:function(e){var t=this._visibilityCache,r=[];function n(e){e.isMesh&&r.push(e)}for(var i=0;i<this.selectedObjects.length;i++){this.selectedObjects[i].traverse(n)}this.renderScene.traverse((function(n){if(n.isMesh||n.isSprite){for(var i=!1,a=0;a<r.length;a++){if(r[a].id===n.id){i=!0;break}}if(!1===i){var o=n.visible;!1!==e&&!0!==t.get(n)||(n.visible=e),t.set(n,o)}}else(n.isPoints||n.isLine)&&(!0===e?n.visible=t.get(n):(t.set(n,n.visible),n.visible=e))}))}},{key:"updateTextureMatrix",value:function(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}},{key:"render",value:function(e,t,n,i,a){if(this.selectedObjects.length>0){e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();var o=e.autoClear;e.autoClear=!1,a&&e.state.buffers.stencil.setTest(!1),e.setClearColor(16777215,1),this.changeVisibilityOfSelectedObjects(!1);var s=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,e.setRenderTarget(this.renderTargetDepthBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this._visibilityCache.clear(),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=null,this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),this.renderScene.background=s,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),this.fsQuad.render(e),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){var c=.625+.75*Math.cos(.01*performance.now()/this.pulsePeriod)/2;this.tempPulseColor1.multiplyScalar(c),this.tempPulseColor2.multiplyScalar(c)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=r.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=r.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=r.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=r.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,a&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(n),this.fsQuad.render(e),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=o}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=n.texture,e.setRenderTarget(null),this.fsQuad.render(e))}},{key:"getPrepareMaskMaterial",value:function(){return new Xh({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new Zh(.5,.5)},textureMatrix:{value:null}},vertexShader:"#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}",fragmentShader:"#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}"})}},{key:"getEdgeDetectionMaterial",value:function(){return new Xh({uniforms:{maskTexture:{value:null},texSize:{value:new Zh(.5,.5)},visibleEdgeColor:{value:new Jh(1,1,1)},hiddenEdgeColor:{value:new Jh(1,1,1)}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}"})}},{key:"getSeperableBlurMaterial",value:function(e){return new Xh({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new Zh(.5,.5)},direction:{value:new Zh(.5,.5)},kernelRadius:{value:1}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}"})}},{key:"getOverlayMaterial",value:function(){return new Xh({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:"varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}",blending:zh,depthTest:!1,depthWrite:!1,transparent:!0})}}]),r}(mh);function $h(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}Qh.BlurDirectionX=new Zh(1,0),Qh.BlurDirectionY=new Zh(0,1);var eu=Vl.Color,tu=function(e){rh()(r,e);var t=$h(r);function r(e,n,a,o,s){var c;return i()(this,r),(c=t.call(this)).scene=e,c.camera=n,c.overrideMaterial=a,c.clearColor=o,c.clearAlpha=void 0!==s?s:0,c.clear=!0,c.clearDepth=!1,c.needsSwap=!1,c._oldClearColor=new eu,c}return o()(r,[{key:"render",value:function(e,t,r){var n,i,a=e.autoClear;e.autoClear=!1,void 0!==this.overrideMaterial&&(i=this.scene.overrideMaterial,this.scene.overrideMaterial=this.overrideMaterial),this.clearColor&&(e.getClearColor(this._oldClearColor),n=e.getClearAlpha(),e.setClearColor(this.clearColor,this.clearAlpha)),this.clearDepth&&e.clearDepth(),e.setRenderTarget(this.renderToScreen?null:r),this.clear&&e.clear(e.autoClearColor,e.autoClearDepth,e.autoClearStencil),e.render(this.scene,this.camera),this.clearColor&&e.setClearColor(this._oldClearColor,n),void 0!==this.overrideMaterial&&(this.scene.overrideMaterial=i),e.autoClear=a}}]),r}(mh),ru=function(){function e(t){i()(this,e),this.colors=[new Vl.Color(14933453),new Vl.Color(12503750),new Vl.Color(14672563),new Vl.Color(14272155),new Vl.Color(4340531)],this.time=0,this.scene=new Vl.Scene,this.camera=new Vl.OrthographicCamera(t.width/-2,t.width/2,t.height/2,t.height/-2,1,400),this.scene.background=this.colors[0],this.topColor=this.colors[0],this.bottomColor=this.colors[0],this.colorIndex=0,this.colorCommon=new Vl.Color(16777215),this.renderer=t.renderer,this.ambientLight=t.ambientLight}return o()(e,[{key:"render",value:function(){this.time=Math.min(1,this.time+.02),1!==this.time&&(this.scene.background=Xl(this.topColor,this.bottomColor,this.time),this.colorIndex===this.colors.length-1?this.ambientLight.color=Xl(this.topColor,this.colorCommon,this.time):this.ambientLight.color=this.scene.background),this.renderer.render(this.scene,this.camera)}},{key:"switch",value:function(){var e=this.colors,t=e.indexOf(this.bottomColor),r=t+1;t>e.length-1&&(t=0),r>e.length-1&&(r=0),this.topColor=Xl(this.topColor,this.bottomColor,this.time),this.bottomColor=e[r],this.colorIndex=r,this.time=0}}]),e}(),nu=function(){function e(t){i()(this,e),this.chaos=t,this.scene=t.scene,this.camera=t.camera,this.composer=new Dh(t.renderer),this.outlinePass=new Qh(new Vl.Vector2(t.width,t.height),t.scene,t.camera),this.renderScene=new tu(t.scene,t.camera),this.composer.addPass(this.renderScene),this.composer.addPass(this.outlinePass),this.customOutline()}return o()(e,[{key:"customOutline",value:function(){this.selectColor=new Vl.Color(16777215),this.selectErrorColor=new Vl.Color(16740428),this.selectColor.convertSRGBToLinear(),this.selectErrorColor.convertSRGBToLinear(),this.setDisabled(!0)}},{key:"setDisabled",value:function(e){var t=this.outlinePass,r=null;e?(r=this.selectErrorColor,t.edgeStrength=5,t.edgeGlow=1,t.edgeThickness=8):(r=this.selectColor,t.edgeStrength=4,t.edgeGlow=.5,t.edgeThickness=1),t.visibleEdgeColor.set(r),t.hiddenEdgeColor.set(r)}},{key:"render",value:function(){this.composer.render()}}]),e}(),iu=new(function(){function e(){i()(this,e),window.Chaos=this,this.scene=new Vl.Scene,this.width=window.innerWidth,this.height=window.innerHeight,this.camera=new Vl.OrthographicCamera(this.width/-2,this.width/2,this.height/2,this.height/-2,1,2e3),this.renderer=new ch,this.mouse=new Vl.Vector2,this.raycaster=new Vl.Raycaster;var t,r=((t=new Vl.DirectionalLight("#ffffff",1)).castShadow=!0,t.shadowBias=-.001,t.shadow.camera.near=1,t.shadow.camera.far=1e3,t.shadow.mapSize.set(1024,1024),t.shadow.normalBias=0,t.shadow.camera.top=100,t.shadow.camera.bottom=-100,t.shadow.camera.left=-100,t.shadow.camera.right=100,t.position.set(0,800,400),{directionalLight:t,ambientLight:new Vl.AmbientLight("#ffffff",1)});this.targetObject=new Vl.Object3D,r.directionalLight.target=this.targetObject,this.ambientLight=r.ambientLight,this.scene.add(r.directionalLight),this.scene.add(r.ambientLight),this.lightHelper=new Vl.DirectionalLightHelper(r.directionalLight),this.scene.add(this.targetObject),this.controls=new lh(this.camera),this.controlsDisabled=!0,this.camera.position.set(400,600,400),this.camera.zoom=6,this.camera.updateProjectionMatrix(),this.camera.lookAt(new Vl.Vector3),this.event=new eh(this);var n=new Vl.GridHelper(3e3,300);n.position.x=-5,n.position.z=-5,this.sky=new ru(this),this.outline=new nu(this),this.gridSize=10}return o()(e,[{key:"start",value:function(){this.loop()}},{key:"render",value:function(){this.targetObject.position.set(this.camera.position.x-400,this.camera.position.y-600,this.camera.position.z-400),this.scene.children.forEach((function(e){e.isCustom&&e.update()})),this.renderer.clear(),this.sky.render(),this.outline.render()}},{key:"loop",value:function(){var e=this;this.render(),requestAnimationFrame((function(){return e.loop()}))}},{key:"selectedObjects",get:function(){return this.outline.outlinePass.selectedObjects},set:function(e){e?(this.selectId=e[0].id,this.outline.outlinePass.selectedObjects=e):(this.selectId=null,this.outline.outlinePass.selectedObjects=[])}},{key:"setSelectedObjectDisabled",value:function(e){this.outline.setDisabled(e)}},{key:"preventDefault",value:function(){this.event.stopEventPass=!0}}]),e}());function au(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var ou=Vl.BufferGeometry,su=Vl.FileLoader,cu=Vl.Float32BufferAttribute,lu=Vl.Group,hu=Vl.LineBasicMaterial,uu=Vl.LineSegments,du=Vl.Loader,pu=Vl.Material,fu=Vl.Mesh,mu=Vl.MeshPhongMaterial,vu=Vl.Points,gu=Vl.PointsMaterial,yu=Vl.Vector3,xu=/^[og]\s*(.+)?/,bu=/^mtllib /,wu=/^usemtl /,_u=/^usemap /,Mu=new yu,Su=new yu,Tu=new yu,Eu=new yu,Au=new yu;function Lu(){var e={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(e,t){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=e,void(this.object.fromDeclaration=!1!==t);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:e||"",fromDeclaration:!1!==t,geometry:{vertices:[],normals:[],colors:[],uvs:[],hasUVIndices:!1},materials:[],smooth:!0,startMaterial:function(e,t){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var n={index:this.materials.length,name:e||"",mtllib:Array.isArray(t)&&t.length>0?t[t.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(e){var t={index:"number"==typeof e?e:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return t.clone=this.clone.bind(t),t}};return this.materials.push(n),n},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(e){var t=this.currentMaterial();if(t&&-1===t.groupEnd&&(t.groupEnd=this.geometry.vertices.length/3,t.groupCount=t.groupEnd-t.groupStart,t.inherited=!1),e&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return e&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),t}},r&&r.name&&"function"==typeof r.clone){var n=r.clone(0);n.inherited=!0,this.object.materials.push(n)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseNormalIndex:function(e,t){var r=parseInt(e,10);return 3*(r>=0?r-1:r+t/3)},parseUVIndex:function(e,t){var r=parseInt(e,10);return 2*(r>=0?r-1:r+t/2)},addVertex:function(e,t,r){var n=this.vertices,i=this.object.geometry.vertices;i.push(n[e+0],n[e+1],n[e+2]),i.push(n[t+0],n[t+1],n[t+2]),i.push(n[r+0],n[r+1],n[r+2])},addVertexPoint:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addVertexLine:function(e){var t=this.vertices;this.object.geometry.vertices.push(t[e+0],t[e+1],t[e+2])},addNormal:function(e,t,r){var n=this.normals,i=this.object.geometry.normals;i.push(n[e+0],n[e+1],n[e+2]),i.push(n[t+0],n[t+1],n[t+2]),i.push(n[r+0],n[r+1],n[r+2])},addFaceNormal:function(e,t,r){var n=this.vertices,i=this.object.geometry.normals;Mu.fromArray(n,e),Su.fromArray(n,t),Tu.fromArray(n,r),Au.subVectors(Tu,Su),Eu.subVectors(Mu,Su),Au.cross(Eu),Au.normalize(),i.push(Au.x,Au.y,Au.z),i.push(Au.x,Au.y,Au.z),i.push(Au.x,Au.y,Au.z)},addColor:function(e,t,r){var n=this.colors,i=this.object.geometry.colors;void 0!==n[e]&&i.push(n[e+0],n[e+1],n[e+2]),void 0!==n[t]&&i.push(n[t+0],n[t+1],n[t+2]),void 0!==n[r]&&i.push(n[r+0],n[r+1],n[r+2])},addUV:function(e,t,r){var n=this.uvs,i=this.object.geometry.uvs;i.push(n[e+0],n[e+1]),i.push(n[t+0],n[t+1]),i.push(n[r+0],n[r+1])},addDefaultUV:function(){var e=this.object.geometry.uvs;e.push(0,0),e.push(0,0),e.push(0,0)},addUVLine:function(e){var t=this.uvs;this.object.geometry.uvs.push(t[e+0],t[e+1])},addFace:function(e,t,r,n,i,a,o,s,c){var l=this.vertices.length,h=this.parseVertexIndex(e,l),u=this.parseVertexIndex(t,l),d=this.parseVertexIndex(r,l);if(this.addVertex(h,u,d),this.addColor(h,u,d),void 0!==o&&""!==o){var p=this.normals.length;h=this.parseNormalIndex(o,p),u=this.parseNormalIndex(s,p),d=this.parseNormalIndex(c,p),this.addNormal(h,u,d)}else this.addFaceNormal(h,u,d);if(void 0!==n&&""!==n){var f=this.uvs.length;h=this.parseUVIndex(n,f),u=this.parseUVIndex(i,f),d=this.parseUVIndex(a,f),this.addUV(h,u,d),this.object.geometry.hasUVIndices=!0}else this.addDefaultUV()},addPointGeometry:function(e){this.object.geometry.type="Points";for(var t=this.vertices.length,r=0,n=e.length;r<n;r++){var i=this.parseVertexIndex(e[r],t);this.addVertexPoint(i),this.addColor(i)}},addLineGeometry:function(e,t){this.object.geometry.type="Line";for(var r=this.vertices.length,n=this.uvs.length,i=0,a=e.length;i<a;i++)this.addVertexLine(this.parseVertexIndex(e[i],r));for(var o=0,s=t.length;o<s;o++)this.addUVLine(this.parseUVIndex(t[o],n))}};return e.startObject("",!1),e}var Ru=function(e){rh()(r,e);var t=au(r);function r(e){var n;return i()(this,r),(n=t.call(this,e)).materials=null,n}return o()(r,[{key:"load",value:function(e,t,r,n){var i=this,a=new su(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,(function(r){try{t(i.parse(r))}catch(t){n?n(t):console.error(t),i.manager.itemError(e)}}),r,n)}},{key:"setMaterials",value:function(e){return this.materials=e,this}},{key:"parse",value:function(e){var t=new Lu;-1!==e.indexOf("\r\n")&&(e=e.replace(/\r\n/g,"\n")),-1!==e.indexOf("\\\n")&&(e=e.replace(/\\\n/g,""));for(var r=e.split("\n"),n="",i="",a=[],o="function"==typeof"".trimLeft,s=0,c=r.length;s<c;s++)if(n=r[s],0!==(n=o?n.trimLeft():n.trim()).length&&"#"!==(i=n.charAt(0)))if("v"===i){var l=n.split(/\s+/);switch(l[0]){case"v":t.vertices.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3])),l.length>=7?t.colors.push(parseFloat(l[4]),parseFloat(l[5]),parseFloat(l[6])):t.colors.push(void 0,void 0,void 0);break;case"vn":t.normals.push(parseFloat(l[1]),parseFloat(l[2]),parseFloat(l[3]));break;case"vt":t.uvs.push(parseFloat(l[1]),parseFloat(l[2]))}}else if("f"===i){for(var h=n.substr(1).trim().split(/\s+/),u=[],d=0,p=h.length;d<p;d++){var f=h[d];if(f.length>0){var m=f.split("/");u.push(m)}}for(var v=u[0],g=1,y=u.length-1;g<y;g++){var x=u[g],b=u[g+1];t.addFace(v[0],x[0],b[0],v[1],x[1],b[1],v[2],x[2],b[2])}}else if("l"===i){var w=n.substring(1).trim().split(" "),_=[],M=[];if(-1===n.indexOf("/"))_=w;else for(var S=0,T=w.length;S<T;S++){var E=w[S].split("/");""!==E[0]&&_.push(E[0]),""!==E[1]&&M.push(E[1])}t.addLineGeometry(_,M)}else if("p"===i){var A=n.substr(1).trim().split(" ");t.addPointGeometry(A)}else if(null!==(a=xu.exec(n))){var L=(" "+a[0].substr(1).trim()).substr(1);t.startObject(L)}else if(wu.test(n))t.object.startMaterial(n.substring(7).trim(),t.materialLibraries);else if(bu.test(n))t.materialLibraries.push(n.substring(7).trim());else if(_u.test(n))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===i){if((a=n.split(" ")).length>1){var R=a[1].trim().toLowerCase();t.object.smooth="0"!==R&&"off"!==R}else t.object.smooth=!0;var P=t.object.currentMaterial();P&&(P.smooth=t.object.smooth)}else{if("\0"===n)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+n+'"')}t.finalize();var C=new lu;if(C.materialLibraries=[].concat(t.materialLibraries),!0===!(1===t.objects.length&&0===t.objects[0].geometry.vertices.length))for(var O=0,I=t.objects.length;O<I;O++){var D=t.objects[O],N=D.geometry,B=D.materials,z="Line"===N.type,F="Points"===N.type,U=!1;if(0!==N.vertices.length){var G=new ou;G.setAttribute("position",new cu(N.vertices,3)),N.normals.length>0&&G.setAttribute("normal",new cu(N.normals,3)),N.colors.length>0&&(U=!0,G.setAttribute("color",new cu(N.colors,3))),!0===N.hasUVIndices&&G.setAttribute("uv",new cu(N.uvs,2));for(var H=[],k=0,j=B.length;k<j;k++){var V=B[k],W=V.name+"_"+V.smooth+"_"+U,q=t.materials[W];if(null!==this.materials)if(q=this.materials.create(V.name),!z||!q||q instanceof hu){if(F&&q&&!(q instanceof gu)){var X=new gu({size:10,sizeAttenuation:!1});pu.prototype.copy.call(X,q),X.color.copy(q.color),X.map=q.map,q=X}}else{var Y=new hu;pu.prototype.copy.call(Y,q),Y.color.copy(q.color),q=Y}void 0===q&&((q=z?new hu:F?new gu({size:1,sizeAttenuation:!1}):new mu).name=V.name,q.flatShading=!V.smooth,q.vertexColors=U,t.materials[W]=q),H.push(q)}var Z=void 0;if(H.length>1){for(var J=0,K=B.length;J<K;J++){var Q=B[J];G.addGroup(Q.groupStart,Q.groupCount,J)}Z=z?new uu(G,H):F?new vu(G,H):new fu(G,H)}else Z=z?new uu(G,H[0]):F?new vu(G,H[0]):new fu(G,H[0]);Z.name=D.name,C.add(Z)}}else if(t.vertices.length>0){var $=new gu({size:1,sizeAttenuation:!1}),ee=new ou;ee.setAttribute("position",new cu(t.vertices,3)),t.colors.length>0&&void 0!==t.colors[0]&&(ee.setAttribute("color",new cu(t.colors,3)),$.vertexColors=!0);var te=new vu(ee,$);C.add(te)}return C}}]),r}(du);function Pu(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var Cu=function(e){rh()(r,e);var t=Pu(r);function r(e){var n;return i()(this,r),(n=t.call(this,e)).loader=new Ru,n}return o()(r,[{key:"load",value:function(e,t,r,n){var i=this;new Vl.FileLoader(this.manager).load(e,(function(r){try{var a=function(e){for(var t=JSON.parse(e),r="",n=function(e){var n=t.index[e];t.data[e].forEach((function(e){r+="".concat(n," ").concat(e," \n")}))},i=0;i<t.index.length;i++)n(i);return r}(r);t(i.loader.parse(a))}catch(t){n?n(t):console.error(t),i.manager.itemError(e)}}),r,n)}}]),r}(Vl.Loader),Ou=Vl.AnimationClip,Iu=Vl.Bone,Du=Vl.BufferAttribute,Nu=Vl.BufferGeometry,Bu=Vl.ClampToEdgeWrapping,zu=Vl.Color,Fu=Vl.DirectionalLight,Uu=Vl.DoubleSide,Gu=Vl.FileLoader,Hu=Vl.FrontSide,ku=Vl.Group,ju=Vl.InterleavedBuffer,Vu=Vl.InterleavedBufferAttribute,Wu=Vl.Interpolant,qu=Vl.InterpolateDiscrete,Xu=Vl.InterpolateLinear,Yu=Vl.Line,Zu=Vl.LineBasicMaterial,Ju=Vl.LineLoop,Ku=Vl.LineSegments,Qu=Vl.LinearFilter,$u=Vl.LinearMipmapLinearFilter,ed=Vl.LinearMipmapNearestFilter,td=Vl.Loader,rd=Vl.LoaderUtils,nd=Vl.Material,id=Vl.Math,ad=Vl.Matrix4,od=Vl.Mesh,sd=Vl.MeshBasicMaterial,cd=Vl.MeshStandardMaterial,ld=Vl.MirroredRepeatWrapping,hd=Vl.NearestFilter,ud=Vl.NearestMipmapLinearFilter,dd=Vl.NearestMipmapNearestFilter,pd=Vl.NumberKeyframeTrack,fd=Vl.Object3D,md=Vl.OrthographicCamera,vd=Vl.PerspectiveCamera,gd=Vl.PointLight,yd=Vl.Points,xd=Vl.PointsMaterial,bd=Vl.PropertyBinding,wd=Vl.QuaternionKeyframeTrack,_d=Vl.RGBAFormat,Md=Vl.RGBFormat,Sd=Vl.RepeatWrapping,Td=Vl.Scene,Ed=Vl.ShaderLib,Ad=Vl.ShaderMaterial,Ld=Vl.Skeleton,Rd=Vl.SkinnedMesh,Pd=Vl.SpotLight,Cd=Vl.TextureLoader,Od=Vl.TriangleFanDrawMode,Id=Vl.TriangleStripDrawMode,Dd=Vl.UniformsUtils,Nd=Vl.Vector2,Bd=Vl.VectorKeyframeTrack,zd=Vl.VertexColors,Fd=Vl.sRGBEncoding,Ud=function(){function e(e){td.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,r){e[t]=r},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(td.prototype),{constructor:e,load:function(e,t,r,n){var i,a=this;i=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:rd.extractUrlBase(e),a.manager.itemStart(e);var o=function(t){n?n(t):console.error(t),a.manager.itemError(e),a.manager.itemEnd(e)},s=new Gu(a.manager);s.setPath(this.path),s.setResponseType("arraybuffer"),"use-credentials"===a.crossOrigin&&s.setWithCredentials(!0),s.load(e,(function(r){try{a.parse(r,i,(function(r){t(r),a.manager.itemEnd(e)}),o)}catch(e){o(e)}}),r,o)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,s,c){var l,f={};if("string"==typeof e)l=e;else if(rd.decodeText(new Uint8Array(e,0,4))===o){try{f[r.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(c&&c(e))}l=f[r.KHR_BINARY_GLTF].content}else l=rd.decodeText(new Uint8Array(e));var m=JSON.parse(l);if(void 0===m.asset||m.asset.version[0]<2)c&&c(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead."));else{if(m.extensionsUsed)for(var v=0;v<m.extensionsUsed.length;++v){var g=m.extensionsUsed[v],y=m.extensionsRequired||[];switch(g){case r.KHR_LIGHTS_PUNCTUAL:f[g]=new i(m);break;case r.KHR_MATERIALS_UNLIT:f[g]=new a;break;case r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:f[g]=new p;break;case r.KHR_DRACO_MESH_COMPRESSION:f[g]=new u(m,this.dracoLoader);break;case r.MSFT_TEXTURE_DDS:f[r.MSFT_TEXTURE_DDS]=new n(this.ddsLoader);break;case r.KHR_TEXTURE_TRANSFORM:f[r.KHR_TEXTURE_TRANSFORM]=new d;break;default:y.indexOf(g)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+g+'".')}}new G(m,f,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(s,c)}}});var r={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function n(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=r.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=r.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[r.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function a(){this.name=r.KHR_MATERIALS_UNLIT}i.prototype.loadLight=function(e){var t,r=this.lightDefs[e],n=new zu(16777215);void 0!==r.color&&n.fromArray(r.color);var i=void 0!==r.range?r.range:0;switch(r.type){case"directional":(t=new Fu(n)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new gd(n)).distance=i;break;case"spot":(t=new Pd(n)).distance=i,r.spot=r.spot||{},r.spot.innerConeAngle=void 0!==r.spot.innerConeAngle?r.spot.innerConeAngle:0,r.spot.outerConeAngle=void 0!==r.spot.outerConeAngle?r.spot.outerConeAngle:id.PI/4,t.angle=r.spot.outerConeAngle,t.penumbra=1-r.spot.innerConeAngle/r.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+r.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==r.intensity&&(t.intensity=r.intensity),t.name=r.name||"light_"+e,Promise.resolve(t)},a.prototype.getMaterialType=function(){return sd},a.prototype.extendParams=function(e,t,r){var n=[];e.color=new zu(1,1,1),e.opacity=1;var i=t.pbrMetallicRoughness;if(i){if(Array.isArray(i.baseColorFactor)){var a=i.baseColorFactor;e.color.fromArray(a),e.opacity=a[3]}void 0!==i.baseColorTexture&&n.push(r.assignTexture(e,"map",i.baseColorTexture))}return Promise.all(n)};var o="glTF",s=1313821514,l=5130562;function h(e){this.name=r.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:rd.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==o)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.");for(var n=new DataView(e,12),i=0;i<n.byteLength;){var a=n.getUint32(i,!0);i+=4;var c=n.getUint32(i,!0);if(i+=4,c===s){var h=new Uint8Array(e,12+i,a);this.content=rd.decodeText(h)}else if(c===l){var u=12+i;this.body=e.slice(u,u+a)}i+=a}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function u(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=r.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t}function d(){this.name=r.KHR_TEXTURE_TRANSFORM}function p(){return{name:r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return Ad},extendParams:function(e,t,r){var n=t.extensions[this.name],i=Ed.standard,a=Dd.clone(i.uniforms),o=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),s=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),c=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),l=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),h=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),u=i.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;").replace("uniform float metalness;","uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>",o).replace("#include <metalnessmap_pars_fragment>",s).replace("#include <roughnessmap_fragment>",c).replace("#include <metalnessmap_fragment>",l).replace("#include <lights_physical_fragment>",h);delete a.roughness,delete a.metalness,delete a.roughnessMap,delete a.metalnessMap,a.specular={value:(new zu).setHex(1118481)},a.glossiness={value:.5},a.specularMap={value:null},a.glossinessMap={value:null},e.vertexShader=i.vertexShader,e.fragmentShader=u,e.uniforms=a,e.defines={STANDARD:""},e.color=new zu(1,1,1),e.opacity=1;var d=[];if(Array.isArray(n.diffuseFactor)){var p=n.diffuseFactor;e.color.fromArray(p),e.opacity=p[3]}if(void 0!==n.diffuseTexture&&d.push(r.assignTexture(e,"map",n.diffuseTexture)),e.emissive=new zu(0,0,0),e.glossiness=void 0!==n.glossinessFactor?n.glossinessFactor:1,e.specular=new zu(1,1,1),Array.isArray(n.specularFactor)&&e.specular.fromArray(n.specularFactor),void 0!==n.specularGlossinessTexture){var f=n.specularGlossinessTexture;d.push(r.assignTexture(e,"glossinessMap",f)),d.push(r.assignTexture(e,"specularMap",f))}return Promise.all(d)},createMaterial:function(e){var t=new Ad({defines:e.defines,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,uniforms:e.uniforms,fog:!0,lights:!0,opacity:e.opacity,transparent:e.transparent});return t.isGLTFSpecularGlossinessMaterial=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t.extensions.derivatives=!0,t},cloneMaterial:function(e){var t=e.clone();t.isGLTFSpecularGlossinessMaterial=!0;for(var r=this.specularGlossinessParams,n=0,i=r.length;n<i;n++){var a=e[r[n]];t[r[n]]=a&&a.isColor?a.clone():a}return t},refreshUniforms:function(e,t,r,n,i){if(!0===i.isGLTFSpecularGlossinessMaterial){var a,o=i.uniforms,s=i.defines;o.opacity.value=i.opacity,o.diffuse.value.copy(i.color),o.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity),o.map.value=i.map,o.specularMap.value=i.specularMap,o.alphaMap.value=i.alphaMap,o.lightMap.value=i.lightMap,o.lightMapIntensity.value=i.lightMapIntensity,o.aoMap.value=i.aoMap,o.aoMapIntensity.value=i.aoMapIntensity,i.map?a=i.map:i.specularMap?a=i.specularMap:i.displacementMap?a=i.displacementMap:i.normalMap?a=i.normalMap:i.bumpMap?a=i.bumpMap:i.glossinessMap?a=i.glossinessMap:i.alphaMap?a=i.alphaMap:i.emissiveMap&&(a=i.emissiveMap),void 0!==a&&(a.isWebGLRenderTarget&&(a=a.texture),!0===a.matrixAutoUpdate&&a.updateMatrix(),o.uvTransform.value.copy(a.matrix)),i.envMap&&(o.envMap.value=i.envMap,o.envMapIntensity.value=i.envMapIntensity,o.flipEnvMap.value=i.envMap.isCubeTexture?-1:1,o.reflectivity.value=i.reflectivity,o.refractionRatio.value=i.refractionRatio,o.maxMipLevel.value=e.properties.get(i.envMap).__maxMipLevel),o.specular.value.copy(i.specular),o.glossiness.value=i.glossiness,o.glossinessMap.value=i.glossinessMap,o.emissiveMap.value=i.emissiveMap,o.bumpMap.value=i.bumpMap,o.normalMap.value=i.normalMap,o.displacementMap.value=i.displacementMap,o.displacementScale.value=i.displacementScale,o.displacementBias.value=i.displacementBias,null!==o.glossinessMap.value&&void 0===s.USE_GLOSSINESSMAP&&(s.USE_GLOSSINESSMAP="",s.USE_ROUGHNESSMAP=""),null===o.glossinessMap.value&&void 0!==s.USE_GLOSSINESSMAP&&(delete s.USE_GLOSSINESSMAP,delete s.USE_ROUGHNESSMAP)}}}}function f(e,t,r,n){Wu.call(this,e,t,r,n)}u.prototype.decodePrimitive=function(e,t){var r=this.json,n=this.dracoLoader,i=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,o={},s={},c={};for(var l in a){var h=A[l]||l.toLowerCase();o[h]=a[l]}for(l in e.attributes){h=A[l]||l.toLowerCase();if(void 0!==a[l]){var u=r.accessors[e.attributes[l]],d=M[u.componentType];c[h]=d,s[h]=!0===u.normalized}}return t.getDependency("bufferView",i).then((function(e){return new Promise((function(t){n.decodeDracoFile(e,(function(e){for(var r in e.attributes){var n=e.attributes[r],i=s[r];void 0!==i&&(n.normalized=i)}t(e)}),o,c)}))}))},d.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},f.prototype=Object.create(Wu.prototype),f.prototype.constructor=f,f.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,r=this.sampleValues,n=this.valueSize,i=e*n*3+n,a=0;a!==n;a++)t[a]=r[i+a];return t},f.prototype.beforeStart_=f.prototype.copySampleValue_,f.prototype.afterEnd_=f.prototype.copySampleValue_,f.prototype.interpolate_=function(e,t,r,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=2*o,c=3*o,l=n-t,h=(r-t)/l,u=h*h,d=u*h,p=e*c,f=p-c,m=-2*d+3*u,v=d-u,g=1-m,y=v-u+h,x=0;x!==o;x++){var b=a[f+x+o],w=a[f+x+s]*l,_=a[p+x+o],M=a[p+x]*l;i[x]=g*b+y*w+m*_+v*M}return i};var m,v=0,g=1,y=2,x=3,b=4,w=5,_=6,M={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},S={9728:hd,9729:Qu,9984:dd,9985:ed,9986:ud,9987:$u},T={33071:Bu,33648:ld,10497:Sd},E={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},A={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},L={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},R={CUBICSPLINE:void 0,LINEAR:Xu,STEP:qu},P="OPAQUE",C="MASK",O="BLEND",I={"image/png":_d,"image/jpeg":Md};function D(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function N(e,t,r){for(var n in r.extensions)void 0===e[n]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[n]=r.extensions[n])}function B(e,t){void 0!==t.extras&&("object"===c()(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function z(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var r=0,n=t.weights.length;r<n;r++)e.morphTargetInfluences[r]=t.weights[r];if(t.extras&&Array.isArray(t.extras.targetNames)){var i=t.extras.targetNames;if(e.morphTargetInfluences.length===i.length){e.morphTargetDictionary={};for(r=0,n=i.length;r<n;r++)e.morphTargetDictionary[i[r]]=r}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function F(e){for(var t="",r=Object.keys(e).sort(),n=0,i=r.length;n<i;n++)t+=r[n]+":"+e[r[n]]+";";return t}function U(e){if(e.isInterleavedBufferAttribute){for(var t=e.count,r=e.itemSize,n=e.array.slice(0,t*r),i=0,a=0;i<t;++i)n[a++]=e.getX(i),r>=2&&(n[a++]=e.getY(i)),r>=3&&(n[a++]=e.getZ(i)),r>=4&&(n[a++]=e.getW(i));return new Du(n,r,e.normalized)}return e.clone()}function G(e,r,n){this.json=e||{},this.extensions=r||{},this.options=n||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new Cd(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new Gu(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function H(e,t,r){var n=t.attributes,i=[];function a(t,n){return r.getDependency("accessor",t).then((function(t){e.addAttribute(n,t)}))}for(var o in n){var s=A[o]||o.toLowerCase();s in e.attributes||i.push(a(n[o],s))}if(void 0!==t.indices&&!e.index){var c=r.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));i.push(c)}return B(e,t),Promise.all(i).then((function(){return void 0!==t.targets?function(e,t,r){for(var n=!1,i=!1,a=0,o=t.length;a<o;a++){if(void 0!==(l=t[a]).POSITION&&(n=!0),void 0!==l.NORMAL&&(i=!0),n&&i)break}if(!n&&!i)return Promise.resolve(e);var s=[],c=[];for(a=0,o=t.length;a<o;a++){var l=t[a];if(n){var h=void 0!==l.POSITION?r.getDependency("accessor",l.POSITION):e.attributes.position;s.push(h)}if(i){h=void 0!==l.NORMAL?r.getDependency("accessor",l.NORMAL):e.attributes.normal;c.push(h)}}return Promise.all([Promise.all(s),Promise.all(c)]).then((function(r){for(var a=r[0],o=r[1],s=0,c=a.length;s<c;s++)e.attributes.position!==a[s]&&(a[s]=U(a[s]));for(s=0,c=o.length;s<c;s++)e.attributes.normal!==o[s]&&(o[s]=U(o[s]));for(s=0,c=t.length;s<c;s++){var l=t[s],h="morphTarget"+s;if(n&&void 0!==l.POSITION){var u=a[s];u.name=h;for(var d=e.attributes.position,p=0,f=u.count;p<f;p++)u.setXYZ(p,u.getX(p)+d.getX(p),u.getY(p)+d.getY(p),u.getZ(p)+d.getZ(p))}if(i&&void 0!==l.NORMAL){var m=o[s];m.name=h;var v=e.attributes.normal;for(p=0,f=m.count;p<f;p++)m.setXYZ(p,m.getX(p)+v.getX(p),m.getY(p)+v.getY(p),m.getZ(p)+v.getZ(p))}}return n&&(e.morphAttributes.position=a),i&&(e.morphAttributes.normal=o),e}))}(e,t.targets,r):e}))}return G.prototype.parse=function(e,t){var r=this,n=this.json,i=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var a={scene:t[0][n.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:n.asset,parser:r,userData:{}};N(i,a,n),B(a,n),e(a)})).catch(t)},G.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],r=this.json.meshes||[],n={},i={},a=0,o=t.length;a<o;a++)for(var s=t[a].joints,c=0,l=s.length;c<l;c++)e[s[c]].isBone=!0;for(var h=0,u=e.length;h<u;h++){var d=e[h];void 0!==d.mesh&&(void 0===n[d.mesh]&&(n[d.mesh]=i[d.mesh]=0),n[d.mesh]++,void 0!==d.skin&&(r[d.mesh].isSkinnedMesh=!0))}this.json.meshReferences=n,this.json.meshUses=i},G.prototype.getDependency=function(e,t){var n=e+":"+t,i=this.cache.get(n);if(!i){switch(e){case"scene":i=this.loadScene(t);break;case"node":i=this.loadNode(t);break;case"mesh":i=this.loadMesh(t);break;case"accessor":i=this.loadAccessor(t);break;case"bufferView":i=this.loadBufferView(t);break;case"buffer":i=this.loadBuffer(t);break;case"material":i=this.loadMaterial(t);break;case"texture":i=this.loadTexture(t);break;case"skin":i=this.loadSkin(t);break;case"animation":i=this.loadAnimation(t);break;case"camera":i=this.loadCamera(t);break;case"light":i=this.extensions[r.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,i)}return i},G.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var r=this,n=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(n.map((function(t,n){return r.getDependency(e,n)}))),this.cache.add(e,t)}return t},G.prototype.loadBuffer=function(e){var t=this.json.buffers[e],n=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[r.KHR_BINARY_GLTF].body);var i=this.options;return new Promise((function(e,r){n.load(D(t.uri,i.path),e,void 0,(function(){r(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},G.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var r=t.byteLength||0,n=t.byteOffset||0;return e.slice(n,n+r)}))},G.prototype.loadAccessor=function(e){var t=this,r=this.json,n=this.json.accessors[e];if(void 0===n.bufferView&&void 0===n.sparse)return Promise.resolve(null);var i=[];return void 0!==n.bufferView?i.push(this.getDependency("bufferView",n.bufferView)):i.push(null),void 0!==n.sparse&&(i.push(this.getDependency("bufferView",n.sparse.indices.bufferView)),i.push(this.getDependency("bufferView",n.sparse.values.bufferView))),Promise.all(i).then((function(e){var i,a,o=e[0],s=E[n.type],c=M[n.componentType],l=c.BYTES_PER_ELEMENT,h=l*s,u=n.byteOffset||0,d=void 0!==n.bufferView?r.bufferViews[n.bufferView].byteStride:void 0,p=!0===n.normalized;if(d&&d!==h){var f=id.floor(u/d),m="InterleavedBuffer:"+n.bufferView+":"+n.componentType+":"+f+":"+n.count,v=t.cache.get(m);v||(i=new c(o,f*d,n.count*d/l),v=new ju(i,d/l),t.cache.add(m,v)),a=new Vu(v,s,u%d/l,p)}else i=null===o?new c(n.count*s):new c(o,u,n.count*s),a=new Du(i,s,p);if(void 0!==n.sparse){var g=E.SCALAR,y=M[n.sparse.indices.componentType],x=n.sparse.indices.byteOffset||0,b=n.sparse.values.byteOffset||0,w=new y(e[1],x,n.sparse.count*g),_=new c(e[2],b,n.sparse.count*s);null!==o&&(a=new Du(a.array.slice(),a.itemSize,a.normalized));for(var S=0,T=w.length;S<T;S++){var A=w[S];if(a.setX(A,_[S*s]),s>=2&&a.setY(A,_[S*s+1]),s>=3&&a.setZ(A,_[S*s+2]),s>=4&&a.setW(A,_[S*s+3]),s>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return a}))},G.prototype.loadTexture=function(e){var t,n=this,i=this.json,a=this.options,o=this.textureLoader,s=window.URL||window.webkitURL,c=i.textures[e],l=c.extensions||{},h=(t=l[r.MSFT_TEXTURE_DDS]?i.images[l[r.MSFT_TEXTURE_DDS].source]:i.images[c.source]).uri,u=!1;return void 0!==t.bufferView&&(h=n.getDependency("bufferView",t.bufferView).then((function(e){u=!0;var r=new Blob([e],{type:t.mimeType});return h=s.createObjectURL(r)}))),Promise.resolve(h).then((function(e){var t=a.manager.getHandler(e);return t||(t=l[r.MSFT_TEXTURE_DDS]?n.extensions[r.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise((function(r,n){t.load(D(e,a.path),r,void 0,n)}))})).then((function(e){!0===u&&s.revokeObjectURL(h),e.flipY=!1,void 0!==c.name&&(e.name=c.name),t.mimeType in I&&(e.format=I[t.mimeType]);var r=(i.samplers||{})[c.sampler]||{};return e.magFilter=S[r.magFilter]||Qu,e.minFilter=S[r.minFilter]||$u,e.wrapS=T[r.wrapS]||Sd,e.wrapT=T[r.wrapT]||Sd,e}))},G.prototype.assignTexture=function(e,t,n){var i=this;return this.getDependency("texture",n.index).then((function(a){if(!a.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":a.format=Md}if(i.extensions[r.KHR_TEXTURE_TRANSFORM]){var o=void 0!==n.extensions?n.extensions[r.KHR_TEXTURE_TRANSFORM]:void 0;o&&(a=i.extensions[r.KHR_TEXTURE_TRANSFORM].extendTexture(a,o))}e[t]=a}))},G.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,i=this.extensions,a=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,s=void 0===t.attributes.normal,c=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,h=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+n.uuid,d=this.cache.get(u);d||(d=new xd,nd.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(u,d)),n=d}else if(e.isLine){u="LineBasicMaterial:"+n.uuid;var p=this.cache.get(u);p||(p=new Zu,nd.prototype.copy.call(p,n),p.color.copy(n.color),this.cache.add(u,p)),n=p}if(a||o||s||c||l){u="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),c&&(u+="skinning:"),a&&(u+="vertex-tangents:"),o&&(u+="vertex-colors:"),s&&(u+="flat-shading:"),l&&(u+="morph-targets:"),h&&(u+="morph-normals:");var f=this.cache.get(u);f||(f=n.isGLTFSpecularGlossinessMaterial?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(n):n.clone(),c&&(f.skinning=!0),a&&(f.vertexTangents=!0),o&&(f.vertexColors=zd),s&&(f.flatShading=!0),l&&(f.morphTargets=!0),h&&(f.morphNormals=!0),this.cache.add(u,f)),n=f}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&(console.log("THREE.GLTFLoader: Duplicating UVs to support aoMap."),t.addAttribute("uv2",new Du(t.attributes.uv.array,2))),n.isGLTFSpecularGlossinessMaterial&&(e.onBeforeRender=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms),e.material=n},G.prototype.loadMaterial=function(e){var t,n=this.json,i=this.extensions,a=n.materials[e],o={},s=a.extensions||{},c=[];if(s[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var l=i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=l.getMaterialType(),c.push(l.extendParams(o,a,this))}else if(s[r.KHR_MATERIALS_UNLIT]){var h=i[r.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),c.push(h.extendParams(o,a,this))}else{t=cd;var u=a.pbrMetallicRoughness||{};if(o.color=new zu(1,1,1),o.opacity=1,Array.isArray(u.baseColorFactor)){var d=u.baseColorFactor;o.color.fromArray(d),o.opacity=d[3]}void 0!==u.baseColorTexture&&c.push(this.assignTexture(o,"map",u.baseColorTexture)),o.metalness=void 0!==u.metallicFactor?u.metallicFactor:1,o.roughness=void 0!==u.roughnessFactor?u.roughnessFactor:1,void 0!==u.metallicRoughnessTexture&&(c.push(this.assignTexture(o,"metalnessMap",u.metallicRoughnessTexture)),c.push(this.assignTexture(o,"roughnessMap",u.metallicRoughnessTexture)))}!0===a.doubleSided&&(o.side=Uu);var p=a.alphaMode||P;return p===O?o.transparent=!0:(o.transparent=!1,p===C&&(o.alphaTest=void 0!==a.alphaCutoff?a.alphaCutoff:.5)),void 0!==a.normalTexture&&t!==sd&&(c.push(this.assignTexture(o,"normalMap",a.normalTexture)),o.normalScale=new Nd(1,1),void 0!==a.normalTexture.scale&&o.normalScale.set(a.normalTexture.scale,a.normalTexture.scale)),void 0!==a.occlusionTexture&&t!==sd&&(c.push(this.assignTexture(o,"aoMap",a.occlusionTexture)),void 0!==a.occlusionTexture.strength&&(o.aoMapIntensity=a.occlusionTexture.strength)),void 0!==a.emissiveFactor&&t!==sd&&(o.emissive=(new zu).fromArray(a.emissiveFactor)),void 0!==a.emissiveTexture&&t!==sd&&c.push(this.assignTexture(o,"emissiveMap",a.emissiveTexture)),Promise.all(c).then((function(){var e;return e=t===Ad?i[r.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(o):new t(o),void 0!==a.name&&(e.name=a.name),e.map&&(e.map.encoding=Fd),e.emissiveMap&&(e.emissiveMap.encoding=Fd),e.specularMap&&(e.specularMap.encoding=Fd),B(e,a),a.extensions&&N(i,e,a),e}))},G.prototype.loadGeometries=function(e){var t=this,n=this.extensions,i=this.primitiveCache;function a(e){return n[r.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(r){return H(r,e,t)}))}for(var o,s,c=[],l=0,h=e.length;l<h;l++){var u,d=e[l],p=(s=void 0,(s=(o=d).extensions&&o.extensions[r.KHR_DRACO_MESH_COMPRESSION])?"draco:"+s.bufferView+":"+s.indices+":"+F(s.attributes):o.indices+":"+F(o.attributes)+":"+o.mode),f=i[p];if(f)c.push(f.promise);else u=d.extensions&&d.extensions[r.KHR_DRACO_MESH_COMPRESSION]?a(d):H(new Nu,d,t),i[p]={primitive:d,promise:u},c.push(u)}return Promise.all(c)},G.prototype.loadMesh=function(e){for(var t=this,r=this.json.meshes[e],n=r.primitives,i=[],a=0,o=n.length;a<o;a++){var s=void 0===n[a].material?m=m||new cd({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:Hu}):this.getDependency("material",n[a].material);i.push(s)}return Promise.all(i).then((function(i){return t.loadGeometries(n).then((function(a){for(var o=[],s=0,c=a.length;s<c;s++){var l,h=a[s],u=n[s],d=i[s];if(u.mode===b||u.mode===w||u.mode===_||void 0===u.mode)!0!==(l=!0===r.isSkinnedMesh?new Rd(h,d):new od(h,d)).isSkinnedMesh||l.geometry.attributes.skinWeight.normalized||l.normalizeSkinWeights(),u.mode===w?l.drawMode=Id:u.mode===_&&(l.drawMode=Od);else if(u.mode===g)l=new Ku(h,d);else if(u.mode===x)l=new Yu(h,d);else if(u.mode===y)l=new Ju(h,d);else{if(u.mode!==v)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+u.mode);l=new yd(h,d)}Object.keys(l.geometry.morphAttributes).length>0&&z(l,r),l.name=r.name||"mesh_"+e,a.length>1&&(l.name+="_"+s),B(l,r),t.assignFinalMaterial(l),o.push(l)}if(1===o.length)return o[0];var p=new ku;for(s=0,c=o.length;s<c;s++)p.add(o[s]);return p}))}))},G.prototype.loadCamera=function(e){var t,r=this.json.cameras[e],n=r[r.type];if(n)return"perspective"===r.type?t=new vd(_Math.radToDeg(n.yfov),n.aspectRatio||1,n.znear||1,n.zfar||2e6):"orthographic"===r.type&&(t=new md(n.xmag/-2,n.xmag/2,n.ymag/2,n.ymag/-2,n.znear,n.zfar)),void 0!==r.name&&(t.name=r.name),B(t,r),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},G.prototype.loadSkin=function(e){var t=this.json.skins[e],r={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(r):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return r.inverseBindMatrices=e,r}))},G.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],r=[],n=[],i=[],a=[],o=[],s=0,c=t.channels.length;s<c;s++){var l=t.channels[s],h=t.samplers[l.sampler],u=l.target,d=void 0!==u.node?u.node:u.id,p=void 0!==t.parameters?t.parameters[h.input]:h.input,m=void 0!==t.parameters?t.parameters[h.output]:h.output;r.push(this.getDependency("node",d)),n.push(this.getDependency("accessor",p)),i.push(this.getDependency("accessor",m)),a.push(h),o.push(u)}return Promise.all([Promise.all(r),Promise.all(n),Promise.all(i),Promise.all(a),Promise.all(o)]).then((function(r){for(var n=r[0],i=r[1],a=r[2],o=r[3],s=r[4],c=[],l=0,h=n.length;l<h;l++){var u=n[l],d=i[l],p=a[l],m=o[l],v=s[l];if(void 0!==u){var g;switch(u.updateMatrix(),u.matrixAutoUpdate=!0,L[v.path]){case L.weights:g=pd;break;case L.rotation:g=wd;break;case L.position:case L.scale:default:g=Bd}var y=u.name?u.name:u.uuid,x=void 0!==m.interpolation?R[m.interpolation]:Xu,b=[];L[v.path]===L.weights?u.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&b.push(e.name?e.name:e.uuid)})):b.push(y);var w=p.array;if(p.normalized){var _;if(w.constructor===Int8Array)_=1/127;else if(w.constructor===Uint8Array)_=1/255;else if(w.constructor==Int16Array)_=1/32767;else{if(w.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");_=1/65535}for(var M=new Float32Array(w.length),S=0,T=w.length;S<T;S++)M[S]=w[S]*_;w=M}for(S=0,T=b.length;S<T;S++){var E=new g(b[S]+"."+L[v.path],d.array,w,x);"CUBICSPLINE"===m.interpolation&&(E.createInterpolant=function(e){return new f(this.times,this.values,this.getValueSize()/3,e)},E.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(E)}}}var A=void 0!==t.name?t.name:"animation_"+e;return new Ou(A,void 0,c)}))},G.prototype.loadNode=function(e){var t,n=this.json,i=this.extensions,a=this,o=n.meshReferences,s=n.meshUses,c=n.nodes[e];return(t=[],void 0!==c.mesh&&t.push(a.getDependency("mesh",c.mesh).then((function(e){var t;if(o[c.mesh]>1){var r=s[c.mesh]++;(t=e.clone()).name+="_instance_"+r,t.onBeforeRender=e.onBeforeRender;for(var n=0,i=t.children.length;n<i;n++)t.children[n].name+="_instance_"+r,t.children[n].onBeforeRender=e.children[n].onBeforeRender}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,r=c.weights.length;t<r;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(a.getDependency("camera",c.camera)),c.extensions&&c.extensions[r.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[r.KHR_LIGHTS_PUNCTUAL].light&&t.push(a.getDependency("light",c.extensions[r.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new Iu:e.length>1?new ku:1===e.length?e[0]:new fd)!==e[0])for(var r=0,n=e.length;r<n;r++)t.add(e[r]);if(void 0!==c.name&&(t.userData.name=c.name,t.name=bd.sanitizeNodeName(c.name)),B(t,c),c.extensions&&N(i,t,c),void 0!==c.matrix){var a=new ad;a.fromArray(c.matrix),t.applyMatrix(a)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},G.prototype.loadScene=function(){function e(t,r,n,i){var a=n.nodes[t];return i.getDependency("node",t).then((function(e){return void 0===a.skin?e:i.getDependency("skin",a.skin).then((function(e){for(var r=[],n=0,a=(t=e).joints.length;n<a;n++)r.push(i.getDependency("node",t.joints[n]));return Promise.all(r)})).then((function(r){return e.traverse((function(e){if(e.isMesh){for(var n=[],i=[],a=0,o=r.length;a<o;a++){var s=r[a];if(s){n.push(s);var c=new ad;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*a),i.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[a])}e.bind(new Ld(n,i),e.matrixWorld)}})),e}));var t})).then((function(t){r.add(t);var o=[];if(a.children)for(var s=a.children,c=0,l=s.length;c<l;c++){var h=s[c];o.push(e(h,t,n,i))}return Promise.all(o)}))}return function(t){var r=this.json,n=this.extensions,i=this.json.scenes[t],a=new Td;void 0!==i.name&&(a.name=i.name),B(a,i),i.extensions&&N(n,a,i);for(var o=i.nodes||[],s=[],c=0,l=o.length;c<l;c++)s.push(e(o[c],a,r,this));return Promise.all(s).then((function(){return a}))}}(),e}(),Gd=new Ru,Hd=new Ud,kd=new Cu,jd=new Vl.TextureLoader,Vd={},Wd=function(e){var t=Vd[e];return Yd(t)},qd=function(e){return new Promise((function(t,r){var n=null,i=null;if(e.indexOf(".obj")>-1&&(n=Gd,i=Yd),e.indexOf(".gltf")>-1&&(n=Hd,i=Xd),e.indexOf(".o.json")>-1&&(n=kd,i=Yd),(e.indexOf(".png")>-1||e.indexOf(".jpg")>-1)&&(n=jd,i=Zd),Vd[e])return t(i(Vd[e]));n.load(e,(function(r){Vd[e]=r,t(i(Vd[e]))}))}))},Xd=function(e){var t={animations:e.animations,scene:e.scene.clone(!0)},r={};e.scene.traverse((function(e){e.isSkinnedMesh&&(r[e.name]=e)}));var n={},i={};for(var a in t.scene.traverse((function(e){e.isBone&&(n[e.name]=e),e.isSkinnedMesh&&(i[e.name]=e)})),r){for(var o=r[a].skeleton,s=i[a],c=[],l=0;l<o.bones.length;++l){var h=n[o.bones[l].name];c.push(h)}s.bind(new Vl.Skeleton(c,o.boneInverses),s.matrixWorld)}return t},Yd=function(e){return e.clone()},Zd=function(e){return e},Jd=r(8),Kd=r.n(Jd),Qd=r(6),$d=r.n(Qd);function ep(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var tp={floor:"地板",ceiling:"天花板",table:"桌子",lego:"乐高",vase:"花瓶"},rp=function(e){rh()(r,e);var t=ep(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()(this,r),e=t.call(this),n.position&&e.position.copy(n.position),n.quaternion&&e.quaternion.copy(n.quaternion),e.isCustom=!0,e.isCollision=!0,e.zIndex=1,e.collisionType=[tp.floor],e.alpha=.4,e.sourcePosition=new Vl.Vector3,e.targetPosition=(new Vl.Vector3).copy(e.position),e}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}},{key:"update",value:function(){this.position.lerp(this.targetPosition,this.alpha)}},{key:"touchstart",value:function(e){if(this.sourcePosition.copy(this.position),this.targetPosition.copy(this.position),this.isReset=!0,this.alpha=.4,iu.selectId===this.id)return this.isTouch=!0,!1;this.touchBefore()}},{key:"touchmove",value:function(e){if(!this.isTouch)return this.toucher&&clearTimeout(this.toucher),!1;iu.preventDefault(),this.disableSelectedObjectsCollision();var t=this.getIntersect(e);if(t)this.targetPosition.x=Math.round(t.position.x/iu.gridSize)*iu.gridSize,this.targetPosition.z=Math.round(t.position.z/iu.gridSize)*iu.gridSize,this.isReset=this.getCollisionBetween(this.getCollisionMinY(t));else{var r=ql(e.pageX,e.pageY);this.targetPosition.x=Math.round(r.x/iu.gridSize)*iu.gridSize,this.targetPosition.z=Math.round(r.z/iu.gridSize)*iu.gridSize,this.isReset=this.getCollisionBetween()}this.targetPosition.y+=2,this.synchronousSelectedObjectsCollision(),this.enableSelectedObjectsCollision(),this.isReset?iu.setSelectedObjectDisabled(!0):iu.setSelectedObjectDisabled()}},{key:"touchend",value:function(e){this.isReset?(this.targetPosition.copy(this.sourcePosition),this.alpha=.2):(this.targetPosition.y-=2,this.alpha=.1),this.synchronousSelectedObjectsCollision(),iu.setSelectedObjectDisabled()}},{key:"click",value:function(){this.toucher&&clearTimeout(this.toucher),this.isTouch=!0,this.collisionType.includes(tp.ceiling)||this.collisionType.includes(tp.table)||this.collisionType.includes(tp.lego)?iu.selectedObjects=[this].concat(Kd()(this.getSelectNodes())):(this.computeBoundingBox(),iu.selectedObjects=[this]),this.toucher=null}},{key:"computeBoundingBox",value:function(){var e=this.children[0];if(this.indexX=Math.round(this.targetPosition.x/iu.gridSize),this.indexZ=Math.round(this.targetPosition.z/iu.gridSize),e){var t=new Vl.Box3;e.geometry.computeBoundingBox(),t.copy(e.geometry.boundingBox).applyMatrix4(e.matrixWorld);var r={x:(t.max.x-t.min.x)/2,y:(t.max.y-t.min.y)/2,z:(t.max.z-t.min.z)/2},n=this.position;this.box={min:{x:n.x-r.x,y:n.y-r.y,z:n.z-r.z},max:{x:n.x+r.x,y:n.y+r.y,z:n.z+r.z}}}else this.box={min:this.position,max:this.position}}},{key:"touchBefore",value:function(){var e=this;this.toucher&&clearTimeout(this.toucher),this.isTouch=!1,this.toucher=setTimeout((function(){return e.click()}),300)}},{key:"getIntersect",value:function(e){for(var t=iu.event.intersect(e)||[],r=0;r<t.length;r++){var n=t[r];if(n.object&&n.object.parent&&!n.object.parent.isUi)return n.object.parent}return!1}},{key:"disableSelectedObjectsCollision",value:function(){iu.selectedObjects.forEach((function(e){e.isCustom=!1,e.isCollision=!1}))}},{key:"enableSelectedObjectsCollision",value:function(){iu.selectedObjects.forEach((function(e){e.isCustom=!0,e.isCollision=!0}))}},{key:"synchronousSelectedObjectsCollision",value:function(){var e=this,t=null,r=0;iu.selectedObjects.forEach((function(n){t?(n.targetPosition.x=e.targetPosition.x,n.targetPosition.z=e.targetPosition.z,n.alpha=e.alpha,r+=(n.box.max.y-n.box.min.y)/2,n.targetPosition.y=r,r+=(n.box.max.y-n.box.min.y)/2):r=n.targetPosition.y+(n.box.max.y-n.box.min.y)/2,t=n}))}},{key:"getSelectNodes",value:function(){var e=this,t=[];return iu.scene.children.forEach((function(e){e.isCollision&&e.computeBoundingBox()})),iu.scene.children.forEach((function(r){r.isCollision&&r.id!==e.id&&r.indexX==e.indexX&&r.indexZ==e.indexZ&&t.push(r)})),t.filter((function(t){return t.position.y>=e.position.y})).sort((function(e,t){return e.position.y-t.position.y}))}},{key:"getCollisionMinY",value:function(e){var t=[e].concat(Kd()(e.getSelectNodes())),r=null;return t.forEach((function(e){1e4>e.position.y&&(r=e)})),r}},{key:"getCollisionBetween",value:function(e){var t=!1;if(e){this.targetPosition.y=e.box.max.y+(this.box.max.y-this.box.min.y)/2;var r=e.collisionType.includes(tp.ceiling),n=e.collisionType.includes(tp.table),i=e.collisionType.includes(tp.lego),a=this.collisionType.includes(tp.floor),o=(this.collisionType.includes(tp.ceiling),this.collisionType.includes(tp.table),this.collisionType.includes(tp.lego));r||n&&!a||i&&o||(t=!0)}else this.targetPosition.y=0,this.collisionType.includes(tp.floor)||(t=!0);return t}}]),r}(Vl.Object3D);$d()(rp,"CollisionType",tp);function np(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ip(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?np(Object(r),!0).forEach((function(t){$d()(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):np(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var ap={},op="\n  varying vec2 vUv;\n  void main(){\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",sp=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise((function(r,n){qd(e).then((function(e){var n=new Vl.ShaderMaterial(ip({uniforms:{uTexture:{type:"t",value:e}},vertexShader:op,fragmentShader:"    \n            uniform sampler2D uTexture;\n            varying vec2 vUv;\n            void main() {\n              gl_FragColor = texture2D(uTexture, vUv);\n            }\n          ",depthWrite:!1},t));r(n)}))}))},cp=function(){var e="Transparent";return ap[e]||(ap[e]=new Vl.ShaderMaterial({uniforms:{},vertexShader:op,fragmentShader:"    \n        uniform sampler2D uTexture;\n        varying vec2 vUv;\n        void main() {\n          gl_FragColor = vec4(1.0, 1.0, 1.0, 0.0);\n        }\n      ",transparent:!0,depthWrite:!1})),ap[e]},lp=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"#FFFFFF",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r="Matcap_".concat(e);if(ap[r])return ap[r];var n=ap.matcap||(new Vl.TextureLoader).load("./texture/matcap.png");return ap.matcap=n,ap[r]=new Vl.MeshLambertMaterial(ip({alphaTest:.6,color:new Vl.Color(e)},t)),ap[r].color.convertSRGBToLinear(),ap[r]};function hp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var up=function(e){rh()(r,e);var t=hp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Wd("硬币");return a.material=lp("#d5ae34"),n.add(a),n.collisionType=[rp.CollisionType.lego],n}return o()(r)}(rp),dp=r(7),pp=r.n(dp);function fp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var mp=function(e){rh()(r,e);var t=fp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a,o,s=Wd("许愿池");return s.material[0]=lp("#cfc6b8"),s.material[1]=(a={uColorStart:new Vl.Color("#f8f8f8"),uColorEnd:new Vl.Color("#28ccdf")},ap[o="WishingWell"]||(ap[o]=new Vl.ShaderMaterial({uniforms:{uTime:{value:0},uColorStart:{value:a.uColorStart},uColorEnd:{value:a.uColorEnd}},vertexShader:op,fragmentShader:"\n  varying vec2 vUv;\n  uniform float uTime;\n  uniform vec3 uColorStart;\n  uniform vec3 uColorEnd;\n\n  //  Classic Perlin 3D Noise \n  //  by Stefan Gustavson\n  //\n  vec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\n  vec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n  vec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\n\n  float cnoise(vec3 P) {\n      vec3 Pi0 = floor(P); // Integer part for indexing\n      vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n      Pi0 = mod(Pi0, 289.0);\n      Pi1 = mod(Pi1, 289.0);\n      vec3 Pf0 = fract(P); // Fractional part for interpolation\n      vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n      vec4 iy = vec4(Pi0.yy, Pi1.yy);\n      vec4 iz0 = Pi0.zzzz;\n      vec4 iz1 = Pi1.zzzz;\n\n      vec4 ixy = permute(permute(ix) + iy);\n      vec4 ixy0 = permute(ixy + iz0);\n      vec4 ixy1 = permute(ixy + iz1);\n\n      vec4 gx0 = ixy0 / 7.0;\n      vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n      gx0 = fract(gx0);\n      vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n      vec4 sz0 = step(gz0, vec4(0.0));\n      gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n      gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n      vec4 gx1 = ixy1 / 7.0;\n      vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n      gx1 = fract(gx1);\n      vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n      vec4 sz1 = step(gz1, vec4(0.0));\n      gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n      gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n      vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n      vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n      vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n      vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n      vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n      vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n      vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n      vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n      vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n      g000 *= norm0.x;\n      g010 *= norm0.y;\n      g100 *= norm0.z;\n      g110 *= norm0.w;\n      vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n      g001 *= norm1.x;\n      g011 *= norm1.y;\n      g101 *= norm1.z;\n      g111 *= norm1.w;\n\n      float n000 = dot(g000, Pf0);\n      float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n      float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n      float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n      float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n      float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n      float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n      float n111 = dot(g111, Pf1);\n\n      vec3 fade_xyz = fade(Pf0);\n      vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n      vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n      float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n\n      return 2.2 * n_xyz;\n  }\n\n  void main(){\n    vec2 displacedUv = vUv + cnoise(vec3(vUv * 5.0, uTime * 0.1));\n\n    float strength = cnoise(vec3(displacedUv * 5.0, uTime * 0.2));\n    \n    float outerGlow = distance(vUv, vec2(0.5)) * 5.0 - 1.4;\n    strength += outerGlow;\n\n    strength += step(-0.2, strength) * 0.8;\n\n    vec3 mixedColor = mix(uColorStart, uColorEnd, strength);\n\n    gl_FragColor = vec4(mixedColor, 1.0);\n  }\n",transparent:!0,depthWrite:!1})),ap[o]),n.add(s),n.collisionType=[rp.CollisionType.vase],n}return o()(r,[{key:"update",value:function(){pp()(oh()(r.prototype),"update",this).call(this),this.children[0].material[1].uniforms.uTime.value+=.04}}]),r}(rp);function vp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var gp=function(e){rh()(r,e);var t=vp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Wd("草");return a.material[0]=lp("#b6d53c"),a.material[1]=lp("#bf7958"),n.add(a),n}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}}]),r}(rp);function yp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var xp=function(e){rh()(r,e);var t=yp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=Wd("块");return a.material=lp("#ffffff"),n.add(a),n.collisionType=[rp.CollisionType.floor,rp.CollisionType.ceiling],n}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}}]),r}(rp);function bp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var wp=function(e){rh()(r,e);var t=bp(r);function r(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i()(this,r),(e=t.call(this)).x=n.x||0,e.y=n.y||0,e.isCustom=!0,e.isUi=!0,e.zIndex=0,e}return o()(r,[{key:"create",value:function(){}},{key:"destroy",value:function(){}},{key:"update",value:function(){var e=iu.camera,t=1/iu.camera.zoom;this.position.copy(e.position),this.rotation.copy(e.rotation),this.scale.set(t,t,t),this.translateZ(-100),this.translateX(this.x*t),this.translateY(this.y*t),this.updateMatrix()}},{key:"touchstart",value:function(e){iu.preventDefault()}},{key:"touchmove",value:function(e){iu.preventDefault()}},{key:"touchend",value:function(e){iu.preventDefault()}},{key:"click",value:function(e){iu.preventDefault()}}]),r}(Vl.Object3D);function _p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}function Mp(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=oh()(e);if(t){var i=oh()(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return ih()(this,r)}}var Sp={Coin:up,WishingWell:mp,Grass:gp,Whiteboard:xp,SkySwitch:function(e){rh()(r,e);var t=_p(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=new Vl.BoxGeometry(50,50,50),o=new Vl.Mesh(a,cp());return n.add(o),n.x=-100,n.y=-iu.height/2+50,sp("./texture/skySwitch.png",{transparent:!0}).then((function(e){var t=new Vl.PlaneGeometry(60,60),r=new Vl.Mesh(t,e);n.add(r)})),n}return o()(r,[{key:"touchstart",value:function(e){this.animationer&&Kl(this.animationer);var t=this.children[1];t&&(t.material.opacity=.68)}},{key:"touchend",value:function(e){var t=this.children[1];t&&(t.material.opacity=1,this.animationer=Jl(.6,1,800,"Elastic.easeOut",(function(e){t.scale.set(e,e,1)})))}},{key:"click",value:function(){iu.sky&&iu.sky.switch()}}]),r}(wp),Around:function(e){rh()(r,e);var t=Mp(r);function r(e){var n;i()(this,r),n=t.call(this,e);var a=new Vl.BoxGeometry(50,50,50),o=new Vl.Mesh(a,cp());return n.add(o),n.x=0,n.y=-iu.height/2+50,sp("./texture/around.png",{transparent:!0}).then((function(e){var t=new Vl.PlaneGeometry(60,60),r=new Vl.Mesh(t,e);n.add(r)})),n}return o()(r,[{key:"touchstart",value:function(e){this.animationer&&Kl(this.animationer);var t=this.children[1];t&&(t.material.opacity=.68)}},{key:"touchend",value:function(e){var t=this.children[1];t&&(t.material.opacity=1,this.animationer=Jl(0,1,800,"Cubic.easeOut",(function(e){t.rotation.z=-2*e*Math.PI})))}},{key:"click",value:function(){if(pp()(oh()(r.prototype),"click",this).call(this),iu.selectId){this.animationer2&&Kl(this.animationer2);var e=[],t=-Math.PI/2;iu.selectedObjects.forEach((function(r){var n=r.rotation.y,i=t*Math.ceil(n/t)+t;Math.abs(n)>Math.abs(4*t)&&(n-=8*t,i-=8*t);var a=i-n;e.push({mesh:r,from:n,to:i,cz:a})})),this.animationer2=Jl(0,1,800,"Cubic.easeOut",(function(t){e.forEach((function(e){e.mesh.rotation.y=e.from+t*e.cz}))}))}}}]),r}(wp)};iu.start(),qd("./json/data.o.json").then((function(e){e.children.forEach((function(e){Vd[e.name]=e,e.traverse((function(e){e instanceof Vl.Mesh&&(e.castShadow=!0,e.receiveShadow=!0)}))})),Tp()}));var Tp=function(){for(var e=iu.gridSize,t=e/2,r=t*t,n=0;n<r;n++){var i=(n%t-2)*e,a=(Math.floor(n/t)-2)*e,o=new Sp.Whiteboard({position:new Vl.Vector3(i,0,a)});o.name="item_".concat(n),iu.scene.add(o)}for(var s=0;s<2;s++){var c=(s%t-2)*e,l=new Sp.Coin({position:new Vl.Vector3(c,5,0)});l.name="coin".concat(s),iu.scene.add(l)}var h=new Sp.WishingWell({position:new Vl.Vector3(0,6.29,0)});h.name="wishingWell",iu.scene.add(h)};iu.scene.add(new Sp.SkySwitch),iu.scene.add(new Sp.Around)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xOC45QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xOC45QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWRhcHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWRhcHRlci9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xOC45QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX0BiYWJlbF9ydW50aW1lQDcuMTguOUBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xOC45QEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL19AYmFiZWxfcnVudGltZUA3LjE4LjlAQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zdXBlclByb3BCYXNlLmpzIiwid2VicGFjazovLy8uL3NyYy9iYXNlL2xpYnMvVGhyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9ldmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9yZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9jb250cm9scy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL3Bhc3MvQ29weVNoYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL3Bhc3MvUGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL3Bhc3MvU2hhZGVyUGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL3Bhc3MvTWFza1Bhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2UvbGlicy9wYXNzL0VmZmVjdENvbXBvc2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9iYXNlL2xpYnMvcGFzcy9PdXRsaW5lUGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL3Bhc3MvUmVuZGVyUGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9lbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9jaGFvcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9saWJzL09CSkxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9leHRlbmRzL09iakpzb25Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhc2UvbGlicy9HTFRGTG9hZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9iYXNlL2FqYXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL21hdGVyaWFsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jhc2UvY29pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9iYXNlL3dpc2hpbmdXZWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vc2hhZGVyL3dpc2hpbmdXZWxsU2hhZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2JveC9ncmFzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9ib3gvd2hpdGVib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy91aS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy91aS9za3lTd2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdWkvYXJvdW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInJlcXVpcmUiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwib2JqIiwiaXRlcmF0b3IiLCJzdXBlclByb3BCYXNlIiwiX2dldCIsIlJlZmxlY3QiLCJyZWNlaXZlciIsImJhc2UiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJ0aGlzIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5Iiwid2luZG93IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiX3NldFByb3RvdHlwZU9mIiwiUmVmZXJlbmNlRXJyb3IiLCJhcnJheUxpa2VUb0FycmF5IiwiaXNBcnJheSIsIml0ZXIiLCJmcm9tIiwibWluTGVuIiwidG9TdHJpbmciLCJzbGljZSIsInRlc3QiLCJUSFJFRSIsInVuZGVmaW5lZCIsIk51bWJlciIsIkVQU0lMT04iLCJNYXRoIiwicG93IiwiaXNJbnRlZ2VyIiwiaXNGaW5pdGUiLCJmbG9vciIsInNpZ24iLCJ4IiwiRnVuY3Rpb24iLCJtYXRjaCIsImFzc2lnbiIsIm91dHB1dCIsImluZGV4Iiwic291cmNlIiwibmV4dEtleSIsIkV2ZW50RGlzcGF0Y2hlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJhcnJheSIsIl9sdXQiLCJfTWF0aCIsIkRFRzJSQUQiLCJQSSIsIlJBRDJERUciLCJnZW5lcmF0ZVVVSUQiLCJkMCIsInJhbmRvbSIsImQxIiwiZDIiLCJkMyIsInRvVXBwZXJDYXNlIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJldWNsaWRlYW5Nb2R1bG8iLCJtYXBMaW5lYXIiLCJhMSIsImEyIiwiYjEiLCJiMiIsImxlcnAiLCJ5Iiwic21vb3Roc3RlcCIsInNtb290aGVyc3RlcCIsInJhbmRJbnQiLCJsb3ciLCJoaWdoIiwicmFuZEZsb2F0IiwicmFuZEZsb2F0U3ByZWFkIiwicmFuZ2UiLCJkZWdUb1JhZCIsImRlZ3JlZXMiLCJyYWRUb0RlZyIsInJhZGlhbnMiLCJpc1Bvd2VyT2ZUd28iLCJjZWlsUG93ZXJPZlR3byIsImNlaWwiLCJsb2ciLCJMTjIiLCJmbG9vclBvd2VyT2ZUd28iLCJWZWN0b3IyIiwiUXVhdGVybmlvbiIsInoiLCJ3IiwiX3giLCJfeSIsIl96IiwiX3ciLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2V0IiwiaXNWZWN0b3IyIiwic2V0U2NhbGFyIiwic2NhbGFyIiwic2V0WCIsInNldFkiLCJzZXRDb21wb25lbnQiLCJFcnJvciIsImdldENvbXBvbmVudCIsImNsb25lIiwiY29weSIsInYiLCJhZGQiLCJjb25zb2xlIiwid2FybiIsImFkZFZlY3RvcnMiLCJhZGRTY2FsYXIiLCJhIiwiYiIsImFkZFNjYWxlZFZlY3RvciIsInN1YiIsInN1YlZlY3RvcnMiLCJzdWJTY2FsYXIiLCJtdWx0aXBseSIsIm11bHRpcGx5U2NhbGFyIiwiZGl2aWRlIiwiZGl2aWRlU2NhbGFyIiwiYXBwbHlNYXRyaXgzIiwiZSIsImVsZW1lbnRzIiwiY2xhbXBTY2FsYXIiLCJtaW5WYWwiLCJtYXhWYWwiLCJjbGFtcExlbmd0aCIsInJvdW5kIiwicm91bmRUb1plcm8iLCJuZWdhdGUiLCJkb3QiLCJjcm9zcyIsImxlbmd0aFNxIiwic3FydCIsIm1hbmhhdHRhbkxlbmd0aCIsImFicyIsIm5vcm1hbGl6ZSIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZVRvIiwiZGlzdGFuY2VUb1NxdWFyZWQiLCJkeCIsImR5IiwibWFuaGF0dGFuRGlzdGFuY2VUbyIsInNldExlbmd0aCIsImFscGhhIiwibGVycFZlY3RvcnMiLCJ2MSIsInYyIiwiZXF1YWxzIiwiZnJvbUFycmF5Iiwib2Zmc2V0IiwidG9BcnJheSIsImZyb21CdWZmZXJBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRYIiwiZ2V0WSIsInJvdGF0ZUFyb3VuZCIsImNlbnRlciIsImNvcyIsInNpbiIsInNsZXJwIiwicWEiLCJxYiIsInFtIiwic2xlcnBGbGF0IiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJkaXIiLCJzcXJTaW4iLCJ0RGlyIiwiZiIsIl9vbkNoYW5nZUNhbGxiYWNrIiwiaXNRdWF0ZXJuaW9uIiwicXVhdGVybmlvbiIsInNldEZyb21FdWxlciIsImV1bGVyIiwidXBkYXRlIiwiaXNFdWxlciIsIm9yZGVyIiwiYzEiLCJjMiIsImMzIiwiczEiLCJzMiIsInMzIiwic2V0RnJvbUF4aXNBbmdsZSIsImF4aXMiLCJoYWxmQW5nbGUiLCJzZXRGcm9tUm90YXRpb25NYXRyaXgiLCJ0ZSIsIm0xMSIsIm0xMiIsIm0xMyIsIm0yMSIsIm0yMiIsIm0yMyIsIm0zMSIsIm0zMiIsIm0zMyIsInRyYWNlIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidkZyb20iLCJ2VG8iLCJhbmdsZVRvIiwicSIsImFjb3MiLCJyb3RhdGVUb3dhcmRzIiwic3RlcCIsImludmVyc2UiLCJjb25qdWdhdGUiLCJtdWx0aXBseVF1YXRlcm5pb25zIiwicHJlbXVsdGlwbHkiLCJxYXgiLCJxYXkiLCJxYXoiLCJxYXciLCJxYngiLCJxYnkiLCJxYnoiLCJxYnciLCJjb3NIYWxmVGhldGEiLCJzcXJTaW5IYWxmVGhldGEiLCJzaW5IYWxmVGhldGEiLCJoYWxmVGhldGEiLCJyYXRpb0EiLCJyYXRpb0IiLCJfb25DaGFuZ2UiLCJjYWxsYmFjayIsIl92ZWN0b3IiLCJWZWN0b3IzIiwiX3F1YXRlcm5pb24iLCJpc1ZlY3RvcjMiLCJzZXRaIiwibXVsdGlwbHlWZWN0b3JzIiwiYXBwbHlFdWxlciIsImVycm9yIiwiYXBwbHlRdWF0ZXJuaW9uIiwiYXBwbHlBeGlzQW5nbGUiLCJhcHBseU1hdHJpeDQiLCJxeCIsInF5IiwicXoiLCJxdyIsIml4IiwiaXkiLCJpeiIsIml3IiwicHJvamVjdCIsImNhbWVyYSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsInByb2plY3Rpb25NYXRyaXgiLCJ1bnByb2plY3QiLCJwcm9qZWN0aW9uTWF0cml4SW52ZXJzZSIsIm1hdHJpeFdvcmxkIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiY3Jvc3NWZWN0b3JzIiwiYXgiLCJheSIsImF6IiwiYngiLCJieSIsImJ6IiwicHJvamVjdE9uVmVjdG9yIiwicHJvamVjdE9uUGxhbmUiLCJwbGFuZU5vcm1hbCIsInJlZmxlY3QiLCJub3JtYWwiLCJkZW5vbWluYXRvciIsInRoZXRhIiwiZHoiLCJzZXRGcm9tU3BoZXJpY2FsIiwic2V0RnJvbVNwaGVyaWNhbENvb3JkcyIsInJhZGl1cyIsInBoaSIsInNpblBoaVJhZGl1cyIsInNldEZyb21DeWxpbmRyaWNhbCIsInNldEZyb21DeWxpbmRyaWNhbENvb3JkcyIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsInNldEZyb21NYXRyaXhTY2FsZSIsInN4Iiwic2V0RnJvbU1hdHJpeENvbHVtbiIsInN5Iiwic3oiLCJnZXRaIiwiX2NhbnZhcyIsIl92ZWN0b3IkMSIsIk1hdHJpeDMiLCJpc01hdHJpeDMiLCJuMTEiLCJuMTIiLCJuMTMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJpZGVudGl0eSIsIm1lIiwic2V0RnJvbU1hdHJpeDQiLCJhcHBseVRvQnVmZmVyQXR0cmlidXRlIiwiY291bnQiLCJzZXRYWVoiLCJtdWx0aXBseU1hdHJpY2VzIiwiYWUiLCJiZSIsImExMSIsImExMiIsImExMyIsImEyMSIsImEyMiIsImEyMyIsImEzMSIsImEzMiIsImEzMyIsImIxMSIsImIxMiIsImIxMyIsImIyMSIsImIyMiIsImIyMyIsImIzMSIsImIzMiIsImIzMyIsImRldGVybWluYW50IiwiZyIsImgiLCJnZXRJbnZlcnNlIiwibWF0cml4IiwidGhyb3dPbkRlZ2VuZXJhdGUiLCJpc01hdHJpeDQiLCJ0MTEiLCJ0MTIiLCJ0MTMiLCJkZXQiLCJtc2ciLCJkZXRJbnYiLCJ0cmFuc3Bvc2UiLCJ0bXAiLCJnZXROb3JtYWxNYXRyaXgiLCJtYXRyaXg0IiwidHJhbnNwb3NlSW50b0FycmF5Iiwic2V0VXZUcmFuc2Zvcm0iLCJ0eCIsInR5Iiwicm90YXRpb24iLCJjeCIsImN5Iiwic2NhbGUiLCJyb3RhdGUiLCJ0cmFuc2xhdGUiLCJJbWFnZVV0aWxzIiwiZ2V0RGF0YVVSTCIsImltYWdlIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJzcmMiLCJjcmVhdGVFbGVtZW50TlMiLCJ3aWR0aCIsImhlaWdodCIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiZHJhd0ltYWdlIiwidG9EYXRhVVJMIiwidGV4dHVyZUlkIiwiVGV4dHVyZSIsIm1hcHBpbmciLCJ3cmFwUyIsIndyYXBUIiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwiZm9ybWF0IiwiYW5pc290cm9weSIsImVuY29kaW5nIiwidXVpZCIsIkRFRkFVTFRfSU1BR0UiLCJtaXBtYXBzIiwiREVGQVVMVF9NQVBQSU5HIiwicmVwZWF0IiwibWF0cml4QXV0b1VwZGF0ZSIsImdlbmVyYXRlTWlwbWFwcyIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsInVucGFja0FsaWdubWVudCIsInZlcnNpb24iLCJvblVwZGF0ZSIsIlZlY3RvcjQiLCJXZWJHTFJlbmRlclRhcmdldCIsIm9wdGlvbnMiLCJzY2lzc29yIiwic2Npc3NvclRlc3QiLCJ2aWV3cG9ydCIsInRleHR1cmUiLCJkZXB0aEJ1ZmZlciIsInN0ZW5jaWxCdWZmZXIiLCJkZXB0aFRleHR1cmUiLCJXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0Iiwic2FtcGxlcyIsImlzVGV4dHVyZSIsInVwZGF0ZU1hdHJpeCIsInRvSlNPTiIsIm1ldGEiLCJpc1Jvb3RPYmplY3QiLCJ0ZXh0dXJlcyIsIm1ldGFkYXRhIiwiZ2VuZXJhdG9yIiwid3JhcCIsImltYWdlcyIsInVybCIsImRpc3Bvc2UiLCJ0cmFuc2Zvcm1VdiIsInV2IiwiaXNWZWN0b3I0Iiwic2V0VyIsInNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwieHgiLCJ5eSIsInp6IiwieHkiLCJ4eiIsInl6IiwiZ2V0VyIsImlzV2ViR0xSZW5kZXJUYXJnZXQiLCJzZXRTaXplIiwiaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiX3YxIiwiX20xIiwiTWF0cml4NCIsIl96ZXJvIiwiX29uZSIsIm4xNCIsIm4yNCIsIm4zNCIsIm40MSIsIm40MiIsIm40MyIsIm40NCIsImNvcHlQb3NpdGlvbiIsImV4dHJhY3RCYXNpcyIsInhBeGlzIiwieUF4aXMiLCJ6QXhpcyIsIm1ha2VCYXNpcyIsImV4dHJhY3RSb3RhdGlvbiIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsIm1ha2VSb3RhdGlvbkZyb21FdWxlciIsImFmIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJjb21wb3NlIiwibG9va0F0IiwiZXllIiwidXAiLCJhMTQiLCJhMjQiLCJhMzQiLCJhNDEiLCJhNDIiLCJhNDMiLCJhNDQiLCJiMTQiLCJiMjQiLCJiMzQiLCJiNDEiLCJiNDIiLCJiNDMiLCJiNDQiLCJzZXRQb3NpdGlvbiIsInQxNCIsImdldE1heFNjYWxlT25BeGlzIiwic2NhbGVYU3EiLCJzY2FsZVlTcSIsInNjYWxlWlNxIiwibWFrZVRyYW5zbGF0aW9uIiwibWFrZVJvdGF0aW9uWCIsIm1ha2VSb3RhdGlvblkiLCJtYWtlUm90YXRpb25aIiwibWFrZVJvdGF0aW9uQXhpcyIsIm1ha2VTY2FsZSIsIm1ha2VTaGVhciIsInBvc2l0aW9uIiwieDIiLCJ5MiIsInoyIiwid3giLCJ3eSIsInd6IiwiZGVjb21wb3NlIiwiaW52U1giLCJpbnZTWSIsImludlNaIiwibWFrZVBlcnNwZWN0aXZlIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibmVhciIsImZhciIsIm1ha2VPcnRob2dyYXBoaWMiLCJfbWF0cml4IiwiX3F1YXRlcm5pb24kMSIsIkV1bGVyIiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiTGF5ZXJzIiwibWFzayIsIlJvdGF0aW9uT3JkZXJzIiwiYXNpbiIsInNldEZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJ0b1ZlY3RvcjMiLCJvcHRpb25hbFJlc3VsdCIsImNoYW5uZWwiLCJlbmFibGUiLCJlbmFibGVBbGwiLCJ0b2dnbGUiLCJkaXNhYmxlIiwiZGlzYWJsZUFsbCIsImxheWVycyIsIl9vYmplY3QzRElkIiwiX3YxJDEiLCJfcTEiLCJfbTEkMSIsIl90YXJnZXQiLCJfcG9zaXRpb24iLCJfc2NhbGUiLCJfcXVhdGVybmlvbiQyIiwiX3hBeGlzIiwiX3lBeGlzIiwiX3pBeGlzIiwiX2FkZGVkRXZlbnQiLCJfcmVtb3ZlZEV2ZW50IiwiT2JqZWN0M0QiLCJwYXJlbnQiLCJjaGlsZHJlbiIsIkRlZmF1bHRVcCIsIm1vZGVsVmlld01hdHJpeCIsIm5vcm1hbE1hdHJpeCIsIkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlIiwibWF0cml4V29ybGROZWVkc1VwZGF0ZSIsInZpc2libGUiLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsImZydXN0dW1DdWxsZWQiLCJyZW5kZXJPcmRlciIsInVzZXJEYXRhIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiZm9nIiwib3ZlcnJpZGVNYXRlcmlhbCIsImF1dG9VcGRhdGUiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsImlzT2JqZWN0M0QiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJhcHBseU1hdHJpeCIsInNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZSIsInNldFJvdGF0aW9uRnJvbUV1bGVyIiwic2V0Um90YXRpb25Gcm9tTWF0cml4Iiwic2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbiIsInJvdGF0ZU9uQXhpcyIsInJvdGF0ZU9uV29ybGRBeGlzIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwidHJhbnNsYXRlT25BeGlzIiwiZGlzdGFuY2UiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJsb2NhbFRvV29ybGQiLCJ2ZWN0b3IiLCJ3b3JsZFRvTG9jYWwiLCJ1cGRhdGVXb3JsZE1hdHJpeCIsImlzQ2FtZXJhIiwiaXNMaWdodCIsInJlbW92ZSIsImF0dGFjaCIsImdldE9iamVjdEJ5SWQiLCJpZCIsImdldE9iamVjdEJ5UHJvcGVydHkiLCJnZXRPYmplY3RCeU5hbWUiLCJnZXRXb3JsZFBvc2l0aW9uIiwidXBkYXRlTWF0cml4V29ybGQiLCJnZXRXb3JsZFF1YXRlcm5pb24iLCJnZXRXb3JsZFNjYWxlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJyYXljYXN0IiwidHJhdmVyc2UiLCJ0cmF2ZXJzZVZpc2libGUiLCJ0cmF2ZXJzZUFuY2VzdG9ycyIsImZvcmNlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiZ2VvbWV0cmllcyIsIm1hdGVyaWFscyIsInNoYXBlcyIsInNlcmlhbGl6ZSIsImxpYnJhcnkiLCJlbGVtZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImlzTWVzaCIsImRyYXdNb2RlIiwiaXNMaW5lIiwiaXNQb2ludHMiLCJnZW9tZXRyeSIsInBhcmFtZXRlcnMiLCJzaGFwZSIsIm1hdGVyaWFsIiwidXVpZHMiLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJkYXRhIiwicmVjdXJzaXZlIiwicGFyc2UiLCJjaGlsZCIsImlzU2NlbmUiLCJfcG9pbnRzIiwiX3ZlY3RvciQyIiwiX3YwIiwiX3YxJDIiLCJfdjIiLCJfZjAiLCJfZjEiLCJfZjIiLCJfY2VudGVyIiwiX2V4dGVudHMiLCJfdHJpYW5nbGVOb3JtYWwiLCJfdGVzdEF4aXMiLCJCb3gzIiwiSW5maW5pdHkiLCJzYXRGb3JBeGVzIiwiYXhlcyIsInYwIiwiZXh0ZW50cyIsImoiLCJwMCIsInAxIiwicDIiLCJpc0JveDMiLCJzZXRGcm9tQXJyYXkiLCJtaW5YIiwibWluWSIsIm1pbloiLCJtYXhYIiwibWF4WSIsIm1heFoiLCJzZXRGcm9tQnVmZmVyQXR0cmlidXRlIiwic2V0RnJvbVBvaW50cyIsInBvaW50cyIsIm1ha2VFbXB0eSIsImlsIiwiZXhwYW5kQnlQb2ludCIsInNldEZyb21DZW50ZXJBbmRTaXplIiwic2l6ZSIsImhhbGZTaXplIiwic2V0RnJvbU9iamVjdCIsImV4cGFuZEJ5T2JqZWN0IiwiYm94IiwiaXNFbXB0eSIsImdldENlbnRlciIsImdldFNpemUiLCJwb2ludCIsImV4cGFuZEJ5VmVjdG9yIiwiZXhwYW5kQnlTY2FsYXIiLCJpc0dlb21ldHJ5IiwidmVydGljZXMiLCJpc0J1ZmZlckdlb21ldHJ5IiwiYXR0cmlidXRlcyIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ0cmlhbmdsZSIsImRpc3RhbmNlVG9Qb2ludCIsImdldEJvdW5kaW5nU3BoZXJlIiwiaW50ZXJzZWN0IiwidW5pb24iLCJfYm94IiwiU3BoZXJlIiwib3B0aW9uYWxDZW50ZXIiLCJtYXhSYWRpdXNTcSIsImVtcHR5IiwicmFkaXVzU3VtIiwiZGVsdGFMZW5ndGhTcSIsImdldEJvdW5kaW5nQm94IiwiX3ZlY3RvciQzIiwiX3NlZ0NlbnRlciIsIl9zZWdEaXIiLCJfZGlmZiIsIl9lZGdlMSIsIl9lZGdlMiIsIl9ub3JtYWwiLCJSYXkiLCJvcmlnaW4iLCJkaXJlY3Rpb24iLCJyYXkiLCJhdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzMCIsInNxckRpc3QiLCJleHREZXQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImJhY2tmYWNlQ3VsbGluZyIsIkRkTiIsIkRkUXhFMiIsIkRkRTF4USIsIlFkTiIsIl92MCQxIiwiX3YxJDMiLCJfdjIkMSIsIl92MyIsIl92YWIiLCJfdmFjIiwiX3ZiYyIsIl92YXAiLCJfdmJwIiwiX3ZjcCIsIlRyaWFuZ2xlIiwiZ2V0Tm9ybWFsIiwidGFyZ2V0TGVuZ3RoU3EiLCJnZXRCYXJ5Y29vcmQiLCJkb3QwMCIsImRvdDAxIiwiZG90MDIiLCJkb3QxMSIsImRvdDEyIiwiZGVub20iLCJpbnZEZW5vbSIsInUiLCJnZXRVViIsInAzIiwidXYxIiwidXYyIiwidXYzIiwiaXNGcm9udEZhY2luZyIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiaTAiLCJpMSIsImkyIiwiZ2V0QXJlYSIsImdldE1pZHBvaW50IiwiZ2V0UGxhbmUiLCJzZXRGcm9tQ29wbGFuYXJQb2ludHMiLCJkNCIsInZjIiwiZDUiLCJkNiIsInZiIiwidmEiLCJfY29sb3JLZXl3b3JkcyIsIl9oc2xBIiwiX2hzbEIiLCJDb2xvciIsInNldFJHQiIsImh1ZTJyZ2IiLCJTUkdCVG9MaW5lYXIiLCJMaW5lYXJUb1NSR0IiLCJGYWNlMyIsImNvbG9yIiwibWF0ZXJpYWxJbmRleCIsInZlcnRleE5vcm1hbHMiLCJpc0NvbG9yIiwidmVydGV4Q29sb3JzIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJoZXgiLCJzZXRIU0wiLCJzdHlsZSIsImhhbmRsZUFscGhhIiwic3RyaW5nIiwicGFyc2VGbG9hdCIsImV4ZWMiLCJjb21wb25lbnRzIiwicGFyc2VJbnQiLCJjaGFyQXQiLCJjb3B5R2FtbWFUb0xpbmVhciIsImdhbW1hRmFjdG9yIiwiY29weUxpbmVhclRvR2FtbWEiLCJzYWZlSW52ZXJzZSIsImNvbnZlcnRHYW1tYVRvTGluZWFyIiwiY29udmVydExpbmVhclRvR2FtbWEiLCJjb3B5U1JHQlRvTGluZWFyIiwiY29weUxpbmVhclRvU1JHQiIsImNvbnZlcnRTUkdCVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9TUkdCIiwiZ2V0SGV4IiwiZ2V0SGV4U3RyaW5nIiwiZ2V0SFNMIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImRlbHRhIiwiZ2V0U3R5bGUiLCJvZmZzZXRIU0wiLCJhZGRDb2xvcnMiLCJjb2xvcjEiLCJjb2xvcjIiLCJsZXJwSFNMIiwibWF0ZXJpYWxJZCIsIk1hdGVyaWFsIiwiYmxlbmRpbmciLCJzaWRlIiwiZmxhdFNoYWRpbmciLCJ2ZXJ0ZXhUYW5nZW50cyIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImJsZW5kU3JjIiwiYmxlbmREc3QiLCJibGVuZEVxdWF0aW9uIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEVxdWF0aW9uQWxwaGEiLCJkZXB0aEZ1bmMiLCJkZXB0aFRlc3QiLCJkZXB0aFdyaXRlIiwic3RlbmNpbFdyaXRlTWFzayIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxGdW5jTWFzayIsInN0ZW5jaWxGYWlsIiwic3RlbmNpbFpGYWlsIiwic3RlbmNpbFpQYXNzIiwic3RlbmNpbFdyaXRlIiwiY2xpcHBpbmdQbGFuZXMiLCJjbGlwSW50ZXJzZWN0aW9uIiwiY2xpcFNoYWRvd3MiLCJzaGFkb3dTaWRlIiwiY29sb3JXcml0ZSIsInByZWNpc2lvbiIsInBvbHlnb25PZmZzZXQiLCJwb2x5Z29uT2Zmc2V0RmFjdG9yIiwicG9seWdvbk9mZnNldFVuaXRzIiwiZGl0aGVyaW5nIiwiYWxwaGFUZXN0IiwicHJlbXVsdGlwbGllZEFscGhhIiwidG9uZU1hcHBlZCIsIm5lZWRzVXBkYXRlIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJtYXAiLCJsaWdodE1hcCIsImxpZ2h0TWFwSW50ZW5zaXR5IiwiYW9NYXAiLCJhb01hcEludGVuc2l0eSIsInNwZWN1bGFyTWFwIiwiYWxwaGFNYXAiLCJlbnZNYXAiLCJjb21iaW5lIiwicmVmbGVjdGl2aXR5IiwicmVmcmFjdGlvblJhdGlvIiwid2lyZWZyYW1lIiwid2lyZWZyYW1lTGluZXdpZHRoIiwid2lyZWZyYW1lTGluZWNhcCIsIndpcmVmcmFtZUxpbmVqb2luIiwic2tpbm5pbmciLCJtb3JwaFRhcmdldHMiLCJzZXRWYWx1ZXMiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsIm5vcm1hbGl6ZWQiLCJkeW5hbWljIiwidXBkYXRlUmFuZ2UiLCJJbnQ4QnVmZmVyQXR0cmlidXRlIiwiSW50OEFycmF5IiwiVWludDhCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OEFycmF5IiwiVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJJbnQxNkJ1ZmZlckF0dHJpYnV0ZSIsIkludDE2QXJyYXkiLCJVaW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MTZBcnJheSIsIkludDMyQnVmZmVyQXR0cmlidXRlIiwiSW50MzJBcnJheSIsIlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDY0QXJyYXkiLCJEaXJlY3RHZW9tZXRyeSIsIm5vcm1hbHMiLCJjb2xvcnMiLCJ1dnMiLCJ1dnMyIiwiZ3JvdXBzIiwic2tpbldlaWdodHMiLCJza2luSW5kaWNlcyIsImJvdW5kaW5nQm94IiwiYm91bmRpbmdTcGhlcmUiLCJ2ZXJ0aWNlc05lZWRVcGRhdGUiLCJub3JtYWxzTmVlZFVwZGF0ZSIsImNvbG9yc05lZWRVcGRhdGUiLCJ1dnNOZWVkVXBkYXRlIiwiZ3JvdXBzTmVlZFVwZGF0ZSIsImFycmF5TWF4IiwiaXNNYXRlcmlhbCIsIm9uQmVmb3JlQ29tcGlsZSIsIm5ld1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiaXNSb290Iiwicm91Z2huZXNzIiwibWV0YWxuZXNzIiwic2hlZW4iLCJlbWlzc2l2ZSIsImVtaXNzaXZlSW50ZW5zaXR5Iiwic3BlY3VsYXIiLCJzaGluaW5lc3MiLCJjbGVhcmNvYXQiLCJjbGVhcmNvYXRSb3VnaG5lc3MiLCJjbGVhcmNvYXROb3JtYWxNYXAiLCJjbGVhcmNvYXROb3JtYWxTY2FsZSIsIm1hdGNhcCIsImJ1bXBNYXAiLCJidW1wU2NhbGUiLCJub3JtYWxNYXAiLCJub3JtYWxNYXBUeXBlIiwibm9ybWFsU2NhbGUiLCJkaXNwbGFjZW1lbnRNYXAiLCJkaXNwbGFjZW1lbnRTY2FsZSIsImRpc3BsYWNlbWVudEJpYXMiLCJyb3VnaG5lc3NNYXAiLCJtZXRhbG5lc3NNYXAiLCJlbWlzc2l2ZU1hcCIsImVudk1hcEludGVuc2l0eSIsImdyYWRpZW50TWFwIiwic2l6ZUF0dGVudWF0aW9uIiwibGluZXdpZHRoIiwiZGFzaFNpemUiLCJnYXBTaXplIiwibW9ycGhOb3JtYWxzIiwic3JjUGxhbmVzIiwiZHN0UGxhbmVzIiwiaXNNZXNoQmFzaWNNYXRlcmlhbCIsImlzQnVmZmVyQXR0cmlidXRlIiwib25VcGxvYWRDYWxsYmFjayIsInNldER5bmFtaWMiLCJjb3B5QXQiLCJpbmRleDEiLCJpbmRleDIiLCJjb3B5QXJyYXkiLCJjb3B5Q29sb3JzQXJyYXkiLCJjb3B5VmVjdG9yMnNBcnJheSIsInZlY3RvcnMiLCJjb3B5VmVjdG9yM3NBcnJheSIsImNvcHlWZWN0b3I0c0FycmF5Iiwic2V0WFkiLCJzZXRYWVpXIiwib25VcGxvYWQiLCJjb21wdXRlR3JvdXBzIiwiZ3JvdXAiLCJmYWNlcyIsImZhY2UiLCJzdGFydCIsImZyb21HZW9tZXRyeSIsIm1vcnBoVGFyZ2V0c1Bvc2l0aW9uIiwiZmFjZVZlcnRleFV2cyIsImhhc0ZhY2VWZXJ0ZXhVdiIsImhhc0ZhY2VWZXJ0ZXhVdjIiLCJtb3JwaFRhcmdldHNMZW5ndGgiLCJtb3JwaFRhcmdldHNOb3JtYWwiLCJtb3JwaE5vcm1hbHNMZW5ndGgiLCJoYXNTa2luSW5kaWNlcyIsImhhc1NraW5XZWlnaHRzIiwidmVydGV4VXZzIiwibW9ycGhUYXJnZXQiLCJtb3JwaE5vcm1hbCIsIl9idWZmZXJHZW9tZXRyeUlkIiwiX20xJDIiLCJfb2JqIiwiX29mZnNldCIsIl9ib3gkMSIsIl9ib3hNb3JwaFRhcmdldHMiLCJfdmVjdG9yJDQiLCJCdWZmZXJHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlcyIsImRyYXdSYW5nZSIsImdldEluZGV4Iiwic2V0SW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiYWRkR3JvdXAiLCJjbGVhckdyb3VwcyIsInNldERyYXdSYW5nZSIsInRhbmdlbnQiLCJjb21wdXRlQm91bmRpbmdCb3giLCJjb21wdXRlQm91bmRpbmdTcGhlcmUiLCJwb3NpdGlvbnMiLCJsaW5lRGlzdGFuY2VzIiwidXBkYXRlRnJvbU9iamVjdCIsImRpcmVjdCIsIl9fZGlyZWN0R2VvbWV0cnkiLCJlbGVtZW50c05lZWRVcGRhdGUiLCJsaW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSIsImxpbmVEaXN0YW5jZSIsImZyb21EaXJlY3RHZW9tZXRyeSIsIm1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uIiwibW9ycGhBdHRyaWJ1dGUiLCJpc05hTiIsImpsIiwiY29tcHV0ZUZhY2VOb3JtYWxzIiwiY29tcHV0ZVZlcnRleE5vcm1hbHMiLCJ2QSIsInZCIiwidkMiLCJwQSIsInBCIiwicEMiLCJjYiIsImFiIiwiaW5kaWNlcyIsIm5vcm1hbGl6ZU5vcm1hbHMiLCJtZXJnZSIsImF0dHJpYnV0ZUFycmF5MSIsImF0dHJpYnV0ZTIiLCJhdHRyaWJ1dGVBcnJheTIiLCJhdHRyaWJ1dGVPZmZzZXQiLCJ0b05vbkluZGV4ZWQiLCJjb252ZXJ0QnVmZmVyQXR0cmlidXRlIiwiYXJyYXkyIiwiZ2VvbWV0cnkyIiwibmV3QXR0cmlidXRlIiwibW9ycGhBcnJheSIsImtleXMiLCJhdHRyaWJ1dGVEYXRhIiwiaGFzTW9ycGhBdHRyaWJ1dGVzIiwiYXR0cmlidXRlQXJyYXkiLCJfaW52ZXJzZU1hdHJpeCIsIl9yYXkiLCJfc3BoZXJlIiwiX3ZBIiwiX3ZCIiwiX3ZDIiwiX3RlbXBBIiwiX3RlbXBCIiwiX3RlbXBDIiwiX21vcnBoQSIsIl9tb3JwaEIiLCJfbW9ycGhDIiwiX3V2QSIsIl91dkIiLCJfdXZDIiwiX2ludGVyc2VjdGlvblBvaW50IiwiX2ludGVyc2VjdGlvblBvaW50V29ybGQiLCJNZXNoIiwidXBkYXRlTW9ycGhUYXJnZXRzIiwiY2hlY2tJbnRlcnNlY3Rpb24iLCJyYXljYXN0ZXIiLCJjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uIiwibW9ycGhQb3NpdGlvbiIsIm1vcnBoSW5mbHVlbmNlcyIsIm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyIsImluZmx1ZW5jZSIsImludGVyc2VjdGlvbiIsInNldERyYXdNb2RlIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwibWwiLCJTdHJpbmciLCJpbnRlcnNlY3RzIiwiZ3JvdXBNYXRlcmlhbCIsImZhY2VJbmRleCIsImZ2QSIsImZ2QiIsImZ2QyIsImlzTXVsdGlNYXRlcmlhbCIsImZsIiwiZmFjZU1hdGVyaWFsIiwidXZzX2YiLCJfZ2VvbWV0cnlJZCIsIl9tMSQzIiwiX29iaiQxIiwiX29mZnNldCQxIiwiR2VvbWV0cnkiLCJmcm9tQnVmZmVyR2VvbWV0cnkiLCJzY29wZSIsImFkZEZhY2UiLCJhcmVhV2VpZ2h0ZWQiLCJ2bCIsImNvbXB1dGVGbGF0VmVydGV4Tm9ybWFscyIsImNvbXB1dGVNb3JwaE5vcm1hbHMiLCJfX29yaWdpbmFsRmFjZU5vcm1hbCIsIl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzIiwidG1wR2VvIiwiZmFjZU5vcm1hbHMiLCJkc3ROb3JtYWxzRmFjZSIsImRzdE5vcm1hbHNWZXJ0ZXgiLCJmYWNlTm9ybWFsIiwibWF0ZXJpYWxJbmRleE9mZnNldCIsInZlcnRleE9mZnNldCIsInZlcnRpY2VzMSIsInZlcnRpY2VzMiIsImZhY2VzMSIsImZhY2VzMiIsImNvbG9yczEiLCJjb2xvcnMyIiwidmVydGV4Q29weSIsImZhY2VDb3B5IiwiZmFjZVZlcnRleE5vcm1hbHMiLCJmYWNlVmVydGV4Q29sb3JzIiwiZmFjZVZlcnRleFV2czIiLCJ1dnNDb3B5IiwiayIsImtsIiwibWVyZ2VNZXNoIiwibWVzaCIsIm1lcmdlVmVydGljZXMiLCJ2ZXJ0aWNlc01hcCIsInVuaXF1ZSIsImNoYW5nZXMiLCJmYWNlSW5kaWNlc1RvUmVtb3ZlIiwiaWR4IiwiZGlmZiIsInNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleCIsIl9pZCIsInNvcnQiLCJuZXdVdnMxIiwibmV3VXZzMiIsInV2czEiLCJ2ZXJ0ZXgiLCJub3JtYWxzSGFzaCIsImNvbG9yc0hhc2giLCJ1dnNIYXNoIiwiaGFzRmFjZU5vcm1hbCIsImhhc0ZhY2VWZXJ0ZXhOb3JtYWwiLCJoYXNGYWNlQ29sb3IiLCJoYXNGYWNlVmVydGV4Q29sb3IiLCJmYWNlVHlwZSIsInNldEJpdCIsImdldFV2SW5kZXgiLCJnZXROb3JtYWxJbmRleCIsImdldENvbG9ySW5kZXgiLCJlbmFibGVkIiwiaGFzaCIsInNyY1ZlcnRleE5vcm1hbCIsImRlc3RWZXJ0ZXhOb3JtYWwiLCJCb3hHZW9tZXRyeSIsImRlcHRoIiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsIkJveEJ1ZmZlckdlb21ldHJ5IiwibnVtYmVyT2ZWZXJ0aWNlcyIsImdyb3VwU3RhcnQiLCJidWlsZFBsYW5lIiwidWRpciIsInZkaXIiLCJncmlkWCIsImdyaWRZIiwic2VnbWVudFdpZHRoIiwic2VnbWVudEhlaWdodCIsIndpZHRoSGFsZiIsImhlaWdodEhhbGYiLCJkZXB0aEhhbGYiLCJncmlkWDEiLCJncmlkWTEiLCJ2ZXJ0ZXhDb3VudGVyIiwiZ3JvdXBDb3VudCIsImNsb25lVW5pZm9ybXMiLCJtZXJnZVVuaWZvcm1zIiwidW5pZm9ybXMiLCJtZXJnZWQiLCJVbmlmb3Jtc1V0aWxzIiwiU2hhZGVyTWF0ZXJpYWwiLCJkZWZpbmVzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJsaWdodHMiLCJjbGlwcGluZyIsImV4dGVuc2lvbnMiLCJkZXJpdmF0aXZlcyIsImZyYWdEZXB0aCIsImRyYXdCdWZmZXJzIiwic2hhZGVyVGV4dHVyZUxPRCIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJpbmRleDBBdHRyaWJ1dGVOYW1lIiwidW5pZm9ybXNOZWVkVXBkYXRlIiwiQ2FtZXJhIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJmb3YiLCJhc3BlY3QiLCJ6b29tIiwiZm9jdXMiLCJ2aWV3IiwiZmlsbUdhdWdlIiwiZmlsbU9mZnNldCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJpc1NoYWRlck1hdGVyaWFsIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInNldEZvY2FsTGVuZ3RoIiwiZm9jYWxMZW5ndGgiLCJ2RXh0ZW50U2xvcGUiLCJnZXRGaWxtSGVpZ2h0IiwiYXRhbiIsImdldEZvY2FsTGVuZ3RoIiwidGFuIiwiZ2V0RWZmZWN0aXZlRk9WIiwiZ2V0RmlsbVdpZHRoIiwic2V0Vmlld09mZnNldCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsZWFyVmlld09mZnNldCIsInNrZXciLCJDdWJlQ2FtZXJhIiwiY3ViZVJlc29sdXRpb24iLCJjYW1lcmFQWCIsImNhbWVyYU5YIiwiY2FtZXJhUFkiLCJjYW1lcmFOWSIsImNhbWVyYVBaIiwiY2FtZXJhTloiLCJyZW5kZXJUYXJnZXQiLCJXZWJHTFJlbmRlclRhcmdldEN1YmUiLCJyZW5kZXJlciIsInNjZW5lIiwiY3VycmVudFJlbmRlclRhcmdldCIsImdldFJlbmRlclRhcmdldCIsInNldFJlbmRlclRhcmdldCIsInJlbmRlciIsImNsZWFyIiwic3RlbmNpbCIsIkRhdGFUZXh0dXJlIiwiaXNXZWJHTFJlbmRlclRhcmdldEN1YmUiLCJmcm9tRXF1aXJlY3Rhbmd1bGFyVGV4dHVyZSIsInNoYWRlciIsInRFcXVpcmVjdCIsImpvaW4iLCJpc0RhdGFUZXh0dXJlIiwiX3ZlY3RvcjEiLCJfdmVjdG9yMiIsIl9ub3JtYWxNYXRyaXgiLCJQbGFuZSIsImlzUGxhbmUiLCJzZXRDb21wb25lbnRzIiwic2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQiLCJpbnZlcnNlTm9ybWFsTGVuZ3RoIiwiZGlzdGFuY2VUb1NwaGVyZSIsInByb2plY3RQb2ludCIsImludGVyc2VjdExpbmUiLCJsaW5lIiwiaW50ZXJzZWN0c0xpbmUiLCJzdGFydFNpZ24iLCJlbmRTaWduIiwiZW5kIiwiY29wbGFuYXJQb2ludCIsIm9wdGlvbmFsTm9ybWFsTWF0cml4IiwicmVmZXJlbmNlUG9pbnQiLCJfc3BoZXJlJDEiLCJfdmVjdG9yJDUiLCJGcnVzdHVtIiwicDQiLCJwNSIsInBsYW5lcyIsImZydXN0dW0iLCJzZXRGcm9tTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJTaGFkZXJDaHVuayIsImFscGhhbWFwX2ZyYWdtZW50IiwiYWxwaGFtYXBfcGFyc19mcmFnbWVudCIsImFscGhhdGVzdF9mcmFnbWVudCIsImFvbWFwX2ZyYWdtZW50IiwiYW9tYXBfcGFyc19mcmFnbWVudCIsImJlZ2luX3ZlcnRleCIsImJlZ2lubm9ybWFsX3ZlcnRleCIsImJzZGZzIiwiYnVtcG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQiLCJjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgiLCJjbGlwcGluZ19wbGFuZXNfdmVydGV4IiwiY29sb3JfZnJhZ21lbnQiLCJjb2xvcl9wYXJzX2ZyYWdtZW50IiwiY29sb3JfcGFyc192ZXJ0ZXgiLCJjb2xvcl92ZXJ0ZXgiLCJjb21tb24iLCJjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQiLCJkZWZhdWx0bm9ybWFsX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCIsImRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgiLCJlbWlzc2l2ZW1hcF9mcmFnbWVudCIsImVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQiLCJlbmNvZGluZ3NfZnJhZ21lbnQiLCJlbmNvZGluZ3NfcGFyc19mcmFnbWVudCIsImVudm1hcF9mcmFnbWVudCIsImVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3BhcnNfdmVydGV4IiwiZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfdmVydGV4IiwiZm9nX3ZlcnRleCIsImZvZ19wYXJzX3ZlcnRleCIsImZvZ19mcmFnbWVudCIsImZvZ19wYXJzX2ZyYWdtZW50IiwiZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0bWFwX2ZyYWdtZW50IiwibGlnaHRtYXBfcGFyc19mcmFnbWVudCIsImxpZ2h0c19sYW1iZXJ0X3ZlcnRleCIsImxpZ2h0c19wYXJzX2JlZ2luIiwibGlnaHRzX3Bob25nX2ZyYWdtZW50IiwibGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQiLCJsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCIsImxpZ2h0c19mcmFnbWVudF9iZWdpbiIsImxpZ2h0c19mcmFnbWVudF9tYXBzIiwibGlnaHRzX2ZyYWdtZW50X2VuZCIsImxvZ2RlcHRoYnVmX2ZyYWdtZW50IiwibG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4IiwibG9nZGVwdGhidWZfdmVydGV4IiwibWFwX2ZyYWdtZW50IiwibWFwX3BhcnNfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfZnJhZ21lbnQiLCJtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9mcmFnbWVudCIsIm1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50IiwibW9ycGhub3JtYWxfdmVydGV4IiwibW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgiLCJtb3JwaHRhcmdldF92ZXJ0ZXgiLCJub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJub3JtYWxfZnJhZ21lbnRfbWFwcyIsIm5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50IiwiY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiIsImNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcyIsImNsZWFyY29hdF9ub3JtYWxtYXBfcGFyc19mcmFnbWVudCIsInBhY2tpbmciLCJwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50IiwicHJvamVjdF92ZXJ0ZXgiLCJkaXRoZXJpbmdfZnJhZ21lbnQiLCJkaXRoZXJpbmdfcGFyc19mcmFnbWVudCIsInJvdWdobmVzc21hcF9mcmFnbWVudCIsInJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXgiLCJzaGFkb3dtYXBfdmVydGV4Iiwic2hhZG93bWFza19wYXJzX2ZyYWdtZW50Iiwic2tpbmJhc2VfdmVydGV4Iiwic2tpbm5pbmdfcGFyc192ZXJ0ZXgiLCJza2lubmluZ192ZXJ0ZXgiLCJza2lubm9ybWFsX3ZlcnRleCIsInNwZWN1bGFybWFwX2ZyYWdtZW50Iiwic3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCIsInRvbmVtYXBwaW5nX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX3ZlcnRleCIsInV2X3ZlcnRleCIsInV2Ml9wYXJzX2ZyYWdtZW50IiwidXYyX3BhcnNfdmVydGV4IiwidXYyX3ZlcnRleCIsIndvcmxkcG9zX3ZlcnRleCIsImJhY2tncm91bmRfZnJhZyIsImJhY2tncm91bmRfdmVydCIsImN1YmVfZnJhZyIsImN1YmVfdmVydCIsImRlcHRoX2ZyYWciLCJkZXB0aF92ZXJ0IiwiZGlzdGFuY2VSR0JBX2ZyYWciLCJkaXN0YW5jZVJHQkFfdmVydCIsImVxdWlyZWN0X2ZyYWciLCJlcXVpcmVjdF92ZXJ0IiwibGluZWRhc2hlZF9mcmFnIiwibGluZWRhc2hlZF92ZXJ0IiwibWVzaGJhc2ljX2ZyYWciLCJtZXNoYmFzaWNfdmVydCIsIm1lc2hsYW1iZXJ0X2ZyYWciLCJtZXNobGFtYmVydF92ZXJ0IiwibWVzaG1hdGNhcF9mcmFnIiwibWVzaG1hdGNhcF92ZXJ0IiwibWVzaHBob25nX2ZyYWciLCJtZXNocGhvbmdfdmVydCIsIm1lc2hwaHlzaWNhbF9mcmFnIiwibWVzaHBoeXNpY2FsX3ZlcnQiLCJub3JtYWxfZnJhZyIsIm5vcm1hbF92ZXJ0IiwicG9pbnRzX2ZyYWciLCJwb2ludHNfdmVydCIsInNoYWRvd19mcmFnIiwic2hhZG93X3ZlcnQiLCJzcHJpdGVfZnJhZyIsInNwcml0ZV92ZXJ0IiwiVW5pZm9ybXNMaWIiLCJkaWZmdXNlIiwidXZUcmFuc2Zvcm0iLCJzcGVjdWxhcm1hcCIsImVudm1hcCIsImZsaXBFbnZNYXAiLCJtYXhNaXBMZXZlbCIsImFvbWFwIiwibGlnaHRtYXAiLCJlbWlzc2l2ZW1hcCIsImJ1bXBtYXAiLCJub3JtYWxtYXAiLCJkaXNwbGFjZW1lbnRtYXAiLCJyb3VnaG5lc3NtYXAiLCJtZXRhbG5lc3NtYXAiLCJncmFkaWVudG1hcCIsImZvZ0RlbnNpdHkiLCJmb2dOZWFyIiwiZm9nRmFyIiwiZm9nQ29sb3IiLCJhbWJpZW50TGlnaHRDb2xvciIsImxpZ2h0UHJvYmUiLCJkaXJlY3Rpb25hbExpZ2h0cyIsInByb3BlcnRpZXMiLCJzaGFkb3ciLCJzaGFkb3dCaWFzIiwic2hhZG93UmFkaXVzIiwic2hhZG93TWFwU2l6ZSIsImRpcmVjdGlvbmFsU2hhZG93TWFwIiwiZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgiLCJzcG90TGlnaHRzIiwiY29uZUNvcyIsInBlbnVtYnJhQ29zIiwiZGVjYXkiLCJzcG90U2hhZG93TWFwIiwic3BvdFNoYWRvd01hdHJpeCIsInBvaW50TGlnaHRzIiwic2hhZG93Q2FtZXJhTmVhciIsInNoYWRvd0NhbWVyYUZhciIsInBvaW50U2hhZG93TWFwIiwicG9pbnRTaGFkb3dNYXRyaXgiLCJoZW1pc3BoZXJlTGlnaHRzIiwic2t5Q29sb3IiLCJncm91bmRDb2xvciIsInJlY3RBcmVhTGlnaHRzIiwiU2hhZGVyTGliIiwiYmFzaWMiLCJsYW1iZXJ0IiwicGhvbmciLCJzdGFuZGFyZCIsImRhc2hlZCIsInRvdGFsU2l6ZSIsInQyRCIsImN1YmUiLCJ0Q3ViZSIsInRGbGlwIiwiZXF1aXJlY3QiLCJkaXN0YW5jZVJHQkEiLCJyZWZlcmVuY2VQb3NpdGlvbiIsIm5lYXJEaXN0YW5jZSIsImZhckRpc3RhbmNlIiwiV2ViR0xBbmltYXRpb24iLCJpc0FuaW1hdGluZyIsImFuaW1hdGlvbkxvb3AiLCJvbkFuaW1hdGlvbkZyYW1lIiwidGltZSIsImZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic3RvcCIsInNldEFuaW1hdGlvbkxvb3AiLCJzZXRDb250ZXh0IiwiV2ViR0xBdHRyaWJ1dGVzIiwiZ2wiLCJidWZmZXJzIiwiV2Vha01hcCIsImRlbGV0ZUJ1ZmZlciIsImJ1ZmZlciIsImJ1ZmZlclR5cGUiLCJ1c2FnZSIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiYnl0ZXNQZXJFbGVtZW50IiwiQllURVNfUEVSX0VMRU1FTlQiLCJidWZmZXJTdWJEYXRhIiwic3ViYXJyYXkiLCJ1cGRhdGVCdWZmZXIiLCJQbGFuZUdlb21ldHJ5IiwiUGxhbmVCdWZmZXJHZW9tZXRyeSIsIndpZHRoX2hhbGYiLCJoZWlnaHRfaGFsZiIsInNlZ21lbnRfd2lkdGgiLCJzZWdtZW50X2hlaWdodCIsIldlYkdMQmFja2dyb3VuZCIsInN0YXRlIiwib2JqZWN0cyIsInBsYW5lTWVzaCIsImJveE1lc2giLCJjbGVhckNvbG9yIiwiY2xlYXJBbHBoYSIsImN1cnJlbnRCYWNrZ3JvdW5kIiwiY3VycmVudEJhY2tncm91bmRWZXJzaW9uIiwic2V0Q2xlYXIiLCJnZXRDbGVhckNvbG9yIiwic2V0Q2xlYXJDb2xvciIsImdldENsZWFyQWxwaGEiLCJzZXRDbGVhckFscGhhIiwicmVuZGVyTGlzdCIsImZvcmNlQ2xlYXIiLCJ2ciIsInNlc3Npb24iLCJnZXRTZXNzaW9uIiwiZW52aXJvbm1lbnRCbGVuZE1vZGUiLCJhdXRvQ2xlYXIiLCJhdXRvQ2xlYXJDb2xvciIsImF1dG9DbGVhckRlcHRoIiwiYXV0b0NsZWFyU3RlbmNpbCIsImlzQ3ViZVRleHR1cmUiLCJ1bnNoaWZ0IiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsImluZm8iLCJjYXBhYmlsaXRpZXMiLCJzZXRNb2RlIiwiZHJhd0FycmF5cyIsInJlbmRlckluc3RhbmNlcyIsInByaW1jb3VudCIsImV4dGVuc2lvbiIsIm1ldGhvZE5hbWUiLCJpc1dlYkdMMiIsIldlYkdMQ2FwYWJpbGl0aWVzIiwibWF4QW5pc290cm9weSIsImdldE1heFByZWNpc2lvbiIsImdldFNoYWRlclByZWNpc2lvbkZvcm1hdCIsIldlYkdMMlJlbmRlcmluZ0NvbnRleHQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIm1heFRleHR1cmVTaXplIiwibWF4Q3ViZW1hcFNpemUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJtYXhWYXJ5aW5ncyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImZsb2F0RnJhZ21lbnRUZXh0dXJlcyIsImdldE1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJmbG9hdFZlcnRleFRleHR1cmVzIiwibWF4U2FtcGxlcyIsIldlYkdMQ2xpcHBpbmciLCJnbG9iYWxTdGF0ZSIsIm51bUdsb2JhbFBsYW5lcyIsImxvY2FsQ2xpcHBpbmdFbmFibGVkIiwicmVuZGVyaW5nU2hhZG93cyIsInZpZXdOb3JtYWxNYXRyaXgiLCJ1bmlmb3JtIiwicmVzZXRHbG9iYWxTdGF0ZSIsIm51bVBsYW5lcyIsIm51bUludGVyc2VjdGlvbiIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwiaTQiLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRTdGF0ZSIsImZyb21DYWNoZSIsIm5HbG9iYWwiLCJsR2xvYmFsIiwiY2xpcHBpbmdTdGF0ZSIsIldlYkdMRXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIldlYkdMR2VvbWV0cmllcyIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsImJ1ZmZlcmdlb21ldHJ5IiwibWVtb3J5IiwidXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlIiwiZ2VvbWV0cnlJbmRleCIsImdlb21ldHJ5UG9zaXRpb24iLCJwcmV2aW91c0F0dHJpYnV0ZSIsIl9idWZmZXJHZW9tZXRyeSIsImdlb21ldHJ5QXR0cmlidXRlcyIsImdldFdpcmVmcmFtZUF0dHJpYnV0ZSIsImN1cnJlbnRBdHRyaWJ1dGUiLCJXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciIsImRyYXdFbGVtZW50cyIsIldlYkdMSW5mbyIsImNhbGxzIiwidHJpYW5nbGVzIiwibGluZXMiLCJwcm9ncmFtcyIsImF1dG9SZXNldCIsInJlc2V0IiwiaW5zdGFuY2VDb3VudCIsImFic051bWVyaWNhbFNvcnQiLCJXZWJHTE1vcnBodGFyZ2V0cyIsImluZmx1ZW5jZXNMaXN0IiwicHJvZ3JhbSIsIm9iamVjdEluZmx1ZW5jZXMiLCJpbmZsdWVuY2VzIiwiZ2V0VW5pZm9ybXMiLCJzZXRWYWx1ZSIsIldlYkdMT2JqZWN0cyIsInVwZGF0ZUxpc3QiLCJpc0luc3RhbmNlZE1lc2giLCJpbnN0YW5jZU1hdHJpeCIsIkN1YmVUZXh0dXJlIiwiRGF0YVRleHR1cmUyREFycmF5Iiwid3JhcFIiLCJEYXRhVGV4dHVyZTNEIiwicGh5c2ljYWwiLCJ0cmFuc3BhcmVuY3kiLCJpc0RhdGFUZXh0dXJlMkRBcnJheSIsImlzRGF0YVRleHR1cmUzRCIsImVtcHR5VGV4dHVyZSIsImVtcHR5VGV4dHVyZTJkQXJyYXkiLCJlbXB0eVRleHR1cmUzZCIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVDEiLCJ1bml0IiwidW5pZm9ybTFpIiwic2FmZVNldFRleHR1cmUyRCIsInNldFZhbHVlVDJEQXJyYXkxIiwic2V0VGV4dHVyZTJEQXJyYXkiLCJzZXRWYWx1ZVQzRDEiLCJzZXRUZXh0dXJlM0QiLCJzZXRWYWx1ZVQ2Iiwic2FmZVNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVWMWkiLCJzZXRWYWx1ZVYyaSIsInVuaWZvcm0yaXYiLCJzZXRWYWx1ZVYzaSIsInVuaWZvcm0zaXYiLCJzZXRWYWx1ZVY0aSIsInVuaWZvcm00aXYiLCJzZXRWYWx1ZVYxZkFycmF5IiwidW5pZm9ybTFmdiIsInNldFZhbHVlVjFpQXJyYXkiLCJ1bmlmb3JtMWl2Iiwic2V0VmFsdWVWMmlBcnJheSIsInNldFZhbHVlVjNpQXJyYXkiLCJzZXRWYWx1ZVY0aUFycmF5Iiwic2V0VmFsdWVWMmZBcnJheSIsInNldFZhbHVlVjNmQXJyYXkiLCJzZXRWYWx1ZVY0ZkFycmF5Iiwic2V0VmFsdWVNMkFycmF5Iiwic2V0VmFsdWVNM0FycmF5Iiwic2V0VmFsdWVNNEFycmF5Iiwic2V0VmFsdWVUMUFycmF5IiwidW5pdHMiLCJzZXRWYWx1ZVQ2QXJyYXkiLCJTaW5nbGVVbmlmb3JtIiwiYWN0aXZlSW5mbyIsImdldFNpbmd1bGFyU2V0dGVyIiwiUHVyZUFycmF5VW5pZm9ybSIsImdldFB1cmVBcnJheVNldHRlciIsIlN0cnVjdHVyZWRVbmlmb3JtIiwic2VxIiwidXBkYXRlQ2FjaGUiLCJSZVBhdGhQYXJ0IiwiYWRkVW5pZm9ybSIsImNvbnRhaW5lciIsInVuaWZvcm1PYmplY3QiLCJwYXJzZVVuaWZvcm0iLCJwYXRoIiwicGF0aExlbmd0aCIsImxhc3RJbmRleCIsIm1hdGNoRW5kIiwiaWRJc0luZGV4Iiwic3Vic2NyaXB0IiwibmV4dCIsIldlYkdMVW5pZm9ybXMiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsIldlYkdMU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsInNldE9wdGlvbmFsIiwidXBsb2FkIiwic2VxV2l0aFZhbHVlIiwicHJvZ3JhbUlkQ291bnQiLCJnZXRFbmNvZGluZ0NvbXBvbmVudHMiLCJnZXRTaGFkZXJFcnJvcnMiLCJzdGF0dXMiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwidHJpbSIsInNwbGl0IiwiYWRkTGluZU51bWJlcnMiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24iLCJnZXRUb25lTWFwcGluZ0Z1bmN0aW9uIiwidG9uZU1hcHBpbmciLCJ0b25lTWFwcGluZ05hbWUiLCJmaWx0ZXJFbXB0eUxpbmUiLCJyZXBsYWNlTGlnaHROdW1zIiwicmVwbGFjZSIsIm51bURpckxpZ2h0cyIsIm51bVNwb3RMaWdodHMiLCJudW1SZWN0QXJlYUxpZ2h0cyIsIm51bVBvaW50TGlnaHRzIiwibnVtSGVtaUxpZ2h0cyIsIm51bURpckxpZ2h0U2hhZG93cyIsIm51bVNwb3RMaWdodFNoYWRvd3MiLCJudW1Qb2ludExpZ2h0U2hhZG93cyIsInJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyIsIm51bUNsaXBwaW5nUGxhbmVzIiwibnVtQ2xpcEludGVyc2VjdGlvbiIsImluY2x1ZGVQYXR0ZXJuIiwicmVzb2x2ZUluY2x1ZGVzIiwiaW5jbHVkZVJlcGxhY2VyIiwiaW5jbHVkZSIsImxvb3BQYXR0ZXJuIiwidW5yb2xsTG9vcHMiLCJsb29wUmVwbGFjZXIiLCJzbmlwcGV0IiwiZ2VuZXJhdGVQcmVjaXNpb24iLCJwcmVjaXNpb25zdHJpbmciLCJXZWJHTFByb2dyYW0iLCJjb2RlIiwicHJlZml4VmVydGV4IiwicHJlZml4RnJhZ21lbnQiLCJzaGFkb3dNYXBUeXBlRGVmaW5lIiwic2hhZG93TWFwVHlwZSIsImdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSIsImVudk1hcFR5cGVEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcFR5cGVEZWZpbmUiLCJlbnZNYXBNb2RlRGVmaW5lIiwiZ2VuZXJhdGVFbnZNYXBNb2RlRGVmaW5lIiwiZW52TWFwQmxlbmRpbmdEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lIiwiZ2FtbWFGYWN0b3JEZWZpbmUiLCJjdXN0b21FeHRlbnNpb25zIiwicmVuZGVyZXJFeHRlbnNpb25zIiwiZW52TWFwQ3ViZVVWIiwidGFuZ2VudFNwYWNlTm9ybWFsTWFwIiwiZmlsdGVyIiwiZ2VuZXJhdGVFeHRlbnNpb25zIiwiY3VzdG9tRGVmaW5lcyIsImNodW5rcyIsImdlbmVyYXRlRGVmaW5lcyIsImNyZWF0ZVByb2dyYW0iLCJudW1NdWx0aXZpZXdWaWV3cyIsImlzV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQiLCJudW1WaWV3cyIsImlzUmF3U2hhZGVyTWF0ZXJpYWwiLCJpbnN0YW5jaW5nIiwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyIsIm1heEJvbmVzIiwidXNlRm9nIiwiZm9nRXhwMiIsIm9iamVjdFNwYWNlTm9ybWFsTWFwIiwidXNlVmVydGV4VGV4dHVyZSIsImRvdWJsZVNpZGVkIiwiZmxpcFNpZGVkIiwic2hhZG93TWFwRW5hYmxlZCIsInBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzIiwib3V0cHV0RW5jb2RpbmciLCJtYXBFbmNvZGluZyIsIm1hdGNhcEVuY29kaW5nIiwiZW52TWFwRW5jb2RpbmciLCJlbWlzc2l2ZU1hcEVuY29kaW5nIiwiZGVwdGhQYWNraW5nIiwiaXNHTFNMM1NoYWRlck1hdGVyaWFsIiwidmVyc2lvblJlZ2V4IiwiY2FjaGVkVW5pZm9ybXMiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJkZWJ1ZyIsImNoZWNrU2hhZGVyRXJyb3JzIiwicHJvZ3JhbUxvZyIsImdldFByb2dyYW1JbmZvTG9nIiwidmVydGV4TG9nIiwiZnJhZ21lbnRMb2ciLCJydW5uYWJsZSIsImhhdmVEaWFnbm9zdGljcyIsInZlcnRleEVycm9ycyIsImZyYWdtZW50RXJyb3JzIiwiZ2V0RXJyb3IiLCJkaWFnbm9zdGljcyIsInByZWZpeCIsImRlbGV0ZVNoYWRlciIsImdldEF0dHJpYnV0ZXMiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImZldGNoQXR0cmlidXRlTG9jYXRpb25zIiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJXZWJHTFByb2dyYW1zIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsIlNoYWRvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJwYXJhbWV0ZXJOYW1lcyIsImdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAiLCJnYW1tYU92ZXJyaWRlTGluZWFyIiwiZ2V0UGFyYW1ldGVycyIsInNoYWRvd3MiLCJuQ2xpcFBsYW5lcyIsIm5DbGlwSW50ZXJzZWN0aW9uIiwic2hhZGVySUQiLCJpc1NraW5uZWRNZXNoIiwiYm9uZXMiLCJza2VsZXRvbiIsIm5WZXJ0ZXhVbmlmb3JtcyIsIm5WZXJ0ZXhNYXRyaWNlcyIsImFsbG9jYXRlQm9uZXMiLCJnYW1tYU91dHB1dCIsImdhbW1hSW5wdXQiLCJlbnZNYXBNb2RlIiwiaXNGb2dFeHAyIiwibWF4TW9ycGhUYXJnZXRzIiwibWF4TW9ycGhOb3JtYWxzIiwiZGlyZWN0aW9uYWwiLCJzcG90IiwicmVjdEFyZWEiLCJoZW1pIiwic2hhZG93TWFwIiwiZ2V0UHJvZ3JhbUNvZGUiLCJhY3F1aXJlUHJvZ3JhbSIsInBsIiwicHJvZ3JhbUluZm8iLCJyZWxlYXNlUHJvZ3JhbSIsInBvcCIsIldlYkdMUHJvcGVydGllcyIsInBhaW50ZXJTb3J0U3RhYmxlIiwiZ3JvdXBPcmRlciIsInJldmVyc2VQYWludGVyU29ydFN0YWJsZSIsIldlYkdMUmVuZGVyTGlzdCIsInJlbmRlckl0ZW1zIiwicmVuZGVySXRlbXNJbmRleCIsIm9wYXF1ZSIsImRlZmF1bHRQcm9ncmFtIiwiZ2V0TmV4dFJlbmRlckl0ZW0iLCJyZW5kZXJJdGVtIiwiV2ViR0xSZW5kZXJMaXN0cyIsImxpc3RzIiwib25TY2VuZURpc3Bvc2UiLCJsaXN0IiwiY2FtZXJhcyIsIlVuaWZvcm1zQ2FjaGUiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJuZXh0VmVyc2lvbiIsInNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCIsImxpZ2h0QSIsImxpZ2h0QiIsIldlYkdMTGlnaHRzIiwiZGlyZWN0aW9uYWxMZW5ndGgiLCJwb2ludExlbmd0aCIsInNwb3RMZW5ndGgiLCJyZWN0QXJlYUxlbmd0aCIsImhlbWlMZW5ndGgiLCJudW1EaXJlY3Rpb25hbFNoYWRvd3MiLCJudW1Qb2ludFNoYWRvd3MiLCJudW1TcG90U2hhZG93cyIsImFtYmllbnQiLCJwcm9iZSIsInZlY3RvcjMiLCJtYXRyaXg0MiIsInNldHVwIiwiaW50ZW5zaXR5IiwiaXNBbWJpZW50TGlnaHQiLCJpc0xpZ2h0UHJvYmUiLCJzaCIsImNvZWZmaWNpZW50cyIsImlzRGlyZWN0aW9uYWxMaWdodCIsImJpYXMiLCJtYXBTaXplIiwiaXNTcG90TGlnaHQiLCJwZW51bWJyYSIsImlzUmVjdEFyZWFMaWdodCIsImlzUG9pbnRMaWdodCIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiV2ViR0xSZW5kZXJTdGF0ZSIsImxpZ2h0c0FycmF5Iiwic2hhZG93c0FycmF5Iiwic2V0dXBMaWdodHMiLCJwdXNoTGlnaHQiLCJwdXNoU2hhZG93Iiwic2hhZG93TGlnaHQiLCJXZWJHTFJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlIiwiaGFzIiwiaXNNZXNoRGVwdGhNYXRlcmlhbCIsImlzTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJXZWJHTFNoYWRvd01hcCIsIl9yZW5kZXJlciIsIl9vYmplY3RzIiwiX2ZydXN0dW0iLCJfc2hhZG93TWFwU2l6ZSIsIl92aWV3cG9ydFNpemUiLCJfdmlld3BvcnQiLCJfZGVwdGhNYXRlcmlhbHMiLCJfZGlzdGFuY2VNYXRlcmlhbHMiLCJfbWF0ZXJpYWxDYWNoZSIsIjAiLCIxIiwiMiIsInNoYWRvd01hdGVyaWFsVmVydGljYWwiLCJTQU1QTEVfUkFURSIsIkhBTEZfU0FNUExFX1JBVEUiLCJzaGFkb3dfcGFzcyIsInJlc29sdXRpb24iLCJzaGFkb3dNYXRlcmlhbEhvcml6b25hbCIsIkhPUklaT05BTF9QQVNTIiwiZnVsbFNjcmVlblRyaSIsImZ1bGxTY3JlZW5NZXNoIiwidXNlTW9ycGhpbmciLCJ1c2VTa2lubmluZyIsImRlcHRoTWF0ZXJpYWwiLCJkaXN0YW5jZU1hdGVyaWFsIiwiVlNNUGFzcyIsIm1hcFBhc3MiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJnZXREZXB0aE1hdGVyaWFsIiwicmVzdWx0IiwibWF0ZXJpYWxWYXJpYW50cyIsImN1c3RvbU1hdGVyaWFsIiwiY3VzdG9tRGVwdGhNYXRlcmlhbCIsImN1c3RvbURpc3RhbmNlTWF0ZXJpYWwiLCJ2YXJpYW50SW5kZXgiLCJrZXlBIiwia2V5QiIsIm1hdGVyaWFsc0ZvclZhcmlhbnQiLCJjYWNoZWRNYXRlcmlhbCIsInJlbmRlck9iamVjdCIsInNoYWRvd0NhbWVyYSIsImFjdGl2ZUN1YmVGYWNlIiwiZ2V0QWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBtYXBMZXZlbCIsImdldEFjdGl2ZU1pcG1hcExldmVsIiwiX3N0YXRlIiwic2V0QmxlbmRpbmciLCJzZXRUZXN0Iiwic2V0U2Npc3NvclRlc3QiLCJzaGFkb3dGcmFtZUV4dGVudHMiLCJnZXRGcmFtZUV4dGVudHMiLCJpc1BvaW50TGlnaHRTaGFkb3ciLCJwYXJzIiwidmlld3BvcnRDb3VudCIsImdldFZpZXdwb3J0Q291bnQiLCJ2cCIsImdldFZpZXdwb3J0IiwidXBkYXRlTWF0cmljZXMiLCJnZXRGcnVzdHVtIiwiV2ViR0xTdGF0ZSIsInV0aWxzIiwiY29sb3JCdWZmZXIiLCJsb2NrZWQiLCJjdXJyZW50Q29sb3JNYXNrIiwiY3VycmVudENvbG9yQ2xlYXIiLCJzZXRNYXNrIiwiY29sb3JNYXNrIiwic2V0TG9ja2VkIiwibG9jayIsImN1cnJlbnREZXB0aE1hc2siLCJjdXJyZW50RGVwdGhGdW5jIiwiY3VycmVudERlcHRoQ2xlYXIiLCJkZXB0aE1hc2siLCJzZXRGdW5jIiwiY2xlYXJEZXB0aCIsImN1cnJlbnRTdGVuY2lsTWFzayIsImN1cnJlbnRTdGVuY2lsRnVuYyIsImN1cnJlbnRTdGVuY2lsUmVmIiwiY3VycmVudFN0ZW5jaWxGdW5jTWFzayIsImN1cnJlbnRTdGVuY2lsRmFpbCIsImN1cnJlbnRTdGVuY2lsWkZhaWwiLCJjdXJyZW50U3RlbmNpbFpQYXNzIiwiY3VycmVudFN0ZW5jaWxDbGVhciIsInN0ZW5jaWxUZXN0Iiwic3RlbmNpbE1hc2siLCJzZXRPcCIsInN0ZW5jaWxPcCIsImNsZWFyU3RlbmNpbCIsIm1heFZlcnRleEF0dHJpYnV0ZXMiLCJuZXdBdHRyaWJ1dGVzIiwiZW5hYmxlZEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEaXZpc29ycyIsImVuYWJsZWRDYXBhYmlsaXRpZXMiLCJjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJjdXJyZW50UHJvZ3JhbSIsImN1cnJlbnRCbGVuZGluZ0VuYWJsZWQiLCJjdXJyZW50QmxlbmRpbmciLCJjdXJyZW50QmxlbmRFcXVhdGlvbiIsImN1cnJlbnRCbGVuZFNyYyIsImN1cnJlbnRCbGVuZERzdCIsImN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEiLCJjdXJyZW50QmxlbmRTcmNBbHBoYSIsImN1cnJlbnRCbGVuZERzdEFscGhhIiwiY3VycmVudFByZW11bHRpcGxlZEFscGhhIiwiY3VycmVudEZsaXBTaWRlZCIsImN1cnJlbnRDdWxsRmFjZSIsImN1cnJlbnRMaW5lV2lkdGgiLCJjdXJyZW50UG9seWdvbk9mZnNldEZhY3RvciIsImN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMiLCJsaW5lV2lkdGhBdmFpbGFibGUiLCJnbFZlcnNpb24iLCJjdXJyZW50VGV4dHVyZVNsb3QiLCJjdXJyZW50Qm91bmRUZXh0dXJlcyIsImN1cnJlbnRTY2lzc29yIiwiY3VycmVudFZpZXdwb3J0IiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwidGV4UGFyYW1ldGVyaSIsInRleEltYWdlMkQiLCJlbXB0eVRleHR1cmVzIiwiZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciIsIm1lc2hQZXJBdHRyaWJ1dGUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImNvbnZlcnQiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImJsZW5kRnVuYyIsInNldEZsaXBTaWRlZCIsImZyb250RmFjZSIsInNldEN1bGxGYWNlIiwiY3VsbEZhY2UiLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJnZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMiLCJmb3JtYXRzIiwidXNlUHJvZ3JhbSIsInNldE1hdGVyaWFsIiwiZnJvbnRGYWNlQ1ciLCJzZXRMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJ3ZWJnbFR5cGUiLCJ3ZWJnbFRleHR1cmUiLCJib3VuZFRleHR1cmUiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsInRleEltYWdlM0QiLCJXZWJHTFRleHR1cmVzIiwiX2dsIiwiX3ZpZGVvVGV4dHVyZXMiLCJ1c2VPZmZzY3JlZW5DYW52YXMiLCJPZmZzY3JlZW5DYW52YXMiLCJjcmVhdGVDYW52YXMiLCJyZXNpemVJbWFnZSIsIm5lZWRzUG93ZXJPZlR3byIsIm5lZWRzTmV3Q2FudmFzIiwibWF4U2l6ZSIsIkhUTUxJbWFnZUVsZW1lbnQiLCJJbWFnZUJpdG1hcCIsInRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyIsInN1cHBvcnRzTWlwcyIsImdlbmVyYXRlTWlwbWFwIiwiX19tYXhNaXBMZXZlbCIsIkxPRzJFIiwiZ2V0SW50ZXJuYWxGb3JtYXQiLCJnbEZvcm1hdCIsImdsVHlwZSIsImludGVybmFsRm9ybWF0IiwiZmlsdGVyRmFsbGJhY2siLCJvblRleHR1cmVEaXNwb3NlIiwidGV4dHVyZVByb3BlcnRpZXMiLCJfX3dlYmdsSW5pdCIsImRlbGV0ZVRleHR1cmUiLCJfX3dlYmdsVGV4dHVyZSIsImRlYWxsb2NhdGVUZXh0dXJlIiwiaXNWaWRlb1RleHR1cmUiLCJvblJlbmRlclRhcmdldERpc3Bvc2UiLCJyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJfX3dlYmdsRnJhbWVidWZmZXIiLCJfX3dlYmdsRGVwdGhidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJfX3dlYmdsQ29sb3JUZXh0dXJlIiwiX193ZWJnbERlcHRoU3RlbmNpbFRleHR1cmUiLCJfX3dlYmdsVmlld0ZyYW1lYnVmZmVycyIsImRlYWxsb2NhdGVSZW5kZXJUYXJnZXQiLCJ0ZXh0dXJlVW5pdHMiLCJzZXRUZXh0dXJlMkQiLCJzbG90IiwidXBkYXRlVmlkZW9UZXh0dXJlIiwiX192ZXJzaW9uIiwiY29tcGxldGUiLCJ1cGxvYWRUZXh0dXJlIiwic2V0VGV4dHVyZUN1YmUiLCJpbml0VGV4dHVyZSIsInBpeGVsU3RvcmVpIiwiaXNDb21wcmVzc2VkIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImN1YmVJbWFnZSIsImdsSW50ZXJuYWxGb3JtYXQiLCJzZXRUZXh0dXJlUGFyYW1ldGVycyIsIm1pcG1hcCIsIm1pcG1hcEltYWdlIiwic2V0VGV4dHVyZUN1YmVEeW5hbWljIiwidGV4dHVyZVR5cGUiLCJfX2N1cnJlbnRBbmlzb3Ryb3B5IiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwidGV4dHVyZU5lZWRzUG93ZXJPZlR3byIsImlzRGVwdGhUZXh0dXJlIiwic2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUiLCJmcmFtZWJ1ZmZlciIsImF0dGFjaG1lbnQiLCJ0ZXh0dXJlVGFyZ2V0IiwiYmluZEZyYW1lYnVmZmVyIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UiLCJyZW5kZXJidWZmZXIiLCJpc011bHRpc2FtcGxlIiwiYmluZFJlbmRlcmJ1ZmZlciIsImdldFJlbmRlclRhcmdldFNhbXBsZXMiLCJyZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJzZXR1cERlcHRoUmVuZGVyYnVmZmVyIiwiaXNDdWJlIiwid2ViZ2xEZXB0aFRleHR1cmUiLCJzZXR1cERlcHRoVGV4dHVyZSIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsIndhcm5lZFRleHR1cmUyRCIsIndhcm5lZFRleHR1cmVDdWJlIiwidGV4dHVyZVVuaXQiLCJyZXNldFRleHR1cmVVbml0cyIsInNldHVwUmVuZGVyVGFyZ2V0IiwiaXNNdWx0aXZpZXciLCJjcmVhdGVGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciIsImV4dCIsImNvbG9yVGV4dHVyZSIsImZyYW1lYnVmZmVyVGV4dHVyZU11bHRpdmlld09WUiIsImRlcHRoU3RlbmNpbFRleHR1cmUiLCJ2aWV3RnJhbWVidWZmZXJzIiwiZnJhbWVidWZmZXJUZXh0dXJlTGF5ZXIiLCJ1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAiLCJ1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsImJsaXRGcmFtZWJ1ZmZlciIsIldlYkdMVXRpbHMiLCJIQUxGX0ZMT0FUX09FUyIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJVTlNJR05FRF9JTlRfMjRfOF9XRUJHTCIsIldlYkdMTXVsdGl2aWV3UmVuZGVyVGFyZ2V0IiwiV2ViR0xNdWx0aXZpZXciLCJtYXQzIiwibWF0NCIsImNhbWVyYUFycmF5IiwicmVuZGVyU2l6ZSIsImF2YWlsYWJsZSIsIm1heE51bVZpZXdzIiwiZ2V0Q2FtZXJhQXJyYXkiLCJpc0FycmF5Q2FtZXJhIiwiaXNBdmFpbGFibGUiLCJnZXRDb250ZXh0QXR0cmlidXRlcyIsImFudGlhbGlhcyIsIk1BWF9WSUVXU19PVlIiLCJhdHRhY2hDYW1lcmEiLCJpc011bHRpdmlld0NvbXBhdGlibGUiLCJnZXREcmF3aW5nQnVmZmVyU2l6ZSIsInNldE51bVZpZXdzIiwicmVzaXplUmVuZGVyVGFyZ2V0IiwiZGV0YWNoQ2FtZXJhIiwic3JjUmVuZGVyVGFyZ2V0Iiwic3JjRnJhbWVidWZmZXJzIiwidmlld1dpZHRoIiwidmlld0hlaWdodCIsImZsdXNoIiwidXBkYXRlQ2FtZXJhUHJvamVjdGlvbk1hdHJpY2VzVW5pZm9ybSIsInVwZGF0ZUNhbWVyYVZpZXdNYXRyaWNlc1VuaWZvcm0iLCJ1cGRhdGVPYmplY3RNYXRyaWNlc1VuaWZvcm1zIiwiR3JvdXAiLCJBcnJheUNhbWVyYSIsImlzR3JvdXAiLCJfZ2VvbWV0cnkiLCJjYW1lcmFMUG9zIiwiY2FtZXJhUlBvcyIsInNldFByb2plY3Rpb25Gcm9tVW5pb24iLCJjYW1lcmFMIiwiY2FtZXJhUiIsImlwZCIsInByb2pMIiwicHJvalIiLCJ0b3BGb3YiLCJib3R0b21Gb3YiLCJsZWZ0Rm92IiwicmlnaHRGb3YiLCJ6T2Zmc2V0IiwieE9mZnNldCIsIm5lYXIyIiwiZmFyMiIsImxlZnQyIiwicmlnaHQyIiwidG9wMiIsImJvdHRvbTIiLCJXZWJWUk1hbmFnZXIiLCJyZW5kZXJXaWR0aCIsInJlbmRlckhlaWdodCIsImRldmljZSIsImZyYW1lRGF0YSIsInBvc2VUYXJnZXQiLCJjb250cm9sbGVycyIsInN0YW5kaW5nTWF0cml4Iiwic3RhbmRpbmdNYXRyaXhJbnZlcnNlIiwiZnJhbWVidWZmZXJTY2FsZUZhY3RvciIsInJlZmVyZW5jZVNwYWNlVHlwZSIsIlZSRnJhbWVEYXRhIiwib25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlIiwidGVtcFF1YXRlcm5pb24iLCJ0ZW1wUG9zaXRpb24iLCJjYW1lcmFWUiIsImlzUHJlc2VudGluZyIsImN1cnJlbnRQaXhlbFJhdGlvIiwiY3VycmVudFNpemUiLCJleWVQYXJhbWV0ZXJzIiwiZ2V0RXllUGFyYW1ldGVycyIsImdldFBpeGVsUmF0aW8iLCJzZXREcmF3aW5nQnVmZmVyU2l6ZSIsImFuaW1hdGlvbiIsInRyaWdnZXJzIiwiZmluZEdhbWVwYWQiLCJnYW1lcGFkcyIsIm5hdmlnYXRvciIsImdldEdhbWVwYWRzIiwiZ2FtZXBhZCIsInN0YXJ0c1dpdGgiLCJ1cGRhdGVWaWV3cG9ydEZyb21Cb3VuZHMiLCJib3VuZHMiLCJnZXRDb250cm9sbGVyIiwiY29udHJvbGxlciIsImdldERldmljZSIsInNldERldmljZSIsInNldEZyYW1lYnVmZmVyU2NhbGVGYWN0b3IiLCJzZXRSZWZlcmVuY2VTcGFjZVR5cGUiLCJzZXRQb3NlVGFyZ2V0IiwiZ2V0Q2FtZXJhIiwidXNlckhlaWdodCIsImRlcHRoTmVhciIsImRlcHRoRmFyIiwiZ2V0RnJhbWVEYXRhIiwic3RhZ2VQYXJhbWV0ZXJzIiwic2l0dGluZ1RvU3RhbmRpbmdUcmFuc2Zvcm0iLCJwb3NlIiwicG9zZU9iamVjdCIsIm9yaWVudGF0aW9uIiwibGVmdFZpZXdNYXRyaXgiLCJyaWdodFZpZXdNYXRyaXgiLCJsZWZ0UHJvamVjdGlvbk1hdHJpeCIsInJpZ2h0UHJvamVjdGlvbk1hdHJpeCIsImdldExheWVycyIsImxheWVyIiwibGVmdEJvdW5kcyIsInJpZ2h0Qm91bmRzIiwiaGFzUG9zaXRpb24iLCJidXR0b25JZCIsImJ1dHRvbnMiLCJwcmVzc2VkIiwidXBkYXRlQ29udHJvbGxlcnMiLCJnZXRTdGFuZGluZ01hdHJpeCIsInN1Ym1pdEZyYW1lIiwic2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUiLCJXZWJYUk1hbmFnZXIiLCJyZWZlcmVuY2VTcGFjZSIsImlucHV0U291cmNlcyIsIm9uU2Vzc2lvbkV2ZW50IiwiaW5wdXRTb3VyY2UiLCJvblNlc3Npb25FbmQiLCJzZXRGcmFtZWJ1ZmZlciIsIm9uUmVxdWVzdFJlZmVyZW5jZVNwYWNlIiwidXBkYXRlQ2FtZXJhIiwic2V0U2Vzc2lvbiIsInVwZGF0ZVJlbmRlclN0YXRlIiwiYmFzZUxheWVyIiwiWFJXZWJHTExheWVyIiwicmVxdWVzdFJlZmVyZW5jZVNwYWNlIiwidGhlbiIsIm9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayIsImdldFZpZXdlclBvc2UiLCJ2aWV3cyIsInRyYW5zZm9ybSIsImlucHV0UG9zZSIsImdldFBvc2UiLCJ0YXJnZXRSYXlTcGFjZSIsIldlYkdMUmVuZGVyZXIiLCJfY29udGV4dCIsIl9hbHBoYSIsIl9kZXB0aCIsIl9zdGVuY2lsIiwiX2FudGlhbGlhcyIsIl9wcmVtdWx0aXBsaWVkQWxwaGEiLCJfcHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiX3Bvd2VyUHJlZmVyZW5jZSIsInBvd2VyUHJlZmVyZW5jZSIsIl9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsImN1cnJlbnRSZW5kZXJMaXN0IiwiY3VycmVudFJlbmRlclN0YXRlIiwiZG9tRWxlbWVudCIsInNvcnRPYmplY3RzIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsInRvbmVNYXBwaW5nV2hpdGVQb2ludCIsInByb2dyYW1DYWNoZSIsInJlbmRlckxpc3RzIiwibW9ycGh0YXJnZXRzIiwiYnVmZmVyUmVuZGVyZXIiLCJpbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJfdGhpcyIsIl9pc0NvbnRleHRMb3N0IiwiX2ZyYW1lYnVmZmVyIiwiX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSIsIl9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJfY3VycmVudFJlbmRlclRhcmdldCIsIl9jdXJyZW50RnJhbWVidWZmZXIiLCJfY3VycmVudE1hdGVyaWFsSWQiLCJfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSIsIl9jdXJyZW50Q2FtZXJhIiwiX2N1cnJlbnRBcnJheUNhbWVyYSIsIl9jdXJyZW50Vmlld3BvcnQiLCJfY3VycmVudFNjaXNzb3IiLCJfY3VycmVudFNjaXNzb3JUZXN0IiwiX3dpZHRoIiwiX2hlaWdodCIsIl9waXhlbFJhdGlvIiwiX3NjaXNzb3IiLCJfc2Npc3NvclRlc3QiLCJfY2xpcHBpbmciLCJfY2xpcHBpbmdFbmFibGVkIiwiX2xvY2FsQ2xpcHBpbmdFbmFibGVkIiwiX3Byb2pTY3JlZW5NYXRyaXgiLCJfdmVjdG9yMyIsImdldFRhcmdldFBpeGVsUmF0aW8iLCJjb250ZXh0QXR0cmlidXRlcyIsInhyQ29tcGF0aWJsZSIsIm9uQ29udGV4dExvc3QiLCJvbkNvbnRleHRSZXN0b3JlIiwibWVzc2FnZSIsImluaXRHTENvbnRleHQiLCJ4ciIsIm11bHRpdmlldyIsInByZXZlbnREZWZhdWx0Iiwib25NYXRlcmlhbERpc3Bvc2UiLCJyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlIiwiZGVhbGxvY2F0ZU1hdGVyaWFsIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0Iiwic2V0UGl4ZWxSYXRpbyIsInVwZGF0ZVN0eWxlIiwic2V0Vmlld3BvcnQiLCJwaXhlbFJhdGlvIiwiZ2V0Q3VycmVudFZpZXdwb3J0IiwiZ2V0U2Npc3NvciIsInNldFNjaXNzb3IiLCJnZXRTY2lzc29yVGVzdCIsImJvb2xlYW4iLCJiaXRzIiwicmVuZGVyQnVmZmVySW1tZWRpYXRlIiwiaGFzUG9zaXRpb25zIiwiaGFzTm9ybWFscyIsImhhc1V2cyIsImhhc0NvbG9ycyIsInByb2dyYW1BdHRyaWJ1dGVzIiwicG9zaXRpb25BcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJub3JtYWxBcnJheSIsInV2QXJyYXkiLCJjb2xvckFycmF5Iiwic2V0UHJvZ3JhbSIsInVwZGF0ZUJ1ZmZlcnMiLCJyYW5nZUZhY3RvciIsImlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJwcm9ncmFtQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJzdHJpZGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibWF4SW5zdGFuY2VkQ291bnQiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwiY29tcGlsZSIsImluaXRNYXRlcmlhbCIsInByb2plY3RPYmplY3QiLCJpc0xPRCIsImlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwicmVuZGVyT2JqZWN0cyIsImNhbWVyYTIiLCJyZW5kZXJPYmplY3RJbW1lZGlhdGUiLCJtYXRlcmlhbFByb3BlcnRpZXMiLCJsaWdodHNTdGF0ZVZlcnNpb24iLCJwcm9ncmFtQ2hhbmdlIiwibnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzIiwibnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzIiwibmVlZHNMaWdodHMiLCJpc01lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJpc01lc2hQaG9uZ01hdGVyaWFsIiwiaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCIsImlzU2hhZG93TWF0ZXJpYWwiLCJtYXRlcmlhbE5lZWRzTGlnaHRzIiwicHJvZ1VuaWZvcm1zIiwidW5pZm9ybXNMaXN0IiwidXNlQ2FjaGUiLCJyZWZyZXNoUHJvZ3JhbSIsInJlZnJlc2hNYXRlcmlhbCIsInJlZnJlc2hMaWdodHMiLCJwX3VuaWZvcm1zIiwibV91bmlmb3JtcyIsInVDYW1Qb3MiLCJjYW1lcmFQb3NpdGlvbiIsImJvbmVUZXh0dXJlIiwiYm9uZU1hdHJpY2VzIiwiYm9uZVRleHR1cmVTaXplIiwiaXNGb2ciLCJkZW5zaXR5IiwicmVmcmVzaFVuaWZvcm1zRm9nIiwicmVmcmVzaFVuaWZvcm1zQ29tbW9uIiwicmVmcmVzaFVuaWZvcm1zTGFtYmVydCIsImlzTWVzaFRvb25NYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1Bob25nIiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsImlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCIsInJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsIiwiaXNNZXNoTWF0Y2FwTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNNYXRjYXAiLCJyZWZyZXNoVW5pZm9ybXNEZXB0aCIsInJlZnJlc2hVbmlmb3Jtc0Rpc3RhbmNlIiwiaXNNZXNoTm9ybWFsTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNOb3JtYWwiLCJpc0xpbmVCYXNpY01hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zTGluZSIsImlzTGluZURhc2hlZE1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zRGFzaCIsImlzUG9pbnRzTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNQb2ludHMiLCJpc1Nwcml0ZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3ByaXRlcyIsImx0Y18xIiwiTFRDXzEiLCJsdGNfMiIsIkxUQ18yIiwidXZTY2FsZU1hcCIsIm9wYXF1ZU9iamVjdHMiLCJ0cmFuc3BhcmVudE9iamVjdHMiLCJyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzIiwiYWN0aXZlQ3ViZUZhY2VJbmRleCIsInJlc3RvcmUiLCJ0ZXh0dXJlRm9ybWF0IiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsInJlYWRQaXhlbHMiLCJjb3B5RnJhbWVidWZmZXJUb1RleHR1cmUiLCJsZXZlbCIsImNvcHlUZXhJbWFnZTJEIiwiY29weVRleHR1cmVUb1RleHR1cmUiLCJzcmNUZXh0dXJlIiwiZHN0VGV4dHVyZSIsInRleFN1YkltYWdlMkQiLCJGb2dFeHAyIiwiRm9nIiwiSW50ZXJsZWF2ZWRCdWZmZXIiLCJJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsImludGVybGVhdmVkQnVmZmVyIiwiaXNJbnRlcmxlYXZlZEJ1ZmZlciIsIl9pbnRlcnNlY3RQb2ludCIsIl93b3JsZFNjYWxlIiwiX212UG9zaXRpb24iLCJfYWxpZ25lZFBvc2l0aW9uIiwiX3JvdGF0ZWRQb3NpdGlvbiIsIl92aWV3V29ybGRNYXRyaXgiLCJfdkEkMSIsIl92QiQxIiwiX3ZDJDEiLCJfdXZBJDEiLCJfdXZCJDEiLCJfdXZDJDEiLCJTcHJpdGUiLCJ0cmFuc2Zvcm1WZXJ0ZXgiLCJ2ZXJ0ZXhQb3NpdGlvbiIsIm12UG9zaXRpb24iLCJfdjEkNCIsIl92MiQyIiwiTE9EIiwibGV2ZWxzIiwiU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJiaW5kTWF0cml4SW52ZXJzZSIsImFkZExldmVsIiwiZ2V0T2JqZWN0Rm9yRGlzdGFuY2UiLCJjYWxjdWxhdGVJbnZlcnNlcyIsIm5vcm1hbGl6ZVNraW5XZWlnaHRzIiwic2tpbldlaWdodCIsIl9vZmZzZXRNYXRyaXgiLCJfaWRlbnRpdHlNYXRyaXgiLCJTa2VsZXRvbiIsImJvbmVJbnZlcnNlcyIsIkJvbmUiLCJJbnN0YW5jZWRNZXNoIiwibGluZWNhcCIsImxpbmVqb2luIiwiYm9uZSIsImlzQm9uZSIsImdldEJvbmVCeU5hbWUiLCJzZXRNYXRyaXhBdCIsIl9zdGFydCIsIl9lbmQiLCJfaW52ZXJzZU1hdHJpeCQxIiwiX3JheSQxIiwiX3NwaGVyZSQyIiwiTGluZSIsImNvbXB1dGVMaW5lRGlzdGFuY2VzIiwicG9zaXRpb25BdHRyaWJ1dGUiLCJsaW5lUHJlY2lzaW9uIiwibG9jYWxQcmVjaXNpb24iLCJsb2NhbFByZWNpc2lvblNxIiwidlN0YXJ0IiwidkVuZCIsImludGVyU2VnbWVudCIsImludGVyUmF5IiwibmJWZXJ0aWNlcyIsIl9zdGFydCQxIiwiX2VuZCQxIiwiTGluZVNlZ21lbnRzIiwiTGluZUxvb3AiLCJfaW52ZXJzZU1hdHJpeCQyIiwiX3JheSQyIiwiX3NwaGVyZSQzIiwiX3Bvc2l0aW9uJDEiLCJQb2ludHMiLCJ0ZXN0UG9pbnQiLCJsb2NhbFRocmVzaG9sZFNxIiwicmF5UG9pbnREaXN0YW5jZVNxIiwiaW50ZXJzZWN0UG9pbnQiLCJkaXN0YW5jZVRvUmF5IiwiVmlkZW9UZXh0dXJlIiwidmlkZW8iLCJDb21wcmVzc2VkVGV4dHVyZSIsIkNhbnZhc1RleHR1cmUiLCJEZXB0aFRleHR1cmUiLCJXaXJlZnJhbWVHZW9tZXRyeSIsIm9sIiwiZWRnZTEiLCJlZGdlMiIsImVkZ2UiLCJlZGdlcyIsIlBhcmFtZXRyaWNHZW9tZXRyeSIsImZ1bmMiLCJzbGljZXMiLCJzdGFja3MiLCJQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkiLCJFUFMiLCJwdSIsInB2Iiwic2xpY2VDb3VudCIsIlBvbHloZWRyb25HZW9tZXRyeSIsIlBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSIsInZlcnRleEJ1ZmZlciIsInV2QnVmZmVyIiwic3ViZGl2aWRlRmFjZSIsImNvbHMiLCJhaiIsImJqIiwicm93cyIsInB1c2hWZXJ0ZXgiLCJnZXRWZXJ0ZXhCeUluZGV4IiwiY29ycmVjdFVWIiwiYXppbXV0aCIsInN1YmRpdmlkZSIsImFwcGx5UmFkaXVzIiwiY2VudHJvaWQiLCJ1dkEiLCJ1dkIiLCJ1dkMiLCJhemkiLCJjb3JyZWN0VVZzIiwiY29ycmVjdFNlYW0iLCJnZW5lcmF0ZVVWcyIsIlRldHJhaGVkcm9uR2VvbWV0cnkiLCJUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiT2N0YWhlZHJvbkdlb21ldHJ5IiwiT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiSWNvc2FoZWRyb25HZW9tZXRyeSIsIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJEb2RlY2FoZWRyb25HZW9tZXRyeSIsIkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwiVHViZUdlb21ldHJ5IiwidHVidWxhclNlZ21lbnRzIiwicmFkaWFsU2VnbWVudHMiLCJjbG9zZWQiLCJ0YXBlciIsImJ1ZmZlckdlb21ldHJ5IiwiVHViZUJ1ZmZlckdlb21ldHJ5IiwidGFuZ2VudHMiLCJiaW5vcm1hbHMiLCJmcmFtZXMiLCJjb21wdXRlRnJlbmV0RnJhbWVzIiwiUCIsImdlbmVyYXRlU2VnbWVudCIsImdldFBvaW50QXQiLCJOIiwiQiIsImdlbmVyYXRlSW5kaWNlcyIsImdlbmVyYXRlQnVmZmVyRGF0YSIsIlRvcnVzS25vdEdlb21ldHJ5IiwidHViZSIsImhlaWdodFNjYWxlIiwiVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkiLCJQMSIsIlAyIiwiVCIsImNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSIsImN1Iiwic3UiLCJxdU92ZXJQIiwiY3MiLCJUb3J1c0dlb21ldHJ5IiwiYXJjIiwiVG9ydXNCdWZmZXJHZW9tZXRyeSIsInRocmVzaG9sZCIsInBhcmFtcyIsImxvY2FsVGhyZXNob2xkIiwicmVhZHlTdGF0ZSIsIkhBVkVfQ1VSUkVOVF9EQVRBIiwiaXNDYW52YXNUZXh0dXJlIiwiRWFyY3V0IiwiaG9sZUluZGljZXMiLCJkaW0iLCJpbnZTaXplIiwiaGFzSG9sZXMiLCJvdXRlckxlbiIsIm91dGVyTm9kZSIsImxpbmtlZExpc3QiLCJwcmV2IiwicXVldWUiLCJzdGVpbmVyIiwiZ2V0TGVmdG1vc3QiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJmaWx0ZXJQb2ludHMiLCJlbGltaW5hdGVIb2xlcyIsImVhcmN1dExpbmtlZCIsImNsb2Nrd2lzZSIsImxhc3QiLCJzdW0iLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsInJlbW92ZU5vZGUiLCJhZ2FpbiIsImFyZWEiLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsInB4IiwicHkiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInExIiwicTIiLCJOb2RlIiwiYW4iLCJicCIsIlNoYXBlVXRpbHMiLCJjb250b3VyIiwiaXNDbG9ja1dpc2UiLCJwdHMiLCJ0cmlhbmd1bGF0ZVNoYXBlIiwiaG9sZXMiLCJyZW1vdmVEdXBFbmRQdHMiLCJhZGRDb250b3VyIiwiaG9sZUluZGV4IiwiZm9yRWFjaCIsIkV4dHJ1ZGVHZW9tZXRyeSIsIkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSIsInZlcnRpY2VzQXJyYXkiLCJhZGRTaGFwZSIsInBsYWNlaG9sZGVyIiwiY3VydmVTZWdtZW50cyIsInN0ZXBzIiwiYmV2ZWxFbmFibGVkIiwiYmV2ZWxUaGlja25lc3MiLCJiZXZlbFNpemUiLCJiZXZlbE9mZnNldCIsImJldmVsU2VnbWVudHMiLCJleHRydWRlUGF0aCIsInV2Z2VuIiwiVVZHZW5lcmF0b3IiLCJXb3JsZFVWR2VuZXJhdG9yIiwiYW1vdW50IiwiZXh0cnVkZVB0cyIsInNwbGluZVR1YmUiLCJiaW5vcm1hbCIsInBvc2l0aW9uMiIsImFob2xlIiwiaGwiLCJleHRydWRlQnlQYXRoIiwiZ2V0U3BhY2VkUG9pbnRzIiwic2hhcGVQb2ludHMiLCJleHRyYWN0UG9pbnRzIiwicmV2ZXJzZSIsImNvbmNhdCIsInNjYWxlUHQyIiwicHQiLCJ2ZWMiLCJicyIsInZlcnQiLCJ2bGVuIiwiZmxlbiIsImdldEJldmVsVmVjIiwiaW5QdCIsImluUHJldiIsImluTmV4dCIsInZfdHJhbnNfeCIsInZfdHJhbnNfeSIsInNocmlua19ieSIsInZfcHJldl94Iiwidl9wcmV2X3kiLCJ2X25leHRfeCIsInZfbmV4dF95Iiwidl9wcmV2X2xlbnNxIiwiY29sbGluZWFyMCIsInZfcHJldl9sZW4iLCJ2X25leHRfbGVuIiwicHRQcmV2U2hpZnRfeCIsInB0UHJldlNoaWZ0X3kiLCJzZiIsInZfdHJhbnNfbGVuc3EiLCJkaXJlY3Rpb25fZXEiLCJjb250b3VyTW92ZW1lbnRzIiwib25lSG9sZU1vdmVtZW50cyIsImhvbGVzTW92ZW1lbnRzIiwidmVydGljZXNNb3ZlbWVudHMiLCJzaWRld2FsbHMiLCJsYXllcm9mZnNldCIsInNsIiwic2xlbjEiLCJzbGVuMiIsImY0IiwiZjMiLCJhZGRWZXJ0ZXgiLCJuZXh0SW5kZXgiLCJnZW5lcmF0ZVRvcFVWIiwiYWRkVVYiLCJnZW5lcmF0ZVNpZGVXYWxsVVYiLCJ2ZWN0b3IyIiwiYnVpbGRMaWRGYWNlcyIsImJ1aWxkU2lkZUZhY2VzIiwiaW5kZXhBIiwiaW5kZXhCIiwiaW5kZXhDIiwiYV94IiwiYV95IiwiYl94IiwiYl95IiwiY194IiwiY195IiwiaW5kZXhEIiwiYV96IiwiYl96IiwiY196IiwiZF94IiwiZF95IiwiZF96IiwiVGV4dEdlb21ldHJ5IiwidGV4dCIsIlRleHRCdWZmZXJHZW9tZXRyeSIsImZvbnQiLCJpc0ZvbnQiLCJnZW5lcmF0ZVNoYXBlcyIsIlNwaGVyZUdlb21ldHJ5IiwicGhpU3RhcnQiLCJwaGlMZW5ndGgiLCJ0aGV0YVN0YXJ0IiwidGhldGFMZW5ndGgiLCJTcGhlcmVCdWZmZXJHZW9tZXRyeSIsInRoZXRhRW5kIiwiZ3JpZCIsInZlcnRpY2VzUm93IiwidU9mZnNldCIsIlJpbmdHZW9tZXRyeSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJ0aGV0YVNlZ21lbnRzIiwicGhpU2VnbWVudHMiLCJSaW5nQnVmZmVyR2VvbWV0cnkiLCJzZWdtZW50IiwicmFkaXVzU3RlcCIsInRoZXRhU2VnbWVudExldmVsIiwiTGF0aGVHZW9tZXRyeSIsInNlZ21lbnRzIiwiTGF0aGVCdWZmZXJHZW9tZXRyeSIsImludmVyc2VTZWdtZW50cyIsIm4xIiwibjIiLCJTaGFwZUdlb21ldHJ5IiwiU2hhcGVCdWZmZXJHZW9tZXRyeSIsInNoYXBlSG9sZSIsImluZGV4T2Zmc2V0Iiwic2hhcGVWZXJ0aWNlcyIsInNoYXBlSG9sZXMiLCJ0b0pTT04kMSIsIkVkZ2VzR2VvbWV0cnkiLCJ0aHJlc2hvbGRBbmdsZSIsInRocmVzaG9sZERvdCIsInNvdXJjZVZlcnRpY2VzIiwiZmFjZTEiLCJmYWNlMiIsIkN5bGluZGVyR2VvbWV0cnkiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJvcGVuRW5kZWQiLCJDeWxpbmRlckJ1ZmZlckdlb21ldHJ5IiwiaW5kZXhBcnJheSIsImdlbmVyYXRlQ2FwIiwiY2VudGVySW5kZXhTdGFydCIsImNlbnRlckluZGV4RW5kIiwiY29zVGhldGEiLCJzaW5UaGV0YSIsInNsb3BlIiwiaW5kZXhSb3ciLCJnZW5lcmF0ZVRvcnNvIiwiQ29uZUdlb21ldHJ5IiwiQ29uZUJ1ZmZlckdlb21ldHJ5IiwiQ2lyY2xlR2VvbWV0cnkiLCJDaXJjbGVCdWZmZXJHZW9tZXRyeSIsIkdlb21ldHJpZXMiLCJmcmVlemUiLCJSYXdTaGFkZXJNYXRlcmlhbCIsIk1hdGVyaWFscyIsIkFuaW1hdGlvblV0aWxzIiwiYXJyYXlTbGljZSIsInRvIiwiaXNUeXBlZEFycmF5IiwiY29udmVydEFycmF5IiwiZm9yY2VDbG9uZSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJnZXRLZXlmcmFtZU9yZGVyIiwidGltZXMiLCJzb3J0ZWRBcnJheSIsIm5WYWx1ZXMiLCJzcmNPZmZzZXQiLCJmbGF0dGVuSlNPTiIsImpzb25LZXlzIiwidmFsdWVQcm9wZXJ0eU5hbWUiLCJJbnRlcnBvbGFudCIsInBhcmFtZXRlclBvc2l0aW9ucyIsInNhbXBsZVZhbHVlcyIsInNhbXBsZVNpemUiLCJyZXN1bHRCdWZmZXIiLCJfY2FjaGVkSW5kZXgiLCJ2YWx1ZVNpemUiLCJDdWJpY0ludGVycG9sYW50IiwiX3dlaWdodFByZXYiLCJfb2Zmc2V0UHJldiIsIl93ZWlnaHROZXh0IiwiX29mZnNldE5leHQiLCJMaW5lYXJJbnRlcnBvbGFudCIsIkRpc2NyZXRlSW50ZXJwb2xhbnQiLCJLZXlmcmFtZVRyYWNrIiwiaW50ZXJwb2xhdGlvbiIsIlRpbWVCdWZmZXJUeXBlIiwiVmFsdWVCdWZmZXJUeXBlIiwic2V0SW50ZXJwb2xhdGlvbiIsIkRlZmF1bHRJbnRlcnBvbGF0aW9uIiwiQm9vbGVhbktleWZyYW1lVHJhY2siLCJDb2xvcktleWZyYW1lVHJhY2siLCJOdW1iZXJLZXlmcmFtZVRyYWNrIiwiUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50IiwiUXVhdGVybmlvbktleWZyYW1lVHJhY2siLCJTdHJpbmdLZXlmcmFtZVRyYWNrIiwiVmVjdG9yS2V5ZnJhbWVUcmFjayIsIkFuaW1hdGlvbkNsaXAiLCJkdXJhdGlvbiIsInRyYWNrcyIsInJlc2V0RHVyYXRpb24iLCJwYXJzZUtleWZyYW1lVHJhY2siLCJqc29uIiwidHJhY2tUeXBlIiwidHlwZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUiLCJldmFsdWF0ZSIsInBwIiwidmFsaWRhdGVfaW50ZXJ2YWwiLCJzZWVrIiwibGluZWFyX3NjYW4iLCJmb3J3YXJkX3NjYW4iLCJnaXZlVXBBdCIsImFmdGVyRW5kXyIsInQxZ2xvYmFsIiwiYmVmb3JlU3RhcnRfIiwibWlkIiwiaW50ZXJ2YWxDaGFuZ2VkXyIsImludGVycG9sYXRlXyIsInNldHRpbmdzIiwiRGVmYXVsdFNldHRpbmdzXyIsImdldFNldHRpbmdzXyIsImNvcHlTYW1wbGVWYWx1ZV8iLCJlbmRpbmdTdGFydCIsImVuZGluZ0VuZCIsImlQcmV2IiwiaU5leHQiLCJ0UHJldiIsInROZXh0IiwiaGFsZkR0IiwibzEiLCJvMCIsIm9QIiwib04iLCJ3UCIsIndOIiwicHBwIiwic1AiLCJzTiIsIm9mZnNldDEiLCJvZmZzZXQwIiwid2VpZ2h0MSIsIndlaWdodDAiLCJ0cmFjayIsImdldEludGVycG9sYXRpb24iLCJWYWx1ZVR5cGVOYW1lIiwiSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGUiLCJnZXRWYWx1ZVNpemUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXIiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGgiLCJmYWN0b3J5TWV0aG9kIiwiY3JlYXRlSW50ZXJwb2xhbnQiLCJzaGlmdCIsInRpbWVPZmZzZXQiLCJ0aW1lU2NhbGUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibktleXMiLCJ2YWxpZGF0ZSIsInZhbGlkIiwicHJldlRpbWUiLCJjdXJyVGltZSIsIm9wdGltaXplIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJUeXBlZEtleWZyYW1lVHJhY2siLCJqc29uVHJhY2tzIiwiZnJhbWVUaW1lIiwiZnBzIiwiY2xpcCIsImNsaXBUcmFja3MiLCJDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm1vcnBoVGFyZ2V0U2VxdWVuY2UiLCJub0xvb3AiLCJudW1Nb3JwaFRhcmdldHMiLCJmaW5kQnlOYW1lIiwib2JqZWN0T3JDbGlwQXJyYXkiLCJjbGlwQXJyYXkiLCJhbmltYXRpb25zIiwiQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMiLCJhbmltYXRpb25Ub01vcnBoVGFyZ2V0cyIsInBhdHRlcm4iLCJwYXJ0cyIsImFuaW1hdGlvbk1vcnBoVGFyZ2V0cyIsImNsaXBzIiwicGFyc2VBbmltYXRpb24iLCJhZGROb25lbXB0eVRyYWNrIiwidHJhY2tOYW1lIiwiYW5pbWF0aW9uS2V5cyIsInByb3BlcnR5TmFtZSIsImRlc3RUcmFja3MiLCJjbGlwTmFtZSIsImhpZXJhcmNoeVRyYWNrcyIsImhpZXJhcmNoeSIsIm1vcnBoVGFyZ2V0TmFtZXMiLCJtb3JwaFRhcmdldE5hbWUiLCJhbmltYXRpb25LZXkiLCJib25lTmFtZSIsIkNhY2hlIiwiZmlsZXMiLCJmaWxlIiwiTG9hZGluZ01hbmFnZXIiLCJvbkxvYWQiLCJvblByb2dyZXNzIiwib25FcnJvciIsImlzTG9hZGluZyIsIml0ZW1zTG9hZGVkIiwiaXRlbXNUb3RhbCIsInVybE1vZGlmaWVyIiwiaGFuZGxlcnMiLCJvblN0YXJ0IiwiaXRlbVN0YXJ0IiwiaXRlbUVuZCIsIml0ZW1FcnJvciIsInJlc29sdmVVUkwiLCJzZXRVUkxNb2RpZmllciIsImFkZEhhbmRsZXIiLCJyZWdleCIsImxvYWRlciIsInJlbW92ZUhhbmRsZXIiLCJnZXRIYW5kbGVyIiwiRGVmYXVsdExvYWRpbmdNYW5hZ2VyIiwiTG9hZGVyIiwibWFuYWdlciIsImNyb3NzT3JpZ2luIiwicmVzb3VyY2VQYXRoIiwibG9hZCIsInNldENyb3NzT3JpZ2luIiwic2V0UGF0aCIsInNldFJlc291cmNlUGF0aCIsImxvYWRpbmciLCJGaWxlTG9hZGVyIiwiQW5pbWF0aW9uTG9hZGVyIiwiQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIiLCJEYXRhVGV4dHVyZUxvYWRlciIsIkltYWdlTG9hZGVyIiwiQ3ViZVRleHR1cmVMb2FkZXIiLCJUZXh0dXJlTG9hZGVyIiwiQ3VydmUiLCJhcmNMZW5ndGhEaXZpc2lvbnMiLCJFbGxpcHNlQ3VydmUiLCJhWCIsImFZIiwieFJhZGl1cyIsInlSYWRpdXMiLCJhU3RhcnRBbmdsZSIsImFFbmRBbmdsZSIsImFDbG9ja3dpc2UiLCJhUm90YXRpb24iLCJBcmNDdXJ2ZSIsImFSYWRpdXMiLCJDdWJpY1BvbHkiLCJjMCIsImluaXRDYXRtdWxsUm9tIiwieDMiLCJ0ZW5zaW9uIiwiaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tIiwiZHQwIiwiZHQxIiwiZHQyIiwidDIiLCJjYWxjIiwiY2FjaGVkIiwic2V0VGltZW91dCIsImRhdGFVcmlSZWdleFJlc3VsdCIsIm1pbWVUeXBlIiwiaXNCYXNlNjQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhdG9iIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJjaGFyQ29kZUF0IiwiQmxvYiIsInBhcnNlciIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImhlYWRlciIsIm9wZW4iLCJjYWxsYmFja3MiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvdmVycmlkZU1pbWVUeXBlIiwicmVxdWVzdEhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwic2V0UmVzcG9uc2VUeXBlIiwic2V0V2l0aENyZWRlbnRpYWxzIiwic2V0TWltZVR5cGUiLCJsb2FkVGV4dHVyZSIsInRleERhdGFzIiwibG9hZGVkIiwibWlwbWFwQ291bnQiLCJpc0N1YmVtYXAiLCJ0ZXhEYXRhIiwib25JbWFnZUxvYWQiLCJvbkltYWdlRXJyb3IiLCJzdWJzdHIiLCJ1cmxzIiwiaXNKUEVHIiwic2VhcmNoIiwiZ2V0UG9pbnQiLCJvcHRpb25hbFRhcmdldCIsImdldFV0b1RtYXBwaW5nIiwiZ2V0UG9pbnRzIiwiZGl2aXNpb25zIiwiZ2V0TGVuZ3RoIiwibGVuZ3RocyIsImdldExlbmd0aHMiLCJjYWNoZUFyY0xlbmd0aHMiLCJjdXJyZW50IiwidXBkYXRlQXJjTGVuZ3RocyIsInRhcmdldEFyY0xlbmd0aCIsImFyY0xlbmd0aHMiLCJjb21wYXJpc29uIiwibGVuZ3RoQmVmb3JlIiwiZ2V0VGFuZ2VudCIsInB0MSIsImdldFRhbmdlbnRBdCIsIm1hdCIsIk1BWF9WQUxVRSIsInR6IiwiZnJvbUpTT04iLCJpc0VsbGlwc2VDdXJ2ZSIsInR3b1BpIiwiZGVsdGFBbmdsZSIsInNhbWVQb2ludHMiLCJpc0FyY0N1cnZlIiwicHoiLCJDYXRtdWxsUm9tQ3VydmUzIiwiY3VydmVUeXBlIiwiQ2F0bXVsbFJvbSIsIlF1YWRyYXRpY0JlemllciIsIlF1YWRyYXRpY0JlemllclAwIiwiUXVhZHJhdGljQmV6aWVyUDEiLCJRdWFkcmF0aWNCZXppZXJQMiIsIkN1YmljQmV6aWVyIiwiQ3ViaWNCZXppZXJQMCIsIkN1YmljQmV6aWVyUDEiLCJDdWJpY0JlemllclAyIiwiQ3ViaWNCZXppZXJQMyIsIkN1YmljQmV6aWVyQ3VydmUiLCJ2MyIsIkN1YmljQmV6aWVyQ3VydmUzIiwiTGluZUN1cnZlIiwiTGluZUN1cnZlMyIsIlF1YWRyYXRpY0JlemllckN1cnZlIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiU3BsaW5lQ3VydmUiLCJpc0NhdG11bGxSb21DdXJ2ZTMiLCJpbnRQb2ludCIsIndlaWdodCIsImlzQ3ViaWNCZXppZXJDdXJ2ZSIsImlzQ3ViaWNCZXppZXJDdXJ2ZTMiLCJpc0xpbmVDdXJ2ZSIsImlzTGluZUN1cnZlMyIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJpc1F1YWRyYXRpY0JlemllckN1cnZlMyIsImlzU3BsaW5lQ3VydmUiLCJDdXJ2ZXMiLCJDdXJ2ZVBhdGgiLCJjdXJ2ZXMiLCJhdXRvQ2xvc2UiLCJQYXRoIiwiY3VycmVudFBvaW50IiwiU2hhcGUiLCJMaWdodCIsIkhlbWlzcGhlcmVMaWdodCIsIkxpZ2h0U2hhZG93IiwiX2ZyYW1lRXh0ZW50cyIsIl92aWV3cG9ydENvdW50IiwiX3ZpZXdwb3J0cyIsIlNwb3RMaWdodFNoYWRvdyIsIlNwb3RMaWdodCIsInBvd2VyIiwiUG9pbnRMaWdodFNoYWRvdyIsIl9jdWJlRGlyZWN0aW9ucyIsIl9jdWJlVXBzIiwiUG9pbnRMaWdodCIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIkRpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJEaXJlY3Rpb25hbExpZ2h0IiwiQW1iaWVudExpZ2h0IiwiUmVjdEFyZWFMaWdodCIsIk1hdGVyaWFsTG9hZGVyIiwiY3VydmUiLCJjbG9zZVBhdGgiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJjdXJ2ZUxlbmd0aHMiLCJnZXRDdXJ2ZUxlbmd0aHMiLCJzZWdtZW50TGVuZ3RoIiwibGVucyIsImNhY2hlTGVuZ3RocyIsInN1bXMiLCJtb3ZlVG8iLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiYUNQeCIsImFDUHkiLCJiZXppZXJDdXJ2ZVRvIiwiYUNQMXgiLCJhQ1AxeSIsImFDUDJ4IiwiYUNQMnkiLCJzcGxpbmVUaHJ1IiwiYWJzYXJjIiwiYWJzZWxsaXBzZSIsImVsbGlwc2UiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwiZ2V0UG9pbnRzSG9sZXMiLCJob2xlc1B0cyIsIl9saWdodFBvc2l0aW9uV29ybGQiLCJfbG9va1RhcmdldCIsInNoYWRvd01hdHJpeCIsInByb2pTY3JlZW5NYXRyaXgiLCJsb29rVGFyZ2V0IiwibGlnaHRQb3NpdGlvbldvcmxkIiwidmlld3BvcnRJbmRleCIsImlzU3BvdExpZ2h0U2hhZG93Iiwidmlld0NhbWVyYSIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwiem9vbVciLCJ6b29tSCIsInNjYWxlVyIsInNjYWxlSCIsImlzRGlyZWN0aW9uYWxMaWdodFNoYWRvdyIsImdldFRleHR1cmUiLCJzaGFkaW5nIiwic2V0VGV4dHVyZXMiLCJMb2FkZXJVdGlscyIsImRlY29kZVRleHQiLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImZyb21DaGFyQ29kZSIsImVzY2FwZSIsImV4dHJhY3RVcmxCYXNlIiwibGFzdEluZGV4T2YiLCJJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSIsIkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsIkJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwidHlwZWRBcnJheSIsIlRZUEVEX0FSUkFZUyIsImJ1ZmZlckF0dHJpYnV0ZSIsImRyYXdjYWxscyIsIm9mZnNldHMiLCJPYmplY3RMb2FkZXIiLCJwYXJzZVNoYXBlIiwicGFyc2VHZW9tZXRyaWVzIiwicGFyc2VJbWFnZXMiLCJwYXJzZVRleHR1cmVzIiwicGFyc2VNYXRlcmlhbHMiLCJwYXJzZU9iamVjdCIsInBhcnNlQW5pbWF0aW9ucyIsImJ1ZmZlckdlb21ldHJ5TG9hZGVyIiwiZGV0YWlscyIsImdlb21ldHJ5U2hhcGVzIiwiTGVnYWN5SlNPTkxvYWRlciIsImxvYWRJbWFnZSIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsIlVWTWFwcGluZyIsIkN1YmVSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVSZWZyYWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nIiwiRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmciLCJTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nIiwiQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmciLCJSZXBlYXRXcmFwcGluZyIsIkNsYW1wVG9FZGdlV3JhcHBpbmciLCJNaXJyb3JlZFJlcGVhdFdyYXBwaW5nIiwiTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsIkxpbmVhckZpbHRlciIsIkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIiLCJJbWFnZUJpdG1hcExvYWRlciIsImNyZWF0ZUltYWdlQml0bWFwIiwiZmV0Y2giLCJTaGFwZVBhdGgiLCJzdWJQYXRocyIsImN1cnJlbnRQYXRoIiwiRm9udCIsImNyZWF0ZVBhdGgiLCJjaGFyIiwiZ2x5cGgiLCJnbHlwaHMiLCJjcHgiLCJjcHkiLCJjcHgxIiwiY3B5MSIsImNweDIiLCJjcHkyIiwib3V0bGluZSIsIl9jYWNoZWRPdXRsaW5lIiwiaGEiLCJmYW1pbHlOYW1lIiwiRm9udExvYWRlciIsInNldE9wdGlvbnMiLCJyZXMiLCJibG9iIiwiaW1hZ2VCaXRtYXAiLCJ0b1NoYXBlcyIsImlzQ0NXIiwibm9Ib2xlcyIsInRvU2hhcGVzTm9Ib2xlcyIsImluU3VicGF0aHMiLCJ0bXBQYXRoIiwidG1wU2hhcGUiLCJpc1BvaW50SW5zaWRlUG9seWdvbiIsImluUG9seWdvbiIsInBvbHlMZW4iLCJlZGdlTG93UHQiLCJlZGdlSGlnaFB0IiwiZWRnZUR4IiwiZWRnZUR5IiwicGVycEVkZ2UiLCJzb2xpZCIsImhvbGVzRmlyc3QiLCJ0bXBQb2ludHMiLCJ0bXBIb2xlcyIsImJldHRlclNoYXBlSG9sZXMiLCJuZXdTaGFwZXMiLCJuZXdTaGFwZUhvbGVzIiwibWFpbklkeCIsImFtYmlndW91cyIsInRvQ2hhbmdlIiwic0lkeCIsInNMZW4iLCJzaG8iLCJoSWR4IiwiaG8iLCJob2xlX3VuYXNzaWduZWQiLCJzMklkeCIsImZyb21zIiwidG9zIiwicGF0aHMiLCJjaGFycyIsImxpbmVfaGVpZ2h0IiwieU1heCIsInlNaW4iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJyZXQiLCJjcmVhdGVQYXRocyIsInN1YnN0cmluZyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIkF1ZGlvTG9hZGVyIiwiU3BoZXJpY2FsSGFybW9uaWNzMyIsIkxpZ2h0UHJvYmUiLCJIZW1pc3BoZXJlTGlnaHRQcm9iZSIsInNreSIsImdyb3VuZCIsIkFtYmllbnRMaWdodFByb2JlIiwiYnVmZmVyQ29weSIsImRlY29kZUF1ZGlvRGF0YSIsImF1ZGlvQnVmZmVyIiwiaXNTcGhlcmljYWxIYXJtb25pY3MzIiwiemVybyIsImdldEF0IiwiY29lZmYiLCJhZGRTY2FsZSIsImdldElycmFkaWFuY2VBdCIsImdldEJhc2lzQXQiLCJzaEJhc2lzIiwiaXNIZW1pc3BoZXJlTGlnaHRQcm9iZSIsImlzQW1iaWVudExpZ2h0UHJvYmUiLCJfZXllUmlnaHQiLCJfZXllTGVmdCIsIlN0ZXJlb0NhbWVyYSIsImV5ZVNlcCIsIl9jYWNoZSIsIkNsb2NrIiwiYXV0b1N0YXJ0Iiwib2xkVGltZSIsImVsYXBzZWRUaW1lIiwicnVubmluZyIsInhtaW4iLCJ4bWF4IiwiZXllU2VwSGFsZiIsImV5ZVNlcE9uUHJvamVjdGlvbiIsInltYXgiLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJub3ciLCJnZXRFbGFwc2VkVGltZSIsImdldERlbHRhIiwibmV3VGltZSIsIl9wb3NpdGlvbiQyIiwiX3F1YXRlcm5pb24kMyIsIl9zY2FsZSQxIiwiX29yaWVudGF0aW9uIiwiQXVkaW9MaXN0ZW5lciIsImdhaW4iLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwidGltZURlbHRhIiwiX2Nsb2NrIiwiQXVkaW8iLCJnZXRJbnB1dCIsImF1dG9wbGF5IiwiZGV0dW5lIiwibG9vcCIsInBsYXliYWNrUmF0ZSIsImlzUGxheWluZyIsImhhc1BsYXliYWNrQ29udHJvbCIsInNvdXJjZVR5cGUiLCJmaWx0ZXJzIiwicmVtb3ZlRmlsdGVyIiwiZGlzY29ubmVjdCIsImdldEZpbHRlciIsInNldEZpbHRlciIsImdldE1hc3RlclZvbHVtZSIsInNldE1hc3RlclZvbHVtZSIsInNldFRhcmdldEF0VGltZSIsImN1cnJlbnRUaW1lIiwicG9zaXRpb25YIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJwb3NpdGlvblkiLCJwb3NpdGlvbloiLCJmb3J3YXJkWCIsImZvcndhcmRZIiwiZm9yd2FyZFoiLCJ1cFgiLCJ1cFkiLCJ1cFoiLCJzZXRPcmllbnRhdGlvbiIsImdldE91dHB1dCIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRNZWRpYVN0cmVhbVNvdXJjZSIsIm1lZGlhU3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiY3JlYXRlQnVmZmVyU291cmNlIiwib25lbmRlZCIsIm9uRW5kZWQiLCJzZXREZXR1bmUiLCJzZXRQbGF5YmFja1JhdGUiLCJwYXVzZSIsImdldEZpbHRlcnMiLCJzZXRGaWx0ZXJzIiwiZ2V0RGV0dW5lIiwiZ2V0UGxheWJhY2tSYXRlIiwiZ2V0TG9vcCIsInNldExvb3AiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfcG9zaXRpb24kMyIsIl9xdWF0ZXJuaW9uJDQiLCJfc2NhbGUkMiIsIl9vcmllbnRhdGlvbiQxIiwiUG9zaXRpb25hbEF1ZGlvIiwicGFubmVyIiwiY3JlYXRlUGFubmVyIiwicGFubmluZ01vZGVsIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsIlByb3BlcnR5TWl4ZXIiLCJiaW5kaW5nIiwibWl4RnVuY3Rpb24iLCJfc2xlcnAiLCJfc2VsZWN0IiwiX2xlcnAiLCJfbWl4QnVmZmVyUmVnaW9uIiwiY3VtdWxhdGl2ZVdlaWdodCIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJnZXRSZWZEaXN0YW5jZSIsInJlZkRpc3RhbmNlIiwic2V0UmVmRGlzdGFuY2UiLCJnZXRSb2xsb2ZmRmFjdG9yIiwicm9sbG9mZkZhY3RvciIsInNldFJvbGxvZmZGYWN0b3IiLCJnZXREaXN0YW5jZU1vZGVsIiwiZGlzdGFuY2VNb2RlbCIsInNldERpc3RhbmNlTW9kZWwiLCJnZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJzZXREaXJlY3Rpb25hbENvbmUiLCJjb25lSW5uZXJBbmdsZSIsImNvbmVPdXRlckFuZ2xlIiwiY29uZU91dGVyR2FpbiIsIm9yaWVudGF0aW9uWCIsIm9yaWVudGF0aW9uWSIsIm9yaWVudGF0aW9uWiIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJhY2N1bXVsYXRlIiwiYWNjdUluZGV4IiwiY3VycmVudFdlaWdodCIsIm1peCIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzYXZlT3JpZ2luYWxTdGF0ZSIsImdldFZhbHVlIiwicmVzdG9yZU9yaWdpbmFsU3RhdGUiLCJfcmVzZXJ2ZWRSZSIsIlJlZ0V4cCIsIl93b3JkQ2hhck9yRG90IiwiX2RpcmVjdG9yeVJlIiwiX25vZGVSZSIsIl9vYmplY3RSZSIsIl9wcm9wZXJ0eVJlIiwiX3RyYWNrUmUiLCJfc3VwcG9ydGVkT2JqZWN0TmFtZXMiLCJDb21wb3NpdGUiLCJ0YXJnZXRHcm91cCIsIm9wdGlvbmFsUGFyc2VkUGF0aCIsInBhcnNlZFBhdGgiLCJQcm9wZXJ0eUJpbmRpbmciLCJwYXJzZVRyYWNrTmFtZSIsIl90YXJnZXRHcm91cCIsIl9iaW5kaW5ncyIsInN1YnNjcmliZV8iLCJyb290Tm9kZSIsIm5vZGUiLCJmaW5kTm9kZSIsIm5vZGVOYW1lIiwiQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJuQ2FjaGVkT2JqZWN0c18iLCJfaW5kaWNlc0J5VVVJRCIsIl9wYXRocyIsIl9wYXJzZWRQYXRocyIsIl9iaW5kaW5nc0luZGljZXNCeVBhdGgiLCJzdGF0cyIsInRvdGFsIiwiQW5pbWF0aW9uQWN0aW9uIiwibWl4ZXIiLCJsb2NhbFJvb3QiLCJfbWl4ZXIiLCJfY2xpcCIsIl9sb2NhbFJvb3QiLCJuVHJhY2tzIiwiaW50ZXJwb2xhbnRzIiwiaW50ZXJwb2xhbnRTZXR0aW5ncyIsImludGVycG9sYW50IiwiX2ludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRzIiwiX3Byb3BlcnR5QmluZGluZ3MiLCJfY2FjaGVJbmRleCIsIl9ieUNsaXBDYWNoZUluZGV4IiwiX3RpbWVTY2FsZUludGVycG9sYW50IiwiX3dlaWdodEludGVycG9sYW50IiwiX2xvb3BDb3VudCIsIl9zdGFydFRpbWUiLCJfZWZmZWN0aXZlVGltZVNjYWxlIiwiX2VmZmVjdGl2ZVdlaWdodCIsInJlcGV0aXRpb25zIiwicGF1c2VkIiwiY2xhbXBXaGVuRmluaXNoZWQiLCJ6ZXJvU2xvcGVBdFN0YXJ0IiwiemVyb1Nsb3BlQXRFbmQiLCJBbmltYXRpb25NaXhlciIsInJvb3QiLCJfcm9vdCIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJVbmlmb3JtIiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJSYXljYXN0ZXIiLCJQb2ludENsb3VkIiwiYXNjU29ydCIsImludGVyc2VjdE9iamVjdCIsIlNwaGVyaWNhbCIsIkN5bGluZHJpY2FsIiwiZmlyc3RWYWxpZEluZGV4IiwiYmluZGluZ3MiLCJ1bmJpbmQiLCJpc0FuaW1hdGlvbk9iamVjdEdyb3VwIiwic2FuaXRpemVOb2RlTmFtZSIsIm1hdGNoZXMiLCJyZXN1bHRzIiwib2JqZWN0TmFtZSIsIm9iamVjdEluZGV4IiwicHJvcGVydHlJbmRleCIsImxhc3REb3QiLCJzdWJUcmVlTm9kZSIsInNlYXJjaE5vZGVTdWJ0cmVlIiwiY2hpbGROb2RlIiwiX2dldFZhbHVlX3VuYXZhaWxhYmxlIiwiX3NldFZhbHVlX3VuYXZhaWxhYmxlIiwiQmluZGluZ1R5cGUiLCJEaXJlY3QiLCJFbnRpcmVBcnJheSIsIkFycmF5RWxlbWVudCIsIkhhc0Zyb21Ub0FycmF5IiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJHZXR0ZXJCeUJpbmRpbmdUeXBlIiwicmVzb2x2ZWRQcm9wZXJ0eSIsIlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nIiwidGFyZ2V0T2JqZWN0IiwiZGVzdCIsInRhcmdldEFycmF5Iiwic291cmNlQXJyYXkiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiYmluZGluZ1R5cGUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsIl9zZXRWYWx1ZV91bmJvdW5kIiwibk9iamVjdHMiLCJuQ2FjaGVkT2JqZWN0cyIsImluZGljZXNCeVVVSUQiLCJwYXJzZWRQYXRocyIsIm5CaW5kaW5ncyIsImtub3duT2JqZWN0IiwiZmlyc3RBY3RpdmVJbmRleCIsImxhc3RDYWNoZWRPYmplY3QiLCJiaW5kaW5nc0ZvclBhdGgiLCJsYXN0Q2FjaGVkIiwibGFzdENhY2hlZEluZGV4IiwiZmlyc3RBY3RpdmVPYmplY3QiLCJmaXJzdEFjdGl2ZSIsInVuY2FjaGUiLCJsYXN0T2JqZWN0IiwiaW5kaWNlc0J5UGF0aCIsInVuc3Vic2NyaWJlXyIsImxhc3RCaW5kaW5nc0luZGV4IiwibGFzdEJpbmRpbmdzIiwiX2FjdGl2YXRlQWN0aW9uIiwiX2RlYWN0aXZhdGVBY3Rpb24iLCJzdG9wRmFkaW5nIiwic3RvcFdhcnBpbmciLCJpc1J1bm5pbmciLCJfaXNBY3RpdmVBY3Rpb24iLCJpc1NjaGVkdWxlZCIsInN0YXJ0QXQiLCJzZXRFZmZlY3RpdmVXZWlnaHQiLCJnZXRFZmZlY3RpdmVXZWlnaHQiLCJmYWRlSW4iLCJfc2NoZWR1bGVGYWRpbmciLCJmYWRlT3V0IiwiY3Jvc3NGYWRlRnJvbSIsImZhZGVPdXRBY3Rpb24iLCJ3YXJwIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJzdGFydEVuZFJhdGlvIiwiZW5kU3RhcnRSYXRpbyIsImNyb3NzRmFkZVRvIiwiZmFkZUluQWN0aW9uIiwid2VpZ2h0SW50ZXJwb2xhbnQiLCJfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQiLCJzZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJnZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJzZXREdXJhdGlvbiIsInN5bmNXaXRoIiwiYWN0aW9uIiwiaGFsdCIsInN0YXJ0VGltZVNjYWxlIiwiZW5kVGltZVNjYWxlIiwiX2xlbmRDb250cm9sSW50ZXJwb2xhbnQiLCJ0aW1lU2NhbGVJbnRlcnBvbGFudCIsImdldE1peGVyIiwiZ2V0Q2xpcCIsImdldFJvb3QiLCJfdXBkYXRlIiwiZGVsdGFUaW1lIiwidGltZURpcmVjdGlvbiIsInRpbWVSdW5uaW5nIiwiX3VwZGF0ZVRpbWVTY2FsZSIsImNsaXBUaW1lIiwiX3VwZGF0ZVRpbWUiLCJfdXBkYXRlV2VpZ2h0IiwicHJvcGVydHlNaXhlcnMiLCJpbnRlcnBvbGFudFZhbHVlIiwibG9vcENvdW50IiwicGluZ1BvbmciLCJfc2V0RW5kaW5ncyIsImhhbmRsZV9zdG9wIiwibG9vcERlbHRhIiwicGVuZGluZyIsImF0U3RhcnQiLCJhdEVuZCIsIndlaWdodE5vdyIsIndlaWdodFRoZW4iLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zIiwiY29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnNCeUNsaXAiLCJhY3Rpb25CeVJvb3QiLCJfcmVtb3ZlSW5hY3RpdmVBY3Rpb24iLCJsYXN0SW5hY3RpdmVBY3Rpb24iLCJjYWNoZUluZGV4Iiwia25vd25BY3Rpb25zRm9yQ2xpcCIsImxhc3RLbm93bkFjdGlvbiIsImJ5Q2xpcENhY2hlSW5kZXgiLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmciLCJwcmV2SW5kZXgiLCJsYXN0QWN0aXZlSW5kZXgiLCJmaXJzdEluYWN0aXZlQWN0aW9uIiwiZmlyc3RJbmFjdGl2ZUluZGV4IiwibGFzdEFjdGl2ZUFjdGlvbiIsImJpbmRpbmdCeU5hbWUiLCJwcm9wQmluZGluZyIsImxhc3RJbmFjdGl2ZUJpbmRpbmciLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJfX2NhY2hlSW5kZXgiLCJsYXN0QWN0aXZlSW50ZXJwb2xhbnQiLCJjbGlwQWN0aW9uIiwib3B0aW9uYWxSb290IiwiY2xpcE9iamVjdCIsImV4aXN0aW5nQWN0aW9uIiwibmV3QWN0aW9uIiwic3RvcEFsbEFjdGlvbiIsIm5BY3Rpb25zIiwic2V0VGltZSIsInRpbWVJblNlY29uZHMiLCJ1bmNhY2hlQ2xpcCIsImFjdGlvbnNUb1JlbW92ZSIsInVuY2FjaGVSb290IiwidW5jYWNoZUFjdGlvbiIsInNldEZyb21DYW1lcmEiLCJjb29yZHMiLCJpbnRlcnNlY3RPYmplY3RzIiwib3RoZXIiLCJtYWtlU2FmZSIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJfdmVjdG9yJDYiLCJCb3gyIiwiX3N0YXJ0UCIsIl9zdGFydEVuZCIsIkxpbmUzIiwiSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwiZGlzdGFuY2VTcSIsImNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIiLCJjbGFtcFRvTGluZSIsInN0YXJ0RW5kMiIsIl92MSQ1IiwiX3YyJDMiLCJfbm9ybWFsTWF0cml4JDEiLCJfa2V5cyIsIlZlcnRleE5vcm1hbHNIZWxwZXIiLCJuTm9ybWFscyIsIm9iakdlb21ldHJ5Iiwib2JqUG9zIiwib2JqTm9ybSIsIl92ZWN0b3IkNyIsIlNwb3RMaWdodEhlbHBlciIsImNvbmUiLCJjb25lTGVuZ3RoIiwiY29uZVdpZHRoIiwiX3ZlY3RvciQ4IiwiX2JvbmVNYXRyaXgiLCJfbWF0cml4V29ybGRJbnYiLCJTa2VsZXRvbkhlbHBlciIsImdldEJvbmVMaXN0IiwiYm9uZUxpc3QiLCJQb2ludExpZ2h0SGVscGVyIiwic3BoZXJlU2l6ZSIsIlJlY3RBcmVhTGlnaHRIZWxwZXIiLCJfdmVjdG9yJDkiLCJfY29sb3IxIiwiX2NvbG9yMiIsIkhlbWlzcGhlcmVMaWdodEhlbHBlciIsIkxpZ2h0UHJvYmVIZWxwZXIiLCJHcmlkSGVscGVyIiwiUG9sYXJHcmlkSGVscGVyIiwicmFkaWFscyIsImNpcmNsZXMiLCJQb3NpdGlvbmFsQXVkaW9IZWxwZXIiLCJkaXZpc2lvbnNJbm5lckFuZ2xlIiwiZGl2aXNpb25zT3V0ZXJBbmdsZSIsIm1hdGVyaWFsSW5uZXJBbmdsZSIsIm1hdGVyaWFsT3V0ZXJBbmdsZSIsImhhbGZDb25lSW5uZXJBbmdsZSIsImhhbGZDb25lT3V0ZXJBbmdsZSIsIl92MSQ2IiwiX3YyJDQiLCJfbm9ybWFsTWF0cml4JDIiLCJGYWNlTm9ybWFsc0hlbHBlciIsIl92MSQ3IiwiX3YyJDUiLCJfdjMkMSIsIkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJsaWdodFBsYW5lIiwidGFyZ2V0TGluZSIsIl92ZWN0b3IkYSIsIl9jYW1lcmEiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJzZXRQb2ludCIsIl9ib3gkMiIsIkJveEhlbHBlciIsIkJveDNIZWxwZXIiLCJQbGFuZUhlbHBlciIsIl9saW5lR2VvbWV0cnkiLCJfY29uZUdlb21ldHJ5IiwiX2F4aXMiLCJBcnJvd0hlbHBlciIsImhlYWRMZW5ndGgiLCJoZWFkV2lkdGgiLCJzZXREaXJlY3Rpb24iLCJBeGVzSGVscGVyIiwic2V0Q29sb3IiLCJDbG9zZWRTcGxpbmVDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZTMiLCJTcGxpbmUiLCJjb25zdHJ1Y3QiLCJjcmVhdGVQb2ludHNHZW9tZXRyeSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnkiLCJmcm9tUG9pbnRzIiwiaW5pdEZyb21BcnJheSIsImdldENvbnRyb2xQb2ludHNBcnJheSIsInJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aCIsInNldENvbG9ycyIsIkhhbmRsZXJzIiwic2V0VGV4dHVyZVBhdGgiLCJpc0ludGVyc2VjdGlvbkJveCIsImlzSW50ZXJzZWN0aW9uU3BoZXJlIiwicmFuZG9tMTYiLCJuZWFyZXN0UG93ZXJPZlR3byIsIm5leHRQb3dlck9mVHdvIiwiZmxhdHRlblRvQXJyYXlPZmZzZXQiLCJtdWx0aXBseVZlY3RvcjMiLCJtdWx0aXBseVZlY3RvcjNBcnJheSIsImFwcGx5VG9CdWZmZXIiLCJhcHBseVRvVmVjdG9yM0FycmF5IiwiZXh0cmFjdFBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJtdWx0aXBseVRvQXJyYXkiLCJtdWx0aXBseVZlY3RvcjQiLCJyb3RhdGVBeGlzIiwiY3Jvc3NWZWN0b3IiLCJyb3RhdGVCeUF4aXMiLCJtYWtlRnJ1c3R1bSIsImlzSW50ZXJzZWN0aW9uTGluZSIsImlzSW50ZXJzZWN0aW9uUGxhbmUiLCJiYXJ5Y29vcmRGcm9tUG9pbnQiLCJtaWRwb2ludCIsImV4dHJhY3RBbGxQb2ludHMiLCJleHRydWRlIiwibWFrZUdlb21ldHJ5IiwiZnJvbUF0dHJpYnV0ZSIsImRpc3RhbmNlVG9NYW5oYXR0YW4iLCJsZW5ndGhNYW5oYXR0YW4iLCJzZXRFdWxlckZyb21Sb3RhdGlvbk1hdHJpeCIsInNldEV1bGVyRnJvbVF1YXRlcm5pb24iLCJnZXRQb3NpdGlvbkZyb21NYXRyaXgiLCJnZXRTY2FsZUZyb21NYXRyaXgiLCJnZXRDb2x1bW5Gcm9tTWF0cml4IiwiYXBwbHlQcm9qZWN0aW9uIiwiY29tcHV0ZVRhbmdlbnRzIiwiZ2V0Q2hpbGRCeU5hbWUiLCJyZW5kZXJEZXB0aCIsImdldFdvcmxkUm90YXRpb24iLCJldWxlck9yZGVyIiwidXNlUXVhdGVybmlvbiIsImluaXRCb25lcyIsInNldExlbnMiLCJvbmx5U2hhZG93Iiwic2hhZG93Q2FtZXJhRm92Iiwic2hhZG93Q2FtZXJhTGVmdCIsInNoYWRvd0NhbWVyYVJpZ2h0Iiwic2hhZG93Q2FtZXJhVG9wIiwic2hhZG93Q2FtZXJhQm90dG9tIiwic2hhZG93Q2FtZXJhVmlzaWJsZSIsInNoYWRvd0RhcmtuZXNzIiwic2hhZG93TWFwV2lkdGgiLCJzaGFkb3dNYXBIZWlnaHQiLCJjb3B5SW5kaWNlc0FycmF5Iiwic2V0QXJyYXkiLCJhZGRJbmRleCIsImFkZERyYXdDYWxsIiwiY2xlYXJEcmF3Q2FsbHMiLCJjb21wdXRlT2Zmc2V0cyIsImdldEFycmF5cyIsImFkZFNoYXBlTGlzdCIsIndyYXBBcm91bmQiLCJvdmVyZHJhdyIsIndyYXBSR0IiLCJtZXRhbCIsImNsZWFyVGFyZ2V0IiwiYW5pbWF0ZSIsImdldEN1cnJlbnRSZW5kZXJUYXJnZXQiLCJnZXRQcmVjaXNpb24iLCJyZXNldEdMU3RhdGUiLCJzdXBwb3J0c0Zsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzIiwic3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzIiwic3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUFZSVEMiLCJzdXBwb3J0c0JsZW5kTWluTWF4Iiwic3VwcG9ydHNJbnN0YW5jZWRBcnJheXMiLCJlbmFibGVTY2lzc29yVGVzdCIsImFkZFByZVBsdWdpbiIsImFkZFBvc3RQbHVnaW4iLCJ1cGRhdGVTaGFkb3dNYXAiLCJzZXRGYWNlQ3VsbGluZyIsImFsbG9jVGV4dHVyZVVuaXQiLCJzZXRUZXh0dXJlIiwiZ2V0QWN0aXZlTWlwTWFwTGV2ZWwiLCJzaGFkb3dNYXBDdWxsRmFjZSIsInJlbmRlclJldmVyc2VTaWRlZCIsInJlbmRlclNpbmdsZVNpZGVkIiwiYWN0aXZlTWlwTWFwTGV2ZWwiLCJzdGFuZGluZyIsImdldERhdGEiLCJ1cGRhdGVDdWJlTWFwIiwiR2VvbWV0cnlVdGlscyIsImdlb21ldHJ5MSIsImxvYWRUZXh0dXJlQ3ViZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUiLCJTY2VuZVV0aWxzIiwiY3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdCIsImRldGFjaCIsInJldmlzaW9uIiwiQUNFU0ZpbG1pY1RvbmVNYXBwaW5nIiwiQWRkRXF1YXRpb24iLCJBZGRPcGVyYXRpb24iLCJBZGRpdGl2ZUJsZW5kaW5nIiwiQWxwaGFGb3JtYXQiLCJBbHdheXNEZXB0aCIsIkFsd2F5c1N0ZW5jaWxGdW5jIiwiQXhpc0hlbHBlciIsIkJhY2tTaWRlIiwiQmFzaWNEZXB0aFBhY2tpbmciLCJCYXNpY1NoYWRvd01hcCIsIkJpbmFyeVRleHR1cmVMb2FkZXIiLCJCb3VuZGluZ0JveEhlbHBlciIsIkJ5dGVUeXBlIiwiQ2FudmFzUmVuZGVyZXIiLCJDaW5lb25Ub25lTWFwcGluZyIsIkN1YmVHZW9tZXRyeSIsIkN1bGxGYWNlQmFjayIsIkN1bGxGYWNlRnJvbnQiLCJDdWxsRmFjZUZyb250QmFjayIsIkN1bGxGYWNlTm9uZSIsIkN1c3RvbUJsZW5kaW5nIiwiRGVjcmVtZW50U3RlbmNpbE9wIiwiRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiRG91YmxlU2lkZSIsIkRzdEFscGhhRmFjdG9yIiwiRHN0Q29sb3JGYWN0b3IiLCJEeW5hbWljQnVmZmVyQXR0cmlidXRlIiwiRWRnZXNIZWxwZXIiLCJFcXVhbERlcHRoIiwiRXF1YWxTdGVuY2lsRnVuYyIsIkZhY2U0IiwiRmFjZUNvbG9ycyIsIkZsYXRTaGFkaW5nIiwiRmxvYXQzMkF0dHJpYnV0ZSIsIkZsb2F0NjRBdHRyaWJ1dGUiLCJGbG9hdFR5cGUiLCJGcm9udEZhY2VEaXJlY3Rpb25DQ1ciLCJGcm9udEZhY2VEaXJlY3Rpb25DVyIsIkZyb250U2lkZSIsIkdhbW1hRW5jb2RpbmciLCJHcmVhdGVyRGVwdGgiLCJHcmVhdGVyRXF1YWxEZXB0aCIsIkdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jIiwiR3JlYXRlclN0ZW5jaWxGdW5jIiwiSGFsZkZsb2F0VHlwZSIsIkluY3JlbWVudFN0ZW5jaWxPcCIsIkluY3JlbWVudFdyYXBTdGVuY2lsT3AiLCJJbnQxNkF0dHJpYnV0ZSIsIkludDMyQXR0cmlidXRlIiwiSW50OEF0dHJpYnV0ZSIsIkludFR5cGUiLCJJbnRlcnBvbGF0ZURpc2NyZXRlIiwiSW50ZXJwb2xhdGVMaW5lYXIiLCJJbnRlcnBvbGF0ZVNtb290aCIsIkludmVydFN0ZW5jaWxPcCIsIkpTT05Mb2FkZXIiLCJLZWVwU3RlbmNpbE9wIiwiTGVuc0ZsYXJlIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJMZXNzRXF1YWxTdGVuY2lsRnVuYyIsIkxlc3NTdGVuY2lsRnVuYyIsIkxpbmVQaWVjZXMiLCJMaW5lU3RyaXAiLCJMaW5lYXJFbmNvZGluZyIsIkxpbmVhck1pcE1hcExpbmVhckZpbHRlciIsIkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIiLCJMaW5lYXJUb25lTWFwcGluZyIsIkxvZ0x1dkVuY29kaW5nIiwiTG9vcE9uY2UiLCJMb29wUGluZ1BvbmciLCJMb29wUmVwZWF0IiwiTHVtaW5hbmNlQWxwaGFGb3JtYXQiLCJMdW1pbmFuY2VGb3JtYXQiLCJNT1VTRSIsIkxFRlQiLCJNSURETEUiLCJSSUdIVCIsIlJPVEFURSIsIkRPTExZIiwiUEFOIiwiTWF4RXF1YXRpb24iLCJNZXNoRmFjZU1hdGVyaWFsIiwiTWluRXF1YXRpb24iLCJNaXhPcGVyYXRpb24iLCJNdWx0aU1hdGVyaWFsIiwiTXVsdGlwbHlCbGVuZGluZyIsIk11bHRpcGx5T3BlcmF0aW9uIiwiTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciIsIk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTmV2ZXJEZXB0aCIsIk5ldmVyU3RlbmNpbEZ1bmMiLCJOb0JsZW5kaW5nIiwiTm9Db2xvcnMiLCJOb1RvbmVNYXBwaW5nIiwiTm9ybWFsQmxlbmRpbmciLCJOb3RFcXVhbERlcHRoIiwiTm90RXF1YWxTdGVuY2lsRnVuYyIsIk9iamVjdFNwYWNlTm9ybWFsTWFwIiwiT25lRmFjdG9yIiwiT25lTWludXNEc3RBbHBoYUZhY3RvciIsIk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IiLCJPbmVNaW51c1NyY0FscGhhRmFjdG9yIiwiT25lTWludXNTcmNDb2xvckZhY3RvciIsIlBDRlNoYWRvd01hcCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJQYXJ0aWNsZSIsIlBhcnRpY2xlQmFzaWNNYXRlcmlhbCIsIlBhcnRpY2xlU3lzdGVtIiwiUGFydGljbGVTeXN0ZW1NYXRlcmlhbCIsIlBvaW50Q2xvdWRNYXRlcmlhbCIsIlJFVklTSU9OIiwiUkdCQURlcHRoUGFja2luZyIsIlJHQkFGb3JtYXQiLCJSR0JBX0FTVENfMTB4MTBfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMl9Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDNfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDVfRm9ybWF0IiwiUkdCREVuY29kaW5nIiwiUkdCRUVuY29kaW5nIiwiUkdCRUZvcm1hdCIsIlJHQkZvcm1hdCIsIlJHQk0xNkVuY29kaW5nIiwiUkdCTTdFbmNvZGluZyIsIlJHQl9FVEMxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQiLCJSR0JfUzNUQ19EWFQxX0Zvcm1hdCIsIlJlZEZvcm1hdCIsIlJlaW5oYXJkVG9uZU1hcHBpbmciLCJSZXBsYWNlU3RlbmNpbE9wIiwiUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24iLCJTaG9ydFR5cGUiLCJTbW9vdGhTaGFkaW5nIiwiU3JjQWxwaGFGYWN0b3IiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiU3JjQ29sb3JGYWN0b3IiLCJTdWJ0cmFjdEVxdWF0aW9uIiwiU3VidHJhY3RpdmVCbGVuZGluZyIsIlRPVUNIIiwiRE9MTFlfUEFOIiwiRE9MTFlfUk9UQVRFIiwiVGFuZ2VudFNwYWNlTm9ybWFsTWFwIiwiVHJpYW5nbGVGYW5EcmF3TW9kZSIsIlRyaWFuZ2xlU3RyaXBEcmF3TW9kZSIsIlRyaWFuZ2xlc0RyYXdNb2RlIiwiVWludDE2QXR0cmlidXRlIiwiVWludDMyQXR0cmlidXRlIiwiVWludDhBdHRyaWJ1dGUiLCJVaW50OENsYW1wZWRBdHRyaWJ1dGUiLCJVbmNoYXJ0ZWQyVG9uZU1hcHBpbmciLCJVbnNpZ25lZEJ5dGVUeXBlIiwiVW5zaWduZWRJbnQyNDhUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiVW5zaWduZWRTaG9ydDQ0NDRUeXBlIiwiVW5zaWduZWRTaG9ydDU1NTFUeXBlIiwiVW5zaWduZWRTaG9ydDU2NVR5cGUiLCJVbnNpZ25lZFNob3J0VHlwZSIsIlZTTVNoYWRvd01hcCIsIlZlcnRleCIsIlZlcnRleENvbG9ycyIsIldpcmVmcmFtZUhlbHBlciIsIldyYXBBcm91bmRFbmRpbmciLCJYSFJMb2FkZXIiLCJaZXJvQ3VydmF0dXJlRW5kaW5nIiwiWmVyb0ZhY3RvciIsIlplcm9TbG9wZUVuZGluZyIsIlplcm9TdGVuY2lsT3AiLCJzUkdCRW5jb2RpbmciLCJnZXRUaW1lc3RhbXAiLCJnZXRQb2ludFRvV29ybGQiLCJDaGFvcyIsIm1vdXNlIiwiaW5vMSIsImxlcnBDb2xvcnMiLCJhbmltYXRpb25JZHMiLCJlYXNpbmciLCJmbkdldFZhbHVlIiwiZHVyaW5nIiwiYXJyS2V5VHdlZW4iLCJUd2VlbiIsInJhZiIsImNsZWFyQW5pbWF0aW9uIiwiTGluZWFyIiwiUXVhZCIsImVhc2VJbiIsImVhc2VPdXQiLCJlYXNlSW5PdXQiLCJDdWJpYyIsIlF1YXJ0IiwiUXVpbnQiLCJTaW5lIiwiRXhwbyIsIkNpcmMiLCJFbGFzdGljIiwiQmFjayIsIkJvdW5jZSIsInRvdWNoVHlwZSIsIkV2ZW50IiwiZXZlbnRJZHMiLCJpc1RvdWNoIiwiaGFuZHMiLCJtZXNoUG9pbnQiLCJ0b3VjaGVzIiwidG91Y2hlIiwidG91Y2hPYmplY3REYXRhIiwidXBkYXRlVG91Y2giLCJzZWxlY3RJZCIsImlzVGFyZ2V0IiwiaXRlbSIsImlzVWkiLCJzZWxlY3RlZE9iamVjdHMiLCJjaGFuZ2VkVG91Y2hlcyIsImlkZW50aWZpZXIiLCJjbGllbnRYIiwiY2xpZW50WSIsImlzTW92ZSIsImNsaWNrIiwiZXZlbnRUeXBlIiwiY29udHJvbHMiLCJkaXNwYXRjaCIsInN0b3BFdmVudFBhc3MiLCJjYW5uZWxTY3JvbGxUbyIsInBhZ2VYIiwicGFnZVkiLCJkZWxldGVzIiwiZXZlbnRzIiwiY2xpY2tzIiwiekluZGV4IiwiaXNDdXN0b20iLCJhbmkiLCJjcCIsIlJlbmRlcmVyIiwic2hhZG93TWFwU29mdCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImRldmljZVBpeGVsUmF0aW8iLCJDb250cm9scyIsInRvdWNoZTEiLCJ0b3VjaGUyIiwidGltZXN0YW1wIiwidG91Y2hJc01vdmUiLCJnZXREaXN0YW5jZSIsImRpc3RhbmNlWCIsImRpc3RhbmNlWiIsInNwZWVkWCIsInNwZWVkWiIsImRlc3RpbmF0aW9uWCIsImRlc3RpbmF0aW9uWiIsInNjcm9sbFRvIiwidG91Y2hlczIiLCJoeXBvdCIsInN0YXJ0WCIsInN0YXJ0WiIsIm9mZnNldFoiLCJzY3JvbGxlciIsIkNvcHlTaGFkZXIiLCJQYXNzIiwibmVlZHNTd2FwIiwicmVuZGVyVG9TY3JlZW4iLCJGdWxsU2NyZWVuUXVhZCIsIl9tZXNoIiwiU2hhZGVyUGFzcyIsInRleHR1cmVJRCIsImZzUXVhZCIsIndyaXRlQnVmZmVyIiwicmVhZEJ1ZmZlciIsIk1hc2tQYXNzIiwid3JpdGVWYWx1ZSIsImNsZWFyVmFsdWUiLCJSRVBMQUNFIiwiQUxXQVlTIiwiRVFVQUwiLCJLRUVQIiwiQ2xlYXJNYXNrUGFzcyIsIkVmZmVjdENvbXBvc2VyIiwicmVuZGVyVGFyZ2V0MSIsInJlbmRlclRhcmdldDIiLCJwYXNzZXMiLCJjb3B5UGFzcyIsImNsb2NrIiwicGFzc0luZGV4IiwibWFza0FjdGl2ZSIsImlzTGFzdEVuYWJsZWRQYXNzIiwiTk9URVFVQUwiLCJzd2FwQnVmZmVycyIsImVmZmVjdGl2ZVdpZHRoIiwiZWZmZWN0aXZlSGVpZ2h0IiwiT3V0bGluZVBhc3MiLCJyZW5kZXJTY2VuZSIsInJlbmRlckNhbWVyYSIsInZpc2libGVFZGdlQ29sb3IiLCJoaWRkZW5FZGdlQ29sb3IiLCJlZGdlR2xvdyIsInVzZVBhdHRlcm5UZXh0dXJlIiwiZWRnZVRoaWNrbmVzcyIsImVkZ2VTdHJlbmd0aCIsImRvd25TYW1wbGVSYXRpbyIsInB1bHNlUGVyaW9kIiwiX3Zpc2liaWxpdHlDYWNoZSIsIk1hcCIsInJlc3giLCJyZXN5IiwibWFza0J1ZmZlck1hdGVyaWFsIiwicmVuZGVyVGFyZ2V0TWFza0J1ZmZlciIsInByZXBhcmVNYXNrTWF0ZXJpYWwiLCJnZXRQcmVwYXJlTWFza01hdGVyaWFsIiwicmVwbGFjZURlcHRoVG9WaWV3WiIsInJlbmRlclRhcmdldERlcHRoQnVmZmVyIiwicmVuZGVyVGFyZ2V0TWFza0Rvd25TYW1wbGVCdWZmZXIiLCJyZW5kZXJUYXJnZXRCbHVyQnVmZmVyMSIsInJlbmRlclRhcmdldEJsdXJCdWZmZXIyIiwiZWRnZURldGVjdGlvbk1hdGVyaWFsIiwiZ2V0RWRnZURldGVjdGlvbk1hdGVyaWFsIiwicmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjEiLCJyZW5kZXJUYXJnZXRFZGdlQnVmZmVyMiIsInNlcGFyYWJsZUJsdXJNYXRlcmlhbDEiLCJnZXRTZXBlcmFibGVCbHVyTWF0ZXJpYWwiLCJzZXBhcmFibGVCbHVyTWF0ZXJpYWwyIiwib3ZlcmxheU1hdGVyaWFsIiwiZ2V0T3ZlcmxheU1hdGVyaWFsIiwiY29weVNoYWRlciIsImNvcHlVbmlmb3JtcyIsIm1hdGVyaWFsQ29weSIsIl9vbGRDbGVhckNvbG9yIiwib2xkQ2xlYXJBbHBoYSIsInRlbXBQdWxzZUNvbG9yMSIsInRlbXBQdWxzZUNvbG9yMiIsInRleHR1cmVNYXRyaXgiLCJiVmlzaWJsZSIsImdhdGhlclNlbGVjdGVkTWVzaGVzQ2FsbEJhY2siLCJzZWxlY3RlZE1lc2hlcyIsImJGb3VuZCIsInZpc2liaWxpdHkiLCJvbGRBdXRvQ2xlYXIiLCJjaGFuZ2VWaXNpYmlsaXR5T2ZTZWxlY3RlZE9iamVjdHMiLCJ1cGRhdGVUZXh0dXJlTWF0cml4IiwiY2hhbmdlVmlzaWJpbGl0eU9mTm9uU2VsZWN0ZWRPYmplY3RzIiwiQmx1ckRpcmVjdGlvblgiLCJCbHVyRGlyZWN0aW9uWSIsInBhdHRlcm5UZXh0dXJlIiwibWF4UmFkaXVzIiwiUmVuZGVyUGFzcyIsIm9sZE92ZXJyaWRlTWF0ZXJpYWwiLCJTa3kiLCJ0b3BDb2xvciIsImJvdHRvbUNvbG9yIiwiY29sb3JJbmRleCIsImNvbG9yQ29tbW9uIiwiYW1iaWVudExpZ2h0IiwidG9wQ29sb3JJbmRleCIsImJvdHRvbUNvbG9ySW5kZXgiLCJPdXRsaW5lIiwiY2hhb3MiLCJjb21wb3NlciIsIm91dGxpbmVQYXNzIiwiYWRkUGFzcyIsImN1c3RvbU91dGxpbmUiLCJzZWxlY3RDb2xvciIsInNlbGVjdEVycm9yQ29sb3IiLCJzZXREaXNhYmxlZCIsIm91dGxpbmVDb2xvciIsImRpcmVjdGlvbmFsTGlnaHQiLCJub3JtYWxCaWFzIiwibGlnaHRIZWxwZXIiLCJjb250cm9sc0Rpc2FibGVkIiwiZ3JpZEhlbHBlciIsImdyaWRTaXplIiwib2JqcyIsIl9vYmplY3RfcGF0dGVybiIsIl9tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4iLCJfbWF0ZXJpYWxfdXNlX3BhdHRlcm4iLCJfbWFwX3VzZV9wYXR0ZXJuIiwiX2FiIiwiX2NiIiwiUGFyc2VyU3RhdGUiLCJtYXRlcmlhbExpYnJhcmllcyIsInN0YXJ0T2JqZWN0IiwiZnJvbURlY2xhcmF0aW9uIiwicHJldmlvdXNNYXRlcmlhbCIsImN1cnJlbnRNYXRlcmlhbCIsIl9maW5hbGl6ZSIsImhhc1VWSW5kaWNlcyIsInNtb290aCIsInN0YXJ0TWF0ZXJpYWwiLCJsaWJyYXJpZXMiLCJwcmV2aW91cyIsImluaGVyaXRlZCIsIm10bGxpYiIsImdyb3VwRW5kIiwiY2xvbmVkIiwibGFzdE11bHRpTWF0ZXJpYWwiLCJtaSIsImRlY2xhcmVkIiwiZmluYWxpemUiLCJwYXJzZVZlcnRleEluZGV4IiwicGFyc2VOb3JtYWxJbmRleCIsInBhcnNlVVZJbmRleCIsImFkZFZlcnRleFBvaW50IiwiYWRkVmVydGV4TGluZSIsImFkZE5vcm1hbCIsImFkZEZhY2VOb3JtYWwiLCJhZGRDb2xvciIsImFkZERlZmF1bHRVViIsImFkZFVWTGluZSIsInVhIiwidWIiLCJ1YyIsIm5hIiwibmIiLCJuYyIsInZMZW4iLCJpYSIsImliIiwiaWMiLCJuTGVuIiwidXZMZW4iLCJhZGRQb2ludEdlb21ldHJ5IiwidmkiLCJhZGRMaW5lR2VvbWV0cnkiLCJ1dmkiLCJPQkpMb2FkZXIiLCJsaW5lRmlyc3RDaGFyIiwidHJpbUxlZnQiLCJ2ZXJ0ZXhEYXRhIiwiZmFjZVZlcnRpY2VzIiwidmVydGV4UGFydHMiLCJsaW5lUGFydHMiLCJsaW5lVmVydGljZXMiLCJsaW5lVVZzIiwibGkiLCJsbGVuIiwicG9pbnREYXRhIiwiaGFzVmVydGV4Q29sb3JzIiwiY3JlYXRlZE1hdGVyaWFscyIsIm1pTGVuIiwic291cmNlTWF0ZXJpYWwiLCJtYXRlcmlhbEhhc2giLCJtYXRlcmlhbFBvaW50cyIsIm1hdGVyaWFsTGluZSIsIk9iakpzb25Mb2FkZXIiLCJvYmpKc29uIiwicGl4IiwianNvblRvT2JqIiwiR0xURkxvYWRlciIsImRyYWNvTG9hZGVyIiwiZGRzTG9hZGVyIiwiR0xURlJlZ2lzdHJ5IiwicmVtb3ZlQWxsIiwiX29uRXJyb3IiLCJnbHRmIiwic2V0RFJBQ09Mb2FkZXIiLCJzZXRERFNMb2FkZXIiLCJjb250ZW50IiwiQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMiLCJFWFRFTlNJT05TIiwiS0hSX0JJTkFSWV9HTFRGIiwiR0xURkJpbmFyeUV4dGVuc2lvbiIsImFzc2V0IiwiZXh0ZW5zaW9uc1VzZWQiLCJleHRlbnNpb25OYW1lIiwiZXh0ZW5zaW9uc1JlcXVpcmVkIiwiS0hSX0xJR0hUU19QVU5DVFVBTCIsIkdMVEZMaWdodHNFeHRlbnNpb24iLCJLSFJfTUFURVJJQUxTX1VOTElUIiwiR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uIiwiS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyIsIkdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24iLCJLSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTiIsIkdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbiIsIk1TRlRfVEVYVFVSRV9ERFMiLCJHTFRGVGV4dHVyZUREU0V4dGVuc2lvbiIsIktIUl9URVhUVVJFX1RSQU5TRk9STSIsIkdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uIiwiR0xURlBhcnNlciIsImxpZ2h0RGVmcyIsImxvYWRMaWdodCIsImxpZ2h0SW5kZXgiLCJsaWdodE5vZGUiLCJsaWdodERlZiIsImlubmVyQ29uZUFuZ2xlIiwib3V0ZXJDb25lQW5nbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldE1hdGVyaWFsVHlwZSIsImV4dGVuZFBhcmFtcyIsIm1hdGVyaWFsUGFyYW1zIiwibWF0ZXJpYWxEZWYiLCJtZXRhbGxpY1JvdWdobmVzcyIsInBick1ldGFsbGljUm91Z2huZXNzIiwiYmFzZUNvbG9yRmFjdG9yIiwiYmFzZUNvbG9yVGV4dHVyZSIsImFzc2lnblRleHR1cmUiLCJhbGwiLCJCSU5BUllfRVhURU5TSU9OX0NIVU5LX1RZUEVTIiwiaGVhZGVyVmlldyIsIm1hZ2ljIiwiZ2V0VWludDMyIiwiY2h1bmtWaWV3IiwiY2h1bmtJbmRleCIsImJ5dGVMZW5ndGgiLCJjaHVua0xlbmd0aCIsImNodW5rVHlwZSIsImNvbnRlbnRBcnJheSIsImJ5dGVPZmZzZXQiLCJzcGVjdWxhckdsb3NzaW5lc3NQYXJhbXMiLCJwYnJTcGVjdWxhckdsb3NzaW5lc3MiLCJzcGVjdWxhck1hcFBhcnNGcmFnbWVudENodW5rIiwiZ2xvc3NpbmVzc01hcFBhcnNGcmFnbWVudENodW5rIiwic3BlY3VsYXJNYXBGcmFnbWVudENodW5rIiwiZ2xvc3NpbmVzc01hcEZyYWdtZW50Q2h1bmsiLCJsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayIsImdsb3NzaW5lc3MiLCJnbG9zc2luZXNzTWFwIiwiZGlmZnVzZUZhY3RvciIsImRpZmZ1c2VUZXh0dXJlIiwiZ2xvc3NpbmVzc0ZhY3RvciIsInNwZWN1bGFyRmFjdG9yIiwic3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZSIsInNwZWNHbG9zc01hcERlZiIsImNyZWF0ZU1hdGVyaWFsIiwiaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwiLCJjbG9uZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zIiwiVVNFX0dMT1NTSU5FU1NNQVAiLCJVU0VfUk9VR0hORVNTTUFQIiwiR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQiLCJkZWNvZGVQcmltaXRpdmUiLCJwcmltaXRpdmUiLCJidWZmZXJWaWV3SW5kZXgiLCJidWZmZXJWaWV3IiwiZ2x0ZkF0dHJpYnV0ZU1hcCIsInRocmVlQXR0cmlidXRlTWFwIiwiYXR0cmlidXRlTm9ybWFsaXplZE1hcCIsImF0dHJpYnV0ZVR5cGVNYXAiLCJhdHRyaWJ1dGVOYW1lIiwidGhyZWVBdHRyaWJ1dGVOYW1lIiwiQVRUUklCVVRFUyIsImFjY2Vzc29yRGVmIiwiYWNjZXNzb3JzIiwiY29tcG9uZW50VHlwZSIsIldFQkdMX0NPTVBPTkVOVF9UWVBFUyIsImdldERlcGVuZGVuY3kiLCJkZWNvZGVEcmFjb0ZpbGUiLCJleHRlbmRUZXh0dXJlIiwidGV4Q29vcmQiLCJzdHJpZGUyIiwic3RyaWRlMyIsInRkIiwibTAiLCJtMSIsImRlZmF1bHRNYXRlcmlhbCIsIldFQkdMX0NPTlNUQU5UUyIsIjUxMjAiLCI1MTIxIiwiNTEyMiIsIjUxMjMiLCI1MTI1IiwiNTEyNiIsIldFQkdMX0ZJTFRFUlMiLCI5NzI4IiwiOTcyOSIsIjk5ODQiLCI5OTg1IiwiOTk4NiIsIjk5ODciLCJXRUJHTF9XUkFQUElOR1MiLCIzMzA3MSIsIjMzNjQ4IiwiMTA0OTciLCJXRUJHTF9UWVBFX1NJWkVTIiwiUE9TSVRJT04iLCJOT1JNQUwiLCJUQU5HRU5UIiwiVEVYQ09PUkRfMCIsIlRFWENPT1JEXzEiLCJDT0xPUl8wIiwiV0VJR0hUU18wIiwiSk9JTlRTXzAiLCJQQVRIX1BST1BFUlRJRVMiLCJ0cmFuc2xhdGlvbiIsIndlaWdodHMiLCJJTlRFUlBPTEFUSU9OIiwiQ1VCSUNTUExJTkUiLCJMSU5FQVIiLCJTVEVQIiwiQUxQSEFfTU9ERVMiLCJNSU1FX1RZUEVfRk9STUFUUyIsImFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YSIsImtub3duRXh0ZW5zaW9ucyIsIm9iamVjdERlZiIsImdsdGZFeHRlbnNpb25zIiwiYXNzaWduRXh0cmFzVG9Vc2VyRGF0YSIsImdsdGZEZWYiLCJleHRyYXMiLCJtZXNoRGVmIiwidGFyZ2V0TmFtZXMiLCJjcmVhdGVBdHRyaWJ1dGVzS2V5IiwiYXR0cmlidXRlc0tleSIsImNsb25lQnVmZmVyQXR0cmlidXRlIiwicHJpbWl0aXZlQ2FjaGUiLCJ0ZXh0dXJlTG9hZGVyIiwiZmlsZUxvYWRlciIsImFkZFByaW1pdGl2ZUF0dHJpYnV0ZXMiLCJwcmltaXRpdmVEZWYiLCJhc3NpZ25BdHRyaWJ1dGVBY2Nlc3NvciIsImFjY2Vzc29ySW5kZXgiLCJhY2Nlc3NvciIsImdsdGZBdHRyaWJ1dGVOYW1lIiwidGFyZ2V0cyIsImhhc01vcnBoUG9zaXRpb24iLCJoYXNNb3JwaE5vcm1hbCIsInBlbmRpbmdQb3NpdGlvbkFjY2Vzc29ycyIsInBlbmRpbmdOb3JtYWxBY2Nlc3NvcnMiLCJwZW5kaW5nQWNjZXNzb3IiLCJtb3JwaFBvc2l0aW9ucyIsIm5vcm1hbEF0dHJpYnV0ZSIsImFkZE1vcnBoVGFyZ2V0cyIsIm1hcmtEZWZzIiwiZ2V0RGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwic2NlbmVzIiwibm9kZURlZnMiLCJub2RlcyIsInNraW5EZWZzIiwic2tpbnMiLCJtZXNoRGVmcyIsIm1lc2hlcyIsIm1lc2hSZWZlcmVuY2VzIiwibWVzaFVzZXMiLCJza2luSW5kZXgiLCJza2luTGVuZ3RoIiwiam9pbnRzIiwibm9kZUluZGV4Iiwibm9kZUxlbmd0aCIsIm5vZGVEZWYiLCJza2luIiwiY2FjaGVLZXkiLCJkZXBlbmRlbmN5IiwibG9hZFNjZW5lIiwibG9hZE5vZGUiLCJsb2FkTWVzaCIsImxvYWRBY2Nlc3NvciIsImxvYWRCdWZmZXJWaWV3IiwibG9hZEJ1ZmZlciIsImxvYWRNYXRlcmlhbCIsImxvYWRTa2luIiwibG9hZEFuaW1hdGlvbiIsImxvYWRDYW1lcmEiLCJkZWZzIiwiZGVmIiwiYnVmZmVySW5kZXgiLCJidWZmZXJEZWYiLCJ1cmkiLCJyZWplY3QiLCJidWZmZXJWaWV3RGVmIiwiYnVmZmVyVmlld3MiLCJzcGFyc2UiLCJwZW5kaW5nQnVmZmVyVmlld3MiLCJUeXBlZEFycmF5IiwiZWxlbWVudEJ5dGVzIiwiaXRlbUJ5dGVzIiwiYnl0ZVN0cmlkZSIsImliU2xpY2UiLCJpYkNhY2hlS2V5IiwiaXRlbVNpemVJbmRpY2VzIiwiU0NBTEFSIiwiVHlwZWRBcnJheUluZGljZXMiLCJieXRlT2Zmc2V0SW5kaWNlcyIsImJ5dGVPZmZzZXRWYWx1ZXMiLCJzcGFyc2VJbmRpY2VzIiwic3BhcnNlVmFsdWVzIiwidGV4dHVyZUluZGV4IiwiVVJMIiwid2Via2l0VVJMIiwidGV4dHVyZURlZiIsInRleHR1cmVFeHRlbnNpb25zIiwic291cmNlVVJJIiwiaXNPYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJzYW1wbGVyIiwic2FtcGxlcnMiLCJtYXBOYW1lIiwibWFwRGVmIiwiYXNzaWduRmluYWxNYXRlcmlhbCIsInVzZVZlcnRleFRhbmdlbnRzIiwidXNlVmVydGV4Q29sb3JzIiwidXNlRmxhdFNoYWRpbmciLCJ1c2VNb3JwaFRhcmdldHMiLCJ1c2VNb3JwaE5vcm1hbHMiLCJwb2ludHNNYXRlcmlhbCIsImxpbmVNYXRlcmlhbCIsIm1hdGVyaWFsVHlwZSIsIm1hdGVyaWFsRXh0ZW5zaW9ucyIsInNnRXh0ZW5zaW9uIiwia211RXh0ZW5zaW9uIiwibWV0YWxsaWNGYWN0b3IiLCJyb3VnaG5lc3NGYWN0b3IiLCJtZXRhbGxpY1JvdWdobmVzc1RleHR1cmUiLCJhbHBoYU1vZGUiLCJhbHBoYUN1dG9mZiIsIm5vcm1hbFRleHR1cmUiLCJvY2NsdXNpb25UZXh0dXJlIiwic3RyZW5ndGgiLCJlbWlzc2l2ZUZhY3RvciIsImVtaXNzaXZlVGV4dHVyZSIsImxvYWRHZW9tZXRyaWVzIiwicHJpbWl0aXZlcyIsImNyZWF0ZURyYWNvUHJpbWl0aXZlIiwiZHJhY29FeHRlbnNpb24iLCJnZW9tZXRyeVByb21pc2UiLCJwcm9taXNlIiwibWVzaEluZGV4Iiwib3JpZ2luYWxNYXRlcmlhbHMiLCJjYW1lcmFJbmRleCIsImNhbWVyYURlZiIsInlmb3YiLCJhc3BlY3RSYXRpbyIsInpuZWFyIiwiemZhciIsInhtYWciLCJ5bWFnIiwic2tpbkRlZiIsInNraW5FbnRyeSIsImludmVyc2VCaW5kTWF0cmljZXMiLCJhbmltYXRpb25JbmRleCIsImFuaW1hdGlvbkRlZiIsInBlbmRpbmdOb2RlcyIsInBlbmRpbmdJbnB1dEFjY2Vzc29ycyIsInBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMiLCJwZW5kaW5nU2FtcGxlcnMiLCJwZW5kaW5nVGFyZ2V0cyIsImNoYW5uZWxzIiwiaW5wdXQiLCJpbnB1dEFjY2Vzc29ycyIsIm91dHB1dEFjY2Vzc29ycyIsImlucHV0QWNjZXNzb3IiLCJvdXRwdXRBY2Nlc3NvciIsInRhcmdldE5hbWUiLCJvdXRwdXRBcnJheSIsInNjYWxlZCIsImlzSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lIiwiaW5zdGFuY2VOdW0iLCJidWlsZE5vZGVIaWVyYWNoeSIsIm5vZGVJZCIsInBhcmVudE9iamVjdCIsInBlbmRpbmdKb2ludHMiLCJqb2ludE5vZGVzIiwiam9pbnROb2RlIiwic2NlbmVJbmRleCIsInNjZW5lRGVmIiwibm9kZUlkcyIsIm9iakxvYWRlciIsImdsdGZMb2FkZXIiLCJvYmpKc29uTG9hZGVyIiwiUmVzb3VyY2VzIiwiZ2V0UmVzb3VyY2VzIiwiY2xvbmVPYmpzIiwiZG93bkxvYWQiLCJjbG9uZUdsdGYiLCJjbG9uZVRleHR1cmUiLCJza2lubmVkTWVzaGVzIiwiY2xvbmVCb25lcyIsImNsb25lU2tpbm5lZE1lc2hlcyIsImNsb25lU2tpbm5lZE1lc2giLCJvcmRlcmVkQ2xvbmVCb25lcyIsImNsb25lQm9uZSIsIkNvbGxpc2lvblR5cGUiLCJjZWlsaW5nIiwidGFibGUiLCJsZWdvIiwidmFzZSIsIm9wdGlvbiIsImlzQ29sbGlzaW9uIiwiY29sbGlzaW9uVHlwZSIsInNvdXJjZVBvc2l0aW9uIiwidGFyZ2V0UG9zaXRpb24iLCJpc1Jlc2V0IiwidG91Y2hCZWZvcmUiLCJ0b3VjaGVyIiwiY2xlYXJUaW1lb3V0IiwiZGlzYWJsZVNlbGVjdGVkT2JqZWN0c0NvbGxpc2lvbiIsImdldEludGVyc2VjdCIsImdldENvbGxpc2lvbkJldHdlZW4iLCJnZXRDb2xsaXNpb25NaW5ZIiwic3luY2hyb25vdXNTZWxlY3RlZE9iamVjdHNDb2xsaXNpb24iLCJlbmFibGVTZWxlY3RlZE9iamVjdHNDb2xsaXNpb24iLCJzZXRTZWxlY3RlZE9iamVjdERpc2FibGVkIiwiaW5jbHVkZXMiLCJnZXRTZWxlY3ROb2RlcyIsImluZGV4WCIsImluZGV4WiIsInBzIiwibGFzdE5vZGUiLCJzZWxlY3ROb2RlcyIsInJlY2VudGx5SXRlbSIsInRhcmdldGlzQ2VpbGluZyIsInRhcmdldGlzVGFibGUiLCJ0YXJnZXRpc0xlZ28iLCJpc2Zsb29yIiwiaXNMZWdvIiwiY29tbW9uVmVydGV4U2hhZGVyIiwiZ2V0VWlNYXRlcmlhbCIsInVUZXh0dXJlIiwiZ2V0VHJhbnNwYXJlbnRNYXRlcmlhbCIsImdldE1hdGNhcE1hdGVyaWFsIiwiQ29pbiIsIldpc2hpbmdXZWxsIiwidUNvbG9yU3RhcnQiLCJ1Q29sb3JFbmQiLCJ1VGltZSIsIkdyYXNzIiwiZ3Jhc3MiLCJXaGl0ZWJvYXJkIiwiVWkiLCJTa3lTd2l0Y2giLCJhbmltYXRpb25lciIsIkFyb3VuZCIsImFuaW1hdGlvbmVyMiIsImFuaXMiLCJjeiIsIm5ld0dhbWVCdG4iLCJDb21wcyIsImNvaW4iLCJ3aXNoaW5nV2VsbCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdB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R0FBTVAsV0FDMUIvYyxHQUFNM29HLE1BQU01cEMsSUFBSSxJQUFJNnZKLEdBQU1MIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTkpO1xuIiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2ssIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3MsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHtcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRlcml2ZWQgY29uc3RydWN0b3JzIG1heSBvbmx5IHJldHVybiBvYmplY3Qgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gKG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMpLCBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBzdXBlclByb3BCYXNlID0gcmVxdWlyZShcIi4vc3VwZXJQcm9wQmFzZS5qc1wiKTtcblxuZnVuY3Rpb24gX2dldCgpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0ID0gUmVmbGVjdC5nZXQuYmluZCgpLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgdmFyIGJhc2UgPSBzdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuICAgICAgaWYgKCFiYXNlKSByZXR1cm47XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICBpZiAoZGVzYy5nZXQpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwoYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiByZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH0sIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cztcbiAgfVxuXG4gIHJldHVybiBfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5LmpzXCIpO1xuXG52YXIgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIG5vbkl0ZXJhYmxlU3ByZWFkID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIik7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsInJlcXVpcmUoJy4vYnJvd3Nlci9pbmRleCcpXG4iLCJ3aW5kb3cuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQod2luZG93LmNhbnZhcylcbiIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXksIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9nZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkge1xuICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zdXBlclByb3BCYXNlLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLyogZXNsaW50LWRpc2FibGUgKi9cclxuXHJcbmNvbnN0IFRIUkVFID0ge31cclxuXHJcbi8vIFBvbHlmaWxsc1xyXG5cclxuaWYgKE51bWJlci5FUFNJTE9OID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0TnVtYmVyLkVQU0lMT04gPSBNYXRoLnBvdygyLCAtIDUyKTtcclxuXHJcbn1cclxuXHJcbmlmIChOdW1iZXIuaXNJbnRlZ2VyID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0Ly8gTWlzc2luZyBpbiBJRVxyXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9pc0ludGVnZXJcclxuXHJcblx0TnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuaWYgKE1hdGguc2lnbiA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvc2lnblxyXG5cclxuXHRNYXRoLnNpZ24gPSBmdW5jdGlvbiAoeCkge1xyXG5cclxuXHRcdHJldHVybiAoeCA8IDApID8gLSAxIDogKHggPiAwKSA/IDEgOiArIHg7XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG5pZiAoJ25hbWUnIGluIEZ1bmN0aW9uLnByb3RvdHlwZSA9PT0gZmFsc2UpIHtcclxuXHJcblx0Ly8gTWlzc2luZyBpbiBJRVxyXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL25hbWVcclxuXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSwgJ25hbWUnLCB7XHJcblxyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uXFxzKihbXlxcKFxcc10qKS8pWzFdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG59XHJcblxyXG5pZiAoT2JqZWN0LmFzc2lnbiA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8vIE1pc3NpbmcgaW4gSUVcclxuXHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXHJcblxyXG5cdE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcclxuXHJcblx0XHRmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xyXG5cclxuXHRcdFx0dmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XHJcblxyXG5cdFx0XHRpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgc291cmNlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIG5leHRLZXkpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBvdXRwdXQ7XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG52YXIgUkVWSVNJT04gPSAnMTA5JztcclxudmFyIE1PVVNFID0geyBMRUZUOiAwLCBNSURETEU6IDEsIFJJR0hUOiAyLCBST1RBVEU6IDAsIERPTExZOiAxLCBQQU46IDIgfTtcclxudmFyIFRPVUNIID0geyBST1RBVEU6IDAsIFBBTjogMSwgRE9MTFlfUEFOOiAyLCBET0xMWV9ST1RBVEU6IDMgfTtcclxudmFyIEN1bGxGYWNlTm9uZSA9IDA7XHJcbnZhciBDdWxsRmFjZUJhY2sgPSAxO1xyXG52YXIgQ3VsbEZhY2VGcm9udCA9IDI7XHJcbnZhciBDdWxsRmFjZUZyb250QmFjayA9IDM7XHJcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DVyA9IDA7XHJcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DQ1cgPSAxO1xyXG52YXIgQmFzaWNTaGFkb3dNYXAgPSAwO1xyXG52YXIgUENGU2hhZG93TWFwID0gMTtcclxudmFyIFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xyXG52YXIgVlNNU2hhZG93TWFwID0gMztcclxudmFyIEZyb250U2lkZSA9IDA7XHJcbnZhciBCYWNrU2lkZSA9IDE7XHJcbnZhciBEb3VibGVTaWRlID0gMjtcclxudmFyIEZsYXRTaGFkaW5nID0gMTtcclxudmFyIFNtb290aFNoYWRpbmcgPSAyO1xyXG52YXIgTm9Db2xvcnMgPSAwO1xyXG52YXIgRmFjZUNvbG9ycyA9IDE7XHJcbnZhciBWZXJ0ZXhDb2xvcnMgPSAyO1xyXG52YXIgTm9CbGVuZGluZyA9IDA7XHJcbnZhciBOb3JtYWxCbGVuZGluZyA9IDE7XHJcbnZhciBBZGRpdGl2ZUJsZW5kaW5nID0gMjtcclxudmFyIFN1YnRyYWN0aXZlQmxlbmRpbmcgPSAzO1xyXG52YXIgTXVsdGlwbHlCbGVuZGluZyA9IDQ7XHJcbnZhciBDdXN0b21CbGVuZGluZyA9IDU7XHJcbnZhciBBZGRFcXVhdGlvbiA9IDEwMDtcclxudmFyIFN1YnRyYWN0RXF1YXRpb24gPSAxMDE7XHJcbnZhciBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiA9IDEwMjtcclxudmFyIE1pbkVxdWF0aW9uID0gMTAzO1xyXG52YXIgTWF4RXF1YXRpb24gPSAxMDQ7XHJcbnZhciBaZXJvRmFjdG9yID0gMjAwO1xyXG52YXIgT25lRmFjdG9yID0gMjAxO1xyXG52YXIgU3JjQ29sb3JGYWN0b3IgPSAyMDI7XHJcbnZhciBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzO1xyXG52YXIgU3JjQWxwaGFGYWN0b3IgPSAyMDQ7XHJcbnZhciBPbmVNaW51c1NyY0FscGhhRmFjdG9yID0gMjA1O1xyXG52YXIgRHN0QWxwaGFGYWN0b3IgPSAyMDY7XHJcbnZhciBPbmVNaW51c0RzdEFscGhhRmFjdG9yID0gMjA3O1xyXG52YXIgRHN0Q29sb3JGYWN0b3IgPSAyMDg7XHJcbnZhciBPbmVNaW51c0RzdENvbG9yRmFjdG9yID0gMjA5O1xyXG52YXIgU3JjQWxwaGFTYXR1cmF0ZUZhY3RvciA9IDIxMDtcclxudmFyIE5ldmVyRGVwdGggPSAwO1xyXG52YXIgQWx3YXlzRGVwdGggPSAxO1xyXG52YXIgTGVzc0RlcHRoID0gMjtcclxudmFyIExlc3NFcXVhbERlcHRoID0gMztcclxudmFyIEVxdWFsRGVwdGggPSA0O1xyXG52YXIgR3JlYXRlckVxdWFsRGVwdGggPSA1O1xyXG52YXIgR3JlYXRlckRlcHRoID0gNjtcclxudmFyIE5vdEVxdWFsRGVwdGggPSA3O1xyXG52YXIgTXVsdGlwbHlPcGVyYXRpb24gPSAwO1xyXG52YXIgTWl4T3BlcmF0aW9uID0gMTtcclxudmFyIEFkZE9wZXJhdGlvbiA9IDI7XHJcbnZhciBOb1RvbmVNYXBwaW5nID0gMDtcclxudmFyIExpbmVhclRvbmVNYXBwaW5nID0gMTtcclxudmFyIFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xyXG52YXIgVW5jaGFydGVkMlRvbmVNYXBwaW5nID0gMztcclxudmFyIENpbmVvblRvbmVNYXBwaW5nID0gNDtcclxudmFyIEFDRVNGaWxtaWNUb25lTWFwcGluZyA9IDU7XHJcblxyXG52YXIgVVZNYXBwaW5nID0gMzAwO1xyXG52YXIgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xyXG52YXIgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gMzAyO1xyXG52YXIgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDM7XHJcbnZhciBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcclxudmFyIFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nID0gMzA1O1xyXG52YXIgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcgPSAzMDY7XHJcbnZhciBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IDMwNztcclxudmFyIFJlcGVhdFdyYXBwaW5nID0gMTAwMDtcclxudmFyIENsYW1wVG9FZGdlV3JhcHBpbmcgPSAxMDAxO1xyXG52YXIgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XHJcbnZhciBOZWFyZXN0RmlsdGVyID0gMTAwMztcclxudmFyIE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcclxudmFyIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcclxudmFyIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSAxMDA1O1xyXG52YXIgTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IDEwMDU7XHJcbnZhciBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xyXG52YXIgTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlciA9IDEwMDc7XHJcbnZhciBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNztcclxudmFyIExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XHJcbnZhciBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSAxMDA4O1xyXG52YXIgVW5zaWduZWRCeXRlVHlwZSA9IDEwMDk7XHJcbnZhciBCeXRlVHlwZSA9IDEwMTA7XHJcbnZhciBTaG9ydFR5cGUgPSAxMDExO1xyXG52YXIgVW5zaWduZWRTaG9ydFR5cGUgPSAxMDEyO1xyXG52YXIgSW50VHlwZSA9IDEwMTM7XHJcbnZhciBVbnNpZ25lZEludFR5cGUgPSAxMDE0O1xyXG52YXIgRmxvYXRUeXBlID0gMTAxNTtcclxudmFyIEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xyXG52YXIgVW5zaWduZWRTaG9ydDQ0NDRUeXBlID0gMTAxNztcclxudmFyIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IDEwMTg7XHJcbnZhciBVbnNpZ25lZFNob3J0NTY1VHlwZSA9IDEwMTk7XHJcbnZhciBVbnNpZ25lZEludDI0OFR5cGUgPSAxMDIwO1xyXG52YXIgQWxwaGFGb3JtYXQgPSAxMDIxO1xyXG52YXIgUkdCRm9ybWF0ID0gMTAyMjtcclxudmFyIFJHQkFGb3JtYXQgPSAxMDIzO1xyXG52YXIgTHVtaW5hbmNlRm9ybWF0ID0gMTAyNDtcclxudmFyIEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcclxudmFyIFJHQkVGb3JtYXQgPSBSR0JBRm9ybWF0O1xyXG52YXIgRGVwdGhGb3JtYXQgPSAxMDI2O1xyXG52YXIgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcclxudmFyIFJlZEZvcm1hdCA9IDEwMjg7XHJcbnZhciBSR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IDMzNzc2O1xyXG52YXIgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7XHJcbnZhciBSR0JBX1MzVENfRFhUM19Gb3JtYXQgPSAzMzc3ODtcclxudmFyIFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCA9IDMzNzc5O1xyXG52YXIgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcclxudmFyIFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gMzU4NDE7XHJcbnZhciBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MjtcclxudmFyIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzO1xyXG52YXIgUkdCX0VUQzFfRm9ybWF0ID0gMzYxOTY7XHJcbnZhciBSR0JBX0FTVENfNHg0X0Zvcm1hdCA9IDM3ODA4O1xyXG52YXIgUkdCQV9BU1RDXzV4NF9Gb3JtYXQgPSAzNzgwOTtcclxudmFyIFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XHJcbnZhciBSR0JBX0FTVENfNng1X0Zvcm1hdCA9IDM3ODExO1xyXG52YXIgUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgPSAzNzgxMjtcclxudmFyIFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XHJcbnZhciBSR0JBX0FTVENfOHg2X0Zvcm1hdCA9IDM3ODE0O1xyXG52YXIgUkdCQV9BU1RDXzh4OF9Gb3JtYXQgPSAzNzgxNTtcclxudmFyIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xyXG52YXIgUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gMzc4MTc7XHJcbnZhciBSR0JBX0FTVENfMTB4OF9Gb3JtYXQgPSAzNzgxODtcclxudmFyIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcclxudmFyIFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSAzNzgyMDtcclxudmFyIFJHQkFfQVNUQ18xMngxMl9Gb3JtYXQgPSAzNzgyMTtcclxudmFyIExvb3BPbmNlID0gMjIwMDtcclxudmFyIExvb3BSZXBlYXQgPSAyMjAxO1xyXG52YXIgTG9vcFBpbmdQb25nID0gMjIwMjtcclxudmFyIEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xyXG52YXIgSW50ZXJwb2xhdGVMaW5lYXIgPSAyMzAxO1xyXG52YXIgSW50ZXJwb2xhdGVTbW9vdGggPSAyMzAyO1xyXG52YXIgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XHJcbnZhciBaZXJvU2xvcGVFbmRpbmcgPSAyNDAxO1xyXG52YXIgV3JhcEFyb3VuZEVuZGluZyA9IDI0MDI7XHJcbnZhciBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XHJcbnZhciBUcmlhbmdsZVN0cmlwRHJhd01vZGUgPSAxO1xyXG52YXIgVHJpYW5nbGVGYW5EcmF3TW9kZSA9IDI7XHJcbnZhciBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XHJcbnZhciBzUkdCRW5jb2RpbmcgPSAzMDAxO1xyXG52YXIgR2FtbWFFbmNvZGluZyA9IDMwMDc7XHJcbnZhciBSR0JFRW5jb2RpbmcgPSAzMDAyO1xyXG52YXIgTG9nTHV2RW5jb2RpbmcgPSAzMDAzO1xyXG52YXIgUkdCTTdFbmNvZGluZyA9IDMwMDQ7XHJcbnZhciBSR0JNMTZFbmNvZGluZyA9IDMwMDU7XHJcbnZhciBSR0JERW5jb2RpbmcgPSAzMDA2O1xyXG52YXIgQmFzaWNEZXB0aFBhY2tpbmcgPSAzMjAwO1xyXG52YXIgUkdCQURlcHRoUGFja2luZyA9IDMyMDE7XHJcbnZhciBUYW5nZW50U3BhY2VOb3JtYWxNYXAgPSAwO1xyXG52YXIgT2JqZWN0U3BhY2VOb3JtYWxNYXAgPSAxO1xyXG5cclxudmFyIFplcm9TdGVuY2lsT3AgPSAwO1xyXG52YXIgS2VlcFN0ZW5jaWxPcCA9IDc2ODA7XHJcbnZhciBSZXBsYWNlU3RlbmNpbE9wID0gNzY4MTtcclxudmFyIEluY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODI7XHJcbnZhciBEZWNyZW1lbnRTdGVuY2lsT3AgPSA3NjgzO1xyXG52YXIgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU1O1xyXG52YXIgRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU2O1xyXG52YXIgSW52ZXJ0U3RlbmNpbE9wID0gNTM4NjtcclxuXHJcbnZhciBOZXZlclN0ZW5jaWxGdW5jID0gNTEyO1xyXG52YXIgTGVzc1N0ZW5jaWxGdW5jID0gNTEzO1xyXG52YXIgRXF1YWxTdGVuY2lsRnVuYyA9IDUxNDtcclxudmFyIExlc3NFcXVhbFN0ZW5jaWxGdW5jID0gNTE1O1xyXG52YXIgR3JlYXRlclN0ZW5jaWxGdW5jID0gNTE2O1xyXG52YXIgTm90RXF1YWxTdGVuY2lsRnVuYyA9IDUxNztcclxudmFyIEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gNTE4O1xyXG52YXIgQWx3YXlzU3RlbmNpbEZ1bmMgPSA1MTk7XHJcblxyXG4vKipcclxuICogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi9ldmVudGRpc3BhdGNoZXIuanMvXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRXZlbnREaXNwYXRjaGVyKCkgeyB9XHJcblxyXG5PYmplY3QuYXNzaWduKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUsIHtcclxuXHJcblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7IHRoaXMuX2xpc3RlbmVycyA9IHt9OyB9XHJcblxyXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcclxuXHJcblx0XHRpZiAobGlzdGVuZXJzW3R5cGVdID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGxpc3RlbmVyc1t0eXBlXSA9IFtdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobGlzdGVuZXJzW3R5cGVdLmluZGV4T2YobGlzdGVuZXIpID09PSAtIDEpIHtcclxuXHJcblx0XHRcdGxpc3RlbmVyc1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGhhc0V2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xyXG5cclxuXHRcdGlmICh0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xyXG5cclxuXHRcdHJldHVybiBsaXN0ZW5lcnNbdHlwZV0gIT09IHVuZGVmaW5lZCAmJiBsaXN0ZW5lcnNbdHlwZV0uaW5kZXhPZihsaXN0ZW5lcikgIT09IC0gMTtcclxuXHJcblx0fSxcclxuXHJcblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1t0eXBlXTtcclxuXHJcblx0XHRpZiAobGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgaW5kZXggPSBsaXN0ZW5lckFycmF5LmluZGV4T2YobGlzdGVuZXIpO1xyXG5cclxuXHRcdFx0aWYgKGluZGV4ICE9PSAtIDEpIHtcclxuXHJcblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0ZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1tldmVudC50eXBlXTtcclxuXHJcblx0XHRpZiAobGlzdGVuZXJBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRldmVudC50YXJnZXQgPSB0aGlzO1xyXG5cclxuXHRcdFx0dmFyIGFycmF5ID0gbGlzdGVuZXJBcnJheS5zbGljZSgwKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGFycmF5W2ldLmNhbGwodGhpcywgZXZlbnQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG52YXIgX2x1dCA9IFtdO1xyXG5cclxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xyXG5cclxuXHRfbHV0W2ldID0gKGkgPCAxNiA/ICcwJyA6ICcnKSArIChpKS50b1N0cmluZygxNik7XHJcblxyXG59XHJcblxyXG52YXIgX01hdGggPSB7XHJcblxyXG5cdERFRzJSQUQ6IE1hdGguUEkgLyAxODAsXHJcblx0UkFEMkRFRzogMTgwIC8gTWF0aC5QSSxcclxuXHJcblx0Z2VuZXJhdGVVVUlEOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxOTYzMTM2IzIxOTYzMTM2XHJcblxyXG5cdFx0dmFyIGQwID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdFx0dmFyIGQxID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdFx0dmFyIGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdFx0dmFyIGQzID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xyXG5cdFx0dmFyIHV1aWQgPSBfbHV0W2QwICYgMHhmZl0gKyBfbHV0W2QwID4+IDggJiAweGZmXSArIF9sdXRbZDAgPj4gMTYgJiAweGZmXSArIF9sdXRbZDAgPj4gMjQgJiAweGZmXSArICctJyArXHJcblx0XHRcdF9sdXRbZDEgJiAweGZmXSArIF9sdXRbZDEgPj4gOCAmIDB4ZmZdICsgJy0nICsgX2x1dFtkMSA+PiAxNiAmIDB4MGYgfCAweDQwXSArIF9sdXRbZDEgPj4gMjQgJiAweGZmXSArICctJyArXHJcblx0XHRcdF9sdXRbZDIgJiAweDNmIHwgMHg4MF0gKyBfbHV0W2QyID4+IDggJiAweGZmXSArICctJyArIF9sdXRbZDIgPj4gMTYgJiAweGZmXSArIF9sdXRbZDIgPj4gMjQgJiAweGZmXSArXHJcblx0XHRcdF9sdXRbZDMgJiAweGZmXSArIF9sdXRbZDMgPj4gOCAmIDB4ZmZdICsgX2x1dFtkMyA+PiAxNiAmIDB4ZmZdICsgX2x1dFtkMyA+PiAyNCAmIDB4ZmZdO1xyXG5cclxuXHRcdC8vIC50b1VwcGVyQ2FzZSgpIGhlcmUgZmxhdHRlbnMgY29uY2F0ZW5hdGVkIHN0cmluZ3MgdG8gc2F2ZSBoZWFwIG1lbW9yeSBzcGFjZS5cclxuXHRcdHJldHVybiB1dWlkLnRvVXBwZXJDYXNlKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsYW1wOiBmdW5jdGlvbiAodmFsdWUsIG1pbiwgbWF4KSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBjb21wdXRlIGV1Y2xpZGlhbiBtb2R1bG8gb2YgbSAlIG5cclxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb2R1bG9fb3BlcmF0aW9uXHJcblxyXG5cdGV1Y2xpZGVhbk1vZHVsbzogZnVuY3Rpb24gKG4sIG0pIHtcclxuXHJcblx0XHRyZXR1cm4gKChuICUgbSkgKyBtKSAlIG07XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIExpbmVhciBtYXBwaW5nIGZyb20gcmFuZ2UgPGExLCBhMj4gdG8gcmFuZ2UgPGIxLCBiMj5cclxuXHJcblx0bWFwTGluZWFyOiBmdW5jdGlvbiAoeCwgYTEsIGEyLCBiMSwgYjIpIHtcclxuXHJcblx0XHRyZXR1cm4gYjEgKyAoeCAtIGExKSAqIChiMiAtIGIxKSAvIChhMiAtIGExKTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cclxuXHJcblx0bGVycDogZnVuY3Rpb24gKHgsIHksIHQpIHtcclxuXHJcblx0XHRyZXR1cm4gKDEgLSB0KSAqIHggKyB0ICogeTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXHJcblxyXG5cdHNtb290aHN0ZXA6IGZ1bmN0aW9uICh4LCBtaW4sIG1heCkge1xyXG5cclxuXHRcdGlmICh4IDw9IG1pbikgeyByZXR1cm4gMDsgfVxyXG5cdFx0aWYgKHggPj0gbWF4KSB7IHJldHVybiAxOyB9XHJcblxyXG5cdFx0eCA9ICh4IC0gbWluKSAvIChtYXggLSBtaW4pO1xyXG5cclxuXHRcdHJldHVybiB4ICogeCAqICgzIC0gMiAqIHgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzbW9vdGhlcnN0ZXA6IGZ1bmN0aW9uICh4LCBtaW4sIG1heCkge1xyXG5cclxuXHRcdGlmICh4IDw9IG1pbikgeyByZXR1cm4gMDsgfVxyXG5cdFx0aWYgKHggPj0gbWF4KSB7IHJldHVybiAxOyB9XHJcblxyXG5cdFx0eCA9ICh4IC0gbWluKSAvIChtYXggLSBtaW4pO1xyXG5cclxuXHRcdHJldHVybiB4ICogeCAqIHggKiAoeCAqICh4ICogNiAtIDE1KSArIDEwKTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gUmFuZG9tIGludGVnZXIgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxyXG5cclxuXHRyYW5kSW50OiBmdW5jdGlvbiAobG93LCBoaWdoKSB7XHJcblxyXG5cdFx0cmV0dXJuIGxvdyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93ICsgMSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxyXG5cclxuXHRyYW5kRmxvYXQ6IGZ1bmN0aW9uIChsb3csIGhpZ2gpIHtcclxuXHJcblx0XHRyZXR1cm4gbG93ICsgTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxyXG5cclxuXHRyYW5kRmxvYXRTcHJlYWQ6IGZ1bmN0aW9uIChyYW5nZSkge1xyXG5cclxuXHRcdHJldHVybiByYW5nZSAqICgwLjUgLSBNYXRoLnJhbmRvbSgpKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGVnVG9SYWQ6IGZ1bmN0aW9uIChkZWdyZWVzKSB7XHJcblxyXG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiBfTWF0aC5ERUcyUkFEO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyYWRUb0RlZzogZnVuY3Rpb24gKHJhZGlhbnMpIHtcclxuXHJcblx0XHRyZXR1cm4gcmFkaWFucyAqIF9NYXRoLlJBRDJERUc7XHJcblxyXG5cdH0sXHJcblxyXG5cdGlzUG93ZXJPZlR3bzogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0cmV0dXJuICh2YWx1ZSAmICh2YWx1ZSAtIDEpKSA9PT0gMCAmJiB2YWx1ZSAhPT0gMDtcclxuXHJcblx0fSxcclxuXHJcblx0Y2VpbFBvd2VyT2ZUd286IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnBvdygyLCBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpKTtcclxuXHJcblx0fSxcclxuXHJcblx0Zmxvb3JQb3dlck9mVHdvOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5wb3coMiwgTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMikpO1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXHJcbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXHJcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcclxuICovXHJcblxyXG5mdW5jdGlvbiBWZWN0b3IyKHgsIHkpIHtcclxuXHJcblx0dGhpcy54ID0geCB8fCAwO1xyXG5cdHRoaXMueSA9IHkgfHwgMDtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZlY3RvcjIucHJvdG90eXBlLCB7XHJcblxyXG5cdFwid2lkdGhcIjoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMueDtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHR0aGlzLnggPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdFwiaGVpZ2h0XCI6IHtcclxuXHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLnk7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy55ID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oVmVjdG9yMi5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNWZWN0b3IyOiB0cnVlLFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh4LCB5KSB7XHJcblxyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKHNjYWxhcikge1xyXG5cclxuXHRcdHRoaXMueCA9IHNjYWxhcjtcclxuXHRcdHRoaXMueSA9IHNjYWxhcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WDogZnVuY3Rpb24gKHgpIHtcclxuXHJcblx0XHR0aGlzLnggPSB4O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRZOiBmdW5jdGlvbiAoeSkge1xyXG5cclxuXHRcdHRoaXMueSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xyXG5cclxuXHRcdHN3aXRjaCAoaW5kZXgpIHtcclxuXHJcblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRDb21wb25lbnQ6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuXHRcdHN3aXRjaCAoaW5kZXgpIHtcclxuXHJcblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcclxuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCwgdGhpcy55KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLnggPSB2Lng7XHJcblx0XHR0aGlzLnkgPSB2Lnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKHYsIHcpIHtcclxuXHJcblx0XHRpZiAodyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyh2LCB3KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy54ICs9IHYueDtcclxuXHRcdHRoaXMueSArPSB2Lnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnggKz0gcztcclxuXHRcdHRoaXMueSArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSArIGIueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAodiwgcykge1xyXG5cclxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xyXG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YjogZnVuY3Rpb24gKHYsIHcpIHtcclxuXHJcblx0XHRpZiAodyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyh2LCB3KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy54IC09IHYueDtcclxuXHRcdHRoaXMueSAtPSB2Lnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnggLT0gcztcclxuXHRcdHRoaXMueSAtPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSAtIGIueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bXVsdGlwbHk6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dGhpcy54ICo9IHYueDtcclxuXHRcdHRoaXMueSAqPSB2Lnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcclxuXHRcdHRoaXMueSAqPSBzY2FsYXI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpdmlkZTogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLnggLz0gdi54O1xyXG5cdFx0dGhpcy55IC89IHYueTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZGl2aWRlU2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoMSAvIHNjYWxhcik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFwcGx5TWF0cml4MzogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcclxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWzBdICogeCArIGVbM10gKiB5ICsgZVs2XTtcclxuXHRcdHRoaXMueSA9IGVbMV0gKiB4ICsgZVs0XSAqIHkgKyBlWzddO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtaW46IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5taW4odGhpcy54LCB2LngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5taW4odGhpcy55LCB2LnkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYXg6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgodGhpcy54LCB2LngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgodGhpcy55LCB2LnkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGFtcDogZnVuY3Rpb24gKG1pbiwgbWF4KSB7XHJcblxyXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1heChtaW4ueCwgTWF0aC5taW4obWF4LngsIHRoaXMueCkpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgobWluLnksIE1hdGgubWluKG1heC55LCB0aGlzLnkpKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXBTY2FsYXI6IGZ1bmN0aW9uIChtaW5WYWwsIG1heFZhbCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KG1pblZhbCwgTWF0aC5taW4obWF4VmFsLCB0aGlzLngpKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KG1pblZhbCwgTWF0aC5taW4obWF4VmFsLCB0aGlzLnkpKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXBMZW5ndGg6IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG5cclxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhcihsZW5ndGggfHwgMSkubXVsdGlwbHlTY2FsYXIoTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIGxlbmd0aCkpKTtcclxuXHJcblx0fSxcclxuXHJcblx0Zmxvb3I6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKHRoaXMueSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLmNlaWwodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGguY2VpbCh0aGlzLnkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3VuZDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGgucm91bmQodGhpcy55KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAodGhpcy54IDwgMCkgPyBNYXRoLmNlaWwodGhpcy54KSA6IE1hdGguZmxvb3IodGhpcy54KTtcclxuXHRcdHRoaXMueSA9ICh0aGlzLnkgPCAwKSA/IE1hdGguY2VpbCh0aGlzLnkpIDogTWF0aC5mbG9vcih0aGlzLnkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkb3Q6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcclxuXHJcblx0fSxcclxuXHJcblx0Y3Jvc3M6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueDtcclxuXHJcblx0fSxcclxuXHJcblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55O1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1hbmhhdHRhbkxlbmd0aDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFicyh0aGlzLngpICsgTWF0aC5hYnModGhpcy55KTtcclxuXHJcblx0fSxcclxuXHJcblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCkgfHwgMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFuZ2xlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gY29tcHV0ZXMgdGhlIGFuZ2xlIGluIHJhZGlhbnMgd2l0aCByZXNwZWN0IHRvIHRoZSBwb3NpdGl2ZSB4LWF4aXNcclxuXHJcblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcclxuXHJcblx0XHRpZiAoYW5nbGUgPCAwKSB7IGFuZ2xlICs9IDIgKiBNYXRoLlBJOyB9XHJcblxyXG5cdFx0cmV0dXJuIGFuZ2xlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXN0YW5jZVRvOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQodGhpcy5kaXN0YW5jZVRvU3F1YXJlZCh2KSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlVG9TcXVhcmVkOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2Lnk7XHJcblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG86IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguYWJzKHRoaXMueCAtIHYueCkgKyBNYXRoLmFicyh0aGlzLnkgLSB2LnkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uIChsZW5ndGgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihsZW5ndGgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZXJwOiBmdW5jdGlvbiAodiwgYWxwaGEpIHtcclxuXHJcblx0XHR0aGlzLnggKz0gKHYueCAtIHRoaXMueCkgKiBhbHBoYTtcclxuXHRcdHRoaXMueSArPSAodi55IC0gdGhpcy55KSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKHYxLCB2MiwgYWxwaGEpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKHYyLCB2MSkubXVsdGlwbHlTY2FsYXIoYWxwaGEpLmFkZCh2MSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRyZXR1cm4gKCh2LnggPT09IHRoaXMueCkgJiYgKHYueSA9PT0gdGhpcy55KSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdHRoaXMueCA9IGFycmF5W29mZnNldF07XHJcblx0XHR0aGlzLnkgPSBhcnJheVtvZmZzZXQgKyAxXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAoYXJyYXkgPT09IHVuZGVmaW5lZCkgeyBhcnJheSA9IFtdOyB9XHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdGFycmF5W29mZnNldF0gPSB0aGlzLng7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxXSA9IHRoaXMueTtcclxuXHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yMjogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WChpbmRleCk7XHJcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WShpbmRleCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJvdGF0ZUFyb3VuZDogZnVuY3Rpb24gKGNlbnRlciwgYW5nbGUpIHtcclxuXHJcblx0XHR2YXIgYyA9IE1hdGguY29zKGFuZ2xlKSwgcyA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHJcblx0XHR2YXIgeCA9IHRoaXMueCAtIGNlbnRlci54O1xyXG5cdFx0dmFyIHkgPSB0aGlzLnkgLSBjZW50ZXIueTtcclxuXHJcblx0XHR0aGlzLnggPSB4ICogYyAtIHkgKiBzICsgY2VudGVyLng7XHJcblx0XHR0aGlzLnkgPSB4ICogcyArIHkgKiBjICsgY2VudGVyLnk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUXVhdGVybmlvbih4LCB5LCB6LCB3KSB7XHJcblxyXG5cdHRoaXMuX3ggPSB4IHx8IDA7XHJcblx0dGhpcy5feSA9IHkgfHwgMDtcclxuXHR0aGlzLl96ID0geiB8fCAwO1xyXG5cdHRoaXMuX3cgPSAodyAhPT0gdW5kZWZpbmVkKSA/IHcgOiAxO1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihRdWF0ZXJuaW9uLCB7XHJcblxyXG5cdHNsZXJwOiBmdW5jdGlvbiAocWEsIHFiLCBxbSwgdCkge1xyXG5cclxuXHRcdHJldHVybiBxbS5jb3B5KHFhKS5zbGVycChxYiwgdCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNsZXJwRmxhdDogZnVuY3Rpb24gKGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0KSB7XHJcblxyXG5cdFx0Ly8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvblxyXG5cclxuXHRcdHZhciB4MCA9IHNyYzBbc3JjT2Zmc2V0MCArIDBdLFxyXG5cdFx0XHR5MCA9IHNyYzBbc3JjT2Zmc2V0MCArIDFdLFxyXG5cdFx0XHR6MCA9IHNyYzBbc3JjT2Zmc2V0MCArIDJdLFxyXG5cdFx0XHR3MCA9IHNyYzBbc3JjT2Zmc2V0MCArIDNdLFxyXG5cclxuXHRcdFx0eDEgPSBzcmMxW3NyY09mZnNldDEgKyAwXSxcclxuXHRcdFx0eTEgPSBzcmMxW3NyY09mZnNldDEgKyAxXSxcclxuXHRcdFx0ejEgPSBzcmMxW3NyY09mZnNldDEgKyAyXSxcclxuXHRcdFx0dzEgPSBzcmMxW3NyY09mZnNldDEgKyAzXTtcclxuXHJcblx0XHRpZiAodzAgIT09IHcxIHx8IHgwICE9PSB4MSB8fCB5MCAhPT0geTEgfHwgejAgIT09IHoxKSB7XHJcblxyXG5cdFx0XHR2YXIgcyA9IDEgLSB0LFxyXG5cclxuXHRcdFx0XHRjb3MgPSB4MCAqIHgxICsgeTAgKiB5MSArIHowICogejEgKyB3MCAqIHcxLFxyXG5cclxuXHRcdFx0XHRkaXIgPSAoY29zID49IDAgPyAxIDogLSAxKSxcclxuXHRcdFx0XHRzcXJTaW4gPSAxIC0gY29zICogY29zO1xyXG5cclxuXHRcdFx0Ly8gU2tpcCB0aGUgU2xlcnAgZm9yIHRpbnkgc3RlcHMgdG8gYXZvaWQgbnVtZXJpYyBwcm9ibGVtczpcclxuXHRcdFx0aWYgKHNxclNpbiA+IE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzaW4gPSBNYXRoLnNxcnQoc3FyU2luKSxcclxuXHRcdFx0XHRcdGxlbiA9IE1hdGguYXRhbjIoc2luLCBjb3MgKiBkaXIpO1xyXG5cclxuXHRcdFx0XHRzID0gTWF0aC5zaW4ocyAqIGxlbikgLyBzaW47XHJcblx0XHRcdFx0dCA9IE1hdGguc2luKHQgKiBsZW4pIC8gc2luO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHREaXIgPSB0ICogZGlyO1xyXG5cclxuXHRcdFx0eDAgPSB4MCAqIHMgKyB4MSAqIHREaXI7XHJcblx0XHRcdHkwID0geTAgKiBzICsgeTEgKiB0RGlyO1xyXG5cdFx0XHR6MCA9IHowICogcyArIHoxICogdERpcjtcclxuXHRcdFx0dzAgPSB3MCAqIHMgKyB3MSAqIHREaXI7XHJcblxyXG5cdFx0XHQvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6XHJcblx0XHRcdGlmIChzID09PSAxIC0gdCkge1xyXG5cclxuXHRcdFx0XHR2YXIgZiA9IDEgLyBNYXRoLnNxcnQoeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCk7XHJcblxyXG5cdFx0XHRcdHgwICo9IGY7XHJcblx0XHRcdFx0eTAgKj0gZjtcclxuXHRcdFx0XHR6MCAqPSBmO1xyXG5cdFx0XHRcdHcwICo9IGY7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRzdFtkc3RPZmZzZXRdID0geDA7XHJcblx0XHRkc3RbZHN0T2Zmc2V0ICsgMV0gPSB5MDtcclxuXHRcdGRzdFtkc3RPZmZzZXQgKyAyXSA9IHowO1xyXG5cdFx0ZHN0W2RzdE9mZnNldCArIDNdID0gdzA7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcclxuXHJcblx0eDoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuX3g7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5feCA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHR5OiB7XHJcblxyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5feTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHR0aGlzLl95ID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdHo6IHtcclxuXHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLl96O1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ogPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dzoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuX3c7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5fdyA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oUXVhdGVybmlvbi5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNRdWF0ZXJuaW9uOiB0cnVlLFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XHJcblxyXG5cdFx0dGhpcy5feCA9IHg7XHJcblx0XHR0aGlzLl95ID0geTtcclxuXHRcdHRoaXMuX3ogPSB6O1xyXG5cdFx0dGhpcy5fdyA9IHc7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHF1YXRlcm5pb24pIHtcclxuXHJcblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xyXG5cdFx0dGhpcy5feSA9IHF1YXRlcm5pb24ueTtcclxuXHRcdHRoaXMuX3ogPSBxdWF0ZXJuaW9uLno7XHJcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbUV1bGVyOiBmdW5jdGlvbiAoZXVsZXIsIHVwZGF0ZSkge1xyXG5cclxuXHRcdGlmICghKGV1bGVyICYmIGV1bGVyLmlzRXVsZXIpKSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLlF1YXRlcm5pb246IC5zZXRGcm9tRXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgeCA9IGV1bGVyLl94LCB5ID0gZXVsZXIuX3ksIHogPSBldWxlci5feiwgb3JkZXIgPSBldWxlci5vcmRlcjtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXHJcblx0XHQvLyBcdDIwNjk2LWZ1bmN0aW9uLXRvLWNvbnZlcnQtYmV0d2Vlbi1kY20tZXVsZXItYW5nbGVzLXF1YXRlcm5pb25zLWFuZC1ldWxlci12ZWN0b3JzL1xyXG5cdFx0Ly9cdGNvbnRlbnQvU3BpbkNhbGMubVxyXG5cclxuXHRcdHZhciBjb3MgPSBNYXRoLmNvcztcclxuXHRcdHZhciBzaW4gPSBNYXRoLnNpbjtcclxuXHJcblx0XHR2YXIgYzEgPSBjb3MoeCAvIDIpO1xyXG5cdFx0dmFyIGMyID0gY29zKHkgLyAyKTtcclxuXHRcdHZhciBjMyA9IGNvcyh6IC8gMik7XHJcblxyXG5cdFx0dmFyIHMxID0gc2luKHggLyAyKTtcclxuXHRcdHZhciBzMiA9IHNpbih5IC8gMik7XHJcblx0XHR2YXIgczMgPSBzaW4oeiAvIDIpO1xyXG5cclxuXHRcdGlmIChvcmRlciA9PT0gJ1hZWicpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1pYWScpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1pZWCcpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1haWScpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XHJcblx0XHRcdHRoaXMuX3kgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XHJcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XHJcblx0XHRcdHRoaXMuX3cgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh1cGRhdGUgIT09IGZhbHNlKSB7IHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsgfVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoYXhpcywgYW5nbGUpIHtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvYW5nbGVUb1F1YXRlcm5pb24vaW5kZXguaHRtXHJcblxyXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcclxuXHJcblx0XHR2YXIgaGFsZkFuZ2xlID0gYW5nbGUgLyAyLCBzID0gTWF0aC5zaW4oaGFsZkFuZ2xlKTtcclxuXHJcblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcclxuXHRcdHRoaXMuX3kgPSBheGlzLnkgKiBzO1xyXG5cdFx0dGhpcy5feiA9IGF4aXMueiAqIHM7XHJcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoaGFsZkFuZ2xlKTtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxyXG5cclxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXHJcblxyXG5cdFx0dmFyIHRlID0gbS5lbGVtZW50cyxcclxuXHJcblx0XHRcdG0xMSA9IHRlWzBdLCBtMTIgPSB0ZVs0XSwgbTEzID0gdGVbOF0sXHJcblx0XHRcdG0yMSA9IHRlWzFdLCBtMjIgPSB0ZVs1XSwgbTIzID0gdGVbOV0sXHJcblx0XHRcdG0zMSA9IHRlWzJdLCBtMzIgPSB0ZVs2XSwgbTMzID0gdGVbMTBdLFxyXG5cclxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsXHJcblx0XHRcdHM7XHJcblxyXG5cdFx0aWYgKHRyYWNlID4gMCkge1xyXG5cclxuXHRcdFx0cyA9IDAuNSAvIE1hdGguc3FydCh0cmFjZSArIDEuMCk7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gMC4yNSAvIHM7XHJcblx0XHRcdHRoaXMuX3ggPSAobTMyIC0gbTIzKSAqIHM7XHJcblx0XHRcdHRoaXMuX3kgPSAobTEzIC0gbTMxKSAqIHM7XHJcblx0XHRcdHRoaXMuX3ogPSAobTIxIC0gbTEyKSAqIHM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChtMTEgPiBtMjIgJiYgbTExID4gbTMzKSB7XHJcblxyXG5cdFx0XHRzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0xMSAtIG0yMiAtIG0zMyk7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gKG0zMiAtIG0yMykgLyBzO1xyXG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XHJcblx0XHRcdHRoaXMuX3kgPSAobTEyICsgbTIxKSAvIHM7XHJcblx0XHRcdHRoaXMuX3ogPSAobTEzICsgbTMxKSAvIHM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChtMjIgPiBtMzMpIHtcclxuXHJcblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcclxuXHJcblx0XHRcdHRoaXMuX3cgPSAobTEzIC0gbTMxKSAvIHM7XHJcblx0XHRcdHRoaXMuX3ggPSAobTEyICsgbTIxKSAvIHM7XHJcblx0XHRcdHRoaXMuX3kgPSAwLjI1ICogcztcclxuXHRcdFx0dGhpcy5feiA9IChtMjMgKyBtMzIpIC8gcztcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMzMgLSBtMTEgLSBtMjIpO1xyXG5cclxuXHRcdFx0dGhpcy5fdyA9IChtMjEgLSBtMTIpIC8gcztcclxuXHRcdFx0dGhpcy5feCA9IChtMTMgKyBtMzEpIC8gcztcclxuXHRcdFx0dGhpcy5feSA9IChtMjMgKyBtMzIpIC8gcztcclxuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21Vbml0VmVjdG9yczogZnVuY3Rpb24gKHZGcm9tLCB2VG8pIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIGRpcmVjdGlvbiB2ZWN0b3JzIHZGcm9tIGFuZCB2VG8gYXJlIG5vcm1hbGl6ZWRcclxuXHJcblx0XHR2YXIgRVBTID0gMC4wMDAwMDE7XHJcblxyXG5cdFx0dmFyIHIgPSB2RnJvbS5kb3QodlRvKSArIDE7XHJcblxyXG5cdFx0aWYgKHIgPCBFUFMpIHtcclxuXHJcblx0XHRcdHIgPSAwO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKHZGcm9tLngpID4gTWF0aC5hYnModkZyb20ueikpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcclxuXHRcdFx0XHR0aGlzLl95ID0gdkZyb20ueDtcclxuXHRcdFx0XHR0aGlzLl96ID0gMDtcclxuXHRcdFx0XHR0aGlzLl93ID0gcjtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xyXG5cdFx0XHRcdHRoaXMuX3kgPSAtIHZGcm9tLno7XHJcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XHJcblx0XHRcdFx0dGhpcy5fdyA9IHI7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGNyb3NzVmVjdG9ycyggdkZyb20sIHZUbyApOyAvLyBpbmxpbmVkIHRvIGF2b2lkIGN5Y2xpYyBkZXBlbmRlbmN5IG9uIFZlY3RvcjNcclxuXHJcblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XHJcblx0XHRcdHRoaXMuX3kgPSB2RnJvbS56ICogdlRvLnggLSB2RnJvbS54ICogdlRvLno7XHJcblx0XHRcdHRoaXMuX3ogPSB2RnJvbS54ICogdlRvLnkgLSB2RnJvbS55ICogdlRvLng7XHJcblx0XHRcdHRoaXMuX3cgPSByO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcclxuXHJcblx0fSxcclxuXHJcblx0YW5nbGVUbzogZnVuY3Rpb24gKHEpIHtcclxuXHJcblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyhNYXRoLmFicyhfTWF0aC5jbGFtcCh0aGlzLmRvdChxKSwgLSAxLCAxKSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVUb3dhcmRzOiBmdW5jdGlvbiAocSwgc3RlcCkge1xyXG5cclxuXHRcdHZhciBhbmdsZSA9IHRoaXMuYW5nbGVUbyhxKTtcclxuXHJcblx0XHRpZiAoYW5nbGUgPT09IDApIHsgcmV0dXJuIHRoaXM7IH1cclxuXHJcblx0XHR2YXIgdCA9IE1hdGgubWluKDEsIHN0ZXAgLyBhbmdsZSk7XHJcblxyXG5cdFx0dGhpcy5zbGVycChxLCB0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0aW52ZXJzZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdC8vIHF1YXRlcm5pb24gaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY29uanVnYXRlKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbmp1Z2F0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuX3ggKj0gLSAxO1xyXG5cdFx0dGhpcy5feSAqPSAtIDE7XHJcblx0XHR0aGlzLl96ICo9IC0gMTtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRvdDogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93O1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93KTtcclxuXHJcblx0fSxcclxuXHJcblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGwgPSB0aGlzLmxlbmd0aCgpO1xyXG5cclxuXHRcdGlmIChsID09PSAwKSB7XHJcblxyXG5cdFx0XHR0aGlzLl94ID0gMDtcclxuXHRcdFx0dGhpcy5feSA9IDA7XHJcblx0XHRcdHRoaXMuX3ogPSAwO1xyXG5cdFx0XHR0aGlzLl93ID0gMTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0bCA9IDEgLyBsO1xyXG5cclxuXHRcdFx0dGhpcy5feCA9IHRoaXMuX3ggKiBsO1xyXG5cdFx0XHR0aGlzLl95ID0gdGhpcy5feSAqIGw7XHJcblx0XHRcdHRoaXMuX3ogPSB0aGlzLl96ICogbDtcclxuXHRcdFx0dGhpcy5fdyA9IHRoaXMuX3cgKiBsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAocSwgcCkge1xyXG5cclxuXHRcdGlmIChwICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMocSwgcCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnModGhpcywgcSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHByZW11bHRpcGx5OiBmdW5jdGlvbiAocSkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMocSwgdGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdG11bHRpcGx5UXVhdGVybmlvbnM6IGZ1bmN0aW9uIChhLCBiKSB7XHJcblxyXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL2NvZGUvaW5kZXguaHRtXHJcblxyXG5cdFx0dmFyIHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XHJcblx0XHR2YXIgcWJ4ID0gYi5feCwgcWJ5ID0gYi5feSwgcWJ6ID0gYi5feiwgcWJ3ID0gYi5fdztcclxuXHJcblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xyXG5cdFx0dGhpcy5feSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcclxuXHRcdHRoaXMuX3ogPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XHJcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2xlcnA6IGZ1bmN0aW9uIChxYiwgdCkge1xyXG5cclxuXHRcdGlmICh0ID09PSAwKSB7IHJldHVybiB0aGlzOyB9XHJcblx0XHRpZiAodCA9PT0gMSkgeyByZXR1cm4gdGhpcy5jb3B5KHFiKTsgfVxyXG5cclxuXHRcdHZhciB4ID0gdGhpcy5feCwgeSA9IHRoaXMuX3ksIHogPSB0aGlzLl96LCB3ID0gdGhpcy5fdztcclxuXHJcblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwL1xyXG5cclxuXHRcdHZhciBjb3NIYWxmVGhldGEgPSB3ICogcWIuX3cgKyB4ICogcWIuX3ggKyB5ICogcWIuX3kgKyB6ICogcWIuX3o7XHJcblxyXG5cdFx0aWYgKGNvc0hhbGZUaGV0YSA8IDApIHtcclxuXHJcblx0XHRcdHRoaXMuX3cgPSAtIHFiLl93O1xyXG5cdFx0XHR0aGlzLl94ID0gLSBxYi5feDtcclxuXHRcdFx0dGhpcy5feSA9IC0gcWIuX3k7XHJcblx0XHRcdHRoaXMuX3ogPSAtIHFiLl96O1xyXG5cclxuXHRcdFx0Y29zSGFsZlRoZXRhID0gLSBjb3NIYWxmVGhldGE7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuY29weShxYik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChjb3NIYWxmVGhldGEgPj0gMS4wKSB7XHJcblxyXG5cdFx0XHR0aGlzLl93ID0gdztcclxuXHRcdFx0dGhpcy5feCA9IHg7XHJcblx0XHRcdHRoaXMuX3kgPSB5O1xyXG5cdFx0XHR0aGlzLl96ID0gejtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhO1xyXG5cclxuXHRcdGlmIChzcXJTaW5IYWxmVGhldGEgPD0gTnVtYmVyLkVQU0lMT04pIHtcclxuXHJcblx0XHRcdHZhciBzID0gMSAtIHQ7XHJcblx0XHRcdHRoaXMuX3cgPSBzICogdyArIHQgKiB0aGlzLl93O1xyXG5cdFx0XHR0aGlzLl94ID0gcyAqIHggKyB0ICogdGhpcy5feDtcclxuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XHJcblx0XHRcdHRoaXMuX3ogPSBzICogeiArIHQgKiB0aGlzLl96O1xyXG5cclxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBzaW5IYWxmVGhldGEgPSBNYXRoLnNxcnQoc3FyU2luSGFsZlRoZXRhKTtcclxuXHRcdHZhciBoYWxmVGhldGEgPSBNYXRoLmF0YW4yKHNpbkhhbGZUaGV0YSwgY29zSGFsZlRoZXRhKTtcclxuXHRcdHZhciByYXRpb0EgPSBNYXRoLnNpbigoMSAtIHQpICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YSxcclxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4odCAqIGhhbGZUaGV0YSkgLyBzaW5IYWxmVGhldGE7XHJcblxyXG5cdFx0dGhpcy5fdyA9ICh3ICogcmF0aW9BICsgdGhpcy5fdyAqIHJhdGlvQik7XHJcblx0XHR0aGlzLl94ID0gKHggKiByYXRpb0EgKyB0aGlzLl94ICogcmF0aW9CKTtcclxuXHRcdHRoaXMuX3kgPSAoeSAqIHJhdGlvQSArIHRoaXMuX3kgKiByYXRpb0IpO1xyXG5cdFx0dGhpcy5feiA9ICh6ICogcmF0aW9BICsgdGhpcy5feiAqIHJhdGlvQik7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlcXVhbHM6IGZ1bmN0aW9uIChxdWF0ZXJuaW9uKSB7XHJcblxyXG5cdFx0cmV0dXJuIChxdWF0ZXJuaW9uLl94ID09PSB0aGlzLl94KSAmJiAocXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSkgJiYgKHF1YXRlcm5pb24uX3ogPT09IHRoaXMuX3opICYmIChxdWF0ZXJuaW9uLl93ID09PSB0aGlzLl93KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0dGhpcy5feCA9IGFycmF5W29mZnNldF07XHJcblx0XHR0aGlzLl95ID0gYXJyYXlbb2Zmc2V0ICsgMV07XHJcblx0XHR0aGlzLl96ID0gYXJyYXlbb2Zmc2V0ICsgMl07XHJcblx0XHR0aGlzLl93ID0gYXJyYXlbb2Zmc2V0ICsgM107XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChhcnJheSA9PT0gdW5kZWZpbmVkKSB7IGFycmF5ID0gW107IH1cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0XSA9IHRoaXMuX3g7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxXSA9IHRoaXMuX3k7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAyXSA9IHRoaXMuX3o7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAzXSA9IHRoaXMuX3c7XHJcblxyXG5cdFx0cmV0dXJuIGFycmF5O1xyXG5cclxuXHR9LFxyXG5cclxuXHRfb25DaGFuZ2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0X29uQ2hhbmdlQ2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgfVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBraWxlIC8gaHR0cDovL2tpbGUuc3RyYXZhZ2FuemEub3JnL1xyXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICovXHJcblxyXG52YXIgX3ZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG5mdW5jdGlvbiBWZWN0b3IzKHgsIHksIHopIHtcclxuXHJcblx0dGhpcy54ID0geCB8fCAwO1xyXG5cdHRoaXMueSA9IHkgfHwgMDtcclxuXHR0aGlzLnogPSB6IHx8IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFZlY3RvcjMucHJvdG90eXBlLCB7XHJcblxyXG5cdGlzVmVjdG9yMzogdHJ1ZSxcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0dGhpcy56ID0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xyXG5cdFx0dGhpcy55ID0gc2NhbGFyO1xyXG5cdFx0dGhpcy56ID0gc2NhbGFyO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRYOiBmdW5jdGlvbiAoeCkge1xyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFk6IGZ1bmN0aW9uICh5KSB7XHJcblxyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WjogZnVuY3Rpb24gKHopIHtcclxuXHJcblx0XHR0aGlzLnogPSB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRDb21wb25lbnQ6IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcclxuXHJcblx0XHRzd2l0Y2ggKGluZGV4KSB7XHJcblxyXG5cdFx0XHRjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0Y2FzZSAxOiB0aGlzLnkgPSB2YWx1ZTsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0c3dpdGNoIChpbmRleCkge1xyXG5cclxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xyXG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcclxuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLnggPSB2Lng7XHJcblx0XHR0aGlzLnkgPSB2Lnk7XHJcblx0XHR0aGlzLnogPSB2Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKHYsIHcpIHtcclxuXHJcblx0XHRpZiAodyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyh2LCB3KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy54ICs9IHYueDtcclxuXHRcdHRoaXMueSArPSB2Lnk7XHJcblx0XHR0aGlzLnogKz0gdi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uIChzKSB7XHJcblxyXG5cdFx0dGhpcy54ICs9IHM7XHJcblx0XHR0aGlzLnkgKz0gcztcclxuXHRcdHRoaXMueiArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSArIGIueTtcclxuXHRcdHRoaXMueiA9IGEueiArIGIuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAodiwgcykge1xyXG5cclxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xyXG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XHJcblx0XHR0aGlzLnogKz0gdi56ICogcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c3ViOiBmdW5jdGlvbiAodiwgdykge1xyXG5cclxuXHRcdGlmICh3ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKHYsIHcpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnggLT0gdi54O1xyXG5cdFx0dGhpcy55IC09IHYueTtcclxuXHRcdHRoaXMueiAtPSB2Lno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnggLT0gcztcclxuXHRcdHRoaXMueSAtPSBzO1xyXG5cdFx0dGhpcy56IC09IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uIChhLCBiKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gYS54IC0gYi54O1xyXG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xyXG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseTogZnVuY3Rpb24gKHYsIHcpIHtcclxuXHJcblx0XHRpZiAodyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjM6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5VmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5VmVjdG9ycyh2LCB3KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy54ICo9IHYueDtcclxuXHRcdHRoaXMueSAqPSB2Lnk7XHJcblx0XHR0aGlzLnogKj0gdi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKHNjYWxhcikge1xyXG5cclxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XHJcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xyXG5cdFx0dGhpcy56ICo9IHNjYWxhcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bXVsdGlwbHlWZWN0b3JzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCAqIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSAqIGIueTtcclxuXHRcdHRoaXMueiA9IGEueiAqIGIuejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlFdWxlcjogZnVuY3Rpb24gKGV1bGVyKSB7XHJcblxyXG5cdFx0aWYgKCEoZXVsZXIgJiYgZXVsZXIuaXNFdWxlcikpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlZlY3RvcjM6IC5hcHBseUV1bGVyKCkgbm93IGV4cGVjdHMgYW4gRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKF9xdWF0ZXJuaW9uLnNldEZyb21FdWxlcihldWxlcikpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhcHBseUF4aXNBbmdsZTogZnVuY3Rpb24gKGF4aXMsIGFuZ2xlKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlRdWF0ZXJuaW9uKF9xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoYXhpcywgYW5nbGUpKTtcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xyXG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRoaXMueCA9IGVbMF0gKiB4ICsgZVszXSAqIHkgKyBlWzZdICogejtcclxuXHRcdHRoaXMueSA9IGVbMV0gKiB4ICsgZVs0XSAqIHkgKyBlWzddICogejtcclxuXHRcdHRoaXMueiA9IGVbMl0gKiB4ICsgZVs1XSAqIHkgKyBlWzhdICogejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56O1xyXG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHZhciB3ID0gMSAvIChlWzNdICogeCArIGVbN10gKiB5ICsgZVsxMV0gKiB6ICsgZVsxNV0pO1xyXG5cclxuXHRcdHRoaXMueCA9IChlWzBdICogeCArIGVbNF0gKiB5ICsgZVs4XSAqIHogKyBlWzEyXSkgKiB3O1xyXG5cdFx0dGhpcy55ID0gKGVbMV0gKiB4ICsgZVs1XSAqIHkgKyBlWzldICogeiArIGVbMTNdKSAqIHc7XHJcblx0XHR0aGlzLnogPSAoZVsyXSAqIHggKyBlWzZdICogeSArIGVbMTBdICogeiArIGVbMTRdKSAqIHc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKHEpIHtcclxuXHJcblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcclxuXHRcdHZhciBxeCA9IHEueCwgcXkgPSBxLnksIHF6ID0gcS56LCBxdyA9IHEudztcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxyXG5cclxuXHRcdHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcclxuXHRcdHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcclxuXHRcdHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcclxuXHRcdHZhciBpdyA9IC0gcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcclxuXHJcblx0XHR0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtIHF4ICsgaXkgKiAtIHF6IC0gaXogKiAtIHF5O1xyXG5cdFx0dGhpcy55ID0gaXkgKiBxdyArIGl3ICogLSBxeSArIGl6ICogLSBxeCAtIGl4ICogLSBxejtcclxuXHRcdHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC0gcXogKyBpeCAqIC0gcXkgLSBpeSAqIC0gcXg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHByb2plY3Q6IGZ1bmN0aW9uIChjYW1lcmEpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSkuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTtcclxuXHJcblx0fSxcclxuXHJcblx0dW5wcm9qZWN0OiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSkuYXBwbHlNYXRyaXg0KGNhbWVyYS5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zZm9ybURpcmVjdGlvbjogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHQvLyBpbnB1dDogVEhSRUUuTWF0cml4NCBhZmZpbmUgbWF0cml4XHJcblx0XHQvLyB2ZWN0b3IgaW50ZXJwcmV0ZWQgYXMgYSBkaXJlY3Rpb25cclxuXHJcblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcclxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWzBdICogeCArIGVbNF0gKiB5ICsgZVs4XSAqIHo7XHJcblx0XHR0aGlzLnkgPSBlWzFdICogeCArIGVbNV0gKiB5ICsgZVs5XSAqIHo7XHJcblx0XHR0aGlzLnogPSBlWzJdICogeCArIGVbNl0gKiB5ICsgZVsxMF0gKiB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXZpZGU6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dGhpcy54IC89IHYueDtcclxuXHRcdHRoaXMueSAvPSB2Lnk7XHJcblx0XHR0aGlzLnogLz0gdi56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uIChzY2FsYXIpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxIC8gc2NhbGFyKTtcclxuXHJcblx0fSxcclxuXHJcblx0bWluOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgubWluKHRoaXMueCwgdi54KTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWluKHRoaXMueSwgdi55KTtcclxuXHRcdHRoaXMueiA9IE1hdGgubWluKHRoaXMueiwgdi56KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bWF4OiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KHRoaXMueCwgdi54KTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KHRoaXMueSwgdi55KTtcclxuXHRcdHRoaXMueiA9IE1hdGgubWF4KHRoaXMueiwgdi56KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXA6IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgobWluLngsIE1hdGgubWluKG1heC54LCB0aGlzLngpKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KG1pbi55LCBNYXRoLm1pbihtYXgueSwgdGhpcy55KSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLm1heChtaW4ueiwgTWF0aC5taW4obWF4LnosIHRoaXMueikpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGFtcFNjYWxhcjogZnVuY3Rpb24gKG1pblZhbCwgbWF4VmFsKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgobWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueCkpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgobWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueSkpO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5tYXgobWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueikpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKG1pbiwgbWF4KSB7XHJcblxyXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKGxlbmd0aCB8fCAxKS5tdWx0aXBseVNjYWxhcihNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgbGVuZ3RoKSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IodGhpcy55KTtcclxuXHRcdHRoaXMueiA9IE1hdGguZmxvb3IodGhpcy56KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2VpbDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKHRoaXMueSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwodGhpcy56KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKHRoaXMueSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKHRoaXMueik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJvdW5kVG9aZXJvOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gKHRoaXMueCA8IDApID8gTWF0aC5jZWlsKHRoaXMueCkgOiBNYXRoLmZsb29yKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSAodGhpcy55IDwgMCkgPyBNYXRoLmNlaWwodGhpcy55KSA6IE1hdGguZmxvb3IodGhpcy55KTtcclxuXHRcdHRoaXMueiA9ICh0aGlzLnogPCAwKSA/IE1hdGguY2VpbCh0aGlzLnopIDogTWF0aC5mbG9vcih0aGlzLnopO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRvdDogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBUT0RPIGxlbmd0aFNxdWFyZWQ/XHJcblxyXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMuejtcclxuXHJcblx0fSxcclxuXHJcblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnopO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hYnModGhpcy54KSArIE1hdGguYWJzKHRoaXMueSkgKyBNYXRoLmFicyh0aGlzLnopO1xyXG5cclxuXHR9LFxyXG5cclxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIodGhpcy5sZW5ndGgoKSB8fCAxKTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0TGVuZ3RoOiBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIobGVuZ3RoKTtcclxuXHJcblx0fSxcclxuXHJcblx0bGVycDogZnVuY3Rpb24gKHYsIGFscGhhKSB7XHJcblxyXG5cdFx0dGhpcy54ICs9ICh2LnggLSB0aGlzLngpICogYWxwaGE7XHJcblx0XHR0aGlzLnkgKz0gKHYueSAtIHRoaXMueSkgKiBhbHBoYTtcclxuXHRcdHRoaXMueiArPSAodi56IC0gdGhpcy56KSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKHYxLCB2MiwgYWxwaGEpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKHYyLCB2MSkubXVsdGlwbHlTY2FsYXIoYWxwaGEpLmFkZCh2MSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNyb3NzOiBmdW5jdGlvbiAodiwgdykge1xyXG5cclxuXHRcdGlmICh3ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yMzogLmNyb3NzKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuY3Jvc3NWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKHYsIHcpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnModGhpcywgdik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNyb3NzVmVjdG9yczogZnVuY3Rpb24gKGEsIGIpIHtcclxuXHJcblx0XHR2YXIgYXggPSBhLngsIGF5ID0gYS55LCBheiA9IGEuejtcclxuXHRcdHZhciBieCA9IGIueCwgYnkgPSBiLnksIGJ6ID0gYi56O1xyXG5cclxuXHRcdHRoaXMueCA9IGF5ICogYnogLSBheiAqIGJ5O1xyXG5cdFx0dGhpcy55ID0gYXogKiBieCAtIGF4ICogYno7XHJcblx0XHR0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0cHJvamVjdE9uVmVjdG9yOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdC8vIHYgY2Fubm90IGJlIHRoZSB6ZXJvIHZcclxuXHJcblx0XHR2YXIgc2NhbGFyID0gdi5kb3QodGhpcykgLyB2Lmxlbmd0aFNxKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuY29weSh2KS5tdWx0aXBseVNjYWxhcihzY2FsYXIpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRwcm9qZWN0T25QbGFuZTogZnVuY3Rpb24gKHBsYW5lTm9ybWFsKSB7XHJcblxyXG5cdFx0X3ZlY3Rvci5jb3B5KHRoaXMpLnByb2plY3RPblZlY3RvcihwbGFuZU5vcm1hbCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc3ViKF92ZWN0b3IpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyZWZsZWN0OiBmdW5jdGlvbiAobm9ybWFsKSB7XHJcblxyXG5cdFx0Ly8gcmVmbGVjdCBpbmNpZGVudCB2ZWN0b3Igb2ZmIHBsYW5lIG9ydGhvZ29uYWwgdG8gbm9ybWFsXHJcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBoYXZlIHVuaXQgbGVuZ3RoXHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc3ViKF92ZWN0b3IuY29weShub3JtYWwpLm11bHRpcGx5U2NhbGFyKDIgKiB0aGlzLmRvdChub3JtYWwpKSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFuZ2xlVG86IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dmFyIGRlbm9taW5hdG9yID0gTWF0aC5zcXJ0KHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSk7XHJcblxyXG5cdFx0aWYgKGRlbm9taW5hdG9yID09PSAwKSB7IGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlZlY3RvcjM6IGFuZ2xlVG8oKSBjYW5cXCd0IGhhbmRsZSB6ZXJvIGxlbmd0aCB2ZWN0b3JzLicpOyB9XHJcblxyXG5cdFx0dmFyIHRoZXRhID0gdGhpcy5kb3QodikgLyBkZW5vbWluYXRvcjtcclxuXHJcblx0XHQvLyBjbGFtcCwgdG8gaGFuZGxlIG51bWVyaWNhbCBwcm9ibGVtc1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFjb3MoX01hdGguY2xhbXAodGhldGEsIC0gMSwgMSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXN0YW5jZVRvOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQodGhpcy5kaXN0YW5jZVRvU3F1YXJlZCh2KSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlVG9TcXVhcmVkOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHZhciBkeCA9IHRoaXMueCAtIHYueCwgZHkgPSB0aGlzLnkgLSB2LnksIGR6ID0gdGhpcy56IC0gdi56O1xyXG5cclxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSArIGR6ICogZHo7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG86IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguYWJzKHRoaXMueCAtIHYueCkgKyBNYXRoLmFicyh0aGlzLnkgLSB2LnkpICsgTWF0aC5hYnModGhpcy56IC0gdi56KTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVNwaGVyaWNhbDogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tU3BoZXJpY2FsQ29vcmRzKHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21TcGhlcmljYWxDb29yZHM6IGZ1bmN0aW9uIChyYWRpdXMsIHBoaSwgdGhldGEpIHtcclxuXHJcblx0XHR2YXIgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4ocGhpKSAqIHJhZGl1cztcclxuXHJcblx0XHR0aGlzLnggPSBzaW5QaGlSYWRpdXMgKiBNYXRoLnNpbih0aGV0YSk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmNvcyhwaGkpICogcmFkaXVzO1xyXG5cdFx0dGhpcy56ID0gc2luUGhpUmFkaXVzICogTWF0aC5jb3ModGhldGEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ3lsaW5kcmljYWw6IGZ1bmN0aW9uIChjKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzKGMucmFkaXVzLCBjLnRoZXRhLCBjLnkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ3lsaW5kcmljYWxDb29yZHM6IGZ1bmN0aW9uIChyYWRpdXMsIHRoZXRhLCB5KSB7XHJcblxyXG5cdFx0dGhpcy54ID0gcmFkaXVzICogTWF0aC5zaW4odGhldGEpO1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKHRoZXRhKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbU1hdHJpeFBvc2l0aW9uOiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0aGlzLnggPSBlWzEyXTtcclxuXHRcdHRoaXMueSA9IGVbMTNdO1xyXG5cdFx0dGhpcy56ID0gZVsxNF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21NYXRyaXhTY2FsZTogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHR2YXIgc3ggPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4obSwgMCkubGVuZ3RoKCk7XHJcblx0XHR2YXIgc3kgPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4obSwgMSkubGVuZ3RoKCk7XHJcblx0XHR2YXIgc3ogPSB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4obSwgMikubGVuZ3RoKCk7XHJcblxyXG5cdFx0dGhpcy54ID0gc3g7XHJcblx0XHR0aGlzLnkgPSBzeTtcclxuXHRcdHRoaXMueiA9IHN6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tTWF0cml4Q29sdW1uOiBmdW5jdGlvbiAobSwgaW5kZXgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkobS5lbGVtZW50cywgaW5kZXggKiA0KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZXF1YWxzOiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHJldHVybiAoKHYueCA9PT0gdGhpcy54KSAmJiAodi55ID09PSB0aGlzLnkpICYmICh2LnogPT09IHRoaXMueikpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHR0aGlzLnggPSBhcnJheVtvZmZzZXRdO1xyXG5cdFx0dGhpcy55ID0gYXJyYXlbb2Zmc2V0ICsgMV07XHJcblx0XHR0aGlzLnogPSBhcnJheVtvZmZzZXQgKyAyXTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAoYXJyYXkgPT09IHVuZGVmaW5lZCkgeyBhcnJheSA9IFtdOyB9XHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdGFycmF5W29mZnNldF0gPSB0aGlzLng7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxXSA9IHRoaXMueTtcclxuXHRcdGFycmF5W29mZnNldCArIDJdID0gdGhpcy56O1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChvZmZzZXQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKGluZGV4KTtcclxuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKGluZGV4KTtcclxuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKGluZGV4KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cclxuICogQGF1dGhvciB0c2Nod1xyXG4gKi9cclxuXHJcbnZhciBfdmVjdG9yJDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gTWF0cml4MygpIHtcclxuXHJcblx0dGhpcy5lbGVtZW50cyA9IFtcclxuXHJcblx0XHQxLCAwLCAwLFxyXG5cdFx0MCwgMSwgMCxcclxuXHRcdDAsIDAsIDFcclxuXHJcblx0XTtcclxuXHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC4nKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihNYXRyaXgzLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc01hdHJpeDM6IHRydWUsXHJcblxyXG5cdHNldDogZnVuY3Rpb24gKG4xMSwgbjEyLCBuMTMsIG4yMSwgbjIyLCBuMjMsIG4zMSwgbjMyLCBuMzMpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdID0gbjExOyB0ZVsxXSA9IG4yMTsgdGVbMl0gPSBuMzE7XHJcblx0XHR0ZVszXSA9IG4xMjsgdGVbNF0gPSBuMjI7IHRlWzVdID0gbjMyO1xyXG5cdFx0dGVbNl0gPSBuMTM7IHRlWzddID0gbjIzOyB0ZVs4XSA9IG4zMztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0aWRlbnRpdHk6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHJcblx0XHRcdDEsIDAsIDAsXHJcblx0XHRcdDAsIDEsIDAsXHJcblx0XHRcdDAsIDAsIDFcclxuXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmZyb21BcnJheSh0aGlzLmVsZW1lbnRzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR0ZVswXSA9IG1lWzBdOyB0ZVsxXSA9IG1lWzFdOyB0ZVsyXSA9IG1lWzJdO1xyXG5cdFx0dGVbM10gPSBtZVszXTsgdGVbNF0gPSBtZVs0XTsgdGVbNV0gPSBtZVs1XTtcclxuXHRcdHRlWzZdID0gbWVbNl07IHRlWzddID0gbWVbN107IHRlWzhdID0gbWVbOF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21NYXRyaXg0OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHRtZVswXSwgbWVbNF0sIG1lWzhdLFxyXG5cdFx0XHRtZVsxXSwgbWVbNV0sIG1lWzldLFxyXG5cdFx0XHRtZVsyXSwgbWVbNl0sIG1lWzEwXVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0X3ZlY3RvciQxLnggPSBhdHRyaWJ1dGUuZ2V0WChpKTtcclxuXHRcdFx0X3ZlY3RvciQxLnkgPSBhdHRyaWJ1dGUuZ2V0WShpKTtcclxuXHRcdFx0X3ZlY3RvciQxLnogPSBhdHRyaWJ1dGUuZ2V0WihpKTtcclxuXHJcblx0XHRcdF92ZWN0b3IkMS5hcHBseU1hdHJpeDModGhpcyk7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGUuc2V0WFlaKGksIF92ZWN0b3IkMS54LCBfdmVjdG9yJDEueSwgX3ZlY3RvciQxLnopO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYXR0cmlidXRlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseTogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKHRoaXMsIG0pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKG0sIHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHZhciBhZSA9IGEuZWxlbWVudHM7XHJcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR2YXIgYTExID0gYWVbMF0sIGExMiA9IGFlWzNdLCBhMTMgPSBhZVs2XTtcclxuXHRcdHZhciBhMjEgPSBhZVsxXSwgYTIyID0gYWVbNF0sIGEyMyA9IGFlWzddO1xyXG5cdFx0dmFyIGEzMSA9IGFlWzJdLCBhMzIgPSBhZVs1XSwgYTMzID0gYWVbOF07XHJcblxyXG5cdFx0dmFyIGIxMSA9IGJlWzBdLCBiMTIgPSBiZVszXSwgYjEzID0gYmVbNl07XHJcblx0XHR2YXIgYjIxID0gYmVbMV0sIGIyMiA9IGJlWzRdLCBiMjMgPSBiZVs3XTtcclxuXHRcdHZhciBiMzEgPSBiZVsyXSwgYjMyID0gYmVbNV0sIGIzMyA9IGJlWzhdO1xyXG5cclxuXHRcdHRlWzBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxO1xyXG5cdFx0dGVbM10gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzI7XHJcblx0XHR0ZVs2XSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMztcclxuXHJcblx0XHR0ZVsxXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcclxuXHRcdHRlWzRdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xyXG5cdFx0dGVbN10gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XHJcblxyXG5cdFx0dGVbMl0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzE7XHJcblx0XHR0ZVs1XSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMjtcclxuXHRcdHRlWzhdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdICo9IHM7IHRlWzNdICo9IHM7IHRlWzZdICo9IHM7XHJcblx0XHR0ZVsxXSAqPSBzOyB0ZVs0XSAqPSBzOyB0ZVs3XSAqPSBzO1xyXG5cdFx0dGVbMl0gKj0gczsgdGVbNV0gKj0gczsgdGVbOF0gKj0gcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHZhciBhID0gdGVbMF0sIGIgPSB0ZVsxXSwgYyA9IHRlWzJdLFxyXG5cdFx0XHRkID0gdGVbM10sIGUgPSB0ZVs0XSwgZiA9IHRlWzVdLFxyXG5cdFx0XHRnID0gdGVbNl0sIGggPSB0ZVs3XSwgaSA9IHRlWzhdO1xyXG5cclxuXHRcdHJldHVybiBhICogZSAqIGkgLSBhICogZiAqIGggLSBiICogZCAqIGkgKyBiICogZiAqIGcgKyBjICogZCAqIGggLSBjICogZSAqIGc7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEludmVyc2U6IGZ1bmN0aW9uIChtYXRyaXgsIHRocm93T25EZWdlbmVyYXRlKSB7XHJcblxyXG5cdFx0aWYgKG1hdHJpeCAmJiBtYXRyaXguaXNNYXRyaXg0KSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBubyBsb25nZXIgdGFrZXMgYSBNYXRyaXg0IGFyZ3VtZW50LlwiKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG1lID0gbWF0cml4LmVsZW1lbnRzLFxyXG5cdFx0XHR0ZSA9IHRoaXMuZWxlbWVudHMsXHJcblxyXG5cdFx0XHRuMTEgPSBtZVswXSwgbjIxID0gbWVbMV0sIG4zMSA9IG1lWzJdLFxyXG5cdFx0XHRuMTIgPSBtZVszXSwgbjIyID0gbWVbNF0sIG4zMiA9IG1lWzVdLFxyXG5cdFx0XHRuMTMgPSBtZVs2XSwgbjIzID0gbWVbN10sIG4zMyA9IG1lWzhdLFxyXG5cclxuXHRcdFx0dDExID0gbjMzICogbjIyIC0gbjMyICogbjIzLFxyXG5cdFx0XHR0MTIgPSBuMzIgKiBuMTMgLSBuMzMgKiBuMTIsXHJcblx0XHRcdHQxMyA9IG4yMyAqIG4xMiAtIG4yMiAqIG4xMyxcclxuXHJcblx0XHRcdGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMztcclxuXHJcblx0XHRpZiAoZGV0ID09PSAwKSB7XHJcblxyXG5cdFx0XHR2YXIgbXNnID0gXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIjtcclxuXHJcblx0XHRcdGlmICh0aHJvd09uRGVnZW5lcmF0ZSA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IobXNnKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuaWRlbnRpdHkoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRldEludiA9IDEgLyBkZXQ7XHJcblxyXG5cdFx0dGVbMF0gPSB0MTEgKiBkZXRJbnY7XHJcblx0XHR0ZVsxXSA9IChuMzEgKiBuMjMgLSBuMzMgKiBuMjEpICogZGV0SW52O1xyXG5cdFx0dGVbMl0gPSAobjMyICogbjIxIC0gbjMxICogbjIyKSAqIGRldEludjtcclxuXHJcblx0XHR0ZVszXSA9IHQxMiAqIGRldEludjtcclxuXHRcdHRlWzRdID0gKG4zMyAqIG4xMSAtIG4zMSAqIG4xMykgKiBkZXRJbnY7XHJcblx0XHR0ZVs1XSA9IChuMzEgKiBuMTIgLSBuMzIgKiBuMTEpICogZGV0SW52O1xyXG5cclxuXHRcdHRlWzZdID0gdDEzICogZGV0SW52O1xyXG5cdFx0dGVbN10gPSAobjIxICogbjEzIC0gbjIzICogbjExKSAqIGRldEludjtcclxuXHRcdHRlWzhdID0gKG4yMiAqIG4xMSAtIG4yMSAqIG4xMikgKiBkZXRJbnY7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zcG9zZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB0bXAsIG0gPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRtcCA9IG1bMV07IG1bMV0gPSBtWzNdOyBtWzNdID0gdG1wO1xyXG5cdFx0dG1wID0gbVsyXTsgbVsyXSA9IG1bNl07IG1bNl0gPSB0bXA7XHJcblx0XHR0bXAgPSBtWzVdOyBtWzVdID0gbVs3XTsgbVs3XSA9IHRtcDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0Tm9ybWFsTWF0cml4OiBmdW5jdGlvbiAobWF0cml4NCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KG1hdHJpeDQpLmdldEludmVyc2UodGhpcykudHJhbnNwb3NlKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zcG9zZUludG9BcnJheTogZnVuY3Rpb24gKHIpIHtcclxuXHJcblx0XHR2YXIgbSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0clswXSA9IG1bMF07XHJcblx0XHRyWzFdID0gbVszXTtcclxuXHRcdHJbMl0gPSBtWzZdO1xyXG5cdFx0clszXSA9IG1bMV07XHJcblx0XHRyWzRdID0gbVs0XTtcclxuXHRcdHJbNV0gPSBtWzddO1xyXG5cdFx0cls2XSA9IG1bMl07XHJcblx0XHRyWzddID0gbVs1XTtcclxuXHRcdHJbOF0gPSBtWzhdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRVdlRyYW5zZm9ybTogZnVuY3Rpb24gKHR4LCB0eSwgc3gsIHN5LCByb3RhdGlvbiwgY3gsIGN5KSB7XHJcblxyXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyhyb3RhdGlvbik7XHJcblx0XHR2YXIgcyA9IE1hdGguc2luKHJvdGF0aW9uKTtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHRcdFx0c3ggKiBjLCBzeCAqIHMsIC0gc3ggKiAoYyAqIGN4ICsgcyAqIGN5KSArIGN4ICsgdHgsXHJcblx0XHRcdC0gc3kgKiBzLCBzeSAqIGMsIC0gc3kgKiAoLSBzICogY3ggKyBjICogY3kpICsgY3kgKyB0eSxcclxuXHRcdFx0MCwgMCwgMVxyXG5cdFx0KTtcclxuXHJcblx0fSxcclxuXHJcblx0c2NhbGU6IGZ1bmN0aW9uIChzeCwgc3kpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdICo9IHN4OyB0ZVszXSAqPSBzeDsgdGVbNl0gKj0gc3g7XHJcblx0XHR0ZVsxXSAqPSBzeTsgdGVbNF0gKj0gc3k7IHRlWzddICo9IHN5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGU6IGZ1bmN0aW9uICh0aGV0YSkge1xyXG5cclxuXHRcdHZhciBjID0gTWF0aC5jb3ModGhldGEpO1xyXG5cdFx0dmFyIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcblxyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR2YXIgYTExID0gdGVbMF0sIGExMiA9IHRlWzNdLCBhMTMgPSB0ZVs2XTtcclxuXHRcdHZhciBhMjEgPSB0ZVsxXSwgYTIyID0gdGVbNF0sIGEyMyA9IHRlWzddO1xyXG5cclxuXHRcdHRlWzBdID0gYyAqIGExMSArIHMgKiBhMjE7XHJcblx0XHR0ZVszXSA9IGMgKiBhMTIgKyBzICogYTIyO1xyXG5cdFx0dGVbNl0gPSBjICogYTEzICsgcyAqIGEyMztcclxuXHJcblx0XHR0ZVsxXSA9IC0gcyAqIGExMSArIGMgKiBhMjE7XHJcblx0XHR0ZVs0XSA9IC0gcyAqIGExMiArIGMgKiBhMjI7XHJcblx0XHR0ZVs3XSA9IC0gcyAqIGExMyArIGMgKiBhMjM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKHR4LCB0eSkge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dGVbMF0gKz0gdHggKiB0ZVsyXTsgdGVbM10gKz0gdHggKiB0ZVs1XTsgdGVbNl0gKz0gdHggKiB0ZVs4XTtcclxuXHRcdHRlWzFdICs9IHR5ICogdGVbMl07IHRlWzRdICs9IHR5ICogdGVbNV07IHRlWzddICs9IHR5ICogdGVbOF07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKG1hdHJpeCkge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblx0XHR2YXIgbWUgPSBtYXRyaXguZWxlbWVudHM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA5OyBpKyspIHtcclxuXHJcblx0XHRcdGlmICh0ZVtpXSAhPT0gbWVbaV0pIHsgcmV0dXJuIGZhbHNlOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDk7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5lbGVtZW50c1tpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAoYXJyYXkgPT09IHVuZGVmaW5lZCkgeyBhcnJheSA9IFtdOyB9XHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0XSA9IHRlWzBdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMV0gPSB0ZVsxXTtcclxuXHRcdGFycmF5W29mZnNldCArIDJdID0gdGVbMl07XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgM10gPSB0ZVszXTtcclxuXHRcdGFycmF5W29mZnNldCArIDRdID0gdGVbNF07XHJcblx0XHRhcnJheVtvZmZzZXQgKyA1XSA9IHRlWzVdO1xyXG5cclxuXHRcdGFycmF5W29mZnNldCArIDZdID0gdGVbNl07XHJcblx0XHRhcnJheVtvZmZzZXQgKyA3XSA9IHRlWzddO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgOF0gPSB0ZVs4XTtcclxuXHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cclxuICovXHJcblxyXG52YXIgX2NhbnZhcztcclxuXHJcbnZhciBJbWFnZVV0aWxzID0ge1xyXG5cclxuXHRnZXREYXRhVVJMOiBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuXHJcblx0XHR2YXIgY2FudmFzO1xyXG5cclxuXHRcdGlmICh0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcblx0XHRcdHJldHVybiBpbWFnZS5zcmM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XHJcblxyXG5cdFx0XHRjYW52YXMgPSBpbWFnZTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0aWYgKF9jYW52YXMgPT09IHVuZGVmaW5lZCkgeyBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycpOyB9XHJcblxyXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcblx0XHRcdF9jYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG5cclxuXHRcdFx0dmFyIGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG5cdFx0XHRpZiAoaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGEpIHtcclxuXHJcblx0XHRcdFx0Y29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2UsIDAsIDApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y2FudmFzID0gX2NhbnZhcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGNhbnZhcy53aWR0aCA+IDIwNDggfHwgY2FudmFzLmhlaWdodCA+IDIwNDgpIHtcclxuXHJcblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgMC42KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXHJcbiAqL1xyXG5cclxudmFyIHRleHR1cmVJZCA9IDA7XHJcblxyXG5mdW5jdGlvbiBUZXh0dXJlKGltYWdlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nKSB7XHJcblxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWQnLCB7IHZhbHVlOiB0ZXh0dXJlSWQrKyB9KTtcclxuXHJcblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdHRoaXMubmFtZSA9ICcnO1xyXG5cclxuXHR0aGlzLmltYWdlID0gaW1hZ2UgIT09IHVuZGVmaW5lZCA/IGltYWdlIDogVGV4dHVyZS5ERUZBVUxUX0lNQUdFO1xyXG5cdHRoaXMubWlwbWFwcyA9IFtdO1xyXG5cclxuXHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc7XHJcblxyXG5cdHRoaXMud3JhcFMgPSB3cmFwUyAhPT0gdW5kZWZpbmVkID8gd3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xyXG5cdHRoaXMud3JhcFQgPSB3cmFwVCAhPT0gdW5kZWZpbmVkID8gd3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xyXG5cclxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xyXG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XHJcblxyXG5cdHRoaXMuYW5pc290cm9weSA9IGFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCA/IGFuaXNvdHJvcHkgOiAxO1xyXG5cclxuXHR0aGlzLmZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogUkdCQUZvcm1hdDtcclxuXHR0aGlzLnR5cGUgPSB0eXBlICE9PSB1bmRlZmluZWQgPyB0eXBlIDogVW5zaWduZWRCeXRlVHlwZTtcclxuXHJcblx0dGhpcy5vZmZzZXQgPSBuZXcgVmVjdG9yMigwLCAwKTtcclxuXHR0aGlzLnJlcGVhdCA9IG5ldyBWZWN0b3IyKDEsIDEpO1xyXG5cdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoMCwgMCk7XHJcblx0dGhpcy5yb3RhdGlvbiA9IDA7XHJcblxyXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XHJcblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4MygpO1xyXG5cclxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHRydWU7XHJcblx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gZmFsc2U7XHJcblx0dGhpcy5mbGlwWSA9IHRydWU7XHJcblx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSA0O1x0Ly8gdmFsaWQgdmFsdWVzOiAxLCAyLCA0LCA4IChzZWUgaHR0cDovL3d3dy5raHJvbm9zLm9yZy9vcGVuZ2xlcy9zZGsvZG9jcy9tYW4veGh0bWwvZ2xQaXhlbFN0b3JlaS54bWwpXHJcblxyXG5cdC8vIFZhbHVlcyBvZiBlbmNvZGluZyAhPT0gVEhSRUUuTGluZWFyRW5jb2Rpbmcgb25seSBzdXBwb3J0ZWQgb24gbWFwLCBlbnZNYXAgYW5kIGVtaXNzaXZlTWFwLlxyXG5cdC8vXHJcblx0Ly8gQWxzbyBjaGFuZ2luZyB0aGUgZW5jb2RpbmcgYWZ0ZXIgYWxyZWFkeSB1c2VkIGJ5IGEgTWF0ZXJpYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBtYWtlIHRoZSBNYXRlcmlhbFxyXG5cdC8vIHVwZGF0ZS4gWW91IG5lZWQgdG8gZXhwbGljaXRseSBjYWxsIE1hdGVyaWFsLm5lZWRzVXBkYXRlIHRvIHRyaWdnZXIgaXQgdG8gcmVjb21waWxlLlxyXG5cdHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZyAhPT0gdW5kZWZpbmVkID8gZW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcclxuXHJcblx0dGhpcy52ZXJzaW9uID0gMDtcclxuXHR0aGlzLm9uVXBkYXRlID0gbnVsbDtcclxuXHJcbn1cclxuXHJcblRleHR1cmUuREVGQVVMVF9JTUFHRSA9IHVuZGVmaW5lZDtcclxuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7XHJcblxyXG5UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShFdmVudERpc3BhdGNoZXIucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogVGV4dHVyZSxcclxuXHJcblx0aXNUZXh0dXJlOiB0cnVlLFxyXG5cclxuXHR1cGRhdGVNYXRyaXg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLm1hdHJpeC5zZXRVdlRyYW5zZm9ybSh0aGlzLm9mZnNldC54LCB0aGlzLm9mZnNldC55LCB0aGlzLnJlcGVhdC54LCB0aGlzLnJlcGVhdC55LCB0aGlzLnJvdGF0aW9uLCB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XHJcblxyXG5cdFx0dGhpcy5pbWFnZSA9IHNvdXJjZS5pbWFnZTtcclxuXHRcdHRoaXMubWlwbWFwcyA9IHNvdXJjZS5taXBtYXBzLnNsaWNlKDApO1xyXG5cclxuXHRcdHRoaXMubWFwcGluZyA9IHNvdXJjZS5tYXBwaW5nO1xyXG5cclxuXHRcdHRoaXMud3JhcFMgPSBzb3VyY2Uud3JhcFM7XHJcblx0XHR0aGlzLndyYXBUID0gc291cmNlLndyYXBUO1xyXG5cclxuXHRcdHRoaXMubWFnRmlsdGVyID0gc291cmNlLm1hZ0ZpbHRlcjtcclxuXHRcdHRoaXMubWluRmlsdGVyID0gc291cmNlLm1pbkZpbHRlcjtcclxuXHJcblx0XHR0aGlzLmFuaXNvdHJvcHkgPSBzb3VyY2UuYW5pc290cm9weTtcclxuXHJcblx0XHR0aGlzLmZvcm1hdCA9IHNvdXJjZS5mb3JtYXQ7XHJcblx0XHR0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTtcclxuXHJcblx0XHR0aGlzLm9mZnNldC5jb3B5KHNvdXJjZS5vZmZzZXQpO1xyXG5cdFx0dGhpcy5yZXBlYXQuY29weShzb3VyY2UucmVwZWF0KTtcclxuXHRcdHRoaXMuY2VudGVyLmNvcHkoc291cmNlLmNlbnRlcik7XHJcblx0XHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xyXG5cclxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xyXG5cdFx0dGhpcy5tYXRyaXguY29weShzb3VyY2UubWF0cml4KTtcclxuXHJcblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHNvdXJjZS5nZW5lcmF0ZU1pcG1hcHM7XHJcblx0XHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbHlBbHBoYTtcclxuXHRcdHRoaXMuZmxpcFkgPSBzb3VyY2UuZmxpcFk7XHJcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IHNvdXJjZS51bnBhY2tBbGlnbm1lbnQ7XHJcblx0XHR0aGlzLmVuY29kaW5nID0gc291cmNlLmVuY29kaW5nO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGlzUm9vdE9iamVjdCA9IChtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnKTtcclxuXHJcblx0XHRpZiAoIWlzUm9vdE9iamVjdCAmJiBtZXRhLnRleHR1cmVzW3RoaXMudXVpZF0gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIG1ldGEudGV4dHVyZXNbdGhpcy51dWlkXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG91dHB1dCA9IHtcclxuXHJcblx0XHRcdG1ldGFkYXRhOiB7XHJcblx0XHRcdFx0dmVyc2lvbjogNC41LFxyXG5cdFx0XHRcdHR5cGU6ICdUZXh0dXJlJyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdUZXh0dXJlLnRvSlNPTidcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHV1aWQ6IHRoaXMudXVpZCxcclxuXHRcdFx0bmFtZTogdGhpcy5uYW1lLFxyXG5cclxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxyXG5cclxuXHRcdFx0cmVwZWF0OiBbdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueV0sXHJcblx0XHRcdG9mZnNldDogW3RoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnldLFxyXG5cdFx0XHRjZW50ZXI6IFt0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55XSxcclxuXHRcdFx0cm90YXRpb246IHRoaXMucm90YXRpb24sXHJcblxyXG5cdFx0XHR3cmFwOiBbdGhpcy53cmFwUywgdGhpcy53cmFwVF0sXHJcblxyXG5cdFx0XHRmb3JtYXQ6IHRoaXMuZm9ybWF0LFxyXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXHJcblx0XHRcdGVuY29kaW5nOiB0aGlzLmVuY29kaW5nLFxyXG5cclxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcclxuXHRcdFx0bWFnRmlsdGVyOiB0aGlzLm1hZ0ZpbHRlcixcclxuXHRcdFx0YW5pc290cm9weTogdGhpcy5hbmlzb3Ryb3B5LFxyXG5cclxuXHRcdFx0ZmxpcFk6IHRoaXMuZmxpcFksXHJcblxyXG5cdFx0XHRwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsXHJcblx0XHRcdHVucGFja0FsaWdubWVudDogdGhpcy51bnBhY2tBbGlnbm1lbnRcclxuXHJcblx0XHR9O1xyXG5cclxuXHRcdGlmICh0aGlzLmltYWdlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdC8vIFRPRE86IE1vdmUgdG8gVEhSRUUuSW1hZ2VcclxuXHJcblx0XHRcdHZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7XHJcblxyXG5cdFx0XHRpZiAoaW1hZ2UudXVpZCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGltYWdlLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTsgLy8gVUdIXHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIWlzUm9vdE9iamVjdCAmJiBtZXRhLmltYWdlc1tpbWFnZS51dWlkXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHZhciB1cmw7XHJcblxyXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGltYWdlKSkge1xyXG5cclxuXHRcdFx0XHRcdC8vIHByb2Nlc3MgYXJyYXkgb2YgaW1hZ2VzIGUuZy4gQ3ViZVRleHR1cmVcclxuXHJcblx0XHRcdFx0XHR1cmwgPSBbXTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGltYWdlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0dXJsLnB1c2goSW1hZ2VVdGlscy5nZXREYXRhVVJMKGltYWdlW2ldKSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIHByb2Nlc3Mgc2luZ2xlIGltYWdlXHJcblxyXG5cdFx0XHRcdFx0dXJsID0gSW1hZ2VVdGlscy5nZXREYXRhVVJMKGltYWdlKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRtZXRhLmltYWdlc1tpbWFnZS51dWlkXSA9IHtcclxuXHRcdFx0XHRcdHV1aWQ6IGltYWdlLnV1aWQsXHJcblx0XHRcdFx0XHR1cmw6IHVybFxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRvdXRwdXQuaW1hZ2UgPSBpbWFnZS51dWlkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWlzUm9vdE9iamVjdCkge1xyXG5cclxuXHRcdFx0bWV0YS50ZXh0dXJlc1t0aGlzLnV1aWRdID0gb3V0cHV0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ2Rpc3Bvc2UnIH0pO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2Zvcm1VdjogZnVuY3Rpb24gKHV2KSB7XHJcblxyXG5cdFx0aWYgKHRoaXMubWFwcGluZyAhPT0gVVZNYXBwaW5nKSB7IHJldHVybiB1djsgfVxyXG5cclxuXHRcdHV2LmFwcGx5TWF0cml4Myh0aGlzLm1hdHJpeCk7XHJcblxyXG5cdFx0aWYgKHV2LnggPCAwIHx8IHV2LnggPiAxKSB7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKHRoaXMud3JhcFMpIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBSZXBlYXRXcmFwcGluZzpcclxuXHJcblx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IodXYueCk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxyXG5cclxuXHRcdFx0XHRcdHV2LnggPSB1di54IDwgMCA/IDAgOiAxO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgTWlycm9yZWRSZXBlYXRXcmFwcGluZzpcclxuXHJcblx0XHRcdFx0XHRpZiAoTWF0aC5hYnMoTWF0aC5mbG9vcih1di54KSAlIDIpID09PSAxKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR1di54ID0gTWF0aC5jZWlsKHV2LngpIC0gdXYueDtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0dXYueCA9IHV2LnggLSBNYXRoLmZsb29yKHV2LngpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodXYueSA8IDAgfHwgdXYueSA+IDEpIHtcclxuXHJcblx0XHRcdHN3aXRjaCAodGhpcy53cmFwVCkge1xyXG5cclxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxyXG5cclxuXHRcdFx0XHRcdHV2LnkgPSB1di55IC0gTWF0aC5mbG9vcih1di55KTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XHJcblxyXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxyXG5cclxuXHRcdFx0XHRcdGlmIChNYXRoLmFicyhNYXRoLmZsb29yKHV2LnkpICUgMikgPT09IDEpIHtcclxuXHJcblx0XHRcdFx0XHRcdHV2LnkgPSBNYXRoLmNlaWwodXYueSkgLSB1di55O1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHR1di55ID0gdXYueSAtIE1hdGguZmxvb3IodXYueSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmZsaXBZKSB7XHJcblxyXG5cdFx0XHR1di55ID0gMSAtIHV2Lnk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1djtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dHVyZS5wcm90b3R5cGUsIFwibmVlZHNVcGRhdGVcIiwge1xyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdGlmICh2YWx1ZSA9PT0gdHJ1ZSkgeyB0aGlzLnZlcnNpb24rKzsgfVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHN1cGVyZWdnYmVydCAvIGh0dHA6Ly93d3cucGF1bGJydW50LmNvLnVrL1xyXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGVncmFldGhlciAvIGh0dHA6Ly9lZ3JhZXRoZXIuY29tL1xyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICovXHJcblxyXG5mdW5jdGlvbiBWZWN0b3I0KHgsIHksIHosIHcpIHtcclxuXHJcblx0dGhpcy54ID0geCB8fCAwO1xyXG5cdHRoaXMueSA9IHkgfHwgMDtcclxuXHR0aGlzLnogPSB6IHx8IDA7XHJcblx0dGhpcy53ID0gKHcgIT09IHVuZGVmaW5lZCkgPyB3IDogMTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFZlY3RvcjQucHJvdG90eXBlLCB7XHJcblxyXG5cdFwid2lkdGhcIjoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuejtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHR0aGlzLnogPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdFwiaGVpZ2h0XCI6IHtcclxuXHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLnc7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy53ID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oVmVjdG9yNC5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNWZWN0b3I0OiB0cnVlLFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XHJcblxyXG5cdFx0dGhpcy54ID0geDtcclxuXHRcdHRoaXMueSA9IHk7XHJcblx0XHR0aGlzLnogPSB6O1xyXG5cdFx0dGhpcy53ID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xyXG5cdFx0dGhpcy55ID0gc2NhbGFyO1xyXG5cdFx0dGhpcy56ID0gc2NhbGFyO1xyXG5cdFx0dGhpcy53ID0gc2NhbGFyO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRYOiBmdW5jdGlvbiAoeCkge1xyXG5cclxuXHRcdHRoaXMueCA9IHg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFk6IGZ1bmN0aW9uICh5KSB7XHJcblxyXG5cdFx0dGhpcy55ID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WjogZnVuY3Rpb24gKHopIHtcclxuXHJcblx0XHR0aGlzLnogPSB6O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRXOiBmdW5jdGlvbiAodykge1xyXG5cclxuXHRcdHRoaXMudyA9IHc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xyXG5cclxuXHRcdHN3aXRjaCAoaW5kZXgpIHtcclxuXHJcblx0XHRcdGNhc2UgMDogdGhpcy54ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcclxuXHRcdFx0Y2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XHJcblx0XHRcdGNhc2UgMzogdGhpcy53ID0gdmFsdWU7IGJyZWFrO1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0c3dpdGNoIChpbmRleCkge1xyXG5cclxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xyXG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XHJcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcclxuXHRcdFx0Y2FzZSAzOiByZXR1cm4gdGhpcy53O1xyXG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dGhpcy54ID0gdi54O1xyXG5cdFx0dGhpcy55ID0gdi55O1xyXG5cdFx0dGhpcy56ID0gdi56O1xyXG5cdFx0dGhpcy53ID0gKHYudyAhPT0gdW5kZWZpbmVkKSA/IHYudyA6IDE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKHYsIHcpIHtcclxuXHJcblx0XHRpZiAodyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkVmVjdG9ycyh2LCB3KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy54ICs9IHYueDtcclxuXHRcdHRoaXMueSArPSB2Lnk7XHJcblx0XHR0aGlzLnogKz0gdi56O1xyXG5cdFx0dGhpcy53ICs9IHYudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAocykge1xyXG5cclxuXHRcdHRoaXMueCArPSBzO1xyXG5cdFx0dGhpcy55ICs9IHM7XHJcblx0XHR0aGlzLnogKz0gcztcclxuXHRcdHRoaXMudyArPSBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcclxuXHRcdHRoaXMueSA9IGEueSArIGIueTtcclxuXHRcdHRoaXMueiA9IGEueiArIGIuejtcclxuXHRcdHRoaXMudyA9IGEudyArIGIudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAodiwgcykge1xyXG5cclxuXHRcdHRoaXMueCArPSB2LnggKiBzO1xyXG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XHJcblx0XHR0aGlzLnogKz0gdi56ICogcztcclxuXHRcdHRoaXMudyArPSB2LncgKiBzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzdWI6IGZ1bmN0aW9uICh2LCB3KSB7XHJcblxyXG5cdFx0aWYgKHcgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3I0OiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnModiwgdyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMueCAtPSB2Lng7XHJcblx0XHR0aGlzLnkgLT0gdi55O1xyXG5cdFx0dGhpcy56IC09IHYuejtcclxuXHRcdHRoaXMudyAtPSB2Lnc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnggLT0gcztcclxuXHRcdHRoaXMueSAtPSBzO1xyXG5cdFx0dGhpcy56IC09IHM7XHJcblx0XHR0aGlzLncgLT0gcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c3ViVmVjdG9yczogZnVuY3Rpb24gKGEsIGIpIHtcclxuXHJcblx0XHR0aGlzLnggPSBhLnggLSBiLng7XHJcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XHJcblx0XHR0aGlzLnogPSBhLnogLSBiLno7XHJcblx0XHR0aGlzLncgPSBhLncgLSBiLnc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcclxuXHRcdHRoaXMueSAqPSBzY2FsYXI7XHJcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xyXG5cdFx0dGhpcy53ICo9IHNjYWxhcjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciB4ID0gdGhpcy54LCB5ID0gdGhpcy55LCB6ID0gdGhpcy56LCB3ID0gdGhpcy53O1xyXG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRoaXMueCA9IGVbMF0gKiB4ICsgZVs0XSAqIHkgKyBlWzhdICogeiArIGVbMTJdICogdztcclxuXHRcdHRoaXMueSA9IGVbMV0gKiB4ICsgZVs1XSAqIHkgKyBlWzldICogeiArIGVbMTNdICogdztcclxuXHRcdHRoaXMueiA9IGVbMl0gKiB4ICsgZVs2XSAqIHkgKyBlWzEwXSAqIHogKyBlWzE0XSAqIHc7XHJcblx0XHR0aGlzLncgPSBlWzNdICogeCArIGVbN10gKiB5ICsgZVsxMV0gKiB6ICsgZVsxNV0gKiB3O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uIChzY2FsYXIpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxIC8gc2NhbGFyKTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uIChxKSB7XHJcblxyXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL3F1YXRlcm5pb25Ub0FuZ2xlL2luZGV4Lmh0bVxyXG5cclxuXHRcdC8vIHEgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyhxLncpO1xyXG5cclxuXHRcdHZhciBzID0gTWF0aC5zcXJ0KDEgLSBxLncgKiBxLncpO1xyXG5cclxuXHRcdGlmIChzIDwgMC4wMDAxKSB7XHJcblxyXG5cdFx0XHR0aGlzLnggPSAxO1xyXG5cdFx0XHR0aGlzLnkgPSAwO1xyXG5cdFx0XHR0aGlzLnogPSAwO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLnggPSBxLnggLyBzO1xyXG5cdFx0XHR0aGlzLnkgPSBxLnkgLyBzO1xyXG5cdFx0XHR0aGlzLnogPSBxLnogLyBzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb0FuZ2xlL2luZGV4Lmh0bVxyXG5cclxuXHRcdC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXHJcblxyXG5cdFx0dmFyIGFuZ2xlLCB4LCB5LCB6LFx0XHQvLyB2YXJpYWJsZXMgZm9yIHJlc3VsdFxyXG5cdFx0XHRlcHNpbG9uID0gMC4wMSxcdFx0Ly8gbWFyZ2luIHRvIGFsbG93IGZvciByb3VuZGluZyBlcnJvcnNcclxuXHRcdFx0ZXBzaWxvbjIgPSAwLjEsXHRcdC8vIG1hcmdpbiB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIDAgYW5kIDE4MCBkZWdyZWVzXHJcblxyXG5cdFx0XHR0ZSA9IG0uZWxlbWVudHMsXHJcblxyXG5cdFx0XHRtMTEgPSB0ZVswXSwgbTEyID0gdGVbNF0sIG0xMyA9IHRlWzhdLFxyXG5cdFx0XHRtMjEgPSB0ZVsxXSwgbTIyID0gdGVbNV0sIG0yMyA9IHRlWzldLFxyXG5cdFx0XHRtMzEgPSB0ZVsyXSwgbTMyID0gdGVbNl0sIG0zMyA9IHRlWzEwXTtcclxuXHJcblx0XHRpZiAoKE1hdGguYWJzKG0xMiAtIG0yMSkgPCBlcHNpbG9uKSAmJlxyXG5cdFx0XHQoTWF0aC5hYnMobTEzIC0gbTMxKSA8IGVwc2lsb24pICYmXHJcblx0XHRcdChNYXRoLmFicyhtMjMgLSBtMzIpIDwgZXBzaWxvbikpIHtcclxuXHJcblx0XHRcdC8vIHNpbmd1bGFyaXR5IGZvdW5kXHJcblx0XHRcdC8vIGZpcnN0IGNoZWNrIGZvciBpZGVudGl0eSBtYXRyaXggd2hpY2ggbXVzdCBoYXZlICsxIGZvciBhbGwgdGVybXNcclxuXHRcdFx0Ly8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtc1xyXG5cclxuXHRcdFx0aWYgKChNYXRoLmFicyhtMTIgKyBtMjEpIDwgZXBzaWxvbjIpICYmXHJcblx0XHRcdFx0KE1hdGguYWJzKG0xMyArIG0zMSkgPCBlcHNpbG9uMikgJiZcclxuXHRcdFx0XHQoTWF0aC5hYnMobTIzICsgbTMyKSA8IGVwc2lsb24yKSAmJlxyXG5cdFx0XHRcdChNYXRoLmFicyhtMTEgKyBtMjIgKyBtMzMgLSAzKSA8IGVwc2lsb24yKSkge1xyXG5cclxuXHRcdFx0XHQvLyB0aGlzIHNpbmd1bGFyaXR5IGlzIGlkZW50aXR5IG1hdHJpeCBzbyBhbmdsZSA9IDBcclxuXHJcblx0XHRcdFx0dGhpcy5zZXQoMSwgMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0aGlzOyAvLyB6ZXJvIGFuZ2xlLCBhcmJpdHJhcnkgYXhpc1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHRoaXMgc2luZ3VsYXJpdHkgaXMgYW5nbGUgPSAxODBcclxuXHJcblx0XHRcdGFuZ2xlID0gTWF0aC5QSTtcclxuXHJcblx0XHRcdHZhciB4eCA9IChtMTEgKyAxKSAvIDI7XHJcblx0XHRcdHZhciB5eSA9IChtMjIgKyAxKSAvIDI7XHJcblx0XHRcdHZhciB6eiA9IChtMzMgKyAxKSAvIDI7XHJcblx0XHRcdHZhciB4eSA9IChtMTIgKyBtMjEpIC8gNDtcclxuXHRcdFx0dmFyIHh6ID0gKG0xMyArIG0zMSkgLyA0O1xyXG5cdFx0XHR2YXIgeXogPSAobTIzICsgbTMyKSAvIDQ7XHJcblxyXG5cdFx0XHRpZiAoKHh4ID4geXkpICYmICh4eCA+IHp6KSkge1xyXG5cclxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxyXG5cclxuXHRcdFx0XHRpZiAoeHggPCBlcHNpbG9uKSB7XHJcblxyXG5cdFx0XHRcdFx0eCA9IDA7XHJcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR6ID0gMC43MDcxMDY3ODE7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0eCA9IE1hdGguc3FydCh4eCk7XHJcblx0XHRcdFx0XHR5ID0geHkgLyB4O1xyXG5cdFx0XHRcdFx0eiA9IHh6IC8geDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICh5eSA+IHp6KSB7XHJcblxyXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXHJcblxyXG5cdFx0XHRcdGlmICh5eSA8IGVwc2lsb24pIHtcclxuXHJcblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR5ID0gMDtcclxuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR5ID0gTWF0aC5zcXJ0KHl5KTtcclxuXHRcdFx0XHRcdHggPSB4eSAvIHk7XHJcblx0XHRcdFx0XHR6ID0geXogLyB5O1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBtMzMgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybSBzbyBiYXNlIHJlc3VsdCBvbiB0aGlzXHJcblxyXG5cdFx0XHRcdGlmICh6eiA8IGVwc2lsb24pIHtcclxuXHJcblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR5ID0gMC43MDcxMDY3ODE7XHJcblx0XHRcdFx0XHR6ID0gMDtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR6ID0gTWF0aC5zcXJ0KHp6KTtcclxuXHRcdFx0XHRcdHggPSB4eiAvIHo7XHJcblx0XHRcdFx0XHR5ID0geXogLyB6O1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLnNldCh4LCB5LCB6LCBhbmdsZSk7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb25cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYXMgd2UgaGF2ZSByZWFjaGVkIGhlcmUgdGhlcmUgYXJlIG5vIHNpbmd1bGFyaXRpZXMgc28gd2UgY2FuIGhhbmRsZSBub3JtYWxseVxyXG5cclxuXHRcdHZhciBzID0gTWF0aC5zcXJ0KChtMzIgLSBtMjMpICogKG0zMiAtIG0yMykgK1xyXG5cdFx0XHQobTEzIC0gbTMxKSAqIChtMTMgLSBtMzEpICtcclxuXHRcdFx0KG0yMSAtIG0xMikgKiAobTIxIC0gbTEyKSk7IC8vIHVzZWQgdG8gbm9ybWFsaXplXHJcblxyXG5cdFx0aWYgKE1hdGguYWJzKHMpIDwgMC4wMDEpIHsgcyA9IDE7IH1cclxuXHJcblx0XHQvLyBwcmV2ZW50IGRpdmlkZSBieSB6ZXJvLCBzaG91bGQgbm90IGhhcHBlbiBpZiBtYXRyaXggaXMgb3J0aG9nb25hbCBhbmQgc2hvdWxkIGJlXHJcblx0XHQvLyBjYXVnaHQgYnkgc2luZ3VsYXJpdHkgdGVzdCBhYm92ZSwgYnV0IEkndmUgbGVmdCBpdCBpbiBqdXN0IGluIGNhc2VcclxuXHJcblx0XHR0aGlzLnggPSAobTMyIC0gbTIzKSAvIHM7XHJcblx0XHR0aGlzLnkgPSAobTEzIC0gbTMxKSAvIHM7XHJcblx0XHR0aGlzLnogPSAobTIxIC0gbTEyKSAvIHM7XHJcblx0XHR0aGlzLncgPSBNYXRoLmFjb3MoKG0xMSArIG0yMiArIG0zMyAtIDEpIC8gMik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1pbjogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1pbih0aGlzLngsIHYueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1pbih0aGlzLnksIHYueSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLm1pbih0aGlzLnosIHYueik7XHJcblx0XHR0aGlzLncgPSBNYXRoLm1pbih0aGlzLncsIHYudyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1heDogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCh0aGlzLngsIHYueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heCh0aGlzLnksIHYueSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLm1heCh0aGlzLnosIHYueik7XHJcblx0XHR0aGlzLncgPSBNYXRoLm1heCh0aGlzLncsIHYudyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsYW1wOiBmdW5jdGlvbiAobWluLCBtYXgpIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxyXG5cclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KG1pbi54LCBNYXRoLm1pbihtYXgueCwgdGhpcy54KSk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heChtaW4ueSwgTWF0aC5taW4obWF4LnksIHRoaXMueSkpO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5tYXgobWluLnosIE1hdGgubWluKG1heC56LCB0aGlzLnopKTtcclxuXHRcdHRoaXMudyA9IE1hdGgubWF4KG1pbi53LCBNYXRoLm1pbihtYXgudywgdGhpcy53KSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAobWluVmFsLCBtYXhWYWwpIHtcclxuXHJcblx0XHR0aGlzLnggPSBNYXRoLm1heChtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy54KSk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heChtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy55KSk7XHJcblx0XHR0aGlzLnogPSBNYXRoLm1heChtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy56KSk7XHJcblx0XHR0aGlzLncgPSBNYXRoLm1heChtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy53KSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsYW1wTGVuZ3RoOiBmdW5jdGlvbiAobWluLCBtYXgpIHtcclxuXHJcblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIobGVuZ3RoIHx8IDEpLm11bHRpcGx5U2NhbGFyKE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCBsZW5ndGgpKSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZsb29yOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vcih0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vcih0aGlzLnkpO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vcih0aGlzLnopO1xyXG5cdFx0dGhpcy53ID0gTWF0aC5mbG9vcih0aGlzLncpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjZWlsOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwodGhpcy55KTtcclxuXHRcdHRoaXMueiA9IE1hdGguY2VpbCh0aGlzLnopO1xyXG5cdFx0dGhpcy53ID0gTWF0aC5jZWlsKHRoaXMudyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCh0aGlzLnkpO1xyXG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCh0aGlzLnopO1xyXG5cdFx0dGhpcy53ID0gTWF0aC5yb3VuZCh0aGlzLncpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMueCA9ICh0aGlzLnggPCAwKSA/IE1hdGguY2VpbCh0aGlzLngpIDogTWF0aC5mbG9vcih0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gKHRoaXMueSA8IDApID8gTWF0aC5jZWlsKHRoaXMueSkgOiBNYXRoLmZsb29yKHRoaXMueSk7XHJcblx0XHR0aGlzLnogPSAodGhpcy56IDwgMCkgPyBNYXRoLmNlaWwodGhpcy56KSA6IE1hdGguZmxvb3IodGhpcy56KTtcclxuXHRcdHRoaXMudyA9ICh0aGlzLncgPCAwKSA/IE1hdGguY2VpbCh0aGlzLncpIDogTWF0aC5mbG9vcih0aGlzLncpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cdFx0dGhpcy56ID0gLSB0aGlzLno7XHJcblx0XHR0aGlzLncgPSAtIHRoaXMudztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZG90OiBmdW5jdGlvbiAodikge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudztcclxuXHJcblx0fSxcclxuXHJcblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKyB0aGlzLncgKiB0aGlzLncpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hYnModGhpcy54KSArIE1hdGguYWJzKHRoaXMueSkgKyBNYXRoLmFicyh0aGlzLnopICsgTWF0aC5hYnModGhpcy53KTtcclxuXHJcblx0fSxcclxuXHJcblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKHRoaXMubGVuZ3RoKCkgfHwgMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKGxlbmd0aCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKGxlbmd0aCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxlcnA6IGZ1bmN0aW9uICh2LCBhbHBoYSkge1xyXG5cclxuXHRcdHRoaXMueCArPSAodi54IC0gdGhpcy54KSAqIGFscGhhO1xyXG5cdFx0dGhpcy55ICs9ICh2LnkgLSB0aGlzLnkpICogYWxwaGE7XHJcblx0XHR0aGlzLnogKz0gKHYueiAtIHRoaXMueikgKiBhbHBoYTtcclxuXHRcdHRoaXMudyArPSAodi53IC0gdGhpcy53KSAqIGFscGhhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZXJwVmVjdG9yczogZnVuY3Rpb24gKHYxLCB2MiwgYWxwaGEpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKHYyLCB2MSkubXVsdGlwbHlTY2FsYXIoYWxwaGEpLmFkZCh2MSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRyZXR1cm4gKCh2LnggPT09IHRoaXMueCkgJiYgKHYueSA9PT0gdGhpcy55KSAmJiAodi56ID09PSB0aGlzLnopICYmICh2LncgPT09IHRoaXMudykpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHR0aGlzLnggPSBhcnJheVtvZmZzZXRdO1xyXG5cdFx0dGhpcy55ID0gYXJyYXlbb2Zmc2V0ICsgMV07XHJcblx0XHR0aGlzLnogPSBhcnJheVtvZmZzZXQgKyAyXTtcclxuXHRcdHRoaXMudyA9IGFycmF5W29mZnNldCArIDNdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChhcnJheSA9PT0gdW5kZWZpbmVkKSB7IGFycmF5ID0gW107IH1cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0XSA9IHRoaXMueDtcclxuXHRcdGFycmF5W29mZnNldCArIDFdID0gdGhpcy55O1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMl0gPSB0aGlzLno7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAzXSA9IHRoaXMudztcclxuXHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAob2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yNDogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WChpbmRleCk7XHJcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WShpbmRleCk7XHJcblx0XHR0aGlzLnogPSBhdHRyaWJ1dGUuZ2V0WihpbmRleCk7XHJcblx0XHR0aGlzLncgPSBhdHRyaWJ1dGUuZ2V0VyhpbmRleCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBNYXJpdXMgS2ludGVsIC8gaHR0cHM6Ly9naXRodWIuY29tL2tpbnRlbFxyXG4gKi9cclxuXHJcbi8qXHJcbiBJbiBvcHRpb25zLCB3ZSBjYW4gc3BlY2lmeTpcclxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxyXG4gKiBkZXB0aEJ1ZmZlci9zdGVuY2lsQnVmZmVyOiBCb29sZWFucyB0byBpbmRpY2F0ZSBpZiB3ZSBzaG91bGQgZ2VuZXJhdGUgdGhlc2UgYnVmZmVyc1xyXG4qL1xyXG5mdW5jdGlvbiBXZWJHTFJlbmRlclRhcmdldCh3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKSB7XHJcblxyXG5cdHRoaXMud2lkdGggPSB3aWR0aDtcclxuXHR0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuXHJcblx0dGhpcy5zY2lzc29yID0gbmV3IFZlY3RvcjQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblx0dGhpcy5zY2lzc29yVGVzdCA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cclxuXHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucy53cmFwUywgb3B0aW9ucy53cmFwVCwgb3B0aW9ucy5tYWdGaWx0ZXIsIG9wdGlvbnMubWluRmlsdGVyLCBvcHRpb25zLmZvcm1hdCwgb3B0aW9ucy50eXBlLCBvcHRpb25zLmFuaXNvdHJvcHksIG9wdGlvbnMuZW5jb2RpbmcpO1xyXG5cclxuXHR0aGlzLnRleHR1cmUuaW1hZ2UgPSB7fTtcclxuXHR0aGlzLnRleHR1cmUuaW1hZ2Uud2lkdGggPSB3aWR0aDtcclxuXHR0aGlzLnRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2U7XHJcblx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcclxuXHJcblx0dGhpcy5kZXB0aEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhCdWZmZXIgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGhCdWZmZXIgOiB0cnVlO1xyXG5cdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVuY2lsQnVmZmVyIDogdHJ1ZTtcclxuXHR0aGlzLmRlcHRoVGV4dHVyZSA9IG9wdGlvbnMuZGVwdGhUZXh0dXJlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRlcHRoVGV4dHVyZSA6IG51bGw7XHJcblxyXG59XHJcblxyXG5XZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFdlYkdMUmVuZGVyVGFyZ2V0LFxyXG5cclxuXHRpc1dlYkdMUmVuZGVyVGFyZ2V0OiB0cnVlLFxyXG5cclxuXHRzZXRTaXplOiBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xyXG5cclxuXHRcdGlmICh0aGlzLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gaGVpZ2h0KSB7XHJcblxyXG5cdFx0XHR0aGlzLndpZHRoID0gd2lkdGg7XHJcblx0XHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdFx0dGhpcy50ZXh0dXJlLmltYWdlLndpZHRoID0gd2lkdGg7XHJcblx0XHRcdHRoaXMudGV4dHVyZS5pbWFnZS5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0XHR0aGlzLmRpc3Bvc2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy52aWV3cG9ydC5zZXQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblx0XHR0aGlzLnNjaXNzb3Iuc2V0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHR0aGlzLndpZHRoID0gc291cmNlLndpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xyXG5cclxuXHRcdHRoaXMudmlld3BvcnQuY29weShzb3VyY2Uudmlld3BvcnQpO1xyXG5cclxuXHRcdHRoaXMudGV4dHVyZSA9IHNvdXJjZS50ZXh0dXJlLmNsb25lKCk7XHJcblxyXG5cdFx0dGhpcy5kZXB0aEJ1ZmZlciA9IHNvdXJjZS5kZXB0aEJ1ZmZlcjtcclxuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5zdGVuY2lsQnVmZmVyO1xyXG5cdFx0dGhpcy5kZXB0aFRleHR1cmUgPSBzb3VyY2UuZGVwdGhUZXh0dXJlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ2Rpc3Bvc2UnIH0pO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKiBAYXV0aG9yIE1hdHQgRGVzTGF1cmllcnMgLyBAbWF0dGRlc2xcclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcclxuXHJcblx0V2ViR0xSZW5kZXJUYXJnZXQuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKTtcclxuXHJcblx0dGhpcy5zYW1wbGVzID0gNDtcclxuXHJcbn1cclxuXHJcbldlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQsXHJcblxyXG5cdGlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLnNhbXBsZXMgPSBzb3VyY2Uuc2FtcGxlcztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG52YXIgX3YxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9tMSA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfemVybyA9IG5ldyBWZWN0b3IzKDAsIDAsIDApO1xyXG52YXIgX29uZSA9IG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xyXG52YXIgX3ggPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3kgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3ogPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXHJcbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXHJcbiAqIEBhdXRob3Igam9yZGlfcm9zIC8gaHR0cDovL3BsYXR0c29mdC5jb21cclxuICogQGF1dGhvciBEMXBsbzFkIC8gaHR0cDovL2dpdGh1Yi5jb20vRDFwbG8xZFxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIHRpbWtuaXAgLyBodHRwOi8vd3d3LmZsb29ycGxhbm5lci5jb20vXHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTWF0cml4NCgpIHtcclxuXHJcblx0dGhpcy5lbGVtZW50cyA9IFtcclxuXHJcblx0XHQxLCAwLCAwLCAwLFxyXG5cdFx0MCwgMSwgMCwgMCxcclxuXHRcdDAsIDAsIDEsIDAsXHJcblx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdF07XHJcblxyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oTWF0cml4NC5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNNYXRyaXg0OiB0cnVlLFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uIChuMTEsIG4xMiwgbjEzLCBuMTQsIG4yMSwgbjIyLCBuMjMsIG4yNCwgbjMxLCBuMzIsIG4zMywgbjM0LCBuNDEsIG40MiwgbjQzLCBuNDQpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdID0gbjExOyB0ZVs0XSA9IG4xMjsgdGVbOF0gPSBuMTM7IHRlWzEyXSA9IG4xNDtcclxuXHRcdHRlWzFdID0gbjIxOyB0ZVs1XSA9IG4yMjsgdGVbOV0gPSBuMjM7IHRlWzEzXSA9IG4yNDtcclxuXHRcdHRlWzJdID0gbjMxOyB0ZVs2XSA9IG4zMjsgdGVbMTBdID0gbjMzOyB0ZVsxNF0gPSBuMzQ7XHJcblx0XHR0ZVszXSA9IG40MTsgdGVbN10gPSBuNDI7IHRlWzExXSA9IG40MzsgdGVbMTVdID0gbjQ0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpZGVudGl0eTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0MSwgMCwgMCwgMCxcclxuXHRcdFx0MCwgMSwgMCwgMCxcclxuXHRcdFx0MCwgMCwgMSwgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBNYXRyaXg0KCkuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdID0gbWVbMF07IHRlWzFdID0gbWVbMV07IHRlWzJdID0gbWVbMl07IHRlWzNdID0gbWVbM107XHJcblx0XHR0ZVs0XSA9IG1lWzRdOyB0ZVs1XSA9IG1lWzVdOyB0ZVs2XSA9IG1lWzZdOyB0ZVs3XSA9IG1lWzddO1xyXG5cdFx0dGVbOF0gPSBtZVs4XTsgdGVbOV0gPSBtZVs5XTsgdGVbMTBdID0gbWVbMTBdOyB0ZVsxMV0gPSBtZVsxMV07XHJcblx0XHR0ZVsxMl0gPSBtZVsxMl07IHRlWzEzXSA9IG1lWzEzXTsgdGVbMTRdID0gbWVbMTRdOyB0ZVsxNV0gPSBtZVsxNV07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHlQb3NpdGlvbjogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLCBtZSA9IG0uZWxlbWVudHM7XHJcblxyXG5cdFx0dGVbMTJdID0gbWVbMTJdO1xyXG5cdFx0dGVbMTNdID0gbWVbMTNdO1xyXG5cdFx0dGVbMTRdID0gbWVbMTRdO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRleHRyYWN0QmFzaXM6IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMsIHpBeGlzKSB7XHJcblxyXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLCAwKTtcclxuXHRcdHlBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4odGhpcywgMSk7XHJcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKHRoaXMsIDIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlQmFzaXM6IGZ1bmN0aW9uICh4QXhpcywgeUF4aXMsIHpBeGlzKSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblx0XHRcdHhBeGlzLngsIHlBeGlzLngsIHpBeGlzLngsIDAsXHJcblx0XHRcdHhBeGlzLnksIHlBeGlzLnksIHpBeGlzLnksIDAsXHJcblx0XHRcdHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAsXHJcblx0XHRcdDAsIDAsIDAsIDFcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGV4dHJhY3RSb3RhdGlvbjogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcclxuXHJcblx0XHR2YXIgc2NhbGVYID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKG0sIDApLmxlbmd0aCgpO1xyXG5cdFx0dmFyIHNjYWxlWSA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbihtLCAxKS5sZW5ndGgoKTtcclxuXHRcdHZhciBzY2FsZVogPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4obSwgMikubGVuZ3RoKCk7XHJcblxyXG5cdFx0dGVbMF0gPSBtZVswXSAqIHNjYWxlWDtcclxuXHRcdHRlWzFdID0gbWVbMV0gKiBzY2FsZVg7XHJcblx0XHR0ZVsyXSA9IG1lWzJdICogc2NhbGVYO1xyXG5cdFx0dGVbM10gPSAwO1xyXG5cclxuXHRcdHRlWzRdID0gbWVbNF0gKiBzY2FsZVk7XHJcblx0XHR0ZVs1XSA9IG1lWzVdICogc2NhbGVZO1xyXG5cdFx0dGVbNl0gPSBtZVs2XSAqIHNjYWxlWTtcclxuXHRcdHRlWzddID0gMDtcclxuXHJcblx0XHR0ZVs4XSA9IG1lWzhdICogc2NhbGVaO1xyXG5cdFx0dGVbOV0gPSBtZVs5XSAqIHNjYWxlWjtcclxuXHRcdHRlWzEwXSA9IG1lWzEwXSAqIHNjYWxlWjtcclxuXHRcdHRlWzExXSA9IDA7XHJcblxyXG5cdFx0dGVbMTJdID0gMDtcclxuXHRcdHRlWzEzXSA9IDA7XHJcblx0XHR0ZVsxNF0gPSAwO1xyXG5cdFx0dGVbMTVdID0gMTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bWFrZVJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoZXVsZXIpIHtcclxuXHJcblx0XHRpZiAoIShldWxlciAmJiBldWxlci5pc0V1bGVyKSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4NDogLm1ha2VSb3RhdGlvbkZyb21FdWxlcigpIG5vdyBleHBlY3RzIGEgRXVsZXIgcm90YXRpb24gcmF0aGVyIHRoYW4gYSBWZWN0b3IzIGFuZCBvcmRlci4nKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR2YXIgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejtcclxuXHRcdHZhciBhID0gTWF0aC5jb3MoeCksIGIgPSBNYXRoLnNpbih4KTtcclxuXHRcdHZhciBjID0gTWF0aC5jb3MoeSksIGQgPSBNYXRoLnNpbih5KTtcclxuXHRcdHZhciBlID0gTWF0aC5jb3MoeiksIGYgPSBNYXRoLnNpbih6KTtcclxuXHJcblx0XHRpZiAoZXVsZXIub3JkZXIgPT09ICdYWVonKSB7XHJcblxyXG5cdFx0XHR2YXIgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcclxuXHJcblx0XHRcdHRlWzBdID0gYyAqIGU7XHJcblx0XHRcdHRlWzRdID0gLSBjICogZjtcclxuXHRcdFx0dGVbOF0gPSBkO1xyXG5cclxuXHRcdFx0dGVbMV0gPSBhZiArIGJlICogZDtcclxuXHRcdFx0dGVbNV0gPSBhZSAtIGJmICogZDtcclxuXHRcdFx0dGVbOV0gPSAtIGIgKiBjO1xyXG5cclxuXHRcdFx0dGVbMl0gPSBiZiAtIGFlICogZDtcclxuXHRcdFx0dGVbNl0gPSBiZSArIGFmICogZDtcclxuXHRcdFx0dGVbMTBdID0gYSAqIGM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChldWxlci5vcmRlciA9PT0gJ1lYWicpIHtcclxuXHJcblx0XHRcdHZhciBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xyXG5cclxuXHRcdFx0dGVbMF0gPSBjZSArIGRmICogYjtcclxuXHRcdFx0dGVbNF0gPSBkZSAqIGIgLSBjZjtcclxuXHRcdFx0dGVbOF0gPSBhICogZDtcclxuXHJcblx0XHRcdHRlWzFdID0gYSAqIGY7XHJcblx0XHRcdHRlWzVdID0gYSAqIGU7XHJcblx0XHRcdHRlWzldID0gLSBiO1xyXG5cclxuXHRcdFx0dGVbMl0gPSBjZiAqIGIgLSBkZTtcclxuXHRcdFx0dGVbNl0gPSBkZiArIGNlICogYjtcclxuXHRcdFx0dGVbMTBdID0gYSAqIGM7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChldWxlci5vcmRlciA9PT0gJ1pYWScpIHtcclxuXHJcblx0XHRcdHZhciBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xyXG5cclxuXHRcdFx0dGVbMF0gPSBjZSAtIGRmICogYjtcclxuXHRcdFx0dGVbNF0gPSAtIGEgKiBmO1xyXG5cdFx0XHR0ZVs4XSA9IGRlICsgY2YgKiBiO1xyXG5cclxuXHRcdFx0dGVbMV0gPSBjZiArIGRlICogYjtcclxuXHRcdFx0dGVbNV0gPSBhICogZTtcclxuXHRcdFx0dGVbOV0gPSBkZiAtIGNlICogYjtcclxuXHJcblx0XHRcdHRlWzJdID0gLSBhICogZDtcclxuXHRcdFx0dGVbNl0gPSBiO1xyXG5cdFx0XHR0ZVsxMF0gPSBhICogYztcclxuXHJcblx0XHR9IGVsc2UgaWYgKGV1bGVyLm9yZGVyID09PSAnWllYJykge1xyXG5cclxuXHRcdFx0dmFyIGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XHJcblxyXG5cdFx0XHR0ZVswXSA9IGMgKiBlO1xyXG5cdFx0XHR0ZVs0XSA9IGJlICogZCAtIGFmO1xyXG5cdFx0XHR0ZVs4XSA9IGFlICogZCArIGJmO1xyXG5cclxuXHRcdFx0dGVbMV0gPSBjICogZjtcclxuXHRcdFx0dGVbNV0gPSBiZiAqIGQgKyBhZTtcclxuXHRcdFx0dGVbOV0gPSBhZiAqIGQgLSBiZTtcclxuXHJcblx0XHRcdHRlWzJdID0gLSBkO1xyXG5cdFx0XHR0ZVs2XSA9IGIgKiBjO1xyXG5cdFx0XHR0ZVsxMF0gPSBhICogYztcclxuXHJcblx0XHR9IGVsc2UgaWYgKGV1bGVyLm9yZGVyID09PSAnWVpYJykge1xyXG5cclxuXHRcdFx0dmFyIGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XHJcblxyXG5cdFx0XHR0ZVswXSA9IGMgKiBlO1xyXG5cdFx0XHR0ZVs0XSA9IGJkIC0gYWMgKiBmO1xyXG5cdFx0XHR0ZVs4XSA9IGJjICogZiArIGFkO1xyXG5cclxuXHRcdFx0dGVbMV0gPSBmO1xyXG5cdFx0XHR0ZVs1XSA9IGEgKiBlO1xyXG5cdFx0XHR0ZVs5XSA9IC0gYiAqIGU7XHJcblxyXG5cdFx0XHR0ZVsyXSA9IC0gZCAqIGU7XHJcblx0XHRcdHRlWzZdID0gYWQgKiBmICsgYmM7XHJcblx0XHRcdHRlWzEwXSA9IGFjIC0gYmQgKiBmO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoZXVsZXIub3JkZXIgPT09ICdYWlknKSB7XHJcblxyXG5cdFx0XHR2YXIgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcclxuXHJcblx0XHRcdHRlWzBdID0gYyAqIGU7XHJcblx0XHRcdHRlWzRdID0gLSBmO1xyXG5cdFx0XHR0ZVs4XSA9IGQgKiBlO1xyXG5cclxuXHRcdFx0dGVbMV0gPSBhYyAqIGYgKyBiZDtcclxuXHRcdFx0dGVbNV0gPSBhICogZTtcclxuXHRcdFx0dGVbOV0gPSBhZCAqIGYgLSBiYztcclxuXHJcblx0XHRcdHRlWzJdID0gYmMgKiBmIC0gYWQ7XHJcblx0XHRcdHRlWzZdID0gYiAqIGU7XHJcblx0XHRcdHRlWzEwXSA9IGJkICogZiArIGFjO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBib3R0b20gcm93XHJcblx0XHR0ZVszXSA9IDA7XHJcblx0XHR0ZVs3XSA9IDA7XHJcblx0XHR0ZVsxMV0gPSAwO1xyXG5cclxuXHRcdC8vIGxhc3QgY29sdW1uXHJcblx0XHR0ZVsxMl0gPSAwO1xyXG5cdFx0dGVbMTNdID0gMDtcclxuXHRcdHRlWzE0XSA9IDA7XHJcblx0XHR0ZVsxNV0gPSAxO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKHEpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb21wb3NlKF96ZXJvLCBxLCBfb25lKTtcclxuXHJcblx0fSxcclxuXHJcblx0bG9va0F0OiBmdW5jdGlvbiAoZXllLCB0YXJnZXQsIHVwKSB7XHJcblxyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHRfei5zdWJWZWN0b3JzKGV5ZSwgdGFyZ2V0KTtcclxuXHJcblx0XHRpZiAoX3oubGVuZ3RoU3EoKSA9PT0gMCkge1xyXG5cclxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXHJcblxyXG5cdFx0XHRfei56ID0gMTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X3oubm9ybWFsaXplKCk7XHJcblx0XHRfeC5jcm9zc1ZlY3RvcnModXAsIF96KTtcclxuXHJcblx0XHRpZiAoX3gubGVuZ3RoU3EoKSA9PT0gMCkge1xyXG5cclxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnModXAueikgPT09IDEpIHtcclxuXHJcblx0XHRcdFx0X3oueCArPSAwLjAwMDE7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRfei56ICs9IDAuMDAwMTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdF96Lm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHRfeC5jcm9zc1ZlY3RvcnModXAsIF96KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X3gubm9ybWFsaXplKCk7XHJcblx0XHRfeS5jcm9zc1ZlY3RvcnMoX3osIF94KTtcclxuXHJcblx0XHR0ZVswXSA9IF94Lng7IHRlWzRdID0gX3kueDsgdGVbOF0gPSBfei54O1xyXG5cdFx0dGVbMV0gPSBfeC55OyB0ZVs1XSA9IF95Lnk7IHRlWzldID0gX3oueTtcclxuXHRcdHRlWzJdID0gX3guejsgdGVbNl0gPSBfeS56OyB0ZVsxMF0gPSBfei56O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseTogZnVuY3Rpb24gKG0sIG4pIHtcclxuXHJcblx0XHRpZiAobiAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKG0sIG4pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKHRoaXMsIG0pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRwcmVtdWx0aXBseTogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKG0sIHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoYSwgYikge1xyXG5cclxuXHRcdHZhciBhZSA9IGEuZWxlbWVudHM7XHJcblx0XHR2YXIgYmUgPSBiLmVsZW1lbnRzO1xyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHJcblx0XHR2YXIgYTExID0gYWVbMF0sIGExMiA9IGFlWzRdLCBhMTMgPSBhZVs4XSwgYTE0ID0gYWVbMTJdO1xyXG5cdFx0dmFyIGEyMSA9IGFlWzFdLCBhMjIgPSBhZVs1XSwgYTIzID0gYWVbOV0sIGEyNCA9IGFlWzEzXTtcclxuXHRcdHZhciBhMzEgPSBhZVsyXSwgYTMyID0gYWVbNl0sIGEzMyA9IGFlWzEwXSwgYTM0ID0gYWVbMTRdO1xyXG5cdFx0dmFyIGE0MSA9IGFlWzNdLCBhNDIgPSBhZVs3XSwgYTQzID0gYWVbMTFdLCBhNDQgPSBhZVsxNV07XHJcblxyXG5cdFx0dmFyIGIxMSA9IGJlWzBdLCBiMTIgPSBiZVs0XSwgYjEzID0gYmVbOF0sIGIxNCA9IGJlWzEyXTtcclxuXHRcdHZhciBiMjEgPSBiZVsxXSwgYjIyID0gYmVbNV0sIGIyMyA9IGJlWzldLCBiMjQgPSBiZVsxM107XHJcblx0XHR2YXIgYjMxID0gYmVbMl0sIGIzMiA9IGJlWzZdLCBiMzMgPSBiZVsxMF0sIGIzNCA9IGJlWzE0XTtcclxuXHRcdHZhciBiNDEgPSBiZVszXSwgYjQyID0gYmVbN10sIGI0MyA9IGJlWzExXSwgYjQ0ID0gYmVbMTVdO1xyXG5cclxuXHRcdHRlWzBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxO1xyXG5cdFx0dGVbNF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XHJcblx0XHR0ZVs4XSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0MztcclxuXHRcdHRlWzEyXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NDtcclxuXHJcblx0XHR0ZVsxXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMSArIGEyNCAqIGI0MTtcclxuXHRcdHRlWzVdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyICsgYTI0ICogYjQyO1xyXG5cdFx0dGVbOV0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMgKyBhMjQgKiBiNDM7XHJcblx0XHR0ZVsxM10gPSBhMjEgKiBiMTQgKyBhMjIgKiBiMjQgKyBhMjMgKiBiMzQgKyBhMjQgKiBiNDQ7XHJcblxyXG5cdFx0dGVbMl0gPSBhMzEgKiBiMTEgKyBhMzIgKiBiMjEgKyBhMzMgKiBiMzEgKyBhMzQgKiBiNDE7XHJcblx0XHR0ZVs2XSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0MjtcclxuXHRcdHRlWzEwXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMyArIGEzNCAqIGI0MztcclxuXHRcdHRlWzE0XSA9IGEzMSAqIGIxNCArIGEzMiAqIGIyNCArIGEzMyAqIGIzNCArIGEzNCAqIGI0NDtcclxuXHJcblx0XHR0ZVszXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MTtcclxuXHRcdHRlWzddID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xyXG5cdFx0dGVbMTFdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xyXG5cdFx0dGVbMTVdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHRlWzBdICo9IHM7IHRlWzRdICo9IHM7IHRlWzhdICo9IHM7IHRlWzEyXSAqPSBzO1xyXG5cdFx0dGVbMV0gKj0gczsgdGVbNV0gKj0gczsgdGVbOV0gKj0gczsgdGVbMTNdICo9IHM7XHJcblx0XHR0ZVsyXSAqPSBzOyB0ZVs2XSAqPSBzOyB0ZVsxMF0gKj0gczsgdGVbMTRdICo9IHM7XHJcblx0XHR0ZVszXSAqPSBzOyB0ZVs3XSAqPSBzOyB0ZVsxMV0gKj0gczsgdGVbMTVdICo9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0X3YxLnggPSBhdHRyaWJ1dGUuZ2V0WChpKTtcclxuXHRcdFx0X3YxLnkgPSBhdHRyaWJ1dGUuZ2V0WShpKTtcclxuXHRcdFx0X3YxLnogPSBhdHRyaWJ1dGUuZ2V0WihpKTtcclxuXHJcblx0XHRcdF92MS5hcHBseU1hdHJpeDQodGhpcyk7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGUuc2V0WFlaKGksIF92MS54LCBfdjEueSwgX3YxLnopO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYXR0cmlidXRlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkZXRlcm1pbmFudDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dmFyIG4xMSA9IHRlWzBdLCBuMTIgPSB0ZVs0XSwgbjEzID0gdGVbOF0sIG4xNCA9IHRlWzEyXTtcclxuXHRcdHZhciBuMjEgPSB0ZVsxXSwgbjIyID0gdGVbNV0sIG4yMyA9IHRlWzldLCBuMjQgPSB0ZVsxM107XHJcblx0XHR2YXIgbjMxID0gdGVbMl0sIG4zMiA9IHRlWzZdLCBuMzMgPSB0ZVsxMF0sIG4zNCA9IHRlWzE0XTtcclxuXHRcdHZhciBuNDEgPSB0ZVszXSwgbjQyID0gdGVbN10sIG40MyA9IHRlWzExXSwgbjQ0ID0gdGVbMTVdO1xyXG5cclxuXHRcdC8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50XHJcblx0XHQvLyggYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtIClcclxuXHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRuNDEgKiAoXHJcblx0XHRcdFx0KyBuMTQgKiBuMjMgKiBuMzJcclxuXHRcdFx0XHQtIG4xMyAqIG4yNCAqIG4zMlxyXG5cdFx0XHRcdC0gbjE0ICogbjIyICogbjMzXHJcblx0XHRcdFx0KyBuMTIgKiBuMjQgKiBuMzNcclxuXHRcdFx0XHQrIG4xMyAqIG4yMiAqIG4zNFxyXG5cdFx0XHRcdC0gbjEyICogbjIzICogbjM0XHJcblx0XHRcdCkgK1xyXG5cdFx0XHRuNDIgKiAoXHJcblx0XHRcdFx0KyBuMTEgKiBuMjMgKiBuMzRcclxuXHRcdFx0XHQtIG4xMSAqIG4yNCAqIG4zM1xyXG5cdFx0XHRcdCsgbjE0ICogbjIxICogbjMzXHJcblx0XHRcdFx0LSBuMTMgKiBuMjEgKiBuMzRcclxuXHRcdFx0XHQrIG4xMyAqIG4yNCAqIG4zMVxyXG5cdFx0XHRcdC0gbjE0ICogbjIzICogbjMxXHJcblx0XHRcdCkgK1xyXG5cdFx0XHRuNDMgKiAoXHJcblx0XHRcdFx0KyBuMTEgKiBuMjQgKiBuMzJcclxuXHRcdFx0XHQtIG4xMSAqIG4yMiAqIG4zNFxyXG5cdFx0XHRcdC0gbjE0ICogbjIxICogbjMyXHJcblx0XHRcdFx0KyBuMTIgKiBuMjEgKiBuMzRcclxuXHRcdFx0XHQrIG4xNCAqIG4yMiAqIG4zMVxyXG5cdFx0XHRcdC0gbjEyICogbjI0ICogbjMxXHJcblx0XHRcdCkgK1xyXG5cdFx0XHRuNDQgKiAoXHJcblx0XHRcdFx0LSBuMTMgKiBuMjIgKiBuMzFcclxuXHRcdFx0XHQtIG4xMSAqIG4yMyAqIG4zMlxyXG5cdFx0XHRcdCsgbjExICogbjIyICogbjMzXHJcblx0XHRcdFx0KyBuMTMgKiBuMjEgKiBuMzJcclxuXHRcdFx0XHQtIG4xMiAqIG4yMSAqIG4zM1xyXG5cdFx0XHRcdCsgbjEyICogbjIzICogbjMxXHJcblx0XHRcdClcclxuXHJcblx0XHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc3Bvc2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0dmFyIHRtcDtcclxuXHJcblx0XHR0bXAgPSB0ZVsxXTsgdGVbMV0gPSB0ZVs0XTsgdGVbNF0gPSB0bXA7XHJcblx0XHR0bXAgPSB0ZVsyXTsgdGVbMl0gPSB0ZVs4XTsgdGVbOF0gPSB0bXA7XHJcblx0XHR0bXAgPSB0ZVs2XTsgdGVbNl0gPSB0ZVs5XTsgdGVbOV0gPSB0bXA7XHJcblxyXG5cdFx0dG1wID0gdGVbM107IHRlWzNdID0gdGVbMTJdOyB0ZVsxMl0gPSB0bXA7XHJcblx0XHR0bXAgPSB0ZVs3XTsgdGVbN10gPSB0ZVsxM107IHRlWzEzXSA9IHRtcDtcclxuXHRcdHRtcCA9IHRlWzExXTsgdGVbMTFdID0gdGVbMTRdOyB0ZVsxNF0gPSB0bXA7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFBvc2l0aW9uOiBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0aWYgKHguaXNWZWN0b3IzKSB7XHJcblxyXG5cdFx0XHR0ZVsxMl0gPSB4Lng7XHJcblx0XHRcdHRlWzEzXSA9IHgueTtcclxuXHRcdFx0dGVbMTRdID0geC56O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0ZVsxMl0gPSB4O1xyXG5cdFx0XHR0ZVsxM10gPSB5O1xyXG5cdFx0XHR0ZVsxNF0gPSB6O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0SW52ZXJzZTogZnVuY3Rpb24gKG0sIHRocm93T25EZWdlbmVyYXRlKSB7XHJcblxyXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzLFxyXG5cdFx0XHRtZSA9IG0uZWxlbWVudHMsXHJcblxyXG5cdFx0XHRuMTEgPSBtZVswXSwgbjIxID0gbWVbMV0sIG4zMSA9IG1lWzJdLCBuNDEgPSBtZVszXSxcclxuXHRcdFx0bjEyID0gbWVbNF0sIG4yMiA9IG1lWzVdLCBuMzIgPSBtZVs2XSwgbjQyID0gbWVbN10sXHJcblx0XHRcdG4xMyA9IG1lWzhdLCBuMjMgPSBtZVs5XSwgbjMzID0gbWVbMTBdLCBuNDMgPSBtZVsxMV0sXHJcblx0XHRcdG4xNCA9IG1lWzEyXSwgbjI0ID0gbWVbMTNdLCBuMzQgPSBtZVsxNF0sIG40NCA9IG1lWzE1XSxcclxuXHJcblx0XHRcdHQxMSA9IG4yMyAqIG4zNCAqIG40MiAtIG4yNCAqIG4zMyAqIG40MiArIG4yNCAqIG4zMiAqIG40MyAtIG4yMiAqIG4zNCAqIG40MyAtIG4yMyAqIG4zMiAqIG40NCArIG4yMiAqIG4zMyAqIG40NCxcclxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxyXG5cdFx0XHR0MTMgPSBuMTMgKiBuMjQgKiBuNDIgLSBuMTQgKiBuMjMgKiBuNDIgKyBuMTQgKiBuMjIgKiBuNDMgLSBuMTIgKiBuMjQgKiBuNDMgLSBuMTMgKiBuMjIgKiBuNDQgKyBuMTIgKiBuMjMgKiBuNDQsXHJcblx0XHRcdHQxNCA9IG4xNCAqIG4yMyAqIG4zMiAtIG4xMyAqIG4yNCAqIG4zMiAtIG4xNCAqIG4yMiAqIG4zMyArIG4xMiAqIG4yNCAqIG4zMyArIG4xMyAqIG4yMiAqIG4zNCAtIG4xMiAqIG4yMyAqIG4zNDtcclxuXHJcblx0XHR2YXIgZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzICsgbjQxICogdDE0O1xyXG5cclxuXHRcdGlmIChkZXQgPT09IDApIHtcclxuXHJcblx0XHRcdHZhciBtc2cgPSBcIlRIUkVFLk1hdHJpeDQ6IC5nZXRJbnZlcnNlKCkgY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiO1xyXG5cclxuXHRcdFx0aWYgKHRocm93T25EZWdlbmVyYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihtc2cpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKG1zZyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5pZGVudGl0eSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcclxuXHJcblx0XHR0ZVswXSA9IHQxMSAqIGRldEludjtcclxuXHRcdHRlWzFdID0gKG4yNCAqIG4zMyAqIG40MSAtIG4yMyAqIG4zNCAqIG40MSAtIG4yNCAqIG4zMSAqIG40MyArIG4yMSAqIG4zNCAqIG40MyArIG4yMyAqIG4zMSAqIG40NCAtIG4yMSAqIG4zMyAqIG40NCkgKiBkZXRJbnY7XHJcblx0XHR0ZVsyXSA9IChuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQpICogZGV0SW52O1xyXG5cdFx0dGVbM10gPSAobjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzKSAqIGRldEludjtcclxuXHJcblx0XHR0ZVs0XSA9IHQxMiAqIGRldEludjtcclxuXHRcdHRlWzVdID0gKG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCkgKiBkZXRJbnY7XHJcblx0XHR0ZVs2XSA9IChuMTQgKiBuMzIgKiBuNDEgLSBuMTIgKiBuMzQgKiBuNDEgLSBuMTQgKiBuMzEgKiBuNDIgKyBuMTEgKiBuMzQgKiBuNDIgKyBuMTIgKiBuMzEgKiBuNDQgLSBuMTEgKiBuMzIgKiBuNDQpICogZGV0SW52O1xyXG5cdFx0dGVbN10gPSAobjEyICogbjMzICogbjQxIC0gbjEzICogbjMyICogbjQxICsgbjEzICogbjMxICogbjQyIC0gbjExICogbjMzICogbjQyIC0gbjEyICogbjMxICogbjQzICsgbjExICogbjMyICogbjQzKSAqIGRldEludjtcclxuXHJcblx0XHR0ZVs4XSA9IHQxMyAqIGRldEludjtcclxuXHRcdHRlWzldID0gKG4xNCAqIG4yMyAqIG40MSAtIG4xMyAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMSAqIG40MyArIG4xMSAqIG4yNCAqIG40MyArIG4xMyAqIG4yMSAqIG40NCAtIG4xMSAqIG4yMyAqIG40NCkgKiBkZXRJbnY7XHJcblx0XHR0ZVsxMF0gPSAobjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0KSAqIGRldEludjtcclxuXHRcdHRlWzExXSA9IChuMTMgKiBuMjIgKiBuNDEgLSBuMTIgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjEgKiBuNDIgKyBuMTEgKiBuMjMgKiBuNDIgKyBuMTIgKiBuMjEgKiBuNDMgLSBuMTEgKiBuMjIgKiBuNDMpICogZGV0SW52O1xyXG5cclxuXHRcdHRlWzEyXSA9IHQxNCAqIGRldEludjtcclxuXHRcdHRlWzEzXSA9IChuMTMgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjMgKiBuMzEgKyBuMTQgKiBuMjEgKiBuMzMgLSBuMTEgKiBuMjQgKiBuMzMgLSBuMTMgKiBuMjEgKiBuMzQgKyBuMTEgKiBuMjMgKiBuMzQpICogZGV0SW52O1xyXG5cdFx0dGVbMTRdID0gKG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCkgKiBkZXRJbnY7XHJcblx0XHR0ZVsxNV0gPSAobjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzKSAqIGRldEludjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2NhbGU6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHRcdHZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xyXG5cclxuXHRcdHRlWzBdICo9IHg7IHRlWzRdICo9IHk7IHRlWzhdICo9IHo7XHJcblx0XHR0ZVsxXSAqPSB4OyB0ZVs1XSAqPSB5OyB0ZVs5XSAqPSB6O1xyXG5cdFx0dGVbMl0gKj0geDsgdGVbNl0gKj0geTsgdGVbMTBdICo9IHo7XHJcblx0XHR0ZVszXSAqPSB4OyB0ZVs3XSAqPSB5OyB0ZVsxMV0gKj0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0TWF4U2NhbGVPbkF4aXM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHZhciBzY2FsZVhTcSA9IHRlWzBdICogdGVbMF0gKyB0ZVsxXSAqIHRlWzFdICsgdGVbMl0gKiB0ZVsyXTtcclxuXHRcdHZhciBzY2FsZVlTcSA9IHRlWzRdICogdGVbNF0gKyB0ZVs1XSAqIHRlWzVdICsgdGVbNl0gKiB0ZVs2XTtcclxuXHRcdHZhciBzY2FsZVpTcSA9IHRlWzhdICogdGVbOF0gKyB0ZVs5XSAqIHRlWzldICsgdGVbMTBdICogdGVbMTBdO1xyXG5cclxuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5tYXgoc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCAwLCAwLCB4LFxyXG5cdFx0XHQwLCAxLCAwLCB5LFxyXG5cdFx0XHQwLCAwLCAxLCB6LFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bWFrZVJvdGF0aW9uWDogZnVuY3Rpb24gKHRoZXRhKSB7XHJcblxyXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyh0aGV0YSksIHMgPSBNYXRoLnNpbih0aGV0YSk7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCAwLCAwLCAwLFxyXG5cdFx0XHQwLCBjLCAtIHMsIDAsXHJcblx0XHRcdDAsIHMsIGMsIDAsXHJcblx0XHRcdDAsIDAsIDAsIDFcclxuXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlUm90YXRpb25ZOiBmdW5jdGlvbiAodGhldGEpIHtcclxuXHJcblx0XHR2YXIgYyA9IE1hdGguY29zKHRoZXRhKSwgcyA9IE1hdGguc2luKHRoZXRhKTtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHJcblx0XHRcdGMsIDAsIHMsIDAsXHJcblx0XHRcdDAsIDEsIDAsIDAsXHJcblx0XHRcdC0gcywgMCwgYywgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICh0aGV0YSkge1xyXG5cclxuXHRcdHZhciBjID0gTWF0aC5jb3ModGhldGEpLCBzID0gTWF0aC5zaW4odGhldGEpO1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0YywgLSBzLCAwLCAwLFxyXG5cdFx0XHRzLCBjLCAwLCAwLFxyXG5cdFx0XHQwLCAwLCAxLCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bWFrZVJvdGF0aW9uQXhpczogZnVuY3Rpb24gKGF4aXMsIGFuZ2xlKSB7XHJcblxyXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXHJcblxyXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyhhbmdsZSk7XHJcblx0XHR2YXIgcyA9IE1hdGguc2luKGFuZ2xlKTtcclxuXHRcdHZhciB0ID0gMSAtIGM7XHJcblx0XHR2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcclxuXHRcdHZhciB0eCA9IHQgKiB4LCB0eSA9IHQgKiB5O1xyXG5cclxuXHRcdHRoaXMuc2V0KFxyXG5cclxuXHRcdFx0dHggKiB4ICsgYywgdHggKiB5IC0gcyAqIHosIHR4ICogeiArIHMgKiB5LCAwLFxyXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXHJcblx0XHRcdHR4ICogeiAtIHMgKiB5LCB0eSAqIHogKyBzICogeCwgdCAqIHogKiB6ICsgYywgMCxcclxuXHRcdFx0MCwgMCwgMCwgMVxyXG5cclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1ha2VTY2FsZTogZnVuY3Rpb24gKHgsIHksIHopIHtcclxuXHJcblx0XHR0aGlzLnNldChcclxuXHJcblx0XHRcdHgsIDAsIDAsIDAsXHJcblx0XHRcdDAsIHksIDAsIDAsXHJcblx0XHRcdDAsIDAsIHosIDAsXHJcblx0XHRcdDAsIDAsIDAsIDFcclxuXHJcblx0XHQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlU2hlYXI6IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcblxyXG5cdFx0dGhpcy5zZXQoXHJcblxyXG5cdFx0XHQxLCB5LCB6LCAwLFxyXG5cdFx0XHR4LCAxLCB6LCAwLFxyXG5cdFx0XHR4LCB5LCAxLCAwLFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblxyXG5cdFx0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29tcG9zZTogZnVuY3Rpb24gKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSkge1xyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0dmFyIHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xyXG5cdFx0dmFyIHgyID0geCArIHgsIHkyID0geSArIHksIHoyID0geiArIHo7XHJcblx0XHR2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6MjtcclxuXHRcdHZhciB5eSA9IHkgKiB5MiwgeXogPSB5ICogejIsIHp6ID0geiAqIHoyO1xyXG5cdFx0dmFyIHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejI7XHJcblxyXG5cdFx0dmFyIHN4ID0gc2NhbGUueCwgc3kgPSBzY2FsZS55LCBzeiA9IHNjYWxlLno7XHJcblxyXG5cdFx0dGVbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcclxuXHRcdHRlWzFdID0gKHh5ICsgd3opICogc3g7XHJcblx0XHR0ZVsyXSA9ICh4eiAtIHd5KSAqIHN4O1xyXG5cdFx0dGVbM10gPSAwO1xyXG5cclxuXHRcdHRlWzRdID0gKHh5IC0gd3opICogc3k7XHJcblx0XHR0ZVs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xyXG5cdFx0dGVbNl0gPSAoeXogKyB3eCkgKiBzeTtcclxuXHRcdHRlWzddID0gMDtcclxuXHJcblx0XHR0ZVs4XSA9ICh4eiArIHd5KSAqIHN6O1xyXG5cdFx0dGVbOV0gPSAoeXogLSB3eCkgKiBzejtcclxuXHRcdHRlWzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xyXG5cdFx0dGVbMTFdID0gMDtcclxuXHJcblx0XHR0ZVsxMl0gPSBwb3NpdGlvbi54O1xyXG5cdFx0dGVbMTNdID0gcG9zaXRpb24ueTtcclxuXHRcdHRlWzE0XSA9IHBvc2l0aW9uLno7XHJcblx0XHR0ZVsxNV0gPSAxO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkZWNvbXBvc2U6IGZ1bmN0aW9uIChwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cclxuXHRcdHZhciBzeCA9IF92MS5zZXQodGVbMF0sIHRlWzFdLCB0ZVsyXSkubGVuZ3RoKCk7XHJcblx0XHR2YXIgc3kgPSBfdjEuc2V0KHRlWzRdLCB0ZVs1XSwgdGVbNl0pLmxlbmd0aCgpO1xyXG5cdFx0dmFyIHN6ID0gX3YxLnNldCh0ZVs4XSwgdGVbOV0sIHRlWzEwXSkubGVuZ3RoKCk7XHJcblxyXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcclxuXHRcdHZhciBkZXQgPSB0aGlzLmRldGVybWluYW50KCk7XHJcblx0XHRpZiAoZGV0IDwgMCkgeyBzeCA9IC0gc3g7IH1cclxuXHJcblx0XHRwb3NpdGlvbi54ID0gdGVbMTJdO1xyXG5cdFx0cG9zaXRpb24ueSA9IHRlWzEzXTtcclxuXHRcdHBvc2l0aW9uLnogPSB0ZVsxNF07XHJcblxyXG5cdFx0Ly8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcclxuXHRcdF9tMS5jb3B5KHRoaXMpO1xyXG5cclxuXHRcdHZhciBpbnZTWCA9IDEgLyBzeDtcclxuXHRcdHZhciBpbnZTWSA9IDEgLyBzeTtcclxuXHRcdHZhciBpbnZTWiA9IDEgLyBzejtcclxuXHJcblx0XHRfbTEuZWxlbWVudHNbMF0gKj0gaW52U1g7XHJcblx0XHRfbTEuZWxlbWVudHNbMV0gKj0gaW52U1g7XHJcblx0XHRfbTEuZWxlbWVudHNbMl0gKj0gaW52U1g7XHJcblxyXG5cdFx0X20xLmVsZW1lbnRzWzRdICo9IGludlNZO1xyXG5cdFx0X20xLmVsZW1lbnRzWzVdICo9IGludlNZO1xyXG5cdFx0X20xLmVsZW1lbnRzWzZdICo9IGludlNZO1xyXG5cclxuXHRcdF9tMS5lbGVtZW50c1s4XSAqPSBpbnZTWjtcclxuXHRcdF9tMS5lbGVtZW50c1s5XSAqPSBpbnZTWjtcclxuXHRcdF9tMS5lbGVtZW50c1sxMF0gKj0gaW52U1o7XHJcblxyXG5cdFx0cXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoX20xKTtcclxuXHJcblx0XHRzY2FsZS54ID0gc3g7XHJcblx0XHRzY2FsZS55ID0gc3k7XHJcblx0XHRzY2FsZS56ID0gc3o7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1ha2VQZXJzcGVjdGl2ZTogZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyKSB7XHJcblxyXG5cdFx0aWYgKGZhciA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUGVyc3BlY3RpdmUoKSBoYXMgYmVlbiByZWRlZmluZWQgYW5kIGhhcyBhIG5ldyBzaWduYXR1cmUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcy4nKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcclxuXHRcdHZhciB4ID0gMiAqIG5lYXIgLyAocmlnaHQgLSBsZWZ0KTtcclxuXHRcdHZhciB5ID0gMiAqIG5lYXIgLyAodG9wIC0gYm90dG9tKTtcclxuXHJcblx0XHR2YXIgYSA9IChyaWdodCArIGxlZnQpIC8gKHJpZ2h0IC0gbGVmdCk7XHJcblx0XHR2YXIgYiA9ICh0b3AgKyBib3R0b20pIC8gKHRvcCAtIGJvdHRvbSk7XHJcblx0XHR2YXIgYyA9IC0gKGZhciArIG5lYXIpIC8gKGZhciAtIG5lYXIpO1xyXG5cdFx0dmFyIGQgPSAtIDIgKiBmYXIgKiBuZWFyIC8gKGZhciAtIG5lYXIpO1xyXG5cclxuXHRcdHRlWzBdID0geDsgdGVbNF0gPSAwOyB0ZVs4XSA9IGE7IHRlWzEyXSA9IDA7XHJcblx0XHR0ZVsxXSA9IDA7IHRlWzVdID0geTsgdGVbOV0gPSBiOyB0ZVsxM10gPSAwO1xyXG5cdFx0dGVbMl0gPSAwOyB0ZVs2XSA9IDA7IHRlWzEwXSA9IGM7IHRlWzE0XSA9IGQ7XHJcblx0XHR0ZVszXSA9IDA7IHRlWzddID0gMDsgdGVbMTFdID0gLSAxOyB0ZVsxNV0gPSAwO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYWtlT3J0aG9ncmFwaGljOiBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0dmFyIHcgPSAxLjAgLyAocmlnaHQgLSBsZWZ0KTtcclxuXHRcdHZhciBoID0gMS4wIC8gKHRvcCAtIGJvdHRvbSk7XHJcblx0XHR2YXIgcCA9IDEuMCAvIChmYXIgLSBuZWFyKTtcclxuXHJcblx0XHR2YXIgeCA9IChyaWdodCArIGxlZnQpICogdztcclxuXHRcdHZhciB5ID0gKHRvcCArIGJvdHRvbSkgKiBoO1xyXG5cdFx0dmFyIHogPSAoZmFyICsgbmVhcikgKiBwO1xyXG5cclxuXHRcdHRlWzBdID0gMiAqIHc7IHRlWzRdID0gMDsgdGVbOF0gPSAwOyB0ZVsxMl0gPSAtIHg7XHJcblx0XHR0ZVsxXSA9IDA7IHRlWzVdID0gMiAqIGg7IHRlWzldID0gMDsgdGVbMTNdID0gLSB5O1xyXG5cdFx0dGVbMl0gPSAwOyB0ZVs2XSA9IDA7IHRlWzEwXSA9IC0gMiAqIHA7IHRlWzE0XSA9IC0gejtcclxuXHRcdHRlWzNdID0gMDsgdGVbN10gPSAwOyB0ZVsxMV0gPSAwOyB0ZVsxNV0gPSAxO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlcXVhbHM6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xyXG5cdFx0dmFyIG1lID0gbWF0cml4LmVsZW1lbnRzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG5cclxuXHRcdFx0aWYgKHRlW2ldICE9PSBtZVtpXSkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5lbGVtZW50c1tpXSA9IGFycmF5W2kgKyBvZmZzZXRdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAoYXJyYXkgPT09IHVuZGVmaW5lZCkgeyBhcnJheSA9IFtdOyB9XHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0XSA9IHRlWzBdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMV0gPSB0ZVsxXTtcclxuXHRcdGFycmF5W29mZnNldCArIDJdID0gdGVbMl07XHJcblx0XHRhcnJheVtvZmZzZXQgKyAzXSA9IHRlWzNdO1xyXG5cclxuXHRcdGFycmF5W29mZnNldCArIDRdID0gdGVbNF07XHJcblx0XHRhcnJheVtvZmZzZXQgKyA1XSA9IHRlWzVdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgNl0gPSB0ZVs2XTtcclxuXHRcdGFycmF5W29mZnNldCArIDddID0gdGVbN107XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgOF0gPSB0ZVs4XTtcclxuXHRcdGFycmF5W29mZnNldCArIDldID0gdGVbOV07XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxMF0gPSB0ZVsxMF07XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxMV0gPSB0ZVsxMV07XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMTJdID0gdGVbMTJdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMTNdID0gdGVbMTNdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMTRdID0gdGVbMTRdO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMTVdID0gdGVbMTVdO1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cclxuICovXHJcblxyXG52YXIgX21hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfcXVhdGVybmlvbiQxID0gbmV3IFF1YXRlcm5pb24oKTtcclxuXHJcbmZ1bmN0aW9uIEV1bGVyKHgsIHksIHosIG9yZGVyKSB7XHJcblxyXG5cdHRoaXMuX3ggPSB4IHx8IDA7XHJcblx0dGhpcy5feSA9IHkgfHwgMDtcclxuXHR0aGlzLl96ID0geiB8fCAwO1xyXG5cdHRoaXMuX29yZGVyID0gb3JkZXIgfHwgRXVsZXIuRGVmYXVsdE9yZGVyO1xyXG5cclxufVxyXG5cclxuRXVsZXIuUm90YXRpb25PcmRlcnMgPSBbJ1hZWicsICdZWlgnLCAnWlhZJywgJ1haWScsICdZWFonLCAnWllYJ107XHJcblxyXG5FdWxlci5EZWZhdWx0T3JkZXIgPSAnWFlaJztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEV1bGVyLnByb3RvdHlwZSwge1xyXG5cclxuXHR4OiB7XHJcblxyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5feDtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHR0aGlzLl94ID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdHk6IHtcclxuXHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLl95O1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdHRoaXMuX3kgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0ejoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuX3o7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRvcmRlcjoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuX29yZGVyO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdHRoaXMuX29yZGVyID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmFzc2lnbihFdWxlci5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNFdWxlcjogdHJ1ZSxcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAoeCwgeSwgeiwgb3JkZXIpIHtcclxuXHJcblx0XHR0aGlzLl94ID0geDtcclxuXHRcdHRoaXMuX3kgPSB5O1xyXG5cdFx0dGhpcy5feiA9IHo7XHJcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyIHx8IHRoaXMuX29yZGVyO1xyXG5cclxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiwgdGhpcy5fb3JkZXIpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoZXVsZXIpIHtcclxuXHJcblx0XHR0aGlzLl94ID0gZXVsZXIuX3g7XHJcblx0XHR0aGlzLl95ID0gZXVsZXIuX3k7XHJcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XHJcblx0XHR0aGlzLl9vcmRlciA9IGV1bGVyLl9vcmRlcjtcclxuXHJcblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKG0sIG9yZGVyLCB1cGRhdGUpIHtcclxuXHJcblx0XHR2YXIgY2xhbXAgPSBfTWF0aC5jbGFtcDtcclxuXHJcblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxyXG5cclxuXHRcdHZhciB0ZSA9IG0uZWxlbWVudHM7XHJcblx0XHR2YXIgbTExID0gdGVbMF0sIG0xMiA9IHRlWzRdLCBtMTMgPSB0ZVs4XTtcclxuXHRcdHZhciBtMjEgPSB0ZVsxXSwgbTIyID0gdGVbNV0sIG0yMyA9IHRlWzldO1xyXG5cdFx0dmFyIG0zMSA9IHRlWzJdLCBtMzIgPSB0ZVs2XSwgbTMzID0gdGVbMTBdO1xyXG5cclxuXHRcdG9yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7XHJcblxyXG5cdFx0aWYgKG9yZGVyID09PSAnWFlaJykge1xyXG5cclxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbihjbGFtcChtMTMsIC0gMSwgMSkpO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKG0xMykgPCAwLjk5OTk5OTkpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IE1hdGguYXRhbjIoLSBtMjMsIG0zMyk7XHJcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoLSBtMTIsIG0xMSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMihtMzIsIG0yMik7XHJcblx0XHRcdFx0dGhpcy5feiA9IDA7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1lYWicpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ggPSBNYXRoLmFzaW4oLSBjbGFtcChtMjMsIC0gMSwgMSkpO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKG0yMykgPCAwLjk5OTk5OTkpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIobTEzLCBtMzMpO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKG0yMSwgbTIyKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKC0gbTMxLCBtMTEpO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAob3JkZXIgPT09ICdaWFknKSB7XHJcblxyXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKGNsYW1wKG0zMiwgLSAxLCAxKSk7XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMobTMyKSA8IDAuOTk5OTk5OSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMigtIG0zMSwgbTMzKTtcclxuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMigtIG0xMiwgbTIyKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3kgPSAwO1xyXG5cdFx0XHRcdHRoaXMuX3ogPSBNYXRoLmF0YW4yKG0yMSwgbTExKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKG9yZGVyID09PSAnWllYJykge1xyXG5cclxuXHRcdFx0dGhpcy5feSA9IE1hdGguYXNpbigtIGNsYW1wKG0zMSwgLSAxLCAxKSk7XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMobTMxKSA8IDAuOTk5OTk5OSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMihtMzIsIG0zMyk7XHJcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIobTIxLCBtMTEpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IDA7XHJcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoLSBtMTIsIG0yMik7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvcmRlciA9PT0gJ1laWCcpIHtcclxuXHJcblx0XHRcdHRoaXMuX3ogPSBNYXRoLmFzaW4oY2xhbXAobTIxLCAtIDEsIDEpKTtcclxuXHJcblx0XHRcdGlmIChNYXRoLmFicyhtMjEpIDwgMC45OTk5OTk5KSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKC0gbTIzLCBtMjIpO1xyXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKC0gbTMxLCBtMTEpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0dGhpcy5feCA9IDA7XHJcblx0XHRcdFx0dGhpcy5feSA9IE1hdGguYXRhbjIobTEzLCBtMzMpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAob3JkZXIgPT09ICdYWlknKSB7XHJcblxyXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKC0gY2xhbXAobTEyLCAtIDEsIDEpKTtcclxuXHJcblx0XHRcdGlmIChNYXRoLmFicyhtMTIpIDwgMC45OTk5OTk5KSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKG0zMiwgbTIyKTtcclxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMihtMTMsIG0xMSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMigtIG0yMywgbTMzKTtcclxuXHRcdFx0XHR0aGlzLl95ID0gMDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5FdWxlcjogLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGdpdmVuIHVuc3VwcG9ydGVkIG9yZGVyOiAnICsgb3JkZXIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xyXG5cclxuXHRcdGlmICh1cGRhdGUgIT09IGZhbHNlKSB7IHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTsgfVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKHEsIG9yZGVyLCB1cGRhdGUpIHtcclxuXHJcblx0XHRfbWF0cml4Lm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldEZyb21Sb3RhdGlvbk1hdHJpeChfbWF0cml4LCBvcmRlciwgdXBkYXRlKTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICh2LCBvcmRlcikge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldCh2LngsIHYueSwgdi56LCBvcmRlciB8fCB0aGlzLl9vcmRlcik7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJlb3JkZXI6IGZ1bmN0aW9uIChuZXdPcmRlcikge1xyXG5cclxuXHRcdC8vIFdBUk5JTkc6IHRoaXMgZGlzY2FyZHMgcmV2b2x1dGlvbiBpbmZvcm1hdGlvbiAtYmhvdXN0b25cclxuXHJcblx0XHRfcXVhdGVybmlvbiQxLnNldEZyb21FdWxlcih0aGlzKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tUXVhdGVybmlvbihfcXVhdGVybmlvbiQxLCBuZXdPcmRlcik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKGV1bGVyKSB7XHJcblxyXG5cdFx0cmV0dXJuIChldWxlci5feCA9PT0gdGhpcy5feCkgJiYgKGV1bGVyLl95ID09PSB0aGlzLl95KSAmJiAoZXVsZXIuX3ogPT09IHRoaXMuX3opICYmIChldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuXHJcblx0XHR0aGlzLl94ID0gYXJyYXlbMF07XHJcblx0XHR0aGlzLl95ID0gYXJyYXlbMV07XHJcblx0XHR0aGlzLl96ID0gYXJyYXlbMl07XHJcblx0XHRpZiAoYXJyYXlbM10gIT09IHVuZGVmaW5lZCkgeyB0aGlzLl9vcmRlciA9IGFycmF5WzNdOyB9XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChhcnJheSA9PT0gdW5kZWZpbmVkKSB7IGFycmF5ID0gW107IH1cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0YXJyYXlbb2Zmc2V0XSA9IHRoaXMuX3g7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAxXSA9IHRoaXMuX3k7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAyXSA9IHRoaXMuX3o7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAzXSA9IHRoaXMuX29yZGVyO1xyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fSxcclxuXHJcblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAob3B0aW9uYWxSZXN1bHQpIHtcclxuXHJcblx0XHRpZiAob3B0aW9uYWxSZXN1bHQpIHtcclxuXHJcblx0XHRcdHJldHVybiBvcHRpb25hbFJlc3VsdC5zZXQodGhpcy5feCwgdGhpcy5feSwgdGhpcy5feik7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdF9vbkNoYW5nZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblxyXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRfb25DaGFuZ2VDYWxsYmFjazogZnVuY3Rpb24gKCkgeyB9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIExheWVycygpIHtcclxuXHJcblx0dGhpcy5tYXNrID0gMSB8IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKExheWVycy5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAoY2hhbm5lbCkge1xyXG5cclxuXHRcdHRoaXMubWFzayA9IDEgPDwgY2hhbm5lbCB8IDA7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVuYWJsZTogZnVuY3Rpb24gKGNoYW5uZWwpIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgfD0gMSA8PCBjaGFubmVsIHwgMDtcclxuXHJcblx0fSxcclxuXHJcblx0ZW5hYmxlQWxsOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5tYXNrID0gMHhmZmZmZmZmZiB8IDA7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvZ2dsZTogZnVuY3Rpb24gKGNoYW5uZWwpIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgXj0gMSA8PCBjaGFubmVsIHwgMDtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzYWJsZTogZnVuY3Rpb24gKGNoYW5uZWwpIHtcclxuXHJcblx0XHR0aGlzLm1hc2sgJj0gfigxIDw8IGNoYW5uZWwgfCAwKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzYWJsZUFsbDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMubWFzayA9IDA7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRlc3Q6IGZ1bmN0aW9uIChsYXllcnMpIHtcclxuXHJcblx0XHRyZXR1cm4gKHRoaXMubWFzayAmIGxheWVycy5tYXNrKSAhPT0gMDtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG52YXIgX29iamVjdDNESWQgPSAwO1xyXG5cclxudmFyIF92MSQxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9xMSA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbnZhciBfbTEkMSA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbnZhciBfcG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3NjYWxlID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9xdWF0ZXJuaW9uJDIgPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cclxudmFyIF94QXhpcyA9IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xyXG52YXIgX3lBeGlzID0gbmV3IFZlY3RvcjMoMCwgMSwgMCk7XHJcbnZhciBfekF4aXMgPSBuZXcgVmVjdG9yMygwLCAwLCAxKTtcclxuXHJcbnZhciBfYWRkZWRFdmVudCA9IHsgdHlwZTogJ2FkZGVkJyB9O1xyXG52YXIgX3JlbW92ZWRFdmVudCA9IHsgdHlwZTogJ3JlbW92ZWQnIH07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3IgZWxlcGhhbnRhdHdvcmsgLyB3d3cuZWxlcGhhbnRhdHdvcmsuY2hcclxuICovXHJcblxyXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcclxuXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpZCcsIHsgdmFsdWU6IF9vYmplY3QzRElkKysgfSk7XHJcblxyXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHR0aGlzLm5hbWUgPSAnJztcclxuXHR0aGlzLnR5cGUgPSAnT2JqZWN0M0QnO1xyXG5cclxuXHR0aGlzLnBhcmVudCA9IG51bGw7XHJcblx0dGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuXHR0aGlzLnVwID0gT2JqZWN0M0QuRGVmYXVsdFVwLmNsb25lKCk7XHJcblxyXG5cdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIHJvdGF0aW9uID0gbmV3IEV1bGVyKCk7XHJcblx0dmFyIHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xyXG5cclxuXHRmdW5jdGlvbiBvblJvdGF0aW9uQ2hhbmdlKCkge1xyXG5cclxuXHRcdHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKHJvdGF0aW9uLCBmYWxzZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkge1xyXG5cclxuXHRcdHJvdGF0aW9uLnNldEZyb21RdWF0ZXJuaW9uKHF1YXRlcm5pb24sIHVuZGVmaW5lZCwgZmFsc2UpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJvdGF0aW9uLl9vbkNoYW5nZShvblJvdGF0aW9uQ2hhbmdlKTtcclxuXHRxdWF0ZXJuaW9uLl9vbkNoYW5nZShvblF1YXRlcm5pb25DaGFuZ2UpO1xyXG5cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XHJcblx0XHRwb3NpdGlvbjoge1xyXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdHZhbHVlOiBwb3NpdGlvblxyXG5cdFx0fSxcclxuXHRcdHJvdGF0aW9uOiB7XHJcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0dmFsdWU6IHJvdGF0aW9uXHJcblx0XHR9LFxyXG5cdFx0cXVhdGVybmlvbjoge1xyXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdHZhbHVlOiBxdWF0ZXJuaW9uXHJcblx0XHR9LFxyXG5cdFx0c2NhbGU6IHtcclxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHR2YWx1ZTogc2NhbGVcclxuXHRcdH0sXHJcblx0XHRtb2RlbFZpZXdNYXRyaXg6IHtcclxuXHRcdFx0dmFsdWU6IG5ldyBNYXRyaXg0KClcclxuXHRcdH0sXHJcblx0XHRub3JtYWxNYXRyaXg6IHtcclxuXHRcdFx0dmFsdWU6IG5ldyBNYXRyaXgzKClcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dGhpcy5tYXRyaXggPSBuZXcgTWF0cml4NCgpO1xyXG5cdHRoaXMubWF0cml4V29ybGQgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBPYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTtcclxuXHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XHJcblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuXHJcblx0dGhpcy5jYXN0U2hhZG93ID0gZmFsc2U7XHJcblx0dGhpcy5yZWNlaXZlU2hhZG93ID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblx0dGhpcy5yZW5kZXJPcmRlciA9IDA7XHJcblxyXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcclxuXHJcbn1cclxuXHJcbk9iamVjdDNELkRlZmF1bHRVcCA9IG5ldyBWZWN0b3IzKDAsIDEsIDApO1xyXG5PYmplY3QzRC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XHJcblxyXG5PYmplY3QzRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IE9iamVjdDNELFxyXG5cclxuXHRpc09iamVjdDNEOiB0cnVlLFxyXG5cclxuXHRvbkJlZm9yZVJlbmRlcjogZnVuY3Rpb24gKCkgeyB9LFxyXG5cdG9uQWZ0ZXJSZW5kZXI6IGZ1bmN0aW9uICgpIHsgfSxcclxuXHJcblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHRpZiAodGhpcy5tYXRyaXhBdXRvVXBkYXRlKSB7IHRoaXMudXBkYXRlTWF0cml4KCk7IH1cclxuXHJcblx0XHR0aGlzLm1hdHJpeC5wcmVtdWx0aXBseShtYXRyaXgpO1xyXG5cclxuXHRcdHRoaXMubWF0cml4LmRlY29tcG9zZSh0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhcHBseVF1YXRlcm5pb246IGZ1bmN0aW9uIChxKSB7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KHEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGU6IGZ1bmN0aW9uIChheGlzLCBhbmdsZSkge1xyXG5cclxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoYXhpcywgYW5nbGUpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRSb3RhdGlvbkZyb21FdWxlcjogZnVuY3Rpb24gKGV1bGVyKSB7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21FdWxlcihldWxlciwgdHJ1ZSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJvdGF0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgobSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uIChxKSB7XHJcblxyXG5cdFx0Ly8gYXNzdW1lcyBxIGlzIG5vcm1hbGl6ZWRcclxuXHJcblx0XHR0aGlzLnF1YXRlcm5pb24uY29weShxKTtcclxuXHJcblx0fSxcclxuXHJcblx0cm90YXRlT25BeGlzOiBmdW5jdGlvbiAoYXhpcywgYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgb2JqZWN0IG9uIGF4aXMgaW4gb2JqZWN0IHNwYWNlXHJcblx0XHQvLyBheGlzIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxyXG5cclxuXHRcdF9xMS5zZXRGcm9tQXhpc0FuZ2xlKGF4aXMsIGFuZ2xlKTtcclxuXHJcblx0XHR0aGlzLnF1YXRlcm5pb24ubXVsdGlwbHkoX3ExKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0cm90YXRlT25Xb3JsZEF4aXM6IGZ1bmN0aW9uIChheGlzLCBhbmdsZSkge1xyXG5cclxuXHRcdC8vIHJvdGF0ZSBvYmplY3Qgb24gYXhpcyBpbiB3b3JsZCBzcGFjZVxyXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcclxuXHRcdC8vIG1ldGhvZCBhc3N1bWVzIG5vIHJvdGF0ZWQgcGFyZW50XHJcblxyXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoYXhpcywgYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseShfcTEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoX3hBeGlzLCBhbmdsZSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uIChhbmdsZSkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhfeUF4aXMsIGFuZ2xlKTtcclxuXHJcblx0fSxcclxuXHJcblx0cm90YXRlWjogZnVuY3Rpb24gKGFuZ2xlKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKF96QXhpcywgYW5nbGUpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uIChheGlzLCBkaXN0YW5jZSkge1xyXG5cclxuXHRcdC8vIHRyYW5zbGF0ZSBvYmplY3QgYnkgZGlzdGFuY2UgYWxvbmcgYXhpcyBpbiBvYmplY3Qgc3BhY2VcclxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdFx0X3YxJDEuY29weShheGlzKS5hcHBseVF1YXRlcm5pb24odGhpcy5xdWF0ZXJuaW9uKTtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLmFkZChfdjEkMS5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGVYOiBmdW5jdGlvbiAoZGlzdGFuY2UpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoX3hBeGlzLCBkaXN0YW5jZSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zbGF0ZVk6IGZ1bmN0aW9uIChkaXN0YW5jZSkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhfeUF4aXMsIGRpc3RhbmNlKTtcclxuXHJcblx0fSxcclxuXHJcblx0dHJhbnNsYXRlWjogZnVuY3Rpb24gKGRpc3RhbmNlKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKF96QXhpcywgZGlzdGFuY2UpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsb2NhbFRvV29ybGQ6IGZ1bmN0aW9uICh2ZWN0b3IpIHtcclxuXHJcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0fSxcclxuXHJcblx0d29ybGRUb0xvY2FsOiBmdW5jdGlvbiAodmVjdG9yKSB7XHJcblxyXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoX20xJDEuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxvb2tBdDogZnVuY3Rpb24gKHgsIHksIHopIHtcclxuXHJcblx0XHQvLyBUaGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgaGF2aW5nIG5vbi11bmlmb3JtbHktc2NhbGVkIHBhcmVudChzKVxyXG5cclxuXHRcdGlmICh4LmlzVmVjdG9yMykge1xyXG5cclxuXHRcdFx0X3RhcmdldC5jb3B5KHgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfdGFyZ2V0LnNldCh4LCB5LCB6KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG5cclxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgodHJ1ZSwgZmFsc2UpO1xyXG5cclxuXHRcdF9wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0KSB7XHJcblxyXG5cdFx0XHRfbTEkMS5sb29rQXQoX3Bvc2l0aW9uLCBfdGFyZ2V0LCB0aGlzLnVwKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X20xJDEubG9va0F0KF90YXJnZXQsIF9wb3NpdGlvbiwgdGhpcy51cCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoX20xJDEpO1xyXG5cclxuXHRcdGlmIChwYXJlbnQpIHtcclxuXHJcblx0XHRcdF9tMSQxLmV4dHJhY3RSb3RhdGlvbihwYXJlbnQubWF0cml4V29ybGQpO1xyXG5cdFx0XHRfcTEuc2V0RnJvbVJvdGF0aW9uTWF0cml4KF9tMSQxKTtcclxuXHRcdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KF9xMS5pbnZlcnNlKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHR0aGlzLmFkZChhcmd1bWVudHNbaV0pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvYmplY3QgPT09IHRoaXMpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBjYW4ndCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIGl0c2VsZi5cIiwgb2JqZWN0KTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgob2JqZWN0ICYmIG9iamVjdC5pc09iamVjdDNEKSkge1xyXG5cclxuXHRcdFx0aWYgKG9iamVjdC5wYXJlbnQgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0b2JqZWN0LnBhcmVudC5yZW1vdmUob2JqZWN0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG9iamVjdC5wYXJlbnQgPSB0aGlzO1xyXG5cdFx0XHR0aGlzLmNoaWxkcmVuLnB1c2gob2JqZWN0KTtcclxuXHJcblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KF9hZGRlZEV2ZW50KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlRIUkVFLk9iamVjdDNELmFkZDogb2JqZWN0IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5PYmplY3QzRC5cIiwgb2JqZWN0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24gKG9iamVjdCkge1xyXG5cclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dGhpcy5yZW1vdmUoYXJndW1lbnRzW2ldKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2Yob2JqZWN0KTtcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IC0gMSkge1xyXG5cclxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IG51bGw7XHJcblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcblx0XHRcdG9iamVjdC5kaXNwYXRjaEV2ZW50KF9yZW1vdmVkRXZlbnQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YXR0YWNoOiBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0Ly8gYWRkcyBvYmplY3QgYXMgYSBjaGlsZCBvZiB0aGlzLCB3aGlsZSBtYWludGFpbmluZyB0aGUgb2JqZWN0J3Mgd29ybGQgdHJhbnNmb3JtXHJcblxyXG5cdFx0dGhpcy51cGRhdGVXb3JsZE1hdHJpeCh0cnVlLCBmYWxzZSk7XHJcblxyXG5cdFx0X20xJDEuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRpZiAob2JqZWN0LnBhcmVudCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0b2JqZWN0LnBhcmVudC51cGRhdGVXb3JsZE1hdHJpeCh0cnVlLCBmYWxzZSk7XHJcblxyXG5cdFx0XHRfbTEkMS5tdWx0aXBseShvYmplY3QucGFyZW50Lm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0b2JqZWN0LmFwcGx5TWF0cml4KF9tMSQxKTtcclxuXHJcblx0XHRvYmplY3QudXBkYXRlV29ybGRNYXRyaXgoZmFsc2UsIGZhbHNlKTtcclxuXHJcblx0XHR0aGlzLmFkZChvYmplY3QpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRPYmplY3RCeUlkOiBmdW5jdGlvbiAoaWQpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCdpZCcsIGlkKTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0T2JqZWN0QnlOYW1lOiBmdW5jdGlvbiAobmFtZSkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoJ25hbWUnLCBuYW1lKTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0T2JqZWN0QnlQcm9wZXJ0eTogZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XHJcblxyXG5cdFx0aWYgKHRoaXNbbmFtZV0gPT09IHZhbHVlKSB7IHJldHVybiB0aGlzOyB9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcclxuXHRcdFx0dmFyIG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkobmFtZSwgdmFsdWUpO1xyXG5cclxuXHRcdFx0aWYgKG9iamVjdCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBvYmplY3Q7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFdvcmxkUG9zaXRpb246IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFBvc2l0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRXb3JsZFF1YXRlcm5pb246IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFF1YXRlcm5pb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoX3Bvc2l0aW9uLCB0YXJnZXQsIF9zY2FsZSk7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0V29ybGRTY2FsZTogZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3QzRDogLmdldFdvcmxkU2NhbGUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiQyLCB0YXJnZXQpO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFdvcmxkRGlyZWN0aW9uOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblxyXG5cdFx0dmFyIGUgPSB0aGlzLm1hdHJpeFdvcmxkLmVsZW1lbnRzO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0KGVbOF0sIGVbOV0sIGVbMTBdKS5ub3JtYWxpemUoKTtcclxuXHJcblx0fSxcclxuXHJcblx0cmF5Y2FzdDogZnVuY3Rpb24gKCkgeyB9LFxyXG5cclxuXHR0cmF2ZXJzZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblxyXG5cdFx0Y2FsbGJhY2sodGhpcyk7XHJcblxyXG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0Y2hpbGRyZW5baV0udHJhdmVyc2UoY2FsbGJhY2spO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dHJhdmVyc2VWaXNpYmxlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHJcblx0XHRpZiAodGhpcy52aXNpYmxlID09PSBmYWxzZSkgeyByZXR1cm47IH1cclxuXHJcblx0XHRjYWxsYmFjayh0aGlzKTtcclxuXHJcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRjaGlsZHJlbltpXS50cmF2ZXJzZVZpc2libGUoY2FsbGJhY2spO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dHJhdmVyc2VBbmNlc3RvcnM6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG5cclxuXHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcclxuXHJcblx0XHRpZiAocGFyZW50ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRjYWxsYmFjayhwYXJlbnQpO1xyXG5cclxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKGNhbGxiYWNrKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMubWF0cml4LmNvbXBvc2UodGhpcy5wb3NpdGlvbiwgdGhpcy5xdWF0ZXJuaW9uLCB0aGlzLnNjYWxlKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9LFxyXG5cclxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKGZvcmNlKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMubWF0cml4QXV0b1VwZGF0ZSkgeyB0aGlzLnVwZGF0ZU1hdHJpeCgpOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSB8fCBmb3JjZSkge1xyXG5cclxuXHRcdFx0aWYgKHRoaXMucGFyZW50ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cclxuXHJcblx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRjaGlsZHJlbltpXS51cGRhdGVNYXRyaXhXb3JsZChmb3JjZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHR1cGRhdGVXb3JsZE1hdHJpeDogZnVuY3Rpb24gKHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKSB7XHJcblxyXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xyXG5cclxuXHRcdGlmICh1cGRhdGVQYXJlbnRzID09PSB0cnVlICYmIHBhcmVudCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0cGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KHRydWUsIGZhbHNlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMubWF0cml4QXV0b1VwZGF0ZSkgeyB0aGlzLnVwZGF0ZU1hdHJpeCgpOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMucGFyZW50ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXHJcblxyXG5cdFx0aWYgKHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0Y2hpbGRyZW5baV0udXBkYXRlV29ybGRNYXRyaXgoZmFsc2UsIHRydWUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHRcdC8vIG1ldGEgaXMgYSBzdHJpbmcgd2hlbiBjYWxsZWQgZnJvbSBKU09OLnN0cmluZ2lmeVxyXG5cdFx0dmFyIGlzUm9vdE9iamVjdCA9IChtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnKTtcclxuXHJcblx0XHR2YXIgb3V0cHV0ID0ge307XHJcblxyXG5cdFx0Ly8gbWV0YSBpcyBhIGhhc2ggdXNlZCB0byBjb2xsZWN0IGdlb21ldHJpZXMsIG1hdGVyaWFscy5cclxuXHRcdC8vIG5vdCBwcm92aWRpbmcgaXQgaW1wbGllcyB0aGF0IHRoaXMgaXMgdGhlIHJvb3Qgb2JqZWN0XHJcblx0XHQvLyBiZWluZyBzZXJpYWxpemVkLlxyXG5cdFx0aWYgKGlzUm9vdE9iamVjdCkge1xyXG5cclxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBtZXRhIG9ialxyXG5cdFx0XHRtZXRhID0ge1xyXG5cdFx0XHRcdGdlb21ldHJpZXM6IHt9LFxyXG5cdFx0XHRcdG1hdGVyaWFsczoge30sXHJcblx0XHRcdFx0dGV4dHVyZXM6IHt9LFxyXG5cdFx0XHRcdGltYWdlczoge30sXHJcblx0XHRcdFx0c2hhcGVzOiB7fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0b3V0cHV0Lm1ldGFkYXRhID0ge1xyXG5cdFx0XHRcdHZlcnNpb246IDQuNSxcclxuXHRcdFx0XHR0eXBlOiAnT2JqZWN0JyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdPYmplY3QzRC50b0pTT04nXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHN0YW5kYXJkIE9iamVjdDNEIHNlcmlhbGl6YXRpb25cclxuXHJcblx0XHR2YXIgb2JqZWN0ID0ge307XHJcblxyXG5cdFx0b2JqZWN0LnV1aWQgPSB0aGlzLnV1aWQ7XHJcblx0XHRvYmplY3QudHlwZSA9IHRoaXMudHlwZTtcclxuXHJcblx0XHRpZiAodGhpcy5uYW1lICE9PSAnJykgeyBvYmplY3QubmFtZSA9IHRoaXMubmFtZTsgfVxyXG5cdFx0aWYgKHRoaXMuY2FzdFNoYWRvdyA9PT0gdHJ1ZSkgeyBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7IH1cclxuXHRcdGlmICh0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUpIHsgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSB0cnVlOyB9XHJcblx0XHRpZiAodGhpcy52aXNpYmxlID09PSBmYWxzZSkgeyBvYmplY3QudmlzaWJsZSA9IGZhbHNlOyB9XHJcblx0XHRpZiAodGhpcy5mcnVzdHVtQ3VsbGVkID09PSBmYWxzZSkgeyBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlOyB9XHJcblx0XHRpZiAodGhpcy5yZW5kZXJPcmRlciAhPT0gMCkgeyBvYmplY3QucmVuZGVyT3JkZXIgPSB0aGlzLnJlbmRlck9yZGVyOyB9XHJcblx0XHRpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyRGF0YSkgIT09ICd7fScpIHsgb2JqZWN0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTsgfVxyXG5cclxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xyXG5cdFx0b2JqZWN0Lm1hdHJpeCA9IHRoaXMubWF0cml4LnRvQXJyYXkoKTtcclxuXHJcblx0XHRpZiAodGhpcy5tYXRyaXhBdXRvVXBkYXRlID09PSBmYWxzZSkgeyBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlOyB9XHJcblxyXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcclxuXHJcblx0XHRpZiAodGhpcy5pc01lc2ggJiYgdGhpcy5kcmF3TW9kZSAhPT0gVHJpYW5nbGVzRHJhd01vZGUpIHsgb2JqZWN0LmRyYXdNb2RlID0gdGhpcy5kcmF3TW9kZTsgfVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0ZnVuY3Rpb24gc2VyaWFsaXplKGxpYnJhcnksIGVsZW1lbnQpIHtcclxuXHJcblx0XHRcdGlmIChsaWJyYXJ5W2VsZW1lbnQudXVpZF0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRsaWJyYXJ5W2VsZW1lbnQudXVpZF0gPSBlbGVtZW50LnRvSlNPTihtZXRhKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBlbGVtZW50LnV1aWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmlzTWVzaCB8fCB0aGlzLmlzTGluZSB8fCB0aGlzLmlzUG9pbnRzKSB7XHJcblxyXG5cdFx0XHRvYmplY3QuZ2VvbWV0cnkgPSBzZXJpYWxpemUobWV0YS5nZW9tZXRyaWVzLCB0aGlzLmdlb21ldHJ5KTtcclxuXHJcblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzO1xyXG5cclxuXHRcdFx0aWYgKHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCAmJiBwYXJhbWV0ZXJzLnNoYXBlcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzaGFwZXMgPSBwYXJhbWV0ZXJzLnNoYXBlcztcclxuXHJcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoc2hhcGVzKSkge1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzW2ldO1xyXG5cclxuXHRcdFx0XHRcdFx0c2VyaWFsaXplKG1ldGEuc2hhcGVzLCBzaGFwZSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHNlcmlhbGl6ZShtZXRhLnNoYXBlcywgc2hhcGVzKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5tYXRlcmlhbCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm1hdGVyaWFsKSkge1xyXG5cclxuXHRcdFx0XHR2YXIgdXVpZHMgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdHV1aWRzLnB1c2goc2VyaWFsaXplKG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsW2ldKSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0b2JqZWN0Lm1hdGVyaWFsID0gdXVpZHM7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUobWV0YS5tYXRlcmlhbHMsIHRoaXMubWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdG9iamVjdC5jaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5jaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0udG9KU09OKG1ldGEpLm9iamVjdCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChpc1Jvb3RPYmplY3QpIHtcclxuXHJcblx0XHRcdHZhciBnZW9tZXRyaWVzID0gZXh0cmFjdEZyb21DYWNoZShtZXRhLmdlb21ldHJpZXMpO1xyXG5cdFx0XHR2YXIgbWF0ZXJpYWxzID0gZXh0cmFjdEZyb21DYWNoZShtZXRhLm1hdGVyaWFscyk7XHJcblx0XHRcdHZhciB0ZXh0dXJlcyA9IGV4dHJhY3RGcm9tQ2FjaGUobWV0YS50ZXh0dXJlcyk7XHJcblx0XHRcdHZhciBpbWFnZXMgPSBleHRyYWN0RnJvbUNhY2hlKG1ldGEuaW1hZ2VzKTtcclxuXHRcdFx0dmFyIHNoYXBlcyA9IGV4dHJhY3RGcm9tQ2FjaGUobWV0YS5zaGFwZXMpO1xyXG5cclxuXHRcdFx0aWYgKGdlb21ldHJpZXMubGVuZ3RoID4gMCkgeyBvdXRwdXQuZ2VvbWV0cmllcyA9IGdlb21ldHJpZXM7IH1cclxuXHRcdFx0aWYgKG1hdGVyaWFscy5sZW5ndGggPiAwKSB7IG91dHB1dC5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7IH1cclxuXHRcdFx0aWYgKHRleHR1cmVzLmxlbmd0aCA+IDApIHsgb3V0cHV0LnRleHR1cmVzID0gdGV4dHVyZXM7IH1cclxuXHRcdFx0aWYgKGltYWdlcy5sZW5ndGggPiAwKSB7IG91dHB1dC5pbWFnZXMgPSBpbWFnZXM7IH1cclxuXHRcdFx0aWYgKHNoYXBlcy5sZW5ndGggPiAwKSB7IG91dHB1dC5zaGFwZXMgPSBzaGFwZXM7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0b3V0cHV0Lm9iamVjdCA9IG9iamVjdDtcclxuXHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cclxuXHRcdC8vIGV4dHJhY3QgZGF0YSBmcm9tIHRoZSBjYWNoZSBoYXNoXHJcblx0XHQvLyByZW1vdmUgbWV0YWRhdGEgb24gZWFjaCBpdGVtXHJcblx0XHQvLyBhbmQgcmV0dXJuIGFzIGFycmF5XHJcblx0XHRmdW5jdGlvbiBleHRyYWN0RnJvbUNhY2hlKGNhY2hlKSB7XHJcblxyXG5cdFx0XHR2YXIgdmFsdWVzID0gW107XHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xyXG5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlW2tleV07XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XHJcblx0XHRcdFx0dmFsdWVzLnB1c2goZGF0YSk7XHJcblxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiB2YWx1ZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKHJlY3Vyc2l2ZSkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcywgcmVjdXJzaXZlKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSwgcmVjdXJzaXZlKSB7XHJcblxyXG5cdFx0aWYgKHJlY3Vyc2l2ZSA9PT0gdW5kZWZpbmVkKSB7IHJlY3Vyc2l2ZSA9IHRydWU7IH1cclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHJcblx0XHR0aGlzLnVwLmNvcHkoc291cmNlLnVwKTtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoc291cmNlLnBvc2l0aW9uKTtcclxuXHRcdHRoaXMucXVhdGVybmlvbi5jb3B5KHNvdXJjZS5xdWF0ZXJuaW9uKTtcclxuXHRcdHRoaXMuc2NhbGUuY29weShzb3VyY2Uuc2NhbGUpO1xyXG5cclxuXHRcdHRoaXMubWF0cml4LmNvcHkoc291cmNlLm1hdHJpeCk7XHJcblx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoc291cmNlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcclxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xyXG5cclxuXHRcdHRoaXMubGF5ZXJzLm1hc2sgPSBzb3VyY2UubGF5ZXJzLm1hc2s7XHJcblx0XHR0aGlzLnZpc2libGUgPSBzb3VyY2UudmlzaWJsZTtcclxuXHJcblx0XHR0aGlzLmNhc3RTaGFkb3cgPSBzb3VyY2UuY2FzdFNoYWRvdztcclxuXHRcdHRoaXMucmVjZWl2ZVNoYWRvdyA9IHNvdXJjZS5yZWNlaXZlU2hhZG93O1xyXG5cclxuXHRcdHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHNvdXJjZS5mcnVzdHVtQ3VsbGVkO1xyXG5cdFx0dGhpcy5yZW5kZXJPcmRlciA9IHNvdXJjZS5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHR0aGlzLnVzZXJEYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzb3VyY2UudXNlckRhdGEpKTtcclxuXHJcblx0XHRpZiAocmVjdXJzaXZlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHR2YXIgY2hpbGQgPSBzb3VyY2UuY2hpbGRyZW5baV07XHJcblx0XHRcdFx0dGhpcy5hZGQoY2hpbGQuY2xvbmUoKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFNjZW5lKCkge1xyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU2NlbmUnO1xyXG5cclxuXHR0aGlzLmJhY2tncm91bmQgPSBudWxsO1xyXG5cdHRoaXMuZm9nID0gbnVsbDtcclxuXHR0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBudWxsO1xyXG5cclxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxyXG5cclxuXHRpZiAodHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcblx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9KSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuU2NlbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFNjZW5lLFxyXG5cclxuXHRpc1NjZW5lOiB0cnVlLFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlLCByZWN1cnNpdmUpIHtcclxuXHJcblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlKTtcclxuXHJcblx0XHRpZiAoc291cmNlLmJhY2tncm91bmQgIT09IG51bGwpIHsgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTsgfVxyXG5cdFx0aWYgKHNvdXJjZS5mb2cgIT09IG51bGwpIHsgdGhpcy5mb2cgPSBzb3VyY2UuZm9nLmNsb25lKCk7IH1cclxuXHRcdGlmIChzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbCAhPT0gbnVsbCkgeyB0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpOyB9XHJcblxyXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gc291cmNlLmF1dG9VcGRhdGU7XHJcblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIG1ldGEpO1xyXG5cclxuXHRcdGlmICh0aGlzLmJhY2tncm91bmQgIT09IG51bGwpIHsgZGF0YS5vYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04obWV0YSk7IH1cclxuXHRcdGlmICh0aGlzLmZvZyAhPT0gbnVsbCkgeyBkYXRhLm9iamVjdC5mb2cgPSB0aGlzLmZvZy50b0pTT04oKTsgfVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ2Rpc3Bvc2UnIH0pO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbnZhciBfcG9pbnRzID0gW1xyXG5cdG5ldyBWZWN0b3IzKCksXHJcblx0bmV3IFZlY3RvcjMoKSxcclxuXHRuZXcgVmVjdG9yMygpLFxyXG5cdG5ldyBWZWN0b3IzKCksXHJcblx0bmV3IFZlY3RvcjMoKSxcclxuXHRuZXcgVmVjdG9yMygpLFxyXG5cdG5ldyBWZWN0b3IzKCksXHJcblx0bmV3IFZlY3RvcjMoKVxyXG5dO1xyXG52YXIgX3ZlY3RvciQyID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbi8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXHJcblxyXG52YXIgX3YwID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MSQyID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MiA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG4vLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcclxuXHJcbnZhciBfZjAgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2YxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9mMiA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG52YXIgX2NlbnRlciA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfZXh0ZW50cyA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3Rlc3RBeGlzID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEJveDMobWluLCBtYXgpIHtcclxuXHJcblx0dGhpcy5taW4gPSAobWluICE9PSB1bmRlZmluZWQpID8gbWluIDogbmV3IFZlY3RvcjMoKyBJbmZpbml0eSwgKyBJbmZpbml0eSwgKyBJbmZpbml0eSk7XHJcblx0dGhpcy5tYXggPSAobWF4ICE9PSB1bmRlZmluZWQpID8gbWF4IDogbmV3IFZlY3RvcjMoLSBJbmZpbml0eSwgLSBJbmZpbml0eSwgLSBJbmZpbml0eSk7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKEJveDMucHJvdG90eXBlLCB7XHJcblxyXG5cdGlzQm94MzogdHJ1ZSxcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAobWluLCBtYXgpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5jb3B5KG1pbik7XHJcblx0XHR0aGlzLm1heC5jb3B5KG1heCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEZyb21BcnJheTogZnVuY3Rpb24gKGFycmF5KSB7XHJcblxyXG5cdFx0dmFyIG1pblggPSArIEluZmluaXR5O1xyXG5cdFx0dmFyIG1pblkgPSArIEluZmluaXR5O1xyXG5cdFx0dmFyIG1pblogPSArIEluZmluaXR5O1xyXG5cclxuXHRcdHZhciBtYXhYID0gLSBJbmZpbml0eTtcclxuXHRcdHZhciBtYXhZID0gLSBJbmZpbml0eTtcclxuXHRcdHZhciBtYXhaID0gLSBJbmZpbml0eTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMykge1xyXG5cclxuXHRcdFx0dmFyIHggPSBhcnJheVtpXTtcclxuXHRcdFx0dmFyIHkgPSBhcnJheVtpICsgMV07XHJcblx0XHRcdHZhciB6ID0gYXJyYXlbaSArIDJdO1xyXG5cclxuXHRcdFx0aWYgKHggPCBtaW5YKSB7IG1pblggPSB4OyB9XHJcblx0XHRcdGlmICh5IDwgbWluWSkgeyBtaW5ZID0geTsgfVxyXG5cdFx0XHRpZiAoeiA8IG1pblopIHsgbWluWiA9IHo7IH1cclxuXHJcblx0XHRcdGlmICh4ID4gbWF4WCkgeyBtYXhYID0geDsgfVxyXG5cdFx0XHRpZiAoeSA+IG1heFkpIHsgbWF4WSA9IHk7IH1cclxuXHRcdFx0aWYgKHogPiBtYXhaKSB7IG1heFogPSB6OyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubWluLnNldChtaW5YLCBtaW5ZLCBtaW5aKTtcclxuXHRcdHRoaXMubWF4LnNldChtYXhYLCBtYXhZLCBtYXhaKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xyXG5cclxuXHRcdHZhciBtaW5YID0gKyBJbmZpbml0eTtcclxuXHRcdHZhciBtaW5ZID0gKyBJbmZpbml0eTtcclxuXHRcdHZhciBtaW5aID0gKyBJbmZpbml0eTtcclxuXHJcblx0XHR2YXIgbWF4WCA9IC0gSW5maW5pdHk7XHJcblx0XHR2YXIgbWF4WSA9IC0gSW5maW5pdHk7XHJcblx0XHR2YXIgbWF4WiA9IC0gSW5maW5pdHk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBhdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciB4ID0gYXR0cmlidXRlLmdldFgoaSk7XHJcblx0XHRcdHZhciB5ID0gYXR0cmlidXRlLmdldFkoaSk7XHJcblx0XHRcdHZhciB6ID0gYXR0cmlidXRlLmdldFooaSk7XHJcblxyXG5cdFx0XHRpZiAoeCA8IG1pblgpIHsgbWluWCA9IHg7IH1cclxuXHRcdFx0aWYgKHkgPCBtaW5ZKSB7IG1pblkgPSB5OyB9XHJcblx0XHRcdGlmICh6IDwgbWluWikgeyBtaW5aID0gejsgfVxyXG5cclxuXHRcdFx0aWYgKHggPiBtYXhYKSB7IG1heFggPSB4OyB9XHJcblx0XHRcdGlmICh5ID4gbWF4WSkgeyBtYXhZID0geTsgfVxyXG5cdFx0XHRpZiAoeiA+IG1heFopIHsgbWF4WiA9IHo7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5taW4uc2V0KG1pblgsIG1pblksIG1pblopO1xyXG5cdFx0dGhpcy5tYXguc2V0KG1heFgsIG1heFksIG1heFopO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAocG9pbnRzKSB7XHJcblxyXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KHBvaW50c1tpXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ2VudGVyQW5kU2l6ZTogZnVuY3Rpb24gKGNlbnRlciwgc2l6ZSkge1xyXG5cclxuXHRcdHZhciBoYWxmU2l6ZSA9IF92ZWN0b3IkMi5jb3B5KHNpemUpLm11bHRpcGx5U2NhbGFyKDAuNSk7XHJcblxyXG5cdFx0dGhpcy5taW4uY29weShjZW50ZXIpLnN1YihoYWxmU2l6ZSk7XHJcblx0XHR0aGlzLm1heC5jb3B5KGNlbnRlcikuYWRkKGhhbGZTaXplKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xyXG5cclxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kQnlPYmplY3Qob2JqZWN0KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0dGhpcy5taW4uY29weShib3gubWluKTtcclxuXHRcdHRoaXMubWF4LmNvcHkoYm94Lm1heCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gdGhpcy5taW4ueiA9ICsgSW5maW5pdHk7XHJcblx0XHR0aGlzLm1heC54ID0gdGhpcy5tYXgueSA9IHRoaXMubWF4LnogPSAtIEluZmluaXR5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gdGhpcyBpcyBhIG1vcmUgcm9idXN0IGNoZWNrIGZvciBlbXB0eSB0aGFuICggdm9sdW1lIDw9IDAgKSBiZWNhdXNlIHZvbHVtZSBjYW4gZ2V0IHBvc2l0aXZlIHdpdGggdHdvIG5lZ2F0aXZlIGF4ZXNcclxuXHJcblx0XHRyZXR1cm4gKHRoaXMubWF4LnggPCB0aGlzLm1pbi54KSB8fCAodGhpcy5tYXgueSA8IHRoaXMubWluLnkpIHx8ICh0aGlzLm1heC56IDwgdGhpcy5taW4ueik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldENlbnRlcjogZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Cb3gzOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KDAsIDAsIDApIDogdGFyZ2V0LmFkZFZlY3RvcnModGhpcy5taW4sIHRoaXMubWF4KS5tdWx0aXBseVNjYWxhcigwLjUpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRTaXplOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDM6IC5nZXRTaXplKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCkgPyB0YXJnZXQuc2V0KDAsIDAsIDApIDogdGFyZ2V0LnN1YlZlY3RvcnModGhpcy5tYXgsIHRoaXMubWluKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZXhwYW5kQnlQb2ludDogZnVuY3Rpb24gKHBvaW50KSB7XHJcblxyXG5cdFx0dGhpcy5taW4ubWluKHBvaW50KTtcclxuXHRcdHRoaXMubWF4Lm1heChwb2ludCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGV4cGFuZEJ5VmVjdG9yOiBmdW5jdGlvbiAodmVjdG9yKSB7XHJcblxyXG5cdFx0dGhpcy5taW4uc3ViKHZlY3Rvcik7XHJcblx0XHR0aGlzLm1heC5hZGQodmVjdG9yKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZXhwYW5kQnlTY2FsYXI6IGZ1bmN0aW9uIChzY2FsYXIpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5hZGRTY2FsYXIoLSBzY2FsYXIpO1xyXG5cdFx0dGhpcy5tYXguYWRkU2NhbGFyKHNjYWxhcik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGV4cGFuZEJ5T2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0dmFyIGksIGw7XHJcblxyXG5cdFx0Ly8gQ29tcHV0ZXMgdGhlIHdvcmxkLWF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggb2YgYW4gb2JqZWN0IChpbmNsdWRpbmcgaXRzIGNoaWxkcmVuKSxcclxuXHRcdC8vIGFjY291bnRpbmcgZm9yIGJvdGggdGhlIG9iamVjdCdzLCBhbmQgY2hpbGRyZW4ncywgd29ybGQgdHJhbnNmb3Jtc1xyXG5cclxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeChmYWxzZSwgZmFsc2UpO1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0aWYgKGdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XHJcblxyXG5cdFx0XHRcdGZvciAoaSA9IDAsIGwgPSB2ZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRfdmVjdG9yJDIuY29weSh2ZXJ0aWNlc1tpXSk7XHJcblx0XHRcdFx0XHRfdmVjdG9yJDIuYXBwbHlNYXRyaXg0KG9iamVjdC5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5leHBhbmRCeVBvaW50KF92ZWN0b3IkMik7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHJcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgbCA9IGF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0X3ZlY3RvciQyLmZyb21CdWZmZXJBdHRyaWJ1dGUoYXR0cmlidXRlLCBpKS5hcHBseU1hdHJpeDQob2JqZWN0Lm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdFx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludChfdmVjdG9yJDIpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmV4cGFuZEJ5T2JqZWN0KGNoaWxkcmVuW2ldKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCkge1xyXG5cclxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxyXG5cdFx0XHRwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSB8fFxyXG5cdFx0XHRwb2ludC56IDwgdGhpcy5taW4ueiB8fCBwb2ludC56ID4gdGhpcy5tYXgueiA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uIChib3gpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBib3gubWluLnggJiYgYm94Lm1heC54IDw9IHRoaXMubWF4LnggJiZcclxuXHRcdFx0dGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4LnkgJiZcclxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFBhcmFtZXRlcjogZnVuY3Rpb24gKHBvaW50LCB0YXJnZXQpIHtcclxuXHJcblx0XHQvLyBUaGlzIGNhbiBwb3RlbnRpYWxseSBoYXZlIGEgZGl2aWRlIGJ5IHplcm8gaWYgdGhlIGJveFxyXG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MzogLmdldFBhcmFtZXRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnKTtcclxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoXHJcblx0XHRcdChwb2ludC54IC0gdGhpcy5taW4ueCkgLyAodGhpcy5tYXgueCAtIHRoaXMubWluLngpLFxyXG5cdFx0XHQocG9pbnQueSAtIHRoaXMubWluLnkpIC8gKHRoaXMubWF4LnkgLSB0aGlzLm1pbi55KSxcclxuXHRcdFx0KHBvaW50LnogLSB0aGlzLm1pbi56KSAvICh0aGlzLm1heC56IC0gdGhpcy5taW4ueilcclxuXHRcdCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uIChib3gpIHtcclxuXHJcblx0XHQvLyB1c2luZyA2IHNwbGl0dGluZyBwbGFuZXMgdG8gcnVsZSBvdXQgaW50ZXJzZWN0aW9ucy5cclxuXHRcdHJldHVybiBib3gubWF4LnggPCB0aGlzLm1pbi54IHx8IGJveC5taW4ueCA+IHRoaXMubWF4LnggfHxcclxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XHJcblx0XHRcdGJveC5tYXgueiA8IHRoaXMubWluLnogfHwgYm94Lm1pbi56ID4gdGhpcy5tYXgueiA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKHNwaGVyZSkge1xyXG5cclxuXHRcdC8vIEZpbmQgdGhlIHBvaW50IG9uIHRoZSBBQUJCIGNsb3Nlc3QgdG8gdGhlIHNwaGVyZSBjZW50ZXIuXHJcblx0XHR0aGlzLmNsYW1wUG9pbnQoc3BoZXJlLmNlbnRlciwgX3ZlY3RvciQyKTtcclxuXHJcblx0XHQvLyBJZiB0aGF0IHBvaW50IGlzIGluc2lkZSB0aGUgc3BoZXJlLCB0aGUgQUFCQiBhbmQgc3BoZXJlIGludGVyc2VjdC5cclxuXHRcdHJldHVybiBfdmVjdG9yJDIuZGlzdGFuY2VUb1NxdWFyZWQoc3BoZXJlLmNlbnRlcikgPD0gKHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzKTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAocGxhbmUpIHtcclxuXHJcblx0XHQvLyBXZSBjb21wdXRlIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGRvdCBwcm9kdWN0IHZhbHVlcy4gSWYgdGhvc2UgdmFsdWVzXHJcblx0XHQvLyBhcmUgb24gdGhlIHNhbWUgc2lkZSAoYmFjayBvciBmcm9udCkgb2YgdGhlIHBsYW5lLCB0aGVuIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cclxuXHJcblx0XHR2YXIgbWluLCBtYXg7XHJcblxyXG5cdFx0aWYgKHBsYW5lLm5vcm1hbC54ID4gMCkge1xyXG5cclxuXHRcdFx0bWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54O1xyXG5cdFx0XHRtYXggPSBwbGFuZS5ub3JtYWwueCAqIHRoaXMubWF4Lng7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdG1pbiA9IHBsYW5lLm5vcm1hbC54ICogdGhpcy5tYXgueDtcclxuXHRcdFx0bWF4ID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocGxhbmUubm9ybWFsLnkgPiAwKSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1pbi55O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocGxhbmUubm9ybWFsLnogPiAwKSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xyXG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1pbi56O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gKG1pbiA8PSAtIHBsYW5lLmNvbnN0YW50ICYmIG1heCA+PSAtIHBsYW5lLmNvbnN0YW50KTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1RyaWFuZ2xlOiBmdW5jdGlvbiAodHJpYW5nbGUpIHtcclxuXHJcblx0XHRpZiAodGhpcy5pc0VtcHR5KCkpIHtcclxuXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSBib3ggY2VudGVyIGFuZCBleHRlbnRzXHJcblx0XHR0aGlzLmdldENlbnRlcihfY2VudGVyKTtcclxuXHRcdF9leHRlbnRzLnN1YlZlY3RvcnModGhpcy5tYXgsIF9jZW50ZXIpO1xyXG5cclxuXHRcdC8vIHRyYW5zbGF0ZSB0cmlhbmdsZSB0byBhYWJiIG9yaWdpblxyXG5cdFx0X3YwLnN1YlZlY3RvcnModHJpYW5nbGUuYSwgX2NlbnRlcik7XHJcblx0XHRfdjEkMi5zdWJWZWN0b3JzKHRyaWFuZ2xlLmIsIF9jZW50ZXIpO1xyXG5cdFx0X3YyLnN1YlZlY3RvcnModHJpYW5nbGUuYywgX2NlbnRlcik7XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSBlZGdlIHZlY3RvcnMgZm9yIHRyaWFuZ2xlXHJcblx0XHRfZjAuc3ViVmVjdG9ycyhfdjEkMiwgX3YwKTtcclxuXHRcdF9mMS5zdWJWZWN0b3JzKF92MiwgX3YxJDIpO1xyXG5cdFx0X2YyLnN1YlZlY3RvcnMoX3YwLCBfdjIpO1xyXG5cclxuXHRcdC8vIHRlc3QgYWdhaW5zdCBheGVzIHRoYXQgYXJlIGdpdmVuIGJ5IGNyb3NzIHByb2R1Y3QgY29tYmluYXRpb25zIG9mIHRoZSBlZGdlcyBvZiB0aGUgdHJpYW5nbGUgYW5kIHRoZSBlZGdlcyBvZiB0aGUgYWFiYlxyXG5cdFx0Ly8gbWFrZSBhbiBheGlzIHRlc3Rpbmcgb2YgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgYWFiYiBhZ2FpbnN0IGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlID0gOSBheGlzIG9mIHNlcGFyYXRpb25cclxuXHRcdC8vIGF4aXNfaWogPSB1X2kgeCBmX2ogKHUwLCB1MSwgdTIgPSBmYWNlIG5vcm1hbHMgb2YgYWFiYiA9IHgseSx6IGF4ZXMgdmVjdG9ycyBzaW5jZSBhYWJiIGlzIGF4aXMgYWxpZ25lZClcclxuXHRcdHZhciBheGVzID0gW1xyXG5cdFx0XHQwLCAtIF9mMC56LCBfZjAueSwgMCwgLSBfZjEueiwgX2YxLnksIDAsIC0gX2YyLnosIF9mMi55LFxyXG5cdFx0XHRfZjAueiwgMCwgLSBfZjAueCwgX2YxLnosIDAsIC0gX2YxLngsIF9mMi56LCAwLCAtIF9mMi54LFxyXG5cdFx0XHQtIF9mMC55LCBfZjAueCwgMCwgLSBfZjEueSwgX2YxLngsIDAsIC0gX2YyLnksIF9mMi54LCAwXHJcblx0XHRdO1xyXG5cdFx0aWYgKCFzYXRGb3JBeGVzKGF4ZXMsIF92MCwgX3YxJDIsIF92MiwgX2V4dGVudHMpKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYlxyXG5cdFx0YXhlcyA9IFsxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxXTtcclxuXHRcdGlmICghc2F0Rm9yQXhlcyhheGVzLCBfdjAsIF92MSQyLCBfdjIsIF9leHRlbnRzKSkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBmaW5hbGx5IHRlc3RpbmcgdGhlIGZhY2Ugbm9ybWFsIG9mIHRoZSB0cmlhbmdsZVxyXG5cdFx0Ly8gdXNlIGFscmVhZHkgZXhpc3RpbmcgdHJpYW5nbGUgZWRnZSB2ZWN0b3JzIGhlcmVcclxuXHRcdF90cmlhbmdsZU5vcm1hbC5jcm9zc1ZlY3RvcnMoX2YwLCBfZjEpO1xyXG5cdFx0YXhlcyA9IFtfdHJpYW5nbGVOb3JtYWwueCwgX3RyaWFuZ2xlTm9ybWFsLnksIF90cmlhbmdsZU5vcm1hbC56XTtcclxuXHJcblx0XHRyZXR1cm4gc2F0Rm9yQXhlcyhheGVzLCBfdjAsIF92MSQyLCBfdjIsIF9leHRlbnRzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKHBvaW50LCB0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MzogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weShwb2ludCkuY2xhbXAodGhpcy5taW4sIHRoaXMubWF4KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHR2YXIgY2xhbXBlZFBvaW50ID0gX3ZlY3RvciQyLmNvcHkocG9pbnQpLmNsYW1wKHRoaXMubWluLCB0aGlzLm1heCk7XHJcblxyXG5cdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIocG9pbnQpLmxlbmd0aCgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuQm94MzogLmdldEJvdW5kaW5nU3BoZXJlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHQvL3RhcmdldCA9IG5ldyBTcGhlcmUoKTsgLy8gcmVtb3ZlZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmdldENlbnRlcih0YXJnZXQuY2VudGVyKTtcclxuXHJcblx0XHR0YXJnZXQucmFkaXVzID0gdGhpcy5nZXRTaXplKF92ZWN0b3IkMikubGVuZ3RoKCkgKiAwLjU7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0dGhpcy5taW4ubWF4KGJveC5taW4pO1xyXG5cdFx0dGhpcy5tYXgubWluKGJveC5tYXgpO1xyXG5cclxuXHRcdC8vIGVuc3VyZSB0aGF0IGlmIHRoZXJlIGlzIG5vIG92ZXJsYXAsIHRoZSByZXN1bHQgaXMgZnVsbHkgZW1wdHksIG5vdCBzbGlnaHRseSBlbXB0eSB3aXRoIG5vbi1pbmYvK2luZiB2YWx1ZXMgdGhhdCB3aWxsIGNhdXNlIHN1YnNlcXVlbmNlIGludGVyc2VjdHMgdG8gZXJyb25lb3VzbHkgcmV0dXJuIHZhbGlkIHZhbHVlcy5cclxuXHRcdGlmICh0aGlzLmlzRW1wdHkoKSkgeyB0aGlzLm1ha2VFbXB0eSgpOyB9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHVuaW9uOiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0dGhpcy5taW4ubWluKGJveC5taW4pO1xyXG5cdFx0dGhpcy5tYXgubWF4KGJveC5tYXgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHQvLyB0cmFuc2Zvcm0gb2YgZW1wdHkgYm94IGlzIGFuIGVtcHR5IGJveC5cclxuXHRcdGlmICh0aGlzLmlzRW1wdHkoKSkgeyByZXR1cm4gdGhpczsgfVxyXG5cclxuXHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XHJcblx0XHRfcG9pbnRzWzBdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMDAwXHJcblx0XHRfcG9pbnRzWzFdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMDAxXHJcblx0XHRfcG9pbnRzWzJdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMDEwXHJcblx0XHRfcG9pbnRzWzNdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1heC56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMDExXHJcblx0XHRfcG9pbnRzWzRdLnNldCh0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMTAwXHJcblx0XHRfcG9pbnRzWzVdLnNldCh0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMTAxXHJcblx0XHRfcG9pbnRzWzZdLnNldCh0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMTEwXHJcblx0XHRfcG9pbnRzWzddLnNldCh0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1heC56KS5hcHBseU1hdHJpeDQobWF0cml4KTsgLy8gMTExXHJcblxyXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKF9wb2ludHMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5hZGQob2Zmc2V0KTtcclxuXHRcdHRoaXMubWF4LmFkZChvZmZzZXQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlcXVhbHM6IGZ1bmN0aW9uIChib3gpIHtcclxuXHJcblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHModGhpcy5taW4pICYmIGJveC5tYXguZXF1YWxzKHRoaXMubWF4KTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5mdW5jdGlvbiBzYXRGb3JBeGVzKGF4ZXMsIHYwLCB2MSwgdjIsIGV4dGVudHMpIHtcclxuXHJcblx0dmFyIGksIGo7XHJcblxyXG5cdGZvciAoaSA9IDAsIGogPSBheGVzLmxlbmd0aCAtIDM7IGkgPD0gajsgaSArPSAzKSB7XHJcblxyXG5cdFx0X3Rlc3RBeGlzLmZyb21BcnJheShheGVzLCBpKTtcclxuXHRcdC8vIHByb2plY3QgdGhlIGFhYmIgb250byB0aGUgc2VwZXJhdGluZyBheGlzXHJcblx0XHR2YXIgciA9IGV4dGVudHMueCAqIE1hdGguYWJzKF90ZXN0QXhpcy54KSArIGV4dGVudHMueSAqIE1hdGguYWJzKF90ZXN0QXhpcy55KSArIGV4dGVudHMueiAqIE1hdGguYWJzKF90ZXN0QXhpcy56KTtcclxuXHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xyXG5cdFx0dmFyIHAwID0gdjAuZG90KF90ZXN0QXhpcyk7XHJcblx0XHR2YXIgcDEgPSB2MS5kb3QoX3Rlc3RBeGlzKTtcclxuXHRcdHZhciBwMiA9IHYyLmRvdChfdGVzdEF4aXMpO1xyXG5cdFx0Ly8gYWN0dWFsIHRlc3QsIGJhc2ljYWxseSBzZWUgaWYgZWl0aGVyIG9mIHRoZSBtb3N0IGV4dHJlbWUgb2YgdGhlIHRyaWFuZ2xlIHBvaW50cyBpbnRlcnNlY3RzIHJcclxuXHRcdGlmIChNYXRoLm1heCgtIE1hdGgubWF4KHAwLCBwMSwgcDIpLCBNYXRoLm1pbihwMCwgcDEsIHAyKSkgPiByKSB7XHJcblxyXG5cdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXHJcblx0XHRcdC8vIHRoZSBheGlzIGlzIHNlcGVyYXRpbmcgYW5kIHdlIGNhbiBleGl0XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRydWU7XHJcblxyXG59XHJcblxyXG52YXIgX2JveCA9IG5ldyBCb3gzKCk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFNwaGVyZShjZW50ZXIsIHJhZGl1cykge1xyXG5cclxuXHR0aGlzLmNlbnRlciA9IChjZW50ZXIgIT09IHVuZGVmaW5lZCkgPyBjZW50ZXIgOiBuZXcgVmVjdG9yMygpO1xyXG5cdHRoaXMucmFkaXVzID0gKHJhZGl1cyAhPT0gdW5kZWZpbmVkKSA/IHJhZGl1cyA6IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFNwaGVyZS5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAoY2VudGVyLCByYWRpdXMpIHtcclxuXHJcblx0XHR0aGlzLmNlbnRlci5jb3B5KGNlbnRlcik7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKHBvaW50cywgb3B0aW9uYWxDZW50ZXIpIHtcclxuXHJcblx0XHR2YXIgY2VudGVyID0gdGhpcy5jZW50ZXI7XHJcblxyXG5cdFx0aWYgKG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNlbnRlci5jb3B5KG9wdGlvbmFsQ2VudGVyKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X2JveC5zZXRGcm9tUG9pbnRzKHBvaW50cykuZ2V0Q2VudGVyKGNlbnRlcik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBtYXhSYWRpdXNTcSA9IDA7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZChwb2ludHNbaV0pKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQobWF4UmFkaXVzU3EpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzcGhlcmUpIHtcclxuXHJcblx0XHR0aGlzLmNlbnRlci5jb3B5KHNwaGVyZS5jZW50ZXIpO1xyXG5cdFx0dGhpcy5yYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiAodGhpcy5yYWRpdXMgPD0gMCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCkge1xyXG5cclxuXHRcdHJldHVybiAocG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5jZW50ZXIpIDw9ICh0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzKSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKHBvaW50KSB7XHJcblxyXG5cdFx0cmV0dXJuIChwb2ludC5kaXN0YW5jZVRvKHRoaXMuY2VudGVyKSAtIHRoaXMucmFkaXVzKTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKHNwaGVyZSkge1xyXG5cclxuXHRcdHZhciByYWRpdXNTdW0gPSB0aGlzLnJhZGl1cyArIHNwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5jZW50ZXIpIDw9IChyYWRpdXNTdW0gKiByYWRpdXNTdW0pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzU3BoZXJlKHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzUGxhbmU6IGZ1bmN0aW9uIChwbGFuZSkge1xyXG5cclxuXHRcdHJldHVybiBNYXRoLmFicyhwbGFuZS5kaXN0YW5jZVRvUG9pbnQodGhpcy5jZW50ZXIpKSA8PSB0aGlzLnJhZGl1cztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKHBvaW50LCB0YXJnZXQpIHtcclxuXHJcblx0XHR2YXIgZGVsdGFMZW5ndGhTcSA9IHRoaXMuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHBvaW50KTtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuU3BoZXJlOiAuY2xhbXBQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnKTtcclxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGFyZ2V0LmNvcHkocG9pbnQpO1xyXG5cclxuXHRcdGlmIChkZWx0YUxlbmd0aFNxID4gKHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXMpKSB7XHJcblxyXG5cdFx0XHR0YXJnZXQuc3ViKHRoaXMuY2VudGVyKS5ub3JtYWxpemUoKTtcclxuXHRcdFx0dGFyZ2V0Lm11bHRpcGx5U2NhbGFyKHRoaXMucmFkaXVzKS5hZGQodGhpcy5jZW50ZXIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRCb3VuZGluZ0JveDogZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5TcGhlcmU6IC5nZXRCb3VuZGluZ0JveCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnKTtcclxuXHRcdFx0dGFyZ2V0ID0gbmV3IEJveDMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGFyZ2V0LnNldCh0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIpO1xyXG5cdFx0dGFyZ2V0LmV4cGFuZEJ5U2NhbGFyKHRoaXMucmFkaXVzKTtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHR0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQobWF0cml4KTtcclxuXHRcdHRoaXMucmFkaXVzID0gdGhpcy5yYWRpdXMgKiBtYXRyaXguZ2V0TWF4U2NhbGVPbkF4aXMoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAob2Zmc2V0KSB7XHJcblxyXG5cdFx0dGhpcy5jZW50ZXIuYWRkKG9mZnNldCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKHNwaGVyZSkge1xyXG5cclxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmVxdWFscyh0aGlzLmNlbnRlcikgJiYgKHNwaGVyZS5yYWRpdXMgPT09IHRoaXMucmFkaXVzKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG52YXIgX3ZlY3RvciQzID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9zZWdDZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3NlZ0RpciA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfZGlmZiA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG52YXIgX2VkZ2UxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9lZGdlMiA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUmF5KG9yaWdpbiwgZGlyZWN0aW9uKSB7XHJcblxyXG5cdHRoaXMub3JpZ2luID0gKG9yaWdpbiAhPT0gdW5kZWZpbmVkKSA/IG9yaWdpbiA6IG5ldyBWZWN0b3IzKCk7XHJcblx0dGhpcy5kaXJlY3Rpb24gPSAoZGlyZWN0aW9uICE9PSB1bmRlZmluZWQpID8gZGlyZWN0aW9uIDogbmV3IFZlY3RvcjMoKTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oUmF5LnByb3RvdHlwZSwge1xyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uIChvcmlnaW4sIGRpcmVjdGlvbikge1xyXG5cclxuXHRcdHRoaXMub3JpZ2luLmNvcHkob3JpZ2luKTtcclxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoZGlyZWN0aW9uKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAocmF5KSB7XHJcblxyXG5cdFx0dGhpcy5vcmlnaW4uY29weShyYXkub3JpZ2luKTtcclxuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkocmF5LmRpcmVjdGlvbik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGF0OiBmdW5jdGlvbiAodCwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlJheTogLmF0KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKHQpLmFkZCh0aGlzLm9yaWdpbik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxvb2tBdDogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KHYpLnN1Yih0aGlzLm9yaWdpbikubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJlY2FzdDogZnVuY3Rpb24gKHQpIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5jb3B5KHRoaXMuYXQodCwgX3ZlY3RvciQzKSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlJheTogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRhcmdldC5zdWJWZWN0b3JzKHBvaW50LCB0aGlzLm9yaWdpbik7XHJcblxyXG5cdFx0dmFyIGRpcmVjdGlvbkRpc3RhbmNlID0gdGFyZ2V0LmRvdCh0aGlzLmRpcmVjdGlvbik7XHJcblxyXG5cdFx0aWYgKGRpcmVjdGlvbkRpc3RhbmNlIDwgMCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KHRoaXMub3JpZ2luKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkaXJlY3Rpb25EaXN0YW5jZSkuYWRkKHRoaXMub3JpZ2luKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQocG9pbnQpKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VTcVRvUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCkge1xyXG5cclxuXHRcdHZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IF92ZWN0b3IkMy5zdWJWZWN0b3JzKHBvaW50LCB0aGlzLm9yaWdpbikuZG90KHRoaXMuZGlyZWN0aW9uKTtcclxuXHJcblx0XHQvLyBwb2ludCBiZWhpbmQgdGhlIHJheVxyXG5cclxuXHRcdGlmIChkaXJlY3Rpb25EaXN0YW5jZSA8IDApIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZChwb2ludCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF92ZWN0b3IkMy5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkaXJlY3Rpb25EaXN0YW5jZSkuYWRkKHRoaXMub3JpZ2luKTtcclxuXHJcblx0XHRyZXR1cm4gX3ZlY3RvciQzLmRpc3RhbmNlVG9TcXVhcmVkKHBvaW50KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VTcVRvU2VnbWVudDogZnVuY3Rpb24gKHYwLCB2MSwgb3B0aW9uYWxQb2ludE9uUmF5LCBvcHRpb25hbFBvaW50T25TZWdtZW50KSB7XHJcblxyXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50LmhcclxuXHRcdC8vIEl0IHJldHVybnMgdGhlIG1pbiBkaXN0YW5jZSBiZXR3ZWVuIHRoZSByYXkgYW5kIHRoZSBzZWdtZW50XHJcblx0XHQvLyBkZWZpbmVkIGJ5IHYwIGFuZCB2MVxyXG5cdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcclxuXHRcdC8vIC0gVGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHJheVxyXG5cdFx0Ly8gLSBUaGUgY2xvc2VzdCBwb2ludCBvbiB0aGUgc2VnbWVudFxyXG5cclxuXHRcdF9zZWdDZW50ZXIuY29weSh2MCkuYWRkKHYxKS5tdWx0aXBseVNjYWxhcigwLjUpO1xyXG5cdFx0X3NlZ0Rpci5jb3B5KHYxKS5zdWIodjApLm5vcm1hbGl6ZSgpO1xyXG5cdFx0X2RpZmYuY29weSh0aGlzLm9yaWdpbikuc3ViKF9zZWdDZW50ZXIpO1xyXG5cclxuXHRcdHZhciBzZWdFeHRlbnQgPSB2MC5kaXN0YW5jZVRvKHYxKSAqIDAuNTtcclxuXHRcdHZhciBhMDEgPSAtIHRoaXMuZGlyZWN0aW9uLmRvdChfc2VnRGlyKTtcclxuXHRcdHZhciBiMCA9IF9kaWZmLmRvdCh0aGlzLmRpcmVjdGlvbik7XHJcblx0XHR2YXIgYjEgPSAtIF9kaWZmLmRvdChfc2VnRGlyKTtcclxuXHRcdHZhciBjID0gX2RpZmYubGVuZ3RoU3EoKTtcclxuXHRcdHZhciBkZXQgPSBNYXRoLmFicygxIC0gYTAxICogYTAxKTtcclxuXHRcdHZhciBzMCwgczEsIHNxckRpc3QsIGV4dERldDtcclxuXHJcblx0XHRpZiAoZGV0ID4gMCkge1xyXG5cclxuXHRcdFx0Ly8gVGhlIHJheSBhbmQgc2VnbWVudCBhcmUgbm90IHBhcmFsbGVsLlxyXG5cclxuXHRcdFx0czAgPSBhMDEgKiBiMSAtIGIwO1xyXG5cdFx0XHRzMSA9IGEwMSAqIGIwIC0gYjE7XHJcblx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcclxuXHJcblx0XHRcdGlmIChzMCA+PSAwKSB7XHJcblxyXG5cdFx0XHRcdGlmIChzMSA+PSAtIGV4dERldCkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChzMSA8PSBleHREZXQpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHJlZ2lvbiAwXHJcblx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cclxuXHJcblx0XHRcdFx0XHRcdHZhciBpbnZEZXQgPSAxIC8gZGV0O1xyXG5cdFx0XHRcdFx0XHRzMCAqPSBpbnZEZXQ7XHJcblx0XHRcdFx0XHRcdHMxICo9IGludkRldDtcclxuXHRcdFx0XHRcdFx0c3FyRGlzdCA9IHMwICogKHMwICsgYTAxICogczEgKyAyICogYjApICsgczEgKiAoYTAxICogczAgKyBzMSArIDIgKiBiMSkgKyBjO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyByZWdpb24gMVxyXG5cclxuXHRcdFx0XHRcdFx0czEgPSBzZWdFeHRlbnQ7XHJcblx0XHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoMCwgLSAoYTAxICogczEgKyBiMCkpO1xyXG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoczEgKyAyICogYjEpICsgYztcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDVcclxuXHJcblx0XHRcdFx0XHRzMSA9IC0gc2VnRXh0ZW50O1xyXG5cdFx0XHRcdFx0czAgPSBNYXRoLm1heCgwLCAtIChhMDEgKiBzMSArIGIwKSk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoczEgKyAyICogYjEpICsgYztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0aWYgKHMxIDw9IC0gZXh0RGV0KSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDRcclxuXHJcblx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KDAsIC0gKC0gYTAxICogc2VnRXh0ZW50ICsgYjApKTtcclxuXHRcdFx0XHRcdHMxID0gKHMwID4gMCkgPyAtIHNlZ0V4dGVudCA6IE1hdGgubWluKE1hdGgubWF4KC0gc2VnRXh0ZW50LCAtIGIxKSwgc2VnRXh0ZW50KTtcclxuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqIChzMSArIDIgKiBiMSkgKyBjO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKHMxIDw9IGV4dERldCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIHJlZ2lvbiAzXHJcblxyXG5cdFx0XHRcdFx0czAgPSAwO1xyXG5cdFx0XHRcdFx0czEgPSBNYXRoLm1pbihNYXRoLm1heCgtIHNlZ0V4dGVudCwgLSBiMSksIHNlZ0V4dGVudCk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gczEgKiAoczEgKyAyICogYjEpICsgYztcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyByZWdpb24gMlxyXG5cclxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoMCwgLSAoYTAxICogc2VnRXh0ZW50ICsgYjApKTtcclxuXHRcdFx0XHRcdHMxID0gKHMwID4gMCkgPyBzZWdFeHRlbnQgOiBNYXRoLm1pbihNYXRoLm1heCgtIHNlZ0V4dGVudCwgLSBiMSksIHNlZ0V4dGVudCk7XHJcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoczEgKyAyICogYjEpICsgYztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBSYXkgYW5kIHNlZ21lbnQgYXJlIHBhcmFsbGVsLlxyXG5cclxuXHRcdFx0czEgPSAoYTAxID4gMCkgPyAtIHNlZ0V4dGVudCA6IHNlZ0V4dGVudDtcclxuXHRcdFx0czAgPSBNYXRoLm1heCgwLCAtIChhMDEgKiBzMSArIGIwKSk7XHJcblx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqIChzMSArIDIgKiBiMSkgKyBjO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAob3B0aW9uYWxQb2ludE9uUmF5KSB7XHJcblxyXG5cdFx0XHRvcHRpb25hbFBvaW50T25SYXkuY29weSh0aGlzLmRpcmVjdGlvbikubXVsdGlwbHlTY2FsYXIoczApLmFkZCh0aGlzLm9yaWdpbik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvcHRpb25hbFBvaW50T25TZWdtZW50KSB7XHJcblxyXG5cdFx0XHRvcHRpb25hbFBvaW50T25TZWdtZW50LmNvcHkoX3NlZ0RpcikubXVsdGlwbHlTY2FsYXIoczEpLmFkZChfc2VnQ2VudGVyKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHNxckRpc3Q7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdFNwaGVyZTogZnVuY3Rpb24gKHNwaGVyZSwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0X3ZlY3RvciQzLnN1YlZlY3RvcnMoc3BoZXJlLmNlbnRlciwgdGhpcy5vcmlnaW4pO1xyXG5cdFx0dmFyIHRjYSA9IF92ZWN0b3IkMy5kb3QodGhpcy5kaXJlY3Rpb24pO1xyXG5cdFx0dmFyIGQyID0gX3ZlY3RvciQzLmRvdChfdmVjdG9yJDMpIC0gdGNhICogdGNhO1xyXG5cdFx0dmFyIHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcclxuXHJcblx0XHRpZiAoZDIgPiByYWRpdXMyKSB7IHJldHVybiBudWxsOyB9XHJcblxyXG5cdFx0dmFyIHRoYyA9IE1hdGguc3FydChyYWRpdXMyIC0gZDIpO1xyXG5cclxuXHRcdC8vIHQwID0gZmlyc3QgaW50ZXJzZWN0IHBvaW50IC0gZW50cmFuY2Ugb24gZnJvbnQgb2Ygc3BoZXJlXHJcblx0XHR2YXIgdDAgPSB0Y2EgLSB0aGM7XHJcblxyXG5cdFx0Ly8gdDEgPSBzZWNvbmQgaW50ZXJzZWN0IHBvaW50IC0gZXhpdCBwb2ludCBvbiBiYWNrIG9mIHNwaGVyZVxyXG5cdFx0dmFyIHQxID0gdGNhICsgdGhjO1xyXG5cclxuXHRcdC8vIHRlc3QgdG8gc2VlIGlmIGJvdGggdDAgYW5kIHQxIGFyZSBiZWhpbmQgdGhlIHJheSAtIGlmIHNvLCByZXR1cm4gbnVsbFxyXG5cdFx0aWYgKHQwIDwgMCAmJiB0MSA8IDApIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MCBpcyBiZWhpbmQgdGhlIHJheTpcclxuXHRcdC8vIGlmIGl0IGlzLCB0aGUgcmF5IGlzIGluc2lkZSB0aGUgc3BoZXJlLCBzbyByZXR1cm4gdGhlIHNlY29uZCBleGl0IHBvaW50IHNjYWxlZCBieSB0MSxcclxuXHRcdC8vIGluIG9yZGVyIHRvIGFsd2F5cyByZXR1cm4gYW4gaW50ZXJzZWN0IHBvaW50IHRoYXQgaXMgaW4gZnJvbnQgb2YgdGhlIHJheS5cclxuXHRcdGlmICh0MCA8IDApIHsgcmV0dXJuIHRoaXMuYXQodDEsIHRhcmdldCk7IH1cclxuXHJcblx0XHQvLyBlbHNlIHQwIGlzIGluIGZyb250IG9mIHRoZSByYXksIHNvIHJldHVybiB0aGUgZmlyc3QgY29sbGlzaW9uIHBvaW50IHNjYWxlZCBieSB0MFxyXG5cdFx0cmV0dXJuIHRoaXMuYXQodDAsIHRhcmdldCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uIChzcGhlcmUpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kaXN0YW5jZVNxVG9Qb2ludChzcGhlcmUuY2VudGVyKSA8PSAoc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXN0YW5jZVRvUGxhbmU6IGZ1bmN0aW9uIChwbGFuZSkge1xyXG5cclxuXHRcdHZhciBkZW5vbWluYXRvciA9IHBsYW5lLm5vcm1hbC5kb3QodGhpcy5kaXJlY3Rpb24pO1xyXG5cclxuXHRcdGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xyXG5cclxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxyXG5cdFx0XHRpZiAocGxhbmUuZGlzdGFuY2VUb1BvaW50KHRoaXMub3JpZ2luKSA9PT0gMCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gMDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIE51bGwgaXMgcHJlZmVyYWJsZSB0byB1bmRlZmluZWQgc2luY2UgdW5kZWZpbmVkIG1lYW5zLi4uLiBpdCBpcyB1bmRlZmluZWRcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdCA9IC0gKHRoaXMub3JpZ2luLmRvdChwbGFuZS5ub3JtYWwpICsgcGxhbmUuY29uc3RhbnQpIC8gZGVub21pbmF0b3I7XHJcblxyXG5cdFx0Ly8gUmV0dXJuIGlmIHRoZSByYXkgbmV2ZXIgaW50ZXJzZWN0cyB0aGUgcGxhbmVcclxuXHJcblx0XHRyZXR1cm4gdCA+PSAwID8gdCA6IG51bGw7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdFBsYW5lOiBmdW5jdGlvbiAocGxhbmUsIHRhcmdldCkge1xyXG5cclxuXHRcdHZhciB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUocGxhbmUpO1xyXG5cclxuXHRcdGlmICh0ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXQodCwgdGFyZ2V0KTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAocGxhbmUpIHtcclxuXHJcblx0XHQvLyBjaGVjayBpZiB0aGUgcmF5IGxpZXMgb24gdGhlIHBsYW5lIGZpcnN0XHJcblxyXG5cdFx0dmFyIGRpc3RUb1BvaW50ID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KHRoaXMub3JpZ2luKTtcclxuXHJcblx0XHRpZiAoZGlzdFRvUG9pbnQgPT09IDApIHtcclxuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KHRoaXMuZGlyZWN0aW9uKTtcclxuXHJcblx0XHRpZiAoZGVub21pbmF0b3IgKiBkaXN0VG9Qb2ludCA8IDApIHtcclxuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RCb3g6IGZ1bmN0aW9uIChib3gsIHRhcmdldCkge1xyXG5cclxuXHRcdHZhciB0bWluLCB0bWF4LCB0eW1pbiwgdHltYXgsIHR6bWluLCB0em1heDtcclxuXHJcblx0XHR2YXIgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxyXG5cdFx0XHRpbnZkaXJ5ID0gMSAvIHRoaXMuZGlyZWN0aW9uLnksXHJcblx0XHRcdGludmRpcnogPSAxIC8gdGhpcy5kaXJlY3Rpb24uejtcclxuXHJcblx0XHR2YXIgb3JpZ2luID0gdGhpcy5vcmlnaW47XHJcblxyXG5cdFx0aWYgKGludmRpcnggPj0gMCkge1xyXG5cclxuXHRcdFx0dG1pbiA9IChib3gubWluLnggLSBvcmlnaW4ueCkgKiBpbnZkaXJ4O1xyXG5cdFx0XHR0bWF4ID0gKGJveC5tYXgueCAtIG9yaWdpbi54KSAqIGludmRpcng7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRtaW4gPSAoYm94Lm1heC54IC0gb3JpZ2luLngpICogaW52ZGlyeDtcclxuXHRcdFx0dG1heCA9IChib3gubWluLnggLSBvcmlnaW4ueCkgKiBpbnZkaXJ4O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW52ZGlyeSA+PSAwKSB7XHJcblxyXG5cdFx0XHR0eW1pbiA9IChib3gubWluLnkgLSBvcmlnaW4ueSkgKiBpbnZkaXJ5O1xyXG5cdFx0XHR0eW1heCA9IChib3gubWF4LnkgLSBvcmlnaW4ueSkgKiBpbnZkaXJ5O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0eW1pbiA9IChib3gubWF4LnkgLSBvcmlnaW4ueSkgKiBpbnZkaXJ5O1xyXG5cdFx0XHR0eW1heCA9IChib3gubWluLnkgLSBvcmlnaW4ueSkgKiBpbnZkaXJ5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoKHRtaW4gPiB0eW1heCkgfHwgKHR5bWluID4gdG1heCkpIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0XHQvLyBUaGVzZSBsaW5lcyBhbHNvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0bWluIG9yIHRtYXggaXMgTmFOXHJcblx0XHQvLyAocmVzdWx0IG9mIDAgKiBJbmZpbml0eSkuIHggIT09IHggcmV0dXJucyB0cnVlIGlmIHggaXMgTmFOXHJcblxyXG5cdFx0aWYgKHR5bWluID4gdG1pbiB8fCB0bWluICE9PSB0bWluKSB7IHRtaW4gPSB0eW1pbjsgfVxyXG5cclxuXHRcdGlmICh0eW1heCA8IHRtYXggfHwgdG1heCAhPT0gdG1heCkgeyB0bWF4ID0gdHltYXg7IH1cclxuXHJcblx0XHRpZiAoaW52ZGlyeiA+PSAwKSB7XHJcblxyXG5cdFx0XHR0em1pbiA9IChib3gubWluLnogLSBvcmlnaW4ueikgKiBpbnZkaXJ6O1xyXG5cdFx0XHR0em1heCA9IChib3gubWF4LnogLSBvcmlnaW4ueikgKiBpbnZkaXJ6O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0em1pbiA9IChib3gubWF4LnogLSBvcmlnaW4ueikgKiBpbnZkaXJ6O1xyXG5cdFx0XHR0em1heCA9IChib3gubWluLnogLSBvcmlnaW4ueikgKiBpbnZkaXJ6O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoKHRtaW4gPiB0em1heCkgfHwgKHR6bWluID4gdG1heCkpIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0XHRpZiAodHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4pIHsgdG1pbiA9IHR6bWluOyB9XHJcblxyXG5cdFx0aWYgKHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4KSB7IHRtYXggPSB0em1heDsgfVxyXG5cclxuXHRcdC8vcmV0dXJuIHBvaW50IGNsb3Nlc3QgdG8gdGhlIHJheSAocG9zaXRpdmUgc2lkZSlcclxuXHJcblx0XHRpZiAodG1heCA8IDApIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5hdCh0bWluID49IDAgPyB0bWluIDogdG1heCwgdGFyZ2V0KTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdEJveChib3gsIF92ZWN0b3IkMykgIT09IG51bGw7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdFRyaWFuZ2xlOiBmdW5jdGlvbiAoYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQpIHtcclxuXHJcblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cclxuXHJcblx0XHQvLyBmcm9tIGh0dHA6Ly93d3cuZ2VvbWV0cmljdG9vbHMuY29tL0dURW5naW5lL0luY2x1ZGUvTWF0aGVtYXRpY3MvR3RlSW50clJheTNUcmlhbmdsZTMuaFxyXG5cclxuXHRcdF9lZGdlMS5zdWJWZWN0b3JzKGIsIGEpO1xyXG5cdFx0X2VkZ2UyLnN1YlZlY3RvcnMoYywgYSk7XHJcblx0XHRfbm9ybWFsLmNyb3NzVmVjdG9ycyhfZWRnZTEsIF9lZGdlMik7XHJcblxyXG5cdFx0Ly8gU29sdmUgUSArIHQqRCA9IGIxKkUxICsgYjIqRTIgKFEgPSBrRGlmZiwgRCA9IHJheSBkaXJlY3Rpb24sXHJcblx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XHJcblx0XHQvLyAgIHxEb3QoRCxOKXwqYjEgPSBzaWduKERvdChELE4pKSpEb3QoRCxDcm9zcyhRLEUyKSlcclxuXHRcdC8vICAgfERvdChELE4pfCpiMiA9IHNpZ24oRG90KEQsTikpKkRvdChELENyb3NzKEUxLFEpKVxyXG5cdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcclxuXHRcdHZhciBEZE4gPSB0aGlzLmRpcmVjdGlvbi5kb3QoX25vcm1hbCk7XHJcblx0XHR2YXIgc2lnbjtcclxuXHJcblx0XHRpZiAoRGROID4gMCkge1xyXG5cclxuXHRcdFx0aWYgKGJhY2tmYWNlQ3VsbGluZykgeyByZXR1cm4gbnVsbDsgfVxyXG5cdFx0XHRzaWduID0gMTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKERkTiA8IDApIHtcclxuXHJcblx0XHRcdHNpZ24gPSAtIDE7XHJcblx0XHRcdERkTiA9IC0gRGROO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X2RpZmYuc3ViVmVjdG9ycyh0aGlzLm9yaWdpbiwgYSk7XHJcblx0XHR2YXIgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdChfZWRnZTIuY3Jvc3NWZWN0b3JzKF9kaWZmLCBfZWRnZTIpKTtcclxuXHJcblx0XHQvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvblxyXG5cdFx0aWYgKERkUXhFMiA8IDApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgRGRFMXhRID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdChfZWRnZTEuY3Jvc3MoX2RpZmYpKTtcclxuXHJcblx0XHQvLyBiMiA8IDAsIG5vIGludGVyc2VjdGlvblxyXG5cdFx0aWYgKERkRTF4USA8IDApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxyXG5cdFx0aWYgKERkUXhFMiArIERkRTF4USA+IERkTikge1xyXG5cclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIExpbmUgaW50ZXJzZWN0cyB0cmlhbmdsZSwgY2hlY2sgaWYgcmF5IGRvZXMuXHJcblx0XHR2YXIgUWROID0gLSBzaWduICogX2RpZmYuZG90KF9ub3JtYWwpO1xyXG5cclxuXHRcdC8vIHQgPCAwLCBubyBpbnRlcnNlY3Rpb25cclxuXHRcdGlmIChRZE4gPCAwKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gUmF5IGludGVyc2VjdHMgdHJpYW5nbGUuXHJcblx0XHRyZXR1cm4gdGhpcy5hdChRZE4gLyBEZE4sIHRhcmdldCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKG1hdHJpeDQpIHtcclxuXHJcblx0XHR0aGlzLm9yaWdpbi5hcHBseU1hdHJpeDQobWF0cml4NCk7XHJcblx0XHR0aGlzLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24obWF0cml4NCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKHJheSkge1xyXG5cclxuXHRcdHJldHVybiByYXkub3JpZ2luLmVxdWFscyh0aGlzLm9yaWdpbikgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHModGhpcy5kaXJlY3Rpb24pO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIF92MCQxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MSQzID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MiQxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MyA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG52YXIgX3ZhYiA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfdmFjID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92YmMgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3ZhcCA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfdmJwID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92Y3AgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gVHJpYW5nbGUoYSwgYiwgYykge1xyXG5cclxuXHR0aGlzLmEgPSAoYSAhPT0gdW5kZWZpbmVkKSA/IGEgOiBuZXcgVmVjdG9yMygpO1xyXG5cdHRoaXMuYiA9IChiICE9PSB1bmRlZmluZWQpID8gYiA6IG5ldyBWZWN0b3IzKCk7XHJcblx0dGhpcy5jID0gKGMgIT09IHVuZGVmaW5lZCkgPyBjIDogbmV3IFZlY3RvcjMoKTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oVHJpYW5nbGUsIHtcclxuXHJcblx0Z2V0Tm9ybWFsOiBmdW5jdGlvbiAoYSwgYiwgYywgdGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0Tm9ybWFsKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0YXJnZXQuc3ViVmVjdG9ycyhjLCBiKTtcclxuXHRcdF92MCQxLnN1YlZlY3RvcnMoYSwgYik7XHJcblx0XHR0YXJnZXQuY3Jvc3MoX3YwJDEpO1xyXG5cclxuXHRcdHZhciB0YXJnZXRMZW5ndGhTcSA9IHRhcmdldC5sZW5ndGhTcSgpO1xyXG5cdFx0aWYgKHRhcmdldExlbmd0aFNxID4gMCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRhcmdldC5tdWx0aXBseVNjYWxhcigxIC8gTWF0aC5zcXJ0KHRhcmdldExlbmd0aFNxKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0KDAsIDAsIDApO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xyXG5cdC8vIGJhc2VkIG9uOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvcG9pbnRpbnBvbHkvZGVmYXVsdC5odG1sXHJcblx0Z2V0QmFyeWNvb3JkOiBmdW5jdGlvbiAocG9pbnQsIGEsIGIsIGMsIHRhcmdldCkge1xyXG5cclxuXHRcdF92MCQxLnN1YlZlY3RvcnMoYywgYSk7XHJcblx0XHRfdjEkMy5zdWJWZWN0b3JzKGIsIGEpO1xyXG5cdFx0X3YyJDEuc3ViVmVjdG9ycyhwb2ludCwgYSk7XHJcblxyXG5cdFx0dmFyIGRvdDAwID0gX3YwJDEuZG90KF92MCQxKTtcclxuXHRcdHZhciBkb3QwMSA9IF92MCQxLmRvdChfdjEkMyk7XHJcblx0XHR2YXIgZG90MDIgPSBfdjAkMS5kb3QoX3YyJDEpO1xyXG5cdFx0dmFyIGRvdDExID0gX3YxJDMuZG90KF92MSQzKTtcclxuXHRcdHZhciBkb3QxMiA9IF92MSQzLmRvdChfdjIkMSk7XHJcblxyXG5cdFx0dmFyIGRlbm9tID0gKGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxKTtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVHJpYW5nbGU6IC5nZXRCYXJ5Y29vcmQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbGxpbmVhciBvciBzaW5ndWxhciB0cmlhbmdsZVxyXG5cdFx0aWYgKGRlbm9tID09PSAwKSB7XHJcblxyXG5cdFx0XHQvLyBhcmJpdHJhcnkgbG9jYXRpb24gb3V0c2lkZSBvZiB0cmlhbmdsZT9cclxuXHRcdFx0Ly8gbm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgYmVzdCBpZGVhLCBtYXliZSBzaG91bGQgYmUgcmV0dXJuaW5nIHVuZGVmaW5lZFxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCgtIDIsIC0gMSwgLSAxKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGludkRlbm9tID0gMSAvIGRlbm9tO1xyXG5cdFx0dmFyIHUgPSAoZG90MTEgKiBkb3QwMiAtIGRvdDAxICogZG90MTIpICogaW52RGVub207XHJcblx0XHR2YXIgdiA9IChkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMikgKiBpbnZEZW5vbTtcclxuXHJcblx0XHQvLyBiYXJ5Y2VudHJpYyBjb29yZGluYXRlcyBtdXN0IGFsd2F5cyBzdW0gdG8gMVxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoMSAtIHUgLSB2LCB2LCB1KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKHBvaW50LCBhLCBiLCBjKSB7XHJcblxyXG5cdFx0VHJpYW5nbGUuZ2V0QmFyeWNvb3JkKHBvaW50LCBhLCBiLCBjLCBfdjMpO1xyXG5cclxuXHRcdHJldHVybiAoX3YzLnggPj0gMCkgJiYgKF92My55ID49IDApICYmICgoX3YzLnggKyBfdjMueSkgPD0gMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFVWOiBmdW5jdGlvbiAocG9pbnQsIHAxLCBwMiwgcDMsIHV2MSwgdXYyLCB1djMsIHRhcmdldCkge1xyXG5cclxuXHRcdHRoaXMuZ2V0QmFyeWNvb3JkKHBvaW50LCBwMSwgcDIsIHAzLCBfdjMpO1xyXG5cclxuXHRcdHRhcmdldC5zZXQoMCwgMCk7XHJcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKHV2MSwgX3YzLngpO1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3Rvcih1djIsIF92My55KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IodXYzLCBfdjMueik7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldDtcclxuXHJcblx0fSxcclxuXHJcblx0aXNGcm9udEZhY2luZzogZnVuY3Rpb24gKGEsIGIsIGMsIGRpcmVjdGlvbikge1xyXG5cclxuXHRcdF92MCQxLnN1YlZlY3RvcnMoYywgYik7XHJcblx0XHRfdjEkMy5zdWJWZWN0b3JzKGEsIGIpO1xyXG5cclxuXHRcdC8vIHN0cmljdGx5IGZyb250IGZhY2luZ1xyXG5cdFx0cmV0dXJuIChfdjAkMS5jcm9zcyhfdjEkMykuZG90KGRpcmVjdGlvbikgPCAwKSA/IHRydWUgOiBmYWxzZTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFRyaWFuZ2xlLnByb3RvdHlwZSwge1xyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XHJcblxyXG5cdFx0dGhpcy5hLmNvcHkoYSk7XHJcblx0XHR0aGlzLmIuY29weShiKTtcclxuXHRcdHRoaXMuYy5jb3B5KGMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tUG9pbnRzQW5kSW5kaWNlczogZnVuY3Rpb24gKHBvaW50cywgaTAsIGkxLCBpMikge1xyXG5cclxuXHRcdHRoaXMuYS5jb3B5KHBvaW50c1tpMF0pO1xyXG5cdFx0dGhpcy5iLmNvcHkocG9pbnRzW2kxXSk7XHJcblx0XHR0aGlzLmMuY29weShwb2ludHNbaTJdKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAodHJpYW5nbGUpIHtcclxuXHJcblx0XHR0aGlzLmEuY29weSh0cmlhbmdsZS5hKTtcclxuXHRcdHRoaXMuYi5jb3B5KHRyaWFuZ2xlLmIpO1xyXG5cdFx0dGhpcy5jLmNvcHkodHJpYW5nbGUuYyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRfdjAkMS5zdWJWZWN0b3JzKHRoaXMuYywgdGhpcy5iKTtcclxuXHRcdF92MSQzLnN1YlZlY3RvcnModGhpcy5hLCB0aGlzLmIpO1xyXG5cclxuXHRcdHJldHVybiBfdjAkMS5jcm9zcyhfdjEkMykubGVuZ3RoKCkgKiAwLjU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldE1pZHBvaW50OiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0TWlkcG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyh0aGlzLmEsIHRoaXMuYikuYWRkKHRoaXMuYykubXVsdGlwbHlTY2FsYXIoMSAvIDMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXROb3JtYWw6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0Tm9ybWFsKHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFBsYW5lOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0UGxhbmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uIChwb2ludCwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldEJhcnljb29yZChwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYywgdGFyZ2V0KTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0VVY6IGZ1bmN0aW9uIChwb2ludCwgdXYxLCB1djIsIHV2MywgdGFyZ2V0KSB7XHJcblxyXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldFVWKHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHRyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludChwb2ludCwgdGhpcy5hLCB0aGlzLmIsIHRoaXMuYyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGlzRnJvbnRGYWNpbmc6IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcclxuXHJcblx0XHRyZXR1cm4gVHJpYW5nbGUuaXNGcm9udEZhY2luZyh0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCBkaXJlY3Rpb24pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzVHJpYW5nbGUodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnQ6IGZ1bmN0aW9uIChwLCB0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVHJpYW5nbGU6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYSA9IHRoaXMuYSwgYiA9IHRoaXMuYiwgYyA9IHRoaXMuYztcclxuXHRcdHZhciB2LCB3O1xyXG5cclxuXHRcdC8vIGFsZ29yaXRobSB0aGFua3MgdG8gUmVhbC1UaW1lIENvbGxpc2lvbiBEZXRlY3Rpb24gYnkgQ2hyaXN0ZXIgRXJpY3NvbixcclxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcclxuXHRcdC8vIHVuZGVyIHRoZSBhY2NvbXBhbnlpbmcgbGljZW5zZTsgc2VlIGNoYXB0ZXIgNS4xLjUgZm9yIGRldGFpbGVkIGV4cGxhbmF0aW9uLlxyXG5cdFx0Ly8gYmFzaWNhbGx5LCB3ZSdyZSBkaXN0aW5ndWlzaGluZyB3aGljaCBvZiB0aGUgdm9yb25vaSByZWdpb25zIG9mIHRoZSB0cmlhbmdsZVxyXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxyXG5cclxuXHRcdF92YWIuc3ViVmVjdG9ycyhiLCBhKTtcclxuXHRcdF92YWMuc3ViVmVjdG9ycyhjLCBhKTtcclxuXHRcdF92YXAuc3ViVmVjdG9ycyhwLCBhKTtcclxuXHRcdHZhciBkMSA9IF92YWIuZG90KF92YXApO1xyXG5cdFx0dmFyIGQyID0gX3ZhYy5kb3QoX3ZhcCk7XHJcblx0XHRpZiAoZDEgPD0gMCAmJiBkMiA8PSAwKSB7XHJcblxyXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEE7IGJhcnljZW50cmljIGNvb3JkcyAoMSwgMCwgMClcclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KGEpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfdmJwLnN1YlZlY3RvcnMocCwgYik7XHJcblx0XHR2YXIgZDMgPSBfdmFiLmRvdChfdmJwKTtcclxuXHRcdHZhciBkNCA9IF92YWMuZG90KF92YnApO1xyXG5cdFx0aWYgKGQzID49IDAgJiYgZDQgPD0gZDMpIHtcclxuXHJcblx0XHRcdC8vIHZlcnRleCByZWdpb24gb2YgQjsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLCAwKVxyXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoYik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB2YyA9IGQxICogZDQgLSBkMyAqIGQyO1xyXG5cdFx0aWYgKHZjIDw9IDAgJiYgZDEgPj0gMCAmJiBkMyA8PSAwKSB7XHJcblxyXG5cdFx0XHR2ID0gZDEgLyAoZDEgLSBkMyk7XHJcblx0XHRcdC8vIGVkZ2UgcmVnaW9uIG9mIEFCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDEtdiwgdiwgMClcclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KGEpLmFkZFNjYWxlZFZlY3RvcihfdmFiLCB2KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0X3ZjcC5zdWJWZWN0b3JzKHAsIGMpO1xyXG5cdFx0dmFyIGQ1ID0gX3ZhYi5kb3QoX3ZjcCk7XHJcblx0XHR2YXIgZDYgPSBfdmFjLmRvdChfdmNwKTtcclxuXHRcdGlmIChkNiA+PSAwICYmIGQ1IDw9IGQ2KSB7XHJcblxyXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSlcclxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KGMpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdmIgPSBkNSAqIGQyIC0gZDEgKiBkNjtcclxuXHRcdGlmICh2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCkge1xyXG5cclxuXHRcdFx0dyA9IGQyIC8gKGQyIC0gZDYpO1xyXG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQzsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXcsIDAsIHcpXHJcblx0XHRcdHJldHVybiB0YXJnZXQuY29weShhKS5hZGRTY2FsZWRWZWN0b3IoX3ZhYywgdyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xyXG5cdFx0aWYgKHZhIDw9IDAgJiYgKGQ0IC0gZDMpID49IDAgJiYgKGQ1IC0gZDYpID49IDApIHtcclxuXHJcblx0XHRcdF92YmMuc3ViVmVjdG9ycyhjLCBiKTtcclxuXHRcdFx0dyA9IChkNCAtIGQzKSAvICgoZDQgLSBkMykgKyAoZDUgLSBkNikpO1xyXG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXHJcblx0XHRcdHJldHVybiB0YXJnZXQuY29weShiKS5hZGRTY2FsZWRWZWN0b3IoX3ZiYywgdyk7IC8vIGVkZ2UgcmVnaW9uIG9mIEJDXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZhY2UgcmVnaW9uXHJcblx0XHR2YXIgZGVub20gPSAxIC8gKHZhICsgdmIgKyB2Yyk7XHJcblx0XHQvLyB1ID0gdmEgKiBkZW5vbVxyXG5cdFx0diA9IHZiICogZGVub207XHJcblx0XHR3ID0gdmMgKiBkZW5vbTtcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoYSkuYWRkU2NhbGVkVmVjdG9yKF92YWIsIHYpLmFkZFNjYWxlZFZlY3RvcihfdmFjLCB3KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZXF1YWxzOiBmdW5jdGlvbiAodHJpYW5nbGUpIHtcclxuXHJcblx0XHRyZXR1cm4gdHJpYW5nbGUuYS5lcXVhbHModGhpcy5hKSAmJiB0cmlhbmdsZS5iLmVxdWFscyh0aGlzLmIpICYmIHRyaWFuZ2xlLmMuZXF1YWxzKHRoaXMuYyk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIF9jb2xvcktleXdvcmRzID0ge1xyXG5cdCdhbGljZWJsdWUnOiAweEYwRjhGRiwgJ2FudGlxdWV3aGl0ZSc6IDB4RkFFQkQ3LCAnYXF1YSc6IDB4MDBGRkZGLCAnYXF1YW1hcmluZSc6IDB4N0ZGRkQ0LCAnYXp1cmUnOiAweEYwRkZGRixcclxuXHQnYmVpZ2UnOiAweEY1RjVEQywgJ2Jpc3F1ZSc6IDB4RkZFNEM0LCAnYmxhY2snOiAweDAwMDAwMCwgJ2JsYW5jaGVkYWxtb25kJzogMHhGRkVCQ0QsICdibHVlJzogMHgwMDAwRkYsICdibHVldmlvbGV0JzogMHg4QTJCRTIsXHJcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxyXG5cdCdjb3JuZmxvd2VyYmx1ZSc6IDB4NjQ5NUVELCAnY29ybnNpbGsnOiAweEZGRjhEQywgJ2NyaW1zb24nOiAweERDMTQzQywgJ2N5YW4nOiAweDAwRkZGRiwgJ2RhcmtibHVlJzogMHgwMDAwOEIsICdkYXJrY3lhbic6IDB4MDA4QjhCLFxyXG5cdCdkYXJrZ29sZGVucm9kJzogMHhCODg2MEIsICdkYXJrZ3JheSc6IDB4QTlBOUE5LCAnZGFya2dyZWVuJzogMHgwMDY0MDAsICdkYXJrZ3JleSc6IDB4QTlBOUE5LCAnZGFya2toYWtpJzogMHhCREI3NkIsICdkYXJrbWFnZW50YSc6IDB4OEIwMDhCLFxyXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXHJcblx0J2RhcmtzbGF0ZWJsdWUnOiAweDQ4M0Q4QiwgJ2RhcmtzbGF0ZWdyYXknOiAweDJGNEY0RiwgJ2RhcmtzbGF0ZWdyZXknOiAweDJGNEY0RiwgJ2Rhcmt0dXJxdW9pc2UnOiAweDAwQ0VEMSwgJ2Rhcmt2aW9sZXQnOiAweDk0MDBEMyxcclxuXHQnZGVlcHBpbmsnOiAweEZGMTQ5MywgJ2RlZXBza3libHVlJzogMHgwMEJGRkYsICdkaW1ncmF5JzogMHg2OTY5NjksICdkaW1ncmV5JzogMHg2OTY5NjksICdkb2RnZXJibHVlJzogMHgxRTkwRkYsICdmaXJlYnJpY2snOiAweEIyMjIyMixcclxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcclxuXHQnZ29sZGVucm9kJzogMHhEQUE1MjAsICdncmF5JzogMHg4MDgwODAsICdncmVlbic6IDB4MDA4MDAwLCAnZ3JlZW55ZWxsb3cnOiAweEFERkYyRiwgJ2dyZXknOiAweDgwODA4MCwgJ2hvbmV5ZGV3JzogMHhGMEZGRjAsICdob3RwaW5rJzogMHhGRjY5QjQsXHJcblx0J2luZGlhbnJlZCc6IDB4Q0Q1QzVDLCAnaW5kaWdvJzogMHg0QjAwODIsICdpdm9yeSc6IDB4RkZGRkYwLCAna2hha2knOiAweEYwRTY4QywgJ2xhdmVuZGVyJzogMHhFNkU2RkEsICdsYXZlbmRlcmJsdXNoJzogMHhGRkYwRjUsICdsYXduZ3JlZW4nOiAweDdDRkMwMCxcclxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxyXG5cdCdsaWdodGdyZWVuJzogMHg5MEVFOTAsICdsaWdodGdyZXknOiAweEQzRDNEMywgJ2xpZ2h0cGluayc6IDB4RkZCNkMxLCAnbGlnaHRzYWxtb24nOiAweEZGQTA3QSwgJ2xpZ2h0c2VhZ3JlZW4nOiAweDIwQjJBQSwgJ2xpZ2h0c2t5Ymx1ZSc6IDB4ODdDRUZBLFxyXG5cdCdsaWdodHNsYXRlZ3JheSc6IDB4Nzc4ODk5LCAnbGlnaHRzbGF0ZWdyZXknOiAweDc3ODg5OSwgJ2xpZ2h0c3RlZWxibHVlJzogMHhCMEM0REUsICdsaWdodHllbGxvdyc6IDB4RkZGRkUwLCAnbGltZSc6IDB4MDBGRjAwLCAnbGltZWdyZWVuJzogMHgzMkNEMzIsXHJcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxyXG5cdCdtZWRpdW1wdXJwbGUnOiAweDkzNzBEQiwgJ21lZGl1bXNlYWdyZWVuJzogMHgzQ0IzNzEsICdtZWRpdW1zbGF0ZWJsdWUnOiAweDdCNjhFRSwgJ21lZGl1bXNwcmluZ2dyZWVuJzogMHgwMEZBOUEsICdtZWRpdW10dXJxdW9pc2UnOiAweDQ4RDFDQyxcclxuXHQnbWVkaXVtdmlvbGV0cmVkJzogMHhDNzE1ODUsICdtaWRuaWdodGJsdWUnOiAweDE5MTk3MCwgJ21pbnRjcmVhbSc6IDB4RjVGRkZBLCAnbWlzdHlyb3NlJzogMHhGRkU0RTEsICdtb2NjYXNpbic6IDB4RkZFNEI1LCAnbmF2YWpvd2hpdGUnOiAweEZGREVBRCxcclxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxyXG5cdCdwYWxlZ29sZGVucm9kJzogMHhFRUU4QUEsICdwYWxlZ3JlZW4nOiAweDk4RkI5OCwgJ3BhbGV0dXJxdW9pc2UnOiAweEFGRUVFRSwgJ3BhbGV2aW9sZXRyZWQnOiAweERCNzA5MywgJ3BhcGF5YXdoaXAnOiAweEZGRUZENSwgJ3BlYWNocHVmZic6IDB4RkZEQUI5LFxyXG5cdCdwZXJ1JzogMHhDRDg1M0YsICdwaW5rJzogMHhGRkMwQ0IsICdwbHVtJzogMHhEREEwREQsICdwb3dkZXJibHVlJzogMHhCMEUwRTYsICdwdXJwbGUnOiAweDgwMDA4MCwgJ3JlYmVjY2FwdXJwbGUnOiAweDY2MzM5OSwgJ3JlZCc6IDB4RkYwMDAwLCAncm9zeWJyb3duJzogMHhCQzhGOEYsXHJcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXHJcblx0J3NpZW5uYSc6IDB4QTA1MjJELCAnc2lsdmVyJzogMHhDMEMwQzAsICdza3libHVlJzogMHg4N0NFRUIsICdzbGF0ZWJsdWUnOiAweDZBNUFDRCwgJ3NsYXRlZ3JheSc6IDB4NzA4MDkwLCAnc2xhdGVncmV5JzogMHg3MDgwOTAsICdzbm93JzogMHhGRkZBRkEsXHJcblx0J3NwcmluZ2dyZWVuJzogMHgwMEZGN0YsICdzdGVlbGJsdWUnOiAweDQ2ODJCNCwgJ3Rhbic6IDB4RDJCNDhDLCAndGVhbCc6IDB4MDA4MDgwLCAndGhpc3RsZSc6IDB4RDhCRkQ4LCAndG9tYXRvJzogMHhGRjYzNDcsICd0dXJxdW9pc2UnOiAweDQwRTBEMCxcclxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMlxyXG59O1xyXG5cclxudmFyIF9oc2xBID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XHJcbnZhciBfaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xyXG5cclxuZnVuY3Rpb24gQ29sb3IociwgZywgYikge1xyXG5cclxuXHRpZiAoZyA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdC8vIHIgaXMgVEhSRUUuQ29sb3IsIGhleCBvciBzdHJpbmdcclxuXHRcdHJldHVybiB0aGlzLnNldChyKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcy5zZXRSR0IociwgZywgYik7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcclxuXHJcblx0aWYgKHQgPCAwKSB7IHQgKz0gMTsgfVxyXG5cdGlmICh0ID4gMSkgeyB0IC09IDE7IH1cclxuXHRpZiAodCA8IDEgLyA2KSB7IHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0OyB9XHJcblx0aWYgKHQgPCAxIC8gMikgeyByZXR1cm4gcTsgfVxyXG5cdGlmICh0IDwgMiAvIDMpIHsgcmV0dXJuIHAgKyAocSAtIHApICogNiAqICgyIC8gMyAtIHQpOyB9XHJcblx0cmV0dXJuIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBTUkdCVG9MaW5lYXIoYykge1xyXG5cclxuXHRyZXR1cm4gKGMgPCAwLjA0MDQ1KSA/IGMgKiAwLjA3NzM5OTM4MDggOiBNYXRoLnBvdyhjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gTGluZWFyVG9TUkdCKGMpIHtcclxuXHJcblx0cmV0dXJuIChjIDwgMC4wMDMxMzA4KSA/IGMgKiAxMi45MiA6IDEuMDU1ICogKE1hdGgucG93KGMsIDAuNDE2NjYpKSAtIDAuMDU1O1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihDb2xvci5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNDb2xvcjogdHJ1ZSxcclxuXHJcblx0cjogMSwgZzogMSwgYjogMSxcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAodmFsdWUgJiYgdmFsdWUuaXNDb2xvcikge1xyXG5cclxuXHRcdFx0dGhpcy5jb3B5KHZhbHVlKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0SGV4KHZhbHVlKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0U3R5bGUodmFsdWUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoc2NhbGFyKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gc2NhbGFyO1xyXG5cdFx0dGhpcy5nID0gc2NhbGFyO1xyXG5cdFx0dGhpcy5iID0gc2NhbGFyO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRIZXg6IGZ1bmN0aW9uIChoZXgpIHtcclxuXHJcblx0XHRoZXggPSBNYXRoLmZsb29yKGhleCk7XHJcblxyXG5cdFx0dGhpcy5yID0gKGhleCA+PiAxNiAmIDI1NSkgLyAyNTU7XHJcblx0XHR0aGlzLmcgPSAoaGV4ID4+IDggJiAyNTUpIC8gMjU1O1xyXG5cdFx0dGhpcy5iID0gKGhleCAmIDI1NSkgLyAyNTU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJHQjogZnVuY3Rpb24gKHIsIGcsIGIpIHtcclxuXHJcblx0XHR0aGlzLnIgPSByO1xyXG5cdFx0dGhpcy5nID0gZztcclxuXHRcdHRoaXMuYiA9IGI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEhTTDogZnVuY3Rpb24gKGgsIHMsIGwpIHtcclxuXHJcblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxyXG5cdFx0aCA9IF9NYXRoLmV1Y2xpZGVhbk1vZHVsbyhoLCAxKTtcclxuXHRcdHMgPSBfTWF0aC5jbGFtcChzLCAwLCAxKTtcclxuXHRcdGwgPSBfTWF0aC5jbGFtcChsLCAwLCAxKTtcclxuXHJcblx0XHRpZiAocyA9PT0gMCkge1xyXG5cclxuXHRcdFx0dGhpcy5yID0gdGhpcy5nID0gdGhpcy5iID0gbDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dmFyIHAgPSBsIDw9IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSAobCAqIHMpO1xyXG5cdFx0XHR2YXIgcSA9ICgyICogbCkgLSBwO1xyXG5cclxuXHRcdFx0dGhpcy5yID0gaHVlMnJnYihxLCBwLCBoICsgMSAvIDMpO1xyXG5cdFx0XHR0aGlzLmcgPSBodWUycmdiKHEsIHAsIGgpO1xyXG5cdFx0XHR0aGlzLmIgPSBodWUycmdiKHEsIHAsIGggLSAxIC8gMyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRTdHlsZTogZnVuY3Rpb24gKHN0eWxlKSB7XHJcblxyXG5cdFx0ZnVuY3Rpb24gaGFuZGxlQWxwaGEoc3RyaW5nKSB7XHJcblxyXG5cdFx0XHRpZiAoc3RyaW5nID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0XHRpZiAocGFyc2VGbG9hdChzdHJpbmcpIDwgMSkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkNvbG9yOiBBbHBoYSBjb21wb25lbnQgb2YgJyArIHN0eWxlICsgJyB3aWxsIGJlIGlnbm9yZWQuJyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHR2YXIgbTtcclxuXHJcblx0XHRpZiAobSA9IC9eKCg/OnJnYnxoc2wpYT8pXFwoXFxzKihbXlxcKV0qKVxcKS8uZXhlYyhzdHlsZSkpIHtcclxuXHJcblx0XHRcdC8vIHJnYiAvIGhzbFxyXG5cclxuXHRcdFx0dmFyIGNvbG9yO1xyXG5cdFx0XHR2YXIgbmFtZSA9IG1bMV07XHJcblx0XHRcdHZhciBjb21wb25lbnRzID0gbVsyXTtcclxuXHJcblx0XHRcdHN3aXRjaCAobmFtZSkge1xyXG5cclxuXHRcdFx0XHRjYXNlICdyZ2InOlxyXG5cdFx0XHRcdGNhc2UgJ3JnYmEnOlxyXG5cclxuXHRcdFx0XHRcdGlmIChjb2xvciA9IC9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoY29tcG9uZW50cykpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHJnYigyNTUsMCwwKSByZ2JhKDI1NSwwLDAsMC41KVxyXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbigyNTUsIHBhcnNlSW50KGNvbG9yWzFdLCAxMCkpIC8gMjU1O1xyXG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbigyNTUsIHBhcnNlSW50KGNvbG9yWzJdLCAxMCkpIC8gMjU1O1xyXG5cdFx0XHRcdFx0XHR0aGlzLmIgPSBNYXRoLm1pbigyNTUsIHBhcnNlSW50KGNvbG9yWzNdLCAxMCkpIC8gMjU1O1xyXG5cclxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoY29sb3JbNV0pO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChjb2xvciA9IC9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoY29tcG9uZW50cykpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIHJnYigxMDAlLDAlLDAlKSByZ2JhKDEwMCUsMCUsMCUsMC41KVxyXG5cdFx0XHRcdFx0XHR0aGlzLnIgPSBNYXRoLm1pbigxMDAsIHBhcnNlSW50KGNvbG9yWzFdLCAxMCkpIC8gMTAwO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbigxMDAsIHBhcnNlSW50KGNvbG9yWzJdLCAxMCkpIC8gMTAwO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmIgPSBNYXRoLm1pbigxMDAsIHBhcnNlSW50KGNvbG9yWzNdLCAxMCkpIC8gMTAwO1xyXG5cclxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoY29sb3JbNV0pO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdoc2wnOlxyXG5cdFx0XHRcdGNhc2UgJ2hzbGEnOlxyXG5cclxuXHRcdFx0XHRcdGlmIChjb2xvciA9IC9eKFswLTldKlxcLj9bMC05XSspXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoY29tcG9uZW50cykpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXHJcblx0XHRcdFx0XHRcdHZhciBoID0gcGFyc2VGbG9hdChjb2xvclsxXSkgLyAzNjA7XHJcblx0XHRcdFx0XHRcdHZhciBzID0gcGFyc2VJbnQoY29sb3JbMl0sIDEwKSAvIDEwMDtcclxuXHRcdFx0XHRcdFx0dmFyIGwgPSBwYXJzZUludChjb2xvclszXSwgMTApIC8gMTAwO1xyXG5cclxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoY29sb3JbNV0pO1xyXG5cclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc2V0SFNMKGgsIHMsIGwpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKG0gPSAvXlxcIyhbQS1GYS1mMC05XSspJC8uZXhlYyhzdHlsZSkpIHtcclxuXHJcblx0XHRcdC8vIGhleCBjb2xvclxyXG5cclxuXHRcdFx0dmFyIGhleCA9IG1bMV07XHJcblx0XHRcdHZhciBzaXplID0gaGV4Lmxlbmd0aDtcclxuXHJcblx0XHRcdGlmIChzaXplID09PSAzKSB7XHJcblxyXG5cdFx0XHRcdC8vICNmZjBcclxuXHRcdFx0XHR0aGlzLnIgPSBwYXJzZUludChoZXguY2hhckF0KDApICsgaGV4LmNoYXJBdCgwKSwgMTYpIC8gMjU1O1xyXG5cdFx0XHRcdHRoaXMuZyA9IHBhcnNlSW50KGhleC5jaGFyQXQoMSkgKyBoZXguY2hhckF0KDEpLCAxNikgLyAyNTU7XHJcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoaGV4LmNoYXJBdCgyKSArIGhleC5jaGFyQXQoMiksIDE2KSAvIDI1NTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKHNpemUgPT09IDYpIHtcclxuXHJcblx0XHRcdFx0Ly8gI2ZmMDAwMFxyXG5cdFx0XHRcdHRoaXMuciA9IHBhcnNlSW50KGhleC5jaGFyQXQoMCkgKyBoZXguY2hhckF0KDEpLCAxNikgLyAyNTU7XHJcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoaGV4LmNoYXJBdCgyKSArIGhleC5jaGFyQXQoMyksIDE2KSAvIDI1NTtcclxuXHRcdFx0XHR0aGlzLmIgPSBwYXJzZUludChoZXguY2hhckF0KDQpICsgaGV4LmNoYXJBdCg1KSwgMTYpIC8gMjU1O1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHN0eWxlICYmIHN0eWxlLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdC8vIGNvbG9yIGtleXdvcmRzXHJcblx0XHRcdHZhciBoZXggPSBfY29sb3JLZXl3b3Jkc1tzdHlsZV07XHJcblxyXG5cdFx0XHRpZiAoaGV4ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Ly8gcmVkXHJcblx0XHRcdFx0dGhpcy5zZXRIZXgoaGV4KTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIHVua25vd24gY29sb3JcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkNvbG9yOiBVbmtub3duIGNvbG9yICcgKyBzdHlsZSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnIsIHRoaXMuZywgdGhpcy5iKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gY29sb3IucjtcclxuXHRcdHRoaXMuZyA9IGNvbG9yLmc7XHJcblx0XHR0aGlzLmIgPSBjb2xvci5iO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKGNvbG9yLCBnYW1tYUZhY3Rvcikge1xyXG5cclxuXHRcdGlmIChnYW1tYUZhY3RvciA9PT0gdW5kZWZpbmVkKSB7IGdhbW1hRmFjdG9yID0gMi4wOyB9XHJcblxyXG5cdFx0dGhpcy5yID0gTWF0aC5wb3coY29sb3IuciwgZ2FtbWFGYWN0b3IpO1xyXG5cdFx0dGhpcy5nID0gTWF0aC5wb3coY29sb3IuZywgZ2FtbWFGYWN0b3IpO1xyXG5cdFx0dGhpcy5iID0gTWF0aC5wb3coY29sb3IuYiwgZ2FtbWFGYWN0b3IpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5TGluZWFyVG9HYW1tYTogZnVuY3Rpb24gKGNvbG9yLCBnYW1tYUZhY3Rvcikge1xyXG5cclxuXHRcdGlmIChnYW1tYUZhY3RvciA9PT0gdW5kZWZpbmVkKSB7IGdhbW1hRmFjdG9yID0gMi4wOyB9XHJcblxyXG5cdFx0dmFyIHNhZmVJbnZlcnNlID0gKGdhbW1hRmFjdG9yID4gMCkgPyAoMS4wIC8gZ2FtbWFGYWN0b3IpIDogMS4wO1xyXG5cclxuXHRcdHRoaXMuciA9IE1hdGgucG93KGNvbG9yLnIsIHNhZmVJbnZlcnNlKTtcclxuXHRcdHRoaXMuZyA9IE1hdGgucG93KGNvbG9yLmcsIHNhZmVJbnZlcnNlKTtcclxuXHRcdHRoaXMuYiA9IE1hdGgucG93KGNvbG9yLmIsIHNhZmVJbnZlcnNlKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29udmVydEdhbW1hVG9MaW5lYXI6IGZ1bmN0aW9uIChnYW1tYUZhY3Rvcikge1xyXG5cclxuXHRcdHRoaXMuY29weUdhbW1hVG9MaW5lYXIodGhpcywgZ2FtbWFGYWN0b3IpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb252ZXJ0TGluZWFyVG9HYW1tYTogZnVuY3Rpb24gKGdhbW1hRmFjdG9yKSB7XHJcblxyXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9HYW1tYSh0aGlzLCBnYW1tYUZhY3Rvcik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHlTUkdCVG9MaW5lYXI6IGZ1bmN0aW9uIChjb2xvcikge1xyXG5cclxuXHRcdHRoaXMuciA9IFNSR0JUb0xpbmVhcihjb2xvci5yKTtcclxuXHRcdHRoaXMuZyA9IFNSR0JUb0xpbmVhcihjb2xvci5nKTtcclxuXHRcdHRoaXMuYiA9IFNSR0JUb0xpbmVhcihjb2xvci5iKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weUxpbmVhclRvU1JHQjogZnVuY3Rpb24gKGNvbG9yKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gTGluZWFyVG9TUkdCKGNvbG9yLnIpO1xyXG5cdFx0dGhpcy5nID0gTGluZWFyVG9TUkdCKGNvbG9yLmcpO1xyXG5cdFx0dGhpcy5iID0gTGluZWFyVG9TUkdCKGNvbG9yLmIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb252ZXJ0U1JHQlRvTGluZWFyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5jb3B5U1JHQlRvTGluZWFyKHRoaXMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb252ZXJ0TGluZWFyVG9TUkdCOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKHRoaXMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRIZXg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gKHRoaXMuciAqIDI1NSkgPDwgMTYgXiAodGhpcy5nICogMjU1KSA8PCA4IF4gKHRoaXMuYiAqIDI1NSkgPDwgMDtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0SGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuICgnMDAwMDAwJyArIHRoaXMuZ2V0SGV4KCkudG9TdHJpbmcoMTYpKS5zbGljZSgtIDYpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRIU0w6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Db2xvcjogLmdldEhTTCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnKTtcclxuXHRcdFx0dGFyZ2V0ID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByID0gdGhpcy5yLCBnID0gdGhpcy5nLCBiID0gdGhpcy5iO1xyXG5cclxuXHRcdHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcclxuXHRcdHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcclxuXHJcblx0XHR2YXIgaHVlLCBzYXR1cmF0aW9uO1xyXG5cdFx0dmFyIGxpZ2h0bmVzcyA9IChtaW4gKyBtYXgpIC8gMi4wO1xyXG5cclxuXHRcdGlmIChtaW4gPT09IG1heCkge1xyXG5cclxuXHRcdFx0aHVlID0gMDtcclxuXHRcdFx0c2F0dXJhdGlvbiA9IDA7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHZhciBkZWx0YSA9IG1heCAtIG1pbjtcclxuXHJcblx0XHRcdHNhdHVyYXRpb24gPSBsaWdodG5lc3MgPD0gMC41ID8gZGVsdGEgLyAobWF4ICsgbWluKSA6IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xyXG5cclxuXHRcdFx0c3dpdGNoIChtYXgpIHtcclxuXHJcblx0XHRcdFx0Y2FzZSByOiBodWUgPSAoZyAtIGIpIC8gZGVsdGEgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgZzogaHVlID0gKGIgLSByKSAvIGRlbHRhICsgMjsgYnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBiOiBodWUgPSAociAtIGcpIC8gZGVsdGEgKyA0OyBicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGh1ZSAvPSA2O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0YXJnZXQuaCA9IGh1ZTtcclxuXHRcdHRhcmdldC5zID0gc2F0dXJhdGlvbjtcclxuXHRcdHRhcmdldC5sID0gbGlnaHRuZXNzO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFN0eWxlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuICdyZ2IoJyArICgodGhpcy5yICogMjU1KSB8IDApICsgJywnICsgKCh0aGlzLmcgKiAyNTUpIHwgMCkgKyAnLCcgKyAoKHRoaXMuYiAqIDI1NSkgfCAwKSArICcpJztcclxuXHJcblx0fSxcclxuXHJcblx0b2Zmc2V0SFNMOiBmdW5jdGlvbiAoaCwgcywgbCkge1xyXG5cclxuXHRcdHRoaXMuZ2V0SFNMKF9oc2xBKTtcclxuXHJcblx0XHRfaHNsQS5oICs9IGg7IF9oc2xBLnMgKz0gczsgX2hzbEEubCArPSBsO1xyXG5cclxuXHRcdHRoaXMuc2V0SFNMKF9oc2xBLmgsIF9oc2xBLnMsIF9oc2xBLmwpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uIChjb2xvcikge1xyXG5cclxuXHRcdHRoaXMuciArPSBjb2xvci5yO1xyXG5cdFx0dGhpcy5nICs9IGNvbG9yLmc7XHJcblx0XHR0aGlzLmIgKz0gY29sb3IuYjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0YWRkQ29sb3JzOiBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIpIHtcclxuXHJcblx0XHR0aGlzLnIgPSBjb2xvcjEuciArIGNvbG9yMi5yO1xyXG5cdFx0dGhpcy5nID0gY29sb3IxLmcgKyBjb2xvcjIuZztcclxuXHRcdHRoaXMuYiA9IGNvbG9yMS5iICsgY29sb3IyLmI7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnIgKz0gcztcclxuXHRcdHRoaXMuZyArPSBzO1xyXG5cdFx0dGhpcy5iICs9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN1YjogZnVuY3Rpb24gKGNvbG9yKSB7XHJcblxyXG5cdFx0dGhpcy5yID0gTWF0aC5tYXgoMCwgdGhpcy5yIC0gY29sb3Iucik7XHJcblx0XHR0aGlzLmcgPSBNYXRoLm1heCgwLCB0aGlzLmcgLSBjb2xvci5nKTtcclxuXHRcdHRoaXMuYiA9IE1hdGgubWF4KDAsIHRoaXMuYiAtIGNvbG9yLmIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseTogZnVuY3Rpb24gKGNvbG9yKSB7XHJcblxyXG5cdFx0dGhpcy5yICo9IGNvbG9yLnI7XHJcblx0XHR0aGlzLmcgKj0gY29sb3IuZztcclxuXHRcdHRoaXMuYiAqPSBjb2xvci5iO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHR0aGlzLnIgKj0gcztcclxuXHRcdHRoaXMuZyAqPSBzO1xyXG5cdFx0dGhpcy5iICo9IHM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxlcnA6IGZ1bmN0aW9uIChjb2xvciwgYWxwaGEpIHtcclxuXHJcblx0XHR0aGlzLnIgKz0gKGNvbG9yLnIgLSB0aGlzLnIpICogYWxwaGE7XHJcblx0XHR0aGlzLmcgKz0gKGNvbG9yLmcgLSB0aGlzLmcpICogYWxwaGE7XHJcblx0XHR0aGlzLmIgKz0gKGNvbG9yLmIgLSB0aGlzLmIpICogYWxwaGE7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxlcnBIU0w6IGZ1bmN0aW9uIChjb2xvciwgYWxwaGEpIHtcclxuXHJcblx0XHR0aGlzLmdldEhTTChfaHNsQSk7XHJcblx0XHRjb2xvci5nZXRIU0woX2hzbEIpO1xyXG5cclxuXHRcdHZhciBoID0gX01hdGgubGVycChfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSk7XHJcblx0XHR2YXIgcyA9IF9NYXRoLmxlcnAoX2hzbEEucywgX2hzbEIucywgYWxwaGEpO1xyXG5cdFx0dmFyIGwgPSBfTWF0aC5sZXJwKF9oc2xBLmwsIF9oc2xCLmwsIGFscGhhKTtcclxuXHJcblx0XHR0aGlzLnNldEhTTChoLCBzLCBsKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZXF1YWxzOiBmdW5jdGlvbiAoYykge1xyXG5cclxuXHRcdHJldHVybiAoYy5yID09PSB0aGlzLnIpICYmIChjLmcgPT09IHRoaXMuZykgJiYgKGMuYiA9PT0gdGhpcy5iKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0dGhpcy5yID0gYXJyYXlbb2Zmc2V0XTtcclxuXHRcdHRoaXMuZyA9IGFycmF5W29mZnNldCArIDFdO1xyXG5cdFx0dGhpcy5iID0gYXJyYXlbb2Zmc2V0ICsgMl07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvQXJyYXk6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKGFycmF5ID09PSB1bmRlZmluZWQpIHsgYXJyYXkgPSBbXTsgfVxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHRhcnJheVtvZmZzZXRdID0gdGhpcy5yO1xyXG5cdFx0YXJyYXlbb2Zmc2V0ICsgMV0gPSB0aGlzLmc7XHJcblx0XHRhcnJheVtvZmZzZXQgKyAyXSA9IHRoaXMuYjtcclxuXHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdldEhleCgpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEZhY2UzKGEsIGIsIGMsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXgpIHtcclxuXHJcblx0dGhpcy5hID0gYTtcclxuXHR0aGlzLmIgPSBiO1xyXG5cdHRoaXMuYyA9IGM7XHJcblxyXG5cdHRoaXMubm9ybWFsID0gKG5vcm1hbCAmJiBub3JtYWwuaXNWZWN0b3IzKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKCk7XHJcblx0dGhpcy52ZXJ0ZXhOb3JtYWxzID0gQXJyYXkuaXNBcnJheShub3JtYWwpID8gbm9ybWFsIDogW107XHJcblxyXG5cdHRoaXMuY29sb3IgPSAoY29sb3IgJiYgY29sb3IuaXNDb2xvcikgPyBjb2xvciA6IG5ldyBDb2xvcigpO1xyXG5cdHRoaXMudmVydGV4Q29sb3JzID0gQXJyYXkuaXNBcnJheShjb2xvcikgPyBjb2xvciA6IFtdO1xyXG5cclxuXHR0aGlzLm1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4ICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbEluZGV4IDogMDtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oRmFjZTMucHJvdG90eXBlLCB7XHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdHRoaXMuYSA9IHNvdXJjZS5hO1xyXG5cdFx0dGhpcy5iID0gc291cmNlLmI7XHJcblx0XHR0aGlzLmMgPSBzb3VyY2UuYztcclxuXHJcblx0XHR0aGlzLm5vcm1hbC5jb3B5KHNvdXJjZS5ub3JtYWwpO1xyXG5cdFx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbEluZGV4ID0gc291cmNlLm1hdGVyaWFsSW5kZXg7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy52ZXJ0ZXhOb3JtYWxzW2ldID0gc291cmNlLnZlcnRleE5vcm1hbHNbaV0uY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleENvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZlcnRleENvbG9yc1tpXSA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnNbaV0uY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqL1xyXG5cclxudmFyIG1hdGVyaWFsSWQgPSAwO1xyXG5cclxuZnVuY3Rpb24gTWF0ZXJpYWwoKSB7XHJcblxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWQnLCB7IHZhbHVlOiBtYXRlcmlhbElkKysgfSk7XHJcblxyXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHR0aGlzLm5hbWUgPSAnJztcclxuXHR0aGlzLnR5cGUgPSAnTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmZvZyA9IHRydWU7XHJcblxyXG5cdHRoaXMuYmxlbmRpbmcgPSBOb3JtYWxCbGVuZGluZztcclxuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XHJcblx0dGhpcy5mbGF0U2hhZGluZyA9IGZhbHNlO1xyXG5cdHRoaXMudmVydGV4VGFuZ2VudHMgPSBmYWxzZTtcclxuXHR0aGlzLnZlcnRleENvbG9ycyA9IE5vQ29sb3JzOyAvLyBUSFJFRS5Ob0NvbG9ycywgVEhSRUUuVmVydGV4Q29sb3JzLCBUSFJFRS5GYWNlQ29sb3JzXHJcblxyXG5cdHRoaXMub3BhY2l0eSA9IDE7XHJcblx0dGhpcy50cmFuc3BhcmVudCA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLmJsZW5kU3JjID0gU3JjQWxwaGFGYWN0b3I7XHJcblx0dGhpcy5ibGVuZERzdCA9IE9uZU1pbnVzU3JjQWxwaGFGYWN0b3I7XHJcblx0dGhpcy5ibGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XHJcblx0dGhpcy5ibGVuZFNyY0FscGhhID0gbnVsbDtcclxuXHR0aGlzLmJsZW5kRHN0QWxwaGEgPSBudWxsO1xyXG5cdHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDtcclxuXHJcblx0dGhpcy5kZXB0aEZ1bmMgPSBMZXNzRXF1YWxEZXB0aDtcclxuXHR0aGlzLmRlcHRoVGVzdCA9IHRydWU7XHJcblx0dGhpcy5kZXB0aFdyaXRlID0gdHJ1ZTtcclxuXHJcblx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gMHhmZjtcclxuXHR0aGlzLnN0ZW5jaWxGdW5jID0gQWx3YXlzU3RlbmNpbEZ1bmM7XHJcblx0dGhpcy5zdGVuY2lsUmVmID0gMDtcclxuXHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IDB4ZmY7XHJcblx0dGhpcy5zdGVuY2lsRmFpbCA9IEtlZXBTdGVuY2lsT3A7XHJcblx0dGhpcy5zdGVuY2lsWkZhaWwgPSBLZWVwU3RlbmNpbE9wO1xyXG5cdHRoaXMuc3RlbmNpbFpQYXNzID0gS2VlcFN0ZW5jaWxPcDtcclxuXHR0aGlzLnN0ZW5jaWxXcml0ZSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcclxuXHR0aGlzLmNsaXBJbnRlcnNlY3Rpb24gPSBmYWxzZTtcclxuXHR0aGlzLmNsaXBTaGFkb3dzID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuc2hhZG93U2lkZSA9IG51bGw7XHJcblxyXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XHJcblxyXG5cdHRoaXMucHJlY2lzaW9uID0gbnVsbDsgLy8gb3ZlcnJpZGUgdGhlIHJlbmRlcmVyJ3MgZGVmYXVsdCBwcmVjaXNpb24gZm9yIHRoaXMgbWF0ZXJpYWxcclxuXHJcblx0dGhpcy5wb2x5Z29uT2Zmc2V0ID0gZmFsc2U7XHJcblx0dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yID0gMDtcclxuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XHJcblxyXG5cdHRoaXMuZGl0aGVyaW5nID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuYWxwaGFUZXN0ID0gMDtcclxuXHR0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnZpc2libGUgPSB0cnVlO1xyXG5cclxuXHR0aGlzLnRvbmVNYXBwZWQgPSB0cnVlO1xyXG5cclxuXHR0aGlzLnVzZXJEYXRhID0ge307XHJcblxyXG5cdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxufVxyXG5cclxuTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBNYXRlcmlhbCxcclxuXHJcblx0aXNNYXRlcmlhbDogdHJ1ZSxcclxuXHJcblx0b25CZWZvcmVDb21waWxlOiBmdW5jdGlvbiAoKSB7IH0sXHJcblxyXG5cdHNldFZhbHVlczogZnVuY3Rpb24gKHZhbHVlcykge1xyXG5cclxuXHRcdGlmICh2YWx1ZXMgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gdmFsdWVzKSB7XHJcblxyXG5cdFx0XHR2YXIgbmV3VmFsdWUgPSB2YWx1ZXNba2V5XTtcclxuXHJcblx0XHRcdGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlRIUkVFLk1hdGVyaWFsOiAnXCIgKyBrZXkgKyBcIicgcGFyYW1ldGVyIGlzIHVuZGVmaW5lZC5cIik7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBmb3IgYmFja3dhcmQgY29tcGF0YWJpbGl0eSBpZiBzaGFkaW5nIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3JcclxuXHRcdFx0aWYgKGtleSA9PT0gJ3NoYWRpbmcnKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nKTtcclxuXHRcdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKG5ld1ZhbHVlID09PSBGbGF0U2hhZGluZykgPyB0cnVlIDogZmFsc2U7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgY3VycmVudFZhbHVlID0gdGhpc1trZXldO1xyXG5cclxuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlRIUkVFLlwiICsgdGhpcy50eXBlICsgXCI6ICdcIiArIGtleSArIFwiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiKTtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzQ29sb3IpIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudFZhbHVlLnNldChuZXdWYWx1ZSk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKChjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLmlzVmVjdG9yMykgJiYgKG5ld1ZhbHVlICYmIG5ld1ZhbHVlLmlzVmVjdG9yMykpIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudFZhbHVlLmNvcHkobmV3VmFsdWUpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0dGhpc1trZXldID0gbmV3VmFsdWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGlzUm9vdCA9IChtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnKTtcclxuXHJcblx0XHRpZiAoaXNSb290KSB7XHJcblxyXG5cdFx0XHRtZXRhID0ge1xyXG5cdFx0XHRcdHRleHR1cmVzOiB7fSxcclxuXHRcdFx0XHRpbWFnZXM6IHt9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkYXRhID0ge1xyXG5cdFx0XHRtZXRhZGF0YToge1xyXG5cdFx0XHRcdHZlcnNpb246IDQuNSxcclxuXHRcdFx0XHR0eXBlOiAnTWF0ZXJpYWwnLFxyXG5cdFx0XHRcdGdlbmVyYXRvcjogJ01hdGVyaWFsLnRvSlNPTidcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzdGFuZGFyZCBNYXRlcmlhbCBzZXJpYWxpemF0aW9uXHJcblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XHJcblx0XHRkYXRhLnR5cGUgPSB0aGlzLnR5cGU7XHJcblxyXG5cdFx0aWYgKHRoaXMubmFtZSAhPT0gJycpIHsgZGF0YS5uYW1lID0gdGhpcy5uYW1lOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuY29sb3IgJiYgdGhpcy5jb2xvci5pc0NvbG9yKSB7IGRhdGEuY29sb3IgPSB0aGlzLmNvbG9yLmdldEhleCgpOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMucm91Z2huZXNzICE9PSB1bmRlZmluZWQpIHsgZGF0YS5yb3VnaG5lc3MgPSB0aGlzLnJvdWdobmVzczsgfVxyXG5cdFx0aWYgKHRoaXMubWV0YWxuZXNzICE9PSB1bmRlZmluZWQpIHsgZGF0YS5tZXRhbG5lc3MgPSB0aGlzLm1ldGFsbmVzczsgfVxyXG5cclxuXHRcdGlmICh0aGlzLnNoZWVuICYmIHRoaXMuc2hlZW4uaXNDb2xvcikgeyBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbi5nZXRIZXgoKTsgfVxyXG5cdFx0aWYgKHRoaXMuZW1pc3NpdmUgJiYgdGhpcy5lbWlzc2l2ZS5pc0NvbG9yKSB7IGRhdGEuZW1pc3NpdmUgPSB0aGlzLmVtaXNzaXZlLmdldEhleCgpOyB9XHJcblx0XHRpZiAodGhpcy5lbWlzc2l2ZUludGVuc2l0eSAmJiB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxKSB7IGRhdGEuZW1pc3NpdmVJbnRlbnNpdHkgPSB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5OyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuc3BlY3VsYXIgJiYgdGhpcy5zcGVjdWxhci5pc0NvbG9yKSB7IGRhdGEuc3BlY3VsYXIgPSB0aGlzLnNwZWN1bGFyLmdldEhleCgpOyB9XHJcblx0XHRpZiAodGhpcy5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCkgeyBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzOyB9XHJcblx0XHRpZiAodGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCkgeyBkYXRhLmNsZWFyY29hdCA9IHRoaXMuY2xlYXJjb2F0OyB9XHJcblx0XHRpZiAodGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkgeyBkYXRhLmNsZWFyY29hdFJvdWdobmVzcyA9IHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwICYmIHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwLmlzVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0ZGF0YS5jbGVhcmNvYXROb3JtYWxNYXAgPSB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcC50b0pTT04obWV0YSkudXVpZDtcclxuXHRcdFx0ZGF0YS5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IHRoaXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudG9BcnJheSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5tYXAgJiYgdGhpcy5tYXAuaXNUZXh0dXJlKSB7IGRhdGEubWFwID0gdGhpcy5tYXAudG9KU09OKG1ldGEpLnV1aWQ7IH1cclxuXHRcdGlmICh0aGlzLm1hdGNhcCAmJiB0aGlzLm1hdGNhcC5pc1RleHR1cmUpIHsgZGF0YS5tYXRjYXAgPSB0aGlzLm1hdGNhcC50b0pTT04obWV0YSkudXVpZDsgfVxyXG5cdFx0aWYgKHRoaXMuYWxwaGFNYXAgJiYgdGhpcy5hbHBoYU1hcC5pc1RleHR1cmUpIHsgZGF0YS5hbHBoYU1hcCA9IHRoaXMuYWxwaGFNYXAudG9KU09OKG1ldGEpLnV1aWQ7IH1cclxuXHRcdGlmICh0aGlzLmxpZ2h0TWFwICYmIHRoaXMubGlnaHRNYXAuaXNUZXh0dXJlKSB7IGRhdGEubGlnaHRNYXAgPSB0aGlzLmxpZ2h0TWFwLnRvSlNPTihtZXRhKS51dWlkOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuYW9NYXAgJiYgdGhpcy5hb01hcC5pc1RleHR1cmUpIHtcclxuXHJcblx0XHRcdGRhdGEuYW9NYXAgPSB0aGlzLmFvTWFwLnRvSlNPTihtZXRhKS51dWlkO1xyXG5cdFx0XHRkYXRhLmFvTWFwSW50ZW5zaXR5ID0gdGhpcy5hb01hcEludGVuc2l0eTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuYnVtcE1hcCAmJiB0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlKSB7XHJcblxyXG5cdFx0XHRkYXRhLmJ1bXBNYXAgPSB0aGlzLmJ1bXBNYXAudG9KU09OKG1ldGEpLnV1aWQ7XHJcblx0XHRcdGRhdGEuYnVtcFNjYWxlID0gdGhpcy5idW1wU2NhbGU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLm5vcm1hbE1hcCAmJiB0aGlzLm5vcm1hbE1hcC5pc1RleHR1cmUpIHtcclxuXHJcblx0XHRcdGRhdGEubm9ybWFsTWFwID0gdGhpcy5ub3JtYWxNYXAudG9KU09OKG1ldGEpLnV1aWQ7XHJcblx0XHRcdGRhdGEubm9ybWFsTWFwVHlwZSA9IHRoaXMubm9ybWFsTWFwVHlwZTtcclxuXHRcdFx0ZGF0YS5ub3JtYWxTY2FsZSA9IHRoaXMubm9ybWFsU2NhbGUudG9BcnJheSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5kaXNwbGFjZW1lbnRNYXAgJiYgdGhpcy5kaXNwbGFjZW1lbnRNYXAuaXNUZXh0dXJlKSB7XHJcblxyXG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudE1hcCA9IHRoaXMuZGlzcGxhY2VtZW50TWFwLnRvSlNPTihtZXRhKS51dWlkO1xyXG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudFNjYWxlID0gdGhpcy5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdFx0ZGF0YS5kaXNwbGFjZW1lbnRCaWFzID0gdGhpcy5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5yb3VnaG5lc3NNYXAgJiYgdGhpcy5yb3VnaG5lc3NNYXAuaXNUZXh0dXJlKSB7IGRhdGEucm91Z2huZXNzTWFwID0gdGhpcy5yb3VnaG5lc3NNYXAudG9KU09OKG1ldGEpLnV1aWQ7IH1cclxuXHRcdGlmICh0aGlzLm1ldGFsbmVzc01hcCAmJiB0aGlzLm1ldGFsbmVzc01hcC5pc1RleHR1cmUpIHsgZGF0YS5tZXRhbG5lc3NNYXAgPSB0aGlzLm1ldGFsbmVzc01hcC50b0pTT04obWV0YSkudXVpZDsgfVxyXG5cclxuXHRcdGlmICh0aGlzLmVtaXNzaXZlTWFwICYmIHRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlKSB7IGRhdGEuZW1pc3NpdmVNYXAgPSB0aGlzLmVtaXNzaXZlTWFwLnRvSlNPTihtZXRhKS51dWlkOyB9XHJcblx0XHRpZiAodGhpcy5zcGVjdWxhck1hcCAmJiB0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSkgeyBkYXRhLnNwZWN1bGFyTWFwID0gdGhpcy5zcGVjdWxhck1hcC50b0pTT04obWV0YSkudXVpZDsgfVxyXG5cclxuXHRcdGlmICh0aGlzLmVudk1hcCAmJiB0aGlzLmVudk1hcC5pc1RleHR1cmUpIHtcclxuXHJcblx0XHRcdGRhdGEuZW52TWFwID0gdGhpcy5lbnZNYXAudG9KU09OKG1ldGEpLnV1aWQ7XHJcblx0XHRcdGRhdGEucmVmbGVjdGl2aXR5ID0gdGhpcy5yZWZsZWN0aXZpdHk7IC8vIFNjYWxlIGJlaGluZCBlbnZNYXBcclxuXHRcdFx0ZGF0YS5yZWZyYWN0aW9uUmF0aW8gPSB0aGlzLnJlZnJhY3Rpb25SYXRpbztcclxuXHJcblx0XHRcdGlmICh0aGlzLmNvbWJpbmUgIT09IHVuZGVmaW5lZCkgeyBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7IH1cclxuXHRcdFx0aWYgKHRoaXMuZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHsgZGF0YS5lbnZNYXBJbnRlbnNpdHkgPSB0aGlzLmVudk1hcEludGVuc2l0eTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5ncmFkaWVudE1hcCAmJiB0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0ZGF0YS5ncmFkaWVudE1hcCA9IHRoaXMuZ3JhZGllbnRNYXAudG9KU09OKG1ldGEpLnV1aWQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZCkgeyBkYXRhLnNpemUgPSB0aGlzLnNpemU7IH1cclxuXHRcdGlmICh0aGlzLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkKSB7IGRhdGEuc2l6ZUF0dGVudWF0aW9uID0gdGhpcy5zaXplQXR0ZW51YXRpb247IH1cclxuXHJcblx0XHRpZiAodGhpcy5ibGVuZGluZyAhPT0gTm9ybWFsQmxlbmRpbmcpIHsgZGF0YS5ibGVuZGluZyA9IHRoaXMuYmxlbmRpbmc7IH1cclxuXHRcdGlmICh0aGlzLmZsYXRTaGFkaW5nID09PSB0cnVlKSB7IGRhdGEuZmxhdFNoYWRpbmcgPSB0aGlzLmZsYXRTaGFkaW5nOyB9XHJcblx0XHRpZiAodGhpcy5zaWRlICE9PSBGcm9udFNpZGUpIHsgZGF0YS5zaWRlID0gdGhpcy5zaWRlOyB9XHJcblx0XHRpZiAodGhpcy52ZXJ0ZXhDb2xvcnMgIT09IE5vQ29sb3JzKSB7IGRhdGEudmVydGV4Q29sb3JzID0gdGhpcy52ZXJ0ZXhDb2xvcnM7IH1cclxuXHJcblx0XHRpZiAodGhpcy5vcGFjaXR5IDwgMSkgeyBkYXRhLm9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7IH1cclxuXHRcdGlmICh0aGlzLnRyYW5zcGFyZW50ID09PSB0cnVlKSB7IGRhdGEudHJhbnNwYXJlbnQgPSB0aGlzLnRyYW5zcGFyZW50OyB9XHJcblxyXG5cdFx0ZGF0YS5kZXB0aEZ1bmMgPSB0aGlzLmRlcHRoRnVuYztcclxuXHRcdGRhdGEuZGVwdGhUZXN0ID0gdGhpcy5kZXB0aFRlc3Q7XHJcblx0XHRkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7XHJcblxyXG5cdFx0ZGF0YS5zdGVuY2lsV3JpdGUgPSB0aGlzLnN0ZW5jaWxXcml0ZTtcclxuXHRcdGRhdGEuc3RlbmNpbFdyaXRlTWFzayA9IHRoaXMuc3RlbmNpbFdyaXRlTWFzaztcclxuXHRcdGRhdGEuc3RlbmNpbEZ1bmMgPSB0aGlzLnN0ZW5jaWxGdW5jO1xyXG5cdFx0ZGF0YS5zdGVuY2lsUmVmID0gdGhpcy5zdGVuY2lsUmVmO1xyXG5cdFx0ZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcclxuXHRcdGRhdGEuc3RlbmNpbEZhaWwgPSB0aGlzLnN0ZW5jaWxGYWlsO1xyXG5cdFx0ZGF0YS5zdGVuY2lsWkZhaWwgPSB0aGlzLnN0ZW5jaWxaRmFpbDtcclxuXHRcdGRhdGEuc3RlbmNpbFpQYXNzID0gdGhpcy5zdGVuY2lsWlBhc3M7XHJcblxyXG5cdFx0Ly8gcm90YXRpb24gKFNwcml0ZU1hdGVyaWFsKVxyXG5cdFx0aWYgKHRoaXMucm90YXRpb24gJiYgdGhpcy5yb3RhdGlvbiAhPT0gMCkgeyBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjsgfVxyXG5cclxuXHRcdGlmICh0aGlzLnBvbHlnb25PZmZzZXQgPT09IHRydWUpIHsgZGF0YS5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTsgfVxyXG5cdFx0aWYgKHRoaXMucG9seWdvbk9mZnNldEZhY3RvciAhPT0gMCkgeyBkYXRhLnBvbHlnb25PZmZzZXRGYWN0b3IgPSB0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3I7IH1cclxuXHRcdGlmICh0aGlzLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gMCkgeyBkYXRhLnBvbHlnb25PZmZzZXRVbml0cyA9IHRoaXMucG9seWdvbk9mZnNldFVuaXRzOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMubGluZXdpZHRoICYmIHRoaXMubGluZXdpZHRoICE9PSAxKSB7IGRhdGEubGluZXdpZHRoID0gdGhpcy5saW5ld2lkdGg7IH1cclxuXHRcdGlmICh0aGlzLmRhc2hTaXplICE9PSB1bmRlZmluZWQpIHsgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7IH1cclxuXHRcdGlmICh0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCkgeyBkYXRhLmdhcFNpemUgPSB0aGlzLmdhcFNpemU7IH1cclxuXHRcdGlmICh0aGlzLnNjYWxlICE9PSB1bmRlZmluZWQpIHsgZGF0YS5zY2FsZSA9IHRoaXMuc2NhbGU7IH1cclxuXHJcblx0XHRpZiAodGhpcy5kaXRoZXJpbmcgPT09IHRydWUpIHsgZGF0YS5kaXRoZXJpbmcgPSB0cnVlOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuYWxwaGFUZXN0ID4gMCkgeyBkYXRhLmFscGhhVGVzdCA9IHRoaXMuYWxwaGFUZXN0OyB9XHJcblx0XHRpZiAodGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPT09IHRydWUpIHsgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTsgfVxyXG5cclxuXHRcdGlmICh0aGlzLndpcmVmcmFtZSA9PT0gdHJ1ZSkgeyBkYXRhLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lOyB9XHJcblx0XHRpZiAodGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPiAxKSB7IGRhdGEud2lyZWZyYW1lTGluZXdpZHRoID0gdGhpcy53aXJlZnJhbWVMaW5ld2lkdGg7IH1cclxuXHRcdGlmICh0aGlzLndpcmVmcmFtZUxpbmVjYXAgIT09ICdyb3VuZCcpIHsgZGF0YS53aXJlZnJhbWVMaW5lY2FwID0gdGhpcy53aXJlZnJhbWVMaW5lY2FwOyB9XHJcblx0XHRpZiAodGhpcy53aXJlZnJhbWVMaW5lam9pbiAhPT0gJ3JvdW5kJykgeyBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjsgfVxyXG5cclxuXHRcdGlmICh0aGlzLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSkgeyBkYXRhLm1vcnBoVGFyZ2V0cyA9IHRydWU7IH1cclxuXHRcdGlmICh0aGlzLm1vcnBoTm9ybWFscyA9PT0gdHJ1ZSkgeyBkYXRhLm1vcnBoTm9ybWFscyA9IHRydWU7IH1cclxuXHRcdGlmICh0aGlzLnNraW5uaW5nID09PSB0cnVlKSB7IGRhdGEuc2tpbm5pbmcgPSB0cnVlOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMudmlzaWJsZSA9PT0gZmFsc2UpIHsgZGF0YS52aXNpYmxlID0gZmFsc2U7IH1cclxuXHJcblx0XHRpZiAodGhpcy50b25lTWFwcGVkID09PSBmYWxzZSkgeyBkYXRhLnRvbmVNYXBwZWQgPSBmYWxzZTsgfVxyXG5cclxuXHRcdGlmIChKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJEYXRhKSAhPT0gJ3t9JykgeyBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTsgfVxyXG5cclxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxyXG5cclxuXHRcdGZ1bmN0aW9uIGV4dHJhY3RGcm9tQ2FjaGUoY2FjaGUpIHtcclxuXHJcblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBjYWNoZSkge1xyXG5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlW2tleV07XHJcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XHJcblx0XHRcdFx0dmFsdWVzLnB1c2goZGF0YSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaXNSb290KSB7XHJcblxyXG5cdFx0XHR2YXIgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKG1ldGEudGV4dHVyZXMpO1xyXG5cdFx0XHR2YXIgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZShtZXRhLmltYWdlcyk7XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZXMubGVuZ3RoID4gMCkgeyBkYXRhLnRleHR1cmVzID0gdGV4dHVyZXM7IH1cclxuXHRcdFx0aWYgKGltYWdlcy5sZW5ndGggPiAwKSB7IGRhdGEuaW1hZ2VzID0gaW1hZ2VzOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHJcblx0XHR0aGlzLmZvZyA9IHNvdXJjZS5mb2c7XHJcblxyXG5cdFx0dGhpcy5ibGVuZGluZyA9IHNvdXJjZS5ibGVuZGluZztcclxuXHRcdHRoaXMuc2lkZSA9IHNvdXJjZS5zaWRlO1xyXG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcclxuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gc291cmNlLnZlcnRleENvbG9ycztcclxuXHJcblx0XHR0aGlzLm9wYWNpdHkgPSBzb3VyY2Uub3BhY2l0eTtcclxuXHRcdHRoaXMudHJhbnNwYXJlbnQgPSBzb3VyY2UudHJhbnNwYXJlbnQ7XHJcblxyXG5cdFx0dGhpcy5ibGVuZFNyYyA9IHNvdXJjZS5ibGVuZFNyYztcclxuXHRcdHRoaXMuYmxlbmREc3QgPSBzb3VyY2UuYmxlbmREc3Q7XHJcblx0XHR0aGlzLmJsZW5kRXF1YXRpb24gPSBzb3VyY2UuYmxlbmRFcXVhdGlvbjtcclxuXHRcdHRoaXMuYmxlbmRTcmNBbHBoYSA9IHNvdXJjZS5ibGVuZFNyY0FscGhhO1xyXG5cdFx0dGhpcy5ibGVuZERzdEFscGhhID0gc291cmNlLmJsZW5kRHN0QWxwaGE7XHJcblx0XHR0aGlzLmJsZW5kRXF1YXRpb25BbHBoYSA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uQWxwaGE7XHJcblxyXG5cdFx0dGhpcy5kZXB0aEZ1bmMgPSBzb3VyY2UuZGVwdGhGdW5jO1xyXG5cdFx0dGhpcy5kZXB0aFRlc3QgPSBzb3VyY2UuZGVwdGhUZXN0O1xyXG5cdFx0dGhpcy5kZXB0aFdyaXRlID0gc291cmNlLmRlcHRoV3JpdGU7XHJcblxyXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGUgPSBzb3VyY2Uuc3RlbmNpbFdyaXRlO1xyXG5cdFx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gc291cmNlLnN0ZW5jaWxXcml0ZU1hc2s7XHJcblx0XHR0aGlzLnN0ZW5jaWxGdW5jID0gc291cmNlLnN0ZW5jaWxGdW5jO1xyXG5cdFx0dGhpcy5zdGVuY2lsUmVmID0gc291cmNlLnN0ZW5jaWxSZWY7XHJcblx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHNvdXJjZS5zdGVuY2lsRnVuY01hc2s7XHJcblx0XHR0aGlzLnN0ZW5jaWxGYWlsID0gc291cmNlLnN0ZW5jaWxGYWlsO1xyXG5cdFx0dGhpcy5zdGVuY2lsWkZhaWwgPSBzb3VyY2Uuc3RlbmNpbFpGYWlsO1xyXG5cdFx0dGhpcy5zdGVuY2lsWlBhc3MgPSBzb3VyY2Uuc3RlbmNpbFpQYXNzO1xyXG5cclxuXHRcdHRoaXMuY29sb3JXcml0ZSA9IHNvdXJjZS5jb2xvcldyaXRlO1xyXG5cclxuXHRcdHRoaXMucHJlY2lzaW9uID0gc291cmNlLnByZWNpc2lvbjtcclxuXHJcblx0XHR0aGlzLnBvbHlnb25PZmZzZXQgPSBzb3VyY2UucG9seWdvbk9mZnNldDtcclxuXHRcdHRoaXMucG9seWdvbk9mZnNldEZhY3RvciA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0RmFjdG9yO1xyXG5cdFx0dGhpcy5wb2x5Z29uT2Zmc2V0VW5pdHMgPSBzb3VyY2UucG9seWdvbk9mZnNldFVuaXRzO1xyXG5cclxuXHRcdHRoaXMuZGl0aGVyaW5nID0gc291cmNlLmRpdGhlcmluZztcclxuXHJcblx0XHR0aGlzLmFscGhhVGVzdCA9IHNvdXJjZS5hbHBoYVRlc3Q7XHJcblx0XHR0aGlzLnByZW11bHRpcGxpZWRBbHBoYSA9IHNvdXJjZS5wcmVtdWx0aXBsaWVkQWxwaGE7XHJcblxyXG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XHJcblxyXG5cdFx0dGhpcy50b25lTWFwcGVkID0gc291cmNlLnRvbmVNYXBwZWQ7XHJcblxyXG5cdFx0dGhpcy51c2VyRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc291cmNlLnVzZXJEYXRhKSk7XHJcblxyXG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IHNvdXJjZS5jbGlwU2hhZG93cztcclxuXHRcdHRoaXMuY2xpcEludGVyc2VjdGlvbiA9IHNvdXJjZS5jbGlwSW50ZXJzZWN0aW9uO1xyXG5cclxuXHRcdHZhciBzcmNQbGFuZXMgPSBzb3VyY2UuY2xpcHBpbmdQbGFuZXMsXHJcblx0XHRcdGRzdFBsYW5lcyA9IG51bGw7XHJcblxyXG5cdFx0aWYgKHNyY1BsYW5lcyAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dmFyIG4gPSBzcmNQbGFuZXMubGVuZ3RoO1xyXG5cdFx0XHRkc3RQbGFuZXMgPSBuZXcgQXJyYXkobik7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSAhPT0gbjsgKytpKSB7IGRzdFBsYW5lc1tpXSA9IHNyY1BsYW5lc1tpXS5jbG9uZSgpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBkc3RQbGFuZXM7XHJcblxyXG5cdFx0dGhpcy5zaGFkb3dTaWRlID0gc291cmNlLnNoYWRvd1NpZGU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnZGlzcG9zZScgfSk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBjb2xvcjogPGhleD4sXHJcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxyXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxyXG4gKlxyXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxyXG4gKlxyXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcclxuICogIGNvbWJpbmU6IFRIUkVFLk11bHRpcGx5LFxyXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxyXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgZGVwdGhUZXN0OiA8Ym9vbD4sXHJcbiAqICBkZXB0aFdyaXRlOiA8Ym9vbD4sXHJcbiAqXHJcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcclxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcclxuICpcclxuICogIHNraW5uaW5nOiA8Ym9vbD4sXHJcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTWVzaEJhc2ljTWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaEJhc2ljTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKDB4ZmZmZmZmKTsgLy8gZW1pc3NpdmVcclxuXHJcblx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcclxuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHR0aGlzLmFvTWFwID0gbnVsbDtcclxuXHR0aGlzLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMuZW52TWFwID0gbnVsbDtcclxuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcclxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XHJcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSAwLjk4O1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcclxuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5NZXNoQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hdGVyaWFsLnByb3RvdHlwZSk7XHJcbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hCYXNpY01hdGVyaWFsO1xyXG5cclxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblxyXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcclxuXHJcblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcclxuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xyXG5cclxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xyXG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XHJcblxyXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XHJcblxyXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XHJcblxyXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcclxuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcclxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XHJcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XHJcblxyXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkKSB7XHJcblxyXG5cdGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xyXG5cclxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyk7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5uYW1lID0gJyc7XHJcblxyXG5cdHRoaXMuYXJyYXkgPSBhcnJheTtcclxuXHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XHJcblx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBpdGVtU2l6ZSA6IDA7XHJcblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcclxuXHJcblx0dGhpcy5keW5hbWljID0gZmFsc2U7XHJcblx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XHJcblxyXG5cdHRoaXMudmVyc2lvbiA9IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwgJ25lZWRzVXBkYXRlJywge1xyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdGlmICh2YWx1ZSA9PT0gdHJ1ZSkgeyB0aGlzLnZlcnNpb24rKzsgfVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc0J1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcclxuXHJcblx0b25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkgeyB9LFxyXG5cclxuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHR0aGlzLmR5bmFtaWMgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xyXG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3Ioc291cmNlLmFycmF5KTtcclxuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XHJcblx0XHR0aGlzLmNvdW50ID0gc291cmNlLmNvdW50O1xyXG5cdFx0dGhpcy5ub3JtYWxpemVkID0gc291cmNlLm5vcm1hbGl6ZWQ7XHJcblxyXG5cdFx0dGhpcy5keW5hbWljID0gc291cmNlLmR5bmFtaWM7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHlBdDogZnVuY3Rpb24gKGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIpIHtcclxuXHJcblx0XHRpbmRleDEgKj0gdGhpcy5pdGVtU2l6ZTtcclxuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuaXRlbVNpemU7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLml0ZW1TaXplOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmFycmF5W2luZGV4MSArIGldID0gYXR0cmlidXRlLmFycmF5W2luZGV4MiArIGldO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weUFycmF5OiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuXHJcblx0XHR0aGlzLmFycmF5LnNldChhcnJheSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHlDb2xvcnNBcnJheTogZnVuY3Rpb24gKGNvbG9ycykge1xyXG5cclxuXHRcdHZhciBhcnJheSA9IHRoaXMuYXJyYXksIG9mZnNldCA9IDA7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjb2xvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgY29sb3IgPSBjb2xvcnNbaV07XHJcblxyXG5cdFx0XHRpZiAoY29sb3IgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoKTogY29sb3IgaXMgdW5kZWZpbmVkJywgaSk7XHJcblx0XHRcdFx0Y29sb3IgPSBuZXcgQ29sb3IoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IGNvbG9yLnI7XHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IGNvbG9yLmc7XHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IGNvbG9yLmI7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5VmVjdG9yMnNBcnJheTogZnVuY3Rpb24gKHZlY3RvcnMpIHtcclxuXHJcblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzW2ldO1xyXG5cclxuXHRcdFx0aWYgKHZlY3RvciA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Iyc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpKTtcclxuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YXJyYXlbb2Zmc2V0KytdID0gdmVjdG9yLng7XHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IHZlY3Rvci55O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weVZlY3RvcjNzQXJyYXk6IGZ1bmN0aW9uICh2ZWN0b3JzKSB7XHJcblxyXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgdmVjdG9yID0gdmVjdG9yc1tpXTtcclxuXHJcblx0XHRcdGlmICh2ZWN0b3IgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSk7XHJcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IHZlY3Rvci54O1xyXG5cdFx0XHRhcnJheVtvZmZzZXQrK10gPSB2ZWN0b3IueTtcclxuXHRcdFx0YXJyYXlbb2Zmc2V0KytdID0gdmVjdG9yLno7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5VmVjdG9yNHNBcnJheTogZnVuY3Rpb24gKHZlY3RvcnMpIHtcclxuXHJcblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciB2ZWN0b3IgPSB2ZWN0b3JzW2ldO1xyXG5cclxuXHRcdFx0aWYgKHZlY3RvciA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3I0c0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWQnLCBpKTtcclxuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YXJyYXlbb2Zmc2V0KytdID0gdmVjdG9yLng7XHJcblx0XHRcdGFycmF5W29mZnNldCsrXSA9IHZlY3Rvci55O1xyXG5cdFx0XHRhcnJheVtvZmZzZXQrK10gPSB2ZWN0b3IuejtcclxuXHRcdFx0YXJyYXlbb2Zmc2V0KytdID0gdmVjdG9yLnc7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHR0aGlzLmFycmF5LnNldCh2YWx1ZSwgb2Zmc2V0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0WDogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbaW5kZXggKiB0aGlzLml0ZW1TaXplXTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WDogZnVuY3Rpb24gKGluZGV4LCB4KSB7XHJcblxyXG5cdFx0dGhpcy5hcnJheVtpbmRleCAqIHRoaXMuaXRlbVNpemVdID0geDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0WTogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMV07XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFk6IGZ1bmN0aW9uIChpbmRleCwgeSkge1xyXG5cclxuXHRcdHRoaXMuYXJyYXlbaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMV0gPSB5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRaOiBmdW5jdGlvbiAoaW5kZXgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5hcnJheVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyXTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WjogZnVuY3Rpb24gKGluZGV4LCB6KSB7XHJcblxyXG5cdFx0dGhpcy5hcnJheVtpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyXSA9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFc6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmFycmF5W2luZGV4ICogdGhpcy5pdGVtU2l6ZSArIDNdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRXOiBmdW5jdGlvbiAoaW5kZXgsIHcpIHtcclxuXHJcblx0XHR0aGlzLmFycmF5W2luZGV4ICogdGhpcy5pdGVtU2l6ZSArIDNdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WFk6IGZ1bmN0aW9uIChpbmRleCwgeCwgeSkge1xyXG5cclxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcblxyXG5cdFx0dGhpcy5hcnJheVtpbmRleCArIDBdID0geDtcclxuXHRcdHRoaXMuYXJyYXlbaW5kZXggKyAxXSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFhZWjogZnVuY3Rpb24gKGluZGV4LCB4LCB5LCB6KSB7XHJcblxyXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcclxuXHJcblx0XHR0aGlzLmFycmF5W2luZGV4ICsgMF0gPSB4O1xyXG5cdFx0dGhpcy5hcnJheVtpbmRleCArIDFdID0geTtcclxuXHRcdHRoaXMuYXJyYXlbaW5kZXggKyAyXSA9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFhZWlc6IGZ1bmN0aW9uIChpbmRleCwgeCwgeSwgeiwgdykge1xyXG5cclxuXHRcdGluZGV4ICo9IHRoaXMuaXRlbVNpemU7XHJcblxyXG5cdFx0dGhpcy5hcnJheVtpbmRleCArIDBdID0geDtcclxuXHRcdHRoaXMuYXJyYXlbaW5kZXggKyAxXSA9IHk7XHJcblx0XHR0aGlzLmFycmF5W2luZGV4ICsgMl0gPSB6O1xyXG5cdFx0dGhpcy5hcnJheVtpbmRleCArIDNdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0b25VcGxvYWQ6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG5cclxuXHRcdHRoaXMub25VcGxvYWRDYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmFycmF5LCB0aGlzLml0ZW1TaXplKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRpdGVtU2l6ZTogdGhpcy5pdGVtU2l6ZSxcclxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxyXG5cdFx0XHRhcnJheTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5hcnJheSksXHJcblx0XHRcdG5vcm1hbGl6ZWQ6IHRoaXMubm9ybWFsaXplZFxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gSW50OEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpIHtcclxuXHJcblx0QnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcywgbmV3IEludDhBcnJheShhcnJheSksIGl0ZW1TaXplLCBub3JtYWxpemVkKTtcclxuXHJcbn1cclxuXHJcbkludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlKTtcclxuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQ4QnVmZmVyQXR0cmlidXRlO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFVpbnQ4QnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCkge1xyXG5cclxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuZXcgVWludDhBcnJheShhcnJheSksIGl0ZW1TaXplLCBub3JtYWxpemVkKTtcclxuXHJcbn1cclxuXHJcblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSk7XHJcblVpbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4QnVmZmVyQXR0cmlidXRlO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpIHtcclxuXHJcblx0QnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcywgbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGFycmF5KSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xyXG5cclxufVxyXG5cclxuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSk7XHJcblVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGU7XHJcblxyXG5cclxuZnVuY3Rpb24gSW50MTZCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkKSB7XHJcblxyXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5ldyBJbnQxNkFycmF5KGFycmF5KSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xyXG5cclxufVxyXG5cclxuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlKTtcclxuSW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW50MTZCdWZmZXJBdHRyaWJ1dGU7XHJcblxyXG5cclxuZnVuY3Rpb24gVWludDE2QnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCkge1xyXG5cclxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuZXcgVWludDE2QXJyYXkoYXJyYXkpLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCk7XHJcblxyXG59XHJcblxyXG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlKTtcclxuVWludDE2QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcclxuXHJcblxyXG5mdW5jdGlvbiBJbnQzMkJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpIHtcclxuXHJcblx0QnVmZmVyQXR0cmlidXRlLmNhbGwodGhpcywgbmV3IEludDMyQXJyYXkoYXJyYXkpLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCk7XHJcblxyXG59XHJcblxyXG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUpO1xyXG5JbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQzMkJ1ZmZlckF0dHJpYnV0ZTtcclxuXHJcblxyXG5mdW5jdGlvbiBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkKSB7XHJcblxyXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5ldyBVaW50MzJBcnJheShhcnJheSksIGl0ZW1TaXplLCBub3JtYWxpemVkKTtcclxuXHJcbn1cclxuXHJcblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUpO1xyXG5VaW50MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDMyQnVmZmVyQXR0cmlidXRlO1xyXG5cclxuXHJcbmZ1bmN0aW9uIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkKSB7XHJcblxyXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKHRoaXMsIG5ldyBGbG9hdDMyQXJyYXkoYXJyYXkpLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCk7XHJcblxyXG59XHJcblxyXG5GbG9hdDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSk7XHJcbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZTtcclxuXHJcblxyXG5mdW5jdGlvbiBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCkge1xyXG5cclxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCh0aGlzLCBuZXcgRmxvYXQ2NEFycmF5KGFycmF5KSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQpO1xyXG5cclxufVxyXG5cclxuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUpO1xyXG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGU7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBEaXJlY3RHZW9tZXRyeSgpIHtcclxuXHJcblx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG5cdHRoaXMubm9ybWFscyA9IFtdO1xyXG5cdHRoaXMuY29sb3JzID0gW107XHJcblx0dGhpcy51dnMgPSBbXTtcclxuXHR0aGlzLnV2czIgPSBbXTtcclxuXHJcblx0dGhpcy5ncm91cHMgPSBbXTtcclxuXHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSB7fTtcclxuXHJcblx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xyXG5cdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcclxuXHJcblx0Ly8gdGhpcy5saW5lRGlzdGFuY2VzID0gW107XHJcblxyXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHQvLyB1cGRhdGUgZmxhZ3NcclxuXHJcblx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy51dnNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKERpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSwge1xyXG5cclxuXHRjb21wdXRlR3JvdXBzOiBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuXHJcblx0XHR2YXIgZ3JvdXA7XHJcblx0XHR2YXIgZ3JvdXBzID0gW107XHJcblx0XHR2YXIgbWF0ZXJpYWxJbmRleCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHR2YXIgZmFjZXMgPSBnZW9tZXRyeS5mYWNlcztcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZhY2VzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdFx0Ly8gbWF0ZXJpYWxzXHJcblxyXG5cdFx0XHRpZiAoZmFjZS5tYXRlcmlhbEluZGV4ICE9PSBtYXRlcmlhbEluZGV4KSB7XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXg7XHJcblxyXG5cdFx0XHRcdGlmIChncm91cCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0Z3JvdXAuY291bnQgPSAoaSAqIDMpIC0gZ3JvdXAuc3RhcnQ7XHJcblx0XHRcdFx0XHRncm91cHMucHVzaChncm91cCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Z3JvdXAgPSB7XHJcblx0XHRcdFx0XHRzdGFydDogaSAqIDMsXHJcblx0XHRcdFx0XHRtYXRlcmlhbEluZGV4OiBtYXRlcmlhbEluZGV4XHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdyb3VwICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGdyb3VwLmNvdW50ID0gKGkgKiAzKSAtIGdyb3VwLnN0YXJ0O1xyXG5cdFx0XHRncm91cHMucHVzaChncm91cCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZ3JvdXBzID0gZ3JvdXBzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG5cclxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xyXG5cdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XHJcblx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnM7XHJcblxyXG5cdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdiA9IGZhY2VWZXJ0ZXhVdnNbMF0gJiYgZmFjZVZlcnRleFV2c1swXS5sZW5ndGggPiAwO1xyXG5cdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdjIgPSBmYWNlVmVydGV4VXZzWzFdICYmIGZhY2VWZXJ0ZXhVdnNbMV0ubGVuZ3RoID4gMDtcclxuXHJcblx0XHQvLyBtb3JwaHNcclxuXHJcblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xyXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c0xlbmd0aCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7XHJcblxyXG5cdFx0dmFyIG1vcnBoVGFyZ2V0c1Bvc2l0aW9uO1xyXG5cclxuXHRcdGlmIChtb3JwaFRhcmdldHNMZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvbiA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb3JwaFRhcmdldHNMZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvbltpXSA9IHtcclxuXHRcdFx0XHRcdG5hbWU6IG1vcnBoVGFyZ2V0c1tpXS5uYW1lLFxyXG5cdFx0XHRcdFx0ZGF0YTogW11cclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucG9zaXRpb24gPSBtb3JwaFRhcmdldHNQb3NpdGlvbjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IGdlb21ldHJ5Lm1vcnBoTm9ybWFscztcclxuXHRcdHZhciBtb3JwaE5vcm1hbHNMZW5ndGggPSBtb3JwaE5vcm1hbHMubGVuZ3RoO1xyXG5cclxuXHRcdHZhciBtb3JwaFRhcmdldHNOb3JtYWw7XHJcblxyXG5cdFx0aWYgKG1vcnBoTm9ybWFsc0xlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdG1vcnBoVGFyZ2V0c05vcm1hbCA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb3JwaE5vcm1hbHNMZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbaV0gPSB7XHJcblx0XHRcdFx0XHRuYW1lOiBtb3JwaE5vcm1hbHNbaV0ubmFtZSxcclxuXHRcdFx0XHRcdGRhdGE6IFtdXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubW9ycGhUYXJnZXRzLm5vcm1hbCA9IG1vcnBoVGFyZ2V0c05vcm1hbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2tpbnNcclxuXHJcblx0XHR2YXIgc2tpbkluZGljZXMgPSBnZW9tZXRyeS5za2luSW5kaWNlcztcclxuXHRcdHZhciBza2luV2VpZ2h0cyA9IGdlb21ldHJ5LnNraW5XZWlnaHRzO1xyXG5cclxuXHRcdHZhciBoYXNTa2luSW5kaWNlcyA9IHNraW5JbmRpY2VzLmxlbmd0aCA9PT0gdmVydGljZXMubGVuZ3RoO1xyXG5cdFx0dmFyIGhhc1NraW5XZWlnaHRzID0gc2tpbldlaWdodHMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRpZiAodmVydGljZXMubGVuZ3RoID4gMCAmJiBmYWNlcy5sZW5ndGggPT09IDApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkRpcmVjdEdlb21ldHJ5OiBGYWNlbGVzcyBnZW9tZXRyaWVzIGFyZSBub3Qgc3VwcG9ydGVkLicpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZhY2VzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzW2ZhY2UuYV0sIHZlcnRpY2VzW2ZhY2UuYl0sIHZlcnRpY2VzW2ZhY2UuY10pO1xyXG5cclxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XHJcblxyXG5cdFx0XHRpZiAodmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2godmVydGV4Tm9ybWFsc1swXSwgdmVydGV4Tm9ybWFsc1sxXSwgdmVydGV4Tm9ybWFsc1syXSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XHJcblxyXG5cdFx0XHRcdHRoaXMubm9ybWFscy5wdXNoKG5vcm1hbCwgbm9ybWFsLCBub3JtYWwpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xyXG5cclxuXHRcdFx0aWYgKHZlcnRleENvbG9ycy5sZW5ndGggPT09IDMpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5jb2xvcnMucHVzaCh2ZXJ0ZXhDb2xvcnNbMF0sIHZlcnRleENvbG9yc1sxXSwgdmVydGV4Q29sb3JzWzJdKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHZhciBjb2xvciA9IGZhY2UuY29sb3I7XHJcblxyXG5cdFx0XHRcdHRoaXMuY29sb3JzLnB1c2goY29sb3IsIGNvbG9yLCBjb2xvcik7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoaGFzRmFjZVZlcnRleFV2ID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdHZhciB2ZXJ0ZXhVdnMgPSBmYWNlVmVydGV4VXZzWzBdW2ldO1xyXG5cclxuXHRcdFx0XHRpZiAodmVydGV4VXZzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnV2cy5wdXNoKHZlcnRleFV2c1swXSwgdmVydGV4VXZzWzFdLCB2ZXJ0ZXhVdnNbMl0pO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuRGlyZWN0R2VvbWV0cnkuZnJvbUdlb21ldHJ5KCk6IFVuZGVmaW5lZCB2ZXJ0ZXhVdiAnLCBpKTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnV2cy5wdXNoKG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCksIG5ldyBWZWN0b3IyKCkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoaGFzRmFjZVZlcnRleFV2MiA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0XHR2YXIgdmVydGV4VXZzID0gZmFjZVZlcnRleFV2c1sxXVtpXTtcclxuXHJcblx0XHRcdFx0aWYgKHZlcnRleFV2cyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy51dnMyLnB1c2godmVydGV4VXZzWzBdLCB2ZXJ0ZXhVdnNbMV0sIHZlcnRleFV2c1syXSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2MiAnLCBpKTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaChuZXcgVmVjdG9yMigpLCBuZXcgVmVjdG9yMigpLCBuZXcgVmVjdG9yMigpKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbW9ycGhzXHJcblxyXG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1tqXS52ZXJ0aWNlcztcclxuXHJcblx0XHRcdFx0bW9ycGhUYXJnZXRzUG9zaXRpb25bal0uZGF0YS5wdXNoKG1vcnBoVGFyZ2V0W2ZhY2UuYV0sIG1vcnBoVGFyZ2V0W2ZhY2UuYl0sIG1vcnBoVGFyZ2V0W2ZhY2UuY10pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb3JwaE5vcm1hbHNMZW5ndGg7IGorKykge1xyXG5cclxuXHRcdFx0XHR2YXIgbW9ycGhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbal0udmVydGV4Tm9ybWFsc1tpXTtcclxuXHJcblx0XHRcdFx0bW9ycGhUYXJnZXRzTm9ybWFsW2pdLmRhdGEucHVzaChtb3JwaE5vcm1hbC5hLCBtb3JwaE5vcm1hbC5iLCBtb3JwaE5vcm1hbC5jKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIHNraW5zXHJcblxyXG5cdFx0XHRpZiAoaGFzU2tpbkluZGljZXMpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5za2luSW5kaWNlcy5wdXNoKHNraW5JbmRpY2VzW2ZhY2UuYV0sIHNraW5JbmRpY2VzW2ZhY2UuYl0sIHNraW5JbmRpY2VzW2ZhY2UuY10pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGhhc1NraW5XZWlnaHRzKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuc2tpbldlaWdodHMucHVzaChza2luV2VpZ2h0c1tmYWNlLmFdLCBza2luV2VpZ2h0c1tmYWNlLmJdLCBza2luV2VpZ2h0c1tmYWNlLmNdKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jb21wdXRlR3JvdXBzKGdlb21ldHJ5KTtcclxuXHJcblx0XHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZTtcclxuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcclxuXHRcdHRoaXMuY29sb3JzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGU7XHJcblx0XHR0aGlzLnV2c05lZWRVcGRhdGUgPSBnZW9tZXRyeS51dnNOZWVkVXBkYXRlO1xyXG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBhcnJheU1heChhcnJheSkge1xyXG5cclxuXHRpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7IHJldHVybiAtIEluZmluaXR5OyB9XHJcblxyXG5cdHZhciBtYXggPSBhcnJheVswXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDEsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuXHJcblx0XHRpZiAoYXJyYXlbaV0gPiBtYXgpIHsgbWF4ID0gYXJyYXlbaV07IH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbWF4O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIF9idWZmZXJHZW9tZXRyeUlkID0gMTsgLy8gQnVmZmVyR2VvbWV0cnkgdXNlcyBvZGQgbnVtYmVycyBhcyBJZFxyXG5cclxudmFyIF9tMSQyID0gbmV3IE1hdHJpeDQoKTtcclxudmFyIF9vYmogPSBuZXcgT2JqZWN0M0QoKTtcclxudmFyIF9vZmZzZXQgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2JveCQxID0gbmV3IEJveDMoKTtcclxudmFyIF9ib3hNb3JwaFRhcmdldHMgPSBuZXcgQm94MygpO1xyXG52YXIgX3ZlY3RvciQ0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5KCkge1xyXG5cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2lkJywgeyB2YWx1ZTogX2J1ZmZlckdlb21ldHJ5SWQgKz0gMiB9KTtcclxuXHJcblx0dGhpcy51dWlkID0gX01hdGguZ2VuZXJhdGVVVUlEKCk7XHJcblxyXG5cdHRoaXMubmFtZSA9ICcnO1xyXG5cdHRoaXMudHlwZSA9ICdCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMuaW5kZXggPSBudWxsO1xyXG5cdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG5cclxuXHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xyXG5cclxuXHR0aGlzLmdyb3VwcyA9IFtdO1xyXG5cclxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcclxuXHJcblx0dGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTtcclxuXHJcblx0dGhpcy51c2VyRGF0YSA9IHt9O1xyXG5cclxufVxyXG5cclxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBCdWZmZXJHZW9tZXRyeSxcclxuXHJcblx0aXNCdWZmZXJHZW9tZXRyeTogdHJ1ZSxcclxuXHJcblx0Z2V0SW5kZXg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5pbmRleDtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuXHRcdGlmIChBcnJheS5pc0FycmF5KGluZGV4KSkge1xyXG5cclxuXHRcdFx0dGhpcy5pbmRleCA9IG5ldyAoYXJyYXlNYXgoaW5kZXgpID4gNjU1MzUgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUpKGluZGV4LCAxKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5pbmRleCA9IGluZGV4O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0YWRkQXR0cmlidXRlOiBmdW5jdGlvbiAobmFtZSwgYXR0cmlidXRlKSB7XHJcblxyXG5cdFx0aWYgKCEoYXR0cmlidXRlICYmIGF0dHJpYnV0ZS5pc0J1ZmZlckF0dHJpYnV0ZSkgJiYgIShhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS4nKTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZShuYW1lLCBuZXcgQnVmZmVyQXR0cmlidXRlKGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChuYW1lID09PSAnaW5kZXgnKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmFkZEF0dHJpYnV0ZTogVXNlIC5zZXRJbmRleCgpIGZvciBpbmRleCBhdHRyaWJ1dGUuJyk7XHJcblx0XHRcdHRoaXMuc2V0SW5kZXgoYXR0cmlidXRlKTtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cmlidXRlKTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0QXR0cmlidXRlOiBmdW5jdGlvbiAobmFtZSkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gKG5hbWUsIGF0dHJpYnV0ZSkge1xyXG5cclxuXHRcdHRoaXMuYXR0cmlidXRlc1tuYW1lXSA9IGF0dHJpYnV0ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0cmVtb3ZlQXR0cmlidXRlOiBmdW5jdGlvbiAobmFtZSkge1xyXG5cclxuXHRcdGRlbGV0ZSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZEdyb3VwOiBmdW5jdGlvbiAoc3RhcnQsIGNvdW50LCBtYXRlcmlhbEluZGV4KSB7XHJcblxyXG5cdFx0dGhpcy5ncm91cHMucHVzaCh7XHJcblxyXG5cdFx0XHRzdGFydDogc3RhcnQsXHJcblx0XHRcdGNvdW50OiBjb3VudCxcclxuXHRcdFx0bWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWxJbmRleCA6IDBcclxuXHJcblx0XHR9KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xlYXJHcm91cHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmdyb3VwcyA9IFtdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXREcmF3UmFuZ2U6IGZ1bmN0aW9uIChzdGFydCwgY291bnQpIHtcclxuXHJcblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHN0YXJ0O1xyXG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uKTtcclxuXHRcdFx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbm9ybWFsID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcclxuXHJcblx0XHRpZiAobm9ybWFsICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeChtYXRyaXgpO1xyXG5cclxuXHRcdFx0bm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUobm9ybWFsKTtcclxuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRhbmdlbnQgPSB0aGlzLmF0dHJpYnV0ZXMudGFuZ2VudDtcclxuXHJcblx0XHRpZiAodGFuZ2VudCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKS5nZXROb3JtYWxNYXRyaXgobWF0cml4KTtcclxuXHJcblx0XHRcdC8vIFRhbmdlbnQgaXMgdmVjNCwgYnV0IHRoZSAnLncnIGNvbXBvbmVudCBpcyBhIHNpZ24gdmFsdWUgKCsxLy0xKS5cclxuXHRcdFx0bm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUodGFuZ2VudCk7XHJcblx0XHRcdHRhbmdlbnQubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xyXG5cclxuXHRcdF9tMSQyLm1ha2VSb3RhdGlvblgoYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xyXG5cclxuXHRcdF9tMSQyLm1ha2VSb3RhdGlvblkoYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xyXG5cclxuXHRcdF9tMSQyLm1ha2VSb3RhdGlvblooYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcblxyXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XHJcblxyXG5cdFx0X20xJDIubWFrZVRyYW5zbGF0aW9uKHgsIHksIHopO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDIpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzY2FsZTogZnVuY3Rpb24gKHgsIHksIHopIHtcclxuXHJcblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxyXG5cclxuXHRcdF9tMSQyLm1ha2VTY2FsZSh4LCB5LCB6KTtcclxuXHJcblx0XHR0aGlzLmFwcGx5TWF0cml4KF9tMSQyKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bG9va0F0OiBmdW5jdGlvbiAodmVjdG9yKSB7XHJcblxyXG5cdFx0X29iai5sb29rQXQodmVjdG9yKTtcclxuXHJcblx0XHRfb2JqLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX29iai5tYXRyaXgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjZW50ZXI6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKF9vZmZzZXQpLm5lZ2F0ZSgpO1xyXG5cclxuXHRcdHRoaXMudHJhbnNsYXRlKF9vZmZzZXQueCwgX29mZnNldC55LCBfb2Zmc2V0LnopO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5zZXRGcm9tT2JqZWN0KCkuIENvbnZlcnRpbmcnLCBvYmplY3QsIHRoaXMgKTtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyk7XHJcblx0XHRcdHZhciBjb2xvcnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyk7XHJcblxyXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBwb3NpdGlvbnMuY29weVZlY3RvcjNzQXJyYXkoZ2VvbWV0cnkudmVydGljZXMpKTtcclxuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoJ2NvbG9yJywgY29sb3JzLmNvcHlDb2xvcnNBcnJheShnZW9tZXRyeS5jb2xvcnMpKTtcclxuXHJcblx0XHRcdGlmIChnZW9tZXRyeS5saW5lRGlzdGFuY2VzICYmIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoID09PSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpIHtcclxuXHJcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShnZW9tZXRyeS5saW5lRGlzdGFuY2VzLmxlbmd0aCwgMSk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYWRkQXR0cmlidXRlKCdsaW5lRGlzdGFuY2UnLCBsaW5lRGlzdGFuY2VzLmNvcHlBcnJheShnZW9tZXRyeS5saW5lRGlzdGFuY2VzKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvYmplY3QuaXNNZXNoKSB7XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLmZyb21HZW9tZXRyeShnZW9tZXRyeSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAocG9pbnRzKSB7XHJcblxyXG5cdFx0dmFyIHBvc2l0aW9uID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9pbnQgPSBwb2ludHNbaV07XHJcblx0XHRcdHBvc2l0aW9uLnB1c2gocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIDMpKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlRnJvbU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcclxuXHJcblx0XHRpZiAob2JqZWN0LmlzTWVzaCkge1xyXG5cclxuXHRcdFx0dmFyIGRpcmVjdCA9IGdlb21ldHJ5Ll9fZGlyZWN0R2VvbWV0cnk7XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cnkuZWxlbWVudHNOZWVkVXBkYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdGRpcmVjdCA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRnZW9tZXRyeS5lbGVtZW50c05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChkaXJlY3QgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5mcm9tR2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGlyZWN0LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZTtcclxuXHRcdFx0ZGlyZWN0Lm5vcm1hbHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGU7XHJcblx0XHRcdGRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcclxuXHRcdFx0ZGlyZWN0LnV2c05lZWRVcGRhdGUgPSBnZW9tZXRyeS51dnNOZWVkVXBkYXRlO1xyXG5cdFx0XHRkaXJlY3QuZ3JvdXBzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGU7XHJcblxyXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHRcdFx0Z2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cdFx0XHRnZW9tZXRyeS51dnNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblx0XHRcdGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdGdlb21ldHJ5ID0gZGlyZWN0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYXR0cmlidXRlO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHJcblx0XHRcdGlmIChhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoZ2VvbWV0cnkudmVydGljZXMpO1xyXG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5Lm5vcm1hbHNOZWVkVXBkYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xyXG5cclxuXHRcdFx0aWYgKGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheShnZW9tZXRyeS5ub3JtYWxzKTtcclxuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5jb2xvcjtcclxuXHJcblx0XHRcdGlmIChhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUNvbG9yc0FycmF5KGdlb21ldHJ5LmNvbG9ycyk7XHJcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LnV2c05lZWRVcGRhdGUpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy51djtcclxuXHJcblx0XHRcdGlmIChhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weVZlY3RvcjJzQXJyYXkoZ2VvbWV0cnkudXZzKTtcclxuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5saW5lRGlzdGFuY2U7XHJcblxyXG5cdFx0XHRpZiAoYXR0cmlidXRlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0YXR0cmlidXRlLmNvcHlBcnJheShnZW9tZXRyeS5saW5lRGlzdGFuY2VzKTtcclxuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5Lmdyb3Vwc05lZWRVcGRhdGUpIHtcclxuXHJcblx0XHRcdGdlb21ldHJ5LmNvbXB1dGVHcm91cHMob2JqZWN0Lmdlb21ldHJ5KTtcclxuXHRcdFx0dGhpcy5ncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XHJcblxyXG5cdFx0XHRnZW9tZXRyeS5ncm91cHNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG5cclxuXHRcdGdlb21ldHJ5Ll9fZGlyZWN0R2VvbWV0cnkgPSBuZXcgRGlyZWN0R2VvbWV0cnkoKS5mcm9tR2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZyb21EaXJlY3RHZW9tZXRyeShnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbURpcmVjdEdlb21ldHJ5OiBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuXHJcblx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggKiAzKTtcclxuXHRcdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKS5jb3B5VmVjdG9yM3NBcnJheShnZW9tZXRyeS52ZXJ0aWNlcykpO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHZhciBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheShnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCAqIDMpO1xyXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZShub3JtYWxzLCAzKS5jb3B5VmVjdG9yM3NBcnJheShnZW9tZXRyeS5ub3JtYWxzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5jb2xvcnMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMpO1xyXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKGNvbG9ycywgMykuY29weUNvbG9yc0FycmF5KGdlb21ldHJ5LmNvbG9ycykpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkudXZzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHZhciB1dnMgPSBuZXcgRmxvYXQzMkFycmF5KGdlb21ldHJ5LnV2cy5sZW5ndGggKiAyKTtcclxuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3V2JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpLmNvcHlWZWN0b3Iyc0FycmF5KGdlb21ldHJ5LnV2cykpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkudXZzMi5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHR2YXIgdXZzMiA9IG5ldyBGbG9hdDMyQXJyYXkoZ2VvbWV0cnkudXZzMi5sZW5ndGggKiAyKTtcclxuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3V2MicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUodXZzMiwgMikuY29weVZlY3RvcjJzQXJyYXkoZ2VvbWV0cnkudXZzMikpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBncm91cHNcclxuXHJcblx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcclxuXHJcblx0XHQvLyBtb3JwaHNcclxuXHJcblx0XHRmb3IgKHZhciBuYW1lIGluIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cykge1xyXG5cclxuXHRcdFx0dmFyIGFycmF5ID0gW107XHJcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbbmFtZV07XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzW2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobW9ycGhUYXJnZXQuZGF0YS5sZW5ndGggKiAzLCAzKTtcclxuXHRcdFx0XHRhdHRyaWJ1dGUubmFtZSA9IG1vcnBoVGFyZ2V0Lm5hbWU7XHJcblxyXG5cdFx0XHRcdGFycmF5LnB1c2goYXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KG1vcnBoVGFyZ2V0LmRhdGEpKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzW25hbWVdID0gYXJyYXk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHNraW5uaW5nXHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHZhciBza2luSW5kaWNlcyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAqIDQsIDQpO1xyXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgnc2tpbkluZGV4Jywgc2tpbkluZGljZXMuY29weVZlY3RvcjRzQXJyYXkoZ2VvbWV0cnkuc2tpbkluZGljZXMpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHZhciBza2luV2VpZ2h0cyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQpO1xyXG5cdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KGdlb21ldHJ5LnNraW5XZWlnaHRzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbXB1dGVCb3VuZGluZ0JveDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLmJvdW5kaW5nQm94ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJveDMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0dmFyIG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxyXG5cclxuXHRcdFx0aWYgKG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbltpXTtcclxuXHRcdFx0XHRcdF9ib3gkMS5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKG1vcnBoQXR0cmlidXRlKTtcclxuXHJcblx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoX2JveCQxLm1pbik7XHJcblx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoX2JveCQxLm1heCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLngpIHx8IGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpIHx8IGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnopKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3g6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwb3NpdGlvbiA9IHRoaXMuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHRcdGlmIChwb3NpdGlvbikge1xyXG5cclxuXHRcdFx0Ly8gZmlyc3QsIGZpbmQgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgc3BoZXJlXHJcblxyXG5cdFx0XHR2YXIgY2VudGVyID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5jZW50ZXI7XHJcblxyXG5cdFx0XHRfYm94JDEuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbik7XHJcblxyXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxyXG5cclxuXHRcdFx0aWYgKG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbltpXTtcclxuXHRcdFx0XHRcdF9ib3hNb3JwaFRhcmdldHMuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShtb3JwaEF0dHJpYnV0ZSk7XHJcblxyXG5cdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoX2JveE1vcnBoVGFyZ2V0cy5taW4pO1xyXG5cdFx0XHRcdFx0X2JveCQxLmV4cGFuZEJ5UG9pbnQoX2JveE1vcnBoVGFyZ2V0cy5tYXgpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfYm94JDEuZ2V0Q2VudGVyKGNlbnRlcik7XHJcblxyXG5cdFx0XHQvLyBzZWNvbmQsIHRyeSB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXHJcblx0XHRcdC8vIGJvdW5kaW5nU3BoZXJlIG9mIHRoZSBib3VuZGluZ0JveDogc3FydCgzKSBzbWFsbGVyIGluIHRoZSBiZXN0IGNhc2VcclxuXHJcblx0XHRcdHZhciBtYXhSYWRpdXNTcSA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0X3ZlY3RvciQ0LmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGkpO1xyXG5cclxuXHRcdFx0XHRtYXhSYWRpdXNTcSA9IE1hdGgubWF4KG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoX3ZlY3RvciQ0KSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIGF0dHJpYnV0ZXMgaWYgcHJlc2VudFxyXG5cclxuXHRcdFx0aWYgKG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbltpXTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamwgPSBtb3JwaEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdF92ZWN0b3IkNC5mcm9tQnVmZmVyQXR0cmlidXRlKG1vcnBoQXR0cmlidXRlLCBqKTtcclxuXHJcblx0XHRcdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgobWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZChfdmVjdG9yJDQpKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzID0gTWF0aC5zcXJ0KG1heFJhZGl1c1NxKTtcclxuXHJcblx0XHRcdGlmIChpc05hTih0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cykpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuQnVmZmVyR2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk6IENvbXB1dGVkIHJhZGl1cyBpcyBOYU4uIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJywgdGhpcyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjb21wdXRlRmFjZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxyXG5cclxuXHR9LFxyXG5cclxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuXHJcblx0XHRpZiAoYXR0cmlidXRlcy5wb3NpdGlvbikge1xyXG5cclxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcblxyXG5cdFx0XHRpZiAoYXR0cmlidXRlcy5ub3JtYWwgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KHBvc2l0aW9ucy5sZW5ndGgpLCAzKSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyByZXNldCBleGlzdGluZyBub3JtYWxzIHRvIHplcm9cclxuXHJcblx0XHRcdFx0dmFyIGFycmF5ID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRhcnJheVtpXSA9IDA7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwuYXJyYXk7XHJcblxyXG5cdFx0XHR2YXIgdkEsIHZCLCB2QztcclxuXHRcdFx0dmFyIHBBID0gbmV3IFZlY3RvcjMoKSwgcEIgPSBuZXcgVmVjdG9yMygpLCBwQyA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHRcdHZhciBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRcdC8vIGluZGV4ZWQgZWxlbWVudHNcclxuXHJcblx0XHRcdGlmIChpbmRleCkge1xyXG5cclxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBpbmRleC5jb3VudDsgaSA8IGlsOyBpICs9IDMpIHtcclxuXHJcblx0XHRcdFx0XHR2QSA9IGluZGljZXNbaSArIDBdICogMztcclxuXHRcdFx0XHRcdHZCID0gaW5kaWNlc1tpICsgMV0gKiAzO1xyXG5cdFx0XHRcdFx0dkMgPSBpbmRpY2VzW2kgKyAyXSAqIDM7XHJcblxyXG5cdFx0XHRcdFx0cEEuZnJvbUFycmF5KHBvc2l0aW9ucywgdkEpO1xyXG5cdFx0XHRcdFx0cEIuZnJvbUFycmF5KHBvc2l0aW9ucywgdkIpO1xyXG5cdFx0XHRcdFx0cEMuZnJvbUFycmF5KHBvc2l0aW9ucywgdkMpO1xyXG5cclxuXHRcdFx0XHRcdGNiLnN1YlZlY3RvcnMocEMsIHBCKTtcclxuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMocEEsIHBCKTtcclxuXHRcdFx0XHRcdGNiLmNyb3NzKGFiKTtcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzW3ZBXSArPSBjYi54O1xyXG5cdFx0XHRcdFx0bm9ybWFsc1t2QSArIDFdICs9IGNiLnk7XHJcblx0XHRcdFx0XHRub3JtYWxzW3ZBICsgMl0gKz0gY2IuejtcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzW3ZCXSArPSBjYi54O1xyXG5cdFx0XHRcdFx0bm9ybWFsc1t2QiArIDFdICs9IGNiLnk7XHJcblx0XHRcdFx0XHRub3JtYWxzW3ZCICsgMl0gKz0gY2IuejtcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzW3ZDXSArPSBjYi54O1xyXG5cdFx0XHRcdFx0bm9ybWFsc1t2QyArIDFdICs9IGNiLnk7XHJcblx0XHRcdFx0XHRub3JtYWxzW3ZDICsgMl0gKz0gY2IuejtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgZWxlbWVudHMgKHVuY29ubmVjdGVkIHRyaWFuZ2xlIHNvdXApXHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IHBvc2l0aW9ucy5sZW5ndGg7IGkgPCBpbDsgaSArPSA5KSB7XHJcblxyXG5cdFx0XHRcdFx0cEEuZnJvbUFycmF5KHBvc2l0aW9ucywgaSk7XHJcblx0XHRcdFx0XHRwQi5mcm9tQXJyYXkocG9zaXRpb25zLCBpICsgMyk7XHJcblx0XHRcdFx0XHRwQy5mcm9tQXJyYXkocG9zaXRpb25zLCBpICsgNik7XHJcblxyXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyhwQywgcEIpO1xyXG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyhwQSwgcEIpO1xyXG5cdFx0XHRcdFx0Y2IuY3Jvc3MoYWIpO1xyXG5cclxuXHRcdFx0XHRcdG5vcm1hbHNbaV0gPSBjYi54O1xyXG5cdFx0XHRcdFx0bm9ybWFsc1tpICsgMV0gPSBjYi55O1xyXG5cdFx0XHRcdFx0bm9ybWFsc1tpICsgMl0gPSBjYi56O1xyXG5cclxuXHRcdFx0XHRcdG5vcm1hbHNbaSArIDNdID0gY2IueDtcclxuXHRcdFx0XHRcdG5vcm1hbHNbaSArIDRdID0gY2IueTtcclxuXHRcdFx0XHRcdG5vcm1hbHNbaSArIDVdID0gY2IuejtcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzW2kgKyA2XSA9IGNiLng7XHJcblx0XHRcdFx0XHRub3JtYWxzW2kgKyA3XSA9IGNiLnk7XHJcblx0XHRcdFx0XHRub3JtYWxzW2kgKyA4XSA9IGNiLno7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubm9ybWFsaXplTm9ybWFscygpO1xyXG5cclxuXHRcdFx0YXR0cmlidXRlcy5ub3JtYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0bWVyZ2U6IGZ1bmN0aW9uIChnZW9tZXRyeSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKCEoZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5CdWZmZXJHZW9tZXRyeS4nLCBnZW9tZXRyeSk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRvZmZzZXQgPSAwO1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKFxyXG5cdFx0XHRcdCdUSFJFRS5CdWZmZXJHZW9tZXRyeS5tZXJnZSgpOiBPdmVyd3JpdGluZyBvcmlnaW5hbCBnZW9tZXRyeSwgc3RhcnRpbmcgYXQgb2Zmc2V0PTAuICdcclxuXHRcdFx0XHQrICdVc2UgQnVmZmVyR2VvbWV0cnlVdGlscy5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmb3IgbG9zc2xlc3MgbWVyZ2UuJ1xyXG5cdFx0XHQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0aWYgKGdlb21ldHJ5LmF0dHJpYnV0ZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7IGNvbnRpbnVlOyB9XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlMSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MSA9IGF0dHJpYnV0ZTEuYXJyYXk7XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlMiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNba2V5XTtcclxuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MiA9IGF0dHJpYnV0ZTIuYXJyYXk7XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlT2Zmc2V0ID0gYXR0cmlidXRlMi5pdGVtU2l6ZSAqIG9mZnNldDtcclxuXHRcdFx0dmFyIGxlbmd0aCA9IE1hdGgubWluKGF0dHJpYnV0ZUFycmF5Mi5sZW5ndGgsIGF0dHJpYnV0ZUFycmF5MS5sZW5ndGggLSBhdHRyaWJ1dGVPZmZzZXQpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGogPSBhdHRyaWJ1dGVPZmZzZXQ7IGkgPCBsZW5ndGg7IGkrKywgaisrKSB7XHJcblxyXG5cdFx0XHRcdGF0dHJpYnV0ZUFycmF5MVtqXSA9IGF0dHJpYnV0ZUFycmF5MltpXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG5vcm1hbGl6ZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgbm9ybWFscyA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gbm9ybWFscy5jb3VudDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdF92ZWN0b3IkNC54ID0gbm9ybWFscy5nZXRYKGkpO1xyXG5cdFx0XHRfdmVjdG9yJDQueSA9IG5vcm1hbHMuZ2V0WShpKTtcclxuXHRcdFx0X3ZlY3RvciQ0LnogPSBub3JtYWxzLmdldFooaSk7XHJcblxyXG5cdFx0XHRfdmVjdG9yJDQubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRub3JtYWxzLnNldFhZWihpLCBfdmVjdG9yJDQueCwgX3ZlY3RvciQ0LnksIF92ZWN0b3IkNC56KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvTm9uSW5kZXhlZDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoYXR0cmlidXRlLCBpbmRpY2VzKSB7XHJcblxyXG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XHJcblx0XHRcdHZhciBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcclxuXHJcblx0XHRcdHZhciBhcnJheTIgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IoaW5kaWNlcy5sZW5ndGggKiBpdGVtU2l6ZSk7XHJcblxyXG5cdFx0XHR2YXIgaW5kZXggPSAwLCBpbmRleDIgPSAwO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNbaV0gKiBpdGVtU2l6ZTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaisrKSB7XHJcblxyXG5cdFx0XHRcdFx0YXJyYXkyW2luZGV4MisrXSA9IGFycmF5W2luZGV4KytdO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheTIsIGl0ZW1TaXplKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRpZiAodGhpcy5pbmRleCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5CdWZmZXJHZW9tZXRyeS50b05vbkluZGV4ZWQoKTogR2VvbWV0cnkgaXMgYWxyZWFkeSBub24taW5kZXhlZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcblx0XHR2YXIgaW5kaWNlcyA9IHRoaXMuaW5kZXguYXJyYXk7XHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuXHJcblx0XHQvLyBhdHRyaWJ1dGVzXHJcblxyXG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBhdHRyaWJ1dGVzKSB7XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tuYW1lXTtcclxuXHJcblx0XHRcdHZhciBuZXdBdHRyaWJ1dGUgPSBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKGF0dHJpYnV0ZSwgaW5kaWNlcyk7XHJcblxyXG5cdFx0XHRnZW9tZXRyeTIuYWRkQXR0cmlidXRlKG5hbWUsIG5ld0F0dHJpYnV0ZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcclxuXHJcblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Zm9yIChuYW1lIGluIG1vcnBoQXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0dmFyIG1vcnBoQXJyYXkgPSBbXTtcclxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzW25hbWVdOyAvLyBtb3JwaEF0dHJpYnV0ZTogYXJyYXkgb2YgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZXNcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlW2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgbmV3QXR0cmlidXRlID0gY29udmVydEJ1ZmZlckF0dHJpYnV0ZShhdHRyaWJ1dGUsIGluZGljZXMpO1xyXG5cclxuXHRcdFx0XHRtb3JwaEFycmF5LnB1c2gobmV3QXR0cmlidXRlKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJ5Mi5tb3JwaEF0dHJpYnV0ZXNbbmFtZV0gPSBtb3JwaEFycmF5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBncm91cHNcclxuXHJcblx0XHR2YXIgZ3JvdXBzID0gdGhpcy5ncm91cHM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbaV07XHJcblx0XHRcdGdlb21ldHJ5Mi5hZGRHcm91cChncm91cC5zdGFydCwgZ3JvdXAuY291bnQsIGdyb3VwLm1hdGVyaWFsSW5kZXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IHtcclxuXHRcdFx0bWV0YWRhdGE6IHtcclxuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXHJcblx0XHRcdFx0dHlwZTogJ0J1ZmZlckdlb21ldHJ5JyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdCdWZmZXJHZW9tZXRyeS50b0pTT04nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc3RhbmRhcmQgQnVmZmVyR2VvbWV0cnkgc2VyaWFsaXphdGlvblxyXG5cclxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcclxuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcclxuXHRcdGlmICh0aGlzLm5hbWUgIT09ICcnKSB7IGRhdGEubmFtZSA9IHRoaXMubmFtZTsgfVxyXG5cdFx0aWYgKE9iamVjdC5rZXlzKHRoaXMudXNlckRhdGEpLmxlbmd0aCA+IDApIHsgZGF0YS51c2VyRGF0YSA9IHRoaXMudXNlckRhdGE7IH1cclxuXHJcblx0XHRpZiAodGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHBhcmFtZXRlcnMpIHtcclxuXHJcblx0XHRcdFx0aWYgKHBhcmFtZXRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7IGRhdGFba2V5XSA9IHBhcmFtZXRlcnNba2V5XTsgfVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRhdGEuZGF0YSA9IHsgYXR0cmlidXRlczoge30gfTtcclxuXHJcblx0XHR2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xyXG5cclxuXHRcdGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0ZGF0YS5kYXRhLmluZGV4ID0ge1xyXG5cdFx0XHRcdHR5cGU6IGluZGV4LmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXHJcblx0XHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGluZGV4LmFycmF5KVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuXHJcblx0XHRcdHZhciBhdHRyaWJ1dGVEYXRhID0gYXR0cmlidXRlLnRvSlNPTigpO1xyXG5cclxuXHRcdFx0aWYgKGF0dHJpYnV0ZS5uYW1lICE9PSAnJykgeyBhdHRyaWJ1dGVEYXRhLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTsgfVxyXG5cclxuXHRcdFx0ZGF0YS5kYXRhLmF0dHJpYnV0ZXNba2V5XSA9IGF0dHJpYnV0ZURhdGE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSB7fTtcclxuXHRcdHZhciBoYXNNb3JwaEF0dHJpYnV0ZXMgPSBmYWxzZTtcclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gdGhpcy5tb3JwaEF0dHJpYnV0ZXMpIHtcclxuXHJcblx0XHRcdHZhciBhdHRyaWJ1dGVBcnJheSA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzW2tleV07XHJcblxyXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5W2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlRGF0YSA9IGF0dHJpYnV0ZS50b0pTT04oKTtcclxuXHJcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZS5uYW1lICE9PSAnJykgeyBhdHRyaWJ1dGVEYXRhLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTsgfVxyXG5cclxuXHRcdFx0XHRhcnJheS5wdXNoKGF0dHJpYnV0ZURhdGEpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGFycmF5Lmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdFx0bW9ycGhBdHRyaWJ1dGVzW2tleV0gPSBhcnJheTtcclxuXHJcblx0XHRcdFx0aGFzTW9ycGhBdHRyaWJ1dGVzID0gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGhhc01vcnBoQXR0cmlidXRlcykgeyBkYXRhLmRhdGEubW9ycGhBdHRyaWJ1dGVzID0gbW9ycGhBdHRyaWJ1dGVzOyB9XHJcblxyXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xyXG5cclxuXHRcdGlmIChncm91cHMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZ3JvdXBzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IHRoaXMuYm91bmRpbmdTcGhlcmU7XHJcblxyXG5cdFx0aWYgKGJvdW5kaW5nU3BoZXJlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRkYXRhLmRhdGEuYm91bmRpbmdTcGhlcmUgPSB7XHJcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxyXG5cdFx0XHRcdHJhZGl1czogYm91bmRpbmdTcGhlcmUucmFkaXVzXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdC8qXHJcblx0XHQgLy8gSGFuZGxlIHByaW1pdGl2ZXNcclxuXHJcblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XHJcblxyXG5cdFx0IGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xyXG5cclxuXHRcdCB2YXIgdmFsdWVzID0gW107XHJcblxyXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcclxuXHJcblx0XHQgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7XHJcblxyXG5cdFx0IH1cclxuXHJcblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcclxuXHRcdCB0aGlzLmNvbnN0cnVjdG9yLmFwcGx5KCBnZW9tZXRyeSwgdmFsdWVzICk7XHJcblx0XHQgcmV0dXJuIGdlb21ldHJ5O1xyXG5cclxuXHRcdCB9XHJcblxyXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcclxuXHRcdCAqL1xyXG5cclxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0dmFyIG5hbWUsIGksIGw7XHJcblxyXG5cdFx0Ly8gcmVzZXRcclxuXHJcblx0XHR0aGlzLmluZGV4ID0gbnVsbDtcclxuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xyXG5cdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXMgPSB7fTtcclxuXHRcdHRoaXMuZ3JvdXBzID0gW107XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHRcdC8vIG5hbWVcclxuXHJcblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcclxuXHJcblx0XHQvLyBpbmRleFxyXG5cclxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0SW5kZXgoaW5kZXguY2xvbmUoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGF0dHJpYnV0ZXNcclxuXHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IHNvdXJjZS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGZvciAobmFtZSBpbiBhdHRyaWJ1dGVzKSB7XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tuYW1lXTtcclxuXHRcdFx0dGhpcy5hZGRBdHRyaWJ1dGUobmFtZSwgYXR0cmlidXRlLmNsb25lKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtb3JwaCBhdHRyaWJ1dGVzXHJcblxyXG5cdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IHNvdXJjZS5tb3JwaEF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Zm9yIChuYW1lIGluIG1vcnBoQXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0dmFyIGFycmF5ID0gW107XHJcblx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1tuYW1lXTsgLy8gbW9ycGhBdHRyaWJ1dGU6IGFycmF5IG9mIEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGVzXHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwLCBsID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGFycmF5LnB1c2gobW9ycGhBdHRyaWJ1dGVbaV0uY2xvbmUoKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLm1vcnBoQXR0cmlidXRlc1tuYW1lXSA9IGFycmF5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBncm91cHNcclxuXHJcblx0XHR2YXIgZ3JvdXBzID0gc291cmNlLmdyb3VwcztcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzW2ldO1xyXG5cdFx0XHR0aGlzLmFkZEdyb3VwKGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJvdW5kaW5nIGJveFxyXG5cclxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcclxuXHJcblx0XHRpZiAoYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBib3VuZGluZyBzcGhlcmVcclxuXHJcblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XHJcblxyXG5cdFx0aWYgKGJvdW5kaW5nU3BoZXJlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZHJhdyByYW5nZVxyXG5cclxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc291cmNlLmRyYXdSYW5nZS5zdGFydDtcclxuXHRcdHRoaXMuZHJhd1JhbmdlLmNvdW50ID0gc291cmNlLmRyYXdSYW5nZS5jb3VudDtcclxuXHJcblx0XHQvLyB1c2VyIGRhdGFcclxuXHJcblx0XHR0aGlzLnVzZXJEYXRhID0gc291cmNlLnVzZXJEYXRhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ2Rpc3Bvc2UnIH0pO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwOi8vam9ub2JyMS5jb20vXHJcbiAqL1xyXG5cclxudmFyIF9pbnZlcnNlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxudmFyIF9yYXkgPSBuZXcgUmF5KCk7XHJcbnZhciBfc3BoZXJlID0gbmV3IFNwaGVyZSgpO1xyXG5cclxudmFyIF92QSA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfdkIgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3ZDID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbnZhciBfdGVtcEEgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3RlbXBCID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF90ZW1wQyA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG52YXIgX21vcnBoQSA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfbW9ycGhCID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9tb3JwaEMgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxudmFyIF91dkEgPSBuZXcgVmVjdG9yMigpO1xyXG52YXIgX3V2QiA9IG5ldyBWZWN0b3IyKCk7XHJcbnZhciBfdXZDID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbnZhciBfaW50ZXJzZWN0aW9uUG9pbnQgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2ludGVyc2VjdGlvblBvaW50V29ybGQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ01lc2gnO1xyXG5cclxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbCA6IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmYgfSk7XHJcblxyXG5cdHRoaXMuZHJhd01vZGUgPSBUcmlhbmdsZXNEcmF3TW9kZTtcclxuXHJcblx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcclxuXHJcbn1cclxuXHJcbk1lc2gucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IE1lc2gsXHJcblxyXG5cdGlzTWVzaDogdHJ1ZSxcclxuXHJcblx0c2V0RHJhd01vZGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMuZHJhd01vZGUgPSB2YWx1ZTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLmRyYXdNb2RlID0gc291cmNlLmRyYXdNb2RlO1xyXG5cclxuXHRcdGlmIChzb3VyY2UubW9ycGhUYXJnZXRJbmZsdWVuY2VzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzID0gc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5zbGljZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS5tb3JwaFRhcmdldERpY3Rpb25hcnkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlTW9ycGhUYXJnZXRzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHRcdHZhciBtLCBtbCwgbmFtZTtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcclxuXHRcdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhtb3JwaEF0dHJpYnV0ZXMpO1xyXG5cclxuXHRcdFx0aWYgKGtleXMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNba2V5c1swXV07XHJcblxyXG5cdFx0XHRcdGlmIChtb3JwaEF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMgPSBbXTtcclxuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRuYW1lID0gbW9ycGhBdHRyaWJ1dGVbbV0ubmFtZSB8fCBTdHJpbmcobSk7XHJcblxyXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKDApO1xyXG5cdFx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVtuYW1lXSA9IG07XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XHJcblxyXG5cdFx0XHRpZiAobW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgbW9ycGhUYXJnZXRzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWVzaC51cGRhdGVNb3JwaFRhcmdldHMoKSBubyBsb25nZXIgc3VwcG9ydHMgVEhSRUUuR2VvbWV0cnkuIFVzZSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0cmF5Y2FzdDogZnVuY3Rpb24gKHJheWNhc3RlciwgaW50ZXJzZWN0cykge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHR2YXIgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xyXG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cclxuXHJcblx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwpIHsgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7IH1cclxuXHJcblx0XHRfc3BoZXJlLmNvcHkoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpO1xyXG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQobWF0cml4V29ybGQpO1xyXG5cclxuXHRcdGlmIChyYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoX3NwaGVyZSkgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0X2ludmVyc2VNYXRyaXguZ2V0SW52ZXJzZShtYXRyaXhXb3JsZCk7XHJcblx0XHRfcmF5LmNvcHkocmF5Y2FzdGVyLnJheSkuYXBwbHlNYXRyaXg0KF9pbnZlcnNlTWF0cml4KTtcclxuXHJcblx0XHQvLyBDaGVjayBib3VuZGluZ0JveCBiZWZvcmUgY29udGludWluZ1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0aWYgKF9yYXkuaW50ZXJzZWN0c0JveChnZW9tZXRyeS5ib3VuZGluZ0JveCkgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaW50ZXJzZWN0aW9uO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHR2YXIgYSwgYiwgYztcclxuXHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblx0XHRcdHZhciBtb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHR2YXIgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xyXG5cdFx0XHR2YXIgdXYyID0gZ2VvbWV0cnkuYXR0cmlidXRlcy51djI7XHJcblx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XHJcblx0XHRcdHZhciBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XHJcblx0XHRcdHZhciBpLCBqLCBpbCwgamw7XHJcblx0XHRcdHZhciBncm91cCwgZ3JvdXBNYXRlcmlhbDtcclxuXHRcdFx0dmFyIHN0YXJ0LCBlbmQ7XHJcblxyXG5cdFx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0Ly8gaW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcclxuXHJcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobWF0ZXJpYWwpKSB7XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0Z3JvdXAgPSBncm91cHNbaV07XHJcblx0XHRcdFx0XHRcdGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFtncm91cC5tYXRlcmlhbEluZGV4XTtcclxuXHJcblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCk7XHJcblx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKChncm91cC5zdGFydCArIGdyb3VwLmNvdW50KSwgKGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCkpO1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yIChqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMykge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRhID0gaW5kZXguZ2V0WChqKTtcclxuXHRcdFx0XHRcdFx0XHRiID0gaW5kZXguZ2V0WChqICsgMSk7XHJcblx0XHRcdFx0XHRcdFx0YyA9IGluZGV4LmdldFgoaiArIDIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKHRoaXMsIGdyb3VwTWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIHV2LCB1djIsIGEsIGIsIGMpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaW50ZXJzZWN0aW9uKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoaiAvIDMpOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gaW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXHJcblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZS5tYXRlcmlhbEluZGV4ID0gZ3JvdXAubWF0ZXJpYWxJbmRleDtcclxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaChpbnRlcnNlY3Rpb24pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoMCwgZHJhd1JhbmdlLnN0YXJ0KTtcclxuXHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKGluZGV4LmNvdW50LCAoZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50KSk7XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMykge1xyXG5cclxuXHRcdFx0XHRcdFx0YSA9IGluZGV4LmdldFgoaSk7XHJcblx0XHRcdFx0XHRcdGIgPSBpbmRleC5nZXRYKGkgKyAxKTtcclxuXHRcdFx0XHRcdFx0YyA9IGluZGV4LmdldFgoaSArIDIpO1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbih0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgdXYsIHV2MiwgYSwgYiwgYyk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoaW50ZXJzZWN0aW9uKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKGkgLyAzKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIGluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaChpbnRlcnNlY3Rpb24pO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChwb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdC8vIG5vbi1pbmRleGVkIGJ1ZmZlciBnZW9tZXRyeVxyXG5cclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShtYXRlcmlhbCkpIHtcclxuXHJcblx0XHRcdFx0XHRmb3IgKGkgPSAwLCBpbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1tpXTtcclxuXHRcdFx0XHRcdFx0Z3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsW2dyb3VwLm1hdGVyaWFsSW5kZXhdO1xyXG5cclxuXHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heChncm91cC5zdGFydCwgZHJhd1JhbmdlLnN0YXJ0KTtcclxuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oKGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQpLCAoZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50KSk7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGEgPSBqO1xyXG5cdFx0XHRcdFx0XHRcdGIgPSBqICsgMTtcclxuXHRcdFx0XHRcdFx0XHRjID0gaiArIDI7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24odGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgdXYsIHV2MiwgYSwgYiwgYyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChpbnRlcnNlY3Rpb24pIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gTWF0aC5mbG9vcihqIC8gMyk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXHJcblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZS5tYXRlcmlhbEluZGV4ID0gZ3JvdXAubWF0ZXJpYWxJbmRleDtcclxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaChpbnRlcnNlY3Rpb24pO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoMCwgZHJhd1JhbmdlLnN0YXJ0KTtcclxuXHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKHBvc2l0aW9uLmNvdW50LCAoZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50KSk7XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChpID0gc3RhcnQsIGlsID0gZW5kOyBpIDwgaWw7IGkgKz0gMykge1xyXG5cclxuXHRcdFx0XHRcdFx0YSA9IGk7XHJcblx0XHRcdFx0XHRcdGIgPSBpICsgMTtcclxuXHRcdFx0XHRcdFx0YyA9IGkgKyAyO1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbih0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgdXYsIHV2MiwgYSwgYiwgYyk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoaW50ZXJzZWN0aW9uKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKGkgLyAzKTsgLy8gdHJpYW5nbGUgbnVtYmVyIGluIG5vbi1pbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3NcclxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goaW50ZXJzZWN0aW9uKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKGdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdHZhciBmdkEsIGZ2QiwgZnZDO1xyXG5cdFx0XHR2YXIgaXNNdWx0aU1hdGVyaWFsID0gQXJyYXkuaXNBcnJheShtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcclxuXHRcdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XHJcblx0XHRcdHZhciB1dnM7XHJcblxyXG5cdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF07XHJcblx0XHRcdGlmIChmYWNlVmVydGV4VXZzLmxlbmd0aCA+IDApIHsgdXZzID0gZmFjZVZlcnRleFV2czsgfVxyXG5cclxuXHRcdFx0Zm9yICh2YXIgZiA9IDAsIGZsID0gZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0XHR2YXIgZmFjZSA9IGZhY2VzW2ZdO1xyXG5cdFx0XHRcdHZhciBmYWNlTWF0ZXJpYWwgPSBpc011bHRpTWF0ZXJpYWwgPyBtYXRlcmlhbFtmYWNlLm1hdGVyaWFsSW5kZXhdIDogbWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdGlmIChmYWNlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfVxyXG5cclxuXHRcdFx0XHRmdkEgPSB2ZXJ0aWNlc1tmYWNlLmFdO1xyXG5cdFx0XHRcdGZ2QiA9IHZlcnRpY2VzW2ZhY2UuYl07XHJcblx0XHRcdFx0ZnZDID0gdmVydGljZXNbZmFjZS5jXTtcclxuXHJcblx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tJbnRlcnNlY3Rpb24odGhpcywgZmFjZU1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXksIGZ2QSwgZnZCLCBmdkMsIF9pbnRlcnNlY3Rpb25Qb2ludCk7XHJcblxyXG5cdFx0XHRcdGlmIChpbnRlcnNlY3Rpb24pIHtcclxuXHJcblx0XHRcdFx0XHRpZiAodXZzICYmIHV2c1tmXSkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHV2c19mID0gdXZzW2ZdO1xyXG5cdFx0XHRcdFx0XHRfdXZBLmNvcHkodXZzX2ZbMF0pO1xyXG5cdFx0XHRcdFx0XHRfdXZCLmNvcHkodXZzX2ZbMV0pO1xyXG5cdFx0XHRcdFx0XHRfdXZDLmNvcHkodXZzX2ZbMl0pO1xyXG5cclxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLnV2ID0gVHJpYW5nbGUuZ2V0VVYoX2ludGVyc2VjdGlvblBvaW50LCBmdkEsIGZ2QiwgZnZDLCBfdXZBLCBfdXZCLCBfdXZDLCBuZXcgVmVjdG9yMigpKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlO1xyXG5cdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IGY7XHJcblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goaW50ZXJzZWN0aW9uKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCkuY29weSh0aGlzKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5mdW5jdGlvbiBjaGVja0ludGVyc2VjdGlvbihvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcEEsIHBCLCBwQywgcG9pbnQpIHtcclxuXHJcblx0dmFyIGludGVyc2VjdDtcclxuXHJcblx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7XHJcblxyXG5cdFx0aW50ZXJzZWN0ID0gcmF5LmludGVyc2VjdFRyaWFuZ2xlKHBDLCBwQiwgcEEsIHRydWUsIHBvaW50KTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUocEEsIHBCLCBwQywgbWF0ZXJpYWwuc2lkZSAhPT0gRG91YmxlU2lkZSwgcG9pbnQpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmIChpbnRlcnNlY3QgPT09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuY29weShwb2ludCk7XHJcblx0X2ludGVyc2VjdGlvblBvaW50V29ybGQuYXBwbHlNYXRyaXg0KG9iamVjdC5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oX2ludGVyc2VjdGlvblBvaW50V29ybGQpO1xyXG5cclxuXHRpZiAoZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIpIHsgcmV0dXJuIG51bGw7IH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdHBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxyXG5cdFx0b2JqZWN0OiBvYmplY3RcclxuXHR9O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbihvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIHV2LCB1djIsIGEsIGIsIGMpIHtcclxuXHJcblx0X3ZBLmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGEpO1xyXG5cdF92Qi5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBiKTtcclxuXHRfdkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbiwgYyk7XHJcblxyXG5cdHZhciBtb3JwaEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xyXG5cclxuXHRpZiAobWF0ZXJpYWwubW9ycGhUYXJnZXRzICYmIG1vcnBoUG9zaXRpb24gJiYgbW9ycGhJbmZsdWVuY2VzKSB7XHJcblxyXG5cdFx0X21vcnBoQS5zZXQoMCwgMCwgMCk7XHJcblx0XHRfbW9ycGhCLnNldCgwLCAwLCAwKTtcclxuXHRcdF9tb3JwaEMuc2V0KDAsIDAsIDApO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IG1vcnBoUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1tpXTtcclxuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhQb3NpdGlvbltpXTtcclxuXHJcblx0XHRcdGlmIChpbmZsdWVuY2UgPT09IDApIHsgY29udGludWU7IH1cclxuXHJcblx0XHRcdF90ZW1wQS5mcm9tQnVmZmVyQXR0cmlidXRlKG1vcnBoQXR0cmlidXRlLCBhKTtcclxuXHRcdFx0X3RlbXBCLmZyb21CdWZmZXJBdHRyaWJ1dGUobW9ycGhBdHRyaWJ1dGUsIGIpO1xyXG5cdFx0XHRfdGVtcEMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShtb3JwaEF0dHJpYnV0ZSwgYyk7XHJcblxyXG5cdFx0XHRfbW9ycGhBLmFkZFNjYWxlZFZlY3RvcihfdGVtcEEuc3ViKF92QSksIGluZmx1ZW5jZSk7XHJcblx0XHRcdF9tb3JwaEIuYWRkU2NhbGVkVmVjdG9yKF90ZW1wQi5zdWIoX3ZCKSwgaW5mbHVlbmNlKTtcclxuXHRcdFx0X21vcnBoQy5hZGRTY2FsZWRWZWN0b3IoX3RlbXBDLnN1YihfdkMpLCBpbmZsdWVuY2UpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfdkEuYWRkKF9tb3JwaEEpO1xyXG5cdFx0X3ZCLmFkZChfbW9ycGhCKTtcclxuXHRcdF92Qy5hZGQoX21vcnBoQyk7XHJcblxyXG5cdH1cclxuXHJcblx0dmFyIGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBfdkEsIF92QiwgX3ZDLCBfaW50ZXJzZWN0aW9uUG9pbnQpO1xyXG5cclxuXHRpZiAoaW50ZXJzZWN0aW9uKSB7XHJcblxyXG5cdFx0aWYgKHV2KSB7XHJcblxyXG5cdFx0XHRfdXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUodXYsIGEpO1xyXG5cdFx0XHRfdXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUodXYsIGIpO1xyXG5cdFx0XHRfdXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUodXYsIGMpO1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0aW9uLnV2ID0gVHJpYW5nbGUuZ2V0VVYoX2ludGVyc2VjdGlvblBvaW50LCBfdkEsIF92QiwgX3ZDLCBfdXZBLCBfdXZCLCBfdXZDLCBuZXcgVmVjdG9yMigpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHV2Mikge1xyXG5cclxuXHRcdFx0X3V2QS5mcm9tQnVmZmVyQXR0cmlidXRlKHV2MiwgYSk7XHJcblx0XHRcdF91dkIuZnJvbUJ1ZmZlckF0dHJpYnV0ZSh1djIsIGIpO1xyXG5cdFx0XHRfdXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUodXYyLCBjKTtcclxuXHJcblx0XHRcdGludGVyc2VjdGlvbi51djIgPSBUcmlhbmdsZS5nZXRVVihfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyhhLCBiLCBjKTtcclxuXHRcdFRyaWFuZ2xlLmdldE5vcm1hbChfdkEsIF92QiwgX3ZDLCBmYWNlLm5vcm1hbCk7XHJcblxyXG5cdFx0aW50ZXJzZWN0aW9uLmZhY2UgPSBmYWNlO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBpbnRlcnNlY3Rpb247XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBraWxlIC8gaHR0cDovL2tpbGUuc3RyYXZhZ2FuemEub3JnL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cclxuICovXHJcblxyXG52YXIgX2dlb21ldHJ5SWQgPSAwOyAvLyBHZW9tZXRyeSB1c2VzIGV2ZW4gbnVtYmVycyBhcyBJZFxyXG52YXIgX20xJDMgPSBuZXcgTWF0cml4NCgpO1xyXG52YXIgX29iaiQxID0gbmV3IE9iamVjdDNEKCk7XHJcbnZhciBfb2Zmc2V0JDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gR2VvbWV0cnkoKSB7XHJcblxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWQnLCB7IHZhbHVlOiBfZ2VvbWV0cnlJZCArPSAyIH0pO1xyXG5cclxuXHR0aGlzLnV1aWQgPSBfTWF0aC5nZW5lcmF0ZVVVSUQoKTtcclxuXHJcblx0dGhpcy5uYW1lID0gJyc7XHJcblx0dGhpcy50eXBlID0gJ0dlb21ldHJ5JztcclxuXHJcblx0dGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG5cdHRoaXMuY29sb3JzID0gW107XHJcblx0dGhpcy5mYWNlcyA9IFtdO1xyXG5cdHRoaXMuZmFjZVZlcnRleFV2cyA9IFtbXV07XHJcblxyXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gW107XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBbXTtcclxuXHJcblx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xyXG5cdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcclxuXHJcblx0dGhpcy5saW5lRGlzdGFuY2VzID0gW107XHJcblxyXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBudWxsO1xyXG5cclxuXHQvLyB1cGRhdGUgZmxhZ3NcclxuXHJcblx0dGhpcy5lbGVtZW50c05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcclxuXHR0aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblxyXG59XHJcblxyXG5HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEdlb21ldHJ5LFxyXG5cclxuXHRpc0dlb21ldHJ5OiB0cnVlLFxyXG5cclxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKG1hdHJpeCkge1xyXG5cclxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeChtYXRyaXgpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHZlcnRleCA9IHRoaXMudmVydGljZXNbaV07XHJcblx0XHRcdHZlcnRleC5hcHBseU1hdHJpeDQobWF0cml4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZSA9IHRoaXMuZmFjZXNbaV07XHJcblx0XHRcdGZhY2Uubm9ybWFsLmFwcGx5TWF0cml4Myhub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcclxuXHJcblx0XHRcdFx0ZmFjZS52ZXJ0ZXhOb3JtYWxzW2pdLmFwcGx5TWF0cml4Myhub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuYm91bmRpbmdTcGhlcmUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHgtYXhpc1xyXG5cclxuXHRcdF9tMSQzLm1ha2VSb3RhdGlvblgoYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xyXG5cclxuXHRcdF9tMSQzLm1ha2VSb3RhdGlvblkoYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoYW5nbGUpIHtcclxuXHJcblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHotYXhpc1xyXG5cclxuXHRcdF9tMSQzLm1ha2VSb3RhdGlvblooYW5nbGUpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcblxyXG5cdFx0Ly8gdHJhbnNsYXRlIGdlb21ldHJ5XHJcblxyXG5cdFx0X20xJDMubWFrZVRyYW5zbGF0aW9uKHgsIHksIHopO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgoX20xJDMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzY2FsZTogZnVuY3Rpb24gKHgsIHksIHopIHtcclxuXHJcblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxyXG5cclxuXHRcdF9tMSQzLm1ha2VTY2FsZSh4LCB5LCB6KTtcclxuXHJcblx0XHR0aGlzLmFwcGx5TWF0cml4KF9tMSQzKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0bG9va0F0OiBmdW5jdGlvbiAodmVjdG9yKSB7XHJcblxyXG5cdFx0X29iaiQxLmxvb2tBdCh2ZWN0b3IpO1xyXG5cclxuXHRcdF9vYmokMS51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLmFwcGx5TWF0cml4KF9vYmokMS5tYXRyaXgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tQnVmZmVyR2VvbWV0cnk6IGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG5cclxuXHRcdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIGluZGljZXMgPSBnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCA/IGdlb21ldHJ5LmluZGV4LmFycmF5IDogdW5kZWZpbmVkO1xyXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGlmIChhdHRyaWJ1dGVzLnBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkdlb21ldHJ5LmZyb21CdWZmZXJHZW9tZXRyeSgpOiBQb3NpdGlvbiBhdHRyaWJ1dGUgcmVxdWlyZWQgZm9yIGNvbnZlcnNpb24uJyk7XHJcblx0XHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcclxuXHRcdHZhciBub3JtYWxzID0gYXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5IDogdW5kZWZpbmVkO1xyXG5cdFx0dmFyIGNvbG9ycyA9IGF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMuY29sb3IuYXJyYXkgOiB1bmRlZmluZWQ7XHJcblx0XHR2YXIgdXZzID0gYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51di5hcnJheSA6IHVuZGVmaW5lZDtcclxuXHRcdHZhciB1dnMyID0gYXR0cmlidXRlcy51djIgIT09IHVuZGVmaW5lZCA/IGF0dHJpYnV0ZXMudXYyLmFycmF5IDogdW5kZWZpbmVkO1xyXG5cclxuXHRcdGlmICh1dnMyICE9PSB1bmRlZmluZWQpIHsgdGhpcy5mYWNlVmVydGV4VXZzWzFdID0gW107IH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMykge1xyXG5cclxuXHRcdFx0c2NvcGUudmVydGljZXMucHVzaChuZXcgVmVjdG9yMygpLmZyb21BcnJheShwb3NpdGlvbnMsIGkpKTtcclxuXHJcblx0XHRcdGlmIChjb2xvcnMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRzY29wZS5jb2xvcnMucHVzaChuZXcgQ29sb3IoKS5mcm9tQXJyYXkoY29sb3JzLCBpKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZEZhY2UoYSwgYiwgYywgbWF0ZXJpYWxJbmRleCkge1xyXG5cclxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IChjb2xvcnMgPT09IHVuZGVmaW5lZCkgPyBbXSA6IFtcclxuXHRcdFx0XHRzY29wZS5jb2xvcnNbYV0uY2xvbmUoKSxcclxuXHRcdFx0XHRzY29wZS5jb2xvcnNbYl0uY2xvbmUoKSxcclxuXHRcdFx0XHRzY29wZS5jb2xvcnNbY10uY2xvbmUoKV07XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IChub3JtYWxzID09PSB1bmRlZmluZWQpID8gW10gOiBbXHJcblx0XHRcdFx0bmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkobm9ybWFscywgYSAqIDMpLFxyXG5cdFx0XHRcdG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KG5vcm1hbHMsIGIgKiAzKSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMygpLmZyb21BcnJheShub3JtYWxzLCBjICogMylcclxuXHRcdFx0XTtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gbmV3IEZhY2UzKGEsIGIsIGMsIHZlcnRleE5vcm1hbHMsIHZlcnRleENvbG9ycywgbWF0ZXJpYWxJbmRleCk7XHJcblxyXG5cdFx0XHRzY29wZS5mYWNlcy5wdXNoKGZhY2UpO1xyXG5cclxuXHRcdFx0aWYgKHV2cyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHNjb3BlLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbXHJcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSh1dnMsIGEgKiAyKSxcclxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KHV2cywgYiAqIDIpLFxyXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkodXZzLCBjICogMilcclxuXHRcdFx0XHRdKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh1dnMyICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0c2NvcGUuZmFjZVZlcnRleFV2c1sxXS5wdXNoKFtcclxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KHV2czIsIGEgKiAyKSxcclxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KHV2czIsIGIgKiAyKSxcclxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KHV2czIsIGMgKiAyKVxyXG5cdFx0XHRcdF0pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xyXG5cclxuXHRcdGlmIChncm91cHMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzW2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgc3RhcnQgPSBncm91cC5zdGFydDtcclxuXHRcdFx0XHR2YXIgY291bnQgPSBncm91cC5jb3VudDtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaiA9IHN0YXJ0LCBqbCA9IHN0YXJ0ICsgY291bnQ7IGogPCBqbDsgaiArPSAzKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKGluZGljZXMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0YWRkRmFjZShpbmRpY2VzW2pdLCBpbmRpY2VzW2ogKyAxXSwgaW5kaWNlc1tqICsgMl0sIGdyb3VwLm1hdGVyaWFsSW5kZXgpO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRhZGRGYWNlKGosIGogKyAxLCBqICsgMiwgZ3JvdXAubWF0ZXJpYWxJbmRleCk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGlmIChpbmRpY2VzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzKSB7XHJcblxyXG5cdFx0XHRcdFx0YWRkRmFjZShpbmRpY2VzW2ldLCBpbmRpY2VzW2kgKyAxXSwgaW5kaWNlc1tpICsgMl0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpICs9IDMpIHtcclxuXHJcblx0XHRcdFx0XHRhZGRGYWNlKGksIGkgKyAxLCBpICsgMik7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2VudGVyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94LmdldENlbnRlcihfb2Zmc2V0JDEpLm5lZ2F0ZSgpO1xyXG5cclxuXHRcdHRoaXMudHJhbnNsYXRlKF9vZmZzZXQkMS54LCBfb2Zmc2V0JDEueSwgX29mZnNldCQxLnopO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcclxuXHRcdHZhciByYWRpdXMgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cztcclxuXHJcblx0XHR2YXIgcyA9IHJhZGl1cyA9PT0gMCA/IDEgOiAxLjAgLyByYWRpdXM7XHJcblxyXG5cdFx0dmFyIG1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0XHRtYXRyaXguc2V0KFxyXG5cdFx0XHRzLCAwLCAwLCAtIHMgKiBjZW50ZXIueCxcclxuXHRcdFx0MCwgcywgMCwgLSBzICogY2VudGVyLnksXHJcblx0XHRcdDAsIDAsIHMsIC0gcyAqIGNlbnRlci56LFxyXG5cdFx0XHQwLCAwLCAwLCAxXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMuYXBwbHlNYXRyaXgobWF0cml4KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29tcHV0ZUZhY2VOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdGZvciAodmFyIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0dmFyIGZhY2UgPSB0aGlzLmZhY2VzW2ZdO1xyXG5cclxuXHRcdFx0dmFyIHZBID0gdGhpcy52ZXJ0aWNlc1tmYWNlLmFdO1xyXG5cdFx0XHR2YXIgdkIgPSB0aGlzLnZlcnRpY2VzW2ZhY2UuYl07XHJcblx0XHRcdHZhciB2QyA9IHRoaXMudmVydGljZXNbZmFjZS5jXTtcclxuXHJcblx0XHRcdGNiLnN1YlZlY3RvcnModkMsIHZCKTtcclxuXHRcdFx0YWIuc3ViVmVjdG9ycyh2QSwgdkIpO1xyXG5cdFx0XHRjYi5jcm9zcyhhYik7XHJcblxyXG5cdFx0XHRjYi5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdGZhY2Uubm9ybWFsLmNvcHkoY2IpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Y29tcHV0ZVZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uIChhcmVhV2VpZ2h0ZWQpIHtcclxuXHJcblx0XHRpZiAoYXJlYVdlaWdodGVkID09PSB1bmRlZmluZWQpIHsgYXJlYVdlaWdodGVkID0gdHJ1ZTsgfVxyXG5cclxuXHRcdHZhciB2LCB2bCwgZiwgZmwsIGZhY2UsIHZlcnRpY2VzO1xyXG5cclxuXHRcdHZlcnRpY2VzID0gbmV3IEFycmF5KHRoaXMudmVydGljZXMubGVuZ3RoKTtcclxuXHJcblx0XHRmb3IgKHYgPSAwLCB2bCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyB2IDwgdmw7IHYrKykge1xyXG5cclxuXHRcdFx0dmVydGljZXNbdl0gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYXJlYVdlaWdodGVkKSB7XHJcblxyXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFscyB3ZWlnaHRlZCBieSB0cmlhbmdsZSBhcmVhc1xyXG5cdFx0XHQvLyBodHRwOi8vd3d3LmlxdWlsZXpsZXMub3JnL3d3dy9hcnRpY2xlcy9ub3JtYWxzL25vcm1hbHMuaHRtXHJcblxyXG5cdFx0XHR2YXIgdkEsIHZCLCB2QztcclxuXHRcdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0Zm9yIChmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmKyspIHtcclxuXHJcblx0XHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbZl07XHJcblxyXG5cdFx0XHRcdHZBID0gdGhpcy52ZXJ0aWNlc1tmYWNlLmFdO1xyXG5cdFx0XHRcdHZCID0gdGhpcy52ZXJ0aWNlc1tmYWNlLmJdO1xyXG5cdFx0XHRcdHZDID0gdGhpcy52ZXJ0aWNlc1tmYWNlLmNdO1xyXG5cclxuXHRcdFx0XHRjYi5zdWJWZWN0b3JzKHZDLCB2Qik7XHJcblx0XHRcdFx0YWIuc3ViVmVjdG9ycyh2QSwgdkIpO1xyXG5cdFx0XHRcdGNiLmNyb3NzKGFiKTtcclxuXHJcblx0XHRcdFx0dmVydGljZXNbZmFjZS5hXS5hZGQoY2IpO1xyXG5cdFx0XHRcdHZlcnRpY2VzW2ZhY2UuYl0uYWRkKGNiKTtcclxuXHRcdFx0XHR2ZXJ0aWNlc1tmYWNlLmNdLmFkZChjYik7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XHJcblxyXG5cdFx0XHRmb3IgKGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1tmXTtcclxuXHJcblx0XHRcdFx0dmVydGljZXNbZmFjZS5hXS5hZGQoZmFjZS5ub3JtYWwpO1xyXG5cdFx0XHRcdHZlcnRpY2VzW2ZhY2UuYl0uYWRkKGZhY2Uubm9ybWFsKTtcclxuXHRcdFx0XHR2ZXJ0aWNlc1tmYWNlLmNdLmFkZChmYWNlLm5vcm1hbCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodiA9IDAsIHZsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdisrKSB7XHJcblxyXG5cdFx0XHR2ZXJ0aWNlc1t2XS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmKyspIHtcclxuXHJcblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzW2ZdO1xyXG5cclxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XHJcblxyXG5cdFx0XHRpZiAodmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMpIHtcclxuXHJcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1swXS5jb3B5KHZlcnRpY2VzW2ZhY2UuYV0pO1xyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMV0uY29weSh2ZXJ0aWNlc1tmYWNlLmJdKTtcclxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWzJdLmNvcHkodmVydGljZXNbZmFjZS5jXSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWzBdID0gdmVydGljZXNbZmFjZS5hXS5jbG9uZSgpO1xyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMV0gPSB2ZXJ0aWNlc1tmYWNlLmJdLmNsb25lKCk7XHJcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1syXSA9IHZlcnRpY2VzW2ZhY2UuY10uY2xvbmUoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuZmFjZXMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjb21wdXRlRmxhdFZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZiwgZmwsIGZhY2U7XHJcblxyXG5cdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcclxuXHJcblx0XHRmb3IgKGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbZl07XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscztcclxuXHJcblx0XHRcdGlmICh2ZXJ0ZXhOb3JtYWxzLmxlbmd0aCA9PT0gMykge1xyXG5cclxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWzBdLmNvcHkoZmFjZS5ub3JtYWwpO1xyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMV0uY29weShmYWNlLm5vcm1hbCk7XHJcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1syXS5jb3B5KGZhY2Uubm9ybWFsKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMV0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbMl0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5mYWNlcy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbXB1dGVNb3JwaE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgaSwgaWwsIGYsIGZsLCBmYWNlO1xyXG5cclxuXHRcdC8vIHNhdmUgb3JpZ2luYWwgbm9ybWFsc1xyXG5cdFx0Ly8gLSBjcmVhdGUgdGVtcCB2YXJpYWJsZXMgb24gZmlyc3QgYWNjZXNzXHJcblx0XHQvLyAgIG90aGVyd2lzZSBqdXN0IGNvcHkgKGZvciBmYXN0ZXIgcmVwZWF0ZWQgY2FsbHMpXHJcblxyXG5cdFx0Zm9yIChmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmKyspIHtcclxuXHJcblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzW2ZdO1xyXG5cclxuXHRcdFx0aWYgKCFmYWNlLl9fb3JpZ2luYWxGYWNlTm9ybWFsKSB7XHJcblxyXG5cdFx0XHRcdGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KGZhY2Uubm9ybWFsKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICghZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscykgeyBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzID0gW107IH1cclxuXHJcblx0XHRcdGZvciAoaSA9IDAsIGlsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0aWYgKCFmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzW2ldKSB7XHJcblxyXG5cdFx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1tpXSA9IGZhY2UudmVydGV4Tm9ybWFsc1tpXS5jbG9uZSgpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbaV0uY29weShmYWNlLnZlcnRleE5vcm1hbHNbaV0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHVzZSB0ZW1wIGdlb21ldHJ5IHRvIGNvbXB1dGUgZmFjZSBhbmQgdmVydGV4IG5vcm1hbHMgZm9yIGVhY2ggbW9ycGhcclxuXHJcblx0XHR2YXIgdG1wR2VvID0gbmV3IEdlb21ldHJ5KCk7XHJcblx0XHR0bXBHZW8uZmFjZXMgPSB0aGlzLmZhY2VzO1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gdGhpcy5tb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0Ly8gY3JlYXRlIG9uIGZpcnN0IGFjY2Vzc1xyXG5cclxuXHRcdFx0aWYgKCF0aGlzLm1vcnBoTm9ybWFsc1tpXSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1tpXSA9IHt9O1xyXG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzW2ldLmZhY2VOb3JtYWxzID0gW107XHJcblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbaV0udmVydGV4Tm9ybWFscyA9IFtdO1xyXG5cclxuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc0ZhY2UgPSB0aGlzLm1vcnBoTm9ybWFsc1tpXS5mYWNlTm9ybWFscztcclxuXHRcdFx0XHR2YXIgZHN0Tm9ybWFsc1ZlcnRleCA9IHRoaXMubW9ycGhOb3JtYWxzW2ldLnZlcnRleE5vcm1hbHM7XHJcblxyXG5cdFx0XHRcdHZhciBmYWNlTm9ybWFsLCB2ZXJ0ZXhOb3JtYWxzO1xyXG5cclxuXHRcdFx0XHRmb3IgKGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0XHRcdGZhY2VOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0XHRcdFx0dmVydGV4Tm9ybWFscyA9IHsgYTogbmV3IFZlY3RvcjMoKSwgYjogbmV3IFZlY3RvcjMoKSwgYzogbmV3IFZlY3RvcjMoKSB9O1xyXG5cclxuXHRcdFx0XHRcdGRzdE5vcm1hbHNGYWNlLnB1c2goZmFjZU5vcm1hbCk7XHJcblx0XHRcdFx0XHRkc3ROb3JtYWxzVmVydGV4LnB1c2godmVydGV4Tm9ybWFscyk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBtb3JwaE5vcm1hbHMgPSB0aGlzLm1vcnBoTm9ybWFsc1tpXTtcclxuXHJcblx0XHRcdC8vIHNldCB2ZXJ0aWNlcyB0byBtb3JwaCB0YXJnZXRcclxuXHJcblx0XHRcdHRtcEdlby52ZXJ0aWNlcyA9IHRoaXMubW9ycGhUYXJnZXRzW2ldLnZlcnRpY2VzO1xyXG5cclxuXHRcdFx0Ly8gY29tcHV0ZSBtb3JwaCBub3JtYWxzXHJcblxyXG5cdFx0XHR0bXBHZW8uY29tcHV0ZUZhY2VOb3JtYWxzKCk7XHJcblx0XHRcdHRtcEdlby5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xyXG5cclxuXHRcdFx0Ly8gc3RvcmUgbW9ycGggbm9ybWFsc1xyXG5cclxuXHRcdFx0dmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7XHJcblxyXG5cdFx0XHRmb3IgKGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1tmXTtcclxuXHJcblx0XHRcdFx0ZmFjZU5vcm1hbCA9IG1vcnBoTm9ybWFscy5mYWNlTm9ybWFsc1tmXTtcclxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzID0gbW9ycGhOb3JtYWxzLnZlcnRleE5vcm1hbHNbZl07XHJcblxyXG5cdFx0XHRcdGZhY2VOb3JtYWwuY29weShmYWNlLm5vcm1hbCk7XHJcblxyXG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYS5jb3B5KGZhY2UudmVydGV4Tm9ybWFsc1swXSk7XHJcblx0XHRcdFx0dmVydGV4Tm9ybWFscy5iLmNvcHkoZmFjZS52ZXJ0ZXhOb3JtYWxzWzFdKTtcclxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmMuY29weShmYWNlLnZlcnRleE5vcm1hbHNbMl0pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyByZXN0b3JlIG9yaWdpbmFsIG5vcm1hbHNcclxuXHJcblx0XHRmb3IgKGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYrKykge1xyXG5cclxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbZl07XHJcblxyXG5cdFx0XHRmYWNlLm5vcm1hbCA9IGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWw7XHJcblx0XHRcdGZhY2UudmVydGV4Tm9ybWFscyA9IGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjb21wdXRlQm91bmRpbmdCb3g6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodGhpcy5ib3VuZGluZ0JveCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3guc2V0RnJvbVBvaW50cyh0aGlzLnZlcnRpY2VzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29tcHV0ZUJvdW5kaW5nU3BoZXJlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuYm91bmRpbmdTcGhlcmUgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUuc2V0RnJvbVBvaW50cyh0aGlzLnZlcnRpY2VzKTtcclxuXHJcblx0fSxcclxuXHJcblx0bWVyZ2U6IGZ1bmN0aW9uIChnZW9tZXRyeSwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKCEoZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5HZW9tZXRyeS4nLCBnZW9tZXRyeSk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG5vcm1hbE1hdHJpeCxcclxuXHRcdFx0dmVydGV4T2Zmc2V0ID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsXHJcblx0XHRcdHZlcnRpY2VzMSA9IHRoaXMudmVydGljZXMsXHJcblx0XHRcdHZlcnRpY2VzMiA9IGdlb21ldHJ5LnZlcnRpY2VzLFxyXG5cdFx0XHRmYWNlczEgPSB0aGlzLmZhY2VzLFxyXG5cdFx0XHRmYWNlczIgPSBnZW9tZXRyeS5mYWNlcyxcclxuXHRcdFx0Y29sb3JzMSA9IHRoaXMuY29sb3JzLFxyXG5cdFx0XHRjb2xvcnMyID0gZ2VvbWV0cnkuY29sb3JzO1xyXG5cclxuXHRcdGlmIChtYXRlcmlhbEluZGV4T2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWxJbmRleE9mZnNldCA9IDA7IH1cclxuXHJcblx0XHRpZiAobWF0cml4ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KG1hdHJpeCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHZlcnRpY2VzXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gdmVydGljZXMyLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciB2ZXJ0ZXggPSB2ZXJ0aWNlczJbaV07XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4Q29weSA9IHZlcnRleC5jbG9uZSgpO1xyXG5cclxuXHRcdFx0aWYgKG1hdHJpeCAhPT0gdW5kZWZpbmVkKSB7IHZlcnRleENvcHkuYXBwbHlNYXRyaXg0KG1hdHJpeCk7IH1cclxuXHJcblx0XHRcdHZlcnRpY2VzMS5wdXNoKHZlcnRleENvcHkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb2xvcnNcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBjb2xvcnMyLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdGNvbG9yczEucHVzaChjb2xvcnMyW2ldLmNsb25lKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gZmFjZXMyLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gZmFjZXMyW2ldLCBmYWNlQ29weSwgbm9ybWFsLCBjb2xvcixcclxuXHRcdFx0XHRmYWNlVmVydGV4Tm9ybWFscyA9IGZhY2UudmVydGV4Tm9ybWFscyxcclxuXHRcdFx0XHRmYWNlVmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XHJcblxyXG5cdFx0XHRmYWNlQ29weSA9IG5ldyBGYWNlMyhmYWNlLmEgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYiArIHZlcnRleE9mZnNldCwgZmFjZS5jICsgdmVydGV4T2Zmc2V0KTtcclxuXHRcdFx0ZmFjZUNvcHkubm9ybWFsLmNvcHkoZmFjZS5ub3JtYWwpO1xyXG5cclxuXHRcdFx0aWYgKG5vcm1hbE1hdHJpeCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGZhY2VDb3B5Lm5vcm1hbC5hcHBseU1hdHJpeDMobm9ybWFsTWF0cml4KS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAodmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcclxuXHJcblx0XHRcdFx0bm9ybWFsID0gZmFjZVZlcnRleE5vcm1hbHNbal0uY2xvbmUoKTtcclxuXHJcblx0XHRcdFx0aWYgKG5vcm1hbE1hdHJpeCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0bm9ybWFsLmFwcGx5TWF0cml4Myhub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGZhY2VDb3B5LnZlcnRleE5vcm1hbHMucHVzaChub3JtYWwpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZmFjZUNvcHkuY29sb3IuY29weShmYWNlLmNvbG9yKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhDb2xvcnMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRjb2xvciA9IGZhY2VWZXJ0ZXhDb2xvcnNbal07XHJcblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Q29sb3JzLnB1c2goY29sb3IuY2xvbmUoKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmYWNlQ29weS5tYXRlcmlhbEluZGV4ID0gZmFjZS5tYXRlcmlhbEluZGV4ICsgbWF0ZXJpYWxJbmRleE9mZnNldDtcclxuXHJcblx0XHRcdGZhY2VzMS5wdXNoKGZhY2VDb3B5KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdXZzXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZmFjZVZlcnRleFV2czIgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzW2ldO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuZmFjZVZlcnRleFV2c1tpXSA9PT0gdW5kZWZpbmVkKSB7IHRoaXMuZmFjZVZlcnRleFV2c1tpXSA9IFtdOyB9XHJcblxyXG5cdFx0XHRmb3IgKHZhciBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzMi5sZW5ndGg7IGogPCBqbDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdHZhciB1dnMyID0gZmFjZVZlcnRleFV2czJbal0sIHV2c0NvcHkgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgayA9IDAsIGtsID0gdXZzMi5sZW5ndGg7IGsgPCBrbDsgaysrKSB7XHJcblxyXG5cdFx0XHRcdFx0dXZzQ29weS5wdXNoKHV2czJba10uY2xvbmUoKSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzW2ldLnB1c2godXZzQ29weSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRtZXJnZU1lc2g6IGZ1bmN0aW9uIChtZXNoKSB7XHJcblxyXG5cdFx0aWYgKCEobWVzaCAmJiBtZXNoLmlzTWVzaCkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlTWVzaCgpOiBtZXNoIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5NZXNoLicsIG1lc2gpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtZXNoLm1hdHJpeEF1dG9VcGRhdGUpIHsgbWVzaC51cGRhdGVNYXRyaXgoKTsgfVxyXG5cclxuXHRcdHRoaXMubWVyZ2UobWVzaC5nZW9tZXRyeSwgbWVzaC5tYXRyaXgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvKlxyXG5cdCAqIENoZWNrcyBmb3IgZHVwbGljYXRlIHZlcnRpY2VzIHdpdGggaGFzaG1hcC5cclxuXHQgKiBEdXBsaWNhdGVkIHZlcnRpY2VzIGFyZSByZW1vdmVkXHJcblx0ICogYW5kIGZhY2VzJyB2ZXJ0aWNlcyBhcmUgdXBkYXRlZC5cclxuXHQgKi9cclxuXHJcblx0bWVyZ2VWZXJ0aWNlczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB2ZXJ0aWNlc01hcCA9IHt9OyAvLyBIYXNobWFwIGZvciBsb29raW5nIHVwIHZlcnRpY2VzIGJ5IHBvc2l0aW9uIGNvb3JkaW5hdGVzIChhbmQgbWFraW5nIHN1cmUgdGhleSBhcmUgdW5pcXVlKVxyXG5cdFx0dmFyIHVuaXF1ZSA9IFtdLCBjaGFuZ2VzID0gW107XHJcblxyXG5cdFx0dmFyIHYsIGtleTtcclxuXHRcdHZhciBwcmVjaXNpb25Qb2ludHMgPSA0OyAvLyBudW1iZXIgb2YgZGVjaW1hbCBwb2ludHMsIGUuZy4gNCBmb3IgZXBzaWxvbiBvZiAwLjAwMDFcclxuXHRcdHZhciBwcmVjaXNpb24gPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uUG9pbnRzKTtcclxuXHRcdHZhciBpLCBpbCwgZmFjZTtcclxuXHRcdHZhciBpbmRpY2VzLCBqLCBqbDtcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBpbCA9IHRoaXMudmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0diA9IHRoaXMudmVydGljZXNbaV07XHJcblx0XHRcdGtleSA9IE1hdGgucm91bmQodi54ICogcHJlY2lzaW9uKSArICdfJyArIE1hdGgucm91bmQodi55ICogcHJlY2lzaW9uKSArICdfJyArIE1hdGgucm91bmQodi56ICogcHJlY2lzaW9uKTtcclxuXHJcblx0XHRcdGlmICh2ZXJ0aWNlc01hcFtrZXldID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0dmVydGljZXNNYXBba2V5XSA9IGk7XHJcblx0XHRcdFx0dW5pcXVlLnB1c2godGhpcy52ZXJ0aWNlc1tpXSk7XHJcblx0XHRcdFx0Y2hhbmdlc1tpXSA9IHVuaXF1ZS5sZW5ndGggLSAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRHVwbGljYXRlIHZlcnRleCBmb3VuZC4gJywgaSwgJyBjb3VsZCBiZSB1c2luZyAnLCB2ZXJ0aWNlc01hcFtrZXldKTtcclxuXHRcdFx0XHRjaGFuZ2VzW2ldID0gY2hhbmdlc1t2ZXJ0aWNlc01hcFtrZXldXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vIGlmIGZhY2VzIGFyZSBjb21wbGV0ZWx5IGRlZ2VuZXJhdGUgYWZ0ZXIgbWVyZ2luZyB2ZXJ0aWNlcywgd2VcclxuXHRcdC8vIGhhdmUgdG8gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZ2VvbWV0cnkuXHJcblx0XHR2YXIgZmFjZUluZGljZXNUb1JlbW92ZSA9IFtdO1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1tpXTtcclxuXHJcblx0XHRcdGZhY2UuYSA9IGNoYW5nZXNbZmFjZS5hXTtcclxuXHRcdFx0ZmFjZS5iID0gY2hhbmdlc1tmYWNlLmJdO1xyXG5cdFx0XHRmYWNlLmMgPSBjaGFuZ2VzW2ZhY2UuY107XHJcblxyXG5cdFx0XHRpbmRpY2VzID0gW2ZhY2UuYSwgZmFjZS5iLCBmYWNlLmNdO1xyXG5cclxuXHRcdFx0Ly8gaWYgYW55IGR1cGxpY2F0ZSB2ZXJ0aWNlcyBhcmUgZm91bmQgaW4gYSBGYWNlM1xyXG5cdFx0XHQvLyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGUgZmFjZSBhcyBub3RoaW5nIGNhbiBiZSBzYXZlZFxyXG5cdFx0XHRmb3IgKHZhciBuID0gMDsgbiA8IDM7IG4rKykge1xyXG5cclxuXHRcdFx0XHRpZiAoaW5kaWNlc1tuXSA9PT0gaW5kaWNlc1sobiArIDEpICUgM10pIHtcclxuXHJcblx0XHRcdFx0XHRmYWNlSW5kaWNlc1RvUmVtb3ZlLnB1c2goaSk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGkgPSBmYWNlSW5kaWNlc1RvUmVtb3ZlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcblxyXG5cdFx0XHR2YXIgaWR4ID0gZmFjZUluZGljZXNUb1JlbW92ZVtpXTtcclxuXHJcblx0XHRcdHRoaXMuZmFjZXMuc3BsaWNlKGlkeCwgMSk7XHJcblxyXG5cdFx0XHRmb3IgKGogPSAwLCBqbCA9IHRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1tqXS5zcGxpY2UoaWR4LCAxKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVXNlIHVuaXF1ZSBzZXQgb2YgdmVydGljZXNcclxuXHJcblx0XHR2YXIgZGlmZiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gdW5pcXVlLmxlbmd0aDtcclxuXHRcdHRoaXMudmVydGljZXMgPSB1bmlxdWU7XHJcblx0XHRyZXR1cm4gZGlmZjtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKHBvaW50cykge1xyXG5cclxuXHRcdHRoaXMudmVydGljZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1tpXTtcclxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBWZWN0b3IzKHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c29ydEZhY2VzQnlNYXRlcmlhbEluZGV4OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGZhY2VzID0gdGhpcy5mYWNlcztcclxuXHRcdHZhciBsZW5ndGggPSBmYWNlcy5sZW5ndGg7XHJcblxyXG5cdFx0Ly8gdGFnIGZhY2VzXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0ZmFjZXNbaV0uX2lkID0gaTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc29ydCBmYWNlc1xyXG5cclxuXHRcdGZ1bmN0aW9uIG1hdGVyaWFsSW5kZXhTb3J0KGEsIGIpIHtcclxuXHJcblx0XHRcdHJldHVybiBhLm1hdGVyaWFsSW5kZXggLSBiLm1hdGVyaWFsSW5kZXg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZhY2VzLnNvcnQobWF0ZXJpYWxJbmRleFNvcnQpO1xyXG5cclxuXHRcdC8vIHNvcnQgdXZzXHJcblxyXG5cdFx0dmFyIHV2czEgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbMF07XHJcblx0XHR2YXIgdXZzMiA9IHRoaXMuZmFjZVZlcnRleFV2c1sxXTtcclxuXHJcblx0XHR2YXIgbmV3VXZzMSwgbmV3VXZzMjtcclxuXHJcblx0XHRpZiAodXZzMSAmJiB1dnMxLmxlbmd0aCA9PT0gbGVuZ3RoKSB7IG5ld1V2czEgPSBbXTsgfVxyXG5cdFx0aWYgKHV2czIgJiYgdXZzMi5sZW5ndGggPT09IGxlbmd0aCkgeyBuZXdVdnMyID0gW107IH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgaWQgPSBmYWNlc1tpXS5faWQ7XHJcblxyXG5cdFx0XHRpZiAobmV3VXZzMSkgeyBuZXdVdnMxLnB1c2godXZzMVtpZF0pOyB9XHJcblx0XHRcdGlmIChuZXdVdnMyKSB7IG5ld1V2czIucHVzaCh1dnMyW2lkXSk7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG5ld1V2czEpIHsgdGhpcy5mYWNlVmVydGV4VXZzWzBdID0gbmV3VXZzMTsgfVxyXG5cdFx0aWYgKG5ld1V2czIpIHsgdGhpcy5mYWNlVmVydGV4VXZzWzFdID0gbmV3VXZzMjsgfVxyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IHtcclxuXHRcdFx0bWV0YWRhdGE6IHtcclxuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXHJcblx0XHRcdFx0dHlwZTogJ0dlb21ldHJ5JyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdHZW9tZXRyeS50b0pTT04nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc3RhbmRhcmQgR2VvbWV0cnkgc2VyaWFsaXphdGlvblxyXG5cclxuXHRcdGRhdGEudXVpZCA9IHRoaXMudXVpZDtcclxuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcclxuXHRcdGlmICh0aGlzLm5hbWUgIT09ICcnKSB7IGRhdGEubmFtZSA9IHRoaXMubmFtZTsgfVxyXG5cclxuXHRcdGlmICh0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gcGFyYW1ldGVycykge1xyXG5cclxuXHRcdFx0XHRpZiAocGFyYW1ldGVyc1trZXldICE9PSB1bmRlZmluZWQpIHsgZGF0YVtrZXldID0gcGFyYW1ldGVyc1trZXldOyB9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHZlcnRpY2VzID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1tpXTtcclxuXHRcdFx0dmVydGljZXMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGZhY2VzID0gW107XHJcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdFx0dmFyIG5vcm1hbHNIYXNoID0ge307XHJcblx0XHR2YXIgY29sb3JzID0gW107XHJcblx0XHR2YXIgY29sb3JzSGFzaCA9IHt9O1xyXG5cdFx0dmFyIHV2cyA9IFtdO1xyXG5cdFx0dmFyIHV2c0hhc2ggPSB7fTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZmFjZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1tpXTtcclxuXHJcblx0XHRcdHZhciBoYXNNYXRlcmlhbCA9IHRydWU7XHJcblx0XHRcdHZhciBoYXNGYWNlVXYgPSBmYWxzZTsgLy8gZGVwcmVjYXRlZFxyXG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gdGhpcy5mYWNlVmVydGV4VXZzWzBdW2ldICE9PSB1bmRlZmluZWQ7XHJcblx0XHRcdHZhciBoYXNGYWNlTm9ybWFsID0gZmFjZS5ub3JtYWwubGVuZ3RoKCkgPiAwO1xyXG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleE5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGggPiAwO1xyXG5cdFx0XHR2YXIgaGFzRmFjZUNvbG9yID0gZmFjZS5jb2xvci5yICE9PSAxIHx8IGZhY2UuY29sb3IuZyAhPT0gMSB8fCBmYWNlLmNvbG9yLmIgIT09IDE7XHJcblx0XHRcdHZhciBoYXNGYWNlVmVydGV4Q29sb3IgPSBmYWNlLnZlcnRleENvbG9ycy5sZW5ndGggPiAwO1xyXG5cclxuXHRcdFx0dmFyIGZhY2VUeXBlID0gMDtcclxuXHJcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KGZhY2VUeXBlLCAwLCAwKTsgLy8gaXNRdWFkXHJcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KGZhY2VUeXBlLCAxLCBoYXNNYXRlcmlhbCk7XHJcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KGZhY2VUeXBlLCAyLCBoYXNGYWNlVXYpO1xyXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdChmYWNlVHlwZSwgMywgaGFzRmFjZVZlcnRleFV2KTtcclxuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoZmFjZVR5cGUsIDQsIGhhc0ZhY2VOb3JtYWwpO1xyXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdChmYWNlVHlwZSwgNSwgaGFzRmFjZVZlcnRleE5vcm1hbCk7XHJcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KGZhY2VUeXBlLCA2LCBoYXNGYWNlQ29sb3IpO1xyXG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdChmYWNlVHlwZSwgNywgaGFzRmFjZVZlcnRleENvbG9yKTtcclxuXHJcblx0XHRcdGZhY2VzLnB1c2goZmFjZVR5cGUpO1xyXG5cdFx0XHRmYWNlcy5wdXNoKGZhY2UuYSwgZmFjZS5iLCBmYWNlLmMpO1xyXG5cdFx0XHRmYWNlcy5wdXNoKGZhY2UubWF0ZXJpYWxJbmRleCk7XHJcblxyXG5cdFx0XHRpZiAoaGFzRmFjZVZlcnRleFV2KSB7XHJcblxyXG5cdFx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gdGhpcy5mYWNlVmVydGV4VXZzWzBdW2ldO1xyXG5cclxuXHRcdFx0XHRmYWNlcy5wdXNoKFxyXG5cdFx0XHRcdFx0Z2V0VXZJbmRleChmYWNlVmVydGV4VXZzWzBdKSxcclxuXHRcdFx0XHRcdGdldFV2SW5kZXgoZmFjZVZlcnRleFV2c1sxXSksXHJcblx0XHRcdFx0XHRnZXRVdkluZGV4KGZhY2VWZXJ0ZXhVdnNbMl0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoYXNGYWNlTm9ybWFsKSB7XHJcblxyXG5cdFx0XHRcdGZhY2VzLnB1c2goZ2V0Tm9ybWFsSW5kZXgoZmFjZS5ub3JtYWwpKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoYXNGYWNlVmVydGV4Tm9ybWFsKSB7XHJcblxyXG5cdFx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xyXG5cclxuXHRcdFx0XHRmYWNlcy5wdXNoKFxyXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgodmVydGV4Tm9ybWFsc1swXSksXHJcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCh2ZXJ0ZXhOb3JtYWxzWzFdKSxcclxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KHZlcnRleE5vcm1hbHNbMl0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoYXNGYWNlQ29sb3IpIHtcclxuXHJcblx0XHRcdFx0ZmFjZXMucHVzaChnZXRDb2xvckluZGV4KGZhY2UuY29sb3IpKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChoYXNGYWNlVmVydGV4Q29sb3IpIHtcclxuXHJcblx0XHRcdFx0dmFyIHZlcnRleENvbG9ycyA9IGZhY2UudmVydGV4Q29sb3JzO1xyXG5cclxuXHRcdFx0XHRmYWNlcy5wdXNoKFxyXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCh2ZXJ0ZXhDb2xvcnNbMF0pLFxyXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCh2ZXJ0ZXhDb2xvcnNbMV0pLFxyXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCh2ZXJ0ZXhDb2xvcnNbMl0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gc2V0Qml0KHZhbHVlLCBwb3NpdGlvbiwgZW5hYmxlZCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGVuYWJsZWQgPyB2YWx1ZSB8ICgxIDw8IHBvc2l0aW9uKSA6IHZhbHVlICYgKH4oMSA8PCBwb3NpdGlvbikpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXROb3JtYWxJbmRleChub3JtYWwpIHtcclxuXHJcblx0XHRcdHZhciBoYXNoID0gbm9ybWFsLngudG9TdHJpbmcoKSArIG5vcm1hbC55LnRvU3RyaW5nKCkgKyBub3JtYWwuei50b1N0cmluZygpO1xyXG5cclxuXHRcdFx0aWYgKG5vcm1hbHNIYXNoW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIG5vcm1hbHNIYXNoW2hhc2hdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bm9ybWFsc0hhc2hbaGFzaF0gPSBub3JtYWxzLmxlbmd0aCAvIDM7XHJcblx0XHRcdG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcblx0XHRcdHJldHVybiBub3JtYWxzSGFzaFtoYXNoXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0Q29sb3JJbmRleChjb2xvcikge1xyXG5cclxuXHRcdFx0dmFyIGhhc2ggPSBjb2xvci5yLnRvU3RyaW5nKCkgKyBjb2xvci5nLnRvU3RyaW5nKCkgKyBjb2xvci5iLnRvU3RyaW5nKCk7XHJcblxyXG5cdFx0XHRpZiAoY29sb3JzSGFzaFtoYXNoXSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBjb2xvcnNIYXNoW2hhc2hdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29sb3JzSGFzaFtoYXNoXSA9IGNvbG9ycy5sZW5ndGg7XHJcblx0XHRcdGNvbG9ycy5wdXNoKGNvbG9yLmdldEhleCgpKTtcclxuXHJcblx0XHRcdHJldHVybiBjb2xvcnNIYXNoW2hhc2hdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRVdkluZGV4KHV2KSB7XHJcblxyXG5cdFx0XHR2YXIgaGFzaCA9IHV2LngudG9TdHJpbmcoKSArIHV2LnkudG9TdHJpbmcoKTtcclxuXHJcblx0XHRcdGlmICh1dnNIYXNoW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHV2c0hhc2hbaGFzaF07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR1dnNIYXNoW2hhc2hdID0gdXZzLmxlbmd0aCAvIDI7XHJcblx0XHRcdHV2cy5wdXNoKHV2LngsIHV2LnkpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHV2c0hhc2hbaGFzaF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGRhdGEuZGF0YSA9IHt9O1xyXG5cclxuXHRcdGRhdGEuZGF0YS52ZXJ0aWNlcyA9IHZlcnRpY2VzO1xyXG5cdFx0ZGF0YS5kYXRhLm5vcm1hbHMgPSBub3JtYWxzO1xyXG5cdFx0aWYgKGNvbG9ycy5sZW5ndGggPiAwKSB7IGRhdGEuZGF0YS5jb2xvcnMgPSBjb2xvcnM7IH1cclxuXHRcdGlmICh1dnMubGVuZ3RoID4gMCkgeyBkYXRhLmRhdGEudXZzID0gW3V2c107IH0gLy8gdGVtcG9yYWwgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG5cdFx0ZGF0YS5kYXRhLmZhY2VzID0gZmFjZXM7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0LypcclxuXHRcdCAvLyBIYW5kbGUgcHJpbWl0aXZlc1xyXG5cclxuXHRcdCB2YXIgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycztcclxuXHJcblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XHJcblxyXG5cdFx0IHZhciB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHQgZm9yICggdmFyIGtleSBpbiBwYXJhbWV0ZXJzICkge1xyXG5cclxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcclxuXHJcblx0XHQgfVxyXG5cclxuXHRcdCB2YXIgZ2VvbWV0cnkgPSBPYmplY3QuY3JlYXRlKCB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSApO1xyXG5cdFx0IHRoaXMuY29uc3RydWN0b3IuYXBwbHkoIGdlb21ldHJ5LCB2YWx1ZXMgKTtcclxuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XHJcblxyXG5cdFx0IH1cclxuXHJcblx0XHQgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xyXG5cdFx0ICovXHJcblxyXG5cdFx0cmV0dXJuIG5ldyBHZW9tZXRyeSgpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHR2YXIgaSwgaWwsIGosIGpsLCBrLCBrbDtcclxuXHJcblx0XHQvLyByZXNldFxyXG5cclxuXHRcdHRoaXMudmVydGljZXMgPSBbXTtcclxuXHRcdHRoaXMuY29sb3JzID0gW107XHJcblx0XHR0aGlzLmZhY2VzID0gW107XHJcblx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnMgPSBbW11dO1xyXG5cdFx0dGhpcy5tb3JwaFRhcmdldHMgPSBbXTtcclxuXHRcdHRoaXMubW9ycGhOb3JtYWxzID0gW107XHJcblx0XHR0aGlzLnNraW5XZWlnaHRzID0gW107XHJcblx0XHR0aGlzLnNraW5JbmRpY2VzID0gW107XHJcblx0XHR0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XHJcblxyXG5cdFx0Ly8gbmFtZVxyXG5cclxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xyXG5cclxuXHRcdC8vIHZlcnRpY2VzXHJcblxyXG5cdFx0dmFyIHZlcnRpY2VzID0gc291cmNlLnZlcnRpY2VzO1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy52ZXJ0aWNlcy5wdXNoKHZlcnRpY2VzW2ldLmNsb25lKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb2xvcnNcclxuXHJcblx0XHR2YXIgY29sb3JzID0gc291cmNlLmNvbG9ycztcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBpbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvbG9ycy5wdXNoKGNvbG9yc1tpXS5jbG9uZSgpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZmFjZXNcclxuXHJcblx0XHR2YXIgZmFjZXMgPSBzb3VyY2UuZmFjZXM7XHJcblxyXG5cdFx0Zm9yIChpID0gMCwgaWwgPSBmYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmZhY2VzLnB1c2goZmFjZXNbaV0uY2xvbmUoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGZhY2UgdmVydGV4IHV2c1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gc291cmNlLmZhY2VWZXJ0ZXhVdnMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBzb3VyY2UuZmFjZVZlcnRleFV2c1tpXTtcclxuXHJcblx0XHRcdGlmICh0aGlzLmZhY2VWZXJ0ZXhVdnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbaV0gPSBbXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAoaiA9IDAsIGpsID0gZmFjZVZlcnRleFV2cy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdHZhciB1dnMgPSBmYWNlVmVydGV4VXZzW2pdLCB1dnNDb3B5ID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAoayA9IDAsIGtsID0gdXZzLmxlbmd0aDsgayA8IGtsOyBrKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgdXYgPSB1dnNba107XHJcblxyXG5cdFx0XHRcdFx0dXZzQ29weS5wdXNoKHV2LmNsb25lKCkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1tpXS5wdXNoKHV2c0NvcHkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBtb3JwaCB0YXJnZXRzXHJcblxyXG5cdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XHJcblxyXG5cdFx0Zm9yIChpID0gMCwgaWwgPSBtb3JwaFRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0ge307XHJcblx0XHRcdG1vcnBoVGFyZ2V0Lm5hbWUgPSBtb3JwaFRhcmdldHNbaV0ubmFtZTtcclxuXHJcblx0XHRcdC8vIHZlcnRpY2VzXHJcblxyXG5cdFx0XHRpZiAobW9ycGhUYXJnZXRzW2ldLnZlcnRpY2VzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0bW9ycGhUYXJnZXQudmVydGljZXMgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yIChqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbaV0udmVydGljZXMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzLnB1c2gobW9ycGhUYXJnZXRzW2ldLnZlcnRpY2VzW2pdLmNsb25lKCkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBub3JtYWxzXHJcblxyXG5cdFx0XHRpZiAobW9ycGhUYXJnZXRzW2ldLm5vcm1hbHMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRtb3JwaFRhcmdldC5ub3JtYWxzID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAoaiA9IDAsIGpsID0gbW9ycGhUYXJnZXRzW2ldLm5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMucHVzaChtb3JwaFRhcmdldHNbaV0ubm9ybWFsc1tqXS5jbG9uZSgpKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucHVzaChtb3JwaFRhcmdldCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIG1vcnBoIG5vcm1hbHNcclxuXHJcblx0XHR2YXIgbW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBpbCA9IG1vcnBoTm9ybWFscy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgbW9ycGhOb3JtYWwgPSB7fTtcclxuXHJcblx0XHRcdC8vIHZlcnRleCBub3JtYWxzXHJcblxyXG5cdFx0XHRpZiAobW9ycGhOb3JtYWxzW2ldLnZlcnRleE5vcm1hbHMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRtb3JwaE5vcm1hbC52ZXJ0ZXhOb3JtYWxzID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAoaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzW2ldLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdHZhciBzcmNWZXJ0ZXhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbaV0udmVydGV4Tm9ybWFsc1tqXTtcclxuXHRcdFx0XHRcdHZhciBkZXN0VmVydGV4Tm9ybWFsID0ge307XHJcblxyXG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5hID0gc3JjVmVydGV4Tm9ybWFsLmEuY2xvbmUoKTtcclxuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYiA9IHNyY1ZlcnRleE5vcm1hbC5iLmNsb25lKCk7XHJcblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmMgPSBzcmNWZXJ0ZXhOb3JtYWwuYy5jbG9uZSgpO1xyXG5cclxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLnZlcnRleE5vcm1hbHMucHVzaChkZXN0VmVydGV4Tm9ybWFsKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZmFjZSBub3JtYWxzXHJcblxyXG5cdFx0XHRpZiAobW9ycGhOb3JtYWxzW2ldLmZhY2VOb3JtYWxzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0bW9ycGhOb3JtYWwuZmFjZU5vcm1hbHMgPSBbXTtcclxuXHJcblx0XHRcdFx0Zm9yIChqID0gMCwgamwgPSBtb3JwaE5vcm1hbHNbaV0uZmFjZU5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzLnB1c2gobW9ycGhOb3JtYWxzW2ldLmZhY2VOb3JtYWxzW2pdLmNsb25lKCkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLm1vcnBoTm9ybWFscy5wdXNoKG1vcnBoTm9ybWFsKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2tpbiB3ZWlnaHRzXHJcblxyXG5cdFx0dmFyIHNraW5XZWlnaHRzID0gc291cmNlLnNraW5XZWlnaHRzO1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGlsID0gc2tpbldlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKHNraW5XZWlnaHRzW2ldLmNsb25lKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBza2luIGluZGljZXNcclxuXHJcblx0XHR2YXIgc2tpbkluZGljZXMgPSBzb3VyY2Uuc2tpbkluZGljZXM7XHJcblxyXG5cdFx0Zm9yIChpID0gMCwgaWwgPSBza2luSW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNraW5JbmRpY2VzLnB1c2goc2tpbkluZGljZXNbaV0uY2xvbmUoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGxpbmUgZGlzdGFuY2VzXHJcblxyXG5cdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBzb3VyY2UubGluZURpc3RhbmNlcztcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBpbCA9IGxpbmVEaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5saW5lRGlzdGFuY2VzLnB1c2gobGluZURpc3RhbmNlc1tpXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGJvdW5kaW5nIGJveFxyXG5cclxuXHRcdHZhciBib3VuZGluZ0JveCA9IHNvdXJjZS5ib3VuZGluZ0JveDtcclxuXHJcblx0XHRpZiAoYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBib3VuZGluZyBzcGhlcmVcclxuXHJcblx0XHR2YXIgYm91bmRpbmdTcGhlcmUgPSBzb3VyY2UuYm91bmRpbmdTcGhlcmU7XHJcblxyXG5cdFx0aWYgKGJvdW5kaW5nU3BoZXJlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdTcGhlcmUuY2xvbmUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gdXBkYXRlIGZsYWdzXHJcblxyXG5cdFx0dGhpcy5lbGVtZW50c05lZWRVcGRhdGUgPSBzb3VyY2UuZWxlbWVudHNOZWVkVXBkYXRlO1xyXG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBzb3VyY2UudmVydGljZXNOZWVkVXBkYXRlO1xyXG5cdFx0dGhpcy51dnNOZWVkVXBkYXRlID0gc291cmNlLnV2c05lZWRVcGRhdGU7XHJcblx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gc291cmNlLm5vcm1hbHNOZWVkVXBkYXRlO1xyXG5cdFx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gc291cmNlLmNvbG9yc05lZWRVcGRhdGU7XHJcblx0XHR0aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlID0gc291cmNlLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlO1xyXG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gc291cmNlLmdyb3Vwc05lZWRVcGRhdGU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnZGlzcG9zZScgfSk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuLy8gQm94R2VvbWV0cnlcclxuXHJcbnZhciBCb3hHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEdlb21ldHJ5KSB7XHJcblx0ZnVuY3Rpb24gQm94R2VvbWV0cnkod2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzKSB7XHJcblxyXG5cdFx0R2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQm94R2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcclxuXHRcdFx0ZGVwdGg6IGRlcHRoLFxyXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxyXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXHJcblx0XHRcdGRlcHRoU2VnbWVudHM6IGRlcHRoU2VnbWVudHNcclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IEJveEJ1ZmZlckdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cykpO1xyXG5cdFx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKEdlb21ldHJ5KSBCb3hHZW9tZXRyeS5fX3Byb3RvX18gPSBHZW9tZXRyeTtcclxuXHRCb3hHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5ICYmIEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblx0Qm94R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94R2VvbWV0cnk7XHJcblxyXG5cdHJldHVybiBCb3hHZW9tZXRyeTtcclxufShHZW9tZXRyeSkpO1xyXG5cclxuLy8gQm94QnVmZmVyR2VvbWV0cnlcclxuXHJcbnZhciBCb3hCdWZmZXJHZW9tZXRyeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEJ1ZmZlckdlb21ldHJ5KSB7XHJcblx0ZnVuY3Rpb24gQm94QnVmZmVyR2VvbWV0cnkod2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzKSB7XHJcblxyXG5cdFx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0XHR0aGlzLnR5cGUgPSAnQm94QnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHRcdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcclxuXHRcdFx0ZGVwdGg6IGRlcHRoLFxyXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxyXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXHJcblx0XHRcdGRlcHRoU2VnbWVudHM6IGRlcHRoU2VnbWVudHNcclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR3aWR0aCA9IHdpZHRoIHx8IDE7XHJcblx0XHRoZWlnaHQgPSBoZWlnaHQgfHwgMTtcclxuXHRcdGRlcHRoID0gZGVwdGggfHwgMTtcclxuXHJcblx0XHQvLyBzZWdtZW50c1xyXG5cclxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKHdpZHRoU2VnbWVudHMpIHx8IDE7XHJcblx0XHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoaGVpZ2h0U2VnbWVudHMpIHx8IDE7XHJcblx0XHRkZXB0aFNlZ21lbnRzID0gTWF0aC5mbG9vcihkZXB0aFNlZ21lbnRzKSB8fCAxO1xyXG5cclxuXHRcdC8vIGJ1ZmZlcnNcclxuXHJcblx0XHR2YXIgaW5kaWNlcyA9IFtdO1xyXG5cdFx0dmFyIHZlcnRpY2VzID0gW107XHJcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdFx0dmFyIHV2cyA9IFtdO1xyXG5cclxuXHRcdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0XHR2YXIgbnVtYmVyT2ZWZXJ0aWNlcyA9IDA7XHJcblx0XHR2YXIgZ3JvdXBTdGFydCA9IDA7XHJcblxyXG5cdFx0Ly8gYnVpbGQgZWFjaCBzaWRlIG9mIHRoZSBib3ggZ2VvbWV0cnlcclxuXHJcblx0XHRidWlsZFBsYW5lKCd6JywgJ3knLCAneCcsIC0gMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aCwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDApOyAvLyBweFxyXG5cdFx0YnVpbGRQbGFuZSgneicsICd5JywgJ3gnLCAxLCAtIDEsIGRlcHRoLCBoZWlnaHQsIC0gd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAxKTsgLy8gbnhcclxuXHRcdGJ1aWxkUGxhbmUoJ3gnLCAneicsICd5JywgMSwgMSwgd2lkdGgsIGRlcHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDIpOyAvLyBweVxyXG5cdFx0YnVpbGRQbGFuZSgneCcsICd6JywgJ3knLCAxLCAtIDEsIHdpZHRoLCBkZXB0aCwgLSBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGRlcHRoU2VnbWVudHMsIDMpOyAvLyBueVxyXG5cdFx0YnVpbGRQbGFuZSgneCcsICd5JywgJ3onLCAxLCAtIDEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNCk7IC8vIHB6XHJcblx0XHRidWlsZFBsYW5lKCd4JywgJ3knLCAneicsIC0gMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCAtIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgNSk7IC8vIG56XHJcblxyXG5cdFx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0XHR0aGlzLnNldEluZGV4KGluZGljZXMpO1xyXG5cdFx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHRcdHRoaXMuYWRkQXR0cmlidXRlKCdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShub3JtYWxzLCAzKSk7XHJcblx0XHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcclxuXHJcblx0XHRmdW5jdGlvbiBidWlsZFBsYW5lKHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFksIG1hdGVyaWFsSW5kZXgpIHtcclxuXHJcblx0XHRcdHZhciBzZWdtZW50V2lkdGggPSB3aWR0aCAvIGdyaWRYO1xyXG5cdFx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xyXG5cclxuXHRcdFx0dmFyIHdpZHRoSGFsZiA9IHdpZHRoIC8gMjtcclxuXHRcdFx0dmFyIGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyO1xyXG5cdFx0XHR2YXIgZGVwdGhIYWxmID0gZGVwdGggLyAyO1xyXG5cclxuXHRcdFx0dmFyIGdyaWRYMSA9IGdyaWRYICsgMTtcclxuXHRcdFx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcclxuXHJcblx0XHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcclxuXHRcdFx0dmFyIGdyb3VwQ291bnQgPSAwO1xyXG5cclxuXHRcdFx0dmFyIGl4LCBpeTtcclxuXHJcblx0XHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdFx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRcdFx0Zm9yIChpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSsrKSB7XHJcblxyXG5cdFx0XHRcdHZhciB5ID0gaXkgKiBzZWdtZW50SGVpZ2h0IC0gaGVpZ2h0SGFsZjtcclxuXHJcblx0XHRcdFx0Zm9yIChpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCsrKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHggPSBpeCAqIHNlZ21lbnRXaWR0aCAtIHdpZHRoSGFsZjtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudFxyXG5cclxuXHRcdFx0XHRcdHZlY3Rvclt1XSA9IHggKiB1ZGlyO1xyXG5cdFx0XHRcdFx0dmVjdG9yW3ZdID0geSAqIHZkaXI7XHJcblx0XHRcdFx0XHR2ZWN0b3Jbd10gPSBkZXB0aEhhbGY7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbm93IGFwcGx5IHZlY3RvciB0byB2ZXJ0ZXggYnVmZmVyXHJcblxyXG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCh2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56KTtcclxuXHJcblx0XHRcdFx0XHQvLyBzZXQgdmFsdWVzIHRvIGNvcnJlY3QgdmVjdG9yIGNvbXBvbmVudFxyXG5cclxuXHRcdFx0XHRcdHZlY3Rvclt1XSA9IDA7XHJcblx0XHRcdFx0XHR2ZWN0b3Jbdl0gPSAwO1xyXG5cdFx0XHRcdFx0dmVjdG9yW3ddID0gZGVwdGggPiAwID8gMSA6IC0gMTtcclxuXHJcblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcclxuXHJcblx0XHRcdFx0XHRub3JtYWxzLnB1c2godmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3Iueik7XHJcblxyXG5cdFx0XHRcdFx0Ly8gdXZzXHJcblxyXG5cdFx0XHRcdFx0dXZzLnB1c2goaXggLyBncmlkWCk7XHJcblx0XHRcdFx0XHR1dnMucHVzaCgxIC0gKGl5IC8gZ3JpZFkpKTtcclxuXHJcblx0XHRcdFx0XHQvLyBjb3VudGVyc1xyXG5cclxuXHRcdFx0XHRcdHZlcnRleENvdW50ZXIgKz0gMTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdFx0Ly8gMS4geW91IG5lZWQgdGhyZWUgaW5kaWNlcyB0byBkcmF3IGEgc2luZ2xlIGZhY2VcclxuXHRcdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcclxuXHRcdFx0Ly8gMy4gc28gd2UgbmVlZCB0byBnZW5lcmF0ZSBzaXggKDIqMykgaW5kaWNlcyBwZXIgc2VnbWVudFxyXG5cclxuXHRcdFx0Zm9yIChpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5KyspIHtcclxuXHJcblx0XHRcdFx0Zm9yIChpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4KyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgYSA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqIGl5O1xyXG5cdFx0XHRcdFx0dmFyIGIgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiAoaXkgKyAxKTtcclxuXHRcdFx0XHRcdHZhciBjID0gbnVtYmVyT2ZWZXJ0aWNlcyArIChpeCArIDEpICsgZ3JpZFgxICogKGl5ICsgMSk7XHJcblx0XHRcdFx0XHR2YXIgZCA9IG51bWJlck9mVmVydGljZXMgKyAoaXggKyAxKSArIGdyaWRYMSAqIGl5O1xyXG5cclxuXHRcdFx0XHRcdC8vIGZhY2VzXHJcblxyXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG5cdFx0XHRcdFx0aW5kaWNlcy5wdXNoKGIsIGMsIGQpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGluY3JlYXNlIGNvdW50ZXJcclxuXHJcblx0XHRcdFx0XHRncm91cENvdW50ICs9IDY7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XHJcblxyXG5cdFx0XHRzY29wZS5hZGRHcm91cChncm91cFN0YXJ0LCBncm91cENvdW50LCBtYXRlcmlhbEluZGV4KTtcclxuXHJcblx0XHRcdC8vIGNhbGN1bGF0ZSBuZXcgc3RhcnQgdmFsdWUgZm9yIGdyb3Vwc1xyXG5cclxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xyXG5cclxuXHRcdFx0Ly8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xyXG5cclxuXHRcdFx0bnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRpZiAoQnVmZmVyR2VvbWV0cnkpIEJveEJ1ZmZlckdlb21ldHJ5Ll9fcHJvdG9fXyA9IEJ1ZmZlckdlb21ldHJ5O1xyXG5cdEJveEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkgJiYgQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuXHRCb3hCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb3hCdWZmZXJHZW9tZXRyeTtcclxuXHJcblx0cmV0dXJuIEJveEJ1ZmZlckdlb21ldHJ5O1xyXG59KEJ1ZmZlckdlb21ldHJ5KSk7XHJcblxyXG4vKipcclxuICogVW5pZm9ybSBVdGlsaXRpZXNcclxuICovXHJcblxyXG5mdW5jdGlvbiBjbG9uZVVuaWZvcm1zKHNyYykge1xyXG5cclxuXHR2YXIgZHN0ID0ge307XHJcblxyXG5cdGZvciAodmFyIHUgaW4gc3JjKSB7XHJcblxyXG5cdFx0ZHN0W3VdID0ge307XHJcblxyXG5cdFx0Zm9yICh2YXIgcCBpbiBzcmNbdV0pIHtcclxuXHJcblx0XHRcdHZhciBwcm9wZXJ0eSA9IHNyY1t1XVtwXTtcclxuXHJcblx0XHRcdGlmIChwcm9wZXJ0eSAmJiAocHJvcGVydHkuaXNDb2xvciB8fFxyXG5cdFx0XHRcdHByb3BlcnR5LmlzTWF0cml4MyB8fCBwcm9wZXJ0eS5pc01hdHJpeDQgfHxcclxuXHRcdFx0XHRwcm9wZXJ0eS5pc1ZlY3RvcjIgfHwgcHJvcGVydHkuaXNWZWN0b3IzIHx8IHByb3BlcnR5LmlzVmVjdG9yNCB8fFxyXG5cdFx0XHRcdHByb3BlcnR5LmlzVGV4dHVyZSkpIHtcclxuXHJcblx0XHRcdFx0ZHN0W3VdW3BdID0gcHJvcGVydHkuY2xvbmUoKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkpIHtcclxuXHJcblx0XHRcdFx0ZHN0W3VdW3BdID0gcHJvcGVydHkuc2xpY2UoKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGRzdFt1XVtwXSA9IHByb3BlcnR5O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZHN0O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbWVyZ2VVbmlmb3Jtcyh1bmlmb3Jtcykge1xyXG5cclxuXHR2YXIgbWVyZ2VkID0ge307XHJcblxyXG5cdGZvciAodmFyIHUgPSAwOyB1IDwgdW5pZm9ybXMubGVuZ3RoOyB1KyspIHtcclxuXHJcblx0XHR2YXIgdG1wID0gY2xvbmVVbmlmb3Jtcyh1bmlmb3Jtc1t1XSk7XHJcblxyXG5cdFx0Zm9yICh2YXIgcCBpbiB0bXApIHtcclxuXHJcblx0XHRcdG1lcmdlZFtwXSA9IHRtcFtwXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIG1lcmdlZDtcclxuXHJcbn1cclxuXHJcbi8vIExlZ2FjeVxyXG5cclxudmFyIFVuaWZvcm1zVXRpbHMgPSB7IGNsb25lOiBjbG9uZVVuaWZvcm1zLCBtZXJnZTogbWVyZ2VVbmlmb3JtcyB9O1xyXG5cclxudmFyIGRlZmF1bHRfdmVydGV4ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbW9kZWxWaWV3TWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xcbn1cIjtcclxuXHJcbnZhciBkZWZhdWx0X2ZyYWdtZW50ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBkZWZpbmVzOiB7IFwibGFiZWxcIiA6IFwidmFsdWVcIiB9LFxyXG4gKiAgdW5pZm9ybXM6IHsgXCJwYXJhbWV0ZXIxXCI6IHsgdmFsdWU6IDEuMCB9LCBcInBhcmFtZXRlcjJcIjogeyB2YWx1ZTI6IDIgfSB9LFxyXG4gKlxyXG4gKiAgZnJhZ21lbnRTaGFkZXI6IDxzdHJpbmc+LFxyXG4gKiAgdmVydGV4U2hhZGVyOiA8c3RyaW5nPixcclxuICpcclxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxyXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgbGlnaHRzOiA8Ym9vbD4sXHJcbiAqXHJcbiAqICBza2lubmluZzogPGJvb2w+LFxyXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXHJcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gU2hhZGVyTWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU2hhZGVyTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmRlZmluZXMgPSB7fTtcclxuXHR0aGlzLnVuaWZvcm1zID0ge307XHJcblxyXG5cdHRoaXMudmVydGV4U2hhZGVyID0gZGVmYXVsdF92ZXJ0ZXg7XHJcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGRlZmF1bHRfZnJhZ21lbnQ7XHJcblxyXG5cdHRoaXMubGluZXdpZHRoID0gMTtcclxuXHJcblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcclxuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XHJcblxyXG5cdHRoaXMuZm9nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2NlbmUgZm9nXHJcblx0dGhpcy5saWdodHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBsaWdodHNcclxuXHR0aGlzLmNsaXBwaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2UgdXNlci1kZWZpbmVkIGNsaXBwaW5nIHBsYW5lc1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2tpbm5pbmcgYXR0cmlidXRlIHN0cmVhbXNcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIHRhcmdldHNcclxuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIG1vcnBoIG5vcm1hbHNcclxuXHJcblx0dGhpcy5leHRlbnNpb25zID0ge1xyXG5cdFx0ZGVyaXZhdGl2ZXM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRlcml2YXRpdmVzXHJcblx0XHRmcmFnRGVwdGg6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGZyYWdtZW50IGRlcHRoIHZhbHVlc1xyXG5cdFx0ZHJhd0J1ZmZlcnM6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGRyYXcgYnVmZmVyc1xyXG5cdFx0c2hhZGVyVGV4dHVyZUxPRDogZmFsc2UgLy8gc2V0IHRvIHVzZSBzaGFkZXIgdGV4dHVyZSBMT0RcclxuXHR9O1xyXG5cclxuXHQvLyBXaGVuIHJlbmRlcmVkIGdlb21ldHJ5IGRvZXNuJ3QgaW5jbHVkZSB0aGVzZSBhdHRyaWJ1dGVzIGJ1dCB0aGUgbWF0ZXJpYWwgZG9lcyxcclxuXHQvLyB1c2UgdGhlc2UgZGVmYXVsdCB2YWx1ZXMgaW4gV2ViR0wuIFRoaXMgYXZvaWRzIGVycm9ycyB3aGVuIGJ1ZmZlciBkYXRhIGlzIG1pc3NpbmcuXHJcblx0dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzID0ge1xyXG5cdFx0J2NvbG9yJzogWzEsIDEsIDFdLFxyXG5cdFx0J3V2JzogWzAsIDBdLFxyXG5cdFx0J3V2Mic6IFswLCAwXVxyXG5cdH07XHJcblxyXG5cdHRoaXMuaW5kZXgwQXR0cmlidXRlTmFtZSA9IHVuZGVmaW5lZDtcclxuXHR0aGlzLnVuaWZvcm1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRpZiAocGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0aWYgKHBhcmFtZXRlcnMuYXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5TaGFkZXJNYXRlcmlhbDogYXR0cmlidXRlcyBzaG91bGQgbm93IGJlIGRlZmluZWQgaW4gVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhZGVyTWF0ZXJpYWw7XHJcblxyXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNTaGFkZXJNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLmZyYWdtZW50U2hhZGVyID0gc291cmNlLmZyYWdtZW50U2hhZGVyO1xyXG5cdHRoaXMudmVydGV4U2hhZGVyID0gc291cmNlLnZlcnRleFNoYWRlcjtcclxuXHJcblx0dGhpcy51bmlmb3JtcyA9IGNsb25lVW5pZm9ybXMoc291cmNlLnVuaWZvcm1zKTtcclxuXHJcblx0dGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlLmRlZmluZXMpO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cclxuXHR0aGlzLmxpZ2h0cyA9IHNvdXJjZS5saWdodHM7XHJcblx0dGhpcy5jbGlwcGluZyA9IHNvdXJjZS5jbGlwcGluZztcclxuXHJcblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcclxuXHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xyXG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcclxuXHJcblx0dGhpcy5leHRlbnNpb25zID0gc291cmNlLmV4dGVuc2lvbnM7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHR2YXIgZGF0YSA9IE1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBtZXRhKTtcclxuXHJcblx0ZGF0YS51bmlmb3JtcyA9IHt9O1xyXG5cclxuXHRmb3IgKHZhciBuYW1lIGluIHRoaXMudW5pZm9ybXMpIHtcclxuXHJcblx0XHR2YXIgdW5pZm9ybSA9IHRoaXMudW5pZm9ybXNbbmFtZV07XHJcblx0XHR2YXIgdmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuXHRcdGlmICh2YWx1ZSAmJiB2YWx1ZS5pc1RleHR1cmUpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ3QnLFxyXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0pTT04obWV0YSkudXVpZFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAodmFsdWUgJiYgdmFsdWUuaXNDb2xvcikge1xyXG5cclxuXHRcdFx0ZGF0YS51bmlmb3Jtc1tuYW1lXSA9IHtcclxuXHRcdFx0XHR0eXBlOiAnYycsXHJcblx0XHRcdFx0dmFsdWU6IHZhbHVlLmdldEhleCgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjIpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ3YyJyxcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjMpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ3YzJyxcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjQpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ3Y0JyxcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDMpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ20zJyxcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAmJiB2YWx1ZS5pc01hdHJpeDQpIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dHlwZTogJ200JyxcclxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGRhdGEudW5pZm9ybXNbbmFtZV0gPSB7XHJcblx0XHRcdFx0dmFsdWU6IHZhbHVlXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBub3RlOiB0aGUgYXJyYXkgdmFyaWFudHMgdjJ2LCB2M3YsIHY0diwgbTR2IGFuZCB0diBhcmUgbm90IHN1cHBvcnRlZCBzbyBmYXJcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKE9iamVjdC5rZXlzKHRoaXMuZGVmaW5lcykubGVuZ3RoID4gMCkgeyBkYXRhLmRlZmluZXMgPSB0aGlzLmRlZmluZXM7IH1cclxuXHJcblx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcclxuXHRkYXRhLmZyYWdtZW50U2hhZGVyID0gdGhpcy5mcmFnbWVudFNoYWRlcjtcclxuXHJcblx0dmFyIGV4dGVuc2lvbnMgPSB7fTtcclxuXHJcblx0Zm9yICh2YXIga2V5IGluIHRoaXMuZXh0ZW5zaW9ucykge1xyXG5cclxuXHRcdGlmICh0aGlzLmV4dGVuc2lvbnNba2V5XSA9PT0gdHJ1ZSkgeyBleHRlbnNpb25zW2tleV0gPSB0cnVlOyB9XHJcblxyXG5cdH1cclxuXHJcblx0aWYgKE9iamVjdC5rZXlzKGV4dGVuc2lvbnMpLmxlbmd0aCA+IDApIHsgZGF0YS5leHRlbnNpb25zID0gZXh0ZW5zaW9uczsgfVxyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiovXHJcblxyXG5mdW5jdGlvbiBDYW1lcmEoKSB7XHJcblxyXG5cdE9iamVjdDNELmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdDYW1lcmEnO1xyXG5cclxuXHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG5cdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG59XHJcblxyXG5DYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IENhbWVyYSxcclxuXHJcblx0aXNDYW1lcmE6IHRydWUsXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UsIHJlY3Vyc2l2ZSkge1xyXG5cclxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlLCByZWN1cnNpdmUpO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4LmNvcHkoc291cmNlLnByb2plY3Rpb25NYXRyaXgpO1xyXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFdvcmxkRGlyZWN0aW9uOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkNhbWVyYTogLmdldFdvcmxkRGlyZWN0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuXHRcdHZhciBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50cztcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LnNldCgtIGVbOF0sIC0gZVs5XSwgLSBlWzEwXSkubm9ybWFsaXplKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiBmdW5jdGlvbiAoZm9yY2UpIHtcclxuXHJcblx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLCBmb3JjZSk7XHJcblxyXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGdyZWdnbWFuIC8gaHR0cDovL2dhbWVzLmdyZWdnbWFuLmNvbS9cclxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUGVyc3BlY3RpdmVDYW1lcmEoZm92LCBhc3BlY3QsIG5lYXIsIGZhcikge1xyXG5cclxuXHRDYW1lcmEuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BlcnNwZWN0aXZlQ2FtZXJhJztcclxuXHJcblx0dGhpcy5mb3YgPSBmb3YgIT09IHVuZGVmaW5lZCA/IGZvdiA6IDUwO1xyXG5cdHRoaXMuem9vbSA9IDE7XHJcblxyXG5cdHRoaXMubmVhciA9IG5lYXIgIT09IHVuZGVmaW5lZCA/IG5lYXIgOiAwLjE7XHJcblx0dGhpcy5mYXIgPSBmYXIgIT09IHVuZGVmaW5lZCA/IGZhciA6IDIwMDA7XHJcblx0dGhpcy5mb2N1cyA9IDEwO1xyXG5cclxuXHR0aGlzLmFzcGVjdCA9IGFzcGVjdCAhPT0gdW5kZWZpbmVkID8gYXNwZWN0IDogMTtcclxuXHR0aGlzLnZpZXcgPSBudWxsO1xyXG5cclxuXHR0aGlzLmZpbG1HYXVnZSA9IDM1O1x0Ly8gd2lkdGggb2YgdGhlIGZpbG0gKGRlZmF1bHQgaW4gbWlsbGltZXRlcnMpXHJcblx0dGhpcy5maWxtT2Zmc2V0ID0gMDtcdC8vIGhvcml6b250YWwgZmlsbSBvZmZzZXQgKHNhbWUgdW5pdCBhcyBnYXVnZSlcclxuXHJcblx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcblxyXG59XHJcblxyXG5QZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoQ2FtZXJhLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFBlcnNwZWN0aXZlQ2FtZXJhLFxyXG5cclxuXHRpc1BlcnNwZWN0aXZlQ2FtZXJhOiB0cnVlLFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlLCByZWN1cnNpdmUpIHtcclxuXHJcblx0XHRDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSk7XHJcblxyXG5cdFx0dGhpcy5mb3YgPSBzb3VyY2UuZm92O1xyXG5cdFx0dGhpcy56b29tID0gc291cmNlLnpvb207XHJcblxyXG5cdFx0dGhpcy5uZWFyID0gc291cmNlLm5lYXI7XHJcblx0XHR0aGlzLmZhciA9IHNvdXJjZS5mYXI7XHJcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xyXG5cclxuXHRcdHRoaXMuYXNwZWN0ID0gc291cmNlLmFzcGVjdDtcclxuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS52aWV3KTtcclxuXHJcblx0XHR0aGlzLmZpbG1HYXVnZSA9IHNvdXJjZS5maWxtR2F1Z2U7XHJcblx0XHR0aGlzLmZpbG1PZmZzZXQgPSBzb3VyY2UuZmlsbU9mZnNldDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyB0aGUgRk9WIGJ5IGZvY2FsIGxlbmd0aCBpbiByZXNwZWN0IHRvIHRoZSBjdXJyZW50IC5maWxtR2F1Z2UuXHJcblx0ICpcclxuXHQgKiBUaGUgZGVmYXVsdCBmaWxtIGdhdWdlIGlzIDM1LCBzbyB0aGF0IHRoZSBmb2NhbCBsZW5ndGggY2FuIGJlIHNwZWNpZmllZCBmb3JcclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cclxuXHQgKlxyXG5cdCAqIFZhbHVlcyBmb3IgZm9jYWwgbGVuZ3RoIGFuZCBmaWxtIGdhdWdlIG11c3QgaGF2ZSB0aGUgc2FtZSB1bml0LlxyXG5cdCAqL1xyXG5cdHNldEZvY2FsTGVuZ3RoOiBmdW5jdGlvbiAoZm9jYWxMZW5ndGgpIHtcclxuXHJcblx0XHQvLyBzZWUgaHR0cDovL3d3dy5ib2JhdGtpbnMuY29tL3Bob3RvZ3JhcGh5L3RlY2huaWNhbC9maWVsZF9vZl92aWV3Lmh0bWxcclxuXHRcdHZhciB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xyXG5cclxuXHRcdHRoaXMuZm92ID0gX01hdGguUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4odkV4dGVudFNsb3BlKTtcclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxjdWxhdGVzIHRoZSBmb2NhbCBsZW5ndGggZnJvbSB0aGUgY3VycmVudCAuZm92IGFuZCAuZmlsbUdhdWdlLlxyXG5cdCAqL1xyXG5cdGdldEZvY2FsTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHZFeHRlbnRTbG9wZSA9IE1hdGgudGFuKF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdik7XHJcblxyXG5cdFx0cmV0dXJuIDAuNSAqIHRoaXMuZ2V0RmlsbUhlaWdodCgpIC8gdkV4dGVudFNsb3BlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRFZmZlY3RpdmVGT1Y6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gX01hdGguUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oXHJcblx0XHRcdE1hdGgudGFuKF9NYXRoLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdikgLyB0aGlzLnpvb20pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRGaWxtV2lkdGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gcG9ydHJhaXQgZm9ybWF0IChhc3BlY3QgPCAxKVxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4odGhpcy5hc3BlY3QsIDEpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRGaWxtSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Ly8gZmlsbSBub3QgY29tcGxldGVseSBjb3ZlcmVkIGluIGxhbmRzY2FwZSBmb3JtYXQgKGFzcGVjdCA+IDEpXHJcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCh0aGlzLmFzcGVjdCwgMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYW4gb2Zmc2V0IGluIGEgbGFyZ2VyIGZydXN0dW0uIFRoaXMgaXMgdXNlZnVsIGZvciBtdWx0aS13aW5kb3cgb3JcclxuXHQgKiBtdWx0aS1tb25pdG9yL211bHRpLW1hY2hpbmUgc2V0dXBzLlxyXG5cdCAqXHJcblx0ICogRm9yIGV4YW1wbGUsIGlmIHlvdSBoYXZlIDN4MiBtb25pdG9ycyBhbmQgZWFjaCBtb25pdG9yIGlzIDE5MjB4MTA4MCBhbmRcclxuXHQgKiB0aGUgbW9uaXRvcnMgYXJlIGluIGdyaWQgbGlrZSB0aGlzXHJcblx0ICpcclxuXHQgKiAgICstLS0rLS0tKy0tLStcclxuXHQgKiAgIHwgQSB8IEIgfCBDIHxcclxuXHQgKiAgICstLS0rLS0tKy0tLStcclxuXHQgKiAgIHwgRCB8IEUgfCBGIHxcclxuXHQgKiAgICstLS0rLS0tKy0tLStcclxuXHQgKlxyXG5cdCAqIHRoZW4gZm9yIGVhY2ggbW9uaXRvciB5b3Ugd291bGQgY2FsbCBpdCBsaWtlIHRoaXNcclxuXHQgKlxyXG5cdCAqICAgdmFyIHcgPSAxOTIwO1xyXG5cdCAqICAgdmFyIGggPSAxMDgwO1xyXG5cdCAqICAgdmFyIGZ1bGxXaWR0aCA9IHcgKiAzO1xyXG5cdCAqICAgdmFyIGZ1bGxIZWlnaHQgPSBoICogMjtcclxuXHQgKlxyXG5cdCAqICAgLS1BLS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMCwgdywgaCApO1xyXG5cdCAqICAgLS1CLS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMCwgdywgaCApO1xyXG5cdCAqICAgLS1DLS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMCwgdywgaCApO1xyXG5cdCAqICAgLS1ELS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMSwgdywgaCApO1xyXG5cdCAqICAgLS1FLS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAxLCBoICogMSwgdywgaCApO1xyXG5cdCAqICAgLS1GLS1cclxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAyLCBoICogMSwgdywgaCApO1xyXG5cdCAqXHJcblx0ICogICBOb3RlIHRoZXJlIGlzIG5vIHJlYXNvbiBtb25pdG9ycyBoYXZlIHRvIGJlIHRoZSBzYW1lIHNpemUgb3IgaW4gYSBncmlkLlxyXG5cdCAqL1xyXG5cdHNldFZpZXdPZmZzZXQ6IGZ1bmN0aW9uIChmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XHJcblxyXG5cdFx0aWYgKHRoaXMudmlldyA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy52aWV3ID0ge1xyXG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxyXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXHJcblx0XHRcdFx0b2Zmc2V0WDogMCxcclxuXHRcdFx0XHRvZmZzZXRZOiAwLFxyXG5cdFx0XHRcdHdpZHRoOiAxLFxyXG5cdFx0XHRcdGhlaWdodDogMVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XHJcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xyXG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xyXG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBuZWFyID0gdGhpcy5uZWFyLFxyXG5cdFx0XHR0b3AgPSBuZWFyICogTWF0aC50YW4oX01hdGguREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92KSAvIHRoaXMuem9vbSxcclxuXHRcdFx0aGVpZ2h0ID0gMiAqIHRvcCxcclxuXHRcdFx0d2lkdGggPSB0aGlzLmFzcGVjdCAqIGhlaWdodCxcclxuXHRcdFx0bGVmdCA9IC0gMC41ICogd2lkdGgsXHJcblx0XHRcdHZpZXcgPSB0aGlzLnZpZXc7XHJcblxyXG5cdFx0aWYgKHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCkge1xyXG5cclxuXHRcdFx0dmFyIGZ1bGxXaWR0aCA9IHZpZXcuZnVsbFdpZHRoLFxyXG5cdFx0XHRcdGZ1bGxIZWlnaHQgPSB2aWV3LmZ1bGxIZWlnaHQ7XHJcblxyXG5cdFx0XHRsZWZ0ICs9IHZpZXcub2Zmc2V0WCAqIHdpZHRoIC8gZnVsbFdpZHRoO1xyXG5cdFx0XHR0b3AgLT0gdmlldy5vZmZzZXRZICogaGVpZ2h0IC8gZnVsbEhlaWdodDtcclxuXHRcdFx0d2lkdGggKj0gdmlldy53aWR0aCAvIGZ1bGxXaWR0aDtcclxuXHRcdFx0aGVpZ2h0ICo9IHZpZXcuaGVpZ2h0IC8gZnVsbEhlaWdodDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHNrZXcgPSB0aGlzLmZpbG1PZmZzZXQ7XHJcblx0XHRpZiAoc2tldyAhPT0gMCkgeyBsZWZ0ICs9IG5lYXIgKiBza2V3IC8gdGhpcy5nZXRGaWxtV2lkdGgoKTsgfVxyXG5cclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUobGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIpO1xyXG5cclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSh0aGlzLnByb2plY3Rpb25NYXRyaXgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3QuZm92ID0gdGhpcy5mb3Y7XHJcblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xyXG5cclxuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XHJcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcclxuXHRcdGRhdGEub2JqZWN0LmZvY3VzID0gdGhpcy5mb2N1cztcclxuXHJcblx0XHRkYXRhLm9iamVjdC5hc3BlY3QgPSB0aGlzLmFzcGVjdDtcclxuXHJcblx0XHRpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7IGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnZpZXcpOyB9XHJcblxyXG5cdFx0ZGF0YS5vYmplY3QuZmlsbUdhdWdlID0gdGhpcy5maWxtR2F1Z2U7XHJcblx0XHRkYXRhLm9iamVjdC5maWxtT2Zmc2V0ID0gdGhpcy5maWxtT2Zmc2V0O1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBDYW1lcmEgZm9yIHJlbmRlcmluZyBjdWJlIG1hcHNcclxuICpcdC0gcmVuZGVycyBzY2VuZSBpbnRvIGF4aXMtYWxpZ25lZCBjdWJlXHJcbiAqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqL1xyXG5cclxudmFyIGZvdiA9IDkwLCBhc3BlY3QgPSAxO1xyXG5cclxuZnVuY3Rpb24gQ3ViZUNhbWVyYShuZWFyLCBmYXIsIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zKSB7XHJcblxyXG5cdE9iamVjdDNELmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdDdWJlQ2FtZXJhJztcclxuXHJcblx0dmFyIGNhbWVyYVBYID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG5cdGNhbWVyYVBYLnVwLnNldCgwLCAtIDEsIDApO1xyXG5cdGNhbWVyYVBYLmxvb2tBdChuZXcgVmVjdG9yMygxLCAwLCAwKSk7XHJcblx0dGhpcy5hZGQoY2FtZXJhUFgpO1xyXG5cclxuXHR2YXIgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoZm92LCBhc3BlY3QsIG5lYXIsIGZhcik7XHJcblx0Y2FtZXJhTlgudXAuc2V0KDAsIC0gMSwgMCk7XHJcblx0Y2FtZXJhTlgubG9va0F0KG5ldyBWZWN0b3IzKC0gMSwgMCwgMCkpO1xyXG5cdHRoaXMuYWRkKGNhbWVyYU5YKTtcclxuXHJcblx0dmFyIGNhbWVyYVBZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG5cdGNhbWVyYVBZLnVwLnNldCgwLCAwLCAxKTtcclxuXHRjYW1lcmFQWS5sb29rQXQobmV3IFZlY3RvcjMoMCwgMSwgMCkpO1xyXG5cdHRoaXMuYWRkKGNhbWVyYVBZKTtcclxuXHJcblx0dmFyIGNhbWVyYU5ZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG5cdGNhbWVyYU5ZLnVwLnNldCgwLCAwLCAtIDEpO1xyXG5cdGNhbWVyYU5ZLmxvb2tBdChuZXcgVmVjdG9yMygwLCAtIDEsIDApKTtcclxuXHR0aGlzLmFkZChjYW1lcmFOWSk7XHJcblxyXG5cdHZhciBjYW1lcmFQWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYShmb3YsIGFzcGVjdCwgbmVhciwgZmFyKTtcclxuXHRjYW1lcmFQWi51cC5zZXQoMCwgLSAxLCAwKTtcclxuXHRjYW1lcmFQWi5sb29rQXQobmV3IFZlY3RvcjMoMCwgMCwgMSkpO1xyXG5cdHRoaXMuYWRkKGNhbWVyYVBaKTtcclxuXHJcblx0dmFyIGNhbWVyYU5aID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG5cdGNhbWVyYU5aLnVwLnNldCgwLCAtIDEsIDApO1xyXG5cdGNhbWVyYU5aLmxvb2tBdChuZXcgVmVjdG9yMygwLCAwLCAtIDEpKTtcclxuXHR0aGlzLmFkZChjYW1lcmFOWik7XHJcblxyXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgZm9ybWF0OiBSR0JGb3JtYXQsIG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLCBtaW5GaWx0ZXI6IExpbmVhckZpbHRlciB9O1xyXG5cclxuXHR0aGlzLnJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldEN1YmUoY3ViZVJlc29sdXRpb24sIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zKTtcclxuXHR0aGlzLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSBcIkN1YmVDYW1lcmFcIjtcclxuXHJcblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAocmVuZGVyZXIsIHNjZW5lKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMucGFyZW50ID09PSBudWxsKSB7IHRoaXMudXBkYXRlTWF0cml4V29ybGQoKTsgfVxyXG5cclxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XHJcblxyXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0O1xyXG5cdFx0dmFyIGdlbmVyYXRlTWlwbWFwcyA9IHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcztcclxuXHJcblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0LCAwKTtcclxuXHRcdHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhUFgpO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQsIDEpO1xyXG5cdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmFOWCk7XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCwgMik7XHJcblx0XHRyZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYVBZKTtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0LCAzKTtcclxuXHRcdHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhTlkpO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQsIDQpO1xyXG5cdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmFQWik7XHJcblxyXG5cdFx0cmVuZGVyVGFyZ2V0LnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZ2VuZXJhdGVNaXBtYXBzO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQsIDUpO1xyXG5cdFx0cmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmFOWik7XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KGN1cnJlbnRSZW5kZXJUYXJnZXQpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmNsZWFyID0gZnVuY3Rpb24gKHJlbmRlcmVyLCBjb2xvciwgZGVwdGgsIHN0ZW5jaWwpIHtcclxuXHJcblx0XHR2YXIgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xyXG5cclxuXHRcdHZhciByZW5kZXJUYXJnZXQgPSB0aGlzLnJlbmRlclRhcmdldDtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCwgaSk7XHJcblxyXG5cdFx0XHRyZW5kZXJlci5jbGVhcihjb2xvciwgZGVwdGgsIHN0ZW5jaWwpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoY3VycmVudFJlbmRlclRhcmdldCk7XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG5DdWJlQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKTtcclxuQ3ViZUNhbWVyYS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlQ2FtZXJhO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb21cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xSZW5kZXJUYXJnZXRDdWJlKHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcclxuXHJcblx0V2ViR0xSZW5kZXJUYXJnZXQuY2FsbCh0aGlzLCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKTtcclxuXHJcbn1cclxuXHJcbldlYkdMUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSk7XHJcbldlYkdMUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBXZWJHTFJlbmRlclRhcmdldEN1YmU7XHJcblxyXG5XZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID0gdHJ1ZTtcclxuXHJcbldlYkdMUmVuZGVyVGFyZ2V0Q3ViZS5wcm90b3R5cGUuZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUgPSBmdW5jdGlvbiAocmVuZGVyZXIsIHRleHR1cmUpIHtcclxuXHJcblx0dGhpcy50ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlLnR5cGU7XHJcblx0dGhpcy50ZXh0dXJlLmZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xyXG5cdHRoaXMudGV4dHVyZS5lbmNvZGluZyA9IHRleHR1cmUuZW5jb2Rpbmc7XHJcblxyXG5cdHZhciBzY2VuZSA9IG5ldyBTY2VuZSgpO1xyXG5cclxuXHR2YXIgc2hhZGVyID0ge1xyXG5cclxuXHRcdHVuaWZvcm1zOiB7XHJcblx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0fSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFtcclxuXHJcblx0XHRcdFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcIixcclxuXHJcblx0XHRcdFwidmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcIixcclxuXHJcblx0XHRcdFwiXHRyZXR1cm4gbm9ybWFsaXplKCAoIG1hdHJpeCAqIHZlYzQoIGRpciwgMC4wICkgKS54eXogKTtcIixcclxuXHJcblx0XHRcdFwifVwiLFxyXG5cclxuXHRcdFx0XCJ2b2lkIG1haW4oKSB7XCIsXHJcblxyXG5cdFx0XHRcIlx0dldvcmxkRGlyZWN0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcIixcclxuXHJcblx0XHRcdFwiXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlwiLFxyXG5cdFx0XHRcIlx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlwiLFxyXG5cclxuXHRcdFx0XCJ9XCJcclxuXHJcblx0XHRdLmpvaW4oJ1xcbicpLFxyXG5cclxuXHRcdGZyYWdtZW50U2hhZGVyOiBbXHJcblxyXG5cdFx0XHRcInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcIixcclxuXHJcblx0XHRcdFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcIixcclxuXHJcblx0XHRcdFwiI2RlZmluZSBSRUNJUFJPQ0FMX1BJIDAuMzE4MzA5ODg2MThcIixcclxuXHRcdFx0XCIjZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTRcIixcclxuXHJcblx0XHRcdFwidm9pZCBtYWluKCkge1wiLFxyXG5cclxuXHRcdFx0XCJcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcIixcclxuXHJcblx0XHRcdFwiXHR2ZWMyIHNhbXBsZVVWO1wiLFxyXG5cclxuXHRcdFx0XCJcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggZGlyZWN0aW9uLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcIixcclxuXHJcblx0XHRcdFwiXHRzYW1wbGVVVi54ID0gYXRhbiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcIixcclxuXHJcblx0XHRcdFwiXHRnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcIixcclxuXHJcblx0XHRcdFwifVwiXHJcblxyXG5cdFx0XS5qb2luKCdcXG4nKSxcclxuXHR9O1xyXG5cclxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoe1xyXG5cclxuXHRcdHR5cGU6ICdDdWJlbWFwRnJvbUVxdWlyZWN0JyxcclxuXHJcblx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyhzaGFkZXIudW5pZm9ybXMpLFxyXG5cdFx0dmVydGV4U2hhZGVyOiBzaGFkZXIudmVydGV4U2hhZGVyLFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlcixcclxuXHRcdHNpZGU6IEJhY2tTaWRlLFxyXG5cdFx0YmxlbmRpbmc6IE5vQmxlbmRpbmdcclxuXHJcblx0fSk7XHJcblxyXG5cdG1hdGVyaWFsLnVuaWZvcm1zLnRFcXVpcmVjdC52YWx1ZSA9IHRleHR1cmU7XHJcblxyXG5cdHZhciBtZXNoID0gbmV3IE1lc2gobmV3IEJveEJ1ZmZlckdlb21ldHJ5KDUsIDUsIDUpLCBtYXRlcmlhbCk7XHJcblxyXG5cdHNjZW5lLmFkZChtZXNoKTtcclxuXHJcblx0dmFyIGNhbWVyYSA9IG5ldyBDdWJlQ2FtZXJhKDEsIDEwLCAxKTtcclxuXHJcblx0Y2FtZXJhLnJlbmRlclRhcmdldCA9IHRoaXM7XHJcblx0Y2FtZXJhLnJlbmRlclRhcmdldC50ZXh0dXJlLm5hbWUgPSAnQ3ViZUNhbWVyYVRleHR1cmUnO1xyXG5cclxuXHRjYW1lcmEudXBkYXRlKHJlbmRlcmVyLCBzY2VuZSk7XHJcblxyXG5cdG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdG1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBEYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nKSB7XHJcblxyXG5cdFRleHR1cmUuY2FsbCh0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nKTtcclxuXHJcblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSB9O1xyXG5cclxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcclxuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcclxuXHJcblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XHJcblx0dGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xyXG5cclxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn1cclxuXHJcbkRhdGFUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVGV4dHVyZS5wcm90b3R5cGUpO1xyXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEYXRhVGV4dHVyZTtcclxuXHJcbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlID0gdHJ1ZTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxudmFyIF92ZWN0b3IxID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92ZWN0b3IyID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9ub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xyXG5cclxuZnVuY3Rpb24gUGxhbmUobm9ybWFsLCBjb25zdGFudCkge1xyXG5cclxuXHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXHJcblxyXG5cdHRoaXMubm9ybWFsID0gKG5vcm1hbCAhPT0gdW5kZWZpbmVkKSA/IG5vcm1hbCA6IG5ldyBWZWN0b3IzKDEsIDAsIDApO1xyXG5cdHRoaXMuY29uc3RhbnQgPSAoY29uc3RhbnQgIT09IHVuZGVmaW5lZCkgPyBjb25zdGFudCA6IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFBsYW5lLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc1BsYW5lOiB0cnVlLFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uIChub3JtYWwsIGNvbnN0YW50KSB7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWwuY29weShub3JtYWwpO1xyXG5cdFx0dGhpcy5jb25zdGFudCA9IGNvbnN0YW50O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRDb21wb25lbnRzOiBmdW5jdGlvbiAoeCwgeSwgeiwgdykge1xyXG5cclxuXHRcdHRoaXMubm9ybWFsLnNldCh4LCB5LCB6KTtcclxuXHRcdHRoaXMuY29uc3RhbnQgPSB3O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludDogZnVuY3Rpb24gKG5vcm1hbCwgcG9pbnQpIHtcclxuXHJcblx0XHR0aGlzLm5vcm1hbC5jb3B5KG5vcm1hbCk7XHJcblx0XHR0aGlzLmNvbnN0YW50ID0gLSBwb2ludC5kb3QodGhpcy5ub3JtYWwpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ29wbGFuYXJQb2ludHM6IGZ1bmN0aW9uIChhLCBiLCBjKSB7XHJcblxyXG5cdFx0dmFyIG5vcm1hbCA9IF92ZWN0b3IxLnN1YlZlY3RvcnMoYywgYikuY3Jvc3MoX3ZlY3RvcjIuc3ViVmVjdG9ycyhhLCBiKSkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0Ly8gUTogc2hvdWxkIGFuIGVycm9yIGJlIHRocm93biBpZiBub3JtYWwgaXMgemVybyAoZS5nLiBkZWdlbmVyYXRlIHBsYW5lKT9cclxuXHJcblx0XHR0aGlzLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KG5vcm1hbCwgYSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHBsYW5lKSB7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWwuY29weShwbGFuZS5ub3JtYWwpO1xyXG5cdFx0dGhpcy5jb25zdGFudCA9IHBsYW5lLmNvbnN0YW50O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBOb3RlOiB3aWxsIGxlYWQgdG8gYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgcGxhbmUgaXMgaW52YWxpZC5cclxuXHJcblx0XHR2YXIgaW52ZXJzZU5vcm1hbExlbmd0aCA9IDEuMCAvIHRoaXMubm9ybWFsLmxlbmd0aCgpO1xyXG5cdFx0dGhpcy5ub3JtYWwubXVsdGlwbHlTY2FsYXIoaW52ZXJzZU5vcm1hbExlbmd0aCk7XHJcblx0XHR0aGlzLmNvbnN0YW50ICo9IGludmVyc2VOb3JtYWxMZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuY29uc3RhbnQgKj0gLSAxO1xyXG5cdFx0dGhpcy5ub3JtYWwubmVnYXRlKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKHBvaW50KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsLmRvdChwb2ludCkgKyB0aGlzLmNvbnN0YW50O1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXN0YW5jZVRvU3BoZXJlOiBmdW5jdGlvbiAoc3BoZXJlKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VUb1BvaW50KHNwaGVyZS5jZW50ZXIpIC0gc3BoZXJlLnJhZGl1cztcclxuXHJcblx0fSxcclxuXHJcblx0cHJvamVjdFBvaW50OiBmdW5jdGlvbiAocG9pbnQsIHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5QbGFuZTogLnByb2plY3RQb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnKTtcclxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KHRoaXMubm9ybWFsKS5tdWx0aXBseVNjYWxhcigtIHRoaXMuZGlzdGFuY2VUb1BvaW50KHBvaW50KSkuYWRkKHBvaW50KTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0TGluZTogZnVuY3Rpb24gKGxpbmUsIHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5QbGFuZTogLmludGVyc2VjdExpbmUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkaXJlY3Rpb24gPSBsaW5lLmRlbHRhKF92ZWN0b3IxKTtcclxuXHJcblx0XHR2YXIgZGVub21pbmF0b3IgPSB0aGlzLm5vcm1hbC5kb3QoZGlyZWN0aW9uKTtcclxuXHJcblx0XHRpZiAoZGVub21pbmF0b3IgPT09IDApIHtcclxuXHJcblx0XHRcdC8vIGxpbmUgaXMgY29wbGFuYXIsIHJldHVybiBvcmlnaW5cclxuXHRcdFx0aWYgKHRoaXMuZGlzdGFuY2VUb1BvaW50KGxpbmUuc3RhcnQpID09PSAwKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiB0YXJnZXQuY29weShsaW5lLnN0YXJ0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFVuc3VyZSBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IG1ldGhvZCB0byBoYW5kbGUgdGhpcyBjYXNlLlxyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdCA9IC0gKGxpbmUuc3RhcnQuZG90KHRoaXMubm9ybWFsKSArIHRoaXMuY29uc3RhbnQpIC8gZGVub21pbmF0b3I7XHJcblxyXG5cdFx0aWYgKHQgPCAwIHx8IHQgPiAxKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcih0KS5hZGQobGluZS5zdGFydCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNMaW5lOiBmdW5jdGlvbiAobGluZSkge1xyXG5cclxuXHRcdC8vIE5vdGU6IHRoaXMgdGVzdHMgaWYgYSBsaW5lIGludGVyc2VjdHMgdGhlIHBsYW5lLCBub3Qgd2hldGhlciBpdCAob3IgaXRzIGVuZC1wb2ludHMpIGFyZSBjb3BsYW5hciB3aXRoIGl0LlxyXG5cclxuXHRcdHZhciBzdGFydFNpZ24gPSB0aGlzLmRpc3RhbmNlVG9Qb2ludChsaW5lLnN0YXJ0KTtcclxuXHRcdHZhciBlbmRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQobGluZS5lbmQpO1xyXG5cclxuXHRcdHJldHVybiAoc3RhcnRTaWduIDwgMCAmJiBlbmRTaWduID4gMCkgfHwgKGVuZFNpZ24gPCAwICYmIHN0YXJ0U2lnbiA+IDApO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzUGxhbmUodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uIChzcGhlcmUpIHtcclxuXHJcblx0XHRyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSh0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29wbGFuYXJQb2ludDogZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5QbGFuZTogLmNvcGxhbmFyUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weSh0aGlzLm5vcm1hbCkubXVsdGlwbHlTY2FsYXIoLSB0aGlzLmNvbnN0YW50KTtcclxuXHJcblx0fSxcclxuXHJcblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAobWF0cml4LCBvcHRpb25hbE5vcm1hbE1hdHJpeCkge1xyXG5cclxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeChtYXRyaXgpO1xyXG5cclxuXHRcdHZhciByZWZlcmVuY2VQb2ludCA9IHRoaXMuY29wbGFuYXJQb2ludChfdmVjdG9yMSkuYXBwbHlNYXRyaXg0KG1hdHJpeCk7XHJcblxyXG5cdFx0dmFyIG5vcm1hbCA9IHRoaXMubm9ybWFsLmFwcGx5TWF0cml4Myhub3JtYWxNYXRyaXgpLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdHRoaXMuY29uc3RhbnQgPSAtIHJlZmVyZW5jZVBvaW50LmRvdChub3JtYWwpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuXHJcblx0XHR0aGlzLmNvbnN0YW50IC09IG9mZnNldC5kb3QodGhpcy5ub3JtYWwpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlcXVhbHM6IGZ1bmN0aW9uIChwbGFuZSkge1xyXG5cclxuXHRcdHJldHVybiBwbGFuZS5ub3JtYWwuZXF1YWxzKHRoaXMubm9ybWFsKSAmJiAocGxhbmUuY29uc3RhbnQgPT09IHRoaXMuY29uc3RhbnQpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxudmFyIF9zcGhlcmUkMSA9IG5ldyBTcGhlcmUoKTtcclxudmFyIF92ZWN0b3IkNSA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5mdW5jdGlvbiBGcnVzdHVtKHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUpIHtcclxuXHJcblx0dGhpcy5wbGFuZXMgPSBbXHJcblxyXG5cdFx0KHAwICE9PSB1bmRlZmluZWQpID8gcDAgOiBuZXcgUGxhbmUoKSxcclxuXHRcdChwMSAhPT0gdW5kZWZpbmVkKSA/IHAxIDogbmV3IFBsYW5lKCksXHJcblx0XHQocDIgIT09IHVuZGVmaW5lZCkgPyBwMiA6IG5ldyBQbGFuZSgpLFxyXG5cdFx0KHAzICE9PSB1bmRlZmluZWQpID8gcDMgOiBuZXcgUGxhbmUoKSxcclxuXHRcdChwNCAhPT0gdW5kZWZpbmVkKSA/IHA0IDogbmV3IFBsYW5lKCksXHJcblx0XHQocDUgIT09IHVuZGVmaW5lZCkgPyBwNSA6IG5ldyBQbGFuZSgpXHJcblxyXG5cdF07XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKEZydXN0dW0ucHJvdG90eXBlLCB7XHJcblxyXG5cdHNldDogZnVuY3Rpb24gKHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUpIHtcclxuXHJcblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XHJcblxyXG5cdFx0cGxhbmVzWzBdLmNvcHkocDApO1xyXG5cdFx0cGxhbmVzWzFdLmNvcHkocDEpO1xyXG5cdFx0cGxhbmVzWzJdLmNvcHkocDIpO1xyXG5cdFx0cGxhbmVzWzNdLmNvcHkocDMpO1xyXG5cdFx0cGxhbmVzWzRdLmNvcHkocDQpO1xyXG5cdFx0cGxhbmVzWzVdLmNvcHkocDUpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChmcnVzdHVtKSB7XHJcblxyXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcblxyXG5cdFx0XHRwbGFuZXNbaV0uY29weShmcnVzdHVtLnBsYW5lc1tpXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tTWF0cml4OiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcclxuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XHJcblx0XHR2YXIgbWUwID0gbWVbMF0sIG1lMSA9IG1lWzFdLCBtZTIgPSBtZVsyXSwgbWUzID0gbWVbM107XHJcblx0XHR2YXIgbWU0ID0gbWVbNF0sIG1lNSA9IG1lWzVdLCBtZTYgPSBtZVs2XSwgbWU3ID0gbWVbN107XHJcblx0XHR2YXIgbWU4ID0gbWVbOF0sIG1lOSA9IG1lWzldLCBtZTEwID0gbWVbMTBdLCBtZTExID0gbWVbMTFdO1xyXG5cdFx0dmFyIG1lMTIgPSBtZVsxMl0sIG1lMTMgPSBtZVsxM10sIG1lMTQgPSBtZVsxNF0sIG1lMTUgPSBtZVsxNV07XHJcblxyXG5cdFx0cGxhbmVzWzBdLnNldENvbXBvbmVudHMobWUzIC0gbWUwLCBtZTcgLSBtZTQsIG1lMTEgLSBtZTgsIG1lMTUgLSBtZTEyKS5ub3JtYWxpemUoKTtcclxuXHRcdHBsYW5lc1sxXS5zZXRDb21wb25lbnRzKG1lMyArIG1lMCwgbWU3ICsgbWU0LCBtZTExICsgbWU4LCBtZTE1ICsgbWUxMikubm9ybWFsaXplKCk7XHJcblx0XHRwbGFuZXNbMl0uc2V0Q29tcG9uZW50cyhtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMpLm5vcm1hbGl6ZSgpO1xyXG5cdFx0cGxhbmVzWzNdLnNldENvbXBvbmVudHMobWUzIC0gbWUxLCBtZTcgLSBtZTUsIG1lMTEgLSBtZTksIG1lMTUgLSBtZTEzKS5ub3JtYWxpemUoKTtcclxuXHRcdHBsYW5lc1s0XS5zZXRDb21wb25lbnRzKG1lMyAtIG1lMiwgbWU3IC0gbWU2LCBtZTExIC0gbWUxMCwgbWUxNSAtIG1lMTQpLm5vcm1hbGl6ZSgpO1xyXG5cdFx0cGxhbmVzWzVdLnNldENvbXBvbmVudHMobWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCkubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsKSB7IGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOyB9XHJcblxyXG5cdFx0X3NwaGVyZSQxLmNvcHkoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpLmFwcGx5TWF0cml4NChvYmplY3QubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoX3NwaGVyZSQxKTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJzZWN0c1Nwcml0ZTogZnVuY3Rpb24gKHNwcml0ZSkge1xyXG5cclxuXHRcdF9zcGhlcmUkMS5jZW50ZXIuc2V0KDAsIDAsIDApO1xyXG5cdFx0X3NwaGVyZSQxLnJhZGl1cyA9IDAuNzA3MTA2NzgxMTg2NTQ3NjtcclxuXHRcdF9zcGhlcmUkMS5hcHBseU1hdHJpeDQoc3ByaXRlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKF9zcGhlcmUkMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uIChzcGhlcmUpIHtcclxuXHJcblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XHJcblx0XHR2YXIgY2VudGVyID0gc3BoZXJlLmNlbnRlcjtcclxuXHRcdHZhciBuZWdSYWRpdXMgPSAtIHNwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBkaXN0YW5jZSA9IHBsYW5lc1tpXS5kaXN0YW5jZVRvUG9pbnQoY2VudGVyKTtcclxuXHJcblx0XHRcdGlmIChkaXN0YW5jZSA8IG5lZ1JhZGl1cykge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgcGxhbmUgPSBwbGFuZXNbaV07XHJcblxyXG5cdFx0XHQvLyBjb3JuZXIgYXQgbWF4IGRpc3RhbmNlXHJcblxyXG5cdFx0XHRfdmVjdG9yJDUueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcclxuXHRcdFx0X3ZlY3RvciQ1LnkgPSBwbGFuZS5ub3JtYWwueSA+IDAgPyBib3gubWF4LnkgOiBib3gubWluLnk7XHJcblx0XHRcdF92ZWN0b3IkNS56ID0gcGxhbmUubm9ybWFsLnogPiAwID8gYm94Lm1heC56IDogYm94Lm1pbi56O1xyXG5cclxuXHRcdFx0aWYgKHBsYW5lLmRpc3RhbmNlVG9Qb2ludChfdmVjdG9yJDUpIDwgMCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHJcblx0XHRcdGlmIChwbGFuZXNbaV0uZGlzdGFuY2VUb1BvaW50KHBvaW50KSA8IDApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG52YXIgYWxwaGFtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGFscGhhbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBhbHBoYU1hcDtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBhbHBoYXRlc3RfZnJhZ21lbnQgPSBcIiNpZmRlZiBBTFBIQVRFU1RcXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgQUxQSEFURVNUICkgZGlzY2FyZDtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFNUQU5EQVJEIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGFvbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQU9NQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBhb01hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGFvTWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGJlZ2luX3ZlcnRleCA9IFwidmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XCI7XHJcblxyXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgYnNkZnMgPSBcInZlYzIgaW50ZWdyYXRlU3BlY3VsYXJCUkRGKCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGNvbnN0IHZlYzQgYzAgPSB2ZWM0KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xcblxcdGNvbnN0IHZlYzQgYzEgPSB2ZWM0KCAxLCAwLjA0MjUsIDEuMDQsIC0gMC4wNCApO1xcblxcdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XFxuXFx0ZmxvYXQgYTAwNCA9IG1pbiggci54ICogci54LCBleHAyKCAtIDkuMjggKiBkb3ROViApICkgKiByLnggKyByLnk7XFxuXFx0cmV0dXJuIHZlYzIoIC0xLjA0LCAxLjA0ICkgKiBhMDA0ICsgci56dztcXG59XFxuZmxvYXQgcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggY29uc3QgaW4gZmxvYXQgbGlnaHREaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgY3V0b2ZmRGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGRlY2F5RXhwb25lbnQgKSB7XFxuI2lmIGRlZmluZWQgKCBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTIClcXG5cXHRmbG9hdCBkaXN0YW5jZUZhbGxvZmYgPSAxLjAgLyBtYXgoIHBvdyggbGlnaHREaXN0YW5jZSwgZGVjYXlFeHBvbmVudCApLCAwLjAxICk7XFxuXFx0aWYoIGN1dG9mZkRpc3RhbmNlID4gMC4wICkge1xcblxcdFxcdGRpc3RhbmNlRmFsbG9mZiAqPSBwb3cyKCBzYXR1cmF0ZSggMS4wIC0gcG93NCggbGlnaHREaXN0YW5jZSAvIGN1dG9mZkRpc3RhbmNlICkgKSApO1xcblxcdH1cXG5cXHRyZXR1cm4gZGlzdGFuY2VGYWxsb2ZmO1xcbiNlbHNlXFxuXFx0aWYoIGN1dG9mZkRpc3RhbmNlID4gMC4wICYmIGRlY2F5RXhwb25lbnQgPiAwLjAgKSB7XFxuXFx0XFx0cmV0dXJuIHBvdyggc2F0dXJhdGUoIC1saWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKyAxLjAgKSwgZGVjYXlFeHBvbmVudCApO1xcblxcdH1cXG5cXHRyZXR1cm4gMS4wO1xcbiNlbmRpZlxcbn1cXG52ZWMzIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBjb25zdCBpbiB2ZWMzIGRpZmZ1c2VDb2xvciApIHtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGRpZmZ1c2VDb2xvcjtcXG59XFxudmVjMyBGX1NjaGxpY2soIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgZG90TEggKSB7XFxuXFx0ZmxvYXQgZnJlc25lbCA9IGV4cDIoICggLTUuNTU0NzMgKiBkb3RMSCAtIDYuOTgzMTYgKSAqIGRvdExIICk7XFxuXFx0cmV0dXJuICggMS4wIC0gc3BlY3VsYXJDb2xvciApICogZnJlc25lbCArIHNwZWN1bGFyQ29sb3I7XFxufVxcbnZlYzMgRl9TY2hsaWNrX1JvdWdobmVzc0RlcGVuZGVudCggY29uc3QgaW4gdmVjMyBGMCwgY29uc3QgaW4gZmxvYXQgZG90TlYsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQ3MyAqIGRvdE5WIC0gNi45ODMxNiApICogZG90TlYgKTtcXG5cXHR2ZWMzIEZyID0gbWF4KCB2ZWMzKCAxLjAgLSByb3VnaG5lc3MgKSwgRjAgKSAtIEYwO1xcblxcdHJldHVybiBGciAqIGZyZXNuZWwgKyBGMDtcXG59XFxuZmxvYXQgR19HR1hfU21pdGgoIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROTCwgY29uc3QgaW4gZmxvYXQgZG90TlYgKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGdsID0gZG90TkwgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRmbG9hdCBndiA9IGRvdE5WICsgc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XFxuXFx0cmV0dXJuIDEuMCAvICggZ2wgKiBndiApO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROTCwgY29uc3QgaW4gZmxvYXQgZG90TlYgKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRmbG9hdCBnbCA9IGRvdE5WICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROTCApICk7XFxuXFx0cmV0dXJuIDAuNSAvIG1heCggZ3YgKyBnbCwgRVBTSUxPTiApO1xcbn1cXG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcXG5cXHRmbG9hdCBkZW5vbSA9IHBvdzIoIGRvdE5IICkgKiAoIGEyIC0gMS4wICkgKyAxLjA7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1goIGNvbnN0IGluIEluY2lkZW50TGlnaHQgaW5jaWRlbnRMaWdodCwgY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgdmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIHZpZXdEaXIgKSApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xcblxcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGNvbnN0IGZsb2F0IExVVF9TSVpFICA9IDY0LjA7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NDQUxFID0gKCBMVVRfU0laRSAtIDEuMCApIC8gTFVUX1NJWkU7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX0JJQVMgID0gMC41IC8gTFVUX1NJWkU7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBOLCBWICkgKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggcm91Z2huZXNzLCBzcXJ0KCAxLjAgLSBkb3ROViApICk7XFxuXFx0dXYgPSB1diAqIExVVF9TQ0FMRSArIExVVF9CSUFTO1xcblxcdHJldHVybiB1djtcXG59XFxuZmxvYXQgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIGYgKSB7XFxuXFx0ZmxvYXQgbCA9IGxlbmd0aCggZiApO1xcblxcdHJldHVybiBtYXgoICggbCAqIGwgKyBmLnogKSAvICggbCArIDEuMCApLCAwLjAgKTtcXG59XFxudmVjMyBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgdjEsIGNvbnN0IGluIHZlYzMgdjIgKSB7XFxuXFx0ZmxvYXQgeCA9IGRvdCggdjEsIHYyICk7XFxuXFx0ZmxvYXQgeSA9IGFicyggeCApO1xcblxcdGZsb2F0IGEgPSAwLjg1NDM5ODUgKyAoIDAuNDk2NTE1NSArIDAuMDE0NTIwNiAqIHkgKSAqIHk7XFxuXFx0ZmxvYXQgYiA9IDMuNDE3NTk0MCArICggNC4xNjE2NzI0ICsgeSApICogeTtcXG5cXHRmbG9hdCB2ID0gYSAvIGI7XFxuXFx0ZmxvYXQgdGhldGFfc2ludGhldGEgPSAoIHggPiAwLjAgKSA/IHYgOiAwLjUgKiBpbnZlcnNlc3FydCggbWF4KCAxLjAgLSB4ICogeCwgMWUtNyApICkgLSB2O1xcblxcdHJldHVybiBjcm9zcyggdjEsIHYyICkgKiB0aGV0YV9zaW50aGV0YTtcXG59XFxudmVjMyBMVENfRXZhbHVhdGUoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiB2ZWMzIFAsIGNvbnN0IGluIG1hdDMgbUludiwgY29uc3QgaW4gdmVjMyByZWN0Q29vcmRzWyA0IF0gKSB7XFxuXFx0dmVjMyB2MSA9IHJlY3RDb29yZHNbIDEgXSAtIHJlY3RDb29yZHNbIDAgXTtcXG5cXHR2ZWMzIHYyID0gcmVjdENvb3Jkc1sgMyBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgbGlnaHROb3JtYWwgPSBjcm9zcyggdjEsIHYyICk7XFxuXFx0aWYoIGRvdCggbGlnaHROb3JtYWwsIFAgLSByZWN0Q29vcmRzWyAwIF0gKSA8IDAuMCApIHJldHVybiB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIFQxLCBUMjtcXG5cXHRUMSA9IG5vcm1hbGl6ZSggViAtIE4gKiBkb3QoIFYsIE4gKSApO1xcblxcdFQyID0gLSBjcm9zcyggTiwgVDEgKTtcXG5cXHRtYXQzIG1hdCA9IG1JbnYgKiB0cmFuc3Bvc2VNYXQzKCBtYXQzKCBUMSwgVDIsIE4gKSApO1xcblxcdHZlYzMgY29vcmRzWyA0IF07XFxuXFx0Y29vcmRzWyAwIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDAgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDEgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMSBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMiBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAyIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAzIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDMgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDAgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAwIF0gKTtcXG5cXHRjb29yZHNbIDEgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAxIF0gKTtcXG5cXHRjb29yZHNbIDIgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAyIF0gKTtcXG5cXHRjb29yZHNbIDMgXSA9IG5vcm1hbGl6ZSggY29vcmRzWyAzIF0gKTtcXG5cXHR2ZWMzIHZlY3RvckZvcm1GYWN0b3IgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAwIF0sIGNvb3Jkc1sgMSBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMSBdLCBjb29yZHNbIDIgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDIgXSwgY29vcmRzWyAzIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAzIF0sIGNvb3Jkc1sgMCBdICk7XFxuXFx0ZmxvYXQgcmVzdWx0ID0gTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCB2ZWN0b3JGb3JtRmFjdG9yICk7XFxuXFx0cmV0dXJuIHZlYzMoIHJlc3VsdCApO1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfR0dYX0Vudmlyb25tZW50KCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0dmVjMiBicmRmID0gaW50ZWdyYXRlU3BlY3VsYXJCUkRGKCBkb3ROViwgcm91Z2huZXNzICk7XFxuXFx0cmV0dXJuIHNwZWN1bGFyQ29sb3IgKiBicmRmLnggKyBicmRmLnk7XFxufVxcbnZvaWQgQlJERl9TcGVjdWxhcl9NdWx0aXNjYXR0ZXJpbmdfRW52aXJvbm1lbnQoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBpbm91dCB2ZWMzIHNpbmdsZVNjYXR0ZXIsIGlub3V0IHZlYzMgbXVsdGlTY2F0dGVyICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2tfUm91Z2huZXNzRGVwZW5kZW50KCBzcGVjdWxhckNvbG9yLCBkb3ROViwgcm91Z2huZXNzICk7XFxuXFx0dmVjMiBicmRmID0gaW50ZWdyYXRlU3BlY3VsYXJCUkRGKCBkb3ROViwgcm91Z2huZXNzICk7XFxuXFx0dmVjMyBGc3NFc3MgPSBGICogYnJkZi54ICsgYnJkZi55O1xcblxcdGZsb2F0IEVzcyA9IGJyZGYueCArIGJyZGYueTtcXG5cXHRmbG9hdCBFbXMgPSAxLjAgLSBFc3M7XFxuXFx0dmVjMyBGYXZnID0gc3BlY3VsYXJDb2xvciArICggMS4wIC0gc3BlY3VsYXJDb2xvciApICogMC4wNDc2MTk7XFx0dmVjMyBGbXMgPSBGc3NFc3MgKiBGYXZnIC8gKCAxLjAgLSBFbXMgKiBGYXZnICk7XFxuXFx0c2luZ2xlU2NhdHRlciArPSBGc3NFc3M7XFxuXFx0bXVsdGlTY2F0dGVyICs9IEZtcyAqIEVtcztcXG59XFxuZmxvYXQgR19CbGlublBob25nX0ltcGxpY2l0KCApIHtcXG5cXHRyZXR1cm4gMC4yNTtcXG59XFxuZmxvYXQgRF9CbGlublBob25nKCBjb25zdCBpbiBmbG9hdCBzaGluaW5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogKCBzaGluaW5lc3MgKiAwLjUgKyAxLjAgKSAqIHBvdyggZG90TkgsIHNoaW5pbmVzcyApO1xcbn1cXG52ZWMzIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcyApIHtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgZ2VvbWV0cnkudmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfQmxpbm5QaG9uZ19JbXBsaWNpdCggKTtcXG5cXHRmbG9hdCBEID0gRF9CbGlublBob25nKCBzaGluaW5lc3MsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbmZsb2F0IEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggY29uc3QgaW4gZmxvYXQgZ2d4Um91Z2huZXNzICkge1xcblxcdHJldHVybiAoIDIuMCAvIHBvdzIoIGdneFJvdWdobmVzcyArIDAuMDAwMSApIC0gMi4wICk7XFxufVxcbmZsb2F0IEJsaW5uRXhwb25lbnRUb0dHWFJvdWdobmVzcyggY29uc3QgaW4gZmxvYXQgYmxpbm5FeHBvbmVudCApIHtcXG5cXHRyZXR1cm4gc3FydCggMi4wIC8gKCBibGlubkV4cG9uZW50ICsgMi4wICkgKTtcXG59XFxuI2lmIGRlZmluZWQoIFVTRV9TSEVFTiApXFxuZmxvYXQgRF9DaGFybGllKGZsb2F0IHJvdWdobmVzcywgZmxvYXQgTm9IKSB7XFxuXFx0ZmxvYXQgaW52QWxwaGEgID0gMS4wIC8gcm91Z2huZXNzO1xcblxcdGZsb2F0IGNvczJoID0gTm9IICogTm9IO1xcblxcdGZsb2F0IHNpbjJoID0gbWF4KDEuMCAtIGNvczJoLCAwLjAwNzgxMjUpO1xcdHJldHVybiAoMi4wICsgaW52QWxwaGEpICogcG93KHNpbjJoLCBpbnZBbHBoYSAqIDAuNSkgLyAoMi4wICogUEkpO1xcbn1cXG5mbG9hdCBWX05ldWJlbHQoZmxvYXQgTm9WLCBmbG9hdCBOb0wpIHtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoMS4wIC8gKDQuMCAqIChOb0wgKyBOb1YgLSBOb0wgKiBOb1YpKSk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9TaGVlbiggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiB2ZWMzIEwsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIHZlYzMgc3BlY3VsYXJDb2xvciApIHtcXG5cXHR2ZWMzIE4gPSBnZW9tZXRyeS5ub3JtYWw7XFxuXFx0dmVjMyBWID0gZ2VvbWV0cnkudmlld0RpcjtcXG5cXHR2ZWMzIEggPSBub3JtYWxpemUoIFYgKyBMICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBOLCBIICkgKTtcXG5cXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIERfQ2hhcmxpZSggcm91Z2huZXNzLCBkb3ROSCApICogVl9OZXViZWx0KCBkb3QoTiwgViksIGRvdChOLCBMKSApO1xcbn1cXG4jZW5kaWZcIjtcclxuXHJcbnZhciBidW1wbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQlVNUE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGJ1bXBNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBidW1wU2NhbGU7XFxuXFx0dmVjMiBkSGR4eV9md2QoKSB7XFxuXFx0XFx0dmVjMiBkU1RkeCA9IGRGZHgoIHZVdiApO1xcblxcdFxcdHZlYzIgZFNUZHkgPSBkRmR5KCB2VXYgKTtcXG5cXHRcXHRmbG9hdCBIbGwgPSBidW1wU2NhbGUgKiB0ZXh0dXJlMkQoIGJ1bXBNYXAsIHZVdiApLng7XFxuXFx0XFx0ZmxvYXQgZEJ4ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeCApLnggLSBIbGw7XFxuXFx0XFx0ZmxvYXQgZEJ5ID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKyBkU1RkeSApLnggLSBIbGw7XFxuXFx0XFx0cmV0dXJuIHZlYzIoIGRCeCwgZEJ5ICk7XFxuXFx0fVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbEFyYiggdmVjMyBzdXJmX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgZEhkeHkgKSB7XFxuXFx0XFx0dmVjMyB2U2lnbWFYID0gdmVjMyggZEZkeCggc3VyZl9wb3MueCApLCBkRmR4KCBzdXJmX3Bvcy55ICksIGRGZHgoIHN1cmZfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgdlNpZ21hWSA9IHZlYzMoIGRGZHkoIHN1cmZfcG9zLnggKSwgZEZkeSggc3VyZl9wb3MueSApLCBkRmR5KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZOID0gc3VyZl9ub3JtO1xcblxcdFxcdHZlYzMgUjEgPSBjcm9zcyggdlNpZ21hWSwgdk4gKTtcXG5cXHRcXHR2ZWMzIFIyID0gY3Jvc3MoIHZOLCB2U2lnbWFYICk7XFxuXFx0XFx0ZmxvYXQgZkRldCA9IGRvdCggdlNpZ21hWCwgUjEgKTtcXG5cXHRcXHRmRGV0ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHR2ZWMzIHZHcmFkID0gc2lnbiggZkRldCApICogKCBkSGR4eS54ICogUjEgKyBkSGR4eS55ICogUjIgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCBhYnMoIGZEZXQgKSAqIHN1cmZfbm9ybSAtIHZHcmFkICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmVjNCBwbGFuZTtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xcblxcdFxcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRpZiAoIGRvdCggdlZpZXdQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgZGlzY2FyZDtcXG5cXHR9XFxuXFx0I2lmIFVOSU9OX0NMSVBQSU5HX1BMQU5FUyA8IE5VTV9DTElQUElOR19QTEFORVNcXG5cXHRcXHRib29sIGNsaXBwZWQgPSB0cnVlO1xcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7IGkgKysgKSB7XFxuXFx0XFx0XFx0cGxhbmUgPSBjbGlwcGluZ1BsYW5lc1sgaSBdO1xcblxcdFxcdFxcdGNsaXBwZWQgPSAoIGRvdCggdlZpZXdQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgJiYgY2xpcHBlZDtcXG5cXHRcXHR9XFxuXFx0XFx0aWYgKCBjbGlwcGVkICkgZGlzY2FyZDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0I2lmICEgZGVmaW5lZCggU1RBTkRBUkQgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gdmVjNCBjbGlwcGluZ1BsYW5lc1sgTlVNX0NMSVBQSU5HX1BMQU5FUyBdO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwICYmICEgZGVmaW5lZCggU1RBTkRBUkQgKSAmJiAhIGRlZmluZWQoIFBIT05HICkgJiYgISBkZWZpbmVkKCBNQVRDQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMCAmJiAhIGRlZmluZWQoIFNUQU5EQVJEICkgJiYgISBkZWZpbmVkKCBQSE9ORyApICYmICEgZGVmaW5lZCggTUFUQ0FQIClcXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBjb2xvcl9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNvbG9yX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNvbG9yX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBjb2xvcl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IueHl6ID0gY29sb3IueHl6O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNvbW1vbiA9IFwiI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU5XFxuI2RlZmluZSBQSTIgNi4yODMxODUzMDcxOFxcbiNkZWZpbmUgUElfSEFMRiAxLjU3MDc5NjMyNjc5NDlcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFxcbiNkZWZpbmUgTE9HMiAxLjQ0MjY5NVxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuI2lmbmRlZiBzYXR1cmF0ZVxcbiNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG4jZGVmaW5lIHdoaXRlQ29tcGxlbWVudChhKSAoIDEuMCAtIHNhdHVyYXRlKCBhICkgKVxcbmZsb2F0IHBvdzIoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4Kng7IH1cXG5mbG9hdCBwb3czKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4Kng7IH1cXG5mbG9hdCBwb3c0KCBjb25zdCBpbiBmbG9hdCB4ICkgeyBmbG9hdCB4MiA9IHgqeDsgcmV0dXJuIHgyKngyOyB9XFxuZmxvYXQgYXZlcmFnZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHsgcmV0dXJuIGRvdCggY29sb3IsIHZlYzMoIDAuMzMzMyApICk7IH1cXG5oaWdocCBmbG9hdCByYW5kKCBjb25zdCBpbiB2ZWMyIHV2ICkge1xcblxcdGNvbnN0IGhpZ2hwIGZsb2F0IGEgPSAxMi45ODk4LCBiID0gNzguMjMzLCBjID0gNDM3NTguNTQ1MztcXG5cXHRoaWdocCBmbG9hdCBkdCA9IGRvdCggdXYueHksIHZlYzIoIGEsYiApICksIHNuID0gbW9kKCBkdCwgUEkgKTtcXG5cXHRyZXR1cm4gZnJhY3Qoc2luKHNuKSAqIGMpO1xcbn1cXG4jaWZkZWYgSElHSF9QUkVDSVNJT05cXG5cXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7IHJldHVybiBsZW5ndGgoIHYgKTsgfVxcbiNlbHNlXFxuXFx0ZmxvYXQgbWF4MyggdmVjMyB2ICkgeyByZXR1cm4gbWF4KCBtYXgoIHYueCwgdi55ICksIHYueiApOyB9XFxuXFx0ZmxvYXQgcHJlY2lzaW9uU2FmZUxlbmd0aCggdmVjMyB2ICkge1xcblxcdFxcdGZsb2F0IG1heENvbXBvbmVudCA9IG1heDMoIGFicyggdiApICk7XFxuXFx0XFx0cmV0dXJuIGxlbmd0aCggdiAvIG1heENvbXBvbmVudCApICogbWF4Q29tcG9uZW50O1xcblxcdH1cXG4jZW5kaWZcXG5zdHJ1Y3QgSW5jaWRlbnRMaWdodCB7XFxuXFx0dmVjMyBjb2xvcjtcXG5cXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRib29sIHZpc2libGU7XFxufTtcXG5zdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xcblxcdHZlYzMgZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGRpcmVjdFNwZWN1bGFyO1xcblxcdHZlYzMgaW5kaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcXG59O1xcbnN0cnVjdCBHZW9tZXRyaWNDb250ZXh0IHtcXG5cXHR2ZWMzIHBvc2l0aW9uO1xcblxcdHZlYzMgbm9ybWFsO1xcblxcdHZlYzMgdmlld0RpcjtcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0dmVjMyBjbGVhcmNvYXROb3JtYWw7XFxuI2VuZGlmXFxufTtcXG52ZWMzIHRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggZGlyLCAwLjAgKSApLnh5eiApO1xcbn1cXG52ZWMzIGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCAoIHZlYzQoIGRpciwgMC4wICkgKiBtYXRyaXggKS54eXogKTtcXG59XFxudmVjMyBwcm9qZWN0T25QbGFuZShpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRmbG9hdCBkaXN0YW5jZSA9IGRvdCggcGxhbmVOb3JtYWwsIHBvaW50IC0gcG9pbnRPblBsYW5lICk7XFxuXFx0cmV0dXJuIC0gZGlzdGFuY2UgKiBwbGFuZU5vcm1hbCArIHBvaW50O1xcbn1cXG5mbG9hdCBzaWRlT2ZQbGFuZSggaW4gdmVjMyBwb2ludCwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIHNpZ24oIGRvdCggcG9pbnQgLSBwb2ludE9uUGxhbmUsIHBsYW5lTm9ybWFsICkgKTtcXG59XFxudmVjMyBsaW5lUGxhbmVJbnRlcnNlY3QoIGluIHZlYzMgcG9pbnRPbkxpbmUsIGluIHZlYzMgbGluZURpcmVjdGlvbiwgaW4gdmVjMyBwb2ludE9uUGxhbmUsIGluIHZlYzMgcGxhbmVOb3JtYWwgKSB7XFxuXFx0cmV0dXJuIGxpbmVEaXJlY3Rpb24gKiAoIGRvdCggcGxhbmVOb3JtYWwsIHBvaW50T25QbGFuZSAtIHBvaW50T25MaW5lICkgLyBkb3QoIHBsYW5lTm9ybWFsLCBsaW5lRGlyZWN0aW9uICkgKSArIHBvaW50T25MaW5lO1xcbn1cXG5tYXQzIHRyYW5zcG9zZU1hdDMoIGNvbnN0IGluIG1hdDMgbSApIHtcXG5cXHRtYXQzIHRtcDtcXG5cXHR0bXBbIDAgXSA9IHZlYzMoIG1bIDAgXS54LCBtWyAxIF0ueCwgbVsgMiBdLnggKTtcXG5cXHR0bXBbIDEgXSA9IHZlYzMoIG1bIDAgXS55LCBtWyAxIF0ueSwgbVsgMiBdLnkgKTtcXG5cXHR0bXBbIDIgXSA9IHZlYzMoIG1bIDAgXS56LCBtWyAxIF0ueiwgbVsgMiBdLnogKTtcXG5cXHRyZXR1cm4gdG1wO1xcbn1cXG5mbG9hdCBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkge1xcblxcdHZlYzMgd2VpZ2h0cyA9IHZlYzMoIDAuMjEyNiwgMC43MTUyLCAwLjA3MjIgKTtcXG5cXHRyZXR1cm4gZG90KCB3ZWlnaHRzLCBjb2xvci5yZ2IgKTtcXG59XFxuYm9vbCBpc1BlcnNwZWN0aXZlTWF0cml4KCBtYXQ0IG0gKSB7XFxuICByZXR1cm4gbVsgMiBdWyAzIF0gPT0gLSAxLjA7XFxufVwiO1xyXG5cclxudmFyIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudCA9IFwiI2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG4jZGVmaW5lIGN1YmVVVl90ZXh0dXJlU2l6ZSAoMTAyNC4wKVxcbmludCBnZXRGYWNlRnJvbURpcmVjdGlvbih2ZWMzIGRpcmVjdGlvbikge1xcblxcdHZlYzMgYWJzRGlyZWN0aW9uID0gYWJzKGRpcmVjdGlvbik7XFxuXFx0aW50IGZhY2UgPSAtMTtcXG5cXHRpZiggYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueiApIHtcXG5cXHRcXHRpZihhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi55IClcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnggPiAwLjAgPyAwIDogMztcXG5cXHRcXHRlbHNlXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMSA6IDQ7XFxuXFx0fVxcblxcdGVsc2Uge1xcblxcdFxcdGlmKGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueiA+IDAuMCA/IDIgOiA1O1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxIDogNDtcXG5cXHR9XFxuXFx0cmV0dXJuIGZhY2U7XFxufVxcbiNkZWZpbmUgY3ViZVVWX21heExvZHMxICAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAxLjApXFxuI2RlZmluZSBjdWJlVVZfcmFuZ2VDbGFtcCAoZXhwMigoNi4wIC0gMS4wKSAqIDIuMCkpXFxudmVjMiBNaXBMZXZlbEluZm8oIHZlYzMgdmVjLCBmbG9hdCByb3VnaG5lc3NMZXZlbCwgZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IHNjYWxlID0gZXhwMihjdWJlVVZfbWF4TG9kczEgLSByb3VnaG5lc3NMZXZlbCk7XFxuXFx0ZmxvYXQgZHhSb3VnaG5lc3MgPSBkRmR4KHJvdWdobmVzcyk7XFxuXFx0ZmxvYXQgZHlSb3VnaG5lc3MgPSBkRmR5KHJvdWdobmVzcyk7XFxuXFx0dmVjMyBkeCA9IGRGZHgoIHZlYyAqIHNjYWxlICogZHhSb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIGR5ID0gZEZkeSggdmVjICogc2NhbGUgKiBkeVJvdWdobmVzcyApO1xcblxcdGZsb2F0IGQgPSBtYXgoIGRvdCggZHgsIGR4ICksIGRvdCggZHksIGR5ICkgKTtcXG5cXHRkID0gY2xhbXAoZCwgMS4wLCBjdWJlVVZfcmFuZ2VDbGFtcCk7XFxuXFx0ZmxvYXQgbWlwTGV2ZWwgPSAwLjUgKiBsb2cyKGQpO1xcblxcdHJldHVybiB2ZWMyKGZsb29yKG1pcExldmVsKSwgZnJhY3QobWlwTGV2ZWwpKTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczIgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMi4wKVxcbiNkZWZpbmUgY3ViZVVWX3JjcFRleHR1cmVTaXplICgxLjAgLyBjdWJlVVZfdGV4dHVyZVNpemUpXFxudmVjMiBnZXRDdWJlVVYodmVjMyBkaXJlY3Rpb24sIGZsb2F0IHJvdWdobmVzc0xldmVsLCBmbG9hdCBtaXBMZXZlbCkge1xcblxcdG1pcExldmVsID0gcm91Z2huZXNzTGV2ZWwgPiBjdWJlVVZfbWF4TG9kczIgLSAzLjAgPyAwLjAgOiBtaXBMZXZlbDtcXG5cXHRmbG9hdCBhID0gMTYuMCAqIGN1YmVVVl9yY3BUZXh0dXJlU2l6ZTtcXG5cXHR2ZWMyIGV4cDJfcGFja2VkID0gZXhwMiggdmVjMiggcm91Z2huZXNzTGV2ZWwsIG1pcExldmVsICkgKTtcXG5cXHR2ZWMyIHJjcF9leHAyX3BhY2tlZCA9IHZlYzIoIDEuMCApIC8gZXhwMl9wYWNrZWQ7XFxuXFx0ZmxvYXQgcG93U2NhbGUgPSBleHAyX3BhY2tlZC54ICogZXhwMl9wYWNrZWQueTtcXG5cXHRmbG9hdCBzY2FsZSA9IHJjcF9leHAyX3BhY2tlZC54ICogcmNwX2V4cDJfcGFja2VkLnkgKiAwLjI1O1xcblxcdGZsb2F0IG1pcE9mZnNldCA9IDAuNzUqKDEuMCAtIHJjcF9leHAyX3BhY2tlZC55KSAqIHJjcF9leHAyX3BhY2tlZC54O1xcblxcdGJvb2wgYlJlcyA9IG1pcExldmVsID09IDAuMDtcXG5cXHRzY2FsZSA9ICBiUmVzICYmIChzY2FsZSA8IGEpID8gYSA6IHNjYWxlO1xcblxcdHZlYzMgcjtcXG5cXHR2ZWMyIG9mZnNldDtcXG5cXHRpbnQgZmFjZSA9IGdldEZhY2VGcm9tRGlyZWN0aW9uKGRpcmVjdGlvbik7XFxuXFx0ZmxvYXQgcmNwUG93U2NhbGUgPSAxLjAgLyBwb3dTY2FsZTtcXG5cXHRpZiggZmFjZSA9PSAwKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMC4wK21pcE9mZnNldCwwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMSkge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi55LCBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnopO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoc2NhbGUrbWlwT2Zmc2V0LCAwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMikge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMi4wKnNjYWxlK21pcE9mZnNldCwgMC43NSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gYSA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDMpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueCwgZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDAuMCttaXBPZmZzZXQsMC41ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyAwLjAgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSA0KSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnksIGRpcmVjdGlvbi54LCAtZGlyZWN0aW9uLnopO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoc2NhbGUrbWlwT2Zmc2V0LCAwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueiwgLWRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigyLjAqc2NhbGUrbWlwT2Zmc2V0LCAwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRyID0gbm9ybWFsaXplKHIpO1xcblxcdGZsb2F0IHRleGVsT2Zmc2V0ID0gMC41ICogY3ViZVVWX3JjcFRleHR1cmVTaXplO1xcblxcdHZlYzIgcyA9ICggci55eiAvIGFicyggci54ICkgKyB2ZWMyKCAxLjAgKSApICogMC41O1xcblxcdHZlYzIgYmFzZSA9IG9mZnNldCArIHZlYzIoIHRleGVsT2Zmc2V0ICk7XFxuXFx0cmV0dXJuIGJhc2UgKyBzICogKCBzY2FsZSAtIDIuMCAqIHRleGVsT2Zmc2V0ICk7XFxufVxcbiNkZWZpbmUgY3ViZVVWX21heExvZHMzIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDMuMClcXG52ZWM0IHRleHR1cmVDdWJlVVYoIHNhbXBsZXIyRCBlbnZNYXAsIHZlYzMgcmVmbGVjdGVkRGlyZWN0aW9uLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgcm91Z2huZXNzVmFsID0gcm91Z2huZXNzKiBjdWJlVVZfbWF4TG9kczM7XFxuXFx0ZmxvYXQgcjEgPSBmbG9vcihyb3VnaG5lc3NWYWwpO1xcblxcdGZsb2F0IHIyID0gcjEgKyAxLjA7XFxuXFx0ZmxvYXQgdCA9IGZyYWN0KHJvdWdobmVzc1ZhbCk7XFxuXFx0dmVjMiBtaXBJbmZvID0gTWlwTGV2ZWxJbmZvKHJlZmxlY3RlZERpcmVjdGlvbiwgcjEsIHJvdWdobmVzcyk7XFxuXFx0ZmxvYXQgcyA9IG1pcEluZm8ueTtcXG5cXHRmbG9hdCBsZXZlbDAgPSBtaXBJbmZvLng7XFxuXFx0ZmxvYXQgbGV2ZWwxID0gbGV2ZWwwICsgMS4wO1xcblxcdGxldmVsMSA9IGxldmVsMSA+IDUuMCA/IDUuMCA6IGxldmVsMTtcXG5cXHRsZXZlbDAgKz0gbWluKCBmbG9vciggcyArIDAuNSApLCA1LjAgKTtcXG5cXHR2ZWMyIHV2XzEwID0gZ2V0Q3ViZVVWKHJlZmxlY3RlZERpcmVjdGlvbiwgcjEsIGxldmVsMCk7XFxuXFx0dmVjNCBjb2xvcjEwID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dl8xMCkpO1xcblxcdHZlYzIgdXZfMjAgPSBnZXRDdWJlVVYocmVmbGVjdGVkRGlyZWN0aW9uLCByMiwgbGV2ZWwwKTtcXG5cXHR2ZWM0IGNvbG9yMjAgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2XzIwKSk7XFxuXFx0dmVjNCByZXN1bHQgPSBtaXgoY29sb3IxMCwgY29sb3IyMCwgdCk7XFxuXFx0cmV0dXJuIHZlYzQocmVzdWx0LnJnYiwgMS4wKTtcXG59XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgZGVmYXVsdG5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBvYmplY3ROb3JtYWw7XFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSBtYXQzKCBpbnN0YW5jZU1hdHJpeCApICogdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxudHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jaWZkZWYgRkxJUF9TSURFRFxcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gLSB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdFRhbmdlbnQ7XFxuXFx0I2lmZGVmIEZMSVBfU0lERURcXG5cXHRcXHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSAtIHRyYW5zZm9ybWVkVGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlzcGxhY2VtZW50TWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50U2NhbGU7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRCaWFzO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0dHJhbnNmb3JtZWQgKz0gbm9ybWFsaXplKCBvYmplY3ROb3JtYWwgKSAqICggdGV4dHVyZTJEKCBkaXNwbGFjZW1lbnRNYXAsIHZVdiApLnggKiBkaXNwbGFjZW1lbnRTY2FsZSArIGRpc3BsYWNlbWVudEJpYXMgKTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBlbWlzc2l2ZW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZlYzQgZW1pc3NpdmVDb2xvciA9IHRleHR1cmUyRCggZW1pc3NpdmVNYXAsIHZVdiApO1xcblxcdGVtaXNzaXZlQ29sb3IucmdiID0gZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyKCBlbWlzc2l2ZUNvbG9yICkucmdiO1xcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgZW5jb2RpbmdzX2ZyYWdtZW50ID0gXCJnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKCBnbF9GcmFnQ29sb3IgKTtcIjtcclxuXHJcbnZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9IFwiXFxudmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCBnYW1tYUZhY3RvciApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBMaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUuYSApO1xcbn1cXG52ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBSR0JFVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRSggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgoIG1heCggdmFsdWUuciwgdmFsdWUuZyApLCB2YWx1ZS5iICk7XFxuXFx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvIGV4cDIoIGZFeHAgKSwgKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wICk7XFxufVxcbnZlYzQgUkdCTVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogdmFsdWUuYSAqIG1heFJhbmdlLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQk0oIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUuciwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBNID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xcblxcdE0gPSBjZWlsKCBNICogMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyAoIE0gKiBtYXhSYW5nZSApLCBNICk7XFxufVxcbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCAoIG1heFJhbmdlIC8gMjU1LjAgKSAvIHZhbHVlLmEgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JEKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgRCA9IG1heCggbWF4UmFuZ2UgLyBtYXhSR0IsIDEuMCApO1xcblxcdEQgPSBtaW4oIGZsb29yKCBEICkgLyAyNTUuMCwgMS4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggRCAqICggMjU1LjAgLyBtYXhSYW5nZSApICksIEQgKTtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2TSA9IG1hdDMoIDAuMjIwOSwgMC4zMzkwLCAwLjQxODQsIDAuMTEzOCwgMC42NzgwLCAwLjczMTksIDAuMDEwMiwgMC4xMTMwLCAwLjI5NjkgKTtcXG52ZWM0IExpbmVhclRvTG9nTHV2KCBpbiB2ZWM0IHZhbHVlICkgIHtcXG5cXHR2ZWMzIFhwX1lfWFlacCA9IGNMb2dMdXZNICogdmFsdWUucmdiO1xcblxcdFhwX1lfWFlacCA9IG1heCggWHBfWV9YWVpwLCB2ZWMzKCAxZS02LCAxZS02LCAxZS02ICkgKTtcXG5cXHR2ZWM0IHZSZXN1bHQ7XFxuXFx0dlJlc3VsdC54eSA9IFhwX1lfWFlacC54eSAvIFhwX1lfWFlacC56O1xcblxcdGZsb2F0IExlID0gMi4wICogbG9nMihYcF9ZX1hZWnAueSkgKyAxMjcuMDtcXG5cXHR2UmVzdWx0LncgPSBmcmFjdCggTGUgKTtcXG5cXHR2UmVzdWx0LnogPSAoIExlIC0gKCBmbG9vciggdlJlc3VsdC53ICogMjU1LjAgKSApIC8gMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2UmVzdWx0O1xcbn1cXG5jb25zdCBtYXQzIGNMb2dMdXZJbnZlcnNlTSA9IG1hdDMoIDYuMDAxNCwgLTIuNzAwOCwgLTEuNzk5NiwgLTEuMzMyMCwgMy4xMDI5LCAtNS43NzIxLCAwLjMwMDgsIC0xLjA4ODIsIDUuNjI2OCApO1xcbnZlYzQgTG9nTHV2VG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgTGUgPSB2YWx1ZS56ICogMjU1LjAgKyB2YWx1ZS53O1xcblxcdHZlYzMgWHBfWV9YWVpwO1xcblxcdFhwX1lfWFlacC55ID0gZXhwMiggKCBMZSAtIDEyNy4wICkgLyAyLjAgKTtcXG5cXHRYcF9ZX1hZWnAueiA9IFhwX1lfWFlacC55IC8gdmFsdWUueTtcXG5cXHRYcF9ZX1hZWnAueCA9IHZhbHVlLnggKiBYcF9ZX1hZWnAuejtcXG5cXHR2ZWMzIHZSR0IgPSBjTG9nTHV2SW52ZXJzZU0gKiBYcF9ZX1hZWnAucmdiO1xcblxcdHJldHVybiB2ZWM0KCBtYXgoIHZSR0IsIDAuMCApLCAxLjAgKTtcXG59XCI7XHJcblxyXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIG5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggY2FtZXJhVG9WZXJ0ZXgsIHdvcmxkTm9ybWFsICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwgMC4wLCAxLjAgKSApO1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRlbnZDb2xvciA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudkNvbG9yICk7XFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHR1bmlmb3JtIGludCBtYXhNaXBMZXZlbDtcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdFxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGVudm1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0I2RlZmluZSBFTlZfV09STERQT1NcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGVudm1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHxkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0I2RlZmluZSBFTlZfV09STERQT1NcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGVudm1hcF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB3b3JsZFBvc2l0aW9uLnh5eiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGZvZ192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0Zm9nRGVwdGggPSAtbXZQb3NpdGlvbi56O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGZvZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGZvZ19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiBmb2dEZXB0aCAqIGZvZ0RlcHRoICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGZvZ0RlcHRoICk7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGZvZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVE9PTlxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50TWFwO1xcblxcdHZlYzMgZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCB2ZWMzIG5vcm1hbCwgdmVjMyBsaWdodERpcmVjdGlvbiApIHtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xcblxcdFxcdHZlYzIgY29vcmQgPSB2ZWMyKCBkb3ROTCAqIDAuNSArIDAuNSwgMC4wICk7XFxuXFx0XFx0I2lmZGVmIFVTRV9HUkFESUVOVE1BUFxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGdyYWRpZW50TWFwLCBjb29yZCApLnJnYjtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiAoIGNvb3JkLnggPCAwLjcgKSA/IHZlYzMoIDAuNyApIDogdmVjMyggMS4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxpZ2h0bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IFBJICogdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApLnh5eiAqIGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxpZ2h0c19sYW1iZXJ0X3ZlcnRleCA9IFwidmVjMyBkaWZmdXNlID0gdmVjMyggMS4wICk7XFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IG12UG9zaXRpb24ueHl6O1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCAtbXZQb3NpdGlvbi54eXogKTtcXG5HZW9tZXRyaWNDb250ZXh0IGJhY2tHZW9tZXRyeTtcXG5iYWNrR2VvbWV0cnkucG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5iYWNrR2VvbWV0cnkubm9ybWFsID0gLWdlb21ldHJ5Lm5vcm1hbDtcXG5iYWNrR2VvbWV0cnkudmlld0RpciA9IGdlb21ldHJ5LnZpZXdEaXI7XFxudkxpZ2h0RnJvbnQgPSB2ZWMzKCAwLjAgKTtcXG52SW5kaXJlY3RGcm9udCA9IHZlYzMoIDAuMCApO1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2TGlnaHRCYWNrID0gdmVjMyggMC4wICk7XFxuXFx0dkluZGlyZWN0QmFjayA9IHZlYzMoIDAuMCApO1xcbiNlbmRpZlxcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuZmxvYXQgZG90Tkw7XFxudmVjMyBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0c1sgaSBdLCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHRkb3ROTCA9IGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2UgPSBQSSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdFxcdHZMaWdodEZyb250ICs9IHNhdHVyYXRlKCBkb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR2TGlnaHRCYWNrICs9IHNhdHVyYXRlKCAtZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2SW5kaXJlY3RGcm9udCArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5ICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZJbmRpcmVjdEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbGlnaHRzX3BhcnNfYmVnaW4gPSBcInVuaWZvcm0gYm9vbCByZWNlaXZlU2hhZG93O1xcbnVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXG51bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xcbnZlYzMgc2hHZXRJcnJhZGlhbmNlQXQoIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIHNoQ29lZmZpY2llbnRzWyA5IF0gKSB7XFxuXFx0ZmxvYXQgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcXG5cXHR2ZWMzIHJlc3VsdCA9IHNoQ29lZmZpY2llbnRzWyAwIF0gKiAwLjg4NjIyNztcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDIgXSAqIDIuMCAqIDAuNTExNjY0ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA1IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA4IF0gKiAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApO1xcblxcdHJldHVybiByZXN1bHQ7XFxufVxcbnZlYzMgZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbGlnaHRQcm9iZVsgOSBdLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFBvaW50TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gUG9pbnRMaWdodCBwb2ludExpZ2h0c1sgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xcblxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSAoIGRpcmVjdExpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFNwb3RMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGZsb2F0IGNvbmVDb3M7XFxuXFx0XFx0ZmxvYXQgcGVudW1icmFDb3M7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcXG5cXHRcXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvcjtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzE7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XFxuXFx0dW5pZm9ybSBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHRzWyBOVU1fUkVDVF9BUkVBX0xJR0hUUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBza3lDb2xvcjtcXG5cXHRcXHR2ZWMzIGdyb3VuZENvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XFxuXFx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG5cXHR9XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQIClcXG5cXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGUkFDVElPTlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gaW50IG1heE1JUExldmVsICkge1xcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5VmVjLCBmbG9hdCggbWF4TUlQTGV2ZWwgKSApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogd29ybGROb3JtYWwueCwgd29ybGROb3JtYWwueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVZlYywgMS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdmVjNCggMC4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIFBJICogZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTcGVjdWxhck1JUExldmVsKCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHRmbG9hdCBtYXhNSVBMZXZlbFNjYWxhciA9IGZsb2F0KCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdGZsb2F0IHNpZ21hID0gUEkgKiByb3VnaG5lc3MgKiByb3VnaG5lc3MgLyAoIDEuMCArIHJvdWdobmVzcyApO1xcblxcdFxcdGZsb2F0IGRlc2lyZWRNSVBMZXZlbCA9IG1heE1JUExldmVsU2NhbGFyICsgbG9nMiggc2lnbWEgKTtcXG5cXHRcXHRyZXR1cm4gY2xhbXAoIGRlc2lyZWRNSVBMZXZlbCwgMC4wLCBtYXhNSVBMZXZlbFNjYWxhciApO1xcblxcdH1cXG5cXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdCAgdmVjMyByZWZsZWN0VmVjID0gcmVmbGVjdCggLXZpZXdEaXIsIG5vcm1hbCApO1xcblxcdFxcdCAgcmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggbWl4KCByZWZsZWN0VmVjLCBub3JtYWwsIHJvdWdobmVzcyAqIHJvdWdobmVzcykgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdCAgdmVjMyByZWZsZWN0VmVjID0gcmVmcmFjdCggLXZpZXdEaXIsIG5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmVmbGVjdFZlYyA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHJlZmxlY3RWZWMsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHRmbG9hdCBzcGVjdWxhck1JUExldmVsID0gZ2V0U3BlY3VsYXJNSVBMZXZlbCggcm91Z2huZXNzLCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVJlZmxlY3RWZWMgPSB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVVViggZW52TWFwLCBxdWVyeVJlZmxlY3RWZWMsIHJvdWdobmVzcyApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0VRVUlSRUMgKVxcblxcdFxcdFxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0XFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHNhbXBsZVVWLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfU1BIRVJFIClcXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwwLjAsMS4wICkgKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxpZ2h0c19waG9uZ19mcmFnbWVudCA9IFwiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xyXG5cclxudmFyIGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50ID0gXCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XFxuXFx0dmVjM1xcdGRpZmZ1c2VDb2xvcjtcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU2hpbmluZXNzO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTdHJlbmd0aDtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0I2lmZGVmIFRPT05cXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2VuZGlmXFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyApICogbWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aDtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9CbGlublBob25nXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVxcdCgwKVwiO1xyXG5cclxudmFyIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCA9IFwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG5tYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCByb3VnaG5lc3NGYWN0b3IsIDAuMDQsIDEuMCApO1xcbiNpZmRlZiBSRUZMRUNUSVZJVFlcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UICogcG93MiggcmVmbGVjdGl2aXR5ICkgKSwgZGlmZnVzZUNvbG9yLnJnYiwgbWV0YWxuZXNzRmFjdG9yICk7XFxuI2Vsc2VcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcbiNlbmRpZlxcbiNpZmRlZiBDTEVBUkNPQVRcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXQgPSBzYXR1cmF0ZSggY2xlYXJjb2F0ICk7XFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gY2xhbXAoIGNsZWFyY29hdFJvdWdobmVzcywgMC4wNCwgMS4wICk7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBzaGVlbjtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwic3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclJvdWdobmVzcztcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0ZmxvYXQgY2xlYXJjb2F0O1xcblxcdGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOXFxuXFx0dmVjMyBzaGVlbkNvbG9yO1xcbiNlbmRpZlxcbn07XFxuI2RlZmluZSBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMTZcXG4jZGVmaW5lIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4wNFxcbmZsb2F0IGNsZWFyY29hdERIUkFwcHJveCggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROTCApIHtcXG5cXHRyZXR1cm4gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCArICggMS4wIC0gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApICogKCBwb3coIDEuMCAtIGRvdE5MLCA1LjAgKSAqIHBvdyggMS4wIC0gcm91Z2huZXNzLCAyLjAgKSApO1xcbn1cXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeS5ub3JtYWw7XFxuXFx0XFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcztcXG5cXHRcXHR2ZWMzIHJlY3RDb29yZHNbIDQgXTtcXG5cXHRcXHRyZWN0Q29vcmRzWyAwIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFx0XFx0cmVjdENvb3Jkc1sgMSBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDIgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAzIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMiB1diA9IExUQ19Vdiggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHRcXHR2ZWM0IHQxID0gdGV4dHVyZTJEKCBsdGNfMSwgdXYgKTtcXG5cXHRcXHR2ZWM0IHQyID0gdGV4dHVyZTJEKCBsdGNfMiwgdXYgKTtcXG5cXHRcXHRtYXQzIG1JbnYgPSBtYXQzKFxcblxcdFxcdFxcdHZlYzMoIHQxLngsIDAsIHQxLnkgKSxcXG5cXHRcXHRcXHR2ZWMzKCAgICAwLCAxLCAgICAwICksXFxuXFx0XFx0XFx0dmVjMyggdDEueiwgMCwgdDEudyApXFxuXFx0XFx0KTtcXG5cXHRcXHR2ZWMzIGZyZXNuZWwgPSAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKiB0Mi54ICsgKCB2ZWMzKCAxLjAgKSAtIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKSAqIHQyLnkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBsaWdodENvbG9yICogZnJlc25lbCAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbUludiwgcmVjdENvb3JkcyApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbWF0MyggMS4wICksIHJlY3RDb29yZHMgKTtcXG5cXHR9XFxuI2VuZGlmXFxudm9pZCBSRV9EaXJlY3RfUGh5c2ljYWwoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgY2NEb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRcXHR2ZWMzIGNjSXJyYWRpYW5jZSA9IGNjRG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRjY0lycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogY2xlYXJjb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIGNjRG90TkwgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBjY0lycmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhcmNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGNsZWFyY29hdERIUiA9IDAuMDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhcmNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX1NoZWVuKFxcblxcdFxcdFxcdG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLFxcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbixcXG5cXHRcXHRcXHRnZW9tZXRyeSxcXG5cXHRcXHRcXHRtYXRlcmlhbC5zaGVlbkNvbG9yXFxuXFx0XFx0KTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9ICggMS4wIC0gY2xlYXJjb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzKTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9ICggMS4wIC0gY2xlYXJjb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XFxuXFx0I2lmZGVmIENMRUFSQ09BVFxcblxcdFxcdGZsb2F0IGNjRG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gY2xlYXJjb2F0UmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhcmNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdFxcdGZsb2F0IGNjRG90TkwgPSBjY0RvdE5WO1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdERIUiA9IG1hdGVyaWFsLmNsZWFyY29hdCAqIGNsZWFyY29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCBjY0RvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhcmNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgY2xlYXJjb2F0SW52ID0gMS4wIC0gY2xlYXJjb2F0REhSO1xcblxcdHZlYzMgc2luZ2xlU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgbXVsdGlTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2UgPSBpcnJhZGlhbmNlICogUkVDSVBST0NBTF9QSTtcXG5cXHRCUkRGX1NwZWN1bGFyX011bHRpc2NhdHRlcmluZ19FbnZpcm9ubWVudCggZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCBzaW5nbGVTY2F0dGVyaW5nLCBtdWx0aVNjYXR0ZXJpbmcgKTtcXG5cXHR2ZWMzIGRpZmZ1c2UgPSBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiAoIDEuMCAtICggc2luZ2xlU2NhdHRlcmluZyArIG11bHRpU2NhdHRlcmluZyApICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBjbGVhcmNvYXRJbnYgKiByYWRpYW5jZSAqIHNpbmdsZVNjYXR0ZXJpbmc7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1BoeXNpY2FsXFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclxcdFxcdFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWxcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XCI7XHJcblxyXG52YXIgbGlnaHRzX2ZyYWdtZW50X2JlZ2luID0gXCJcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gLSB2Vmlld1Bvc2l0aW9uO1xcbmdlb21ldHJ5Lm5vcm1hbCA9IG5vcm1hbDtcXG5nZW9tZXRyeS52aWV3RGlyID0gbm9ybWFsaXplKCB2Vmlld1Bvc2l0aW9uICk7XFxuI2lmZGVmIENMRUFSQ09BVFxcblxcdGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCA9IGNsZWFyY29hdE5vcm1hbDtcXG4jZW5kaWZcXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xcbiNpZiAoIE5VTV9QT0lOVF9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0IClcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cG9pbnRMaWdodCA9IHBvaW50TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzMoIHBvaW50TGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzMoIHNwb3RMaWdodC5zaGFkb3csIGRpcmVjdExpZ2h0LnZpc2libGUsIHJlY2VpdmVTaGFkb3cgKSApID8gZ2V0U2hhZG93KCBzcG90U2hhZG93TWFwWyBpIF0sIHNwb3RMaWdodC5zaGFkb3dNYXBTaXplLCBzcG90TGlnaHQuc2hhZG93Qmlhcywgc3BvdExpZ2h0LnNoYWRvd1JhZGl1cywgdlNwb3RTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgKCBOVU1fRElSX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgKCBVTlJPTExFRF9MT09QX0lOREVYIDwgTlVNX0RJUl9MSUdIVF9TSEFET1dTIClcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMzKCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmICggTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwICkgJiYgZGVmaW5lZCggUkVfRGlyZWN0X1JlY3RBcmVhIClcXG5cXHRSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9SRUNUX0FSRUFfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHJlY3RBcmVhTGlnaHQgPSByZWN0QXJlYUxpZ2h0c1sgaSBdO1xcblxcdFxcdFJFX0RpcmVjdF9SZWN0QXJlYSggcmVjdEFyZWFMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggUkVfSW5kaXJlY3REaWZmdXNlIClcXG5cXHR2ZWMzIGlibElycmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGxpZ2h0UHJvYmUsIGdlb21ldHJ5ICk7XFxuXFx0I2lmICggTlVNX0hFTUlfTElHSFRTID4gMCApXFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNsZWFyY29hdFJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbGlnaHRzX2ZyYWdtZW50X21hcHMgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXHR2ZWMzIGxpZ2h0TWFwSXJyYWRpYW5jZSA9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRsaWdodE1hcElycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0aXJyYWRpYW5jZSArPSBsaWdodE1hcElycmFkaWFuY2U7XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBTVEFOREFSRCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdGlibElycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggZ2VvbWV0cnksIG1heE1pcExldmVsICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRyYWRpYW5jZSArPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkubm9ybWFsLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcywgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjaWZkZWYgQ0xFQVJDT0FUXFxuXFx0XFx0Y2xlYXJjb2F0UmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCBtYXhNaXBMZXZlbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgaWJsSXJyYWRpYW5jZSwgY2xlYXJjb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBsb2dkZXB0aGJ1Zl9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdGdsX0ZyYWdEZXB0aEVYVCA9IHZJc1BlcnNwZWN0aXZlID09IDEuMCA/IGxvZzIoIHZGcmFnRGVwdGggKSAqIGxvZ0RlcHRoQnVmRkMgKiAwLjUgOiBnbF9GcmFnQ29vcmQuejtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdHZhcnlpbmcgZmxvYXQgdkZyYWdEZXB0aDtcXG5cXHR2YXJ5aW5nIGZsb2F0IHZJc1BlcnNwZWN0aXZlO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBsb2dkZXB0aGJ1Zl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTE9HREVQVEhCVUZcXG5cXHQjaWZkZWYgVVNFX0xPR0RFUFRIQlVGX0VYVFxcblxcdFxcdHZGcmFnRGVwdGggPSAxLjAgKyBnbF9Qb3NpdGlvbi53O1xcblxcdFxcdHZJc1BlcnNwZWN0aXZlID0gZmxvYXQoIGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSApO1xcblxcdCNlbHNlXFxuXFx0XFx0aWYgKCBpc1BlcnNwZWN0aXZlTWF0cml4KCBwcm9qZWN0aW9uTWF0cml4ICkgKSB7XFxuXFx0XFx0XFx0Z2xfUG9zaXRpb24ueiA9IGxvZzIoIG1heCggRVBTSUxPTiwgZ2xfUG9zaXRpb24udyArIDEuMCApICkgKiBsb2dEZXB0aEJ1ZkZDIC0gMS4wO1xcblxcdFxcdFxcdGdsX1Bvc2l0aW9uLnogKj0gZ2xfUG9zaXRpb24udztcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHZlYzQgdGV4ZWxDb2xvciA9IHRleHR1cmUyRCggbWFwLCB2VXYgKTtcXG5cXHR0ZXhlbENvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4ZWxDb2xvciApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSB0ZXhlbENvbG9yO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBtYXBfcGFydGljbGVfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dmVjMiB1diA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSwgMSApICkueHk7XFxuXFx0dmVjNCBtYXBUZXhlbCA9IHRleHR1cmUyRCggbWFwLCB1diApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSBtYXBUZXhlbFRvTGluZWFyKCBtYXBUZXhlbCApO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbWV0YWxuZXNzbWFwX2ZyYWdtZW50ID0gXCJmbG9hdCBtZXRhbG5lc3NGYWN0b3IgPSBtZXRhbG5lc3M7XFxuI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR2ZWM0IHRleGVsTWV0YWxuZXNzID0gdGV4dHVyZTJEKCBtZXRhbG5lc3NNYXAsIHZVdiApO1xcblxcdG1ldGFsbmVzc0ZhY3RvciAqPSB0ZXhlbE1ldGFsbmVzcy5iO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1ldGFsbmVzc01hcDtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwwIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDAgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDEgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMiAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwzIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDMgXTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xcblxcdCNlbHNlXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBtb3JwaHRhcmdldF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDAgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDEgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDIgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDMgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDQgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDUgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDYgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDcgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbm9ybWFsX2ZyYWdtZW50X2JlZ2luID0gXCIjaWZkZWYgRkxBVF9TSEFERURcXG5cXHR2ZWMzIGZkeCA9IHZlYzMoIGRGZHgoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeCggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIGZkeSA9IHZlYzMoIGRGZHkoIHZWaWV3UG9zaXRpb24ueCApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnkgKSwgZEZkeSggdlZpZXdQb3NpdGlvbi56ICkgKTtcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggY3Jvc3MoIGZkeCwgZmR5ICkgKTtcXG4jZWxzZVxcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2ZWMzIHRhbmdlbnQgPSBub3JtYWxpemUoIHZUYW5nZW50ICk7XFxuXFx0XFx0dmVjMyBiaXRhbmdlbnQgPSBub3JtYWxpemUoIHZCaXRhbmdlbnQgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dGFuZ2VudCA9IHRhbmdlbnQgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0XFx0Yml0YW5nZW50ID0gYml0YW5nZW50ICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlxcbnZlYzMgZ2VvbWV0cnlOb3JtYWwgPSBub3JtYWw7XCI7XHJcblxyXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gLSBub3JtYWw7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRub3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1xcbiNlbGlmIGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdG1hdDMgdlRCTiA9IG1hdDMoIHRhbmdlbnQsIGJpdGFuZ2VudCwgbm9ybWFsICk7XFxuXFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRtYXBOLnh5ID0gbm9ybWFsU2NhbGUgKiBtYXBOLnh5O1xcblxcdFxcdG5vcm1hbCA9IG5vcm1hbGl6ZSggdlRCTiAqIG1hcE4gKTtcXG5cXHQjZWxzZVxcblxcdFxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWwyQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBub3JtYWxTY2FsZSwgbm9ybWFsTWFwICk7XFxuXFx0I2VuZGlmXFxuI2VsaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKVxcblxcdG5vcm1hbCA9IHBlcnR1cmJOb3JtYWxBcmIoIC12Vmlld1Bvc2l0aW9uLCBub3JtYWwsIGRIZHh5X2Z3ZCgpICk7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG4jZW5kaWZcXG4jaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG4jZW5kaWZcXG4jaWYgISBkZWZpbmVkICggVVNFX1RBTkdFTlQgKSAmJiAoIGRlZmluZWQgKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCAoIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQICkgKVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzIgbm9ybWFsU2NhbGUsIGluIHNhbXBsZXIyRCBub3JtYWxNYXAgKSB7XFxuXFx0XFx0dmVjMyBxMCA9IHZlYzMoIGRGZHgoIGV5ZV9wb3MueCApLCBkRmR4KCBleWVfcG9zLnkgKSwgZEZkeCggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1xcblxcdFxcdHZlYzIgc3QwID0gZEZkeCggdlV2LnN0ICk7XFxuXFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB2VXYuc3QgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZSA9IHNpZ24oIHN0MS50ICogc3QwLnMgLSBzdDAudCAqIHN0MS5zICk7XFxuXFx0XFx0dmVjMyBTID0gbm9ybWFsaXplKCAoIHEwICogc3QxLnQgLSBxMSAqIHN0MC50ICkgKiBzY2FsZSApO1xcblxcdFxcdHZlYzMgVCA9IG5vcm1hbGl6ZSggKCAtIHEwICogc3QxLnMgKyBxMSAqIHN0MC5zICkgKiBzY2FsZSApO1xcblxcdFxcdHZlYzMgTiA9IG5vcm1hbGl6ZSggc3VyZl9ub3JtICk7XFxuXFx0XFx0dmVjMyBtYXBOID0gdGV4dHVyZTJEKCBub3JtYWxNYXAsIHZVdiApLnh5eiAqIDIuMCAtIDEuMDtcXG5cXHRcXHRtYXBOLnh5ICo9IG5vcm1hbFNjYWxlO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHRib29sIGZyb250RmFjaW5nID0gZG90KCBjcm9zcyggUywgVCApLCBOICkgPiAwLjA7XFxuXFx0XFx0XFx0bWFwTi54eSAqPSAoIGZsb2F0KCBmcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRtYXBOLnh5ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRtYXQzIHRzbiA9IG1hdDMoIFMsIFQsIE4gKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCB0c24gKiBtYXBOICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4gPSBcIiNpZmRlZiBDTEVBUkNPQVRcXG5cXHR2ZWMzIGNsZWFyY29hdE5vcm1hbCA9IGdlb21ldHJ5Tm9ybWFsO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcyA9IFwiI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0bWF0MyB2VEJOID0gbWF0MyggdGFuZ2VudCwgYml0YW5nZW50LCBjbGVhcmNvYXROb3JtYWwgKTtcXG5cXHRcXHR2ZWMzIG1hcE4gPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdFxcdG1hcE4ueHkgPSBjbGVhcmNvYXROb3JtYWxTY2FsZSAqIG1hcE4ueHk7XFxuXFx0XFx0Y2xlYXJjb2F0Tm9ybWFsID0gbm9ybWFsaXplKCB2VEJOICogbWFwTiApO1xcblxcdCNlbHNlXFxuXFx0XFx0Y2xlYXJjb2F0Tm9ybWFsID0gcGVydHVyYk5vcm1hbDJBcmIoIC0gdlZpZXdQb3NpdGlvbiwgY2xlYXJjb2F0Tm9ybWFsLCBjbGVhcmNvYXROb3JtYWxTY2FsZSwgY2xlYXJjb2F0Tm9ybWFsTWFwICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgY2xlYXJjb2F0X25vcm1hbG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXROb3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIGNsZWFyY29hdE5vcm1hbFNjYWxlO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHBhY2tpbmcgPSBcInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcXG59XFxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XFxuXFx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XFxufVxcbmNvbnN0IGZsb2F0IFBhY2tVcHNjYWxlID0gMjU2LiAvIDI1NS47Y29uc3QgZmxvYXQgVW5wYWNrRG93bnNjYWxlID0gMjU1LiAvIDI1Ni47XFxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sICAyNTYuICk7XFxuY29uc3QgdmVjNCBVbnBhY2tGYWN0b3JzID0gVW5wYWNrRG93bnNjYWxlIC8gdmVjNCggUGFja0ZhY3RvcnMsIDEuICk7XFxuY29uc3QgZmxvYXQgU2hpZnRSaWdodDggPSAxLiAvIDI1Ni47XFxudmVjNCBwYWNrRGVwdGhUb1JHQkEoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggZnJhY3QoIHYgKiBQYWNrRmFjdG9ycyApLCB2ICk7XFxuXFx0ci55encgLT0gci54eXogKiBTaGlmdFJpZ2h0ODtcXHRyZXR1cm4gciAqIFBhY2tVcHNjYWxlO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnMgKTtcXG59XFxudmVjNCBlbmNvZGVIYWxmUkdCQSAoIHZlYzIgdiApIHtcXG5cXHR2ZWM0IGVuY29kZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRjb25zdCB2ZWMyIG9mZnNldCA9IHZlYzIoIDEuMCAvIDI1NS4wLCAwLjAgKTtcXG5cXHRlbmNvZGVkLnh5ID0gdmVjMiggdi54LCBmcmFjdCggdi54ICogMjU1LjAgKSApO1xcblxcdGVuY29kZWQueHkgPSBlbmNvZGVkLnh5IC0gKCBlbmNvZGVkLnl5ICogb2Zmc2V0ICk7XFxuXFx0ZW5jb2RlZC56dyA9IHZlYzIoIHYueSwgZnJhY3QoIHYueSAqIDI1NS4wICkgKTtcXG5cXHRlbmNvZGVkLnp3ID0gZW5jb2RlZC56dyAtICggZW5jb2RlZC53dyAqIG9mZnNldCApO1xcblxcdHJldHVybiBlbmNvZGVkO1xcbn1cXG52ZWMyIGRlY29kZUhhbGZSR0JBKCB2ZWM0IHYgKSB7XFxuXFx0cmV0dXJuIHZlYzIoIHYueCArICggdi55IC8gMjU1LjAgKSwgdi56ICsgKCB2LncgLyAyNTUuMCApICk7XFxufVxcbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCB2aWV3WiArIG5lYXIgKSAvICggbmVhciAtIGZhciApO1xcbn1cXG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGxpbmVhckNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xcbn1cXG5mbG9hdCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICgoIGZhciAtIG5lYXIgKSAqIHZpZXdaICk7XFxufVxcbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBpbnZDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIG5lYXIgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiBpbnZDbGlwWiAtIGZhciApO1xcbn1cIjtcclxuXHJcbnZhciBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50ID0gXCIjaWZkZWYgUFJFTVVMVElQTElFRF9BTFBIQVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgKj0gZ2xfRnJhZ0NvbG9yLmE7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgcHJvamVjdF92ZXJ0ZXggPSBcInZlYzQgbXZQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRtdlBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiBtdlBvc2l0aW9uO1xcbiNlbmRpZlxcbm12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiBtdlBvc2l0aW9uO1xcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCI7XHJcblxyXG52YXIgZGl0aGVyaW5nX2ZyYWdtZW50ID0gXCIjaWZkZWYgRElUSEVSSU5HXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IGRpdGhlcmluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgRElUSEVSSU5HXFxuXFx0dmVjMyBkaXRoZXJpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0XFx0ZmxvYXQgZ3JpZF9wb3NpdGlvbiA9IHJhbmQoIGdsX0ZyYWdDb29yZC54eSApO1xcblxcdFxcdHZlYzMgZGl0aGVyX3NoaWZ0X1JHQiA9IHZlYzMoIDAuMjUgLyAyNTUuMCwgLTAuMjUgLyAyNTUuMCwgMC4yNSAvIDI1NS4wICk7XFxuXFx0XFx0ZGl0aGVyX3NoaWZ0X1JHQiA9IG1peCggMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgLTIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIGdyaWRfcG9zaXRpb24gKTtcXG5cXHRcXHRyZXR1cm4gY29sb3IgKyBkaXRoZXJfc2hpZnRfUkdCO1xcblxcdH1cXG4jZW5kaWZcIjtcclxuXHJcbnZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfUk9VR0hORVNTTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgcm91Z2huZXNzTWFwO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZGlyZWN0aW9uYWxTaGFkb3dNYXBbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BvdFNoYWRvd01hcFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHBvaW50U2hhZG93TWFwWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHRmbG9hdCB0ZXh0dXJlMkRDb21wYXJlKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHV2LCBmbG9hdCBjb21wYXJlICkge1xcblxcdFxcdHJldHVybiBzdGVwKCBjb21wYXJlLCB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBkZXB0aHMsIHV2ICkgKSApO1xcblxcdH1cXG5cXHR2ZWMyIHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diApIHtcXG5cXHRcXHRyZXR1cm4gZGVjb2RlSGFsZlJHQkEoIHRleHR1cmUyRCggc2hhZG93LCB1diApICk7XFxuXFx0fVxcblxcdGZsb2F0IFZTTVNoYWRvdyAoc2FtcGxlcjJEIHNoYWRvdywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApe1xcblxcdFxcdGZsb2F0IG9jY2x1c2lvbiA9IDEuMDtcXG5cXHRcXHR2ZWMyIGRpc3RyaWJ1dGlvbiA9IHRleHR1cmUyRERpc3RyaWJ1dGlvbiggc2hhZG93LCB1diApO1xcblxcdFxcdGZsb2F0IGhhcmRfc2hhZG93ID0gc3RlcCggY29tcGFyZSAsIGRpc3RyaWJ1dGlvbi54ICk7XFxuXFx0XFx0aWYgKGhhcmRfc2hhZG93ICE9IDEuMCApIHtcXG5cXHRcXHRcXHRmbG9hdCBkaXN0YW5jZSA9IGNvbXBhcmUgLSBkaXN0cmlidXRpb24ueCA7XFxuXFx0XFx0XFx0ZmxvYXQgdmFyaWFuY2UgPSBtYXgoIDAuMDAwMDAsIGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKTtcXG5cXHRcXHRcXHRmbG9hdCBzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IHZhcmlhbmNlIC8gKHZhcmlhbmNlICsgZGlzdGFuY2UgKiBkaXN0YW5jZSApO1xcdFxcdFxcdHNvZnRuZXNzX3Byb2JhYmlsaXR5ID0gY2xhbXAoICggc29mdG5lc3NfcHJvYmFiaWxpdHkgLSAwLjMgKSAvICggMC45NSAtIDAuMyApLCAwLjAsIDEuMCApO1xcdFxcdFxcdG9jY2x1c2lvbiA9IGNsYW1wKCBtYXgoIGhhcmRfc2hhZG93LCBzb2Z0bmVzc19wcm9iYWJpbGl0eSApLCAwLjAsIDEuMCApO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gb2NjbHVzaW9uO1xcblxcdH1cXG5cXHRmbG9hdCB0ZXh0dXJlMkRTaGFkb3dMZXJwKCBzYW1wbGVyMkQgZGVwdGhzLCB2ZWMyIHNpemUsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKSB7XFxuXFx0XFx0Y29uc3QgdmVjMiBvZmZzZXQgPSB2ZWMyKCAwLjAsIDEuMCApO1xcblxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaXplO1xcblxcdFxcdHZlYzIgY2VudHJvaWRVViA9ICggZmxvb3IoIHV2ICogc2l6ZSAtIDAuNSApICsgMC41ICkgKiB0ZXhlbFNpemU7XFxuXFx0XFx0ZmxvYXQgbGIgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueHgsIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCBsdCA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC54eSwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IHJiID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnl4LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgcnQgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueXksIGNvbXBhcmUgKTtcXG5cXHRcXHR2ZWMyIGYgPSBmcmFjdCggdXYgKiBzaXplICsgMC41ICk7XFxuXFx0XFx0ZmxvYXQgYSA9IG1peCggbGIsIGx0LCBmLnkgKTtcXG5cXHRcXHRmbG9hdCBiID0gbWl4KCByYiwgcnQsIGYueSApO1xcblxcdFxcdGZsb2F0IGMgPSBtaXgoIGEsIGIsIGYueCApO1xcblxcdFxcdHJldHVybiBjO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkICkge1xcblxcdFxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHRcXHRzaGFkb3dDb29yZC54eXogLz0gc2hhZG93Q29vcmQudztcXG5cXHRcXHRzaGFkb3dDb29yZC56ICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0YnZlYzQgaW5GcnVzdHVtVmVjID0gYnZlYzQgKCBzaGFkb3dDb29yZC54ID49IDAuMCwgc2hhZG93Q29vcmQueCA8PSAxLjAsIHNoYWRvd0Nvb3JkLnkgPj0gMC4wLCBzaGFkb3dDb29yZC55IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgaW5GcnVzdHVtID0gYWxsKCBpbkZydXN0dW1WZWMgKTtcXG5cXHRcXHRidmVjMiBmcnVzdHVtVGVzdFZlYyA9IGJ2ZWMyKCBpbkZydXN0dW0sIHNoYWRvd0Nvb3JkLnogPD0gMS4wICk7XFxuXFx0XFx0Ym9vbCBmcnVzdHVtVGVzdCA9IGFsbCggZnJ1c3R1bVRlc3RWZWMgKTtcXG5cXHRcXHRpZiAoIGZydXN0dW1UZXN0ICkge1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgyID0gZHgwIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MiA9IGR5MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeDMgPSBkeDEgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHkzID0gZHkxIC8gMi4wO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTIgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDIsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDMsIGR5MyApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MSApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MSApLCBzaGFkb3dDb29yZC56IClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyAxNy4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICksIHNoYWRvd0Nvb3JkLnogKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1ZTTSApXFxuXFx0XFx0XFx0c2hhZG93ID0gVlNNU2hhZG93KCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRzaGFkb3cgPSB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5LCBzaGFkb3dDb29yZC56ICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiBzaGFkb3c7XFxuXFx0fVxcblxcdHZlYzIgY3ViZVRvVVYoIHZlYzMgdiwgZmxvYXQgdGV4ZWxTaXplWSApIHtcXG5cXHRcXHR2ZWMzIGFic1YgPSBhYnMoIHYgKTtcXG5cXHRcXHRmbG9hdCBzY2FsZVRvQ3ViZSA9IDEuMCAvIG1heCggYWJzVi54LCBtYXgoIGFic1YueSwgYWJzVi56ICkgKTtcXG5cXHRcXHRhYnNWICo9IHNjYWxlVG9DdWJlO1xcblxcdFxcdHYgKj0gc2NhbGVUb0N1YmUgKiAoIDEuMCAtIDIuMCAqIHRleGVsU2l6ZVkgKTtcXG5cXHRcXHR2ZWMyIHBsYW5hciA9IHYueHk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0QVRleGVsID0gMS41ICogdGV4ZWxTaXplWTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RPbmUgPSAxLjAgLSBhbG1vc3RBVGV4ZWw7XFxuXFx0XFx0aWYgKCBhYnNWLnogPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGlmICggdi56ID4gMC4wIClcXG5cXHRcXHRcXHRcXHRwbGFuYXIueCA9IDQuMCAtIHYueDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnggPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25YID0gc2lnbiggdi54ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnogKiBzaWduWCArIDIuMCAqIHNpZ25YO1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueSA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblkgPSBzaWduKCB2LnkgKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueCArIDIuMCAqIHNpZ25ZICsgMi4wO1xcblxcdFxcdFxcdHBsYW5hci55ID0gdi56ICogc2lnblkgLSAyLjA7XFxuXFx0XFx0fVxcblxcdFxcdHJldHVybiB2ZWMyKCAwLjEyNSwgMC4yNSApICogcGxhbmFyICsgdmVjMiggMC4zNzUsIDAuNzUgKTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0UG9pbnRTaGFkb3coIHNhbXBsZXIyRCBzaGFkb3dNYXAsIHZlYzIgc2hhZG93TWFwU2l6ZSwgZmxvYXQgc2hhZG93QmlhcywgZmxvYXQgc2hhZG93UmFkaXVzLCB2ZWM0IHNoYWRvd0Nvb3JkLCBmbG9hdCBzaGFkb3dDYW1lcmFOZWFyLCBmbG9hdCBzaGFkb3dDYW1lcmFGYXIgKSB7XFxuXFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvICggc2hhZG93TWFwU2l6ZSAqIHZlYzIoIDQuMCwgMi4wICkgKTtcXG5cXHRcXHR2ZWMzIGxpZ2h0VG9Qb3NpdGlvbiA9IHNoYWRvd0Nvb3JkLnh5ejtcXG5cXHRcXHRmbG9hdCBkcCA9ICggbGVuZ3RoKCBsaWdodFRvUG9zaXRpb24gKSAtIHNoYWRvd0NhbWVyYU5lYXIgKSAvICggc2hhZG93Q2FtZXJhRmFyIC0gc2hhZG93Q2FtZXJhTmVhciApO1xcdFxcdGRwICs9IHNoYWRvd0JpYXM7XFxuXFx0XFx0dmVjMyBiZDNEID0gbm9ybWFsaXplKCBsaWdodFRvUG9zaXRpb24gKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGICkgfHwgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9WU00gKVxcblxcdFxcdFxcdHZlYzIgb2Zmc2V0ID0gdmVjMiggLSAxLCAxICkgKiBzaGFkb3dSYWRpdXMgKiB0ZXhlbFNpemUueTtcXG5cXHRcXHRcXHRyZXR1cm4gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0cmV0dXJuIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcbiNlbmRpZlwiO1xyXG5cclxudmFyIHNoYWRvd21hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBkaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgc3BvdFNoYWRvd01hdHJpeFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gbWF0NCBwb2ludFNoYWRvd01hdHJpeFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgc2hhZG93bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0dkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSA9IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHR2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gPSBzcG90U2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgc2hhZG93bWFza19wYXJzX2ZyYWdtZW50ID0gXCJmbG9hdCBnZXRTaGFkb3dNYXNrKCkge1xcblxcdGZsb2F0IHNoYWRvdyA9IDEuMDtcXG5cXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodCA9IGRpcmVjdGlvbmFsTGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGFsbCggYnZlYzIoIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0c3BvdExpZ2h0ID0gc3BvdExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBhbGwoIGJ2ZWMyKCBzcG90TGlnaHQuc2hhZG93LCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodCBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYWxsKCBidmVjMiggcG9pbnRMaWdodC5zaGFkb3csIHJlY2VpdmVTaGFkb3cgKSApID8gZ2V0UG9pbnRTaGFkb3coIHBvaW50U2hhZG93TWFwWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93TWFwU2l6ZSwgcG9pbnRMaWdodC5zaGFkb3dCaWFzLCBwb2ludExpZ2h0LnNoYWRvd1JhZGl1cywgdlBvaW50U2hhZG93Q29vcmRbIGkgXSwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFOZWFyLCBwb2ludExpZ2h0LnNoYWRvd0NhbWVyYUZhciApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gc2hhZG93O1xcbn1cIjtcclxuXHJcbnZhciBza2luYmFzZV92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IGJvbmVNYXRYID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnggKTtcXG5cXHRtYXQ0IGJvbmVNYXRZID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnkgKTtcXG5cXHRtYXQ0IGJvbmVNYXRaID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LnogKTtcXG5cXHRtYXQ0IGJvbmVNYXRXID0gZ2V0Qm9uZU1hdHJpeCggc2tpbkluZGV4LncgKTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBza2lubmluZ19wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVTaXplO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCB5ID0gZmxvb3IoIGogLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZU1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZU1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XHJcblxyXG52YXIgc2tpbm5pbmdfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHR2ZWM0IHNraW5uZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRaICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQuejtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcXG5cXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHNraW5ub3JtYWxfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0bWF0NCBza2luTWF0cml4ID0gbWF0NCggMC4wICk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnggKiBib25lTWF0WDtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueSAqIGJvbmVNYXRZO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC56ICogYm9uZU1hdFo7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LncgKiBib25lTWF0VztcXG5cXHRza2luTWF0cml4ICA9IGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbk1hdHJpeCAqIGJpbmRNYXRyaXg7XFxuXFx0b2JqZWN0Tm9ybWFsID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdE5vcm1hbCwgMC4wICkgKS54eXo7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0b2JqZWN0VGFuZ2VudCA9IHZlYzQoIHNraW5NYXRyaXggKiB2ZWM0KCBvYmplY3RUYW5nZW50LCAwLjAgKSApLnh5ejtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcclxuXHJcbnZhciBzcGVjdWxhcm1hcF9mcmFnbWVudCA9IFwiZmxvYXQgc3BlY3VsYXJTdHJlbmd0aDtcXG4jaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dmVjNCB0ZXhlbFNwZWN1bGFyID0gdGV4dHVyZTJEKCBzcGVjdWxhck1hcCwgdlV2ICk7XFxuXFx0c3BlY3VsYXJTdHJlbmd0aCA9IHRleGVsU3BlY3VsYXIucjtcXG4jZWxzZVxcblxcdHNwZWN1bGFyU3RyZW5ndGggPSAxLjA7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHRvbmVtYXBwaW5nX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gdG9uZU1hcHBpbmcoIGdsX0ZyYWdDb2xvci5yZ2IgKTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50ID0gXCIjaWZuZGVmIHNhdHVyYXRlXFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nV2hpdGVQb2ludDtcXG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdHJldHVybiB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3I7XFxufVxcbnZlYzMgUmVpbmhhcmRUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xcbn1cXG4jZGVmaW5lIFVuY2hhcnRlZDJIZWxwZXIoIHggKSBtYXgoICggKCB4ICogKCAwLjE1ICogeCArIDAuMTAgKiAwLjUwICkgKyAwLjIwICogMC4wMiApIC8gKCB4ICogKCAwLjE1ICogeCArIDAuNTAgKSArIDAuMjAgKiAwLjMwICkgKSAtIDAuMDIgLyAwLjMwLCB2ZWMzKCAwLjAgKSApXFxudmVjMyBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIFVuY2hhcnRlZDJIZWxwZXIoIGNvbG9yICkgLyBVbmNoYXJ0ZWQySGVscGVyKCB2ZWMzKCB0b25lTWFwcGluZ1doaXRlUG9pbnQgKSApICk7XFxufVxcbnZlYzMgT3B0aW1pemVkQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG52ZWMzIEFDRVNGaWxtaWNUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggKCBjb2xvciAqICggMi41MSAqIGNvbG9yICsgMC4wMyApICkgLyAoIGNvbG9yICogKCAyLjQzICogY29sb3IgKyAwLjU5ICkgKyAwLjE0ICkgKTtcXG59XCI7XHJcblxyXG52YXIgdXZfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9VVlxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuI2VuZGlmXCI7XHJcblxyXG52YXIgdXZfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfVVZcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2O1xcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciB1dl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfVVZcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHV2Ml9wYXJzX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciB1djJfcGFyc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdGF0dHJpYnV0ZSB2ZWMyIHV2MjtcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIjtcclxuXHJcbnZhciB1djJfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2VXYyID0gdXYyO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIHdvcmxkcG9zX3ZlcnRleCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBESVNUQU5DRSApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQIClcXG5cXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFx0I2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0XFx0d29ybGRQb3NpdGlvbiA9IGluc3RhbmNlTWF0cml4ICogd29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHR3b3JsZFBvc2l0aW9uID0gbW9kZWxNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xcbiNlbmRpZlwiO1xyXG5cclxudmFyIGJhY2tncm91bmRfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdDJEO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHQyRCwgdlV2ICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4Q29sb3IgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG59XCI7XHJcblxyXG52YXIgYmFja2dyb3VuZF92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzIgdlV2O1xcbnVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG52b2lkIG1haW4oKSB7XFxuXFx0dlV2ID0gKCB1dlRyYW5zZm9ybSAqIHZlYzMoIHV2LCAxICkgKS54eTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQoIHBvc2l0aW9uLnh5LCAxLjAsIDEuMCApO1xcbn1cIjtcclxuXHJcbnZhciBjdWJlX2ZyYWcgPSBcInVuaWZvcm0gc2FtcGxlckN1YmUgdEN1YmU7XFxudW5pZm9ybSBmbG9hdCB0RmxpcDtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjNCB0ZXhDb2xvciA9IHRleHR1cmVDdWJlKCB0Q3ViZSwgdmVjMyggdEZsaXAgKiB2V29ybGREaXJlY3Rpb24ueCwgdldvcmxkRGlyZWN0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdGdsX0ZyYWdDb2xvci5hICo9IG9wYWNpdHk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxufVwiO1xyXG5cclxudmFyIGN1YmVfdmVydCA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53O1xcbn1cIjtcclxuXHJcbnZhciBkZXB0aF9mcmFnID0gXCIjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSA9IG9wYWNpdHk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIDEuMCAtIGdsX0ZyYWdDb29yZC56ICksIG9wYWNpdHkgKTtcXG5cXHQjZWxpZiBERVBUSF9QQUNLSU5HID09IDMyMDFcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGdsX0ZyYWdDb29yZC56ICk7XFxuXFx0I2VuZGlmXFxufVwiO1xyXG5cclxudmFyIGRlcHRoX3ZlcnQgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG59XCI7XHJcblxyXG52YXIgZGlzdGFuY2VSR0JBX2ZyYWcgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XCI7XHJcblxyXG52YXIgZGlzdGFuY2VSR0JBX3ZlcnQgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdFxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG59XCI7XHJcblxyXG52YXIgZXF1aXJlY3RfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdEVxdWlyZWN0O1xcbnZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dmVjMyBkaXJlY3Rpb24gPSBub3JtYWxpemUoIHZXb3JsZERpcmVjdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHRFcXVpcmVjdCwgc2FtcGxlVVYgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBtYXBUZXhlbFRvTGluZWFyKCB0ZXhDb2xvciApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBlcXVpcmVjdF92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIGxpbmVkYXNoZWRfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gZmxvYXQgZGFzaFNpemU7XFxudW5pZm9ybSBmbG9hdCB0b3RhbFNpemU7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRpZiAoIG1vZCggdkxpbmVEaXN0YW5jZSwgdG90YWxTaXplICkgPiBkYXNoU2l6ZSApIHtcXG5cXHRcXHRkaXNjYXJkO1xcblxcdH1cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XHJcblxyXG52YXIgbGluZWRhc2hlZF92ZXJ0ID0gXCJ1bmlmb3JtIGZsb2F0IHNjYWxlO1xcbmF0dHJpYnV0ZSBmbG9hdCBsaW5lRGlzdGFuY2U7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0dkxpbmVEaXN0YW5jZSA9IHNjYWxlICogbGluZURpc3RhbmNlO1xcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIG1lc2hiYXNpY19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBtZXNoYmFzaWNfdmVydCA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XHJcblxyXG52YXIgbWVzaGxhbWJlcnRfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdkxpZ2h0RnJvbnQ7XFxudmFyeWluZyB2ZWMzIHZJbmRpcmVjdEZyb250O1xcbiNpZmRlZiBET1VCTEVfU0lERURcXG5cXHR2YXJ5aW5nIHZlYzMgdkxpZ2h0QmFjaztcXG5cXHR2YXJ5aW5nIHZlYzMgdkluZGlyZWN0QmFjaztcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFza19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZJbmRpcmVjdEZyb250IDogdkluZGlyZWN0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2SW5kaXJlY3RGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bGlnaHRtYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2TGlnaHRGcm9udCA6IHZMaWdodEJhY2s7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gdkxpZ2h0RnJvbnQ7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0RpZmZ1c2VfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApICogZ2V0U2hhZG93TWFzaygpO1xcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XFxufVwiO1xyXG5cclxudmFyIG1lc2hsYW1iZXJ0X3ZlcnQgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG52YXJ5aW5nIHZlYzMgdkluZGlyZWN0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcblxcdHZhcnlpbmcgdmVjMyB2SW5kaXJlY3RCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2xhbWJlcnRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcclxuXHJcbnZhciBtZXNobWF0Y2FwX2ZyYWcgPSBcIiNkZWZpbmUgTUFUQ0FQXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gc2FtcGxlcjJEIG1hdGNhcDtcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHR2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XFxuXFx0dmVjMyB5ID0gY3Jvc3MoIHZpZXdEaXIsIHggKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggZG90KCB4LCBub3JtYWwgKSwgZG90KCB5LCBub3JtYWwgKSApICogMC40OTUgKyAwLjU7XFxuXFx0I2lmZGVmIFVTRV9NQVRDQVBcXG5cXHRcXHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XFxuXFx0XFx0bWF0Y2FwQ29sb3IgPSBtYXRjYXBUZXhlbFRvTGluZWFyKCBtYXRjYXBDb2xvciApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBtZXNobWF0Y2FwX3ZlcnQgPSBcIiNkZWZpbmUgTUFUQ0FQXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdFxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxufVwiO1xyXG5cclxudmFyIG1lc2hwaG9uZ19mcmFnID0gXCIjZGVmaW5lIFBIT05HXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gdmVjMyBzcGVjdWxhcjtcXG51bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Z3JhZGllbnRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waG9uZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBtZXNocGhvbmdfdmVydCA9IFwiI2RlZmluZSBQSE9OR1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIG1lc2hwaHlzaWNhbF9mcmFnID0gXCIjZGVmaW5lIFNUQU5EQVJEXFxuI2lmZGVmIFBIWVNJQ0FMXFxuXFx0I2RlZmluZSBSRUZMRUNUSVZJVFlcXG5cXHQjZGVmaW5lIENMRUFSQ09BVFxcblxcdCNkZWZpbmUgVFJBTlNQQVJFTkNZXFxuI2VuZGlmXFxudW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xcbnVuaWZvcm0gZmxvYXQgcm91Z2huZXNzO1xcbnVuaWZvcm0gZmxvYXQgbWV0YWxuZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZkZWYgVFJBTlNQQVJFTkNZXFxuXFx0dW5pZm9ybSBmbG9hdCB0cmFuc3BhcmVuY3k7XFxuI2VuZGlmXFxuI2lmZGVmIFJFRkxFQ1RJVklUWVxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcbiNlbmRpZlxcbiNpZmRlZiBDTEVBUkNPQVRcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyY29hdDtcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOXFxuXFx0dW5pZm9ybSB2ZWMzIHNoZWVuO1xcbiNlbmRpZlxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsZWFyY29hdF9ub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1ldGFsbmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpZmRlZiBUUkFOU1BBUkVOQ1lcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSAqPSBzYXR1cmF0ZSggMS4gLSB0cmFuc3BhcmVuY3kgKyBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKSApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBtZXNocGh5c2ljYWxfdmVydCA9IFwiI2RlZmluZSBTVEFOREFSRFxcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dlRhbmdlbnQgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkVGFuZ2VudCApO1xcblxcdFxcdHZCaXRhbmdlbnQgPSBub3JtYWxpemUoIGNyb3NzKCB2Tm9ybWFsLCB2VGFuZ2VudCApICogdGFuZ2VudC53ICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XHJcblxyXG52YXIgbm9ybWFsX2ZyYWcgPSBcIiNkZWZpbmUgTk9STUFMXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHBhY2tOb3JtYWxUb1JHQiggbm9ybWFsICksIG9wYWNpdHkgKTtcXG59XCI7XHJcblxyXG52YXIgbm9ybWFsX3ZlcnQgPSBcIiNkZWZpbmUgTk9STUFMXFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XFxuXFx0XFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcbn1cIjtcclxuXHJcbnZhciBwb2ludHNfZnJhZyA9IFwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfcGFydGljbGVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cIjtcclxuXHJcbnZhciBwb2ludHNfdmVydCA9IFwidW5pZm9ybSBmbG9hdCBzaXplO1xcbnVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHRnbF9Qb2ludFNpemUgPSBzaXplO1xcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIGdsX1BvaW50U2l6ZSAqPSAoIHNjYWxlIC8gLSBtdlBvc2l0aW9uLnogKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIHNoYWRvd19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgY29sb3I7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbG9yLCBvcGFjaXR5ICogKCAxLjAgLSBnZXRTaGFkb3dNYXNrKCkgKSApO1xcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xyXG5cclxudmFyIHNoYWRvd192ZXJ0ID0gXCIjaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIHNwcml0ZV9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XHJcblxyXG52YXIgc3ByaXRlX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIGNlbnRlcjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdHZlYzIgc2NhbGU7XFxuXFx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XFxuXFx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XFxuXFx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIHNjYWxlICo9IC0gbXZQb3NpdGlvbi56O1xcblxcdCNlbmRpZlxcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xyXG5cclxudmFyIFNoYWRlckNodW5rID0ge1xyXG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcclxuXHRhbHBoYW1hcF9wYXJzX2ZyYWdtZW50OiBhbHBoYW1hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdGFscGhhdGVzdF9mcmFnbWVudDogYWxwaGF0ZXN0X2ZyYWdtZW50LFxyXG5cdGFvbWFwX2ZyYWdtZW50OiBhb21hcF9mcmFnbWVudCxcclxuXHRhb21hcF9wYXJzX2ZyYWdtZW50OiBhb21hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdGJlZ2luX3ZlcnRleDogYmVnaW5fdmVydGV4LFxyXG5cdGJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LFxyXG5cdGJzZGZzOiBic2RmcyxcclxuXHRidW1wbWFwX3BhcnNfZnJhZ21lbnQ6IGJ1bXBtYXBfcGFyc19mcmFnbWVudCxcclxuXHRjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCxcclxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudDogY2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQsXHJcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4OiBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXgsXHJcblx0Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCxcclxuXHRjb2xvcl9mcmFnbWVudDogY29sb3JfZnJhZ21lbnQsXHJcblx0Y29sb3JfcGFyc19mcmFnbWVudDogY29sb3JfcGFyc19mcmFnbWVudCxcclxuXHRjb2xvcl9wYXJzX3ZlcnRleDogY29sb3JfcGFyc192ZXJ0ZXgsXHJcblx0Y29sb3JfdmVydGV4OiBjb2xvcl92ZXJ0ZXgsXHJcblx0Y29tbW9uOiBjb21tb24sXHJcblx0Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50OiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQsXHJcblx0ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg6IGRlZmF1bHRub3JtYWxfdmVydGV4LFxyXG5cdGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleDogZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4LFxyXG5cdGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgsXHJcblx0ZW1pc3NpdmVtYXBfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX2ZyYWdtZW50LFxyXG5cdGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6IGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQsXHJcblx0ZW5jb2RpbmdzX2ZyYWdtZW50OiBlbmNvZGluZ3NfZnJhZ21lbnQsXHJcblx0ZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQ6IGVuY29kaW5nc19wYXJzX2ZyYWdtZW50LFxyXG5cdGVudm1hcF9mcmFnbWVudDogZW52bWFwX2ZyYWdtZW50LFxyXG5cdGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudDogZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50LFxyXG5cdGVudm1hcF9wYXJzX2ZyYWdtZW50OiBlbnZtYXBfcGFyc19mcmFnbWVudCxcclxuXHRlbnZtYXBfcGFyc192ZXJ0ZXg6IGVudm1hcF9wYXJzX3ZlcnRleCxcclxuXHRlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXHJcblx0ZW52bWFwX3ZlcnRleDogZW52bWFwX3ZlcnRleCxcclxuXHRmb2dfdmVydGV4OiBmb2dfdmVydGV4LFxyXG5cdGZvZ19wYXJzX3ZlcnRleDogZm9nX3BhcnNfdmVydGV4LFxyXG5cdGZvZ19mcmFnbWVudDogZm9nX2ZyYWdtZW50LFxyXG5cdGZvZ19wYXJzX2ZyYWdtZW50OiBmb2dfcGFyc19mcmFnbWVudCxcclxuXHRncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50OiBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdGxpZ2h0bWFwX2ZyYWdtZW50OiBsaWdodG1hcF9mcmFnbWVudCxcclxuXHRsaWdodG1hcF9wYXJzX2ZyYWdtZW50OiBsaWdodG1hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdGxpZ2h0c19sYW1iZXJ0X3ZlcnRleDogbGlnaHRzX2xhbWJlcnRfdmVydGV4LFxyXG5cdGxpZ2h0c19wYXJzX2JlZ2luOiBsaWdodHNfcGFyc19iZWdpbixcclxuXHRsaWdodHNfcGhvbmdfZnJhZ21lbnQ6IGxpZ2h0c19waG9uZ19mcmFnbWVudCxcclxuXHRsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudDogbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQsXHJcblx0bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQsXHJcblx0bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50LFxyXG5cdGxpZ2h0c19mcmFnbWVudF9iZWdpbjogbGlnaHRzX2ZyYWdtZW50X2JlZ2luLFxyXG5cdGxpZ2h0c19mcmFnbWVudF9tYXBzOiBsaWdodHNfZnJhZ21lbnRfbWFwcyxcclxuXHRsaWdodHNfZnJhZ21lbnRfZW5kOiBsaWdodHNfZnJhZ21lbnRfZW5kLFxyXG5cdGxvZ2RlcHRoYnVmX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9mcmFnbWVudCxcclxuXHRsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFxyXG5cdGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4OiBsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCxcclxuXHRsb2dkZXB0aGJ1Zl92ZXJ0ZXg6IGxvZ2RlcHRoYnVmX3ZlcnRleCxcclxuXHRtYXBfZnJhZ21lbnQ6IG1hcF9mcmFnbWVudCxcclxuXHRtYXBfcGFyc19mcmFnbWVudDogbWFwX3BhcnNfZnJhZ21lbnQsXHJcblx0bWFwX3BhcnRpY2xlX2ZyYWdtZW50OiBtYXBfcGFydGljbGVfZnJhZ21lbnQsXHJcblx0bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxyXG5cdG1ldGFsbmVzc21hcF9mcmFnbWVudDogbWV0YWxuZXNzbWFwX2ZyYWdtZW50LFxyXG5cdG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50OiBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCxcclxuXHRtb3JwaG5vcm1hbF92ZXJ0ZXg6IG1vcnBobm9ybWFsX3ZlcnRleCxcclxuXHRtb3JwaHRhcmdldF9wYXJzX3ZlcnRleDogbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXgsXHJcblx0bW9ycGh0YXJnZXRfdmVydGV4OiBtb3JwaHRhcmdldF92ZXJ0ZXgsXHJcblx0bm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBub3JtYWxfZnJhZ21lbnRfYmVnaW4sXHJcblx0bm9ybWFsX2ZyYWdtZW50X21hcHM6IG5vcm1hbF9mcmFnbWVudF9tYXBzLFxyXG5cdG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50OiBub3JtYWxtYXBfcGFyc19mcmFnbWVudCxcclxuXHRjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luLFxyXG5cdGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwczogY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzLFxyXG5cdGNsZWFyY29hdF9ub3JtYWxtYXBfcGFyc19mcmFnbWVudDogY2xlYXJjb2F0X25vcm1hbG1hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdHBhY2tpbmc6IHBhY2tpbmcsXHJcblx0cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudDogcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCxcclxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXHJcblx0ZGl0aGVyaW5nX2ZyYWdtZW50OiBkaXRoZXJpbmdfZnJhZ21lbnQsXHJcblx0ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ6IGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50LFxyXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxyXG5cdHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50OiByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCxcclxuXHRzaGFkb3dtYXBfcGFyc19mcmFnbWVudDogc2hhZG93bWFwX3BhcnNfZnJhZ21lbnQsXHJcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXHJcblx0c2hhZG93bWFwX3ZlcnRleDogc2hhZG93bWFwX3ZlcnRleCxcclxuXHRzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ6IHNoYWRvd21hc2tfcGFyc19mcmFnbWVudCxcclxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcclxuXHRza2lubmluZ19wYXJzX3ZlcnRleDogc2tpbm5pbmdfcGFyc192ZXJ0ZXgsXHJcblx0c2tpbm5pbmdfdmVydGV4OiBza2lubmluZ192ZXJ0ZXgsXHJcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxyXG5cdHNwZWN1bGFybWFwX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9mcmFnbWVudCxcclxuXHRzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50OiBzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50LFxyXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcclxuXHR0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50OiB0b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50LFxyXG5cdHV2X3BhcnNfZnJhZ21lbnQ6IHV2X3BhcnNfZnJhZ21lbnQsXHJcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxyXG5cdHV2X3ZlcnRleDogdXZfdmVydGV4LFxyXG5cdHV2Ml9wYXJzX2ZyYWdtZW50OiB1djJfcGFyc19mcmFnbWVudCxcclxuXHR1djJfcGFyc192ZXJ0ZXg6IHV2Ml9wYXJzX3ZlcnRleCxcclxuXHR1djJfdmVydGV4OiB1djJfdmVydGV4LFxyXG5cdHdvcmxkcG9zX3ZlcnRleDogd29ybGRwb3NfdmVydGV4LFxyXG5cclxuXHRiYWNrZ3JvdW5kX2ZyYWc6IGJhY2tncm91bmRfZnJhZyxcclxuXHRiYWNrZ3JvdW5kX3ZlcnQ6IGJhY2tncm91bmRfdmVydCxcclxuXHRjdWJlX2ZyYWc6IGN1YmVfZnJhZyxcclxuXHRjdWJlX3ZlcnQ6IGN1YmVfdmVydCxcclxuXHRkZXB0aF9mcmFnOiBkZXB0aF9mcmFnLFxyXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoX3ZlcnQsXHJcblx0ZGlzdGFuY2VSR0JBX2ZyYWc6IGRpc3RhbmNlUkdCQV9mcmFnLFxyXG5cdGRpc3RhbmNlUkdCQV92ZXJ0OiBkaXN0YW5jZVJHQkFfdmVydCxcclxuXHRlcXVpcmVjdF9mcmFnOiBlcXVpcmVjdF9mcmFnLFxyXG5cdGVxdWlyZWN0X3ZlcnQ6IGVxdWlyZWN0X3ZlcnQsXHJcblx0bGluZWRhc2hlZF9mcmFnOiBsaW5lZGFzaGVkX2ZyYWcsXHJcblx0bGluZWRhc2hlZF92ZXJ0OiBsaW5lZGFzaGVkX3ZlcnQsXHJcblx0bWVzaGJhc2ljX2ZyYWc6IG1lc2hiYXNpY19mcmFnLFxyXG5cdG1lc2hiYXNpY192ZXJ0OiBtZXNoYmFzaWNfdmVydCxcclxuXHRtZXNobGFtYmVydF9mcmFnOiBtZXNobGFtYmVydF9mcmFnLFxyXG5cdG1lc2hsYW1iZXJ0X3ZlcnQ6IG1lc2hsYW1iZXJ0X3ZlcnQsXHJcblx0bWVzaG1hdGNhcF9mcmFnOiBtZXNobWF0Y2FwX2ZyYWcsXHJcblx0bWVzaG1hdGNhcF92ZXJ0OiBtZXNobWF0Y2FwX3ZlcnQsXHJcblx0bWVzaHBob25nX2ZyYWc6IG1lc2hwaG9uZ19mcmFnLFxyXG5cdG1lc2hwaG9uZ192ZXJ0OiBtZXNocGhvbmdfdmVydCxcclxuXHRtZXNocGh5c2ljYWxfZnJhZzogbWVzaHBoeXNpY2FsX2ZyYWcsXHJcblx0bWVzaHBoeXNpY2FsX3ZlcnQ6IG1lc2hwaHlzaWNhbF92ZXJ0LFxyXG5cdG5vcm1hbF9mcmFnOiBub3JtYWxfZnJhZyxcclxuXHRub3JtYWxfdmVydDogbm9ybWFsX3ZlcnQsXHJcblx0cG9pbnRzX2ZyYWc6IHBvaW50c19mcmFnLFxyXG5cdHBvaW50c192ZXJ0OiBwb2ludHNfdmVydCxcclxuXHRzaGFkb3dfZnJhZzogc2hhZG93X2ZyYWcsXHJcblx0c2hhZG93X3ZlcnQ6IHNoYWRvd192ZXJ0LFxyXG5cdHNwcml0ZV9mcmFnOiBzcHJpdGVfZnJhZyxcclxuXHRzcHJpdGVfdmVydDogc3ByaXRlX3ZlcnRcclxufTtcclxuXHJcbi8qKlxyXG4gKiBVbmlmb3JtcyBsaWJyYXJ5IGZvciBzaGFyZWQgd2ViZ2wgc2hhZGVyc1xyXG4gKi9cclxuXHJcbnZhciBVbmlmb3Jtc0xpYiA9IHtcclxuXHJcblx0Y29tbW9uOiB7XHJcblxyXG5cdFx0ZGlmZnVzZTogeyB2YWx1ZTogbmV3IENvbG9yKDB4ZWVlZWVlKSB9LFxyXG5cdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH0sXHJcblxyXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9LFxyXG5cclxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblxyXG5cdH0sXHJcblxyXG5cdHNwZWN1bGFybWFwOiB7XHJcblxyXG5cdFx0c3BlY3VsYXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcclxuXHJcblx0fSxcclxuXHJcblx0ZW52bWFwOiB7XHJcblxyXG5cdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHRmbGlwRW52TWFwOiB7IHZhbHVlOiAtIDEgfSxcclxuXHRcdHJlZmxlY3Rpdml0eTogeyB2YWx1ZTogMS4wIH0sXHJcblx0XHRyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSxcclxuXHRcdG1heE1pcExldmVsOiB7IHZhbHVlOiAwIH1cclxuXHJcblx0fSxcclxuXHJcblx0YW9tYXA6IHtcclxuXHJcblx0XHRhb01hcDogeyB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0YW9NYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfVxyXG5cclxuXHR9LFxyXG5cclxuXHRsaWdodG1hcDoge1xyXG5cclxuXHRcdGxpZ2h0TWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHRsaWdodE1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9XHJcblxyXG5cdH0sXHJcblxyXG5cdGVtaXNzaXZlbWFwOiB7XHJcblxyXG5cdFx0ZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfVxyXG5cclxuXHR9LFxyXG5cclxuXHRidW1wbWFwOiB7XHJcblxyXG5cdFx0YnVtcE1hcDogeyB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0YnVtcFNjYWxlOiB7IHZhbHVlOiAxIH1cclxuXHJcblx0fSxcclxuXHJcblx0bm9ybWFsbWFwOiB7XHJcblxyXG5cdFx0bm9ybWFsTWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHRub3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoMSwgMSkgfVxyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNwbGFjZW1lbnRtYXA6IHtcclxuXHJcblx0XHRkaXNwbGFjZW1lbnRNYXA6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdGRpc3BsYWNlbWVudFNjYWxlOiB7IHZhbHVlOiAxIH0sXHJcblx0XHRkaXNwbGFjZW1lbnRCaWFzOiB7IHZhbHVlOiAwIH1cclxuXHJcblx0fSxcclxuXHJcblx0cm91Z2huZXNzbWFwOiB7XHJcblxyXG5cdFx0cm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH1cclxuXHJcblx0fSxcclxuXHJcblx0bWV0YWxuZXNzbWFwOiB7XHJcblxyXG5cdFx0bWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH1cclxuXHJcblx0fSxcclxuXHJcblx0Z3JhZGllbnRtYXA6IHtcclxuXHJcblx0XHRncmFkaWVudE1hcDogeyB2YWx1ZTogbnVsbCB9XHJcblxyXG5cdH0sXHJcblxyXG5cdGZvZzoge1xyXG5cclxuXHRcdGZvZ0RlbnNpdHk6IHsgdmFsdWU6IDAuMDAwMjUgfSxcclxuXHRcdGZvZ05lYXI6IHsgdmFsdWU6IDEgfSxcclxuXHRcdGZvZ0ZhcjogeyB2YWx1ZTogMjAwMCB9LFxyXG5cdFx0Zm9nQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigweGZmZmZmZikgfVxyXG5cclxuXHR9LFxyXG5cclxuXHRsaWdodHM6IHtcclxuXHJcblx0XHRhbWJpZW50TGlnaHRDb2xvcjogeyB2YWx1ZTogW10gfSxcclxuXHJcblx0XHRsaWdodFByb2JlOiB7IHZhbHVlOiBbXSB9LFxyXG5cclxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7XHJcblx0XHRcdHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xyXG5cdFx0XHRcdGRpcmVjdGlvbjoge30sXHJcblx0XHRcdFx0Y29sb3I6IHt9LFxyXG5cclxuXHRcdFx0XHRzaGFkb3c6IHt9LFxyXG5cdFx0XHRcdHNoYWRvd0JpYXM6IHt9LFxyXG5cdFx0XHRcdHNoYWRvd1JhZGl1czoge30sXHJcblx0XHRcdFx0c2hhZG93TWFwU2l6ZToge31cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcclxuXHRcdGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OiB7IHZhbHVlOiBbXSB9LFxyXG5cclxuXHRcdHNwb3RMaWdodHM6IHtcclxuXHRcdFx0dmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XHJcblx0XHRcdFx0Y29sb3I6IHt9LFxyXG5cdFx0XHRcdHBvc2l0aW9uOiB7fSxcclxuXHRcdFx0XHRkaXJlY3Rpb246IHt9LFxyXG5cdFx0XHRcdGRpc3RhbmNlOiB7fSxcclxuXHRcdFx0XHRjb25lQ29zOiB7fSxcclxuXHRcdFx0XHRwZW51bWJyYUNvczoge30sXHJcblx0XHRcdFx0ZGVjYXk6IHt9LFxyXG5cclxuXHRcdFx0XHRzaGFkb3c6IHt9LFxyXG5cdFx0XHRcdHNoYWRvd0JpYXM6IHt9LFxyXG5cdFx0XHRcdHNoYWRvd1JhZGl1czoge30sXHJcblx0XHRcdFx0c2hhZG93TWFwU2l6ZToge31cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxyXG5cdFx0c3BvdFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcclxuXHJcblx0XHRwb2ludExpZ2h0czoge1xyXG5cdFx0XHR2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcclxuXHRcdFx0XHRjb2xvcjoge30sXHJcblx0XHRcdFx0cG9zaXRpb246IHt9LFxyXG5cdFx0XHRcdGRlY2F5OiB7fSxcclxuXHRcdFx0XHRkaXN0YW5jZToge30sXHJcblxyXG5cdFx0XHRcdHNoYWRvdzoge30sXHJcblx0XHRcdFx0c2hhZG93Qmlhczoge30sXHJcblx0XHRcdFx0c2hhZG93UmFkaXVzOiB7fSxcclxuXHRcdFx0XHRzaGFkb3dNYXBTaXplOiB7fSxcclxuXHRcdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiB7fSxcclxuXHRcdFx0XHRzaGFkb3dDYW1lcmFGYXI6IHt9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0cG9pbnRTaGFkb3dNYXA6IHsgdmFsdWU6IFtdIH0sXHJcblx0XHRwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcclxuXHJcblx0XHRoZW1pc3BoZXJlTGlnaHRzOiB7XHJcblx0XHRcdHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xyXG5cdFx0XHRcdGRpcmVjdGlvbjoge30sXHJcblx0XHRcdFx0c2t5Q29sb3I6IHt9LFxyXG5cdFx0XHRcdGdyb3VuZENvbG9yOiB7fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IEJSREYgZGF0YSBuZWVkcyB0byBiZSBtb3ZlZCBmcm9tIGV4YW1wbGUgdG8gbWFpbiBzcmNcclxuXHRcdHJlY3RBcmVhTGlnaHRzOiB7XHJcblx0XHRcdHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xyXG5cdFx0XHRcdGNvbG9yOiB7fSxcclxuXHRcdFx0XHRwb3NpdGlvbjoge30sXHJcblx0XHRcdFx0d2lkdGg6IHt9LFxyXG5cdFx0XHRcdGhlaWdodDoge31cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRwb2ludHM6IHtcclxuXHJcblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHhlZWVlZWUpIH0sXHJcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcclxuXHRcdHNpemU6IHsgdmFsdWU6IDEuMCB9LFxyXG5cdFx0c2NhbGU6IHsgdmFsdWU6IDEuMCB9LFxyXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XHJcblxyXG5cdH0sXHJcblxyXG5cdHNwcml0ZToge1xyXG5cclxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvcigweGVlZWVlZSkgfSxcclxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxyXG5cdFx0Y2VudGVyOiB7IHZhbHVlOiBuZXcgVmVjdG9yMigwLjUsIDAuNSkgfSxcclxuXHRcdHJvdGF0aW9uOiB7IHZhbHVlOiAwLjAgfSxcclxuXHRcdG1hcDogeyB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfVxyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXHJcbiAqL1xyXG5cclxudmFyIFNoYWRlckxpYiA9IHtcclxuXHJcblx0YmFzaWM6IHtcclxuXHJcblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyhbXHJcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcclxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcclxuXHRcdF0pLFxyXG5cclxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX3ZlcnQsXHJcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaGJhc2ljX2ZyYWdcclxuXHJcblx0fSxcclxuXHJcblx0bGFtYmVydDoge1xyXG5cclxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKFtcclxuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXHJcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHgwMDAwMDApIH1cclxuXHRcdFx0fVxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobGFtYmVydF92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X2ZyYWdcclxuXHJcblx0fSxcclxuXHJcblx0cGhvbmc6IHtcclxuXHJcblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyhbXHJcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcclxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmdyYWRpZW50bWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXHJcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHgwMDAwMDApIH0sXHJcblx0XHRcdFx0c3BlY3VsYXI6IHsgdmFsdWU6IG5ldyBDb2xvcigweDExMTExMSkgfSxcclxuXHRcdFx0XHRzaGluaW5lc3M6IHsgdmFsdWU6IDMwIH1cclxuXHRcdFx0fVxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCxcclxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfZnJhZ1xyXG5cclxuXHR9LFxyXG5cclxuXHRzdGFuZGFyZDoge1xyXG5cclxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKFtcclxuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5yb3VnaG5lc3NtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodHMsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKDB4MDAwMDAwKSB9LFxyXG5cdFx0XHRcdHJvdWdobmVzczogeyB2YWx1ZTogMC41IH0sXHJcblx0XHRcdFx0bWV0YWxuZXNzOiB7IHZhbHVlOiAwLjUgfSxcclxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSAvLyB0ZW1wb3JhcnlcclxuXHRcdFx0fVxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfdmVydCxcclxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xyXG5cclxuXHR9LFxyXG5cclxuXHRtYXRjYXA6IHtcclxuXHJcblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyhbXHJcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcclxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG1hdGNhcDogeyB2YWx1ZTogbnVsbCB9XHJcblx0XHRcdH1cclxuXHRcdF0pLFxyXG5cclxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2htYXRjYXBfZnJhZ1xyXG5cclxuXHR9LFxyXG5cclxuXHRwb2ludHM6IHtcclxuXHJcblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyhbXHJcblx0XHRcdFVuaWZvcm1zTGliLnBvaW50cyxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXHJcblx0XHRdKSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c192ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c19mcmFnXHJcblxyXG5cdH0sXHJcblxyXG5cdGRhc2hlZDoge1xyXG5cclxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKFtcclxuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzY2FsZTogeyB2YWx1ZTogMSB9LFxyXG5cdFx0XHRcdGRhc2hTaXplOiB7IHZhbHVlOiAxIH0sXHJcblx0XHRcdFx0dG90YWxTaXplOiB7IHZhbHVlOiAyIH1cclxuXHRcdFx0fVxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsXHJcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubGluZWRhc2hlZF9mcmFnXHJcblxyXG5cdH0sXHJcblxyXG5cdGRlcHRoOiB7XHJcblxyXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoW1xyXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXHJcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcFxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5kZXB0aF92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRlcHRoX2ZyYWdcclxuXHJcblx0fSxcclxuXHJcblx0bm9ybWFsOiB7XHJcblxyXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoW1xyXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXHJcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXHJcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cclxuXHRcdFx0fVxyXG5cdFx0XSksXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5ub3JtYWxfdmVydCxcclxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5ub3JtYWxfZnJhZ1xyXG5cclxuXHR9LFxyXG5cclxuXHRzcHJpdGU6IHtcclxuXHJcblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyhbXHJcblx0XHRcdFVuaWZvcm1zTGliLnNwcml0ZSxcclxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nXHJcblx0XHRdKSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV9mcmFnXHJcblxyXG5cdH0sXHJcblxyXG5cdGJhY2tncm91bmQ6IHtcclxuXHJcblx0XHR1bmlmb3Jtczoge1xyXG5cdFx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9LFxyXG5cdFx0XHR0MkQ6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdH0sXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5iYWNrZ3JvdW5kX3ZlcnQsXHJcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF9mcmFnXHJcblxyXG5cdH0sXHJcblx0LyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vXHRDdWJlIG1hcCBzaGFkZXJcclxuXHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuXHRjdWJlOiB7XHJcblxyXG5cdFx0dW5pZm9ybXM6IHtcclxuXHRcdFx0dEN1YmU6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdFx0dEZsaXA6IHsgdmFsdWU6IC0gMSB9LFxyXG5cdFx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfVxyXG5cdFx0fSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfdmVydCxcclxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5jdWJlX2ZyYWdcclxuXHJcblx0fSxcclxuXHJcblx0ZXF1aXJlY3Q6IHtcclxuXHJcblx0XHR1bmlmb3Jtczoge1xyXG5cdFx0XHR0RXF1aXJlY3Q6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdH0sXHJcblxyXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5lcXVpcmVjdF92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X2ZyYWdcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VSR0JBOiB7XHJcblxyXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoW1xyXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXHJcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJlZmVyZW5jZVBvc2l0aW9uOiB7IHZhbHVlOiBuZXcgVmVjdG9yMygpIH0sXHJcblx0XHRcdFx0bmVhckRpc3RhbmNlOiB7IHZhbHVlOiAxIH0sXHJcblx0XHRcdFx0ZmFyRGlzdGFuY2U6IHsgdmFsdWU6IDEwMDAgfVxyXG5cdFx0XHR9XHJcblx0XHRdKSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV92ZXJ0LFxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV9mcmFnXHJcblxyXG5cdH0sXHJcblxyXG5cdHNoYWRvdzoge1xyXG5cclxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKFtcclxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxyXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDB4MDAwMDApIH0sXHJcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cclxuXHRcdFx0fV0pLFxyXG5cclxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X3ZlcnQsXHJcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X2ZyYWdcclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcblNoYWRlckxpYi5waHlzaWNhbCA9IHtcclxuXHJcblx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoW1xyXG5cdFx0U2hhZGVyTGliLnN0YW5kYXJkLnVuaWZvcm1zLFxyXG5cdFx0e1xyXG5cdFx0XHR0cmFuc3BhcmVuY3k6IHsgdmFsdWU6IDAgfSxcclxuXHRcdFx0Y2xlYXJjb2F0OiB7IHZhbHVlOiAwIH0sXHJcblx0XHRcdGNsZWFyY29hdFJvdWdobmVzczogeyB2YWx1ZTogMCB9LFxyXG5cdFx0XHRzaGVlbjogeyB2YWx1ZTogbmV3IENvbG9yKDB4MDAwMDAwKSB9LFxyXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxTY2FsZTogeyB2YWx1ZTogbmV3IFZlY3RvcjIoMSwgMSkgfSxcclxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwOiB7IHZhbHVlOiBudWxsIH0sXHJcblx0XHR9XHJcblx0XSksXHJcblxyXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXHJcblx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF9mcmFnXHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xBbmltYXRpb24oKSB7XHJcblxyXG5cdHZhciBjb250ZXh0ID0gbnVsbDtcclxuXHR2YXIgaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHR2YXIgYW5pbWF0aW9uTG9vcCA9IG51bGw7XHJcblxyXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUodGltZSwgZnJhbWUpIHtcclxuXHJcblx0XHRpZiAoaXNBbmltYXRpbmcgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdGFuaW1hdGlvbkxvb3AodGltZSwgZnJhbWUpO1xyXG5cclxuXHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9uQW5pbWF0aW9uRnJhbWUpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblxyXG5cdFx0c3RhcnQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGlmIChpc0FuaW1hdGluZyA9PT0gdHJ1ZSkgeyByZXR1cm47IH1cclxuXHRcdFx0aWYgKGFuaW1hdGlvbkxvb3AgPT09IG51bGwpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0XHRjb250ZXh0LnJlcXVlc3RBbmltYXRpb25GcmFtZShvbkFuaW1hdGlvbkZyYW1lKTtcclxuXHJcblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHN0b3A6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGlzQW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHRzZXRBbmltYXRpb25Mb29wOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHJcblx0XHRcdGFuaW1hdGlvbkxvb3AgPSBjYWxsYmFjaztcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdHNldENvbnRleHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29udGV4dCA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMQXR0cmlidXRlcyhnbCkge1xyXG5cclxuXHR2YXIgYnVmZmVycyA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUpIHtcclxuXHJcblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XHJcblx0XHR2YXIgdXNhZ2UgPSBhdHRyaWJ1dGUuZHluYW1pYyA/IDM1MDQ4IDogMzUwNDQ7XHJcblxyXG5cdFx0dmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG5cclxuXHRcdGdsLmJpbmRCdWZmZXIoYnVmZmVyVHlwZSwgYnVmZmVyKTtcclxuXHRcdGdsLmJ1ZmZlckRhdGEoYnVmZmVyVHlwZSwgYXJyYXksIHVzYWdlKTtcclxuXHJcblx0XHRhdHRyaWJ1dGUub25VcGxvYWRDYWxsYmFjaygpO1xyXG5cclxuXHRcdHZhciB0eXBlID0gNTEyNjtcclxuXHJcblx0XHRpZiAoYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHtcclxuXHJcblx0XHRcdHR5cGUgPSA1MTI2O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xBdHRyaWJ1dGVzOiBVbnN1cHBvcnRlZCBkYXRhIGJ1ZmZlciBmb3JtYXQ6IEZsb2F0NjRBcnJheS4nKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkpIHtcclxuXHJcblx0XHRcdHR5cGUgPSA1MTIzO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5KSB7XHJcblxyXG5cdFx0XHR0eXBlID0gNTEyMjtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHtcclxuXHJcblx0XHRcdHR5cGUgPSA1MTI1O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5KSB7XHJcblxyXG5cdFx0XHR0eXBlID0gNTEyNDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5KSB7XHJcblxyXG5cdFx0XHR0eXBlID0gNTEyMDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xyXG5cclxuXHRcdFx0dHlwZSA9IDUxMjE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRieXRlc1BlckVsZW1lbnQ6IGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxyXG5cdFx0XHR2ZXJzaW9uOiBhdHRyaWJ1dGUudmVyc2lvblxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVCdWZmZXIoYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUpIHtcclxuXHJcblx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXk7XHJcblx0XHR2YXIgdXBkYXRlUmFuZ2UgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2U7XHJcblxyXG5cdFx0Z2wuYmluZEJ1ZmZlcihidWZmZXJUeXBlLCBidWZmZXIpO1xyXG5cclxuXHRcdGlmIChhdHRyaWJ1dGUuZHluYW1pYyA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGdsLmJ1ZmZlckRhdGEoYnVmZmVyVHlwZSwgYXJyYXksIDM1MDQ0KTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHVwZGF0ZVJhbmdlLmNvdW50ID09PSAtIDEpIHtcclxuXHJcblx0XHRcdC8vIE5vdCB1c2luZyB1cGRhdGUgcmFuZ2VzXHJcblxyXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKGJ1ZmZlclR5cGUsIDAsIGFycmF5KTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHVwZGF0ZVJhbmdlLmNvdW50ID09PSAwKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTE9iamVjdHMudXBkYXRlQnVmZmVyOiBkeW5hbWljIFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSBtYXJrZWQgYXMgbmVlZHNVcGRhdGUgYnV0IHVwZGF0ZVJhbmdlLmNvdW50IGlzIDAsIGVuc3VyZSB5b3UgYXJlIHVzaW5nIHNldCBtZXRob2RzIG9yIHVwZGF0aW5nIG1hbnVhbGx5LicpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKGJ1ZmZlclR5cGUsIHVwZGF0ZVJhbmdlLm9mZnNldCAqIGFycmF5LkJZVEVTX1BFUl9FTEVNRU5ULFxyXG5cdFx0XHRcdGFycmF5LnN1YmFycmF5KHVwZGF0ZVJhbmdlLm9mZnNldCwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICsgdXBkYXRlUmFuZ2UuY291bnQpKTtcclxuXHJcblx0XHRcdHVwZGF0ZVJhbmdlLmNvdW50ID0gLSAxOyAvLyByZXNldCByYW5nZVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBnZXQoYXR0cmlidXRlKSB7XHJcblxyXG5cdFx0aWYgKGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKSB7IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZS5kYXRhOyB9XHJcblxyXG5cdFx0cmV0dXJuIGJ1ZmZlcnMuZ2V0KGF0dHJpYnV0ZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVtb3ZlKGF0dHJpYnV0ZSkge1xyXG5cclxuXHRcdGlmIChhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSkgeyBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTsgfVxyXG5cclxuXHRcdHZhciBkYXRhID0gYnVmZmVycy5nZXQoYXR0cmlidXRlKTtcclxuXHJcblx0XHRpZiAoZGF0YSkge1xyXG5cclxuXHRcdFx0Z2wuZGVsZXRlQnVmZmVyKGRhdGEuYnVmZmVyKTtcclxuXHJcblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKGF0dHJpYnV0ZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZShhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUpIHtcclxuXHJcblx0XHRpZiAoYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpIHsgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7IH1cclxuXHJcblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KGF0dHJpYnV0ZSk7XHJcblxyXG5cdFx0aWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0YnVmZmVycy5zZXQoYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoYXR0cmlidXRlLCBidWZmZXJUeXBlKSk7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbikge1xyXG5cclxuXHRcdFx0dXBkYXRlQnVmZmVyKGRhdGEuYnVmZmVyLCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUpO1xyXG5cclxuXHRcdFx0ZGF0YS52ZXJzaW9uID0gYXR0cmlidXRlLnZlcnNpb247XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblxyXG5cdFx0Z2V0OiBnZXQsXHJcblx0XHRyZW1vdmU6IHJlbW92ZSxcclxuXHRcdHVwZGF0ZTogdXBkYXRlXHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICovXHJcblxyXG4vLyBQbGFuZUdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBQbGFuZUdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdQbGFuZUdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXHJcblx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxyXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXHJcblx0fTtcclxuXHJcblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFBsYW5lQnVmZmVyR2VvbWV0cnkod2lkdGgsIGhlaWdodCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcblBsYW5lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5QbGFuZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lR2VvbWV0cnk7XHJcblxyXG4vLyBQbGFuZUJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBQbGFuZUJ1ZmZlckdlb21ldHJ5KHdpZHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKSB7XHJcblxyXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdQbGFuZUJ1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0d2lkdGg6IHdpZHRoLFxyXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXHJcblx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxyXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzXHJcblx0fTtcclxuXHJcblx0d2lkdGggPSB3aWR0aCB8fCAxO1xyXG5cdGhlaWdodCA9IGhlaWdodCB8fCAxO1xyXG5cclxuXHR2YXIgd2lkdGhfaGFsZiA9IHdpZHRoIC8gMjtcclxuXHR2YXIgaGVpZ2h0X2hhbGYgPSBoZWlnaHQgLyAyO1xyXG5cclxuXHR2YXIgZ3JpZFggPSBNYXRoLmZsb29yKHdpZHRoU2VnbWVudHMpIHx8IDE7XHJcblx0dmFyIGdyaWRZID0gTWF0aC5mbG9vcihoZWlnaHRTZWdtZW50cykgfHwgMTtcclxuXHJcblx0dmFyIGdyaWRYMSA9IGdyaWRYICsgMTtcclxuXHR2YXIgZ3JpZFkxID0gZ3JpZFkgKyAxO1xyXG5cclxuXHR2YXIgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7XHJcblx0dmFyIHNlZ21lbnRfaGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZFk7XHJcblxyXG5cdHZhciBpeCwgaXk7XHJcblxyXG5cdC8vIGJ1ZmZlcnNcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHR2YXIgdmVydGljZXMgPSBbXTtcclxuXHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRmb3IgKGl5ID0gMDsgaXkgPCBncmlkWTE7IGl5KyspIHtcclxuXHJcblx0XHR2YXIgeSA9IGl5ICogc2VnbWVudF9oZWlnaHQgLSBoZWlnaHRfaGFsZjtcclxuXHJcblx0XHRmb3IgKGl4ID0gMDsgaXggPCBncmlkWDE7IGl4KyspIHtcclxuXHJcblx0XHRcdHZhciB4ID0gaXggKiBzZWdtZW50X3dpZHRoIC0gd2lkdGhfaGFsZjtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2goeCwgLSB5LCAwKTtcclxuXHJcblx0XHRcdG5vcm1hbHMucHVzaCgwLCAwLCAxKTtcclxuXHJcblx0XHRcdHV2cy5wdXNoKGl4IC8gZ3JpZFgpO1xyXG5cdFx0XHR1dnMucHVzaCgxIC0gKGl5IC8gZ3JpZFkpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gaW5kaWNlc1xyXG5cclxuXHRmb3IgKGl5ID0gMDsgaXkgPCBncmlkWTsgaXkrKykge1xyXG5cclxuXHRcdGZvciAoaXggPSAwOyBpeCA8IGdyaWRYOyBpeCsrKSB7XHJcblxyXG5cdFx0XHR2YXIgYSA9IGl4ICsgZ3JpZFgxICogaXk7XHJcblx0XHRcdHZhciBiID0gaXggKyBncmlkWDEgKiAoaXkgKyAxKTtcclxuXHRcdFx0dmFyIGMgPSAoaXggKyAxKSArIGdyaWRYMSAqIChpeSArIDEpO1xyXG5cdFx0XHR2YXIgZCA9IChpeCArIDEpICsgZ3JpZFgxICogaXk7XHJcblxyXG5cdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG5cdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxufVxyXG5cclxuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblBsYW5lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVCdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMQmFja2dyb3VuZChyZW5kZXJlciwgc3RhdGUsIG9iamVjdHMsIHByZW11bHRpcGxpZWRBbHBoYSkge1xyXG5cclxuXHR2YXIgY2xlYXJDb2xvciA9IG5ldyBDb2xvcigweDAwMDAwMCk7XHJcblx0dmFyIGNsZWFyQWxwaGEgPSAwO1xyXG5cclxuXHR2YXIgcGxhbmVNZXNoO1xyXG5cdHZhciBib3hNZXNoO1xyXG5cdC8vIFN0b3JlIHRoZSBjdXJyZW50IGJhY2tncm91bmQgdGV4dHVyZSBhbmQgaXRzIGB2ZXJzaW9uYFxyXG5cdC8vIHNvIHdlIGNhbiByZWNvbXBpbGUgdGhlIG1hdGVyaWFsIGFjY29yZGluZ2x5LlxyXG5cdHZhciBjdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XHJcblx0dmFyIGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IDA7XHJcblxyXG5cdGZ1bmN0aW9uIHJlbmRlcihyZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCBmb3JjZUNsZWFyKSB7XHJcblxyXG5cdFx0dmFyIGJhY2tncm91bmQgPSBzY2VuZS5iYWNrZ3JvdW5kO1xyXG5cclxuXHRcdC8vIElnbm9yZSBiYWNrZ3JvdW5kIGluIEFSXHJcblx0XHQvLyBUT0RPOiBSZWNvbnNpZGVyIHRoaXMuXHJcblxyXG5cdFx0dmFyIHZyID0gcmVuZGVyZXIudnI7XHJcblx0XHR2YXIgc2Vzc2lvbiA9IHZyLmdldFNlc3Npb24gJiYgdnIuZ2V0U2Vzc2lvbigpO1xyXG5cclxuXHRcdGlmIChzZXNzaW9uICYmIHNlc3Npb24uZW52aXJvbm1lbnRCbGVuZE1vZGUgPT09ICdhZGRpdGl2ZScpIHtcclxuXHJcblx0XHRcdGJhY2tncm91bmQgPSBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYmFja2dyb3VuZCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0c2V0Q2xlYXIoY2xlYXJDb2xvciwgY2xlYXJBbHBoYSk7XHJcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcclxuXHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGJhY2tncm91bmQgJiYgYmFja2dyb3VuZC5pc0NvbG9yKSB7XHJcblxyXG5cdFx0XHRzZXRDbGVhcihiYWNrZ3JvdW5kLCAxKTtcclxuXHRcdFx0Zm9yY2VDbGVhciA9IHRydWU7XHJcblx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gbnVsbDtcclxuXHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlbmRlcmVyLmF1dG9DbGVhciB8fCBmb3JjZUNsZWFyKSB7XHJcblxyXG5cdFx0XHRyZW5kZXJlci5jbGVhcihyZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYmFja2dyb3VuZCAmJiAoYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUpKSB7XHJcblxyXG5cdFx0XHRpZiAoYm94TWVzaCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGJveE1lc2ggPSBuZXcgTWVzaChcclxuXHRcdFx0XHRcdG5ldyBCb3hCdWZmZXJHZW9tZXRyeSgxLCAxLCAxKSxcclxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6ICdCYWNrZ3JvdW5kQ3ViZU1hdGVyaWFsJyxcclxuXHRcdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoU2hhZGVyTGliLmN1YmUudW5pZm9ybXMpLFxyXG5cdFx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckxpYi5jdWJlLnZlcnRleFNoYWRlcixcclxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLFxyXG5cdFx0XHRcdFx0XHRzaWRlOiBCYWNrU2lkZSxcclxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGZvZzogZmFsc2VcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoJ25vcm1hbCcpO1xyXG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkucmVtb3ZlQXR0cmlidXRlKCd1dicpO1xyXG5cclxuXHRcdFx0XHRib3hNZXNoLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhKSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5UG9zaXRpb24oY2FtZXJhLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0Ly8gZW5hYmxlIGNvZGUgaW5qZWN0aW9uIGZvciBub24tYnVpbHQtaW4gbWF0ZXJpYWxcclxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoYm94TWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcclxuXHJcblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnRDdWJlLnZhbHVlO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdG9iamVjdHMudXBkYXRlKGJveE1lc2gpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHRleHR1cmUgPSBiYWNrZ3JvdW5kLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlID8gYmFja2dyb3VuZC50ZXh0dXJlIDogYmFja2dyb3VuZDtcclxuXHRcdFx0Ym94TWVzaC5tYXRlcmlhbC51bmlmb3Jtcy50Q3ViZS52YWx1ZSA9IHRleHR1cmU7XHJcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMudEZsaXAudmFsdWUgPSAoYmFja2dyb3VuZC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSkgPyAxIDogLSAxO1xyXG5cclxuXHRcdFx0aWYgKGN1cnJlbnRCYWNrZ3JvdW5kICE9PSBiYWNrZ3JvdW5kIHx8XHJcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24pIHtcclxuXHJcblx0XHRcdFx0Ym94TWVzaC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcclxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBwdXNoIHRvIHRoZSBwcmUtc29ydGVkIG9wYXF1ZSByZW5kZXIgbGlzdFxyXG5cdFx0XHRyZW5kZXJMaXN0LnVuc2hpZnQoYm94TWVzaCwgYm94TWVzaC5nZW9tZXRyeSwgYm94TWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNUZXh0dXJlKSB7XHJcblxyXG5cdFx0XHRpZiAocGxhbmVNZXNoID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0cGxhbmVNZXNoID0gbmV3IE1lc2goXHJcblx0XHRcdFx0XHRuZXcgUGxhbmVCdWZmZXJHZW9tZXRyeSgyLCAyKSxcclxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6ICdCYWNrZ3JvdW5kTWF0ZXJpYWwnLFxyXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyhTaGFkZXJMaWIuYmFja2dyb3VuZC51bmlmb3JtcyksXHJcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQudmVydGV4U2hhZGVyLFxyXG5cdFx0XHRcdFx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQuZnJhZ21lbnRTaGFkZXIsXHJcblx0XHRcdFx0XHRcdHNpZGU6IEZyb250U2lkZSxcclxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGZvZzogZmFsc2VcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0cGxhbmVNZXNoLmdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZSgnbm9ybWFsJyk7XHJcblxyXG5cdFx0XHRcdC8vIGVuYWJsZSBjb2RlIGluamVjdGlvbiBmb3Igbm9uLWJ1aWx0LWluIG1hdGVyaWFsXHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHBsYW5lTWVzaC5tYXRlcmlhbCwgJ21hcCcsIHtcclxuXHJcblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnQyRC52YWx1ZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZShwbGFuZU1lc2gpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnQyRC52YWx1ZSA9IGJhY2tncm91bmQ7XHJcblxyXG5cdFx0XHRpZiAoYmFja2dyb3VuZC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdGJhY2tncm91bmQudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwudW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weShiYWNrZ3JvdW5kLm1hdHJpeCk7XHJcblxyXG5cdFx0XHRpZiAoY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHxcclxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gIT09IGJhY2tncm91bmQudmVyc2lvbikge1xyXG5cclxuXHRcdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XHJcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdC8vIHB1c2ggdG8gdGhlIHByZS1zb3J0ZWQgb3BhcXVlIHJlbmRlciBsaXN0XHJcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdChwbGFuZU1lc2gsIHBsYW5lTWVzaC5nZW9tZXRyeSwgcGxhbmVNZXNoLm1hdGVyaWFsLCAwLCAwLCBudWxsKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0Q2xlYXIoY29sb3IsIGFscGhhKSB7XHJcblxyXG5cdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhcihjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iLCBhbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cclxuXHRcdGdldENsZWFyQ29sb3I6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiBjbGVhckNvbG9yO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXRDbGVhckNvbG9yOiBmdW5jdGlvbiAoY29sb3IsIGFscGhhKSB7XHJcblxyXG5cdFx0XHRjbGVhckNvbG9yLnNldChjb2xvcik7XHJcblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYSAhPT0gdW5kZWZpbmVkID8gYWxwaGEgOiAxO1xyXG5cdFx0XHRzZXRDbGVhcihjbGVhckNvbG9yLCBjbGVhckFscGhhKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGNsZWFyQWxwaGE7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldENsZWFyQWxwaGE6IGZ1bmN0aW9uIChhbHBoYSkge1xyXG5cclxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xyXG5cdFx0XHRzZXRDbGVhcihjbGVhckNvbG9yLCBjbGVhckFscGhhKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0cmVuZGVyOiByZW5kZXJcclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMQnVmZmVyUmVuZGVyZXIoZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcykge1xyXG5cclxuXHR2YXIgbW9kZTtcclxuXHJcblx0ZnVuY3Rpb24gc2V0TW9kZSh2YWx1ZSkge1xyXG5cclxuXHRcdG1vZGUgPSB2YWx1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZW5kZXIoc3RhcnQsIGNvdW50KSB7XHJcblxyXG5cdFx0Z2wuZHJhd0FycmF5cyhtb2RlLCBzdGFydCwgY291bnQpO1xyXG5cclxuXHRcdGluZm8udXBkYXRlKGNvdW50LCBtb2RlKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoZ2VvbWV0cnksIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50KSB7XHJcblxyXG5cdFx0aWYgKHByaW1jb3VudCA9PT0gMCkgeyByZXR1cm47IH1cclxuXHJcblx0XHR2YXIgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xyXG5cclxuXHRcdGlmIChjYXBhYmlsaXRpZXMuaXNXZWJHTDIpIHtcclxuXHJcblx0XHRcdGV4dGVuc2lvbiA9IGdsO1xyXG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdBcnJheXNJbnN0YW5jZWQnO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCgnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xyXG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdBcnJheXNJbnN0YW5jZWRBTkdMRSc7XHJcblxyXG5cdFx0XHRpZiAoZXh0ZW5zaW9uID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZXh0ZW5zaW9uW21ldGhvZE5hbWVdKG1vZGUsIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50KTtcclxuXHJcblx0XHRpbmZvLnVwZGF0ZShjb3VudCwgbW9kZSwgcHJpbWNvdW50KTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR0aGlzLnNldE1vZGUgPSBzZXRNb2RlO1xyXG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xyXG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xDYXBhYmlsaXRpZXMoZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMpIHtcclxuXHJcblx0dmFyIG1heEFuaXNvdHJvcHk7XHJcblxyXG5cdGZ1bmN0aW9uIGdldE1heEFuaXNvdHJvcHkoKSB7XHJcblxyXG5cdFx0aWYgKG1heEFuaXNvdHJvcHkgIT09IHVuZGVmaW5lZCkgeyByZXR1cm4gbWF4QW5pc290cm9weTsgfVxyXG5cclxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCgnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XHJcblxyXG5cdFx0aWYgKGV4dGVuc2lvbiAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlcihleHRlbnNpb24uTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXhBbmlzb3Ryb3B5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldE1heFByZWNpc2lvbihwcmVjaXNpb24pIHtcclxuXHJcblx0XHRpZiAocHJlY2lzaW9uID09PSAnaGlnaHAnKSB7XHJcblxyXG5cdFx0XHRpZiAoZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KDM1NjMzLCAzNjMzOCkucHJlY2lzaW9uID4gMCAmJlxyXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCgzNTYzMiwgMzYzMzgpLnByZWNpc2lvbiA+IDApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuICdoaWdocCc7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcmVjaXNpb24gPSAnbWVkaXVtcCc7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwcmVjaXNpb24gPT09ICdtZWRpdW1wJykge1xyXG5cclxuXHRcdFx0aWYgKGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCgzNTYzMywgMzYzMzcpLnByZWNpc2lvbiA+IDAgJiZcclxuXHRcdFx0XHRnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoMzU2MzIsIDM2MzM3KS5wcmVjaXNpb24gPiAwKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiAnbWVkaXVtcCc7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAnbG93cCc7XHJcblxyXG5cdH1cclxuXHJcblx0dmFyIGlzV2ViR0wyID0gdHlwZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgIT09ICd1bmRlZmluZWQnICYmIGdsIGluc3RhbmNlb2YgV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcblx0dmFyIHByZWNpc2lvbiA9IHBhcmFtZXRlcnMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZWNpc2lvbiA6ICdoaWdocCc7XHJcblx0dmFyIG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbihwcmVjaXNpb24pO1xyXG5cclxuXHRpZiAobWF4UHJlY2lzaW9uICE9PSBwcmVjaXNpb24pIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicpO1xyXG5cdFx0cHJlY2lzaW9uID0gbWF4UHJlY2lzaW9uO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xyXG5cclxuXHR2YXIgbWF4VGV4dHVyZXMgPSBnbC5nZXRQYXJhbWV0ZXIoMzQ5MzApO1xyXG5cdHZhciBtYXhWZXJ0ZXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlcigzNTY2MCk7XHJcblx0dmFyIG1heFRleHR1cmVTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKDMzNzkpO1xyXG5cdHZhciBtYXhDdWJlbWFwU2l6ZSA9IGdsLmdldFBhcmFtZXRlcigzNDA3Nik7XHJcblxyXG5cdHZhciBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKDM0OTIxKTtcclxuXHR2YXIgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoMzYzNDcpO1xyXG5cdHZhciBtYXhWYXJ5aW5ncyA9IGdsLmdldFBhcmFtZXRlcigzNjM0OCk7XHJcblx0dmFyIG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoMzYzNDkpO1xyXG5cclxuXHR2YXIgdmVydGV4VGV4dHVyZXMgPSBtYXhWZXJ0ZXhUZXh0dXJlcyA+IDA7XHJcblx0dmFyIGZsb2F0RnJhZ21lbnRUZXh0dXJlcyA9IGlzV2ViR0wyIHx8ICEhZXh0ZW5zaW9ucy5nZXQoJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XHJcblx0dmFyIGZsb2F0VmVydGV4VGV4dHVyZXMgPSB2ZXJ0ZXhUZXh0dXJlcyAmJiBmbG9hdEZyYWdtZW50VGV4dHVyZXM7XHJcblxyXG5cdHZhciBtYXhTYW1wbGVzID0gaXNXZWJHTDIgPyBnbC5nZXRQYXJhbWV0ZXIoMzYxODMpIDogMDtcclxuXHJcblx0cmV0dXJuIHtcclxuXHJcblx0XHRpc1dlYkdMMjogaXNXZWJHTDIsXHJcblxyXG5cdFx0Z2V0TWF4QW5pc290cm9weTogZ2V0TWF4QW5pc290cm9weSxcclxuXHRcdGdldE1heFByZWNpc2lvbjogZ2V0TWF4UHJlY2lzaW9uLFxyXG5cclxuXHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxyXG5cdFx0bG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcjogbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcixcclxuXHJcblx0XHRtYXhUZXh0dXJlczogbWF4VGV4dHVyZXMsXHJcblx0XHRtYXhWZXJ0ZXhUZXh0dXJlczogbWF4VmVydGV4VGV4dHVyZXMsXHJcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXHJcblx0XHRtYXhDdWJlbWFwU2l6ZTogbWF4Q3ViZW1hcFNpemUsXHJcblxyXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcclxuXHRcdG1heFZlcnRleFVuaWZvcm1zOiBtYXhWZXJ0ZXhVbmlmb3JtcyxcclxuXHRcdG1heFZhcnlpbmdzOiBtYXhWYXJ5aW5ncyxcclxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXHJcblxyXG5cdFx0dmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxyXG5cdFx0ZmxvYXRGcmFnbWVudFRleHR1cmVzOiBmbG9hdEZyYWdtZW50VGV4dHVyZXMsXHJcblx0XHRmbG9hdFZlcnRleFRleHR1cmVzOiBmbG9hdFZlcnRleFRleHR1cmVzLFxyXG5cclxuXHRcdG1heFNhbXBsZXM6IG1heFNhbXBsZXNcclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xDbGlwcGluZygpIHtcclxuXHJcblx0dmFyIHNjb3BlID0gdGhpcyxcclxuXHJcblx0XHRnbG9iYWxTdGF0ZSA9IG51bGwsXHJcblx0XHRudW1HbG9iYWxQbGFuZXMgPSAwLFxyXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcclxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZSxcclxuXHJcblx0XHRwbGFuZSA9IG5ldyBQbGFuZSgpLFxyXG5cdFx0dmlld05vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCksXHJcblxyXG5cdFx0dW5pZm9ybSA9IHsgdmFsdWU6IG51bGwsIG5lZWRzVXBkYXRlOiBmYWxzZSB9O1xyXG5cclxuXHR0aGlzLnVuaWZvcm0gPSB1bmlmb3JtO1xyXG5cdHRoaXMubnVtUGxhbmVzID0gMDtcclxuXHR0aGlzLm51bUludGVyc2VjdGlvbiA9IDA7XHJcblxyXG5cdHRoaXMuaW5pdCA9IGZ1bmN0aW9uIChwbGFuZXMsIGVuYWJsZUxvY2FsQ2xpcHBpbmcsIGNhbWVyYSkge1xyXG5cclxuXHRcdHZhciBlbmFibGVkID1cclxuXHRcdFx0cGxhbmVzLmxlbmd0aCAhPT0gMCB8fFxyXG5cdFx0XHRlbmFibGVMb2NhbENsaXBwaW5nIHx8XHJcblx0XHRcdC8vIGVuYWJsZSBzdGF0ZSBvZiBwcmV2aW91cyBmcmFtZSAtIHRoZSBjbGlwcGluZyBjb2RlIGhhcyB0b1xyXG5cdFx0XHQvLyBydW4gYW5vdGhlciBmcmFtZSBpbiBvcmRlciB0byByZXNldCB0aGUgc3RhdGU6XHJcblx0XHRcdG51bUdsb2JhbFBsYW5lcyAhPT0gMCB8fFxyXG5cdFx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZDtcclxuXHJcblx0XHRsb2NhbENsaXBwaW5nRW5hYmxlZCA9IGVuYWJsZUxvY2FsQ2xpcHBpbmc7XHJcblxyXG5cdFx0Z2xvYmFsU3RhdGUgPSBwcm9qZWN0UGxhbmVzKHBsYW5lcywgY2FtZXJhLCAwKTtcclxuXHRcdG51bUdsb2JhbFBsYW5lcyA9IHBsYW5lcy5sZW5ndGg7XHJcblxyXG5cdFx0cmV0dXJuIGVuYWJsZWQ7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSB0cnVlO1xyXG5cdFx0cHJvamVjdFBsYW5lcyhudWxsKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJlbmRlcmluZ1NoYWRvd3MgPSBmYWxzZTtcclxuXHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwbGFuZXMsIGNsaXBJbnRlcnNlY3Rpb24sIGNsaXBTaGFkb3dzLCBjYW1lcmEsIGNhY2hlLCBmcm9tQ2FjaGUpIHtcclxuXHJcblx0XHRpZiAoIWxvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IHBsYW5lcyA9PT0gbnVsbCB8fCBwbGFuZXMubGVuZ3RoID09PSAwIHx8IHJlbmRlcmluZ1NoYWRvd3MgJiYgIWNsaXBTaGFkb3dzKSB7XHJcblxyXG5cdFx0XHQvLyB0aGVyZSdzIG5vIGxvY2FsIGNsaXBwaW5nXHJcblxyXG5cdFx0XHRpZiAocmVuZGVyaW5nU2hhZG93cykge1xyXG5cclxuXHRcdFx0XHQvLyB0aGVyZSdzIG5vIGdsb2JhbCBjbGlwcGluZ1xyXG5cclxuXHRcdFx0XHRwcm9qZWN0UGxhbmVzKG51bGwpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0cmVzZXRHbG9iYWxTdGF0ZSgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR2YXIgbkdsb2JhbCA9IHJlbmRlcmluZ1NoYWRvd3MgPyAwIDogbnVtR2xvYmFsUGxhbmVzLFxyXG5cdFx0XHRcdGxHbG9iYWwgPSBuR2xvYmFsICogNCxcclxuXHJcblx0XHRcdFx0ZHN0QXJyYXkgPSBjYWNoZS5jbGlwcGluZ1N0YXRlIHx8IG51bGw7XHJcblxyXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGVcclxuXHJcblx0XHRcdGRzdEFycmF5ID0gcHJvamVjdFBsYW5lcyhwbGFuZXMsIGNhbWVyYSwgbEdsb2JhbCwgZnJvbUNhY2hlKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpICE9PSBsR2xvYmFsOyArK2kpIHtcclxuXHJcblx0XHRcdFx0ZHN0QXJyYXlbaV0gPSBnbG9iYWxTdGF0ZVtpXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNhY2hlLmNsaXBwaW5nU3RhdGUgPSBkc3RBcnJheTtcclxuXHRcdFx0dGhpcy5udW1JbnRlcnNlY3Rpb24gPSBjbGlwSW50ZXJzZWN0aW9uID8gdGhpcy5udW1QbGFuZXMgOiAwO1xyXG5cdFx0XHR0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsO1xyXG5cclxuXHRcdH1cclxuXHJcblxyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIHJlc2V0R2xvYmFsU3RhdGUoKSB7XHJcblxyXG5cdFx0aWYgKHVuaWZvcm0udmFsdWUgIT09IGdsb2JhbFN0YXRlKSB7XHJcblxyXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZ2xvYmFsU3RhdGU7XHJcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSBudW1HbG9iYWxQbGFuZXMgPiAwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7XHJcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHByb2plY3RQbGFuZXMocGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSkge1xyXG5cclxuXHRcdHZhciBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDAsXHJcblx0XHRcdGRzdEFycmF5ID0gbnVsbDtcclxuXHJcblx0XHRpZiAoblBsYW5lcyAhPT0gMCkge1xyXG5cclxuXHRcdFx0ZHN0QXJyYXkgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuXHRcdFx0aWYgKHNraXBUcmFuc2Zvcm0gIT09IHRydWUgfHwgZHN0QXJyYXkgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0dmFyIGZsYXRTaXplID0gZHN0T2Zmc2V0ICsgblBsYW5lcyAqIDQsXHJcblx0XHRcdFx0XHR2aWV3TWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcclxuXHJcblx0XHRcdFx0dmlld05vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgodmlld01hdHJpeCk7XHJcblxyXG5cdFx0XHRcdGlmIChkc3RBcnJheSA9PT0gbnVsbCB8fCBkc3RBcnJheS5sZW5ndGggPCBmbGF0U2l6ZSkge1xyXG5cclxuXHRcdFx0XHRcdGRzdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShmbGF0U2l6ZSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGk0ID0gZHN0T2Zmc2V0OyBpICE9PSBuUGxhbmVzOyArK2ksIGk0ICs9IDQpIHtcclxuXHJcblx0XHRcdFx0XHRwbGFuZS5jb3B5KHBsYW5lc1tpXSkuYXBwbHlNYXRyaXg0KHZpZXdNYXRyaXgsIHZpZXdOb3JtYWxNYXRyaXgpO1xyXG5cclxuXHRcdFx0XHRcdHBsYW5lLm5vcm1hbC50b0FycmF5KGRzdEFycmF5LCBpNCk7XHJcblx0XHRcdFx0XHRkc3RBcnJheVtpNCArIDNdID0gcGxhbmUuY29uc3RhbnQ7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTtcclxuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHNjb3BlLm51bVBsYW5lcyA9IG5QbGFuZXM7XHJcblxyXG5cdFx0cmV0dXJuIGRzdEFycmF5O1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTEV4dGVuc2lvbnMoZ2wpIHtcclxuXHJcblx0dmFyIGV4dGVuc2lvbnMgPSB7fTtcclxuXHJcblx0cmV0dXJuIHtcclxuXHJcblx0XHRnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XHJcblxyXG5cdFx0XHRpZiAoZXh0ZW5zaW9uc1tuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb25zW25hbWVdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGV4dGVuc2lvbjtcclxuXHJcblx0XHRcdHN3aXRjaCAobmFtZSkge1xyXG5cclxuXHRcdFx0XHRjYXNlICdXRUJHTF9kZXB0aF90ZXh0dXJlJzpcclxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbignV0VCR0xfZGVwdGhfdGV4dHVyZScpIHx8IGdsLmdldEV4dGVuc2lvbignTU9aX1dFQkdMX2RlcHRoX3RleHR1cmUnKSB8fCBnbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9kZXB0aF90ZXh0dXJlJyk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAnRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJzpcclxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnOlxyXG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycpIHx8IGdsLmdldEV4dGVuc2lvbignTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJykgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnOlxyXG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKSB8fCBnbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKG5hbWUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbiA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGV4dGVuc2lvbnNbbmFtZV0gPSBleHRlbnNpb247XHJcblxyXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMR2VvbWV0cmllcyhnbCwgYXR0cmlidXRlcywgaW5mbykge1xyXG5cclxuXHR2YXIgZ2VvbWV0cmllcyA9IG5ldyBXZWFrTWFwKCk7XHJcblx0dmFyIHdpcmVmcmFtZUF0dHJpYnV0ZXMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHRmdW5jdGlvbiBvbkdlb21ldHJ5RGlzcG9zZShldmVudCkge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IGV2ZW50LnRhcmdldDtcclxuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KGdlb21ldHJ5KTtcclxuXHJcblx0XHRpZiAoYnVmZmVyZ2VvbWV0cnkuaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZXMucmVtb3ZlKGJ1ZmZlcmdlb21ldHJ5LmluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZShidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzW25hbWVdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Z2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlKTtcclxuXHJcblx0XHRnZW9tZXRyaWVzLmRlbGV0ZShnZW9tZXRyeSk7XHJcblxyXG5cdFx0dmFyIGF0dHJpYnV0ZSA9IHdpcmVmcmFtZUF0dHJpYnV0ZXMuZ2V0KGJ1ZmZlcmdlb21ldHJ5KTtcclxuXHJcblx0XHRpZiAoYXR0cmlidXRlKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZShhdHRyaWJ1dGUpO1xyXG5cdFx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzLmRlbGV0ZShidWZmZXJnZW9tZXRyeSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcy0tO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldChvYmplY3QsIGdlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cmllcy5nZXQoZ2VvbWV0cnkpO1xyXG5cclxuXHRcdGlmIChidWZmZXJnZW9tZXRyeSkgeyByZXR1cm4gYnVmZmVyZ2VvbWV0cnk7IH1cclxuXHJcblx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25HZW9tZXRyeURpc3Bvc2UpO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHRidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoZ2VvbWV0cnkuaXNHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0aWYgKGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21PYmplY3Qob2JqZWN0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyaWVzLnNldChnZW9tZXRyeSwgYnVmZmVyZ2VvbWV0cnkpO1xyXG5cclxuXHRcdGluZm8ubWVtb3J5Lmdlb21ldHJpZXMrKztcclxuXHJcblx0XHRyZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlKGdlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHR2YXIgZ2VvbWV0cnlBdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKGluZGV4LCAzNDk2Myk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZShnZW9tZXRyeUF0dHJpYnV0ZXNbbmFtZV0sIDM0OTYyKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gbW9ycGggdGFyZ2V0c1xyXG5cclxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMpIHtcclxuXHJcblx0XHRcdHZhciBhcnJheSA9IG1vcnBoQXR0cmlidXRlc1tuYW1lXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKGFycmF5W2ldLCAzNDk2Mik7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZShnZW9tZXRyeSkge1xyXG5cclxuXHRcdHZhciBpbmRpY2VzID0gW107XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5SW5kZXggPSBnZW9tZXRyeS5pbmRleDtcclxuXHRcdHZhciBnZW9tZXRyeVBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdHZhciB2ZXJzaW9uID0gMDtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlJbmRleC5hcnJheTtcclxuXHRcdFx0dmVyc2lvbiA9IGdlb21ldHJ5SW5kZXgudmVyc2lvbjtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSAzKSB7XHJcblxyXG5cdFx0XHRcdHZhciBhID0gYXJyYXlbaSArIDBdO1xyXG5cdFx0XHRcdHZhciBiID0gYXJyYXlbaSArIDFdO1xyXG5cdFx0XHRcdHZhciBjID0gYXJyYXlbaSArIDJdO1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzLnB1c2goYSwgYiwgYiwgYywgYywgYSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHZhciBhcnJheSA9IGdlb21ldHJ5UG9zaXRpb24uYXJyYXk7XHJcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeVBvc2l0aW9uLnZlcnNpb247XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IChhcnJheS5sZW5ndGggLyAzKSAtIDE7IGkgPCBsOyBpICs9IDMpIHtcclxuXHJcblx0XHRcdFx0dmFyIGEgPSBpICsgMDtcclxuXHRcdFx0XHR2YXIgYiA9IGkgKyAxO1xyXG5cdFx0XHRcdHZhciBjID0gaSArIDI7XHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaChhLCBiLCBiLCBjLCBjLCBhKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGF0dHJpYnV0ZSA9IG5ldyAoYXJyYXlNYXgoaW5kaWNlcykgPiA2NTUzNSA/IFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSA6IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSkoaW5kaWNlcywgMSk7XHJcblx0XHRhdHRyaWJ1dGUudmVyc2lvbiA9IHZlcnNpb247XHJcblxyXG5cdFx0YXR0cmlidXRlcy51cGRhdGUoYXR0cmlidXRlLCAzNDk2Myk7XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHR2YXIgcHJldmlvdXNBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldChnZW9tZXRyeSk7XHJcblxyXG5cdFx0aWYgKHByZXZpb3VzQXR0cmlidXRlKSB7IGF0dHJpYnV0ZXMucmVtb3ZlKHByZXZpb3VzQXR0cmlidXRlKTsgfVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5zZXQoZ2VvbWV0cnksIGF0dHJpYnV0ZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKGdlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRBdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldChnZW9tZXRyeSk7XHJcblxyXG5cdFx0aWYgKGN1cnJlbnRBdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRcdHZhciBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHQvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lXHJcblxyXG5cdFx0XHRcdGlmIChjdXJyZW50QXR0cmlidXRlLnZlcnNpb24gPCBnZW9tZXRyeUluZGV4LnZlcnNpb24pIHtcclxuXHJcblx0XHRcdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoZ2VvbWV0cnkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHVwZGF0ZVdpcmVmcmFtZUF0dHJpYnV0ZShnZW9tZXRyeSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldChnZW9tZXRyeSk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHJcblx0XHRnZXQ6IGdldCxcclxuXHRcdHVwZGF0ZTogdXBkYXRlLFxyXG5cclxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlcihnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzKSB7XHJcblxyXG5cdHZhciBtb2RlO1xyXG5cclxuXHRmdW5jdGlvbiBzZXRNb2RlKHZhbHVlKSB7XHJcblxyXG5cdFx0bW9kZSA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciB0eXBlLCBieXRlc1BlckVsZW1lbnQ7XHJcblxyXG5cdGZ1bmN0aW9uIHNldEluZGV4KHZhbHVlKSB7XHJcblxyXG5cdFx0dHlwZSA9IHZhbHVlLnR5cGU7XHJcblx0XHRieXRlc1BlckVsZW1lbnQgPSB2YWx1ZS5ieXRlc1BlckVsZW1lbnQ7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVuZGVyKHN0YXJ0LCBjb3VudCkge1xyXG5cclxuXHRcdGdsLmRyYXdFbGVtZW50cyhtb2RlLCBjb3VudCwgdHlwZSwgc3RhcnQgKiBieXRlc1BlckVsZW1lbnQpO1xyXG5cclxuXHRcdGluZm8udXBkYXRlKGNvdW50LCBtb2RlKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoZ2VvbWV0cnksIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50KSB7XHJcblxyXG5cdFx0aWYgKHByaW1jb3VudCA9PT0gMCkgeyByZXR1cm47IH1cclxuXHJcblx0XHR2YXIgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xyXG5cclxuXHRcdGlmIChjYXBhYmlsaXRpZXMuaXNXZWJHTDIpIHtcclxuXHJcblx0XHRcdGV4dGVuc2lvbiA9IGdsO1xyXG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XHJcblx0XHRcdG1ldGhvZE5hbWUgPSAnZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUnO1xyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbiA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuJyk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRleHRlbnNpb25bbWV0aG9kTmFtZV0obW9kZSwgY291bnQsIHR5cGUsIHN0YXJ0ICogYnl0ZXNQZXJFbGVtZW50LCBwcmltY291bnQpO1xyXG5cclxuXHRcdGluZm8udXBkYXRlKGNvdW50LCBtb2RlLCBwcmltY291bnQpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vXHJcblxyXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XHJcblx0dGhpcy5zZXRJbmRleCA9IHNldEluZGV4O1xyXG5cdHRoaXMucmVuZGVyID0gcmVuZGVyO1xyXG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xJbmZvKGdsKSB7XHJcblxyXG5cdHZhciBtZW1vcnkgPSB7XHJcblx0XHRnZW9tZXRyaWVzOiAwLFxyXG5cdFx0dGV4dHVyZXM6IDBcclxuXHR9O1xyXG5cclxuXHR2YXIgcmVuZGVyID0ge1xyXG5cdFx0ZnJhbWU6IDAsXHJcblx0XHRjYWxsczogMCxcclxuXHRcdHRyaWFuZ2xlczogMCxcclxuXHRcdHBvaW50czogMCxcclxuXHRcdGxpbmVzOiAwXHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlKGNvdW50LCBtb2RlLCBpbnN0YW5jZUNvdW50KSB7XHJcblxyXG5cdFx0aW5zdGFuY2VDb3VudCA9IGluc3RhbmNlQ291bnQgfHwgMTtcclxuXHJcblx0XHRyZW5kZXIuY2FsbHMrKztcclxuXHJcblx0XHRzd2l0Y2ggKG1vZGUpIHtcclxuXHJcblx0XHRcdGNhc2UgNDpcclxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoY291bnQgLyAzKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgNTpcclxuXHRcdFx0Y2FzZSA2OlxyXG5cdFx0XHRcdHJlbmRlci50cmlhbmdsZXMgKz0gaW5zdGFuY2VDb3VudCAqIChjb3VudCAtIDIpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKGNvdW50IC8gMik7XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiAoY291bnQgLSAxKTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdHJlbmRlci5wb2ludHMgKz0gaW5zdGFuY2VDb3VudCAqIGNvdW50O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTEluZm86IFVua25vd24gZHJhdyBtb2RlOicsIG1vZGUpO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZXNldCgpIHtcclxuXHJcblx0XHRyZW5kZXIuZnJhbWUrKztcclxuXHRcdHJlbmRlci5jYWxscyA9IDA7XHJcblx0XHRyZW5kZXIudHJpYW5nbGVzID0gMDtcclxuXHRcdHJlbmRlci5wb2ludHMgPSAwO1xyXG5cdFx0cmVuZGVyLmxpbmVzID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0bWVtb3J5OiBtZW1vcnksXHJcblx0XHRyZW5kZXI6IHJlbmRlcixcclxuXHRcdHByb2dyYW1zOiBudWxsLFxyXG5cdFx0YXV0b1Jlc2V0OiB0cnVlLFxyXG5cdFx0cmVzZXQ6IHJlc2V0LFxyXG5cdFx0dXBkYXRlOiB1cGRhdGVcclxuXHR9O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gYWJzTnVtZXJpY2FsU29ydChhLCBiKSB7XHJcblxyXG5cdHJldHVybiBNYXRoLmFicyhiWzFdKSAtIE1hdGguYWJzKGFbMV0pO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gV2ViR0xNb3JwaHRhcmdldHMoZ2wpIHtcclxuXHJcblx0dmFyIGluZmx1ZW5jZXNMaXN0ID0ge307XHJcblx0dmFyIG1vcnBoSW5mbHVlbmNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoOCk7XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSkge1xyXG5cclxuXHRcdHZhciBvYmplY3RJbmZsdWVuY2VzID0gb2JqZWN0Lm1vcnBoVGFyZ2V0SW5mbHVlbmNlcztcclxuXHJcblx0XHR2YXIgbGVuZ3RoID0gb2JqZWN0SW5mbHVlbmNlcy5sZW5ndGg7XHJcblxyXG5cdFx0dmFyIGluZmx1ZW5jZXMgPSBpbmZsdWVuY2VzTGlzdFtnZW9tZXRyeS5pZF07XHJcblxyXG5cdFx0aWYgKGluZmx1ZW5jZXMgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Ly8gaW5pdGlhbGlzZSBsaXN0XHJcblxyXG5cdFx0XHRpbmZsdWVuY2VzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGluZmx1ZW5jZXNbaV0gPSBbaSwgMF07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpbmZsdWVuY2VzTGlzdFtnZW9tZXRyeS5pZF0gPSBpbmZsdWVuY2VzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbW9ycGhUYXJnZXRzID0gbWF0ZXJpYWwubW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLm5vcm1hbDtcclxuXHJcblx0XHQvLyBSZW1vdmUgY3VycmVudCBtb3JwaEF0dHJpYnV0ZXNcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgaW5mbHVlbmNlID0gaW5mbHVlbmNlc1tpXTtcclxuXHJcblx0XHRcdGlmIChpbmZsdWVuY2VbMV0gIT09IDApIHtcclxuXHJcblx0XHRcdFx0aWYgKG1vcnBoVGFyZ2V0cykgeyBnZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoJ21vcnBoVGFyZ2V0JyArIGkpOyB9XHJcblx0XHRcdFx0aWYgKG1vcnBoTm9ybWFscykgeyBnZW9tZXRyeS5yZW1vdmVBdHRyaWJ1dGUoJ21vcnBoTm9ybWFsJyArIGkpOyB9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENvbGxlY3QgaW5mbHVlbmNlc1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzW2ldO1xyXG5cclxuXHRcdFx0aW5mbHVlbmNlWzBdID0gaTtcclxuXHRcdFx0aW5mbHVlbmNlWzFdID0gb2JqZWN0SW5mbHVlbmNlc1tpXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW5mbHVlbmNlcy5zb3J0KGFic051bWVyaWNhbFNvcnQpO1xyXG5cclxuXHRcdC8vIEFkZCBtb3JwaEF0dHJpYnV0ZXNcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbaV07XHJcblxyXG5cdFx0XHRpZiAoaW5mbHVlbmNlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBpbmRleCA9IGluZmx1ZW5jZVswXTtcclxuXHRcdFx0XHR2YXIgdmFsdWUgPSBpbmZsdWVuY2VbMV07XHJcblxyXG5cdFx0XHRcdGlmICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChtb3JwaFRhcmdldHMpIHsgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdtb3JwaFRhcmdldCcgKyBpLCBtb3JwaFRhcmdldHNbaW5kZXhdKTsgfVxyXG5cdFx0XHRcdFx0aWYgKG1vcnBoTm9ybWFscykgeyBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ21vcnBoTm9ybWFsJyArIGksIG1vcnBoTm9ybWFsc1tpbmRleF0pOyB9XHJcblxyXG5cdFx0XHRcdFx0bW9ycGhJbmZsdWVuY2VzW2ldID0gdmFsdWU7XHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzW2ldID0gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKGdsLCAnbW9ycGhUYXJnZXRJbmZsdWVuY2VzJywgbW9ycGhJbmZsdWVuY2VzKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cclxuXHRcdHVwZGF0ZTogdXBkYXRlXHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTE9iamVjdHMoZ2wsIGdlb21ldHJpZXMsIGF0dHJpYnV0ZXMsIGluZm8pIHtcclxuXHJcblx0dmFyIHVwZGF0ZUxpc3QgPSB7fTtcclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlKG9iamVjdCkge1xyXG5cclxuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcclxuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KG9iamVjdCwgZ2VvbWV0cnkpO1xyXG5cclxuXHRcdC8vIFVwZGF0ZSBvbmNlIHBlciBmcmFtZVxyXG5cclxuXHRcdGlmICh1cGRhdGVMaXN0W2J1ZmZlcmdlb21ldHJ5LmlkXSAhPT0gZnJhbWUpIHtcclxuXHJcblx0XHRcdGlmIChnZW9tZXRyeS5pc0dlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHRcdGJ1ZmZlcmdlb21ldHJ5LnVwZGF0ZUZyb21PYmplY3Qob2JqZWN0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGdlb21ldHJpZXMudXBkYXRlKGJ1ZmZlcmdlb21ldHJ5KTtcclxuXHJcblx0XHRcdHVwZGF0ZUxpc3RbYnVmZmVyZ2VvbWV0cnkuaWRdID0gZnJhbWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvYmplY3QuaXNJbnN0YW5jZWRNZXNoKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZShvYmplY3QuaW5zdGFuY2VNYXRyaXgsIDM0OTYyKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGJ1ZmZlcmdlb21ldHJ5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0dXBkYXRlTGlzdCA9IHt9O1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblxyXG5cdFx0dXBkYXRlOiB1cGRhdGUsXHJcblx0XHRkaXNwb3NlOiBkaXNwb3NlXHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBDdWJlVGV4dHVyZShpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcpIHtcclxuXHJcblx0aW1hZ2VzID0gaW1hZ2VzICE9PSB1bmRlZmluZWQgPyBpbWFnZXMgOiBbXTtcclxuXHRtYXBwaW5nID0gbWFwcGluZyAhPT0gdW5kZWZpbmVkID8gbWFwcGluZyA6IEN1YmVSZWZsZWN0aW9uTWFwcGluZztcclxuXHRmb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkZvcm1hdDtcclxuXHJcblx0VGV4dHVyZS5jYWxsKHRoaXMsIGltYWdlcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyk7XHJcblxyXG5cdHRoaXMuZmxpcFkgPSBmYWxzZTtcclxuXHJcbn1cclxuXHJcbkN1YmVUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoVGV4dHVyZS5wcm90b3R5cGUpO1xyXG5DdWJlVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlVGV4dHVyZTtcclxuXHJcbkN1YmVUZXh0dXJlLnByb3RvdHlwZS5pc0N1YmVUZXh0dXJlID0gdHJ1ZTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdWJlVGV4dHVyZS5wcm90b3R5cGUsICdpbWFnZXMnLCB7XHJcblxyXG5cdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmltYWdlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMuaW1hZ2UgPSB2YWx1ZTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBUYWthaGlybyBodHRwczovL2dpdGh1Yi5jb20vdGFrYWhpcm94XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRGF0YVRleHR1cmUyREFycmF5KGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoKSB7XHJcblxyXG5cdFRleHR1cmUuY2FsbCh0aGlzLCBudWxsKTtcclxuXHJcblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSwgZGVwdGg6IGRlcHRoIHx8IDEgfTtcclxuXHJcblx0dGhpcy5tYWdGaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xyXG5cdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuXHJcblx0dGhpcy53cmFwUiA9IENsYW1wVG9FZGdlV3JhcHBpbmc7XHJcblxyXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XHJcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn1cclxuXHJcbkRhdGFUZXh0dXJlMkRBcnJheS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRleHR1cmUucHJvdG90eXBlKTtcclxuRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlMkRBcnJheTtcclxuRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlMkRBcnJheSA9IHRydWU7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBBcnR1ciBUcnplc2lva1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIERhdGFUZXh0dXJlM0QoZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGgpIHtcclxuXHJcblx0Ly8gV2UncmUgZ29pbmcgdG8gYWRkIC5zZXRYWFgoKSBtZXRob2RzIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgbGF0ZXIuXHJcblx0Ly8gVXNlcnMgY2FuIHN0aWxsIHNldCBpbiBEYXRhVGV4dHVyZTNEIGRpcmVjdGx5LlxyXG5cdC8vXHJcblx0Ly9cdHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICk7XHJcblx0Ly8gXHR0ZXh0dXJlLmFuaXNvdHJvcHkgPSAxNjtcclxuXHQvL1xyXG5cdC8vIFNlZSAjMTQ4MzlcclxuXHJcblx0VGV4dHVyZS5jYWxsKHRoaXMsIG51bGwpO1xyXG5cclxuXHR0aGlzLmltYWdlID0geyBkYXRhOiBkYXRhIHx8IG51bGwsIHdpZHRoOiB3aWR0aCB8fCAxLCBoZWlnaHQ6IGhlaWdodCB8fCAxLCBkZXB0aDogZGVwdGggfHwgMSB9O1xyXG5cclxuXHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XHJcblx0dGhpcy5taW5GaWx0ZXIgPSBOZWFyZXN0RmlsdGVyO1xyXG5cclxuXHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHJcblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XHJcblxyXG5cdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHJcbn1cclxuXHJcbkRhdGFUZXh0dXJlM0QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUZXh0dXJlLnByb3RvdHlwZSk7XHJcbkRhdGFUZXh0dXJlM0QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmUzRDtcclxuRGF0YVRleHR1cmUzRC5wcm90b3R5cGUuaXNEYXRhVGV4dHVyZTNEID0gdHJ1ZTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqXHJcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cclxuICogVGhvc2UgZm9ybSBhIHRyZWUgc3RydWN0dXJlIHdpdGggYSBzcGVjaWFsIHRvcC1sZXZlbCBjb250YWluZXIgZm9yIHRoZSByb290LFxyXG4gKiB3aGljaCB5b3UgZ2V0IGJ5IGNhbGxpbmcgJ25ldyBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApJy5cclxuICpcclxuICpcclxuICogUHJvcGVydGllcyBvZiBpbm5lciBub2RlcyBpbmNsdWRpbmcgdGhlIHRvcC1sZXZlbCBjb250YWluZXI6XHJcbiAqXHJcbiAqIC5zZXEgLSBhcnJheSBvZiBuZXN0ZWQgdW5pZm9ybXNcclxuICogLm1hcCAtIG5lc3RlZCB1bmlmb3JtcyBieSBuYW1lXHJcbiAqXHJcbiAqXHJcbiAqIE1ldGhvZHMgb2YgYWxsIG5vZGVzIGV4Y2VwdCB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcclxuICpcclxuICogLnNldFZhbHVlKCBnbCwgdmFsdWUsIFt0ZXh0dXJlc10gKVxyXG4gKlxyXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcclxuICogIFx0dGhlICd0ZXh0dXJlcycgcGFyYW1ldGVyIGlzIG5lZWRlZCBmb3Igc2FtcGxlciB1bmlmb3Jtc1xyXG4gKlxyXG4gKlxyXG4gKiBTdGF0aWMgbWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxyXG4gKlxyXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcclxuICpcclxuICogXHRcdHNldHMgdW5pZm9ybXMgaW4gJ3NlcScgdG8gJ3ZhbHVlc1tpZF0udmFsdWUnXHJcbiAqXHJcbiAqIC5zZXFXaXRoVmFsdWUoIHNlcSwgdmFsdWVzICkgOiBmaWx0ZXJlZFNlcVxyXG4gKlxyXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcclxuICpcclxuICpcclxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxyXG4gKlxyXG4gKiAuc2V0VmFsdWUoIGdsLCBuYW1lLCB2YWx1ZSwgdGV4dHVyZXMgKVxyXG4gKlxyXG4gKiBcdFx0c2V0cyB1bmlmb3JtIHdpdGggIG5hbWUgJ25hbWUnIHRvICd2YWx1ZSdcclxuICpcclxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcclxuICpcclxuICogXHRcdGxpa2UgLnNldCBmb3IgYW4gb3B0aW9uYWwgcHJvcGVydHkgb2YgdGhlIG9iamVjdFxyXG4gKlxyXG4gKi9cclxuXHJcbnZhciBlbXB0eVRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xyXG52YXIgZW1wdHlUZXh0dXJlMmRBcnJheSA9IG5ldyBEYXRhVGV4dHVyZTJEQXJyYXkoKTtcclxudmFyIGVtcHR5VGV4dHVyZTNkID0gbmV3IERhdGFUZXh0dXJlM0QoKTtcclxudmFyIGVtcHR5Q3ViZVRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcclxuXHJcbi8vIC0tLSBVdGlsaXRpZXMgLS0tXHJcblxyXG4vLyBBcnJheSBDYWNoZXMgKHByb3ZpZGUgdHlwZWQgYXJyYXlzIGZvciB0ZW1wb3JhcnkgYnkgc2l6ZSlcclxuXHJcbnZhciBhcnJheUNhY2hlRjMyID0gW107XHJcbnZhciBhcnJheUNhY2hlSTMyID0gW107XHJcblxyXG4vLyBGbG9hdDMyQXJyYXkgY2FjaGVzIHVzZWQgZm9yIHVwbG9hZGluZyBNYXRyaXggdW5pZm9ybXNcclxuXHJcbnZhciBtYXQ0YXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcclxudmFyIG1hdDNhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoOSk7XHJcbnZhciBtYXQyYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xyXG5cclxuLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzXHJcblxyXG5mdW5jdGlvbiBmbGF0dGVuKGFycmF5LCBuQmxvY2tzLCBibG9ja1NpemUpIHtcclxuXHJcblx0dmFyIGZpcnN0RWxlbSA9IGFycmF5WzBdO1xyXG5cclxuXHRpZiAoZmlyc3RFbGVtIDw9IDAgfHwgZmlyc3RFbGVtID4gMCkgeyByZXR1cm4gYXJyYXk7IH1cclxuXHQvLyB1bm9wdGltaXplZDogISBpc05hTiggZmlyc3RFbGVtIClcclxuXHQvLyBzZWUgaHR0cDovL2phY2tzb25kdW5zdGFuLmNvbS9hcnRpY2xlcy85ODNcclxuXHJcblx0dmFyIG4gPSBuQmxvY2tzICogYmxvY2tTaXplLFxyXG5cdFx0ciA9IGFycmF5Q2FjaGVGMzJbbl07XHJcblxyXG5cdGlmIChyID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRyID0gbmV3IEZsb2F0MzJBcnJheShuKTtcclxuXHRcdGFycmF5Q2FjaGVGMzJbbl0gPSByO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmIChuQmxvY2tzICE9PSAwKSB7XHJcblxyXG5cdFx0Zmlyc3RFbGVtLnRvQXJyYXkociwgMCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsraSkge1xyXG5cclxuXHRcdFx0b2Zmc2V0ICs9IGJsb2NrU2l6ZTtcclxuXHRcdFx0YXJyYXlbaV0udG9BcnJheShyLCBvZmZzZXQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5c0VxdWFsKGEsIGIpIHtcclxuXHJcblx0aWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdGlmIChhW2ldICE9PSBiW2ldKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY29weUFycmF5KGEsIGIpIHtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBiLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdGFbaV0gPSBiW2ldO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvblxyXG5cclxuZnVuY3Rpb24gYWxsb2NUZXhVbml0cyh0ZXh0dXJlcywgbikge1xyXG5cclxuXHR2YXIgciA9IGFycmF5Q2FjaGVJMzJbbl07XHJcblxyXG5cdGlmIChyID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRyID0gbmV3IEludDMyQXJyYXkobik7XHJcblx0XHRhcnJheUNhY2hlSTMyW25dID0gcjtcclxuXHJcblx0fVxyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSAhPT0gbjsgKytpKSB7IHJbaV0gPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7IH1cclxuXHJcblx0cmV0dXJuIHI7XHJcblxyXG59XHJcblxyXG4vLyAtLS0gU2V0dGVycyAtLS1cclxuXHJcbi8vIE5vdGU6IERlZmluaW5nIHRoZXNlIG1ldGhvZHMgZXh0ZXJuYWxseSwgYmVjYXVzZSB0aGV5IGNvbWUgaW4gYSBidW5jaFxyXG4vLyBhbmQgdGhpcyB3YXkgdGhlaXIgbmFtZXMgbWluaWZ5LlxyXG5cclxuLy8gU2luZ2xlIHNjYWxhclxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVWMWYoZ2wsIHYpIHtcclxuXHJcblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcclxuXHJcblx0aWYgKGNhY2hlWzBdID09PSB2KSB7IHJldHVybjsgfVxyXG5cclxuXHRnbC51bmlmb3JtMWYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0Y2FjaGVbMF0gPSB2O1xyXG5cclxufVxyXG5cclxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZihnbCwgdikge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cclxuXHRpZiAodi54ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRpZiAoY2FjaGVbMF0gIT09IHYueCB8fCBjYWNoZVsxXSAhPT0gdi55KSB7XHJcblxyXG5cdFx0XHRnbC51bmlmb3JtMmYodGhpcy5hZGRyLCB2LngsIHYueSk7XHJcblxyXG5cdFx0XHRjYWNoZVswXSA9IHYueDtcclxuXHRcdFx0Y2FjaGVbMV0gPSB2Lnk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGlmIChhcnJheXNFcXVhbChjYWNoZSwgdikpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0Z2wudW5pZm9ybTJmdih0aGlzLmFkZHIsIHYpO1xyXG5cclxuXHRcdGNvcHlBcnJheShjYWNoZSwgdik7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjNmKGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblxyXG5cdGlmICh2LnggIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdGlmIChjYWNoZVswXSAhPT0gdi54IHx8IGNhY2hlWzFdICE9PSB2LnkgfHwgY2FjaGVbMl0gIT09IHYueikge1xyXG5cclxuXHRcdFx0Z2wudW5pZm9ybTNmKHRoaXMuYWRkciwgdi54LCB2LnksIHYueik7XHJcblxyXG5cdFx0XHRjYWNoZVswXSA9IHYueDtcclxuXHRcdFx0Y2FjaGVbMV0gPSB2Lnk7XHJcblx0XHRcdGNhY2hlWzJdID0gdi56O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmICh2LnIgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdGlmIChjYWNoZVswXSAhPT0gdi5yIHx8IGNhY2hlWzFdICE9PSB2LmcgfHwgY2FjaGVbMl0gIT09IHYuYikge1xyXG5cclxuXHRcdFx0Z2wudW5pZm9ybTNmKHRoaXMuYWRkciwgdi5yLCB2LmcsIHYuYik7XHJcblxyXG5cdFx0XHRjYWNoZVswXSA9IHYucjtcclxuXHRcdFx0Y2FjaGVbMV0gPSB2Lmc7XHJcblx0XHRcdGNhY2hlWzJdID0gdi5iO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpZiAoYXJyYXlzRXF1YWwoY2FjaGUsIHYpKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0XHRjb3B5QXJyYXkoY2FjaGUsIHYpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZVY0ZihnbCwgdikge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cclxuXHRpZiAodi54ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRpZiAoY2FjaGVbMF0gIT09IHYueCB8fCBjYWNoZVsxXSAhPT0gdi55IHx8IGNhY2hlWzJdICE9PSB2LnogfHwgY2FjaGVbM10gIT09IHYudykge1xyXG5cclxuXHRcdFx0Z2wudW5pZm9ybTRmKHRoaXMuYWRkciwgdi54LCB2LnksIHYueiwgdi53KTtcclxuXHJcblx0XHRcdGNhY2hlWzBdID0gdi54O1xyXG5cdFx0XHRjYWNoZVsxXSA9IHYueTtcclxuXHRcdFx0Y2FjaGVbMl0gPSB2Lno7XHJcblx0XHRcdGNhY2hlWzNdID0gdi53O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpZiAoYXJyYXlzRXF1YWwoY2FjaGUsIHYpKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdGdsLnVuaWZvcm00ZnYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0XHRjb3B5QXJyYXkoY2FjaGUsIHYpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vLyBTaW5nbGUgbWF0cml4IChmcm9tIGZsYXQgYXJyYXkgb3IgTWF0cml4TilcclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlTTIoZ2wsIHYpIHtcclxuXHJcblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcclxuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xyXG5cclxuXHRpZiAoZWxlbWVudHMgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdGlmIChhcnJheXNFcXVhbChjYWNoZSwgdikpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDJmdih0aGlzLmFkZHIsIGZhbHNlLCB2KTtcclxuXHJcblx0XHRjb3B5QXJyYXkoY2FjaGUsIHYpO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGlmIChhcnJheXNFcXVhbChjYWNoZSwgZWxlbWVudHMpKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdG1hdDJhcnJheS5zZXQoZWxlbWVudHMpO1xyXG5cclxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYodGhpcy5hZGRyLCBmYWxzZSwgbWF0MmFycmF5KTtcclxuXHJcblx0XHRjb3B5QXJyYXkoY2FjaGUsIGVsZW1lbnRzKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVNMyhnbCwgdikge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XHJcblxyXG5cdGlmIChlbGVtZW50cyA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0aWYgKGFycmF5c0VxdWFsKGNhY2hlLCB2KSkgeyByZXR1cm47IH1cclxuXHJcblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMuYWRkciwgZmFsc2UsIHYpO1xyXG5cclxuXHRcdGNvcHlBcnJheShjYWNoZSwgdik7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0aWYgKGFycmF5c0VxdWFsKGNhY2hlLCBlbGVtZW50cykpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0bWF0M2FycmF5LnNldChlbGVtZW50cyk7XHJcblxyXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkpO1xyXG5cclxuXHRcdGNvcHlBcnJheShjYWNoZSwgZWxlbWVudHMpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZU00KGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcclxuXHJcblx0aWYgKGVsZW1lbnRzID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRpZiAoYXJyYXlzRXF1YWwoY2FjaGUsIHYpKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5hZGRyLCBmYWxzZSwgdik7XHJcblxyXG5cdFx0Y29weUFycmF5KGNhY2hlLCB2KTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpZiAoYXJyYXlzRXF1YWwoY2FjaGUsIGVsZW1lbnRzKSkgeyByZXR1cm47IH1cclxuXHJcblx0XHRtYXQ0YXJyYXkuc2V0KGVsZW1lbnRzKTtcclxuXHJcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuYWRkciwgZmFsc2UsIG1hdDRhcnJheSk7XHJcblxyXG5cdFx0Y29weUFycmF5KGNhY2hlLCBlbGVtZW50cyk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8vIFNpbmdsZSB0ZXh0dXJlICgyRCAvIEN1YmUpXHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKGdsLCB2LCB0ZXh0dXJlcykge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xyXG5cclxuXHRpZiAoY2FjaGVbMF0gIT09IHVuaXQpIHtcclxuXHJcblx0XHRnbC51bmlmb3JtMWkodGhpcy5hZGRyLCB1bml0KTtcclxuXHRcdGNhY2hlWzBdID0gdW5pdDtcclxuXHJcblx0fVxyXG5cclxuXHR0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZTJEKHYgfHwgZW1wdHlUZXh0dXJlLCB1bml0KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVDJEQXJyYXkxKGdsLCB2LCB0ZXh0dXJlcykge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xyXG5cclxuXHRpZiAoY2FjaGVbMF0gIT09IHVuaXQpIHtcclxuXHJcblx0XHRnbC51bmlmb3JtMWkodGhpcy5hZGRyLCB1bml0KTtcclxuXHRcdGNhY2hlWzBdID0gdW5pdDtcclxuXHJcblx0fVxyXG5cclxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkRBcnJheSh2IHx8IGVtcHR5VGV4dHVyZTJkQXJyYXksIHVuaXQpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVUM0QxKGdsLCB2LCB0ZXh0dXJlcykge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xyXG5cclxuXHRpZiAoY2FjaGVbMF0gIT09IHVuaXQpIHtcclxuXHJcblx0XHRnbC51bmlmb3JtMWkodGhpcy5hZGRyLCB1bml0KTtcclxuXHRcdGNhY2hlWzBdID0gdW5pdDtcclxuXHJcblx0fVxyXG5cclxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QodiB8fCBlbXB0eVRleHR1cmUzZCwgdW5pdCk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2KGdsLCB2LCB0ZXh0dXJlcykge1xyXG5cclxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xyXG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xyXG5cclxuXHRpZiAoY2FjaGVbMF0gIT09IHVuaXQpIHtcclxuXHJcblx0XHRnbC51bmlmb3JtMWkodGhpcy5hZGRyLCB1bml0KTtcclxuXHRcdGNhY2hlWzBdID0gdW5pdDtcclxuXHJcblx0fVxyXG5cclxuXHR0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZUN1YmUodiB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0KTtcclxuXHJcbn1cclxuXHJcbi8vIEludGVnZXIgLyBCb29sZWFuIHZlY3RvcnMgb3IgYXJyYXlzIHRoZXJlb2YgKGFsd2F5cyBmbGF0IGFycmF5cylcclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjFpKGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblxyXG5cdGlmIChjYWNoZVswXSA9PT0gdikgeyByZXR1cm47IH1cclxuXHJcblx0Z2wudW5pZm9ybTFpKHRoaXMuYWRkciwgdik7XHJcblxyXG5cdGNhY2hlWzBdID0gdjtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjJpKGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblxyXG5cdGlmIChhcnJheXNFcXVhbChjYWNoZSwgdikpIHsgcmV0dXJuOyB9XHJcblxyXG5cdGdsLnVuaWZvcm0yaXYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0Y29weUFycmF5KGNhY2hlLCB2KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjNpKGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblxyXG5cdGlmIChhcnJheXNFcXVhbChjYWNoZSwgdikpIHsgcmV0dXJuOyB9XHJcblxyXG5cdGdsLnVuaWZvcm0zaXYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0Y29weUFycmF5KGNhY2hlLCB2KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjRpKGdsLCB2KSB7XHJcblxyXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XHJcblxyXG5cdGlmIChhcnJheXNFcXVhbChjYWNoZSwgdikpIHsgcmV0dXJuOyB9XHJcblxyXG5cdGdsLnVuaWZvcm00aXYodGhpcy5hZGRyLCB2KTtcclxuXHJcblx0Y29weUFycmF5KGNhY2hlLCB2KTtcclxuXHJcbn1cclxuXHJcbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIHRoZSBzaW5ndWxhciBjYXNlXHJcblxyXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlcih0eXBlKSB7XHJcblxyXG5cdHN3aXRjaCAodHlwZSkge1xyXG5cclxuXHRcdGNhc2UgMHgxNDA2OiByZXR1cm4gc2V0VmFsdWVWMWY7IC8vIEZMT0FUXHJcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZjsgLy8gX1ZFQzNcclxuXHRcdGNhc2UgMHg4YjUyOiByZXR1cm4gc2V0VmFsdWVWNGY7IC8vIF9WRUM0XHJcblxyXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yOyAvLyBfTUFUMlxyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zOyAvLyBfTUFUM1xyXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxyXG5cclxuXHRcdGNhc2UgMHg4YjVlOiBjYXNlIDB4OGQ2NjogcmV0dXJuIHNldFZhbHVlVDE7IC8vIFNBTVBMRVJfMkQsIFNBTVBMRVJfRVhURVJOQUxfT0VTXHJcblx0XHRjYXNlIDB4OGI1ZjogcmV0dXJuIHNldFZhbHVlVDNEMTsgLy8gU0FNUExFUl8zRFxyXG5cdFx0Y2FzZSAweDhiNjA6IHJldHVybiBzZXRWYWx1ZVQ2OyAvLyBTQU1QTEVSX0NVQkVcclxuXHRcdGNhc2UgMHg4REMxOiByZXR1cm4gc2V0VmFsdWVUMkRBcnJheTE7IC8vIFNBTVBMRVJfMkRfQVJSQVlcclxuXHJcblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZVYxaTsgLy8gSU5ULCBCT09MXHJcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZVYyaTsgLy8gX1ZFQzJcclxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xyXG5cdFx0Y2FzZSAweDhiNTU6IGNhc2UgMHg4YjU5OiByZXR1cm4gc2V0VmFsdWVWNGk7IC8vIF9WRUM0XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8vIEFycmF5IG9mIHNjYWxhcnNcclxuZnVuY3Rpb24gc2V0VmFsdWVWMWZBcnJheShnbCwgdikge1xyXG5cclxuXHRnbC51bmlmb3JtMWZ2KHRoaXMuYWRkciwgdik7XHJcblxyXG59XHJcblxyXG4vLyBJbnRlZ2VyIC8gQm9vbGVhbiB2ZWN0b3JzIG9yIGFycmF5cyB0aGVyZW9mIChhbHdheXMgZmxhdCBhcnJheXMpXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjFpQXJyYXkoZ2wsIHYpIHtcclxuXHJcblx0Z2wudW5pZm9ybTFpdih0aGlzLmFkZHIsIHYpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVWMmlBcnJheShnbCwgdikge1xyXG5cclxuXHRnbC51bmlmb3JtMml2KHRoaXMuYWRkciwgdik7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KGdsLCB2KSB7XHJcblxyXG5cdGdsLnVuaWZvcm0zaXYodGhpcy5hZGRyLCB2KTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVjRpQXJyYXkoZ2wsIHYpIHtcclxuXHJcblx0Z2wudW5pZm9ybTRpdih0aGlzLmFkZHIsIHYpO1xyXG5cclxufVxyXG5cclxuXHJcbi8vIEFycmF5IG9mIHZlY3RvcnMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzc2VzKVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVWMmZBcnJheShnbCwgdikge1xyXG5cclxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4odiwgdGhpcy5zaXplLCAyKTtcclxuXHJcblx0Z2wudW5pZm9ybTJmdih0aGlzLmFkZHIsIGRhdGEpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVWM2ZBcnJheShnbCwgdikge1xyXG5cclxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4odiwgdGhpcy5zaXplLCAzKTtcclxuXHJcblx0Z2wudW5pZm9ybTNmdih0aGlzLmFkZHIsIGRhdGEpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheShnbCwgdikge1xyXG5cclxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4odiwgdGhpcy5zaXplLCA0KTtcclxuXHJcblx0Z2wudW5pZm9ybTRmdih0aGlzLmFkZHIsIGRhdGEpO1xyXG5cclxufVxyXG5cclxuLy8gQXJyYXkgb2YgbWF0cmljZXMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzZXMpXHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZU0yQXJyYXkoZ2wsIHYpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBmbGF0dGVuKHYsIHRoaXMuc2l6ZSwgNCk7XHJcblxyXG5cdGdsLnVuaWZvcm1NYXRyaXgyZnYodGhpcy5hZGRyLCBmYWxzZSwgZGF0YSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZU0zQXJyYXkoZ2wsIHYpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBmbGF0dGVuKHYsIHRoaXMuc2l6ZSwgOSk7XHJcblxyXG5cdGdsLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5hZGRyLCBmYWxzZSwgZGF0YSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRWYWx1ZU00QXJyYXkoZ2wsIHYpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBmbGF0dGVuKHYsIHRoaXMuc2l6ZSwgMTYpO1xyXG5cclxuXHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuYWRkciwgZmFsc2UsIGRhdGEpO1xyXG5cclxufVxyXG5cclxuLy8gQXJyYXkgb2YgdGV4dHVyZXMgKDJEIC8gQ3ViZSlcclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheShnbCwgdiwgdGV4dHVyZXMpIHtcclxuXHJcblx0dmFyIG4gPSB2Lmxlbmd0aDtcclxuXHJcblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyh0ZXh0dXJlcywgbik7XHJcblxyXG5cdGdsLnVuaWZvcm0xaXYodGhpcy5hZGRyLCB1bml0cyk7XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHR0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZTJEKHZbaV0gfHwgZW1wdHlUZXh0dXJlLCB1bml0c1tpXSk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFZhbHVlVDZBcnJheShnbCwgdiwgdGV4dHVyZXMpIHtcclxuXHJcblx0dmFyIG4gPSB2Lmxlbmd0aDtcclxuXHJcblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyh0ZXh0dXJlcywgbik7XHJcblxyXG5cdGdsLnVuaWZvcm0xaXYodGhpcy5hZGRyLCB1bml0cyk7XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHR0ZXh0dXJlcy5zYWZlU2V0VGV4dHVyZUN1YmUodltpXSB8fCBlbXB0eUN1YmVUZXh0dXJlLCB1bml0c1tpXSk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8vIEhlbHBlciB0byBwaWNrIHRoZSByaWdodCBzZXR0ZXIgZm9yIGEgcHVyZSAoYm90dG9tLWxldmVsKSBhcnJheVxyXG5cclxuZnVuY3Rpb24gZ2V0UHVyZUFycmF5U2V0dGVyKHR5cGUpIHtcclxuXHJcblx0c3dpdGNoICh0eXBlKSB7XHJcblxyXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZkFycmF5OyAvLyBGTE9BVFxyXG5cdFx0Y2FzZSAweDhiNTA6IHJldHVybiBzZXRWYWx1ZVYyZkFycmF5OyAvLyBfVkVDMlxyXG5cdFx0Y2FzZSAweDhiNTE6IHJldHVybiBzZXRWYWx1ZVYzZkFycmF5OyAvLyBfVkVDM1xyXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZkFycmF5OyAvLyBfVkVDNFxyXG5cclxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMkFycmF5OyAvLyBfTUFUMlxyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzXHJcblx0XHRjYXNlIDB4OGI1YzogcmV0dXJuIHNldFZhbHVlTTRBcnJheTsgLy8gX01BVDRcclxuXHJcblx0XHRjYXNlIDB4OGI1ZTogcmV0dXJuIHNldFZhbHVlVDFBcnJheTsgLy8gU0FNUExFUl8yRFxyXG5cdFx0Y2FzZSAweDhiNjA6IHJldHVybiBzZXRWYWx1ZVQ2QXJyYXk7IC8vIFNBTVBMRVJfQ1VCRVxyXG5cclxuXHRcdGNhc2UgMHgxNDA0OiBjYXNlIDB4OGI1NjogcmV0dXJuIHNldFZhbHVlVjFpQXJyYXk7IC8vIElOVCwgQk9PTFxyXG5cdFx0Y2FzZSAweDhiNTM6IGNhc2UgMHg4YjU3OiByZXR1cm4gc2V0VmFsdWVWMmlBcnJheTsgLy8gX1ZFQzJcclxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpQXJyYXk7IC8vIF9WRUMzXHJcblx0XHRjYXNlIDB4OGI1NTogY2FzZSAweDhiNTk6IHJldHVybiBzZXRWYWx1ZVY0aUFycmF5OyAvLyBfVkVDNFxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vLyAtLS0gVW5pZm9ybSBDbGFzc2VzIC0tLVxyXG5cclxuZnVuY3Rpb24gU2luZ2xlVW5pZm9ybShpZCwgYWN0aXZlSW5mbywgYWRkcikge1xyXG5cclxuXHR0aGlzLmlkID0gaWQ7XHJcblx0dGhpcy5hZGRyID0gYWRkcjtcclxuXHR0aGlzLmNhY2hlID0gW107XHJcblx0dGhpcy5zZXRWYWx1ZSA9IGdldFNpbmd1bGFyU2V0dGVyKGFjdGl2ZUluZm8udHlwZSk7XHJcblxyXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFB1cmVBcnJheVVuaWZvcm0oaWQsIGFjdGl2ZUluZm8sIGFkZHIpIHtcclxuXHJcblx0dGhpcy5pZCA9IGlkO1xyXG5cdHRoaXMuYWRkciA9IGFkZHI7XHJcblx0dGhpcy5jYWNoZSA9IFtdO1xyXG5cdHRoaXMuc2l6ZSA9IGFjdGl2ZUluZm8uc2l6ZTtcclxuXHR0aGlzLnNldFZhbHVlID0gZ2V0UHVyZUFycmF5U2V0dGVyKGFjdGl2ZUluZm8udHlwZSk7XHJcblxyXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcclxuXHJcbn1cclxuXHJcblB1cmVBcnJheVVuaWZvcm0ucHJvdG90eXBlLnVwZGF0ZUNhY2hlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcclxuXHJcblx0aWYgKGRhdGEgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgJiYgY2FjaGUubGVuZ3RoICE9PSBkYXRhLmxlbmd0aCkge1xyXG5cclxuXHRcdHRoaXMuY2FjaGUgPSBuZXcgRmxvYXQzMkFycmF5KGRhdGEubGVuZ3RoKTtcclxuXHJcblx0fVxyXG5cclxuXHRjb3B5QXJyYXkoY2FjaGUsIGRhdGEpO1xyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIFN0cnVjdHVyZWRVbmlmb3JtKGlkKSB7XHJcblxyXG5cdHRoaXMuaWQgPSBpZDtcclxuXHJcblx0dGhpcy5zZXEgPSBbXTtcclxuXHR0aGlzLm1hcCA9IHt9O1xyXG5cclxufVxyXG5cclxuU3RydWN0dXJlZFVuaWZvcm0ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKGdsLCB2YWx1ZSwgdGV4dHVyZXMpIHtcclxuXHJcblx0dmFyIHNlcSA9IHRoaXMuc2VxO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdHZhciB1ID0gc2VxW2ldO1xyXG5cdFx0dS5zZXRWYWx1ZShnbCwgdmFsdWVbdS5pZF0sIHRleHR1cmVzKTtcclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcbi8vIC0tLSBUb3AtbGV2ZWwgLS0tXHJcblxyXG4vLyBQYXJzZXIgLSBidWlsZHMgdXAgdGhlIHByb3BlcnR5IHRyZWUgZnJvbSB0aGUgcGF0aCBzdHJpbmdzXHJcblxyXG52YXIgUmVQYXRoUGFydCA9IC8oW1xcd1xcZF9dKykoXFxdKT8oXFxbfFxcLik/L2c7XHJcblxyXG4vLyBleHRyYWN0c1xyXG4vLyBcdC0gdGhlIGlkZW50aWZpZXIgKG1lbWJlciBuYW1lIG9yIGFycmF5IGluZGV4KVxyXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxyXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCBsZWZ0IGJyYWNrZXQgb3IgZG90ICh0eXBlIG9mIHN1YnNjcmlwdClcclxuLy9cclxuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcclxuLy8gYWxsb3cgc3RyYWlnaHRmb3J3YXJkIHBhcnNpbmcgb2YgdGhlIGhpZXJhcmNoeSB0aGF0IFdlYkdMIGVuY29kZXNcclxuLy8gaW4gdGhlIHVuaWZvcm0gbmFtZXMuXHJcblxyXG5mdW5jdGlvbiBhZGRVbmlmb3JtKGNvbnRhaW5lciwgdW5pZm9ybU9iamVjdCkge1xyXG5cclxuXHRjb250YWluZXIuc2VxLnB1c2godW5pZm9ybU9iamVjdCk7XHJcblx0Y29udGFpbmVyLm1hcFt1bmlmb3JtT2JqZWN0LmlkXSA9IHVuaWZvcm1PYmplY3Q7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVVuaWZvcm0oYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyKSB7XHJcblxyXG5cdHZhciBwYXRoID0gYWN0aXZlSW5mby5uYW1lLFxyXG5cdFx0cGF0aExlbmd0aCA9IHBhdGgubGVuZ3RoO1xyXG5cclxuXHQvLyByZXNldCBSZWdFeHAgb2JqZWN0LCBiZWNhdXNlIG9mIHRoZSBlYXJseSBleGl0IG9mIGEgcHJldmlvdXMgcnVuXHJcblx0UmVQYXRoUGFydC5sYXN0SW5kZXggPSAwO1xyXG5cclxuXHR3aGlsZSAodHJ1ZSkge1xyXG5cclxuXHRcdHZhciBtYXRjaCA9IFJlUGF0aFBhcnQuZXhlYyhwYXRoKSxcclxuXHRcdFx0bWF0Y2hFbmQgPSBSZVBhdGhQYXJ0Lmxhc3RJbmRleCxcclxuXHJcblx0XHRcdGlkID0gbWF0Y2hbMV0sXHJcblx0XHRcdGlkSXNJbmRleCA9IG1hdGNoWzJdID09PSAnXScsXHJcblx0XHRcdHN1YnNjcmlwdCA9IG1hdGNoWzNdO1xyXG5cclxuXHRcdGlmIChpZElzSW5kZXgpIHsgaWQgPSBpZCB8IDA7IH0gLy8gY29udmVydCB0byBpbnRlZ2VyXHJcblxyXG5cdFx0aWYgKHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkIHx8IHN1YnNjcmlwdCA9PT0gJ1snICYmIG1hdGNoRW5kICsgMiA9PT0gcGF0aExlbmd0aCkge1xyXG5cclxuXHRcdFx0Ly8gYmFyZSBuYW1lIG9yIFwicHVyZVwiIGJvdHRvbS1sZXZlbCBhcnJheSBcIlswXVwiIHN1ZmZpeFxyXG5cclxuXHRcdFx0YWRkVW5pZm9ybShjb250YWluZXIsIHN1YnNjcmlwdCA9PT0gdW5kZWZpbmVkID9cclxuXHRcdFx0XHRuZXcgU2luZ2xlVW5pZm9ybShpZCwgYWN0aXZlSW5mbywgYWRkcikgOlxyXG5cdFx0XHRcdG5ldyBQdXJlQXJyYXlVbmlmb3JtKGlkLCBhY3RpdmVJbmZvLCBhZGRyKSk7XHJcblxyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gc3RlcCBpbnRvIGlubmVyIG5vZGUgLyBjcmVhdGUgaXQgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0XHJcblxyXG5cdFx0XHR2YXIgbWFwID0gY29udGFpbmVyLm1hcCwgbmV4dCA9IG1hcFtpZF07XHJcblxyXG5cdFx0XHRpZiAobmV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdG5leHQgPSBuZXcgU3RydWN0dXJlZFVuaWZvcm0oaWQpO1xyXG5cdFx0XHRcdGFkZFVuaWZvcm0oY29udGFpbmVyLCBuZXh0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRhaW5lciA9IG5leHQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vLyBSb290IENvbnRhaW5lclxyXG5cclxuZnVuY3Rpb24gV2ViR0xVbmlmb3JtcyhnbCwgcHJvZ3JhbSkge1xyXG5cclxuXHR0aGlzLnNlcSA9IFtdO1xyXG5cdHRoaXMubWFwID0ge307XHJcblxyXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCAzNTcxOCk7XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcblxyXG5cdFx0dmFyIGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpLFxyXG5cdFx0XHRhZGRyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIGluZm8ubmFtZSk7XHJcblxyXG5cdFx0cGFyc2VVbmlmb3JtKGluZm8sIGFkZHIsIHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5XZWJHTFVuaWZvcm1zLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uIChnbCwgbmFtZSwgdmFsdWUsIHRleHR1cmVzKSB7XHJcblxyXG5cdHZhciB1ID0gdGhpcy5tYXBbbmFtZV07XHJcblxyXG5cdGlmICh1ICE9PSB1bmRlZmluZWQpIHsgdS5zZXRWYWx1ZShnbCwgdmFsdWUsIHRleHR1cmVzKTsgfVxyXG5cclxufTtcclxuXHJcbldlYkdMVW5pZm9ybXMucHJvdG90eXBlLnNldE9wdGlvbmFsID0gZnVuY3Rpb24gKGdsLCBvYmplY3QsIG5hbWUpIHtcclxuXHJcblx0dmFyIHYgPSBvYmplY3RbbmFtZV07XHJcblxyXG5cdGlmICh2ICE9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXRWYWx1ZShnbCwgbmFtZSwgdik7IH1cclxuXHJcbn07XHJcblxyXG5cclxuLy8gU3RhdGljIGludGVyZmFjZVxyXG5cclxuV2ViR0xVbmlmb3Jtcy51cGxvYWQgPSBmdW5jdGlvbiAoZ2wsIHNlcSwgdmFsdWVzLCB0ZXh0dXJlcykge1xyXG5cclxuXHRmb3IgKHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdHZhciB1ID0gc2VxW2ldLFxyXG5cdFx0XHR2ID0gdmFsdWVzW3UuaWRdO1xyXG5cclxuXHRcdGlmICh2Lm5lZWRzVXBkYXRlICE9PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0Ly8gbm90ZTogYWx3YXlzIHVwZGF0aW5nIHdoZW4gLm5lZWRzVXBkYXRlIGlzIHVuZGVmaW5lZFxyXG5cdFx0XHR1LnNldFZhbHVlKGdsLCB2LnZhbHVlLCB0ZXh0dXJlcyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuV2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUgPSBmdW5jdGlvbiAoc2VxLCB2YWx1ZXMpIHtcclxuXHJcblx0dmFyIHIgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIG4gPSBzZXEubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHR2YXIgdSA9IHNlcVtpXTtcclxuXHRcdGlmICh1LmlkIGluIHZhbHVlcykgeyByLnB1c2godSk7IH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcjtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTFNoYWRlcihnbCwgdHlwZSwgc3RyaW5nKSB7XHJcblxyXG5cdHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XHJcblxyXG5cdGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHN0cmluZyk7XHJcblx0Z2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuXHRyZXR1cm4gc2hhZGVyO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIHByb2dyYW1JZENvdW50ID0gMDtcclxuXHJcbmZ1bmN0aW9uIGFkZExpbmVOdW1iZXJzKHN0cmluZykge1xyXG5cclxuXHR2YXIgbGluZXMgPSBzdHJpbmcuc3BsaXQoJ1xcbicpO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0bGluZXNbaV0gPSAoaSArIDEpICsgJzogJyArIGxpbmVzW2ldO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEVuY29kaW5nQ29tcG9uZW50cyhlbmNvZGluZykge1xyXG5cclxuXHRzd2l0Y2ggKGVuY29kaW5nKSB7XHJcblxyXG5cdFx0Y2FzZSBMaW5lYXJFbmNvZGluZzpcclxuXHRcdFx0cmV0dXJuIFsnTGluZWFyJywgJyggdmFsdWUgKSddO1xyXG5cdFx0Y2FzZSBzUkdCRW5jb2Rpbmc6XHJcblx0XHRcdHJldHVybiBbJ3NSR0InLCAnKCB2YWx1ZSApJ107XHJcblx0XHRjYXNlIFJHQkVFbmNvZGluZzpcclxuXHRcdFx0cmV0dXJuIFsnUkdCRScsICcoIHZhbHVlICknXTtcclxuXHRcdGNhc2UgUkdCTTdFbmNvZGluZzpcclxuXHRcdFx0cmV0dXJuIFsnUkdCTScsICcoIHZhbHVlLCA3LjAgKSddO1xyXG5cdFx0Y2FzZSBSR0JNMTZFbmNvZGluZzpcclxuXHRcdFx0cmV0dXJuIFsnUkdCTScsICcoIHZhbHVlLCAxNi4wICknXTtcclxuXHRcdGNhc2UgUkdCREVuY29kaW5nOlxyXG5cdFx0XHRyZXR1cm4gWydSR0JEJywgJyggdmFsdWUsIDI1Ni4wICknXTtcclxuXHRcdGNhc2UgR2FtbWFFbmNvZGluZzpcclxuXHRcdFx0cmV0dXJuIFsnR2FtbWEnLCAnKCB2YWx1ZSwgZmxvYXQoIEdBTU1BX0ZBQ1RPUiApICknXTtcclxuXHRcdGNhc2UgTG9nTHV2RW5jb2Rpbmc6XHJcblx0XHRcdHJldHVybiBbJ0xvZ0x1dicsICcoIHZhbHVlICknXTtcclxuXHRcdGRlZmF1bHQ6XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFNoYWRlckVycm9ycyhnbCwgc2hhZGVyLCB0eXBlKSB7XHJcblxyXG5cdHZhciBzdGF0dXMgPSBnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCAzNTcxMyk7XHJcblx0dmFyIGxvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKS50cmltKCk7XHJcblxyXG5cdGlmIChzdGF0dXMgJiYgbG9nID09PSAnJykgeyByZXR1cm4gJyc7IH1cclxuXHJcblx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cclxuXHQvLyBjb25zb2xlLmxvZyggJyoqJyArIHR5cGUgKyAnKionLCBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9kZWJ1Z19zaGFkZXJzJyApLmdldFRyYW5zbGF0ZWRTaGFkZXJTb3VyY2UoIHNoYWRlciApICk7XHJcblxyXG5cdHZhciBzb3VyY2UgPSBnbC5nZXRTaGFkZXJTb3VyY2Uoc2hhZGVyKTtcclxuXHJcblx0cmV0dXJuICdUSFJFRS5XZWJHTFNoYWRlcjogZ2wuZ2V0U2hhZGVySW5mb0xvZygpICcgKyB0eXBlICsgJ1xcbicgKyBsb2cgKyBhZGRMaW5lTnVtYmVycyhzb3VyY2UpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcpIHtcclxuXHJcblx0dmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoZW5jb2RpbmcpO1xyXG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuICcgKyBjb21wb25lbnRzWzBdICsgJ1RvTGluZWFyJyArIGNvbXBvbmVudHNbMV0gKyAnOyB9JztcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRleGVsRW5jb2RpbmdGdW5jdGlvbihmdW5jdGlvbk5hbWUsIGVuY29kaW5nKSB7XHJcblxyXG5cdHZhciBjb21wb25lbnRzID0gZ2V0RW5jb2RpbmdDb21wb25lbnRzKGVuY29kaW5nKTtcclxuXHRyZXR1cm4gJ3ZlYzQgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzQgdmFsdWUgKSB7IHJldHVybiBMaW5lYXJUbycgKyBjb21wb25lbnRzWzBdICsgY29tcG9uZW50c1sxXSArICc7IH0nO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbihmdW5jdGlvbk5hbWUsIHRvbmVNYXBwaW5nKSB7XHJcblxyXG5cdHZhciB0b25lTWFwcGluZ05hbWU7XHJcblxyXG5cdHN3aXRjaCAodG9uZU1hcHBpbmcpIHtcclxuXHJcblx0XHRjYXNlIExpbmVhclRvbmVNYXBwaW5nOlxyXG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxyXG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnUmVpbmhhcmQnO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRjYXNlIFVuY2hhcnRlZDJUb25lTWFwcGluZzpcclxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1VuY2hhcnRlZDInO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRjYXNlIENpbmVvblRvbmVNYXBwaW5nOlxyXG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnT3B0aW1pemVkQ2luZW9uJztcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0Y2FzZSBBQ0VTRmlsbWljVG9uZU1hcHBpbmc6XHJcblx0XHRcdHRvbmVNYXBwaW5nTmFtZSA9ICdBQ0VTRmlsbWljJztcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCB0b25lTWFwcGluZzogJyArIHRvbmVNYXBwaW5nKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gJ3ZlYzMgJyArIGZ1bmN0aW9uTmFtZSArICcoIHZlYzMgY29sb3IgKSB7IHJldHVybiAnICsgdG9uZU1hcHBpbmdOYW1lICsgJ1RvbmVNYXBwaW5nKCBjb2xvciApOyB9JztcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyhleHRlbnNpb25zLCBwYXJhbWV0ZXJzLCByZW5kZXJlckV4dGVuc2lvbnMpIHtcclxuXHJcblx0ZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMgfHwge307XHJcblxyXG5cdHZhciBjaHVua3MgPSBbXHJcblx0XHQoZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyB8fCBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVViB8fCBwYXJhbWV0ZXJzLmJ1bXBNYXAgfHwgcGFyYW1ldGVycy50YW5nZW50U3BhY2VOb3JtYWxNYXAgfHwgcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgfHwgcGFyYW1ldGVycy5mbGF0U2hhZGluZykgPyAnI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGUnIDogJycsXHJcblx0XHQoZXh0ZW5zaW9ucy5mcmFnRGVwdGggfHwgcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKSAmJiByZW5kZXJlckV4dGVuc2lvbnMuZ2V0KCdFWFRfZnJhZ19kZXB0aCcpID8gJyNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGUnIDogJycsXHJcblx0XHQoZXh0ZW5zaW9ucy5kcmF3QnVmZmVycykgJiYgcmVuZGVyZXJFeHRlbnNpb25zLmdldCgnV0VCR0xfZHJhd19idWZmZXJzJykgPyAnI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZScgOiAnJyxcclxuXHRcdChleHRlbnNpb25zLnNoYWRlclRleHR1cmVMT0QgfHwgcGFyYW1ldGVycy5lbnZNYXApICYmIHJlbmRlcmVyRXh0ZW5zaW9ucy5nZXQoJ0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QnKSA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QgOiBlbmFibGUnIDogJydcclxuXHRdO1xyXG5cclxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlcihmaWx0ZXJFbXB0eUxpbmUpLmpvaW4oJ1xcbicpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVEZWZpbmVzKGRlZmluZXMpIHtcclxuXHJcblx0dmFyIGNodW5rcyA9IFtdO1xyXG5cclxuXHRmb3IgKHZhciBuYW1lIGluIGRlZmluZXMpIHtcclxuXHJcblx0XHR2YXIgdmFsdWUgPSBkZWZpbmVzW25hbWVdO1xyXG5cclxuXHRcdGlmICh2YWx1ZSA9PT0gZmFsc2UpIHsgY29udGludWU7IH1cclxuXHJcblx0XHRjaHVua3MucHVzaCgnI2RlZmluZSAnICsgbmFtZSArICcgJyArIHZhbHVlKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2h1bmtzLmpvaW4oJ1xcbicpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZmV0Y2hBdHRyaWJ1dGVMb2NhdGlvbnMoZ2wsIHByb2dyYW0pIHtcclxuXHJcblx0dmFyIGF0dHJpYnV0ZXMgPSB7fTtcclxuXHJcblx0dmFyIG4gPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIDM1NzIxKTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuXHJcblx0XHR2YXIgaW5mbyA9IGdsLmdldEFjdGl2ZUF0dHJpYihwcm9ncmFtLCBpKTtcclxuXHRcdHZhciBuYW1lID0gaW5mby5uYW1lO1xyXG5cclxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XHJcblxyXG5cdFx0YXR0cmlidXRlc1tuYW1lXSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIG5hbWUpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBhdHRyaWJ1dGVzO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyRW1wdHlMaW5lKHN0cmluZykge1xyXG5cclxuXHRyZXR1cm4gc3RyaW5nICE9PSAnJztcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlcGxhY2VMaWdodE51bXMoc3RyaW5nLCBwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdHJldHVybiBzdHJpbmdcclxuXHRcdC5yZXBsYWNlKC9OVU1fRElSX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0cylcclxuXHRcdC5yZXBsYWNlKC9OVU1fU1BPVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRzKVxyXG5cdFx0LnJlcGxhY2UoL05VTV9SRUNUX0FSRUFfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtUmVjdEFyZWFMaWdodHMpXHJcblx0XHQucmVwbGFjZSgvTlVNX1BPSU5UX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRzKVxyXG5cdFx0LnJlcGxhY2UoL05VTV9IRU1JX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bUhlbWlMaWdodHMpXHJcblx0XHQucmVwbGFjZSgvTlVNX0RJUl9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtRGlyTGlnaHRTaGFkb3dzKVxyXG5cdFx0LnJlcGxhY2UoL05VTV9TUE9UX0xJR0hUX1NIQURPV1MvZywgcGFyYW1ldGVycy5udW1TcG90TGlnaHRTaGFkb3dzKVxyXG5cdFx0LnJlcGxhY2UoL05VTV9QT0lOVF9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtUG9pbnRMaWdodFNoYWRvd3MpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKHN0cmluZywgcGFyYW1ldGVycykge1xyXG5cclxuXHRyZXR1cm4gc3RyaW5nXHJcblx0XHQucmVwbGFjZSgvTlVNX0NMSVBQSU5HX1BMQU5FUy9nLCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzKVxyXG5cdFx0LnJlcGxhY2UoL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAocGFyYW1ldGVycy5udW1DbGlwcGluZ1BsYW5lcyAtIHBhcmFtZXRlcnMubnVtQ2xpcEludGVyc2VjdGlvbikpO1xyXG5cclxufVxyXG5cclxuLy8gUmVzb2x2ZSBJbmNsdWRlc1xyXG5cclxudmFyIGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcclxuXHJcbmZ1bmN0aW9uIHJlc29sdmVJbmNsdWRlcyhzdHJpbmcpIHtcclxuXHJcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKGluY2x1ZGVQYXR0ZXJuLCBpbmNsdWRlUmVwbGFjZXIpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKG1hdGNoLCBpbmNsdWRlKSB7XHJcblxyXG5cdHZhciBzdHJpbmcgPSBTaGFkZXJDaHVua1tpbmNsdWRlXTtcclxuXHJcblx0aWYgKHN0cmluZyA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IHJlc29sdmUgI2luY2x1ZGUgPCcgKyBpbmNsdWRlICsgJz4nKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmVzb2x2ZUluY2x1ZGVzKHN0cmluZyk7XHJcblxyXG59XHJcblxyXG4vLyBVbnJvbGwgTG9vcHNcclxuXHJcbnZhciBsb29wUGF0dGVybiA9IC8jcHJhZ21hIHVucm9sbF9sb29wW1xcc10rP2ZvciBcXCggaW50IGkgXFw9IChcXGQrKVxcOyBpIDwgKFxcZCspXFw7IGkgXFwrXFwrIFxcKSBcXHsoW1xcc1xcU10rPykoPz1cXH0pXFx9L2c7XHJcblxyXG5mdW5jdGlvbiB1bnJvbGxMb29wcyhzdHJpbmcpIHtcclxuXHJcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKGxvb3BQYXR0ZXJuLCBsb29wUmVwbGFjZXIpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gbG9vcFJlcGxhY2VyKG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0KSB7XHJcblxyXG5cdHZhciBzdHJpbmcgPSAnJztcclxuXHJcblx0Zm9yICh2YXIgaSA9IHBhcnNlSW50KHN0YXJ0KTsgaSA8IHBhcnNlSW50KGVuZCk7IGkrKykge1xyXG5cclxuXHRcdHN0cmluZyArPSBzbmlwcGV0XHJcblx0XHRcdC5yZXBsYWNlKC9cXFsgaSBcXF0vZywgJ1sgJyArIGkgKyAnIF0nKVxyXG5cdFx0XHQucmVwbGFjZSgvVU5ST0xMRURfTE9PUF9JTkRFWC9nLCBpKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gc3RyaW5nO1xyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUHJlY2lzaW9uKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0dmFyIHByZWNpc2lvbnN0cmluZyA9IFwicHJlY2lzaW9uIFwiICsgcGFyYW1ldGVycy5wcmVjaXNpb24gKyBcIiBmbG9hdDtcXG5wcmVjaXNpb24gXCIgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArIFwiIGludDtcIjtcclxuXHJcblx0aWYgKHBhcmFtZXRlcnMucHJlY2lzaW9uID09PSBcImhpZ2hwXCIpIHtcclxuXHJcblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gXCJcXG4jZGVmaW5lIEhJR0hfUFJFQ0lTSU9OXCI7XHJcblxyXG5cdH0gZWxzZSBpZiAocGFyYW1ldGVycy5wcmVjaXNpb24gPT09IFwibWVkaXVtcFwiKSB7XHJcblxyXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9IFwiXFxuI2RlZmluZSBNRURJVU1fUFJFQ0lTSU9OXCI7XHJcblxyXG5cdH0gZWxzZSBpZiAocGFyYW1ldGVycy5wcmVjaXNpb24gPT09IFwibG93cFwiKSB7XHJcblxyXG5cdFx0cHJlY2lzaW9uc3RyaW5nICs9IFwiXFxuI2RlZmluZSBMT1dfUFJFQ0lTSU9OXCI7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHByZWNpc2lvbnN0cmluZztcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZShwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdHZhciBzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX0JBU0lDJztcclxuXHJcblx0aWYgKHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gUENGU2hhZG93TWFwKSB7XHJcblxyXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0YnO1xyXG5cclxuXHR9IGVsc2UgaWYgKHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gUENGU29mdFNoYWRvd01hcCkge1xyXG5cclxuXHRcdHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQnO1xyXG5cclxuXHR9IGVsc2UgaWYgKHBhcmFtZXRlcnMuc2hhZG93TWFwVHlwZSA9PT0gVlNNU2hhZG93TWFwKSB7XHJcblxyXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9WU00nO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKHBhcmFtZXRlcnMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdHZhciBlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xyXG5cclxuXHRpZiAocGFyYW1ldGVycy5lbnZNYXApIHtcclxuXHJcblx0XHRzd2l0Y2ggKG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nKSB7XHJcblxyXG5cdFx0XHRjYXNlIEN1YmVSZWZsZWN0aW9uTWFwcGluZzpcclxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XHJcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6XHJcblx0XHRcdGNhc2UgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6XHJcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFX1VWJztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6XHJcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XHJcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9FUVVJUkVDJztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6XHJcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9TUEhFUkUnO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZW52TWFwVHlwZURlZmluZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwTW9kZURlZmluZShwYXJhbWV0ZXJzLCBtYXRlcmlhbCkge1xyXG5cclxuXHR2YXIgZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZMRUNUSU9OJztcclxuXHJcblx0aWYgKHBhcmFtZXRlcnMuZW52TWFwKSB7XHJcblxyXG5cdFx0c3dpdGNoIChtYXRlcmlhbC5lbnZNYXAubWFwcGluZykge1xyXG5cclxuXHRcdFx0Y2FzZSBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6XHJcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XHJcblx0XHRcdFx0ZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZSQUNUSU9OJztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGVudk1hcE1vZGVEZWZpbmU7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKHBhcmFtZXRlcnMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdHZhciBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTVVMVElQTFknO1xyXG5cclxuXHRpZiAocGFyYW1ldGVycy5lbnZNYXApIHtcclxuXHJcblx0XHRzd2l0Y2ggKG1hdGVyaWFsLmNvbWJpbmUpIHtcclxuXHJcblx0XHRcdGNhc2UgTXVsdGlwbHlPcGVyYXRpb246XHJcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxyXG5cdFx0XHRcdGVudk1hcEJsZW5kaW5nRGVmaW5lID0gJ0VOVk1BUF9CTEVORElOR19NSVgnO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSBBZGRPcGVyYXRpb246XHJcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX0FERCc7XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbShyZW5kZXJlciwgZXh0ZW5zaW9ucywgY29kZSwgbWF0ZXJpYWwsIHNoYWRlciwgcGFyYW1ldGVycykge1xyXG5cclxuXHR2YXIgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XHJcblxyXG5cdHZhciBkZWZpbmVzID0gbWF0ZXJpYWwuZGVmaW5lcztcclxuXHJcblx0dmFyIHZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXI7XHJcblx0dmFyIGZyYWdtZW50U2hhZGVyID0gc2hhZGVyLmZyYWdtZW50U2hhZGVyO1xyXG5cdHZhciBzaGFkb3dNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVTaGFkb3dNYXBUeXBlRGVmaW5lKHBhcmFtZXRlcnMpO1xyXG5cdHZhciBlbnZNYXBUeXBlRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBUeXBlRGVmaW5lKHBhcmFtZXRlcnMsIG1hdGVyaWFsKTtcclxuXHR2YXIgZW52TWFwTW9kZURlZmluZSA9IGdlbmVyYXRlRW52TWFwTW9kZURlZmluZShwYXJhbWV0ZXJzLCBtYXRlcmlhbCk7XHJcblx0dmFyIGVudk1hcEJsZW5kaW5nRGVmaW5lID0gZ2VuZXJhdGVFbnZNYXBCbGVuZGluZ0RlZmluZShwYXJhbWV0ZXJzLCBtYXRlcmlhbCk7XHJcblxyXG5cclxuXHR2YXIgZ2FtbWFGYWN0b3JEZWZpbmUgPSAocmVuZGVyZXIuZ2FtbWFGYWN0b3IgPiAwKSA/IHJlbmRlcmVyLmdhbW1hRmFjdG9yIDogMS4wO1xyXG5cclxuXHR2YXIgY3VzdG9tRXh0ZW5zaW9ucyA9IHBhcmFtZXRlcnMuaXNXZWJHTDIgPyAnJyA6IGdlbmVyYXRlRXh0ZW5zaW9ucyhtYXRlcmlhbC5leHRlbnNpb25zLCBwYXJhbWV0ZXJzLCBleHRlbnNpb25zKTtcclxuXHJcblx0dmFyIGN1c3RvbURlZmluZXMgPSBnZW5lcmF0ZURlZmluZXMoZGVmaW5lcyk7XHJcblxyXG5cdHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG5cclxuXHR2YXIgcHJlZml4VmVydGV4LCBwcmVmaXhGcmFnbWVudDtcclxuXHJcblx0dmFyIHJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xyXG5cdHZhciBudW1NdWx0aXZpZXdWaWV3cyA9IHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldCA/IHJlbmRlclRhcmdldC5udW1WaWV3cyA6IDA7XHJcblxyXG5cdGlmIChtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsKSB7XHJcblxyXG5cdFx0cHJlZml4VmVydGV4ID0gW1xyXG5cclxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xyXG5cclxuXHRcdF0uZmlsdGVyKGZpbHRlckVtcHR5TGluZSkuam9pbignXFxuJyk7XHJcblxyXG5cdFx0aWYgKHByZWZpeFZlcnRleC5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHRwcmVmaXhWZXJ0ZXggKz0gJ1xcbic7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xyXG5cclxuXHRcdFx0Y3VzdG9tRXh0ZW5zaW9ucyxcclxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xyXG5cclxuXHRcdF0uZmlsdGVyKGZpbHRlckVtcHR5TGluZSkuam9pbignXFxuJyk7XHJcblxyXG5cdFx0aWYgKHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRwcmVmaXhWZXJ0ZXggPSBbXHJcblxyXG5cdFx0XHRnZW5lcmF0ZVByZWNpc2lvbihwYXJhbWV0ZXJzKSxcclxuXHJcblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBzaGFkZXIubmFtZSxcclxuXHJcblx0XHRcdGN1c3RvbURlZmluZXMsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLmluc3RhbmNpbmcgPyAnI2RlZmluZSBVU0VfSU5TVEFOQ0lORycgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTJyA6ICcnLFxyXG5cclxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcclxuXHJcblx0XHRcdCcjZGVmaW5lIE1BWF9CT05FUyAnICsgcGFyYW1ldGVycy5tYXhCb25lcyxcclxuXHRcdFx0KHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXHJcblx0XHRcdChwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIpID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwTW9kZURlZmluZSA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmFvTWFwID8gJyNkZWZpbmUgVVNFX0FPTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID8gJyNkZWZpbmUgVVNFX0VNSVNTSVZFTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5ub3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfTk9STUFMTUFQJyA6ICcnLFxyXG5cdFx0XHQocGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCkgPyAnI2RlZmluZSBPQkpFQ1RTUEFDRV9OT1JNQUxNQVAnIDogJycsXHJcblx0XHRcdChwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCkgPyAnI2RlZmluZSBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5kaXNwbGFjZW1lbnRNYXAgJiYgcGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVVNFX0RJU1BMQUNFTUVOVE1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5yb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLm1ldGFsbmVzc01hcCA/ICcjZGVmaW5lIFVTRV9NRVRBTE5FU1NNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFRhbmdlbnRzID8gJyNkZWZpbmUgVVNFX1RBTkdFTlQnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLnZlcnRleFV2cyA/ICcjZGVmaW5lIFVTRV9VVicgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuc2tpbm5pbmcgPyAnI2RlZmluZSBVU0VfU0tJTk5JTkcnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSA/ICcjZGVmaW5lIEJPTkVfVEVYVFVSRScgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID8gJyNkZWZpbmUgVVNFX01PUlBIVEFSR0VUUycgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmRvdWJsZVNpZGVkID8gJyNkZWZpbmUgRE9VQkxFX1NJREVEJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmZsaXBTaWRlZCA/ICcjZGVmaW5lIEZMSVBfU0lERUQnIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSBVU0VfU0hBRE9XTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLnNoYWRvd01hcEVuYWJsZWQgPyAnI2RlZmluZSAnICsgc2hhZG93TWFwVHlwZURlZmluZSA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5zaXplQXR0ZW51YXRpb24gPyAnI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OJyA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgKHBhcmFtZXRlcnMuaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5nZXQoJ0VYVF9mcmFnX2RlcHRoJykpID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJyxcclxuXHJcblx0XHRcdCd1bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7JyxcclxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7JyxcclxuXHRcdFx0J3VuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4OycsXHJcblx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxyXG5cdFx0XHQndW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDsnLFxyXG5cdFx0XHQndW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uOycsXHJcblxyXG5cdFx0XHQnI2lmZGVmIFVTRV9JTlNUQU5DSU5HJyxcclxuXHJcblx0XHRcdCcgYXR0cmlidXRlIG1hdDQgaW5zdGFuY2VNYXRyaXg7JyxcclxuXHJcblx0XHRcdCcjZW5kaWYnLFxyXG5cclxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXHJcblx0XHRcdCdhdHRyaWJ1dGUgdmVjMyBub3JtYWw7JyxcclxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMyIHV2OycsXHJcblxyXG5cdFx0XHQnI2lmZGVmIFVTRV9UQU5HRU5UJyxcclxuXHJcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7JyxcclxuXHJcblx0XHRcdCcjZW5kaWYnLFxyXG5cclxuXHRcdFx0JyNpZmRlZiBVU0VfQ09MT1InLFxyXG5cclxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgY29sb3I7JyxcclxuXHJcblx0XHRcdCcjZW5kaWYnLFxyXG5cclxuXHRcdFx0JyNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTJyxcclxuXHJcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MDsnLFxyXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDE7JyxcclxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQyOycsXHJcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MzsnLFxyXG5cclxuXHRcdFx0J1x0I2lmZGVmIFVTRV9NT1JQSE5PUk1BTFMnLFxyXG5cclxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7JyxcclxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDE7JyxcclxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDI7JyxcclxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7JyxcclxuXHJcblx0XHRcdCdcdCNlbHNlJyxcclxuXHJcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ0OycsXHJcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1OycsXHJcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2OycsXHJcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ3OycsXHJcblxyXG5cdFx0XHQnXHQjZW5kaWYnLFxyXG5cclxuXHRcdFx0JyNlbmRpZicsXHJcblxyXG5cdFx0XHQnI2lmZGVmIFVTRV9TS0lOTklORycsXHJcblxyXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luSW5kZXg7JyxcclxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgc2tpbldlaWdodDsnLFxyXG5cclxuXHRcdFx0JyNlbmRpZicsXHJcblxyXG5cdFx0XHQnXFxuJ1xyXG5cclxuXHRcdF0uZmlsdGVyKGZpbHRlckVtcHR5TGluZSkuam9pbignXFxuJyk7XHJcblxyXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXHJcblxyXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxyXG5cclxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24ocGFyYW1ldGVycyksXHJcblxyXG5cdFx0XHQnI2RlZmluZSBTSEFERVJfTkFNRSAnICsgc2hhZGVyLm5hbWUsXHJcblxyXG5cdFx0XHRjdXN0b21EZWZpbmVzLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBBTFBIQVRFU1QgJyArIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICsgKHBhcmFtZXRlcnMuYWxwaGFUZXN0ICUgMSA/ICcnIDogJy4wJykgOiAnJywgLy8gYWRkICcuMCcgaWYgaW50ZWdlclxyXG5cclxuXHRcdFx0JyNkZWZpbmUgR0FNTUFfRkFDVE9SICcgKyBnYW1tYUZhY3RvckRlZmluZSxcclxuXHJcblx0XHRcdChwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZykgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxyXG5cdFx0XHQocGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2dFeHAyKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5tYXAgPyAnI2RlZmluZSBVU0VfTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcCA/ICcjZGVmaW5lIFVTRV9NQVRDQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXAgPyAnI2RlZmluZSAnICsgZW52TWFwVHlwZURlZmluZSA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcEJsZW5kaW5nRGVmaW5lIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMubGlnaHRNYXAgPyAnI2RlZmluZSBVU0VfTElHSFRNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuYW9NYXAgPyAnI2RlZmluZSBVU0VfQU9NQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuYnVtcE1hcCA/ICcjZGVmaW5lIFVTRV9CVU1QTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLm5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9OT1JNQUxNQVAnIDogJycsXHJcblx0XHRcdChwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLm9iamVjdFNwYWNlTm9ybWFsTWFwKSA/ICcjZGVmaW5lIE9CSkVDVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcclxuXHRcdFx0KHBhcmFtZXRlcnMubm9ybWFsTWFwICYmIHBhcmFtZXRlcnMudGFuZ2VudFNwYWNlTm9ybWFsTWFwKSA/ICcjZGVmaW5lIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuc3BlY3VsYXJNYXAgPyAnI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5tZXRhbG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQJyA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLmFscGhhTWFwID8gJyNkZWZpbmUgVVNFX0FMUEhBTUFQJyA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5zaGVlbiA/ICcjZGVmaW5lIFVTRV9TSEVFTicgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhDb2xvcnMgPyAnI2RlZmluZSBVU0VfQ09MT1InIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VXZzID8gJyNkZWZpbmUgVVNFX1VWJyA6ICcnLFxyXG5cclxuXHRcdFx0cGFyYW1ldGVycy5ncmFkaWVudE1hcCA/ICcjZGVmaW5lIFVTRV9HUkFESUVOVE1BUCcgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuZG91YmxlU2lkZWQgPyAnI2RlZmluZSBET1VCTEVfU0lERUQnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lIFVTRV9TSEFET1dNQVAnIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA/ICcjZGVmaW5lIFBSRU1VTFRJUExJRURfQUxQSEEnIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID8gJyNkZWZpbmUgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUycgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmIChwYXJhbWV0ZXJzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCdFWFRfZnJhZ19kZXB0aCcpKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXHJcblxyXG5cdFx0XHQoKG1hdGVyaWFsLmV4dGVuc2lvbnMgPyBtYXRlcmlhbC5leHRlbnNpb25zLnNoYWRlclRleHR1cmVMT0QgOiBmYWxzZSkgfHwgcGFyYW1ldGVycy5lbnZNYXApICYmIChwYXJhbWV0ZXJzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJykpID8gJyNkZWZpbmUgVEVYVFVSRV9MT0RfRVhUJyA6ICcnLFxyXG5cclxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXHJcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247JyxcclxuXHJcblx0XHRcdChwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nKSA/ICcjZGVmaW5lIFRPTkVfTUFQUElORycgOiAnJyxcclxuXHRcdFx0KHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcpID8gU2hhZGVyQ2h1bmtbJ3RvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQnXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xyXG5cdFx0XHQocGFyYW1ldGVycy50b25lTWFwcGluZyAhPT0gTm9Ub25lTWFwcGluZykgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCd0b25lTWFwcGluZycsIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcpIDogJycsXHJcblxyXG5cdFx0XHRwYXJhbWV0ZXJzLmRpdGhlcmluZyA/ICcjZGVmaW5lIERJVEhFUklORycgOiAnJyxcclxuXHJcblx0XHRcdChwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nIHx8IHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLmVudk1hcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZykgP1xyXG5cdFx0XHRcdFNoYWRlckNodW5rWydlbmNvZGluZ3NfcGFyc19mcmFnbWVudCddIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XHJcblx0XHRcdHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oJ21hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLm1hcEVuY29kaW5nKSA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCdtYXRjYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZykgOiAnJyxcclxuXHRcdFx0cGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbignZW52TWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcpIDogJycsXHJcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbignZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5lbWlzc2l2ZU1hcEVuY29kaW5nKSA6ICcnLFxyXG5cdFx0XHRwYXJhbWV0ZXJzLm91dHB1dEVuY29kaW5nID8gZ2V0VGV4ZWxFbmNvZGluZ0Z1bmN0aW9uKCdsaW5lYXJUb091dHB1dFRleGVsJywgcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZykgOiAnJyxcclxuXHJcblx0XHRcdHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgbWF0ZXJpYWwuZGVwdGhQYWNraW5nIDogJycsXHJcblxyXG5cdFx0XHQnXFxuJ1xyXG5cclxuXHRcdF0uZmlsdGVyKGZpbHRlckVtcHR5TGluZSkuam9pbignXFxuJyk7XHJcblxyXG5cdH1cclxuXHJcblx0dmVydGV4U2hhZGVyID0gcmVzb2x2ZUluY2x1ZGVzKHZlcnRleFNoYWRlcik7XHJcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUxpZ2h0TnVtcyh2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMpO1xyXG5cdHZlcnRleFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyh2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMpO1xyXG5cclxuXHRmcmFnbWVudFNoYWRlciA9IHJlc29sdmVJbmNsdWRlcyhmcmFnbWVudFNoYWRlcik7XHJcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzKTtcclxuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyhmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyk7XHJcblxyXG5cdHZlcnRleFNoYWRlciA9IHVucm9sbExvb3BzKHZlcnRleFNoYWRlcik7XHJcblx0ZnJhZ21lbnRTaGFkZXIgPSB1bnJvbGxMb29wcyhmcmFnbWVudFNoYWRlcik7XHJcblxyXG5cdGlmIChwYXJhbWV0ZXJzLmlzV2ViR0wyICYmICFtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsKSB7XHJcblxyXG5cdFx0dmFyIGlzR0xTTDNTaGFkZXJNYXRlcmlhbCA9IGZhbHNlO1xyXG5cclxuXHRcdHZhciB2ZXJzaW9uUmVnZXggPSAvXlxccyojdmVyc2lvblxccyszMDBcXHMrZXNcXHMqXFxuLztcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJlxyXG5cdFx0XHR2ZXJ0ZXhTaGFkZXIubWF0Y2godmVyc2lvblJlZ2V4KSAhPT0gbnVsbCAmJlxyXG5cdFx0XHRmcmFnbWVudFNoYWRlci5tYXRjaCh2ZXJzaW9uUmVnZXgpICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdFx0dmVydGV4U2hhZGVyID0gdmVydGV4U2hhZGVyLnJlcGxhY2UodmVyc2lvblJlZ2V4LCAnJyk7XHJcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXIucmVwbGFjZSh2ZXJzaW9uUmVnZXgsICcnKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvblxyXG5cclxuXHRcdHByZWZpeFZlcnRleCA9IFtcclxuXHRcdFx0JyN2ZXJzaW9uIDMwMCBlc1xcbicsXHJcblx0XHRcdCcjZGVmaW5lIGF0dHJpYnV0ZSBpbicsXHJcblx0XHRcdCcjZGVmaW5lIHZhcnlpbmcgb3V0JyxcclxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnXHJcblx0XHRdLmpvaW4oJ1xcbicpICsgJ1xcbicgKyBwcmVmaXhWZXJ0ZXg7XHJcblxyXG5cdFx0cHJlZml4RnJhZ21lbnQgPSBbXHJcblx0XHRcdCcjdmVyc2lvbiAzMDAgZXNcXG4nLFxyXG5cdFx0XHQnI2RlZmluZSB2YXJ5aW5nIGluJyxcclxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID8gJycgOiAnb3V0IGhpZ2hwIHZlYzQgcGNfZnJhZ0NvbG9yOycsXHJcblx0XHRcdGlzR0xTTDNTaGFkZXJNYXRlcmlhbCA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXHJcblx0XHRcdCcjZGVmaW5lIGdsX0ZyYWdEZXB0aEVYVCBnbF9GcmFnRGVwdGgnLFxyXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkQgdGV4dHVyZScsXHJcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxyXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qIHRleHR1cmVQcm9qJyxcclxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJETG9kRVhUIHRleHR1cmVMb2QnLFxyXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcclxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVMb2RFWFQgdGV4dHVyZUxvZCcsXHJcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyREdyYWRFWFQgdGV4dHVyZUdyYWQnLFxyXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxyXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlQ3ViZUdyYWRFWFQgdGV4dHVyZUdyYWQnXHJcblx0XHRdLmpvaW4oJ1xcbicpICsgJ1xcbicgKyBwcmVmaXhGcmFnbWVudDtcclxuXHJcblx0XHQvLyBNdWx0aXZpZXdcclxuXHJcblx0XHRpZiAobnVtTXVsdGl2aWV3Vmlld3MgPiAwKSB7XHJcblxyXG5cdFx0XHRwcmVmaXhWZXJ0ZXggPSBwcmVmaXhWZXJ0ZXgucmVwbGFjZShcclxuXHRcdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcclxuXHRcdFx0XHRcdCcjZXh0ZW5zaW9uIEdMX09WUl9tdWx0aXZpZXcyIDogcmVxdWlyZScsXHJcblx0XHRcdFx0XHQnbGF5b3V0KG51bV92aWV3cyA9ICcgKyBudW1NdWx0aXZpZXdWaWV3cyArICcpIGluOycsXHJcblx0XHRcdFx0XHQnI2RlZmluZSBWSUVXX0lEIGdsX1ZpZXdJRF9PVlInXHJcblx0XHRcdFx0XS5qb2luKCdcXG4nKVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0cHJlZml4VmVydGV4ID0gcHJlZml4VmVydGV4LnJlcGxhY2UoXHJcblx0XHRcdFx0W1xyXG5cdFx0XHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7JyxcclxuXHRcdFx0XHRcdCd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLFxyXG5cdFx0XHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXHJcblx0XHRcdFx0XHQndW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDsnXHJcblx0XHRcdFx0XS5qb2luKCdcXG4nKSxcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHQndW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpY2VzWycgKyBudW1NdWx0aXZpZXdWaWV3cyArICddOycsXHJcblx0XHRcdFx0XHQndW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaWNlc1snICsgbnVtTXVsdGl2aWV3Vmlld3MgKyAnXTsnLFxyXG5cdFx0XHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cmljZXNbJyArIG51bU11bHRpdmlld1ZpZXdzICsgJ107JyxcclxuXHRcdFx0XHRcdCd1bmlmb3JtIG1hdDMgbm9ybWFsTWF0cmljZXNbJyArIG51bU11bHRpdmlld1ZpZXdzICsgJ107JyxcclxuXHJcblx0XHRcdFx0XHQnI2RlZmluZSBtb2RlbFZpZXdNYXRyaXggbW9kZWxWaWV3TWF0cmljZXNbVklFV19JRF0nLFxyXG5cdFx0XHRcdFx0JyNkZWZpbmUgcHJvamVjdGlvbk1hdHJpeCBwcm9qZWN0aW9uTWF0cmljZXNbVklFV19JRF0nLFxyXG5cdFx0XHRcdFx0JyNkZWZpbmUgdmlld01hdHJpeCB2aWV3TWF0cmljZXNbVklFV19JRF0nLFxyXG5cdFx0XHRcdFx0JyNkZWZpbmUgbm9ybWFsTWF0cml4IG5vcm1hbE1hdHJpY2VzW1ZJRVdfSURdJ1xyXG5cdFx0XHRcdF0uam9pbignXFxuJylcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdHByZWZpeEZyYWdtZW50ID0gcHJlZml4RnJhZ21lbnQucmVwbGFjZShcclxuXHRcdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcclxuXHRcdFx0XHRbXHJcblx0XHRcdFx0XHQnI3ZlcnNpb24gMzAwIGVzXFxuJyxcclxuXHRcdFx0XHRcdCcjZXh0ZW5zaW9uIEdMX09WUl9tdWx0aXZpZXcyIDogcmVxdWlyZScsXHJcblx0XHRcdFx0XHQnI2RlZmluZSBWSUVXX0lEIGdsX1ZpZXdJRF9PVlInXHJcblx0XHRcdFx0XS5qb2luKCdcXG4nKVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0cHJlZml4RnJhZ21lbnQgPSBwcmVmaXhGcmFnbWVudC5yZXBsYWNlKFxyXG5cdFx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpeDsnLFxyXG5cdFx0XHRcdFtcclxuXHRcdFx0XHRcdCd1bmlmb3JtIG1hdDQgdmlld01hdHJpY2VzWycgKyBudW1NdWx0aXZpZXdWaWV3cyArICddOycsXHJcblx0XHRcdFx0XHQnI2RlZmluZSB2aWV3TWF0cml4IHZpZXdNYXRyaWNlc1tWSUVXX0lEXSdcclxuXHRcdFx0XHRdLmpvaW4oJ1xcbicpXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHZhciB2ZXJ0ZXhHbHNsID0gcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xyXG5cdHZhciBmcmFnbWVudEdsc2wgPSBwcmVmaXhGcmFnbWVudCArIGZyYWdtZW50U2hhZGVyO1xyXG5cclxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xyXG5cdC8vIGNvbnNvbGUubG9nKCAnKkZSQUdNRU5UKicsIGZyYWdtZW50R2xzbCApO1xyXG5cclxuXHR2YXIgZ2xWZXJ0ZXhTaGFkZXIgPSBXZWJHTFNoYWRlcihnbCwgMzU2MzMsIHZlcnRleEdsc2wpO1xyXG5cdHZhciBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoZ2wsIDM1NjMyLCBmcmFnbWVudEdsc2wpO1xyXG5cclxuXHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIpO1xyXG5cdGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyKTtcclxuXHJcblx0Ly8gRm9yY2UgYSBwYXJ0aWN1bGFyIGF0dHJpYnV0ZSB0byBpbmRleCAwLlxyXG5cclxuXHRpZiAobWF0ZXJpYWwuaW5kZXgwQXR0cmlidXRlTmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIDAsIG1hdGVyaWFsLmluZGV4MEF0dHJpYnV0ZU5hbWUpO1xyXG5cclxuXHR9IGVsc2UgaWYgKHBhcmFtZXRlcnMubW9ycGhUYXJnZXRzID09PSB0cnVlKSB7XHJcblxyXG5cdFx0Ly8gcHJvZ3JhbXMgd2l0aCBtb3JwaFRhcmdldHMgZGlzcGxhY2UgcG9zaXRpb24gb3V0IG9mIGF0dHJpYnV0ZSAwXHJcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgMCwgJ3Bvc2l0aW9uJyk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG5cdC8vIGNoZWNrIGZvciBsaW5rIGVycm9yc1xyXG5cdGlmIChyZW5kZXJlci5kZWJ1Zy5jaGVja1NoYWRlckVycm9ycykge1xyXG5cclxuXHRcdHZhciBwcm9ncmFtTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkudHJpbSgpO1xyXG5cdFx0dmFyIHZlcnRleExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coZ2xWZXJ0ZXhTaGFkZXIpLnRyaW0oKTtcclxuXHRcdHZhciBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coZ2xGcmFnbWVudFNoYWRlcikudHJpbSgpO1xyXG5cclxuXHRcdHZhciBydW5uYWJsZSA9IHRydWU7XHJcblx0XHR2YXIgaGF2ZURpYWdub3N0aWNzID0gdHJ1ZTtcclxuXHJcblx0XHRpZiAoZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCAzNTcxNCkgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRydW5uYWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0dmFyIHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyhnbCwgZ2xWZXJ0ZXhTaGFkZXIsICd2ZXJ0ZXgnKTtcclxuXHRcdFx0dmFyIGZyYWdtZW50RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKGdsLCBnbEZyYWdtZW50U2hhZGVyLCAnZnJhZ21lbnQnKTtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMUHJvZ3JhbTogc2hhZGVyIGVycm9yOiAnLCBnbC5nZXRFcnJvcigpLCAnMzU3MTUnLCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIDM1NzE1KSwgJ2dsLmdldFByb2dyYW1JbmZvTG9nJywgcHJvZ3JhbUxvZywgdmVydGV4RXJyb3JzLCBmcmFnbWVudEVycm9ycyk7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChwcm9ncmFtTG9nICE9PSAnJykge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFByb2dyYW06IGdsLmdldFByb2dyYW1JbmZvTG9nKCknLCBwcm9ncmFtTG9nKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHZlcnRleExvZyA9PT0gJycgfHwgZnJhZ21lbnRMb2cgPT09ICcnKSB7XHJcblxyXG5cdFx0XHRoYXZlRGlhZ25vc3RpY3MgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGhhdmVEaWFnbm9zdGljcykge1xyXG5cclxuXHRcdFx0dGhpcy5kaWFnbm9zdGljcyA9IHtcclxuXHJcblx0XHRcdFx0cnVubmFibGU6IHJ1bm5hYmxlLFxyXG5cdFx0XHRcdG1hdGVyaWFsOiBtYXRlcmlhbCxcclxuXHJcblx0XHRcdFx0cHJvZ3JhbUxvZzogcHJvZ3JhbUxvZyxcclxuXHJcblx0XHRcdFx0dmVydGV4U2hhZGVyOiB7XHJcblxyXG5cdFx0XHRcdFx0bG9nOiB2ZXJ0ZXhMb2csXHJcblx0XHRcdFx0XHRwcmVmaXg6IHByZWZpeFZlcnRleFxyXG5cclxuXHRcdFx0XHR9LFxyXG5cclxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjoge1xyXG5cclxuXHRcdFx0XHRcdGxvZzogZnJhZ21lbnRMb2csXHJcblx0XHRcdFx0XHRwcmVmaXg6IHByZWZpeEZyYWdtZW50XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH07XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGNsZWFuIHVwXHJcblxyXG5cdGdsLmRlbGV0ZVNoYWRlcihnbFZlcnRleFNoYWRlcik7XHJcblx0Z2wuZGVsZXRlU2hhZGVyKGdsRnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnNcclxuXHJcblx0dmFyIGNhY2hlZFVuaWZvcm1zO1xyXG5cclxuXHR0aGlzLmdldFVuaWZvcm1zID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmIChjYWNoZWRVbmlmb3JtcyA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjYWNoZWRVbmlmb3JtcyA9IG5ldyBXZWJHTFVuaWZvcm1zKGdsLCBwcm9ncmFtKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNhY2hlZFVuaWZvcm1zO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgYXR0cmlidXRlIGxvY2F0aW9uc1xyXG5cclxuXHR2YXIgY2FjaGVkQXR0cmlidXRlcztcclxuXHJcblx0dGhpcy5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmIChjYWNoZWRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyhnbCwgcHJvZ3JhbSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjYWNoZWRBdHRyaWJ1dGVzO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBmcmVlIHJlc291cmNlXHJcblxyXG5cdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRnbC5kZWxldGVQcm9ncmFtKHByb2dyYW0pO1xyXG5cdFx0dGhpcy5wcm9ncmFtID0gdW5kZWZpbmVkO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvL1xyXG5cclxuXHR0aGlzLm5hbWUgPSBzaGFkZXIubmFtZTtcclxuXHR0aGlzLmlkID0gcHJvZ3JhbUlkQ291bnQrKztcclxuXHR0aGlzLmNvZGUgPSBjb2RlO1xyXG5cdHRoaXMudXNlZFRpbWVzID0gMTtcclxuXHR0aGlzLnByb2dyYW0gPSBwcm9ncmFtO1xyXG5cdHRoaXMudmVydGV4U2hhZGVyID0gZ2xWZXJ0ZXhTaGFkZXI7XHJcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7XHJcblx0dGhpcy5udW1NdWx0aXZpZXdWaWV3cyA9IG51bU11bHRpdmlld1ZpZXdzO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbXMocmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcykge1xyXG5cclxuXHR2YXIgcHJvZ3JhbXMgPSBbXTtcclxuXHJcblx0dmFyIHNoYWRlcklEcyA9IHtcclxuXHRcdE1lc2hEZXB0aE1hdGVyaWFsOiAnZGVwdGgnLFxyXG5cdFx0TWVzaERpc3RhbmNlTWF0ZXJpYWw6ICdkaXN0YW5jZVJHQkEnLFxyXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcclxuXHRcdE1lc2hCYXNpY01hdGVyaWFsOiAnYmFzaWMnLFxyXG5cdFx0TWVzaExhbWJlcnRNYXRlcmlhbDogJ2xhbWJlcnQnLFxyXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXHJcblx0XHRNZXNoVG9vbk1hdGVyaWFsOiAncGhvbmcnLFxyXG5cdFx0TWVzaFN0YW5kYXJkTWF0ZXJpYWw6ICdwaHlzaWNhbCcsXHJcblx0XHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogJ3BoeXNpY2FsJyxcclxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXHJcblx0XHRMaW5lQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcclxuXHRcdExpbmVEYXNoZWRNYXRlcmlhbDogJ2Rhc2hlZCcsXHJcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXHJcblx0XHRTaGFkb3dNYXRlcmlhbDogJ3NoYWRvdycsXHJcblx0XHRTcHJpdGVNYXRlcmlhbDogJ3Nwcml0ZSdcclxuXHR9O1xyXG5cclxuXHR2YXIgcGFyYW1ldGVyTmFtZXMgPSBbXHJcblx0XHRcInByZWNpc2lvblwiLCBcInN1cHBvcnRzVmVydGV4VGV4dHVyZXNcIiwgXCJpbnN0YW5jaW5nXCIsXHJcblx0XHRcIm1hcFwiLCBcIm1hcEVuY29kaW5nXCIsIFwibWF0Y2FwXCIsIFwibWF0Y2FwRW5jb2RpbmdcIiwgXCJlbnZNYXBcIiwgXCJlbnZNYXBNb2RlXCIsIFwiZW52TWFwRW5jb2RpbmdcIixcclxuXHRcdFwibGlnaHRNYXBcIiwgXCJhb01hcFwiLCBcImVtaXNzaXZlTWFwXCIsIFwiZW1pc3NpdmVNYXBFbmNvZGluZ1wiLCBcImJ1bXBNYXBcIiwgXCJub3JtYWxNYXBcIiwgXCJvYmplY3RTcGFjZU5vcm1hbE1hcFwiLCBcInRhbmdlbnRTcGFjZU5vcm1hbE1hcFwiLCBcImNsZWFyY29hdE5vcm1hbE1hcFwiLCBcImRpc3BsYWNlbWVudE1hcFwiLCBcInNwZWN1bGFyTWFwXCIsXHJcblx0XHRcInJvdWdobmVzc01hcFwiLCBcIm1ldGFsbmVzc01hcFwiLCBcImdyYWRpZW50TWFwXCIsXHJcblx0XHRcImFscGhhTWFwXCIsIFwiY29tYmluZVwiLCBcInZlcnRleENvbG9yc1wiLCBcInZlcnRleFRhbmdlbnRzXCIsIFwiZm9nXCIsIFwidXNlRm9nXCIsIFwiZm9nRXhwMlwiLFxyXG5cdFx0XCJmbGF0U2hhZGluZ1wiLCBcInNpemVBdHRlbnVhdGlvblwiLCBcImxvZ2FyaXRobWljRGVwdGhCdWZmZXJcIiwgXCJza2lubmluZ1wiLFxyXG5cdFx0XCJtYXhCb25lc1wiLCBcInVzZVZlcnRleFRleHR1cmVcIiwgXCJtb3JwaFRhcmdldHNcIiwgXCJtb3JwaE5vcm1hbHNcIixcclxuXHRcdFwibWF4TW9ycGhUYXJnZXRzXCIsIFwibWF4TW9ycGhOb3JtYWxzXCIsIFwicHJlbXVsdGlwbGllZEFscGhhXCIsXHJcblx0XHRcIm51bURpckxpZ2h0c1wiLCBcIm51bVBvaW50TGlnaHRzXCIsIFwibnVtU3BvdExpZ2h0c1wiLCBcIm51bUhlbWlMaWdodHNcIiwgXCJudW1SZWN0QXJlYUxpZ2h0c1wiLFxyXG5cdFx0XCJzaGFkb3dNYXBFbmFibGVkXCIsIFwic2hhZG93TWFwVHlwZVwiLCBcInRvbmVNYXBwaW5nXCIsICdwaHlzaWNhbGx5Q29ycmVjdExpZ2h0cycsXHJcblx0XHRcImFscGhhVGVzdFwiLCBcImRvdWJsZVNpZGVkXCIsIFwiZmxpcFNpZGVkXCIsIFwibnVtQ2xpcHBpbmdQbGFuZXNcIiwgXCJudW1DbGlwSW50ZXJzZWN0aW9uXCIsIFwiZGVwdGhQYWNraW5nXCIsIFwiZGl0aGVyaW5nXCIsXHJcblx0XHRcInNoZWVuXCJcclxuXHRdO1xyXG5cclxuXHJcblx0ZnVuY3Rpb24gYWxsb2NhdGVCb25lcyhvYmplY3QpIHtcclxuXHJcblx0XHR2YXIgc2tlbGV0b24gPSBvYmplY3Quc2tlbGV0b247XHJcblx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcclxuXHJcblx0XHRpZiAoY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMpIHtcclxuXHJcblx0XHRcdHJldHVybiAxMDI0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBkZWZhdWx0IGZvciB3aGVuIG9iamVjdCBpcyBub3Qgc3BlY2lmaWVkXHJcblx0XHRcdC8vICggZm9yIGV4YW1wbGUgd2hlbiBwcmVidWlsZGluZyBzaGFkZXIgdG8gYmUgdXNlZCB3aXRoIG11bHRpcGxlIG9iamVjdHMgKVxyXG5cdFx0XHQvL1xyXG5cdFx0XHQvLyAgLSBsZWF2ZSBzb21lIGV4dHJhIHNwYWNlIGZvciBvdGhlciB1bmlmb3Jtc1xyXG5cdFx0XHQvLyAgLSBsaW1pdCBoZXJlIGlzIEFOR0xFJ3MgMjU0IG1heCB1bmlmb3JtIHZlY3RvcnNcclxuXHRcdFx0Ly8gICAgKHVwIHRvIDU0IHNob3VsZCBiZSBzYWZlKVxyXG5cclxuXHRcdFx0dmFyIG5WZXJ0ZXhVbmlmb3JtcyA9IGNhcGFiaWxpdGllcy5tYXhWZXJ0ZXhVbmlmb3JtcztcclxuXHRcdFx0dmFyIG5WZXJ0ZXhNYXRyaWNlcyA9IE1hdGguZmxvb3IoKG5WZXJ0ZXhVbmlmb3JtcyAtIDIwKSAvIDQpO1xyXG5cclxuXHRcdFx0dmFyIG1heEJvbmVzID0gTWF0aC5taW4oblZlcnRleE1hdHJpY2VzLCBib25lcy5sZW5ndGgpO1xyXG5cclxuXHRcdFx0aWYgKG1heEJvbmVzIDwgYm9uZXMubGVuZ3RoKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicpO1xyXG5cdFx0XHRcdHJldHVybiAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIG1heEJvbmVzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKG1hcCwgZ2FtbWFPdmVycmlkZUxpbmVhcikge1xyXG5cclxuXHRcdHZhciBlbmNvZGluZztcclxuXHJcblx0XHRpZiAoIW1hcCkge1xyXG5cclxuXHRcdFx0ZW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hcC5pc1RleHR1cmUpIHtcclxuXHJcblx0XHRcdGVuY29kaW5nID0gbWFwLmVuY29kaW5nO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbXMuZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIik7XHJcblx0XHRcdGVuY29kaW5nID0gbWFwLnRleHR1cmUuZW5jb2Rpbmc7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFkZCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBmb3IgV2ViR0xSZW5kZXJlci5nYW1tYUlucHV0L2dhbW1hT3V0cHV0IHBhcmFtZXRlciwgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgYXQgc29tZSBwb2ludC5cclxuXHRcdGlmIChlbmNvZGluZyA9PT0gTGluZWFyRW5jb2RpbmcgJiYgZ2FtbWFPdmVycmlkZUxpbmVhcikge1xyXG5cclxuXHRcdFx0ZW5jb2RpbmcgPSBHYW1tYUVuY29kaW5nO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZW5jb2Rpbmc7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKG1hdGVyaWFsLCBsaWdodHMsIHNoYWRvd3MsIGZvZywgbkNsaXBQbGFuZXMsIG5DbGlwSW50ZXJzZWN0aW9uLCBvYmplY3QpIHtcclxuXHJcblx0XHR2YXIgc2hhZGVySUQgPSBzaGFkZXJJRHNbbWF0ZXJpYWwudHlwZV07XHJcblxyXG5cdFx0Ly8gaGV1cmlzdGljcyB0byBjcmVhdGUgc2hhZGVyIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIGxpZ2h0cyBpbiB0aGUgc2NlbmVcclxuXHRcdC8vIChub3QgdG8gYmxvdyBvdmVyIG1heExpZ2h0cyBidWRnZXQpXHJcblxyXG5cdFx0dmFyIG1heEJvbmVzID0gb2JqZWN0LmlzU2tpbm5lZE1lc2ggPyBhbGxvY2F0ZUJvbmVzKG9iamVjdCkgOiAwO1xyXG5cdFx0dmFyIHByZWNpc2lvbiA9IGNhcGFiaWxpdGllcy5wcmVjaXNpb247XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLnByZWNpc2lvbiAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0cHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLmdldE1heFByZWNpc2lvbihtYXRlcmlhbC5wcmVjaXNpb24pO1xyXG5cclxuXHRcdFx0aWYgKHByZWNpc2lvbiAhPT0gbWF0ZXJpYWwucHJlY2lzaW9uKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xQcm9ncmFtLmdldFBhcmFtZXRlcnM6JywgbWF0ZXJpYWwucHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBwcmVjaXNpb24sICdpbnN0ZWFkLicpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xyXG5cclxuXHRcdHZhciBwYXJhbWV0ZXJzID0ge1xyXG5cclxuXHRcdFx0aXNXZWJHTDI6IGNhcGFiaWxpdGllcy5pc1dlYkdMMixcclxuXHJcblx0XHRcdHNoYWRlcklEOiBzaGFkZXJJRCxcclxuXHJcblx0XHRcdHByZWNpc2lvbjogcHJlY2lzaW9uLFxyXG5cclxuXHRcdFx0aW5zdGFuY2luZzogb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZSxcclxuXHJcblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IGNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcyxcclxuXHRcdFx0b3V0cHV0RW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoKCFjdXJyZW50UmVuZGVyVGFyZ2V0KSA/IG51bGwgOiBjdXJyZW50UmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlcmVyLmdhbW1hT3V0cHV0KSxcclxuXHRcdFx0bWFwOiAhIW1hdGVyaWFsLm1hcCxcclxuXHRcdFx0bWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAobWF0ZXJpYWwubWFwLCByZW5kZXJlci5nYW1tYUlucHV0KSxcclxuXHRcdFx0bWF0Y2FwOiAhIW1hdGVyaWFsLm1hdGNhcCxcclxuXHRcdFx0bWF0Y2FwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAobWF0ZXJpYWwubWF0Y2FwLCByZW5kZXJlci5nYW1tYUlucHV0KSxcclxuXHRcdFx0ZW52TWFwOiAhIW1hdGVyaWFsLmVudk1hcCxcclxuXHRcdFx0ZW52TWFwTW9kZTogbWF0ZXJpYWwuZW52TWFwICYmIG1hdGVyaWFsLmVudk1hcC5tYXBwaW5nLFxyXG5cdFx0XHRlbnZNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcChtYXRlcmlhbC5lbnZNYXAsIHJlbmRlcmVyLmdhbW1hSW5wdXQpLFxyXG5cdFx0XHRlbnZNYXBDdWJlVVY6ICghIW1hdGVyaWFsLmVudk1hcCkgJiYgKChtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcpIHx8IChtYXRlcmlhbC5lbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcpKSxcclxuXHRcdFx0bGlnaHRNYXA6ICEhbWF0ZXJpYWwubGlnaHRNYXAsXHJcblx0XHRcdGFvTWFwOiAhIW1hdGVyaWFsLmFvTWFwLFxyXG5cdFx0XHRlbWlzc2l2ZU1hcDogISFtYXRlcmlhbC5lbWlzc2l2ZU1hcCxcclxuXHRcdFx0ZW1pc3NpdmVNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcChtYXRlcmlhbC5lbWlzc2l2ZU1hcCwgcmVuZGVyZXIuZ2FtbWFJbnB1dCksXHJcblx0XHRcdGJ1bXBNYXA6ICEhbWF0ZXJpYWwuYnVtcE1hcCxcclxuXHRcdFx0bm9ybWFsTWFwOiAhIW1hdGVyaWFsLm5vcm1hbE1hcCxcclxuXHRcdFx0b2JqZWN0U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IE9iamVjdFNwYWNlTm9ybWFsTWFwLFxyXG5cdFx0XHR0YW5nZW50U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IFRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcclxuXHRcdFx0Y2xlYXJjb2F0Tm9ybWFsTWFwOiAhIW1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCxcclxuXHRcdFx0ZGlzcGxhY2VtZW50TWFwOiAhIW1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCxcclxuXHRcdFx0cm91Z2huZXNzTWFwOiAhIW1hdGVyaWFsLnJvdWdobmVzc01hcCxcclxuXHRcdFx0bWV0YWxuZXNzTWFwOiAhIW1hdGVyaWFsLm1ldGFsbmVzc01hcCxcclxuXHRcdFx0c3BlY3VsYXJNYXA6ICEhbWF0ZXJpYWwuc3BlY3VsYXJNYXAsXHJcblx0XHRcdGFscGhhTWFwOiAhIW1hdGVyaWFsLmFscGhhTWFwLFxyXG5cclxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhbWF0ZXJpYWwuZ3JhZGllbnRNYXAsXHJcblxyXG5cdFx0XHRzaGVlbjogISFtYXRlcmlhbC5zaGVlbixcclxuXHJcblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXHJcblxyXG5cdFx0XHR2ZXJ0ZXhUYW5nZW50czogKG1hdGVyaWFsLm5vcm1hbE1hcCAmJiBtYXRlcmlhbC52ZXJ0ZXhUYW5nZW50cyksXHJcblx0XHRcdHZlcnRleENvbG9yczogbWF0ZXJpYWwudmVydGV4Q29sb3JzLFxyXG5cdFx0XHR2ZXJ0ZXhVdnM6ICEhbWF0ZXJpYWwubWFwIHx8ICEhbWF0ZXJpYWwuYnVtcE1hcCB8fCAhIW1hdGVyaWFsLm5vcm1hbE1hcCB8fCAhIW1hdGVyaWFsLnNwZWN1bGFyTWFwIHx8ICEhbWF0ZXJpYWwuYWxwaGFNYXAgfHwgISFtYXRlcmlhbC5lbWlzc2l2ZU1hcCB8fCAhIW1hdGVyaWFsLnJvdWdobmVzc01hcCB8fCAhIW1hdGVyaWFsLm1ldGFsbmVzc01hcCB8fCAhIW1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCxcclxuXHJcblx0XHRcdGZvZzogISFmb2csXHJcblx0XHRcdHVzZUZvZzogbWF0ZXJpYWwuZm9nLFxyXG5cdFx0XHRmb2dFeHAyOiAoZm9nICYmIGZvZy5pc0ZvZ0V4cDIpLFxyXG5cclxuXHRcdFx0ZmxhdFNoYWRpbmc6IG1hdGVyaWFsLmZsYXRTaGFkaW5nLFxyXG5cclxuXHRcdFx0c2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24sXHJcblx0XHRcdGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxyXG5cclxuXHRcdFx0c2tpbm5pbmc6IG1hdGVyaWFsLnNraW5uaW5nICYmIG1heEJvbmVzID4gMCxcclxuXHRcdFx0bWF4Qm9uZXM6IG1heEJvbmVzLFxyXG5cdFx0XHR1c2VWZXJ0ZXhUZXh0dXJlOiBjYXBhYmlsaXRpZXMuZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcclxuXHJcblx0XHRcdG1vcnBoVGFyZ2V0czogbWF0ZXJpYWwubW9ycGhUYXJnZXRzLFxyXG5cdFx0XHRtb3JwaE5vcm1hbHM6IG1hdGVyaWFsLm1vcnBoTm9ybWFscyxcclxuXHRcdFx0bWF4TW9ycGhUYXJnZXRzOiByZW5kZXJlci5tYXhNb3JwaFRhcmdldHMsXHJcblx0XHRcdG1heE1vcnBoTm9ybWFsczogcmVuZGVyZXIubWF4TW9ycGhOb3JtYWxzLFxyXG5cclxuXHRcdFx0bnVtRGlyTGlnaHRzOiBsaWdodHMuZGlyZWN0aW9uYWwubGVuZ3RoLFxyXG5cdFx0XHRudW1Qb2ludExpZ2h0czogbGlnaHRzLnBvaW50Lmxlbmd0aCxcclxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxyXG5cdFx0XHRudW1SZWN0QXJlYUxpZ2h0czogbGlnaHRzLnJlY3RBcmVhLmxlbmd0aCxcclxuXHRcdFx0bnVtSGVtaUxpZ2h0czogbGlnaHRzLmhlbWkubGVuZ3RoLFxyXG5cclxuXHRcdFx0bnVtRGlyTGlnaHRTaGFkb3dzOiBsaWdodHMuZGlyZWN0aW9uYWxTaGFkb3dNYXAubGVuZ3RoLFxyXG5cdFx0XHRudW1Qb2ludExpZ2h0U2hhZG93czogbGlnaHRzLnBvaW50U2hhZG93TWFwLmxlbmd0aCxcclxuXHRcdFx0bnVtU3BvdExpZ2h0U2hhZG93czogbGlnaHRzLnNwb3RTaGFkb3dNYXAubGVuZ3RoLFxyXG5cclxuXHRcdFx0bnVtQ2xpcHBpbmdQbGFuZXM6IG5DbGlwUGxhbmVzLFxyXG5cdFx0XHRudW1DbGlwSW50ZXJzZWN0aW9uOiBuQ2xpcEludGVyc2VjdGlvbixcclxuXHJcblx0XHRcdGRpdGhlcmluZzogbWF0ZXJpYWwuZGl0aGVyaW5nLFxyXG5cclxuXHRcdFx0c2hhZG93TWFwRW5hYmxlZDogcmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgJiYgc2hhZG93cy5sZW5ndGggPiAwLFxyXG5cdFx0XHRzaGFkb3dNYXBUeXBlOiByZW5kZXJlci5zaGFkb3dNYXAudHlwZSxcclxuXHJcblx0XHRcdHRvbmVNYXBwaW5nOiBtYXRlcmlhbC50b25lTWFwcGVkID8gcmVuZGVyZXIudG9uZU1hcHBpbmcgOiBOb1RvbmVNYXBwaW5nLFxyXG5cdFx0XHRwaHlzaWNhbGx5Q29ycmVjdExpZ2h0czogcmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMsXHJcblxyXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IG1hdGVyaWFsLnByZW11bHRpcGxpZWRBbHBoYSxcclxuXHJcblx0XHRcdGFscGhhVGVzdDogbWF0ZXJpYWwuYWxwaGFUZXN0LFxyXG5cdFx0XHRkb3VibGVTaWRlZDogbWF0ZXJpYWwuc2lkZSA9PT0gRG91YmxlU2lkZSxcclxuXHRcdFx0ZmxpcFNpZGVkOiBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSxcclxuXHJcblx0XHRcdGRlcHRoUGFja2luZzogKG1hdGVyaWFsLmRlcHRoUGFja2luZyAhPT0gdW5kZWZpbmVkKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlXHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRyZXR1cm4gcGFyYW1ldGVycztcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRQcm9ncmFtQ29kZSA9IGZ1bmN0aW9uIChtYXRlcmlhbCwgcGFyYW1ldGVycykge1xyXG5cclxuXHRcdHZhciBhcnJheSA9IFtdO1xyXG5cclxuXHRcdGlmIChwYXJhbWV0ZXJzLnNoYWRlcklEKSB7XHJcblxyXG5cdFx0XHRhcnJheS5wdXNoKHBhcmFtZXRlcnMuc2hhZGVySUQpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRhcnJheS5wdXNoKG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyKTtcclxuXHRcdFx0YXJyYXkucHVzaChtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuZGVmaW5lcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG1hdGVyaWFsLmRlZmluZXMpIHtcclxuXHJcblx0XHRcdFx0YXJyYXkucHVzaChuYW1lKTtcclxuXHRcdFx0XHRhcnJheS5wdXNoKG1hdGVyaWFsLmRlZmluZXNbbmFtZV0pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtZXRlck5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRhcnJheS5wdXNoKHBhcmFtZXRlcnNbcGFyYW1ldGVyTmFtZXNbaV1dKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0YXJyYXkucHVzaChtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUudG9TdHJpbmcoKSk7XHJcblxyXG5cdFx0YXJyYXkucHVzaChyZW5kZXJlci5nYW1tYU91dHB1dCk7XHJcblxyXG5cdFx0YXJyYXkucHVzaChyZW5kZXJlci5nYW1tYUZhY3Rvcik7XHJcblxyXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5hY3F1aXJlUHJvZ3JhbSA9IGZ1bmN0aW9uIChtYXRlcmlhbCwgc2hhZGVyLCBwYXJhbWV0ZXJzLCBjb2RlKSB7XHJcblxyXG5cdFx0dmFyIHByb2dyYW07XHJcblxyXG5cdFx0Ly8gQ2hlY2sgaWYgY29kZSBoYXMgYmVlbiBhbHJlYWR5IGNvbXBpbGVkXHJcblx0XHRmb3IgKHZhciBwID0gMCwgcGwgPSBwcm9ncmFtcy5sZW5ndGg7IHAgPCBwbDsgcCsrKSB7XHJcblxyXG5cdFx0XHR2YXIgcHJvZ3JhbUluZm8gPSBwcm9ncmFtc1twXTtcclxuXHJcblx0XHRcdGlmIChwcm9ncmFtSW5mby5jb2RlID09PSBjb2RlKSB7XHJcblxyXG5cdFx0XHRcdHByb2dyYW0gPSBwcm9ncmFtSW5mbztcclxuXHRcdFx0XHQrK3Byb2dyYW0udXNlZFRpbWVzO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHByb2dyYW0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0cHJvZ3JhbSA9IG5ldyBXZWJHTFByb2dyYW0ocmVuZGVyZXIsIGV4dGVuc2lvbnMsIGNvZGUsIG1hdGVyaWFsLCBzaGFkZXIsIHBhcmFtZXRlcnMpO1xyXG5cdFx0XHRwcm9ncmFtcy5wdXNoKHByb2dyYW0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcHJvZ3JhbTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5yZWxlYXNlUHJvZ3JhbSA9IGZ1bmN0aW9uIChwcm9ncmFtKSB7XHJcblxyXG5cdFx0aWYgKC0tcHJvZ3JhbS51c2VkVGltZXMgPT09IDApIHtcclxuXHJcblx0XHRcdC8vIFJlbW92ZSBmcm9tIHVub3JkZXJlZCBzZXRcclxuXHRcdFx0dmFyIGkgPSBwcm9ncmFtcy5pbmRleE9mKHByb2dyYW0pO1xyXG5cdFx0XHRwcm9ncmFtc1tpXSA9IHByb2dyYW1zW3Byb2dyYW1zLmxlbmd0aCAtIDFdO1xyXG5cdFx0XHRwcm9ncmFtcy5wb3AoKTtcclxuXHJcblx0XHRcdC8vIEZyZWUgV2ViR0wgcmVzb3VyY2VzXHJcblx0XHRcdHByb2dyYW0uZGVzdHJveSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0Ly8gRXhwb3NlZCBmb3IgcmVzb3VyY2UgbW9uaXRvcmluZyAmIGVycm9yIGZlZWRiYWNrIHZpYSByZW5kZXJlci5pbmZvOlxyXG5cdHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGZvcmRhY2lvdXMgLyBmb3JkYWNpb3VzLmdpdGh1Yi5pb1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMUHJvcGVydGllcygpIHtcclxuXHJcblx0dmFyIHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHRmdW5jdGlvbiBnZXQob2JqZWN0KSB7XHJcblxyXG5cdFx0dmFyIG1hcCA9IHByb3BlcnRpZXMuZ2V0KG9iamVjdCk7XHJcblxyXG5cdFx0aWYgKG1hcCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRtYXAgPSB7fTtcclxuXHRcdFx0cHJvcGVydGllcy5zZXQob2JqZWN0LCBtYXApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbWFwO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbW92ZShvYmplY3QpIHtcclxuXHJcblx0XHRwcm9wZXJ0aWVzLmRlbGV0ZShvYmplY3QpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcclxuXHJcblx0XHRwcm9wZXJ0aWVzLmdldChvYmplY3QpW2tleV0gPSB2YWx1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xyXG5cclxuXHRcdHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRnZXQ6IGdldCxcclxuXHRcdHJlbW92ZTogcmVtb3ZlLFxyXG5cdFx0dXBkYXRlOiB1cGRhdGUsXHJcblx0XHRkaXNwb3NlOiBkaXNwb3NlXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKGEsIGIpIHtcclxuXHJcblx0aWYgKGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyKSB7XHJcblxyXG5cdFx0cmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjtcclxuXHJcblx0fSBlbHNlIGlmIChhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyKSB7XHJcblxyXG5cdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xyXG5cclxuXHR9IGVsc2UgaWYgKGEucHJvZ3JhbSAhPT0gYi5wcm9ncmFtKSB7XHJcblxyXG5cdFx0cmV0dXJuIGEucHJvZ3JhbS5pZCAtIGIucHJvZ3JhbS5pZDtcclxuXHJcblx0fSBlbHNlIGlmIChhLm1hdGVyaWFsLmlkICE9PSBiLm1hdGVyaWFsLmlkKSB7XHJcblxyXG5cdFx0cmV0dXJuIGEubWF0ZXJpYWwuaWQgLSBiLm1hdGVyaWFsLmlkO1xyXG5cclxuXHR9IGVsc2UgaWYgKGEueiAhPT0gYi56KSB7XHJcblxyXG5cdFx0cmV0dXJuIGEueiAtIGIuejtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJldmVyc2VQYWludGVyU29ydFN0YWJsZShhLCBiKSB7XHJcblxyXG5cdGlmIChhLmdyb3VwT3JkZXIgIT09IGIuZ3JvdXBPcmRlcikge1xyXG5cclxuXHRcdHJldHVybiBhLmdyb3VwT3JkZXIgLSBiLmdyb3VwT3JkZXI7XHJcblxyXG5cdH0gZWxzZSBpZiAoYS5yZW5kZXJPcmRlciAhPT0gYi5yZW5kZXJPcmRlcikge1xyXG5cclxuXHRcdHJldHVybiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcjtcclxuXHJcblx0fSBlbHNlIGlmIChhLnogIT09IGIueikge1xyXG5cclxuXHRcdHJldHVybiBiLnogLSBhLno7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0cmV0dXJuIGEuaWQgLSBiLmlkO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gV2ViR0xSZW5kZXJMaXN0KCkge1xyXG5cclxuXHR2YXIgcmVuZGVySXRlbXMgPSBbXTtcclxuXHR2YXIgcmVuZGVySXRlbXNJbmRleCA9IDA7XHJcblxyXG5cdHZhciBvcGFxdWUgPSBbXTtcclxuXHR2YXIgdHJhbnNwYXJlbnQgPSBbXTtcclxuXHJcblx0dmFyIGRlZmF1bHRQcm9ncmFtID0geyBpZDogLSAxIH07XHJcblxyXG5cdGZ1bmN0aW9uIGluaXQoKSB7XHJcblxyXG5cdFx0cmVuZGVySXRlbXNJbmRleCA9IDA7XHJcblxyXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XHJcblx0XHR0cmFuc3BhcmVudC5sZW5ndGggPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldE5leHRSZW5kZXJJdGVtKG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCkge1xyXG5cclxuXHRcdHZhciByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbcmVuZGVySXRlbXNJbmRleF07XHJcblxyXG5cdFx0aWYgKHJlbmRlckl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0cmVuZGVySXRlbSA9IHtcclxuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxyXG5cdFx0XHRcdG9iamVjdDogb2JqZWN0LFxyXG5cdFx0XHRcdGdlb21ldHJ5OiBnZW9tZXRyeSxcclxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXHJcblx0XHRcdFx0cHJvZ3JhbTogbWF0ZXJpYWwucHJvZ3JhbSB8fCBkZWZhdWx0UHJvZ3JhbSxcclxuXHRcdFx0XHRncm91cE9yZGVyOiBncm91cE9yZGVyLFxyXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXHJcblx0XHRcdFx0ejogeixcclxuXHRcdFx0XHRncm91cDogZ3JvdXBcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJlbmRlckl0ZW1zW3JlbmRlckl0ZW1zSW5kZXhdID0gcmVuZGVySXRlbTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cmVuZGVySXRlbS5pZCA9IG9iamVjdC5pZDtcclxuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XHJcblx0XHRcdHJlbmRlckl0ZW0uZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdFx0cmVuZGVySXRlbS5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG5cdFx0XHRyZW5kZXJJdGVtLnByb2dyYW0gPSBtYXRlcmlhbC5wcm9ncmFtIHx8IGRlZmF1bHRQcm9ncmFtO1xyXG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwT3JkZXIgPSBncm91cE9yZGVyO1xyXG5cdFx0XHRyZW5kZXJJdGVtLnJlbmRlck9yZGVyID0gb2JqZWN0LnJlbmRlck9yZGVyO1xyXG5cdFx0XHRyZW5kZXJJdGVtLnogPSB6O1xyXG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gZ3JvdXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJlbmRlckl0ZW1zSW5kZXgrKztcclxuXHJcblx0XHRyZXR1cm4gcmVuZGVySXRlbTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwdXNoKG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCkge1xyXG5cclxuXHRcdHZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0ob2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwKTtcclxuXHJcblx0XHQobWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgPyB0cmFuc3BhcmVudCA6IG9wYXF1ZSkucHVzaChyZW5kZXJJdGVtKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1bnNoaWZ0KG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCkge1xyXG5cclxuXHRcdHZhciByZW5kZXJJdGVtID0gZ2V0TmV4dFJlbmRlckl0ZW0ob2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwKTtcclxuXHJcblx0XHQobWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgPyB0cmFuc3BhcmVudCA6IG9wYXF1ZSkudW5zaGlmdChyZW5kZXJJdGVtKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBzb3J0KCkge1xyXG5cclxuXHRcdGlmIChvcGFxdWUubGVuZ3RoID4gMSkgeyBvcGFxdWUuc29ydChwYWludGVyU29ydFN0YWJsZSk7IH1cclxuXHRcdGlmICh0cmFuc3BhcmVudC5sZW5ndGggPiAxKSB7IHRyYW5zcGFyZW50LnNvcnQocmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlKTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRvcGFxdWU6IG9wYXF1ZSxcclxuXHRcdHRyYW5zcGFyZW50OiB0cmFuc3BhcmVudCxcclxuXHJcblx0XHRpbml0OiBpbml0LFxyXG5cdFx0cHVzaDogcHVzaCxcclxuXHRcdHVuc2hpZnQ6IHVuc2hpZnQsXHJcblxyXG5cdFx0c29ydDogc29ydFxyXG5cdH07XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkge1xyXG5cclxuXHR2YXIgbGlzdHMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHRmdW5jdGlvbiBvblNjZW5lRGlzcG9zZShldmVudCkge1xyXG5cclxuXHRcdHZhciBzY2VuZSA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHRzY2VuZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UpO1xyXG5cclxuXHRcdGxpc3RzLmRlbGV0ZShzY2VuZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0KHNjZW5lLCBjYW1lcmEpIHtcclxuXHJcblx0XHR2YXIgY2FtZXJhcyA9IGxpc3RzLmdldChzY2VuZSk7XHJcblx0XHR2YXIgbGlzdDtcclxuXHRcdGlmIChjYW1lcmFzID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGxpc3QgPSBuZXcgV2ViR0xSZW5kZXJMaXN0KCk7XHJcblx0XHRcdGxpc3RzLnNldChzY2VuZSwgbmV3IFdlYWtNYXAoKSk7XHJcblx0XHRcdGxpc3RzLmdldChzY2VuZSkuc2V0KGNhbWVyYSwgbGlzdCk7XHJcblxyXG5cdFx0XHRzY2VuZS5hZGRFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRsaXN0ID0gY2FtZXJhcy5nZXQoY2FtZXJhKTtcclxuXHRcdFx0aWYgKGxpc3QgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRsaXN0ID0gbmV3IFdlYkdMUmVuZGVyTGlzdCgpO1xyXG5cdFx0XHRcdGNhbWVyYXMuc2V0KGNhbWVyYSwgbGlzdCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBsaXN0O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XHJcblxyXG5cdFx0bGlzdHMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRnZXQ6IGdldCxcclxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2VcclxuXHR9O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gVW5pZm9ybXNDYWNoZSgpIHtcclxuXHJcblx0dmFyIGxpZ2h0cyA9IHt9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKGxpZ2h0KSB7XHJcblxyXG5cdFx0XHRpZiAobGlnaHRzW2xpZ2h0LmlkXSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBsaWdodHNbbGlnaHQuaWRdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHVuaWZvcm1zO1xyXG5cclxuXHRcdFx0c3dpdGNoIChsaWdodC50eXBlKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ0RpcmVjdGlvbmFsTGlnaHQnOlxyXG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XHJcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxyXG5cclxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcclxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxyXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XHJcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcclxuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcclxuXHRcdFx0XHRcdFx0Y29sb3I6IG5ldyBDb2xvcigpLFxyXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcclxuXHRcdFx0XHRcdFx0Y29uZUNvczogMCxcclxuXHRcdFx0XHRcdFx0cGVudW1icmFDb3M6IDAsXHJcblx0XHRcdFx0XHRcdGRlY2F5OiAwLFxyXG5cclxuXHRcdFx0XHRcdFx0c2hhZG93OiBmYWxzZSxcclxuXHRcdFx0XHRcdFx0c2hhZG93QmlhczogMCxcclxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxyXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxyXG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXHJcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxyXG5cdFx0XHRcdFx0XHRkZWNheTogMCxcclxuXHJcblx0XHRcdFx0XHRcdHNoYWRvdzogZmFsc2UsXHJcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXHJcblx0XHRcdFx0XHRcdHNoYWRvd1JhZGl1czogMSxcclxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKSxcclxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcclxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhRmFyOiAxMDAwXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XHJcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcclxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHRcdFx0XHRza3lDb2xvcjogbmV3IENvbG9yKCksXHJcblx0XHRcdFx0XHRcdGdyb3VuZENvbG9yOiBuZXcgQ29sb3IoKVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0JzpcclxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xyXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxyXG5cdFx0XHRcdFx0XHRoYWxmV2lkdGg6IG5ldyBWZWN0b3IzKCksXHJcblx0XHRcdFx0XHRcdGhhbGZIZWlnaHQ6IG5ldyBWZWN0b3IzKClcclxuXHRcdFx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHNldCBSZWN0QXJlYUxpZ2h0IHNoYWRvdyB1bmlmb3Jtc1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGlnaHRzW2xpZ2h0LmlkXSA9IHVuaWZvcm1zO1xyXG5cclxuXHRcdFx0cmV0dXJuIHVuaWZvcm1zO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbnZhciBuZXh0VmVyc2lvbiA9IDA7XHJcblxyXG5mdW5jdGlvbiBzaGFkb3dDYXN0aW5nTGlnaHRzRmlyc3QobGlnaHRBLCBsaWdodEIpIHtcclxuXHJcblx0cmV0dXJuIChsaWdodEIuY2FzdFNoYWRvdyA/IDEgOiAwKSAtIChsaWdodEEuY2FzdFNoYWRvdyA/IDEgOiAwKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFdlYkdMTGlnaHRzKCkge1xyXG5cclxuXHR2YXIgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpO1xyXG5cclxuXHR2YXIgc3RhdGUgPSB7XHJcblxyXG5cdFx0dmVyc2lvbjogMCxcclxuXHJcblx0XHRoYXNoOiB7XHJcblx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoOiAtIDEsXHJcblx0XHRcdHBvaW50TGVuZ3RoOiAtIDEsXHJcblx0XHRcdHNwb3RMZW5ndGg6IC0gMSxcclxuXHRcdFx0cmVjdEFyZWFMZW5ndGg6IC0gMSxcclxuXHRcdFx0aGVtaUxlbmd0aDogLSAxLFxyXG5cclxuXHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzOiAtIDEsXHJcblx0XHRcdG51bVBvaW50U2hhZG93czogLSAxLFxyXG5cdFx0XHRudW1TcG90U2hhZG93czogLSAxLFxyXG5cdFx0fSxcclxuXHJcblx0XHRhbWJpZW50OiBbMCwgMCwgMF0sXHJcblx0XHRwcm9iZTogW10sXHJcblx0XHRkaXJlY3Rpb25hbDogW10sXHJcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sXHJcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogW10sXHJcblx0XHRzcG90OiBbXSxcclxuXHRcdHNwb3RTaGFkb3dNYXA6IFtdLFxyXG5cdFx0c3BvdFNoYWRvd01hdHJpeDogW10sXHJcblx0XHRyZWN0QXJlYTogW10sXHJcblx0XHRwb2ludDogW10sXHJcblx0XHRwb2ludFNoYWRvd01hcDogW10sXHJcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXHJcblx0XHRoZW1pOiBbXSxcclxuXHJcblx0XHRudW1EaXJlY3Rpb25hbFNoYWRvd3M6IC0gMSxcclxuXHRcdG51bVBvaW50U2hhZG93czogLSAxLFxyXG5cdFx0bnVtU3BvdFNoYWRvd3M6IC0gMVxyXG5cclxuXHR9O1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IDk7IGkrKykgeyBzdGF0ZS5wcm9iZS5wdXNoKG5ldyBWZWN0b3IzKCkpOyB9XHJcblxyXG5cdHZhciB2ZWN0b3IzID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgbWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0dmFyIG1hdHJpeDQyID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0ZnVuY3Rpb24gc2V0dXAobGlnaHRzLCBzaGFkb3dzLCBjYW1lcmEpIHtcclxuXHJcblx0XHR2YXIgciA9IDAsIGcgPSAwLCBiID0gMDtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDk7IGkrKykgeyBzdGF0ZS5wcm9iZVtpXS5zZXQoMCwgMCwgMCk7IH1cclxuXHJcblx0XHR2YXIgZGlyZWN0aW9uYWxMZW5ndGggPSAwO1xyXG5cdFx0dmFyIHBvaW50TGVuZ3RoID0gMDtcclxuXHRcdHZhciBzcG90TGVuZ3RoID0gMDtcclxuXHRcdHZhciByZWN0QXJlYUxlbmd0aCA9IDA7XHJcblx0XHR2YXIgaGVtaUxlbmd0aCA9IDA7XHJcblxyXG5cdFx0dmFyIG51bURpcmVjdGlvbmFsU2hhZG93cyA9IDA7XHJcblx0XHR2YXIgbnVtUG9pbnRTaGFkb3dzID0gMDtcclxuXHRcdHZhciBudW1TcG90U2hhZG93cyA9IDA7XHJcblxyXG5cdFx0dmFyIHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xyXG5cclxuXHRcdGxpZ2h0cy5zb3J0KHNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBsaWdodHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgbGlnaHQgPSBsaWdodHNbaV07XHJcblxyXG5cdFx0XHR2YXIgY29sb3IgPSBsaWdodC5jb2xvcjtcclxuXHRcdFx0dmFyIGludGVuc2l0eSA9IGxpZ2h0LmludGVuc2l0eTtcclxuXHRcdFx0dmFyIGRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7XHJcblxyXG5cdFx0XHR2YXIgc2hhZG93TWFwID0gKGxpZ2h0LnNoYWRvdyAmJiBsaWdodC5zaGFkb3cubWFwKSA/IGxpZ2h0LnNoYWRvdy5tYXAudGV4dHVyZSA6IG51bGw7XHJcblxyXG5cdFx0XHRpZiAobGlnaHQuaXNBbWJpZW50TGlnaHQpIHtcclxuXHJcblx0XHRcdFx0ciArPSBjb2xvci5yICogaW50ZW5zaXR5O1xyXG5cdFx0XHRcdGcgKz0gY29sb3IuZyAqIGludGVuc2l0eTtcclxuXHRcdFx0XHRiICs9IGNvbG9yLmIgKiBpbnRlbnNpdHk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGxpZ2h0LmlzTGlnaHRQcm9iZSkge1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IDk7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdHN0YXRlLnByb2JlW2pdLmFkZFNjYWxlZFZlY3RvcihsaWdodC5zaC5jb2VmZmljaWVudHNbal0sIGludGVuc2l0eSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobGlnaHQuaXNEaXJlY3Rpb25hbExpZ2h0KSB7XHJcblxyXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldChsaWdodCk7XHJcblxyXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkobGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKGxpZ2h0LmludGVuc2l0eSk7XHJcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihsaWdodC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0dmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24obGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKHZlY3RvcjMpO1xyXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24odmlld01hdHJpeCk7XHJcblxyXG5cdFx0XHRcdHVuaWZvcm1zLnNoYWRvdyA9IGxpZ2h0LmNhc3RTaGFkb3c7XHJcblxyXG5cdFx0XHRcdGlmIChsaWdodC5jYXN0U2hhZG93KSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcclxuXHJcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dCaWFzID0gc2hhZG93LmJpYXM7XHJcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xyXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xyXG5cclxuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwW2RpcmVjdGlvbmFsTGVuZ3RoXSA9IHNoYWRvd01hcDtcclxuXHRcdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4W2RpcmVjdGlvbmFsTGVuZ3RoXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XHJcblxyXG5cdFx0XHRcdFx0bnVtRGlyZWN0aW9uYWxTaGFkb3dzKys7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxbZGlyZWN0aW9uYWxMZW5ndGhdID0gdW5pZm9ybXM7XHJcblxyXG5cdFx0XHRcdGRpcmVjdGlvbmFsTGVuZ3RoKys7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGxpZ2h0LmlzU3BvdExpZ2h0KSB7XHJcblxyXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldChsaWdodCk7XHJcblxyXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihsaWdodC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KHZpZXdNYXRyaXgpO1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KGNvbG9yKS5tdWx0aXBseVNjYWxhcihpbnRlbnNpdHkpO1xyXG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcblxyXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24obGlnaHQubWF0cml4V29ybGQpO1xyXG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1Yih2ZWN0b3IzKTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKHZpZXdNYXRyaXgpO1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5jb25lQ29zID0gTWF0aC5jb3MobGlnaHQuYW5nbGUpO1xyXG5cdFx0XHRcdHVuaWZvcm1zLnBlbnVtYnJhQ29zID0gTWF0aC5jb3MobGlnaHQuYW5nbGUgKiAoMSAtIGxpZ2h0LnBlbnVtYnJhKSk7XHJcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcclxuXHJcblx0XHRcdFx0dW5pZm9ybXMuc2hhZG93ID0gbGlnaHQuY2FzdFNoYWRvdztcclxuXHJcblx0XHRcdFx0aWYgKGxpZ2h0LmNhc3RTaGFkb3cpIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xyXG5cclxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcclxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XHJcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dNYXBTaXplID0gc2hhZG93Lm1hcFNpemU7XHJcblxyXG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcFtzcG90TGVuZ3RoXSA9IHNoYWRvd01hcDtcclxuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXhbc3BvdExlbmd0aF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xyXG5cclxuXHRcdFx0XHRcdG51bVNwb3RTaGFkb3dzKys7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c3RhdGUuc3BvdFtzcG90TGVuZ3RoXSA9IHVuaWZvcm1zO1xyXG5cclxuXHRcdFx0XHRzcG90TGVuZ3RoKys7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGxpZ2h0LmlzUmVjdEFyZWFMaWdodCkge1xyXG5cclxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQobGlnaHQpO1xyXG5cclxuXHRcdFx0XHQvLyAoYSkgaW50ZW5zaXR5IGlzIHRoZSB0b3RhbCB2aXNpYmxlIGxpZ2h0IGVtaXR0ZWRcclxuXHRcdFx0XHQvL3VuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSAvICggbGlnaHQud2lkdGggKiBsaWdodC5oZWlnaHQgKiBNYXRoLlBJICkgKTtcclxuXHJcblx0XHRcdFx0Ly8gKGIpIGludGVuc2l0eSBpcyB0aGUgYnJpZ2h0bmVzcyBvZiB0aGUgbGlnaHRcclxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KGNvbG9yKS5tdWx0aXBseVNjYWxhcihpbnRlbnNpdHkpO1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24obGlnaHQubWF0cml4V29ybGQpO1xyXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCh2aWV3TWF0cml4KTtcclxuXHJcblx0XHRcdFx0Ly8gZXh0cmFjdCBsb2NhbCByb3RhdGlvbiBvZiBsaWdodCB0byBkZXJpdmUgd2lkdGgvaGVpZ2h0IGhhbGYgdmVjdG9yc1xyXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XHJcblx0XHRcdFx0bWF0cml4NC5jb3B5KGxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0XHRtYXRyaXg0LnByZW11bHRpcGx5KHZpZXdNYXRyaXgpO1xyXG5cdFx0XHRcdG1hdHJpeDQyLmV4dHJhY3RSb3RhdGlvbihtYXRyaXg0KTtcclxuXHJcblx0XHRcdFx0dW5pZm9ybXMuaGFsZldpZHRoLnNldChsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjApO1xyXG5cdFx0XHRcdHVuaWZvcm1zLmhhbGZIZWlnaHQuc2V0KDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjApO1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KG1hdHJpeDQyKTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NChtYXRyaXg0Mik7XHJcblxyXG5cdFx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBSZWN0QXJlYUxpZ2h0IGRpc3RhbmNlP1xyXG5cdFx0XHRcdC8vIHVuaWZvcm1zLmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcblxyXG5cdFx0XHRcdHN0YXRlLnJlY3RBcmVhW3JlY3RBcmVhTGVuZ3RoXSA9IHVuaWZvcm1zO1xyXG5cclxuXHRcdFx0XHRyZWN0QXJlYUxlbmd0aCsrO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChsaWdodC5pc1BvaW50TGlnaHQpIHtcclxuXHJcblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KGxpZ2h0KTtcclxuXHJcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQodmlld01hdHJpeCk7XHJcblxyXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkobGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKGxpZ2h0LmludGVuc2l0eSk7XHJcblx0XHRcdFx0dW5pZm9ybXMuZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5kZWNheSA9IGxpZ2h0LmRlY2F5O1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3cgPSBsaWdodC5jYXN0U2hhZG93O1xyXG5cclxuXHRcdFx0XHRpZiAobGlnaHQuY2FzdFNoYWRvdykge1xyXG5cclxuXHRcdFx0XHRcdHZhciBzaGFkb3cgPSBsaWdodC5zaGFkb3c7XHJcblxyXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xyXG5cdFx0XHRcdFx0dW5pZm9ybXMuc2hhZG93UmFkaXVzID0gc2hhZG93LnJhZGl1cztcclxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcclxuXHRcdFx0XHRcdHVuaWZvcm1zLnNoYWRvd0NhbWVyYU5lYXIgPSBzaGFkb3cuY2FtZXJhLm5lYXI7XHJcblx0XHRcdFx0XHR1bmlmb3Jtcy5zaGFkb3dDYW1lcmFGYXIgPSBzaGFkb3cuY2FtZXJhLmZhcjtcclxuXHJcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcFtwb2ludExlbmd0aF0gPSBzaGFkb3dNYXA7XHJcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hdHJpeFtwb2ludExlbmd0aF0gPSBsaWdodC5zaGFkb3cubWF0cml4O1xyXG5cclxuXHRcdFx0XHRcdG51bVBvaW50U2hhZG93cysrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHN0YXRlLnBvaW50W3BvaW50TGVuZ3RoXSA9IHVuaWZvcm1zO1xyXG5cclxuXHRcdFx0XHRwb2ludExlbmd0aCsrO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChsaWdodC5pc0hlbWlzcGhlcmVMaWdodCkge1xyXG5cclxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBjYWNoZS5nZXQobGlnaHQpO1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKHZpZXdNYXRyaXgpO1xyXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdFx0dW5pZm9ybXMuc2t5Q29sb3IuY29weShsaWdodC5jb2xvcikubXVsdGlwbHlTY2FsYXIoaW50ZW5zaXR5KTtcclxuXHRcdFx0XHR1bmlmb3Jtcy5ncm91bmRDb2xvci5jb3B5KGxpZ2h0Lmdyb3VuZENvbG9yKS5tdWx0aXBseVNjYWxhcihpbnRlbnNpdHkpO1xyXG5cclxuXHRcdFx0XHRzdGF0ZS5oZW1pW2hlbWlMZW5ndGhdID0gdW5pZm9ybXM7XHJcblxyXG5cdFx0XHRcdGhlbWlMZW5ndGgrKztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0c3RhdGUuYW1iaWVudFswXSA9IHI7XHJcblx0XHRzdGF0ZS5hbWJpZW50WzFdID0gZztcclxuXHRcdHN0YXRlLmFtYmllbnRbMl0gPSBiO1xyXG5cclxuXHRcdHZhciBoYXNoID0gc3RhdGUuaGFzaDtcclxuXHJcblx0XHRpZiAoaGFzaC5kaXJlY3Rpb25hbExlbmd0aCAhPT0gZGlyZWN0aW9uYWxMZW5ndGggfHxcclxuXHRcdFx0aGFzaC5wb2ludExlbmd0aCAhPT0gcG9pbnRMZW5ndGggfHxcclxuXHRcdFx0aGFzaC5zcG90TGVuZ3RoICE9PSBzcG90TGVuZ3RoIHx8XHJcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggIT09IHJlY3RBcmVhTGVuZ3RoIHx8XHJcblx0XHRcdGhhc2guaGVtaUxlbmd0aCAhPT0gaGVtaUxlbmd0aCB8fFxyXG5cdFx0XHRoYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyAhPT0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzIHx8XHJcblx0XHRcdGhhc2gubnVtUG9pbnRTaGFkb3dzICE9PSBudW1Qb2ludFNoYWRvd3MgfHxcclxuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyAhPT0gbnVtU3BvdFNoYWRvd3MpIHtcclxuXHJcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsLmxlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xyXG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XHJcblx0XHRcdHN0YXRlLnJlY3RBcmVhLmxlbmd0aCA9IHJlY3RBcmVhTGVuZ3RoO1xyXG5cdFx0XHRzdGF0ZS5wb2ludC5sZW5ndGggPSBwb2ludExlbmd0aDtcclxuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xyXG5cclxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXAubGVuZ3RoID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzO1xyXG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XHJcblx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXAubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7XHJcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcclxuXHRcdFx0c3RhdGUucG9pbnRTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtUG9pbnRTaGFkb3dzO1xyXG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xyXG5cclxuXHRcdFx0aGFzaC5kaXJlY3Rpb25hbExlbmd0aCA9IGRpcmVjdGlvbmFsTGVuZ3RoO1xyXG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoID0gcG9pbnRMZW5ndGg7XHJcblx0XHRcdGhhc2guc3BvdExlbmd0aCA9IHNwb3RMZW5ndGg7XHJcblx0XHRcdGhhc2gucmVjdEFyZWFMZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcclxuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoID0gaGVtaUxlbmd0aDtcclxuXHJcblx0XHRcdGhhc2gubnVtRGlyZWN0aW9uYWxTaGFkb3dzID0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzO1xyXG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyA9IG51bVBvaW50U2hhZG93cztcclxuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyA9IG51bVNwb3RTaGFkb3dzO1xyXG5cclxuXHRcdFx0c3RhdGUudmVyc2lvbiA9IG5leHRWZXJzaW9uKys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7XHJcblx0XHRzZXR1cDogc2V0dXAsXHJcblx0XHRzdGF0ZTogc3RhdGVcclxuXHR9O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZSgpIHtcclxuXHJcblx0dmFyIGxpZ2h0cyA9IG5ldyBXZWJHTExpZ2h0cygpO1xyXG5cclxuXHR2YXIgbGlnaHRzQXJyYXkgPSBbXTtcclxuXHR2YXIgc2hhZG93c0FycmF5ID0gW107XHJcblxyXG5cdGZ1bmN0aW9uIGluaXQoKSB7XHJcblxyXG5cdFx0bGlnaHRzQXJyYXkubGVuZ3RoID0gMDtcclxuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHB1c2hMaWdodChsaWdodCkge1xyXG5cclxuXHRcdGxpZ2h0c0FycmF5LnB1c2gobGlnaHQpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHB1c2hTaGFkb3coc2hhZG93TGlnaHQpIHtcclxuXHJcblx0XHRzaGFkb3dzQXJyYXkucHVzaChzaGFkb3dMaWdodCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoY2FtZXJhKSB7XHJcblxyXG5cdFx0bGlnaHRzLnNldHVwKGxpZ2h0c0FycmF5LCBzaGFkb3dzQXJyYXksIGNhbWVyYSk7XHJcblxyXG5cdH1cclxuXHJcblx0dmFyIHN0YXRlID0ge1xyXG5cdFx0bGlnaHRzQXJyYXk6IGxpZ2h0c0FycmF5LFxyXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXHJcblxyXG5cdFx0bGlnaHRzOiBsaWdodHNcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0aW5pdDogaW5pdCxcclxuXHRcdHN0YXRlOiBzdGF0ZSxcclxuXHRcdHNldHVwTGlnaHRzOiBzZXR1cExpZ2h0cyxcclxuXHJcblx0XHRwdXNoTGlnaHQ6IHB1c2hMaWdodCxcclxuXHRcdHB1c2hTaGFkb3c6IHB1c2hTaGFkb3dcclxuXHR9O1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gV2ViR0xSZW5kZXJTdGF0ZXMoKSB7XHJcblxyXG5cdHZhciByZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xyXG5cclxuXHRmdW5jdGlvbiBvblNjZW5lRGlzcG9zZShldmVudCkge1xyXG5cclxuXHRcdHZhciBzY2VuZSA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHRzY2VuZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UpO1xyXG5cclxuXHRcdHJlbmRlclN0YXRlcy5kZWxldGUoc2NlbmUpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldChzY2VuZSwgY2FtZXJhKSB7XHJcblxyXG5cdFx0dmFyIHJlbmRlclN0YXRlO1xyXG5cclxuXHRcdGlmIChyZW5kZXJTdGF0ZXMuaGFzKHNjZW5lKSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcclxuXHRcdFx0cmVuZGVyU3RhdGVzLnNldChzY2VuZSwgbmV3IFdlYWtNYXAoKSk7XHJcblx0XHRcdHJlbmRlclN0YXRlcy5nZXQoc2NlbmUpLnNldChjYW1lcmEsIHJlbmRlclN0YXRlKTtcclxuXHJcblx0XHRcdHNjZW5lLmFkZEV2ZW50TGlzdGVuZXIoJ2Rpc3Bvc2UnLCBvblNjZW5lRGlzcG9zZSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGlmIChyZW5kZXJTdGF0ZXMuZ2V0KHNjZW5lKS5oYXMoY2FtZXJhKSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSgpO1xyXG5cdFx0XHRcdHJlbmRlclN0YXRlcy5nZXQoc2NlbmUpLnNldChjYW1lcmEsIHJlbmRlclN0YXRlKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldChzY2VuZSkuZ2V0KGNhbWVyYSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZW5kZXJTdGF0ZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBkaXNwb3NlKCkge1xyXG5cclxuXHRcdHJlbmRlclN0YXRlcyA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHRcdGdldDogZ2V0LFxyXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHBzOi8vY2xhcmEuaW9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqXHJcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcclxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcclxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTWVzaERlcHRoTWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaERlcHRoTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmRlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xyXG5cclxuXHR0aGlzLmZvZyA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcclxuXHJcbn1cclxuXHJcbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaERlcHRoTWF0ZXJpYWw7XHJcblxyXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5NZXNoRGVwdGhNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLmRlcHRoUGFja2luZyA9IHNvdXJjZS5kZXB0aFBhY2tpbmc7XHJcblxyXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xyXG5cclxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XHJcblxyXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcclxuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqXHJcbiAqICByZWZlcmVuY2VQb3NpdGlvbjogPGZsb2F0PixcclxuICogIG5lYXJEaXN0YW5jZTogPGZsb2F0PixcclxuICogIGZhckRpc3RhbmNlOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgc2tpbm5pbmc6IDxib29sPixcclxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxyXG4gKlxyXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcclxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD5cclxuICpcclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hEaXN0YW5jZU1hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ01lc2hEaXN0YW5jZU1hdGVyaWFsJztcclxuXHJcblx0dGhpcy5yZWZlcmVuY2VQb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dGhpcy5uZWFyRGlzdGFuY2UgPSAxO1xyXG5cdHRoaXMuZmFyRGlzdGFuY2UgPSAxMDAwO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdHRoaXMuZm9nID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5NZXNoRGlzdGFuY2VNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoRGlzdGFuY2VNYXRlcmlhbDtcclxuXHJcbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMucmVmZXJlbmNlUG9zaXRpb24uY29weShzb3VyY2UucmVmZXJlbmNlUG9zaXRpb24pO1xyXG5cdHRoaXMubmVhckRpc3RhbmNlID0gc291cmNlLm5lYXJEaXN0YW5jZTtcclxuXHR0aGlzLmZhckRpc3RhbmNlID0gc291cmNlLmZhckRpc3RhbmNlO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xyXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcclxuXHJcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxudmFyIHZzbV9mcmFnID0gXCJ1bmlmb3JtIHNhbXBsZXIyRCBzaGFkb3dfcGFzcztcXG51bmlmb3JtIHZlYzIgcmVzb2x1dGlvbjtcXG51bmlmb3JtIGZsb2F0IHJhZGl1cztcXG4jaW5jbHVkZSA8cGFja2luZz5cXG52b2lkIG1haW4oKSB7XFxuICBmbG9hdCBtZWFuID0gMC4wO1xcbiAgZmxvYXQgc3F1YXJlZF9tZWFuID0gMC4wO1xcbiAgXFxuXFx0ZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgICkgLyByZXNvbHV0aW9uICkgKTtcXG4gIGZvciAoIGZsb2F0IGkgPSAtMS4wOyBpIDwgMS4wIDsgaSArPSBTQU1QTEVfUkFURSkge1xcbiAgICAjaWZkZWYgSE9SSVpPTkFMX1BBU1NcXG4gICAgICB2ZWMyIGRpc3RyaWJ1dGlvbiA9IGRlY29kZUhhbGZSR0JBICggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCBpLCAwLjAgKSAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XFxuICAgICAgbWVhbiArPSBkaXN0cmlidXRpb24ueDtcXG4gICAgICBzcXVhcmVkX21lYW4gKz0gZGlzdHJpYnV0aW9uLnkgKiBkaXN0cmlidXRpb24ueSArIGRpc3RyaWJ1dGlvbi54ICogZGlzdHJpYnV0aW9uLng7XFxuICAgICNlbHNlXFxuICAgICAgZmxvYXQgZGVwdGggPSB1bnBhY2tSR0JBVG9EZXB0aCggdGV4dHVyZTJEKCBzaGFkb3dfcGFzcywgKCBnbF9GcmFnQ29vcmQueHkgKyB2ZWMyKCAwLjAsICBpICkgICogcmFkaXVzICkgLyByZXNvbHV0aW9uICkgKTtcXG4gICAgICBtZWFuICs9IGRlcHRoO1xcbiAgICAgIHNxdWFyZWRfbWVhbiArPSBkZXB0aCAqIGRlcHRoO1xcbiAgICAjZW5kaWZcXG4gIH1cXG4gIG1lYW4gPSBtZWFuICogSEFMRl9TQU1QTEVfUkFURTtcXG4gIHNxdWFyZWRfbWVhbiA9IHNxdWFyZWRfbWVhbiAqIEhBTEZfU0FNUExFX1JBVEU7XFxuICBmbG9hdCBzdGRfZGV2ID0gcG93KCBzcXVhcmVkX21lYW4gLSBtZWFuICogbWVhbiwgMC41ICk7XFxuICBnbF9GcmFnQ29sb3IgPSBlbmNvZGVIYWxmUkdCQSggdmVjMiggbWVhbiwgc3RkX2RldiApICk7XFxufVwiO1xyXG5cclxudmFyIHZzbV92ZXJ0ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xTaGFkb3dNYXAoX3JlbmRlcmVyLCBfb2JqZWN0cywgbWF4VGV4dHVyZVNpemUpIHtcclxuXHJcblx0dmFyIF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcclxuXHJcblx0XHRfc2hhZG93TWFwU2l6ZSA9IG5ldyBWZWN0b3IyKCksXHJcblx0XHRfdmlld3BvcnRTaXplID0gbmV3IFZlY3RvcjIoKSxcclxuXHJcblx0XHRfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpLFxyXG5cclxuXHRcdF9Nb3JwaGluZ0ZsYWcgPSAxLFxyXG5cdFx0X1NraW5uaW5nRmxhZyA9IDIsXHJcblxyXG5cdFx0X051bWJlck9mTWF0ZXJpYWxWYXJpYW50cyA9IChfTW9ycGhpbmdGbGFnIHwgX1NraW5uaW5nRmxhZykgKyAxLFxyXG5cclxuXHRcdF9kZXB0aE1hdGVyaWFscyA9IG5ldyBBcnJheShfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzKSxcclxuXHRcdF9kaXN0YW5jZU1hdGVyaWFscyA9IG5ldyBBcnJheShfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzKSxcclxuXHJcblx0XHRfbWF0ZXJpYWxDYWNoZSA9IHt9O1xyXG5cclxuXHR2YXIgc2hhZG93U2lkZSA9IHsgMDogQmFja1NpZGUsIDE6IEZyb250U2lkZSwgMjogRG91YmxlU2lkZSB9O1xyXG5cclxuXHR2YXIgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCh7XHJcblxyXG5cdFx0ZGVmaW5lczoge1xyXG5cdFx0XHRTQU1QTEVfUkFURTogMi4wIC8gOC4wLFxyXG5cdFx0XHRIQUxGX1NBTVBMRV9SQVRFOiAxLjAgLyA4LjBcclxuXHRcdH0sXHJcblxyXG5cdFx0dW5pZm9ybXM6IHtcclxuXHRcdFx0c2hhZG93X3Bhc3M6IHsgdmFsdWU6IG51bGwgfSxcclxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxyXG5cdFx0XHRyYWRpdXM6IHsgdmFsdWU6IDQuMCB9XHJcblx0XHR9LFxyXG5cclxuXHRcdHZlcnRleFNoYWRlcjogdnNtX3ZlcnQsXHJcblxyXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IHZzbV9mcmFnXHJcblxyXG5cdH0pO1xyXG5cclxuXHR2YXIgc2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwgPSBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsLmNsb25lKCk7XHJcblx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwuZGVmaW5lcy5IT1JJWk9OQUxfUEFTUyA9IDE7XHJcblxyXG5cdHZhciBmdWxsU2NyZWVuVHJpID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0ZnVsbFNjcmVlblRyaS5hZGRBdHRyaWJ1dGUoXHJcblx0XHRcInBvc2l0aW9uXCIsXHJcblx0XHRuZXcgQnVmZmVyQXR0cmlidXRlKFxyXG5cdFx0XHRuZXcgRmxvYXQzMkFycmF5KFstIDEsIC0gMSwgMC41LCAzLCAtIDEsIDAuNSwgLSAxLCAzLCAwLjVdKSxcclxuXHRcdFx0M1xyXG5cdFx0KVxyXG5cdCk7XHJcblxyXG5cdHZhciBmdWxsU2NyZWVuTWVzaCA9IG5ldyBNZXNoKGZ1bGxTY3JlZW5UcmksIHNoYWRvd01hdGVyaWFsVmVydGljYWwpO1xyXG5cclxuXHQvLyBpbml0XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpICE9PSBfTnVtYmVyT2ZNYXRlcmlhbFZhcmlhbnRzOyArK2kpIHtcclxuXHJcblx0XHR2YXIgdXNlTW9ycGhpbmcgPSAoaSAmIF9Nb3JwaGluZ0ZsYWcpICE9PSAwO1xyXG5cdFx0dmFyIHVzZVNraW5uaW5nID0gKGkgJiBfU2tpbm5pbmdGbGFnKSAhPT0gMDtcclxuXHJcblx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCh7XHJcblxyXG5cdFx0XHRkZXB0aFBhY2tpbmc6IFJHQkFEZXB0aFBhY2tpbmcsXHJcblxyXG5cdFx0XHRtb3JwaFRhcmdldHM6IHVzZU1vcnBoaW5nLFxyXG5cdFx0XHRza2lubmluZzogdXNlU2tpbm5pbmdcclxuXHJcblx0XHR9KTtcclxuXHJcblx0XHRfZGVwdGhNYXRlcmlhbHNbaV0gPSBkZXB0aE1hdGVyaWFsO1xyXG5cclxuXHRcdHZhciBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKHtcclxuXHJcblx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXHJcblx0XHRcdHNraW5uaW5nOiB1c2VTa2lubmluZ1xyXG5cclxuXHRcdH0pO1xyXG5cclxuXHRcdF9kaXN0YW5jZU1hdGVyaWFsc1tpXSA9IGRpc3RhbmNlTWF0ZXJpYWw7XHJcblxyXG5cdH1cclxuXHJcblx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuYXV0b1VwZGF0ZSA9IHRydWU7XHJcblx0dGhpcy5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnR5cGUgPSBQQ0ZTaGFkb3dNYXA7XHJcblxyXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKGxpZ2h0cywgc2NlbmUsIGNhbWVyYSkge1xyXG5cclxuXHRcdGlmIChzY29wZS5lbmFibGVkID09PSBmYWxzZSkgeyByZXR1cm47IH1cclxuXHRcdGlmIChzY29wZS5hdXRvVXBkYXRlID09PSBmYWxzZSAmJiBzY29wZS5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0aWYgKGxpZ2h0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XHJcblx0XHR2YXIgYWN0aXZlQ3ViZUZhY2UgPSBfcmVuZGVyZXIuZ2V0QWN0aXZlQ3ViZUZhY2UoKTtcclxuXHRcdHZhciBhY3RpdmVNaXBtYXBMZXZlbCA9IF9yZW5kZXJlci5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xyXG5cclxuXHRcdHZhciBfc3RhdGUgPSBfcmVuZGVyZXIuc3RhdGU7XHJcblxyXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXHJcblx0XHRfc3RhdGUuc2V0QmxlbmRpbmcoTm9CbGVuZGluZyk7XHJcblx0XHRfc3RhdGUuYnVmZmVycy5jb2xvci5zZXRDbGVhcigxLCAxLCAxLCAxKTtcclxuXHRcdF9zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QodHJ1ZSk7XHJcblx0XHRfc3RhdGUuc2V0U2Npc3NvclRlc3QoZmFsc2UpO1xyXG5cclxuXHRcdC8vIHJlbmRlciBkZXB0aCBtYXBcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBsaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGxpZ2h0ID0gbGlnaHRzW2ldO1xyXG5cdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xyXG5cclxuXHRcdFx0aWYgKHNoYWRvdyA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgbm8gc2hhZG93LicpO1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X3NoYWRvd01hcFNpemUuY29weShzaGFkb3cubWFwU2l6ZSk7XHJcblxyXG5cdFx0XHR2YXIgc2hhZG93RnJhbWVFeHRlbnRzID0gc2hhZG93LmdldEZyYW1lRXh0ZW50cygpO1xyXG5cclxuXHRcdFx0X3NoYWRvd01hcFNpemUubXVsdGlwbHkoc2hhZG93RnJhbWVFeHRlbnRzKTtcclxuXHJcblx0XHRcdF92aWV3cG9ydFNpemUuY29weShzaGFkb3cubWFwU2l6ZSk7XHJcblxyXG5cdFx0XHRpZiAoX3NoYWRvd01hcFNpemUueCA+IG1heFRleHR1cmVTaXplIHx8IF9zaGFkb3dNYXBTaXplLnkgPiBtYXhUZXh0dXJlU2l6ZSkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIHNoYWRvdyBleGNlZWRpbmcgbWF4IHRleHR1cmUgc2l6ZSwgcmVkdWNpbmcnKTtcclxuXHJcblx0XHRcdFx0aWYgKF9zaGFkb3dNYXBTaXplLnggPiBtYXhUZXh0dXJlU2l6ZSkge1xyXG5cclxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCA9IE1hdGguZmxvb3IobWF4VGV4dHVyZVNpemUgLyBzaGFkb3dGcmFtZUV4dGVudHMueCk7XHJcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICogc2hhZG93RnJhbWVFeHRlbnRzLng7XHJcblx0XHRcdFx0XHRzaGFkb3cubWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54O1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChfc2hhZG93TWFwU2l6ZS55ID4gbWF4VGV4dHVyZVNpemUpIHtcclxuXHJcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgPSBNYXRoLmZsb29yKG1heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnkpO1xyXG5cdFx0XHRcdFx0X3NoYWRvd01hcFNpemUueSA9IF92aWV3cG9ydFNpemUueSAqIHNoYWRvd0ZyYW1lRXh0ZW50cy55O1xyXG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueSA9IF92aWV3cG9ydFNpemUueTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHNoYWRvdy5tYXAgPT09IG51bGwgJiYgIXNoYWRvdy5pc1BvaW50TGlnaHRTaGFkb3cgJiYgdGhpcy50eXBlID09PSBWU01TaGFkb3dNYXApIHtcclxuXHJcblx0XHRcdFx0dmFyIHBhcnMgPSB7IG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XHJcblxyXG5cdFx0XHRcdHNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyk7XHJcblx0XHRcdFx0c2hhZG93Lm1hcC50ZXh0dXJlLm5hbWUgPSBsaWdodC5uYW1lICsgXCIuc2hhZG93TWFwXCI7XHJcblxyXG5cdFx0XHRcdHNoYWRvdy5tYXBQYXNzID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMpO1xyXG5cclxuXHRcdFx0XHRzaGFkb3cuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChzaGFkb3cubWFwID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBwYXJzID0geyBtaW5GaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIG1hZ0ZpbHRlcjogTmVhcmVzdEZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XHJcblxyXG5cdFx0XHRcdHNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyk7XHJcblx0XHRcdFx0c2hhZG93Lm1hcC50ZXh0dXJlLm5hbWUgPSBsaWdodC5uYW1lICsgXCIuc2hhZG93TWFwXCI7XHJcblxyXG5cdFx0XHRcdHNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldChzaGFkb3cubWFwKTtcclxuXHRcdFx0X3JlbmRlcmVyLmNsZWFyKCk7XHJcblxyXG5cdFx0XHR2YXIgdmlld3BvcnRDb3VudCA9IHNoYWRvdy5nZXRWaWV3cG9ydENvdW50KCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciB2cCA9IDA7IHZwIDwgdmlld3BvcnRDb3VudDsgdnArKykge1xyXG5cclxuXHRcdFx0XHR2YXIgdmlld3BvcnQgPSBzaGFkb3cuZ2V0Vmlld3BvcnQodnApO1xyXG5cclxuXHRcdFx0XHRfdmlld3BvcnQuc2V0KFxyXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueCxcclxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueSAqIHZpZXdwb3J0LnksXHJcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC56LFxyXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS55ICogdmlld3BvcnQud1xyXG5cdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdF9zdGF0ZS52aWV3cG9ydChfdmlld3BvcnQpO1xyXG5cclxuXHRcdFx0XHRzaGFkb3cudXBkYXRlTWF0cmljZXMobGlnaHQsIGNhbWVyYSwgdnApO1xyXG5cclxuXHRcdFx0XHRfZnJ1c3R1bSA9IHNoYWRvdy5nZXRGcnVzdHVtKCk7XHJcblxyXG5cdFx0XHRcdHJlbmRlck9iamVjdChzY2VuZSwgY2FtZXJhLCBzaGFkb3cuY2FtZXJhLCBsaWdodCwgdGhpcy50eXBlKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGRvIGJsdXIgcGFzcyBmb3IgVlNNXHJcblxyXG5cdFx0XHRpZiAoIXNoYWRvdy5pc1BvaW50TGlnaHRTaGFkb3cgJiYgdGhpcy50eXBlID09PSBWU01TaGFkb3dNYXApIHtcclxuXHJcblx0XHRcdFx0VlNNUGFzcyhzaGFkb3csIGNhbWVyYSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHNjb3BlLm5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldChjdXJyZW50UmVuZGVyVGFyZ2V0LCBhY3RpdmVDdWJlRmFjZSwgYWN0aXZlTWlwbWFwTGV2ZWwpO1xyXG5cclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBWU01QYXNzKHNoYWRvdywgY2FtZXJhKSB7XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5ID0gX29iamVjdHMudXBkYXRlKGZ1bGxTY3JlZW5NZXNoKTtcclxuXHJcblx0XHQvLyB2ZXJ0aWNhbCBwYXNzXHJcblxyXG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5zaGFkb3dfcGFzcy52YWx1ZSA9IHNoYWRvdy5tYXAudGV4dHVyZTtcclxuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xyXG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xyXG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldChzaGFkb3cubWFwUGFzcyk7XHJcblx0XHRfcmVuZGVyZXIuY2xlYXIoKTtcclxuXHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwpO1xyXG5cclxuXHRcdC8vIGhvcml6b25hbCBwYXNzXHJcblxyXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwUGFzcy50ZXh0dXJlO1xyXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xyXG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gc2hhZG93LnJhZGl1cztcclxuXHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoc2hhZG93Lm1hcCk7XHJcblx0XHRfcmVuZGVyZXIuY2xlYXIoKTtcclxuXHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwsIGZ1bGxTY3JlZW5NZXNoLCBudWxsKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsKG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCBzaGFkb3dDYW1lcmFOZWFyLCBzaGFkb3dDYW1lcmFGYXIsIHR5cGUpIHtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdFx0dmFyIHJlc3VsdCA9IG51bGw7XHJcblxyXG5cdFx0dmFyIG1hdGVyaWFsVmFyaWFudHMgPSBfZGVwdGhNYXRlcmlhbHM7XHJcblx0XHR2YXIgY3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcclxuXHJcblx0XHRpZiAobGlnaHQuaXNQb2ludExpZ2h0KSB7XHJcblxyXG5cdFx0XHRtYXRlcmlhbFZhcmlhbnRzID0gX2Rpc3RhbmNlTWF0ZXJpYWxzO1xyXG5cdFx0XHRjdXN0b21NYXRlcmlhbCA9IG9iamVjdC5jdXN0b21EaXN0YW5jZU1hdGVyaWFsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIWN1c3RvbU1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHR2YXIgdXNlTW9ycGhpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdGlmIChtYXRlcmlhbC5tb3JwaFRhcmdldHMpIHtcclxuXHJcblx0XHRcdFx0aWYgKGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdFx0XHR1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aCA+IDA7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0XHRcdHVzZU1vcnBoaW5nID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAob2JqZWN0LmlzU2tpbm5lZE1lc2ggJiYgbWF0ZXJpYWwuc2tpbm5pbmcgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xTaGFkb3dNYXA6IFRIUkVFLlNraW5uZWRNZXNoIHdpdGggbWF0ZXJpYWwuc2tpbm5pbmcgc2V0IHRvIGZhbHNlOicsIG9iamVjdCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdXNlU2tpbm5pbmcgPSBvYmplY3QuaXNTa2lubmVkTWVzaCAmJiBtYXRlcmlhbC5za2lubmluZztcclxuXHJcblx0XHRcdHZhciB2YXJpYW50SW5kZXggPSAwO1xyXG5cclxuXHRcdFx0aWYgKHVzZU1vcnBoaW5nKSB7IHZhcmlhbnRJbmRleCB8PSBfTW9ycGhpbmdGbGFnOyB9XHJcblx0XHRcdGlmICh1c2VTa2lubmluZykgeyB2YXJpYW50SW5kZXggfD0gX1NraW5uaW5nRmxhZzsgfVxyXG5cclxuXHRcdFx0cmVzdWx0ID0gbWF0ZXJpYWxWYXJpYW50c1t2YXJpYW50SW5kZXhdO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXN1bHQgPSBjdXN0b21NYXRlcmlhbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKF9yZW5kZXJlci5sb2NhbENsaXBwaW5nRW5hYmxlZCAmJlxyXG5cdFx0XHRtYXRlcmlhbC5jbGlwU2hhZG93cyA9PT0gdHJ1ZSAmJlxyXG5cdFx0XHRtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggIT09IDApIHtcclxuXHJcblx0XHRcdC8vIGluIHRoaXMgY2FzZSB3ZSBuZWVkIGEgdW5pcXVlIG1hdGVyaWFsIGluc3RhbmNlIHJlZmxlY3RpbmcgdGhlXHJcblx0XHRcdC8vIGFwcHJvcHJpYXRlIHN0YXRlXHJcblxyXG5cdFx0XHR2YXIga2V5QSA9IHJlc3VsdC51dWlkLCBrZXlCID0gbWF0ZXJpYWwudXVpZDtcclxuXHJcblx0XHRcdHZhciBtYXRlcmlhbHNGb3JWYXJpYW50ID0gX21hdGVyaWFsQ2FjaGVba2V5QV07XHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWxzRm9yVmFyaWFudCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsc0ZvclZhcmlhbnQgPSB7fTtcclxuXHRcdFx0XHRfbWF0ZXJpYWxDYWNoZVtrZXlBXSA9IG1hdGVyaWFsc0ZvclZhcmlhbnQ7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50W2tleUJdO1xyXG5cclxuXHRcdFx0aWYgKGNhY2hlZE1hdGVyaWFsID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Y2FjaGVkTWF0ZXJpYWwgPSByZXN1bHQuY2xvbmUoKTtcclxuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50W2tleUJdID0gY2FjaGVkTWF0ZXJpYWw7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXN1bHQgPSBjYWNoZWRNYXRlcmlhbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0LnZpc2libGUgPSBtYXRlcmlhbC52aXNpYmxlO1xyXG5cdFx0cmVzdWx0LndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZTtcclxuXHJcblx0XHRpZiAodHlwZSA9PT0gVlNNU2hhZG93TWFwKSB7XHJcblxyXG5cdFx0XHRyZXN1bHQuc2lkZSA9IChtYXRlcmlhbC5zaGFkb3dTaWRlICE9IG51bGwpID8gbWF0ZXJpYWwuc2hhZG93U2lkZSA6IG1hdGVyaWFsLnNpZGU7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHJlc3VsdC5zaWRlID0gKG1hdGVyaWFsLnNoYWRvd1NpZGUgIT0gbnVsbCkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogc2hhZG93U2lkZVttYXRlcmlhbC5zaWRlXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmVzdWx0LmNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XHJcblx0XHRyZXN1bHQuY2xpcHBpbmdQbGFuZXMgPSBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcztcclxuXHRcdHJlc3VsdC5jbGlwSW50ZXJzZWN0aW9uID0gbWF0ZXJpYWwuY2xpcEludGVyc2VjdGlvbjtcclxuXHJcblx0XHRyZXN1bHQud2lyZWZyYW1lTGluZXdpZHRoID0gbWF0ZXJpYWwud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cdFx0cmVzdWx0LmxpbmV3aWR0aCA9IG1hdGVyaWFsLmxpbmV3aWR0aDtcclxuXHJcblx0XHRpZiAobGlnaHQuaXNQb2ludExpZ2h0ICYmIHJlc3VsdC5pc01lc2hEaXN0YW5jZU1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRyZXN1bHQucmVmZXJlbmNlUG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0cmVzdWx0Lm5lYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYU5lYXI7XHJcblx0XHRcdHJlc3VsdC5mYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYUZhcjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3Qob2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUpIHtcclxuXHJcblx0XHRpZiAob2JqZWN0LnZpc2libGUgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KGNhbWVyYS5sYXllcnMpO1xyXG5cclxuXHRcdGlmICh2aXNpYmxlICYmIChvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzKSkge1xyXG5cclxuXHRcdFx0aWYgKChvYmplY3QuY2FzdFNoYWRvdyB8fCAob2JqZWN0LnJlY2VpdmVTaGFkb3cgJiYgdHlwZSA9PT0gVlNNU2hhZG93TWFwKSkgJiYgKCFvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KG9iamVjdCkpKSB7XHJcblxyXG5cdFx0XHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBfb2JqZWN0cy51cGRhdGUob2JqZWN0KTtcclxuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KG1hdGVyaWFsKSkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgayA9IDAsIGtsID0gZ3JvdXBzLmxlbmd0aDsgayA8IGtsOyBrKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1trXTtcclxuXHRcdFx0XHRcdFx0dmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFtncm91cC5tYXRlcmlhbEluZGV4XTtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2YXIgZGVwdGhNYXRlcmlhbCA9IGdldERlcHRoTWF0ZXJpYWwob2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIsIHR5cGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXApO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbC52aXNpYmxlKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCBzaGFkb3dDYW1lcmEubmVhciwgc2hhZG93Q2FtZXJhLmZhciwgdHlwZSk7XHJcblxyXG5cdFx0XHRcdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdChzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIG51bGwpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0cmVuZGVyT2JqZWN0KGNoaWxkcmVuW2ldLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xTdGF0ZShnbCwgZXh0ZW5zaW9ucywgdXRpbHMsIGNhcGFiaWxpdGllcykge1xyXG5cclxuXHRmdW5jdGlvbiBDb2xvckJ1ZmZlcigpIHtcclxuXHJcblx0XHR2YXIgbG9ja2VkID0gZmFsc2U7XHJcblxyXG5cdFx0dmFyIGNvbG9yID0gbmV3IFZlY3RvcjQoKTtcclxuXHRcdHZhciBjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcclxuXHRcdHZhciBjdXJyZW50Q29sb3JDbGVhciA9IG5ldyBWZWN0b3I0KDAsIDAsIDAsIDApO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHRzZXRNYXNrOiBmdW5jdGlvbiAoY29sb3JNYXNrKSB7XHJcblxyXG5cdFx0XHRcdGlmIChjdXJyZW50Q29sb3JNYXNrICE9PSBjb2xvck1hc2sgJiYgIWxvY2tlZCkge1xyXG5cclxuXHRcdFx0XHRcdGdsLmNvbG9yTWFzayhjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2spO1xyXG5cdFx0XHRcdFx0Y3VycmVudENvbG9yTWFzayA9IGNvbG9yTWFzaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKGxvY2spIHtcclxuXHJcblx0XHRcdFx0bG9ja2VkID0gbG9jaztcclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKHIsIGcsIGIsIGEsIHByZW11bHRpcGxpZWRBbHBoYSkge1xyXG5cclxuXHRcdFx0XHRpZiAocHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdFx0ciAqPSBhOyBnICo9IGE7IGIgKj0gYTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjb2xvci5zZXQociwgZywgYiwgYSk7XHJcblxyXG5cdFx0XHRcdGlmIChjdXJyZW50Q29sb3JDbGVhci5lcXVhbHMoY29sb3IpID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0XHRcdGdsLmNsZWFyQ29sb3IociwgZywgYiwgYSk7XHJcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5jb3B5KGNvbG9yKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gbnVsbDtcclxuXHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5zZXQoLSAxLCAwLCAwLCAwKTsgLy8gc2V0IHRvIGludmFsaWQgc3RhdGVcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIERlcHRoQnVmZmVyKCkge1xyXG5cclxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcclxuXHJcblx0XHR2YXIgY3VycmVudERlcHRoTWFzayA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudERlcHRoRnVuYyA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoZGVwdGhUZXN0KSB7XHJcblxyXG5cdFx0XHRcdGlmIChkZXB0aFRlc3QpIHtcclxuXHJcblx0XHRcdFx0XHRlbmFibGUoMjkyOSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0ZGlzYWJsZSgyOTI5KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uIChkZXB0aE1hc2spIHtcclxuXHJcblx0XHRcdFx0aWYgKGN1cnJlbnREZXB0aE1hc2sgIT09IGRlcHRoTWFzayAmJiAhbG9ja2VkKSB7XHJcblxyXG5cdFx0XHRcdFx0Z2wuZGVwdGhNYXNrKGRlcHRoTWFzayk7XHJcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gZGVwdGhNYXNrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKGRlcHRoRnVuYykge1xyXG5cclxuXHRcdFx0XHRpZiAoY3VycmVudERlcHRoRnVuYyAhPT0gZGVwdGhGdW5jKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKGRlcHRoRnVuYykge1xyXG5cclxuXHRcdFx0XHRcdFx0c3dpdGNoIChkZXB0aEZ1bmMpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSBOZXZlckRlcHRoOlxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyg1MTIpO1xyXG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGNhc2UgQWx3YXlzRGVwdGg6XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKDUxOSk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRGVwdGg6XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKDUxMyk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRXF1YWxEZXB0aDpcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoNTE1KTtcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjYXNlIEVxdWFsRGVwdGg6XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKDUxNCk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxEZXB0aDpcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoNTE4KTtcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjYXNlIEdyZWF0ZXJEZXB0aDpcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoNTE2KTtcclxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRjYXNlIE5vdEVxdWFsRGVwdGg6XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKDUxNyk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoNTE1KTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Z2wuZGVwdGhGdW5jKDUxNSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uIChsb2NrKSB7XHJcblxyXG5cdFx0XHRcdGxvY2tlZCA9IGxvY2s7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uIChkZXB0aCkge1xyXG5cclxuXHRcdFx0XHRpZiAoY3VycmVudERlcHRoQ2xlYXIgIT09IGRlcHRoKSB7XHJcblxyXG5cdFx0XHRcdFx0Z2wuY2xlYXJEZXB0aChkZXB0aCk7XHJcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhDbGVhciA9IGRlcHRoO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0bG9ja2VkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnREZXB0aEZ1bmMgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIFN0ZW5jaWxCdWZmZXIoKSB7XHJcblxyXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xyXG5cclxuXHRcdHZhciBjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xyXG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xyXG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xyXG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XHJcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHJcblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uIChzdGVuY2lsVGVzdCkge1xyXG5cclxuXHRcdFx0XHRpZiAoIWxvY2tlZCkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChzdGVuY2lsVGVzdCkge1xyXG5cclxuXHRcdFx0XHRcdFx0ZW5hYmxlKDI5NjApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRkaXNhYmxlKDI5NjApO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uIChzdGVuY2lsTWFzaykge1xyXG5cclxuXHRcdFx0XHRpZiAoY3VycmVudFN0ZW5jaWxNYXNrICE9PSBzdGVuY2lsTWFzayAmJiAhbG9ja2VkKSB7XHJcblxyXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE1hc2soc3RlbmNpbE1hc2spO1xyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gc3RlbmNpbE1hc2s7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoc3RlbmNpbEZ1bmMsIHN0ZW5jaWxSZWYsIHN0ZW5jaWxNYXNrKSB7XHJcblxyXG5cdFx0XHRcdGlmIChjdXJyZW50U3RlbmNpbEZ1bmMgIT09IHN0ZW5jaWxGdW5jIHx8XHJcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiAhPT0gc3RlbmNpbFJlZiB8fFxyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayAhPT0gc3RlbmNpbE1hc2spIHtcclxuXHJcblx0XHRcdFx0XHRnbC5zdGVuY2lsRnVuYyhzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2spO1xyXG5cclxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jO1xyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBzdGVuY2lsUmVmO1xyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IHN0ZW5jaWxNYXNrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0c2V0T3A6IGZ1bmN0aW9uIChzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MpIHtcclxuXHJcblx0XHRcdFx0aWYgKGN1cnJlbnRTdGVuY2lsRmFpbCAhPT0gc3RlbmNpbEZhaWwgfHxcclxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyAhPT0gc3RlbmNpbFpQYXNzKSB7XHJcblxyXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE9wKHN0ZW5jaWxGYWlsLCBzdGVuY2lsWkZhaWwsIHN0ZW5jaWxaUGFzcyk7XHJcblxyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxGYWlsID0gc3RlbmNpbEZhaWw7XHJcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xyXG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IHN0ZW5jaWxaUGFzcztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHNldExvY2tlZDogZnVuY3Rpb24gKGxvY2spIHtcclxuXHJcblx0XHRcdFx0bG9ja2VkID0gbG9jaztcclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKHN0ZW5jaWwpIHtcclxuXHJcblx0XHRcdFx0aWYgKGN1cnJlbnRTdGVuY2lsQ2xlYXIgIT09IHN0ZW5jaWwpIHtcclxuXHJcblx0XHRcdFx0XHRnbC5jbGVhclN0ZW5jaWwoc3RlbmNpbCk7XHJcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbENsZWFyID0gc3RlbmNpbDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XHJcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxSZWYgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XHJcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaRmFpbCA9IG51bGw7XHJcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XHJcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgY29sb3JCdWZmZXIgPSBuZXcgQ29sb3JCdWZmZXIoKTtcclxuXHR2YXIgZGVwdGhCdWZmZXIgPSBuZXcgRGVwdGhCdWZmZXIoKTtcclxuXHR2YXIgc3RlbmNpbEJ1ZmZlciA9IG5ldyBTdGVuY2lsQnVmZmVyKCk7XHJcblxyXG5cdHZhciBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKDM0OTIxKTtcclxuXHR2YXIgbmV3QXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KG1heFZlcnRleEF0dHJpYnV0ZXMpO1xyXG5cdHZhciBlbmFibGVkQXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KG1heFZlcnRleEF0dHJpYnV0ZXMpO1xyXG5cdHZhciBhdHRyaWJ1dGVEaXZpc29ycyA9IG5ldyBVaW50OEFycmF5KG1heFZlcnRleEF0dHJpYnV0ZXMpO1xyXG5cclxuXHR2YXIgZW5hYmxlZENhcGFiaWxpdGllcyA9IHt9O1xyXG5cclxuXHR2YXIgY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcclxuXHJcblx0dmFyIGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcclxuXHJcblx0dmFyIGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSBudWxsO1xyXG5cdHZhciBjdXJyZW50QmxlbmRpbmcgPSBudWxsO1xyXG5cdHZhciBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XHJcblx0dmFyIGN1cnJlbnRCbGVuZFNyYyA9IG51bGw7XHJcblx0dmFyIGN1cnJlbnRCbGVuZERzdCA9IG51bGw7XHJcblx0dmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xyXG5cdHZhciBjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XHJcblx0dmFyIGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcclxuXHR2YXIgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XHJcblxyXG5cdHZhciBjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcclxuXHR2YXIgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcclxuXHJcblx0dmFyIGN1cnJlbnRMaW5lV2lkdGggPSBudWxsO1xyXG5cclxuXHR2YXIgY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBudWxsO1xyXG5cdHZhciBjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gbnVsbDtcclxuXHJcblx0dmFyIG1heFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKDM1NjYxKTtcclxuXHJcblx0dmFyIGxpbmVXaWR0aEF2YWlsYWJsZSA9IGZhbHNlO1xyXG5cdHZhciB2ZXJzaW9uID0gMDtcclxuXHR2YXIgZ2xWZXJzaW9uID0gZ2wuZ2V0UGFyYW1ldGVyKDc5MzgpO1xyXG5cclxuXHRpZiAoZ2xWZXJzaW9uLmluZGV4T2YoJ1dlYkdMJykgIT09IC0gMSkge1xyXG5cclxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KC9eV2ViR0xcXCAoWzAtOV0pLy5leGVjKGdsVmVyc2lvbilbMV0pO1xyXG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKHZlcnNpb24gPj0gMS4wKTtcclxuXHJcblx0fSBlbHNlIGlmIChnbFZlcnNpb24uaW5kZXhPZignT3BlbkdMIEVTJykgIT09IC0gMSkge1xyXG5cclxuXHRcdHZlcnNpb24gPSBwYXJzZUZsb2F0KC9eT3BlbkdMXFwgRVNcXCAoWzAtOV0pLy5leGVjKGdsVmVyc2lvbilbMV0pO1xyXG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKHZlcnNpb24gPj0gMi4wKTtcclxuXHJcblx0fVxyXG5cclxuXHR2YXIgY3VycmVudFRleHR1cmVTbG90ID0gbnVsbDtcclxuXHR2YXIgY3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcclxuXHJcblx0dmFyIGN1cnJlbnRTY2lzc29yID0gbmV3IFZlY3RvcjQoKTtcclxuXHR2YXIgY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcclxuXHJcblx0ZnVuY3Rpb24gY3JlYXRlVGV4dHVyZSh0eXBlLCB0YXJnZXQsIGNvdW50KSB7XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBuZXcgVWludDhBcnJheSg0KTsgLy8gNCBpcyByZXF1aXJlZCB0byBtYXRjaCBkZWZhdWx0IHVucGFjayBhbGlnbm1lbnQgb2YgNC5cclxuXHRcdHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cclxuXHRcdGdsLmJpbmRUZXh0dXJlKHR5cGUsIHRleHR1cmUpO1xyXG5cdFx0Z2wudGV4UGFyYW1ldGVyaSh0eXBlLCAxMDI0MSwgOTcyOCk7XHJcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKHR5cGUsIDEwMjQwLCA5NzI4KTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuXHJcblx0XHRcdGdsLnRleEltYWdlMkQodGFyZ2V0ICsgaSwgMCwgNjQwOCwgMSwgMSwgMCwgNjQwOCwgNTEyMSwgZGF0YSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBlbXB0eVRleHR1cmVzID0ge307XHJcblx0ZW1wdHlUZXh0dXJlc1szNTUzXSA9IGNyZWF0ZVRleHR1cmUoMzU1MywgMzU1MywgMSk7XHJcblx0ZW1wdHlUZXh0dXJlc1szNDA2N10gPSBjcmVhdGVUZXh0dXJlKDM0MDY3LCAzNDA2OSwgNik7XHJcblxyXG5cdC8vIGluaXRcclxuXHJcblx0Y29sb3JCdWZmZXIuc2V0Q2xlYXIoMCwgMCwgMCwgMSk7XHJcblx0ZGVwdGhCdWZmZXIuc2V0Q2xlYXIoMSk7XHJcblx0c3RlbmNpbEJ1ZmZlci5zZXRDbGVhcigwKTtcclxuXHJcblx0ZW5hYmxlKDI5MjkpO1xyXG5cdGRlcHRoQnVmZmVyLnNldEZ1bmMoTGVzc0VxdWFsRGVwdGgpO1xyXG5cclxuXHRzZXRGbGlwU2lkZWQoZmFsc2UpO1xyXG5cdHNldEN1bGxGYWNlKEN1bGxGYWNlQmFjayk7XHJcblx0ZW5hYmxlKDI4ODQpO1xyXG5cclxuXHRzZXRCbGVuZGluZyhOb0JsZW5kaW5nKTtcclxuXHJcblx0Ly9cclxuXHJcblx0ZnVuY3Rpb24gaW5pdEF0dHJpYnV0ZXMoKSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBuZXdBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0bmV3QXR0cmlidXRlc1tpXSA9IDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGVuYWJsZUF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKGF0dHJpYnV0ZSwgMCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcihhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRuZXdBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSAxO1xyXG5cclxuXHRcdGlmIChlbmFibGVkQXR0cmlidXRlc1thdHRyaWJ1dGVdID09PSAwKSB7XHJcblxyXG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGUpO1xyXG5cdFx0XHRlbmFibGVkQXR0cmlidXRlc1thdHRyaWJ1dGVdID0gMTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGF0dHJpYnV0ZURpdmlzb3JzW2F0dHJpYnV0ZV0gIT09IG1lc2hQZXJBdHRyaWJ1dGUpIHtcclxuXHJcblx0XHRcdHZhciBleHRlbnNpb24gPSBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBnbCA6IGV4dGVuc2lvbnMuZ2V0KCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XHJcblxyXG5cdFx0XHRleHRlbnNpb25bY2FwYWJpbGl0aWVzLmlzV2ViR0wyID8gJ3ZlcnRleEF0dHJpYkRpdmlzb3InIDogJ3ZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRSddKGF0dHJpYnV0ZSwgbWVzaFBlckF0dHJpYnV0ZSk7XHJcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzW2F0dHJpYnV0ZV0gPSBtZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcygpIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGVuYWJsZWRBdHRyaWJ1dGVzLmxlbmd0aDsgaSAhPT0gbDsgKytpKSB7XHJcblxyXG5cdFx0XHRpZiAoZW5hYmxlZEF0dHJpYnV0ZXNbaV0gIT09IG5ld0F0dHJpYnV0ZXNbaV0pIHtcclxuXHJcblx0XHRcdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGkpO1xyXG5cdFx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzW2ldID0gMDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZW5hYmxlKGlkKSB7XHJcblxyXG5cdFx0aWYgKGVuYWJsZWRDYXBhYmlsaXRpZXNbaWRdICE9PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRnbC5lbmFibGUoaWQpO1xyXG5cdFx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzW2lkXSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRpc2FibGUoaWQpIHtcclxuXHJcblx0XHRpZiAoZW5hYmxlZENhcGFiaWxpdGllc1tpZF0gIT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRnbC5kaXNhYmxlKGlkKTtcclxuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1tpZF0gPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkge1xyXG5cclxuXHRcdGlmIChjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cyA9IFtdO1xyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnKSB8fFxyXG5cdFx0XHRcdGV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycpIHx8XHJcblx0XHRcdFx0ZXh0ZW5zaW9ucy5nZXQoJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJykgfHxcclxuXHRcdFx0XHRleHRlbnNpb25zLmdldCgnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2FzdGMnKSkge1xyXG5cclxuXHRcdFx0XHR2YXIgZm9ybWF0cyA9IGdsLmdldFBhcmFtZXRlcigzNDQ2Nyk7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0cy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cy5wdXNoKGZvcm1hdHNbaV0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHM7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdXNlUHJvZ3JhbShwcm9ncmFtKSB7XHJcblxyXG5cdFx0aWYgKGN1cnJlbnRQcm9ncmFtICE9PSBwcm9ncmFtKSB7XHJcblxyXG5cdFx0XHRnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG5cclxuXHRcdFx0Y3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBzZXRCbGVuZGluZyhibGVuZGluZywgYmxlbmRFcXVhdGlvbiwgYmxlbmRTcmMsIGJsZW5kRHN0LCBibGVuZEVxdWF0aW9uQWxwaGEsIGJsZW5kU3JjQWxwaGEsIGJsZW5kRHN0QWxwaGEsIHByZW11bHRpcGxpZWRBbHBoYSkge1xyXG5cclxuXHRcdGlmIChibGVuZGluZyA9PT0gTm9CbGVuZGluZykge1xyXG5cclxuXHRcdFx0aWYgKGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQpIHtcclxuXHJcblx0XHRcdFx0ZGlzYWJsZSgzMDQyKTtcclxuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghY3VycmVudEJsZW5kaW5nRW5hYmxlZCkge1xyXG5cclxuXHRcdFx0ZW5hYmxlKDMwNDIpO1xyXG5cdFx0XHRjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGJsZW5kaW5nICE9PSBDdXN0b21CbGVuZGluZykge1xyXG5cclxuXHRcdFx0aWYgKGJsZW5kaW5nICE9PSBjdXJyZW50QmxlbmRpbmcgfHwgcHJlbXVsdGlwbGllZEFscGhhICE9PSBjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEpIHtcclxuXHJcblx0XHRcdFx0aWYgKGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbikge1xyXG5cclxuXHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb24oMzI3NzQpO1xyXG5cclxuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XHJcblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gQWRkRXF1YXRpb247XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHByZW11bHRpcGxpZWRBbHBoYSkge1xyXG5cclxuXHRcdFx0XHRcdHN3aXRjaCAoYmxlbmRpbmcpIHtcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoMSwgNzcxLCAxLCA3NzEpO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxyXG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYygxLCAxKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgU3VidHJhY3RpdmVCbGVuZGluZzpcclxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSgwLCAwLCA3NjksIDc3MSk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoMCwgNzY4LCAwLCA3NzApO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTFN0YXRlOiBJbnZhbGlkIGJsZW5kaW5nOiAnLCBibGVuZGluZyk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHN3aXRjaCAoYmxlbmRpbmcpIHtcclxuXHJcblx0XHRcdFx0XHRcdGNhc2UgTm9ybWFsQmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoNzcwLCA3NzEsIDEsIDc3MSk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKDc3MCwgMSk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRjYXNlIFN1YnRyYWN0aXZlQmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKDAsIDc2OSk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRjYXNlIE11bHRpcGx5QmxlbmRpbmc6XHJcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jKDAsIDc2OCk7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y3VycmVudEJsZW5kU3JjID0gbnVsbDtcclxuXHRcdFx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xyXG5cdFx0XHRcdGN1cnJlbnRCbGVuZFNyY0FscGhhID0gbnVsbDtcclxuXHRcdFx0XHRjdXJyZW50QmxlbmREc3RBbHBoYSA9IG51bGw7XHJcblxyXG5cdFx0XHRcdGN1cnJlbnRCbGVuZGluZyA9IGJsZW5kaW5nO1xyXG5cdFx0XHRcdGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSA9IHByZW11bHRpcGxpZWRBbHBoYTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY3VzdG9tIGJsZW5kaW5nXHJcblxyXG5cdFx0YmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhIHx8IGJsZW5kRXF1YXRpb247XHJcblx0XHRibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYSB8fCBibGVuZFNyYztcclxuXHRcdGJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhIHx8IGJsZW5kRHN0O1xyXG5cclxuXHRcdGlmIChibGVuZEVxdWF0aW9uICE9PSBjdXJyZW50QmxlbmRFcXVhdGlvbiB8fCBibGVuZEVxdWF0aW9uQWxwaGEgIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEpIHtcclxuXHJcblx0XHRcdGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZSh1dGlscy5jb252ZXJ0KGJsZW5kRXF1YXRpb24pLCB1dGlscy5jb252ZXJ0KGJsZW5kRXF1YXRpb25BbHBoYSkpO1xyXG5cclxuXHRcdFx0Y3VycmVudEJsZW5kRXF1YXRpb24gPSBibGVuZEVxdWF0aW9uO1xyXG5cdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYmxlbmRTcmMgIT09IGN1cnJlbnRCbGVuZFNyYyB8fCBibGVuZERzdCAhPT0gY3VycmVudEJsZW5kRHN0IHx8IGJsZW5kU3JjQWxwaGEgIT09IGN1cnJlbnRCbGVuZFNyY0FscGhhIHx8IGJsZW5kRHN0QWxwaGEgIT09IGN1cnJlbnRCbGVuZERzdEFscGhhKSB7XHJcblxyXG5cdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSh1dGlscy5jb252ZXJ0KGJsZW5kU3JjKSwgdXRpbHMuY29udmVydChibGVuZERzdCksIHV0aWxzLmNvbnZlcnQoYmxlbmRTcmNBbHBoYSksIHV0aWxzLmNvbnZlcnQoYmxlbmREc3RBbHBoYSkpO1xyXG5cclxuXHRcdFx0Y3VycmVudEJsZW5kU3JjID0gYmxlbmRTcmM7XHJcblx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IGJsZW5kRHN0O1xyXG5cdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XHJcblx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XHJcblx0XHRjdXJyZW50UHJlbXVsdGlwbGVkQWxwaGEgPSBudWxsO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldE1hdGVyaWFsKG1hdGVyaWFsLCBmcm9udEZhY2VDVykge1xyXG5cclxuXHRcdG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGVcclxuXHRcdFx0PyBkaXNhYmxlKDI4ODQpXHJcblx0XHRcdDogZW5hYmxlKDI4ODQpO1xyXG5cclxuXHRcdHZhciBmbGlwU2lkZWQgPSAobWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUpO1xyXG5cdFx0aWYgKGZyb250RmFjZUNXKSB7IGZsaXBTaWRlZCA9ICFmbGlwU2lkZWQ7IH1cclxuXHJcblx0XHRzZXRGbGlwU2lkZWQoZmxpcFNpZGVkKTtcclxuXHJcblx0XHQobWF0ZXJpYWwuYmxlbmRpbmcgPT09IE5vcm1hbEJsZW5kaW5nICYmIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSBmYWxzZSlcclxuXHRcdFx0PyBzZXRCbGVuZGluZyhOb0JsZW5kaW5nKVxyXG5cdFx0XHQ6IHNldEJsZW5kaW5nKG1hdGVyaWFsLmJsZW5kaW5nLCBtYXRlcmlhbC5ibGVuZEVxdWF0aW9uLCBtYXRlcmlhbC5ibGVuZFNyYywgbWF0ZXJpYWwuYmxlbmREc3QsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb25BbHBoYSwgbWF0ZXJpYWwuYmxlbmRTcmNBbHBoYSwgbWF0ZXJpYWwuYmxlbmREc3RBbHBoYSwgbWF0ZXJpYWwucHJlbXVsdGlwbGllZEFscGhhKTtcclxuXHJcblx0XHRkZXB0aEJ1ZmZlci5zZXRGdW5jKG1hdGVyaWFsLmRlcHRoRnVuYyk7XHJcblx0XHRkZXB0aEJ1ZmZlci5zZXRUZXN0KG1hdGVyaWFsLmRlcHRoVGVzdCk7XHJcblx0XHRkZXB0aEJ1ZmZlci5zZXRNYXNrKG1hdGVyaWFsLmRlcHRoV3JpdGUpO1xyXG5cdFx0Y29sb3JCdWZmZXIuc2V0TWFzayhtYXRlcmlhbC5jb2xvcldyaXRlKTtcclxuXHJcblx0XHR2YXIgc3RlbmNpbFdyaXRlID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlO1xyXG5cdFx0c3RlbmNpbEJ1ZmZlci5zZXRUZXN0KHN0ZW5jaWxXcml0ZSk7XHJcblx0XHRpZiAoc3RlbmNpbFdyaXRlKSB7XHJcblxyXG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldE1hc2sobWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayk7XHJcblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0RnVuYyhtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrKTtcclxuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRPcChtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzZXRQb2x5Z29uT2Zmc2V0KG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly9cclxuXHJcblx0ZnVuY3Rpb24gc2V0RmxpcFNpZGVkKGZsaXBTaWRlZCkge1xyXG5cclxuXHRcdGlmIChjdXJyZW50RmxpcFNpZGVkICE9PSBmbGlwU2lkZWQpIHtcclxuXHJcblx0XHRcdGlmIChmbGlwU2lkZWQpIHtcclxuXHJcblx0XHRcdFx0Z2wuZnJvbnRGYWNlKDIzMDQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Z2wuZnJvbnRGYWNlKDIzMDUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y3VycmVudEZsaXBTaWRlZCA9IGZsaXBTaWRlZDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0Q3VsbEZhY2UoY3VsbEZhY2UpIHtcclxuXHJcblx0XHRpZiAoY3VsbEZhY2UgIT09IEN1bGxGYWNlTm9uZSkge1xyXG5cclxuXHRcdFx0ZW5hYmxlKDI4ODQpO1xyXG5cclxuXHRcdFx0aWYgKGN1bGxGYWNlICE9PSBjdXJyZW50Q3VsbEZhY2UpIHtcclxuXHJcblx0XHRcdFx0aWYgKGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2spIHtcclxuXHJcblx0XHRcdFx0XHRnbC5jdWxsRmFjZSgxMDI5KTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmIChjdWxsRmFjZSA9PT0gQ3VsbEZhY2VGcm9udCkge1xyXG5cclxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKDEwMjgpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGdsLmN1bGxGYWNlKDEwMzIpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGRpc2FibGUoMjg4NCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IGN1bGxGYWNlO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldExpbmVXaWR0aCh3aWR0aCkge1xyXG5cclxuXHRcdGlmICh3aWR0aCAhPT0gY3VycmVudExpbmVXaWR0aCkge1xyXG5cclxuXHRcdFx0aWYgKGxpbmVXaWR0aEF2YWlsYWJsZSkgeyBnbC5saW5lV2lkdGgod2lkdGgpOyB9XHJcblxyXG5cdFx0XHRjdXJyZW50TGluZVdpZHRoID0gd2lkdGg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldFBvbHlnb25PZmZzZXQocG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cykge1xyXG5cclxuXHRcdGlmIChwb2x5Z29uT2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRlbmFibGUoMzI4MjMpO1xyXG5cclxuXHRcdFx0aWYgKGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMpIHtcclxuXHJcblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldChmYWN0b3IsIHVuaXRzKTtcclxuXHJcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IgPSBmYWN0b3I7XHJcblx0XHRcdFx0Y3VycmVudFBvbHlnb25PZmZzZXRVbml0cyA9IHVuaXRzO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRkaXNhYmxlKDMyODIzKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0U2Npc3NvclRlc3Qoc2Npc3NvclRlc3QpIHtcclxuXHJcblx0XHRpZiAoc2Npc3NvclRlc3QpIHtcclxuXHJcblx0XHRcdGVuYWJsZSgzMDg5KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0ZGlzYWJsZSgzMDg5KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gdGV4dHVyZVxyXG5cclxuXHRmdW5jdGlvbiBhY3RpdmVUZXh0dXJlKHdlYmdsU2xvdCkge1xyXG5cclxuXHRcdGlmICh3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCkgeyB3ZWJnbFNsb3QgPSAzMzk4NCArIG1heFRleHR1cmVzIC0gMTsgfVxyXG5cclxuXHRcdGlmIChjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCkge1xyXG5cclxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSh3ZWJnbFNsb3QpO1xyXG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKHdlYmdsVHlwZSwgd2ViZ2xUZXh0dXJlKSB7XHJcblxyXG5cdFx0aWYgKGN1cnJlbnRUZXh0dXJlU2xvdCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0YWN0aXZlVGV4dHVyZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbY3VycmVudFRleHR1cmVTbG90XTtcclxuXHJcblx0XHRpZiAoYm91bmRUZXh0dXJlID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGJvdW5kVGV4dHVyZSA9IHsgdHlwZTogdW5kZWZpbmVkLCB0ZXh0dXJlOiB1bmRlZmluZWQgfTtcclxuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbY3VycmVudFRleHR1cmVTbG90XSA9IGJvdW5kVGV4dHVyZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGJvdW5kVGV4dHVyZS50eXBlICE9PSB3ZWJnbFR5cGUgfHwgYm91bmRUZXh0dXJlLnRleHR1cmUgIT09IHdlYmdsVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0Z2wuYmluZFRleHR1cmUod2ViZ2xUeXBlLCB3ZWJnbFRleHR1cmUgfHwgZW1wdHlUZXh0dXJlc1t3ZWJnbFR5cGVdKTtcclxuXHJcblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gd2ViZ2xUeXBlO1xyXG5cdFx0XHRib3VuZFRleHR1cmUudGV4dHVyZSA9IHdlYmdsVGV4dHVyZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY29tcHJlc3NlZFRleEltYWdlMkQoKSB7XHJcblxyXG5cdFx0dHJ5IHtcclxuXHJcblx0XHRcdGdsLmNvbXByZXNzZWRUZXhJbWFnZTJELmFwcGx5KGdsLCBhcmd1bWVudHMpO1xyXG5cclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTFN0YXRlOicsIGVycm9yKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcclxuXHJcblx0XHR0cnkge1xyXG5cclxuXHRcdFx0Z2wudGV4SW1hZ2UyRC5hcHBseShnbCwgYXJndW1lbnRzKTtcclxuXHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuV2ViR0xTdGF0ZTonLCBlcnJvcik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHRleEltYWdlM0QoKSB7XHJcblxyXG5cdFx0dHJ5IHtcclxuXHJcblx0XHRcdGdsLnRleEltYWdlM0QuYXBwbHkoZ2wsIGFyZ3VtZW50cyk7XHJcblxyXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBzY2lzc29yKHNjaXNzb3IpIHtcclxuXHJcblx0XHRpZiAoY3VycmVudFNjaXNzb3IuZXF1YWxzKHNjaXNzb3IpID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0Z2wuc2Npc3NvcihzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci56LCBzY2lzc29yLncpO1xyXG5cdFx0XHRjdXJyZW50U2Npc3Nvci5jb3B5KHNjaXNzb3IpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB2aWV3cG9ydCh2aWV3cG9ydCkge1xyXG5cclxuXHRcdGlmIChjdXJyZW50Vmlld3BvcnQuZXF1YWxzKHZpZXdwb3J0KSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGdsLnZpZXdwb3J0KHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LnosIHZpZXdwb3J0LncpO1xyXG5cdFx0XHRjdXJyZW50Vmlld3BvcnQuY29weSh2aWV3cG9ydCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vXHJcblxyXG5cdGZ1bmN0aW9uIHJlc2V0KCkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdGlmIChlbmFibGVkQXR0cmlidXRlc1tpXSA9PT0gMSkge1xyXG5cclxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaSk7XHJcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbaV0gPSAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRlbmFibGVkQ2FwYWJpbGl0aWVzID0ge307XHJcblxyXG5cdFx0Y29tcHJlc3NlZFRleHR1cmVGb3JtYXRzID0gbnVsbDtcclxuXHJcblx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xyXG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcclxuXHJcblx0XHRjdXJyZW50UHJvZ3JhbSA9IG51bGw7XHJcblxyXG5cdFx0Y3VycmVudEJsZW5kaW5nID0gbnVsbDtcclxuXHJcblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcclxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IG51bGw7XHJcblxyXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcclxuXHRcdGRlcHRoQnVmZmVyLnJlc2V0KCk7XHJcblx0XHRzdGVuY2lsQnVmZmVyLnJlc2V0KCk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHtcclxuXHJcblx0XHRidWZmZXJzOiB7XHJcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcclxuXHRcdFx0ZGVwdGg6IGRlcHRoQnVmZmVyLFxyXG5cdFx0XHRzdGVuY2lsOiBzdGVuY2lsQnVmZmVyXHJcblx0XHR9LFxyXG5cclxuXHRcdGluaXRBdHRyaWJ1dGVzOiBpbml0QXR0cmlidXRlcyxcclxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxyXG5cdFx0ZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcjogZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcixcclxuXHRcdGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOiBkaXNhYmxlVW51c2VkQXR0cmlidXRlcyxcclxuXHRcdGVuYWJsZTogZW5hYmxlLFxyXG5cdFx0ZGlzYWJsZTogZGlzYWJsZSxcclxuXHRcdGdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0czogZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzLFxyXG5cclxuXHRcdHVzZVByb2dyYW06IHVzZVByb2dyYW0sXHJcblxyXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxyXG5cdFx0c2V0TWF0ZXJpYWw6IHNldE1hdGVyaWFsLFxyXG5cclxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxyXG5cdFx0c2V0Q3VsbEZhY2U6IHNldEN1bGxGYWNlLFxyXG5cclxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxyXG5cdFx0c2V0UG9seWdvbk9mZnNldDogc2V0UG9seWdvbk9mZnNldCxcclxuXHJcblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXHJcblxyXG5cdFx0YWN0aXZlVGV4dHVyZTogYWN0aXZlVGV4dHVyZSxcclxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcclxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTJEOiBjb21wcmVzc2VkVGV4SW1hZ2UyRCxcclxuXHRcdHRleEltYWdlMkQ6IHRleEltYWdlMkQsXHJcblx0XHR0ZXhJbWFnZTNEOiB0ZXhJbWFnZTNELFxyXG5cclxuXHRcdHNjaXNzb3I6IHNjaXNzb3IsXHJcblx0XHR2aWV3cG9ydDogdmlld3BvcnQsXHJcblxyXG5cdFx0cmVzZXQ6IHJlc2V0XHJcblxyXG5cdH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTFRleHR1cmVzKF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8pIHtcclxuXHJcblx0dmFyIF92aWRlb1RleHR1cmVzID0gbmV3IFdlYWtNYXAoKTtcclxuXHR2YXIgX2NhbnZhcztcclxuXHJcblx0Ly8gY29yZG92YSBpT1MgKGFzIG9mIDUuMCkgc3RpbGwgdXNlcyBVSVdlYlZpZXcsIHdoaWNoIHByb3ZpZGVzIE9mZnNjcmVlbkNhbnZhcyxcclxuXHQvLyBhbHNvIE9mZnNjcmVlbkNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIiksIGJ1dCBub3QgT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKSFcclxuXHJcblx0dmFyIHVzZU9mZnNjcmVlbkNhbnZhcyA9IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnXHJcblx0XHQmJiAobmV3IE9mZnNjcmVlbkNhbnZhcygxLCAxKS5nZXRDb250ZXh0KFwiMmRcIikpICE9PSBudWxsO1xyXG5cclxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xyXG5cclxuXHRcdC8vIFVzZSBPZmZzY3JlZW5DYW52YXMgd2hlbiBhdmFpbGFibGUuIFNwZWNpYWxseSBuZWVkZWQgaW4gd2ViIHdvcmtlcnNcclxuXHJcblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cclxuXHRcdFx0bmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KSA6XHJcblx0XHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZXNpemVJbWFnZShpbWFnZSwgbmVlZHNQb3dlck9mVHdvLCBuZWVkc05ld0NhbnZhcywgbWF4U2l6ZSkge1xyXG5cclxuXHRcdHZhciBzY2FsZSA9IDE7XHJcblxyXG5cdFx0Ly8gaGFuZGxlIGNhc2UgaWYgdGV4dHVyZSBleGNlZWRzIG1heCBzaXplXHJcblxyXG5cdFx0aWYgKGltYWdlLndpZHRoID4gbWF4U2l6ZSB8fCBpbWFnZS5oZWlnaHQgPiBtYXhTaXplKSB7XHJcblxyXG5cdFx0XHRzY2FsZSA9IG1heFNpemUgLyBNYXRoLm1heChpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gb25seSBwZXJmb3JtIHJlc2l6ZSBpZiBuZWNlc3NhcnlcclxuXHJcblx0XHRpZiAoc2NhbGUgPCAxIHx8IG5lZWRzUG93ZXJPZlR3byA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0Ly8gb25seSBwZXJmb3JtIHJlc2l6ZSBmb3IgY2VydGFpbiBpbWFnZSB0eXBlc1xyXG5cclxuXHRcdFx0aWYgKCh0eXBlb2YgSFRNTEltYWdlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB8fFxyXG5cdFx0XHRcdCh0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHx8XHJcblx0XHRcdFx0KHR5cGVvZiBJbWFnZUJpdG1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCkpIHtcclxuXHJcblx0XHRcdFx0dmFyIGZsb29yID0gbmVlZHNQb3dlck9mVHdvID8gX01hdGguZmxvb3JQb3dlck9mVHdvIDogTWF0aC5mbG9vcjtcclxuXHJcblx0XHRcdFx0dmFyIHdpZHRoID0gZmxvb3Ioc2NhbGUgKiBpbWFnZS53aWR0aCk7XHJcblx0XHRcdFx0dmFyIGhlaWdodCA9IGZsb29yKHNjYWxlICogaW1hZ2UuaGVpZ2h0KTtcclxuXHJcblx0XHRcdFx0aWYgKF9jYW52YXMgPT09IHVuZGVmaW5lZCkgeyBfY2FudmFzID0gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpOyB9XHJcblxyXG5cdFx0XHRcdC8vIGN1YmUgdGV4dHVyZXMgY2FuJ3QgcmV1c2UgdGhlIHNhbWUgY2FudmFzXHJcblxyXG5cdFx0XHRcdHZhciBjYW52YXMgPSBuZWVkc05ld0NhbnZhcyA/IGNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KSA6IF9jYW52YXM7XHJcblxyXG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0XHRcdHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaGFzIGJlZW4gcmVzaXplZCBmcm9tICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKSB0byAoJyArIHdpZHRoICsgJ3gnICsgaGVpZ2h0ICsgJykuJyk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBjYW52YXM7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRpZiAoJ2RhdGEnIGluIGltYWdlKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBJbWFnZSBpbiBEYXRhVGV4dHVyZSBpcyB0b28gYmlnICgnICsgaW1hZ2Uud2lkdGggKyAneCcgKyBpbWFnZS5oZWlnaHQgKyAnKS4nKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gaW1hZ2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbWFnZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBpc1Bvd2VyT2ZUd28oaW1hZ2UpIHtcclxuXHJcblx0XHRyZXR1cm4gX01hdGguaXNQb3dlck9mVHdvKGltYWdlLndpZHRoKSAmJiBfTWF0aC5pc1Bvd2VyT2ZUd28oaW1hZ2UuaGVpZ2h0KTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB0ZXh0dXJlTmVlZHNQb3dlck9mVHdvKHRleHR1cmUpIHtcclxuXHJcblx0XHRpZiAoY2FwYWJpbGl0aWVzLmlzV2ViR0wyKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuXHRcdHJldHVybiAodGV4dHVyZS53cmFwUyAhPT0gQ2xhbXBUb0VkZ2VXcmFwcGluZyB8fCB0ZXh0dXJlLndyYXBUICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nKSB8fFxyXG5cdFx0XHQodGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcik7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKHRleHR1cmUsIHN1cHBvcnRzTWlwcykge1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyAmJiBzdXBwb3J0c01pcHMgJiZcclxuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcjtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZU1pcG1hcCh0YXJnZXQsIHRleHR1cmUsIHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcblx0XHRfZ2wuZ2VuZXJhdGVNaXBtYXAodGFyZ2V0KTtcclxuXHJcblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKTtcclxuXHJcblx0XHQvLyBOb3RlOiBNYXRoLmxvZyggeCApICogTWF0aC5MT0cyRSB1c2VkIGluc3RlYWQgb2YgTWF0aC5sb2cyKCB4ICkgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBieSBJRTExXHJcblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gTWF0aC5sb2coTWF0aC5tYXgod2lkdGgsIGhlaWdodCkpICogTWF0aC5MT0cyRTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXRJbnRlcm5hbEZvcm1hdChnbEZvcm1hdCwgZ2xUeXBlKSB7XHJcblxyXG5cdFx0aWYgKCFjYXBhYmlsaXRpZXMuaXNXZWJHTDIpIHsgcmV0dXJuIGdsRm9ybWF0OyB9XHJcblxyXG5cdFx0dmFyIGludGVybmFsRm9ybWF0ID0gZ2xGb3JtYXQ7XHJcblxyXG5cdFx0aWYgKGdsRm9ybWF0ID09PSA2NDAzKSB7XHJcblxyXG5cdFx0XHRpZiAoZ2xUeXBlID09PSA1MTI2KSB7IGludGVybmFsRm9ybWF0ID0gMzMzMjY7IH1cclxuXHRcdFx0aWYgKGdsVHlwZSA9PT0gNTEzMSkgeyBpbnRlcm5hbEZvcm1hdCA9IDMzMzI1OyB9XHJcblx0XHRcdGlmIChnbFR5cGUgPT09IDUxMjEpIHsgaW50ZXJuYWxGb3JtYXQgPSAzMzMyMTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZ2xGb3JtYXQgPT09IDY0MDcpIHtcclxuXHJcblx0XHRcdGlmIChnbFR5cGUgPT09IDUxMjYpIHsgaW50ZXJuYWxGb3JtYXQgPSAzNDgzNzsgfVxyXG5cdFx0XHRpZiAoZ2xUeXBlID09PSA1MTMxKSB7IGludGVybmFsRm9ybWF0ID0gMzQ4NDM7IH1cclxuXHRcdFx0aWYgKGdsVHlwZSA9PT0gNTEyMSkgeyBpbnRlcm5hbEZvcm1hdCA9IDMyODQ5OyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChnbEZvcm1hdCA9PT0gNjQwOCkge1xyXG5cclxuXHRcdFx0aWYgKGdsVHlwZSA9PT0gNTEyNikgeyBpbnRlcm5hbEZvcm1hdCA9IDM0ODM2OyB9XHJcblx0XHRcdGlmIChnbFR5cGUgPT09IDUxMzEpIHsgaW50ZXJuYWxGb3JtYXQgPSAzNDg0MjsgfVxyXG5cdFx0XHRpZiAoZ2xUeXBlID09PSA1MTIxKSB7IGludGVybmFsRm9ybWF0ID0gMzI4NTY7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGludGVybmFsRm9ybWF0ID09PSAzMzMyNSB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzMzMjYgfHxcclxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IDM0ODQyIHx8IGludGVybmFsRm9ybWF0ID09PSAzNDgzNikge1xyXG5cclxuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKGludGVybmFsRm9ybWF0ID09PSAzNDg0MyB8fCBpbnRlcm5hbEZvcm1hdCA9PT0gMzQ4MzcpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogRmxvYXRpbmcgcG9pbnQgdGV4dHVyZXMgd2l0aCBSR0IgZm9ybWF0IG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgUkdCQSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaW50ZXJuYWxGb3JtYXQ7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gRmFsbGJhY2sgZmlsdGVycyBmb3Igbm9uLXBvd2VyLW9mLTIgdGV4dHVyZXNcclxuXHJcblx0ZnVuY3Rpb24gZmlsdGVyRmFsbGJhY2soZikge1xyXG5cclxuXHRcdGlmIChmID09PSBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIpIHtcclxuXHJcblx0XHRcdHJldHVybiA5NzI4O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gOTcyOTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBvblRleHR1cmVEaXNwb3NlKGV2ZW50KSB7XHJcblxyXG5cdFx0dmFyIHRleHR1cmUgPSBldmVudC50YXJnZXQ7XHJcblxyXG5cdFx0dGV4dHVyZS5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSk7XHJcblxyXG5cdFx0ZGVhbGxvY2F0ZVRleHR1cmUodGV4dHVyZSk7XHJcblxyXG5cdFx0aWYgKHRleHR1cmUuaXNWaWRlb1RleHR1cmUpIHtcclxuXHJcblx0XHRcdF92aWRlb1RleHR1cmVzLmRlbGV0ZSh0ZXh0dXJlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMtLTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBvblJlbmRlclRhcmdldERpc3Bvc2UoZXZlbnQpIHtcclxuXHJcblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG5cclxuXHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25SZW5kZXJUYXJnZXREaXNwb3NlKTtcclxuXHJcblx0XHRkZWFsbG9jYXRlUmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0aW5mby5tZW1vcnkudGV4dHVyZXMtLTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlVGV4dHVyZSh0ZXh0dXJlKSB7XHJcblxyXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQodGV4dHVyZSk7XHJcblxyXG5cdFx0aWYgKHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0X2dsLmRlbGV0ZVRleHR1cmUodGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUpO1xyXG5cclxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKHRleHR1cmUpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSB7XHJcblxyXG5cdFx0dmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQpO1xyXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQocmVuZGVyVGFyZ2V0LnRleHR1cmUpO1xyXG5cclxuXHRcdGlmICghcmVuZGVyVGFyZ2V0KSB7IHJldHVybjsgfVxyXG5cclxuXHRcdGlmICh0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRfZ2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlKSB7XHJcblxyXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmRpc3Bvc2UoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHJcblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyW2ldKTtcclxuXHRcdFx0XHRpZiAocmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIpIHsgX2dsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlcltpXSk7IH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyKTtcclxuXHRcdFx0aWYgKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyKSB7IF9nbC5kZWxldGVSZW5kZXJidWZmZXIocmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUocmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JUZXh0dXJlKTtcclxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUocmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhTdGVuY2lsVGV4dHVyZSk7XHJcblxyXG5cdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtPSAyO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsVmlld0ZyYW1lYnVmZmVycy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlcihyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xWaWV3RnJhbWVidWZmZXJzW2ldKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cHJvcGVydGllcy5yZW1vdmUocmVuZGVyVGFyZ2V0LnRleHR1cmUpO1xyXG5cdFx0cHJvcGVydGllcy5yZW1vdmUocmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgdGV4dHVyZVVuaXRzID0gMDtcclxuXHJcblx0ZnVuY3Rpb24gcmVzZXRUZXh0dXJlVW5pdHMoKSB7XHJcblxyXG5cdFx0dGV4dHVyZVVuaXRzID0gMDtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBhbGxvY2F0ZVRleHR1cmVVbml0KCkge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlVW5pdCA9IHRleHR1cmVVbml0cztcclxuXHJcblx0XHRpZiAodGV4dHVyZVVuaXQgPj0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVzKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMVGV4dHVyZXM6IFRyeWluZyB0byB1c2UgJyArIHRleHR1cmVVbml0ICsgJyB0ZXh0dXJlIHVuaXRzIHdoaWxlIHRoaXMgR1BVIHN1cHBvcnRzIG9ubHkgJyArIGNhcGFiaWxpdGllcy5tYXhUZXh0dXJlcyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRleHR1cmVVbml0cyArPSAxO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlVW5pdDtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlMkQodGV4dHVyZSwgc2xvdCkge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KHRleHR1cmUpO1xyXG5cclxuXHRcdGlmICh0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlKSB7IHVwZGF0ZVZpZGVvVGV4dHVyZSh0ZXh0dXJlKTsgfVxyXG5cclxuXHRcdGlmICh0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uKSB7XHJcblxyXG5cdFx0XHR2YXIgaW1hZ2UgPSB0ZXh0dXJlLmltYWdlO1xyXG5cclxuXHRcdFx0aWYgKGltYWdlID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIG1hcmtlZCBmb3IgdXBkYXRlIGJ1dCBpbWFnZSBpcyB1bmRlZmluZWQnKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBtYXJrZWQgZm9yIHVwZGF0ZSBidXQgaW1hZ2UgaXMgaW5jb21wbGV0ZScpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0dXBsb2FkVGV4dHVyZSh0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKDMzOTg0ICsgc2xvdCk7XHJcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNTUzLCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTJEQXJyYXkodGV4dHVyZSwgc2xvdCkge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KHRleHR1cmUpO1xyXG5cclxuXHRcdGlmICh0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uKSB7XHJcblxyXG5cdFx0XHR1cGxvYWRUZXh0dXJlKHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlLCBzbG90KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKDMzOTg0ICsgc2xvdCk7XHJcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNTg2NiwgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUzRCh0ZXh0dXJlLCBzbG90KSB7XHJcblxyXG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQodGV4dHVyZSk7XHJcblxyXG5cdFx0aWYgKHRleHR1cmUudmVyc2lvbiA+IDAgJiYgdGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24pIHtcclxuXHJcblx0XHRcdHVwbG9hZFRleHR1cmUodGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoMzM5ODQgKyBzbG90KTtcclxuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKDMyODc5LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmUodGV4dHVyZSwgc2xvdCkge1xyXG5cclxuXHRcdGlmICh0ZXh0dXJlLmltYWdlLmxlbmd0aCAhPT0gNikgeyByZXR1cm47IH1cclxuXHJcblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKTtcclxuXHJcblx0XHRpZiAodGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbikge1xyXG5cclxuXHRcdFx0aW5pdFRleHR1cmUodGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUpO1xyXG5cclxuXHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSgzMzk4NCArIHNsb3QpO1xyXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUpO1xyXG5cclxuXHRcdFx0X2dsLnBpeGVsU3RvcmVpKDM3NDQwLCB0ZXh0dXJlLmZsaXBZKTtcclxuXHJcblx0XHRcdHZhciBpc0NvbXByZXNzZWQgPSAodGV4dHVyZSAmJiB0ZXh0dXJlLmlzQ29tcHJlc3NlZFRleHR1cmUpO1xyXG5cdFx0XHR2YXIgaXNEYXRhVGV4dHVyZSA9ICh0ZXh0dXJlLmltYWdlWzBdICYmIHRleHR1cmUuaW1hZ2VbMF0uaXNEYXRhVGV4dHVyZSk7XHJcblxyXG5cdFx0XHR2YXIgY3ViZUltYWdlID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cclxuXHRcdFx0XHRpZiAoIWlzQ29tcHJlc3NlZCAmJiAhaXNEYXRhVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0XHRcdGN1YmVJbWFnZVtpXSA9IHJlc2l6ZUltYWdlKHRleHR1cmUuaW1hZ2VbaV0sIGZhbHNlLCB0cnVlLCBjYXBhYmlsaXRpZXMubWF4Q3ViZW1hcFNpemUpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGN1YmVJbWFnZVtpXSA9IGlzRGF0YVRleHR1cmUgPyB0ZXh0dXJlLmltYWdlW2ldLmltYWdlIDogdGV4dHVyZS5pbWFnZVtpXTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGltYWdlID0gY3ViZUltYWdlWzBdLFxyXG5cdFx0XHRcdHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byhpbWFnZSkgfHwgY2FwYWJpbGl0aWVzLmlzV2ViR0wyLFxyXG5cdFx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCh0ZXh0dXJlLmZvcm1hdCksXHJcblx0XHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCh0ZXh0dXJlLnR5cGUpLFxyXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdChnbEZvcm1hdCwgZ2xUeXBlKTtcclxuXHJcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKDM0MDY3LCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMpO1xyXG5cclxuXHRcdFx0dmFyIG1pcG1hcHM7XHJcblxyXG5cdFx0XHRpZiAoaXNDb21wcmVzc2VkKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0bWlwbWFwcyA9IGN1YmVJbWFnZVtpXS5taXBtYXBzO1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbWlwbWFwcy5sZW5ndGg7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIG1pcG1hcCA9IG1pcG1hcHNbal07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFJHQkZvcm1hdCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoc3RhdGUuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkuaW5kZXhPZihnbEZvcm1hdCkgPiAtIDEpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCgzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgbWlwbWFwLmRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogQXR0ZW1wdCB0byBsb2FkIHVuc3VwcG9ydGVkIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXQgaW4gLnNldFRleHR1cmVDdWJlKCknKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0bWlwbWFwcyA9IHRleHR1cmUubWlwbWFwcztcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoaXNEYXRhVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGN1YmVJbWFnZVtpXS53aWR0aCwgY3ViZUltYWdlW2ldLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgY3ViZUltYWdlW2ldLmRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBtaXBtYXAgPSBtaXBtYXBzW2pdO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVtpXS5pbWFnZTtcclxuXHJcblx0XHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNDA2OSArIGksIGogKyAxLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXBJbWFnZS53aWR0aCwgbWlwbWFwSW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXBJbWFnZS5kYXRhKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNDA2OSArIGksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGN1YmVJbWFnZVtpXSk7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0dmFyIG1pcG1hcCA9IG1pcG1hcHNbal07XHJcblxyXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoMzQwNjkgKyBpLCBqICsgMSwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmltYWdlW2ldKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyh0ZXh0dXJlLCBzdXBwb3J0c01pcHMpKSB7XHJcblxyXG5cdFx0XHRcdC8vIFdlIGFzc3VtZSBpbWFnZXMgZm9yIGN1YmUgbWFwIGhhdmUgdGhlIHNhbWUgc2l6ZS5cclxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCgzNDA2NywgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZS5vblVwZGF0ZSkgeyB0ZXh0dXJlLm9uVXBkYXRlKHRleHR1cmUpOyB9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoMzM5ODQgKyBzbG90KTtcclxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0VGV4dHVyZUN1YmVEeW5hbWljKHRleHR1cmUsIHNsb3QpIHtcclxuXHJcblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKDMzOTg0ICsgc2xvdCk7XHJcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNDA2NywgcHJvcGVydGllcy5nZXQodGV4dHVyZSkuX193ZWJnbFRleHR1cmUpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlLCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMpIHtcclxuXHJcblx0XHR2YXIgZXh0ZW5zaW9uO1xyXG5cclxuXHRcdGlmIChzdXBwb3J0c01pcHMpIHtcclxuXHJcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCAxMDI0MiwgdXRpbHMuY29udmVydCh0ZXh0dXJlLndyYXBTKSk7XHJcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCAxMDI0MywgdXRpbHMuY29udmVydCh0ZXh0dXJlLndyYXBUKSk7XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZVR5cGUgPT09IDMyODc5IHx8IHRleHR1cmVUeXBlID09PSAzNTg2Nikge1xyXG5cclxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgMzI4ODIsIHV0aWxzLmNvbnZlcnQodGV4dHVyZS53cmFwUikpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIDEwMjQwLCB1dGlscy5jb252ZXJ0KHRleHR1cmUubWFnRmlsdGVyKSk7XHJcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKHRleHR1cmVUeXBlLCAxMDI0MSwgdXRpbHMuY29udmVydCh0ZXh0dXJlLm1pbkZpbHRlcikpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgMTAyNDIsIDMzMDcxKTtcclxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIDEwMjQzLCAzMzA3MSk7XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZVR5cGUgPT09IDMyODc5IHx8IHRleHR1cmVUeXBlID09PSAzNTg2Nikge1xyXG5cclxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgMzI4ODIsIDMzMDcxKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUud3JhcFMgYW5kIFRleHR1cmUud3JhcFQgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nLicpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkodGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJGYWxsYmFjayh0ZXh0dXJlLm1hZ0ZpbHRlcikpO1xyXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSh0ZXh0dXJlVHlwZSwgMTAyNDEsIGZpbHRlckZhbGxiYWNrKHRleHR1cmUubWluRmlsdGVyKSk7XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcikge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgaXMgbm90IHBvd2VyIG9mIHR3by4gVGV4dHVyZS5taW5GaWx0ZXIgc2hvdWxkIGJlIHNldCB0byBUSFJFRS5OZWFyZXN0RmlsdGVyIG9yIFRIUkVFLkxpbmVhckZpbHRlci4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpO1xyXG5cclxuXHRcdGlmIChleHRlbnNpb24pIHtcclxuXHJcblx0XHRcdGlmICh0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCgnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJykgPT09IG51bGwpIHsgcmV0dXJuOyB9XHJcblx0XHRcdGlmICh0ZXh0dXJlLnR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgKGNhcGFiaWxpdGllcy5pc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCgnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInKSkgPT09IG51bGwpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZS5hbmlzb3Ryb3B5ID4gMSB8fCBwcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKS5fX2N1cnJlbnRBbmlzb3Ryb3B5KSB7XHJcblxyXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKHRleHR1cmVUeXBlLCBleHRlbnNpb24uVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIE1hdGgubWluKHRleHR1cmUuYW5pc290cm9weSwgY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKSkpO1xyXG5cdFx0XHRcdHByb3BlcnRpZXMuZ2V0KHRleHR1cmUpLl9fY3VycmVudEFuaXNvdHJvcHkgPSB0ZXh0dXJlLmFuaXNvdHJvcHk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXRUZXh0dXJlKHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlKSB7XHJcblxyXG5cdFx0aWYgKHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID0gdHJ1ZTtcclxuXHJcblx0XHRcdHRleHR1cmUuYWRkRXZlbnRMaXN0ZW5lcignZGlzcG9zZScsIG9uVGV4dHVyZURpc3Bvc2UpO1xyXG5cclxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cclxuXHRcdFx0aW5mby5tZW1vcnkudGV4dHVyZXMrKztcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdXBsb2FkVGV4dHVyZSh0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCkge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlVHlwZSA9IDM1NTM7XHJcblxyXG5cdFx0aWYgKHRleHR1cmUuaXNEYXRhVGV4dHVyZTJEQXJyYXkpIHsgdGV4dHVyZVR5cGUgPSAzNTg2NjsgfVxyXG5cdFx0aWYgKHRleHR1cmUuaXNEYXRhVGV4dHVyZTNEKSB7IHRleHR1cmVUeXBlID0gMzI4Nzk7IH1cclxuXHJcblx0XHRpbml0VGV4dHVyZSh0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSk7XHJcblxyXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSgzMzk4NCArIHNsb3QpO1xyXG5cdFx0c3RhdGUuYmluZFRleHR1cmUodGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlKTtcclxuXHJcblx0XHRfZ2wucGl4ZWxTdG9yZWkoMzc0NDAsIHRleHR1cmUuZmxpcFkpO1xyXG5cdFx0X2dsLnBpeGVsU3RvcmVpKDM3NDQxLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEpO1xyXG5cdFx0X2dsLnBpeGVsU3RvcmVpKDMzMTcsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50KTtcclxuXHJcblx0XHR2YXIgbmVlZHNQb3dlck9mVHdvID0gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byh0ZXh0dXJlKSAmJiBpc1Bvd2VyT2ZUd28odGV4dHVyZS5pbWFnZSkgPT09IGZhbHNlO1xyXG5cdFx0dmFyIGltYWdlID0gcmVzaXplSW1hZ2UodGV4dHVyZS5pbWFnZSwgbmVlZHNQb3dlck9mVHdvLCBmYWxzZSwgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplKTtcclxuXHJcblx0XHR2YXIgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvKGltYWdlKSB8fCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIsXHJcblx0XHRcdGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCh0ZXh0dXJlLmZvcm1hdCksXHJcblx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQodGV4dHVyZS50eXBlKSxcclxuXHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KGdsRm9ybWF0LCBnbFR5cGUpO1xyXG5cclxuXHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKHRleHR1cmVUeXBlLCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMpO1xyXG5cclxuXHRcdHZhciBtaXBtYXAsIG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XHJcblxyXG5cdFx0aWYgKHRleHR1cmUuaXNEZXB0aFRleHR1cmUpIHtcclxuXHJcblx0XHRcdC8vIHBvcHVsYXRlIGRlcHRoIHRleHR1cmUgd2l0aCBkdW1teSBkYXRhXHJcblxyXG5cdFx0XHRnbEludGVybmFsRm9ybWF0ID0gNjQwMjtcclxuXHJcblx0XHRcdGlmICh0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSkge1xyXG5cclxuXHRcdFx0XHRpZiAoIWNhcGFiaWxpdGllcy5pc1dlYkdMMikgeyB0aHJvdyBuZXcgRXJyb3IoJ0Zsb2F0IERlcHRoIFRleHR1cmUgb25seSBzdXBwb3J0ZWQgaW4gV2ViR0wyLjAnKTsgfVxyXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoY2FwYWJpbGl0aWVzLmlzV2ViR0wyKSB7XHJcblxyXG5cdFx0XHRcdC8vIFdlYkdMIDIuMCByZXF1aXJlcyBzaWduZWQgaW50ZXJuYWxmb3JtYXQgZm9yIGdsVGV4SW1hZ2UyRFxyXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzMzE4OTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMikge1xyXG5cclxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgSU5WQUxJRF9PUEVSQVRJT04gaXMgZ2VuZXJhdGVkIGJ5IHRleEltYWdlMkQgaWYgZm9ybWF0IGFuZCBpbnRlcm5hbGZvcm1hdCBhcmVcclxuXHRcdFx0XHQvLyBERVBUSF9DT01QT05FTlQgYW5kIHR5cGUgaXMgbm90IFVOU0lHTkVEX1NIT1JUIG9yIFVOU0lHTkVEX0lOVFxyXG5cdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxyXG5cdFx0XHRcdGlmICh0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkU2hvcnRUeXBlICYmIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnRUeXBlKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRTaG9ydFR5cGUgb3IgVW5zaWduZWRJbnRUeXBlIGZvciBEZXB0aEZvcm1hdCBEZXB0aFRleHR1cmUuJyk7XHJcblxyXG5cdFx0XHRcdFx0dGV4dHVyZS50eXBlID0gVW5zaWduZWRTaG9ydFR5cGU7XHJcblx0XHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KHRleHR1cmUudHlwZSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIERlcHRoIHN0ZW5jaWwgdGV4dHVyZXMgbmVlZCB0aGUgREVQVEhfU1RFTkNJTCBpbnRlcm5hbCBmb3JtYXRcclxuXHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXHJcblx0XHRcdGlmICh0ZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNDA0MTtcclxuXHJcblx0XHRcdFx0Ly8gVGhlIGVycm9yIElOVkFMSURfT1BFUkFUSU9OIGlzIGdlbmVyYXRlZCBieSB0ZXhJbWFnZTJEIGlmIGZvcm1hdCBhbmQgaW50ZXJuYWxmb3JtYXQgYXJlXHJcblx0XHRcdFx0Ly8gREVQVEhfU1RFTkNJTCBhbmQgdHlwZSBpcyBub3QgVU5TSUdORURfSU5UXzI0XzhfV0VCR0wuXHJcblx0XHRcdFx0Ly8gKGh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3JlZ2lzdHJ5L3dlYmdsL2V4dGVuc2lvbnMvV0VCR0xfZGVwdGhfdGV4dHVyZS8pXHJcblx0XHRcdFx0aWYgKHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnQyNDhUeXBlKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRJbnQyNDhUeXBlIGZvciBEZXB0aFN0ZW5jaWxGb3JtYXQgRGVwdGhUZXh0dXJlLicpO1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUudHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcclxuXHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQodGV4dHVyZS50eXBlKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHRleHR1cmUuaXNEYXRhVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0Ly8gdXNlIG1hbnVhbGx5IGNyZWF0ZWQgbWlwbWFwcyBpZiBhdmFpbGFibGVcclxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXHJcblx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xyXG5cclxuXHRcdFx0aWYgKG1pcG1hcHMubGVuZ3RoID4gMCAmJiBzdXBwb3J0c01pcHMpIHtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1tpXTtcclxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhKTtcclxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gMDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gbWlwbWFwcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdG1pcG1hcCA9IG1pcG1hcHNbaV07XHJcblxyXG5cdFx0XHRcdGlmICh0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHN0YXRlLmdldENvbXByZXNzZWRUZXh0dXJlRm9ybWF0cygpLmluZGV4T2YoZ2xGb3JtYXQpID4gLSAxKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCgzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0fSBlbHNlIGlmICh0ZXh0dXJlLmlzRGF0YVRleHR1cmUyREFycmF5KSB7XHJcblxyXG5cdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKDM1ODY2LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSk7XHJcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAodGV4dHVyZS5pc0RhdGFUZXh0dXJlM0QpIHtcclxuXHJcblx0XHRcdHN0YXRlLnRleEltYWdlM0QoMzI4NzksIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGltYWdlLmRlcHRoLCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBpbWFnZS5kYXRhKTtcclxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIHJlZ3VsYXIgVGV4dHVyZSAoaW1hZ2UsIHZpZGVvLCBjYW52YXMpXHJcblxyXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxyXG5cdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcclxuXHRcdFx0Ly8gc2V0IDAgbGV2ZWwgbWlwbWFwIGFuZCB0aGVuIHVzZSBHTCB0byBnZW5lcmF0ZSBvdGhlciBtaXBtYXAgbGV2ZWxzXHJcblxyXG5cdFx0XHRpZiAobWlwbWFwcy5sZW5ndGggPiAwICYmIHN1cHBvcnRzTWlwcykge1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzW2ldO1xyXG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCgzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXApO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XHJcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoIC0gMTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoMzU1MywgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UpO1xyXG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKHRleHR1cmUsIHN1cHBvcnRzTWlwcykpIHtcclxuXHJcblx0XHRcdGdlbmVyYXRlTWlwbWFwKDM1NTMsIHRleHR1cmUsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XHJcblxyXG5cdFx0aWYgKHRleHR1cmUub25VcGRhdGUpIHsgdGV4dHVyZS5vblVwZGF0ZSh0ZXh0dXJlKTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIFJlbmRlciB0YXJnZXRzXHJcblxyXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIHRhcmdldCB0ZXh0dXJlIGFuZCBiaW5kIGl0IHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcclxuXHRmdW5jdGlvbiBzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZShmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0KSB7XHJcblxyXG5cdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydChyZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQpO1xyXG5cdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQocmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSk7XHJcblx0XHR2YXIgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KGdsRm9ybWF0LCBnbFR5cGUpO1xyXG5cdFx0c3RhdGUudGV4SW1hZ2UyRCh0ZXh0dXJlVGFyZ2V0LCAwLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG51bGwpO1xyXG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlcigzNjE2MCwgZnJhbWVidWZmZXIpO1xyXG5cdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKDM2MTYwLCBhdHRhY2htZW50LCB0ZXh0dXJlVGFyZ2V0LCBwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQudGV4dHVyZSkuX193ZWJnbFRleHR1cmUsIDApO1xyXG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlcigzNjE2MCwgbnVsbCk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gU2V0dXAgc3RvcmFnZSBmb3IgaW50ZXJuYWwgZGVwdGgvc3RlbmNpbCBidWZmZXJzIGFuZCBiaW5kIHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcclxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UocmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIGlzTXVsdGlzYW1wbGUpIHtcclxuXHJcblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlcigzNjE2MSwgcmVuZGVyYnVmZmVyKTtcclxuXHJcblx0XHRpZiAocmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmICFyZW5kZXJUYXJnZXQuc3RlbmNpbEJ1ZmZlcikge1xyXG5cclxuXHRcdFx0aWYgKGlzTXVsdGlzYW1wbGUpIHtcclxuXHJcblx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKHJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoMzYxNjEsIHNhbXBsZXMsIDMzMTg5LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoMzYxNjEsIDMzMTg5LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKDM2MTYwLCAzNjA5NiwgMzYxNjEsIHJlbmRlcmJ1ZmZlcik7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChyZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgJiYgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIpIHtcclxuXHJcblx0XHRcdGlmIChpc011bHRpc2FtcGxlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyhyZW5kZXJUYXJnZXQpO1xyXG5cclxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKDM2MTYxLCBzYW1wbGVzLCAzNTA1NiwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0KTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKDM2MTYxLCAzNDA0MSwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoMzYxNjAsIDMzMzA2LCAzNjE2MSwgcmVuZGVyYnVmZmVyKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydChyZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQpO1xyXG5cdFx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydChyZW5kZXJUYXJnZXQudGV4dHVyZS50eXBlKTtcclxuXHRcdFx0dmFyIGdsSW50ZXJuYWxGb3JtYXQgPSBnZXRJbnRlcm5hbEZvcm1hdChnbEZvcm1hdCwgZ2xUeXBlKTtcclxuXHJcblx0XHRcdGlmIChpc011bHRpc2FtcGxlKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzYW1wbGVzID0gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyhyZW5kZXJUYXJnZXQpO1xyXG5cclxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoMzYxNjEsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF9nbC5iaW5kUmVuZGVyYnVmZmVyKDM2MTYxLCBudWxsKTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBTZXR1cCByZXNvdXJjZXMgZm9yIGEgRGVwdGggVGV4dHVyZSBmb3IgYSBGQk8gKG5lZWRzIGFuIGV4dGVuc2lvbilcclxuXHRmdW5jdGlvbiBzZXR1cERlcHRoVGV4dHVyZShmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0KSB7XHJcblxyXG5cdFx0dmFyIGlzQ3ViZSA9IChyZW5kZXJUYXJnZXQgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlKTtcclxuXHRcdGlmIChpc0N1YmUpIHsgdGhyb3cgbmV3IEVycm9yKCdEZXB0aCBUZXh0dXJlIHdpdGggY3ViZSByZW5kZXIgdGFyZ2V0cyBpcyBub3Qgc3VwcG9ydGVkJyk7IH1cclxuXHJcblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKDM2MTYwLCBmcmFtZWJ1ZmZlcik7XHJcblxyXG5cdFx0aWYgKCEocmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlKSkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuRGVwdGhUZXh0dXJlJyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHVwbG9hZCBhbiBlbXB0eSBkZXB0aCB0ZXh0dXJlIHdpdGggZnJhbWVidWZmZXIgc2l6ZVxyXG5cdFx0aWYgKCFwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlKS5fX3dlYmdsVGV4dHVyZSB8fFxyXG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoICE9PSByZW5kZXJUYXJnZXQud2lkdGggfHxcclxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgIT09IHJlbmRlclRhcmdldC5oZWlnaHQpIHtcclxuXHJcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XHJcblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcclxuXHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHNldFRleHR1cmUyRChyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLCAwKTtcclxuXHJcblx0XHR2YXIgd2ViZ2xEZXB0aFRleHR1cmUgPSBwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtcclxuXHJcblx0XHRpZiAocmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoMzYxNjAsIDM2MDk2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmZvcm1hdCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0Jyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIFNldHVwIEdMIHJlc291cmNlcyBmb3IgYSBub24tdGV4dHVyZSBkZXB0aCBidWZmZXJcclxuXHRmdW5jdGlvbiBzZXR1cERlcHRoUmVuZGVyYnVmZmVyKHJlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQocmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR2YXIgaXNDdWJlID0gKHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA9PT0gdHJ1ZSk7XHJcblxyXG5cdFx0aWYgKHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUpIHtcclxuXHJcblx0XHRcdGlmIChpc0N1YmUpIHsgdGhyb3cgbmV3IEVycm9yKCd0YXJnZXQuZGVwdGhUZXh0dXJlIG5vdCBzdXBwb3J0ZWQgaW4gQ3ViZSByZW5kZXIgdGFyZ2V0cycpOyB9XHJcblxyXG5cdFx0XHRzZXR1cERlcHRoVGV4dHVyZShyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0aWYgKGlzQ3ViZSkge1xyXG5cclxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyW2ldKTtcclxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyW2ldID0gX2dsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xyXG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyW2ldLCByZW5kZXJUYXJnZXQpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlcik7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XHJcblx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyLCByZW5kZXJUYXJnZXQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKDM2MTYwLCBudWxsKTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBTZXQgdXAgR0wgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyIHRhcmdldFxyXG5cdGZ1bmN0aW9uIHNldHVwUmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQocmVuZGVyVGFyZ2V0KTtcclxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KHJlbmRlclRhcmdldC50ZXh0dXJlKTtcclxuXHJcblx0XHRyZW5kZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSk7XHJcblxyXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cclxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzKys7XHJcblxyXG5cdFx0dmFyIGlzQ3ViZSA9IChyZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUgPT09IHRydWUpO1xyXG5cdFx0dmFyIGlzTXVsdGlzYW1wbGUgPSAocmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCA9PT0gdHJ1ZSk7XHJcblx0XHR2YXIgaXNNdWx0aXZpZXcgPSAocmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXZpZXdSZW5kZXJUYXJnZXQgPT09IHRydWUpO1xyXG5cdFx0dmFyIHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byhyZW5kZXJUYXJnZXQpIHx8IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcclxuXHJcblx0XHQvLyBTZXR1cCBmcmFtZWJ1ZmZlclxyXG5cclxuXHRcdGlmIChpc0N1YmUpIHtcclxuXHJcblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cclxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlcltpXSA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xyXG5cclxuXHRcdFx0aWYgKGlzTXVsdGlzYW1wbGUpIHtcclxuXHJcblx0XHRcdFx0aWYgKGNhcGFiaWxpdGllcy5pc1dlYkdMMikge1xyXG5cclxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcblx0XHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcclxuXHJcblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlcigzNjE2MSwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIpO1xyXG5cdFx0XHRcdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydChyZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQpO1xyXG5cdFx0XHRcdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQocmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSk7XHJcblx0XHRcdFx0XHR2YXIgZ2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KGdsRm9ybWF0LCBnbFR5cGUpO1xyXG5cdFx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKHJlbmRlclRhcmdldCk7XHJcblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQpO1xyXG5cclxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyKTtcclxuXHRcdFx0XHRcdF9nbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcigzNjE2MCwgMzYwNjQsIDM2MTYxLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlcik7XHJcblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlcigzNjE2MSwgbnVsbCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlcikge1xyXG5cclxuXHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XHJcblx0XHRcdFx0XHRcdHNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZShyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlcigzNjE2MCwgbnVsbCk7XHJcblxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCBjYW4gb25seSBiZSB1c2VkIHdpdGggV2ViR0wyLicpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGlzTXVsdGl2aWV3KSB7XHJcblxyXG5cdFx0XHRcdHZhciB3aWR0aCA9IHJlbmRlclRhcmdldC53aWR0aDtcclxuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcclxuXHRcdFx0XHR2YXIgbnVtVmlld3MgPSByZW5kZXJUYXJnZXQubnVtVmlld3M7XHJcblxyXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyKTtcclxuXHJcblx0XHRcdFx0dmFyIGV4dCA9IGV4dGVuc2lvbnMuZ2V0KCdPVlJfbXVsdGl2aWV3MicpO1xyXG5cclxuXHRcdFx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyArPSAyO1xyXG5cclxuXHRcdFx0XHR2YXIgY29sb3JUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcclxuXHRcdFx0XHRfZ2wuYmluZFRleHR1cmUoMzU4NjYsIGNvbG9yVGV4dHVyZSk7XHJcblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoMzU4NjYsIDEwMjQwLCA5NzI4KTtcclxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSgzNTg2NiwgMTAyNDEsIDk3MjgpO1xyXG5cdFx0XHRcdF9nbC50ZXhJbWFnZTNEKDM1ODY2LCAwLCAzMjg1Niwgd2lkdGgsIGhlaWdodCwgbnVtVmlld3MsIDAsIDY0MDgsIDUxMjEsIG51bGwpO1xyXG5cdFx0XHRcdGV4dC5mcmFtZWJ1ZmZlclRleHR1cmVNdWx0aXZpZXdPVlIoMzYxNjAsIDM2MDY0LCBjb2xvclRleHR1cmUsIDAsIDAsIG51bVZpZXdzKTtcclxuXHJcblx0XHRcdFx0dmFyIGRlcHRoU3RlbmNpbFRleHR1cmUgPSBfZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cdFx0XHRcdF9nbC5iaW5kVGV4dHVyZSgzNTg2NiwgZGVwdGhTdGVuY2lsVGV4dHVyZSk7XHJcblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoMzU4NjYsIDEwMjQwLCA5NzI4KTtcclxuXHRcdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSgzNTg2NiwgMTAyNDEsIDk3MjgpO1xyXG5cdFx0XHRcdF9nbC50ZXhJbWFnZTNEKDM1ODY2LCAwLCAzNTA1Niwgd2lkdGgsIGhlaWdodCwgbnVtVmlld3MsIDAsIDM0MDQxLCAzNDA0MiwgbnVsbCk7XHJcblx0XHRcdFx0ZXh0LmZyYW1lYnVmZmVyVGV4dHVyZU11bHRpdmlld09WUigzNjE2MCwgMzMzMDYsIGRlcHRoU3RlbmNpbFRleHR1cmUsIDAsIDAsIG51bVZpZXdzKTtcclxuXHJcblx0XHRcdFx0dmFyIHZpZXdGcmFtZWJ1ZmZlcnMgPSBuZXcgQXJyYXkobnVtVmlld3MpO1xyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVmlld3M7ICsraSkge1xyXG5cclxuXHRcdFx0XHRcdHZpZXdGcmFtZWJ1ZmZlcnNbaV0gPSBfZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcclxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIHZpZXdGcmFtZWJ1ZmZlcnNbaV0pO1xyXG5cdFx0XHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZUxheWVyKDM2MTYwLCAzNjA2NCwgY29sb3JUZXh0dXJlLCAwLCBpKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclRleHR1cmUgPSBjb2xvclRleHR1cmU7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhTdGVuY2lsVGV4dHVyZSA9IGRlcHRoU3RlbmNpbFRleHR1cmU7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsVmlld0ZyYW1lYnVmZmVycyA9IHZpZXdGcmFtZWJ1ZmZlcnM7XHJcblxyXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIG51bGwpO1xyXG5cdFx0XHRcdF9nbC5iaW5kVGV4dHVyZSgzNTg2NiwgbnVsbCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFNldHVwIGNvbG9yIGJ1ZmZlclxyXG5cclxuXHRcdGlmIChpc0N1YmUpIHtcclxuXHJcblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKDM0MDY3LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSk7XHJcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKDM0MDY3LCByZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyW2ldLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNDA2OSArIGkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyhyZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzKSkge1xyXG5cclxuXHRcdFx0XHRnZW5lcmF0ZU1pcG1hcCgzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNDA2NywgbnVsbCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICghaXNNdWx0aXZpZXcpIHtcclxuXHJcblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlKTtcclxuXHRcdFx0c2V0VGV4dHVyZVBhcmFtZXRlcnMoMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyk7XHJcblx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNTUzKTtcclxuXHJcblx0XHRcdGlmICh0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMocmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcykpIHtcclxuXHJcblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSgzNTUzLCBudWxsKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVyc1xyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIpIHtcclxuXHJcblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIocmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKHJlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XHJcblx0XHR2YXIgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvKHJlbmRlclRhcmdldCkgfHwgY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xyXG5cclxuXHRcdGlmICh0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHModGV4dHVyZSwgc3VwcG9ydHNNaXBzKSkge1xyXG5cclxuXHRcdFx0dmFyIHRhcmdldCA9IHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSA/IDM0MDY3IDogMzU1MztcclxuXHRcdFx0dmFyIHdlYmdsVGV4dHVyZSA9IHByb3BlcnRpZXMuZ2V0KHRleHR1cmUpLl9fd2ViZ2xUZXh0dXJlO1xyXG5cclxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUodGFyZ2V0LCB3ZWJnbFRleHR1cmUpO1xyXG5cdFx0XHRnZW5lcmF0ZU1pcG1hcCh0YXJnZXQsIHRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCk7XHJcblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKHRhcmdldCwgbnVsbCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KSB7XHJcblxyXG5cdFx0XHRpZiAoY2FwYWJpbGl0aWVzLmlzV2ViR0wyKSB7XHJcblxyXG5cdFx0XHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQocmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlcigzNjAwOCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIpO1xyXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYwMDksIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyKTtcclxuXHJcblx0XHRcdFx0dmFyIHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xyXG5cdFx0XHRcdHZhciBoZWlnaHQgPSByZW5kZXJUYXJnZXQuaGVpZ2h0O1xyXG5cdFx0XHRcdHZhciBtYXNrID0gMTYzODQ7XHJcblxyXG5cdFx0XHRcdGlmIChyZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIpIHsgbWFzayB8PSAyNTY7IH1cclxuXHRcdFx0XHRpZiAocmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIpIHsgbWFzayB8PSAxMDI0OyB9XHJcblxyXG5cdFx0XHRcdF9nbC5ibGl0RnJhbWVidWZmZXIoMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCwgbWFzaywgOTcyOCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMi4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyhyZW5kZXJUYXJnZXQpIHtcclxuXHJcblx0XHRyZXR1cm4gKGNhcGFiaWxpdGllcy5pc1dlYkdMMiAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KSA/XHJcblx0XHRcdE1hdGgubWluKGNhcGFiaWxpdGllcy5tYXhTYW1wbGVzLCByZW5kZXJUYXJnZXQuc2FtcGxlcykgOiAwO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZVZpZGVvVGV4dHVyZSh0ZXh0dXJlKSB7XHJcblxyXG5cdFx0dmFyIGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgdGhlIGxhc3QgZnJhbWUgd2UgdXBkYXRlZCB0aGUgVmlkZW9UZXh0dXJlXHJcblxyXG5cdFx0aWYgKF92aWRlb1RleHR1cmVzLmdldCh0ZXh0dXJlKSAhPT0gZnJhbWUpIHtcclxuXHJcblx0XHRcdF92aWRlb1RleHR1cmVzLnNldCh0ZXh0dXJlLCBmcmFtZSk7XHJcblx0XHRcdHRleHR1cmUudXBkYXRlKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcblxyXG5cdHZhciB3YXJuZWRUZXh0dXJlMkQgPSBmYWxzZTtcclxuXHR2YXIgd2FybmVkVGV4dHVyZUN1YmUgPSBmYWxzZTtcclxuXHJcblx0ZnVuY3Rpb24gc2FmZVNldFRleHR1cmUyRCh0ZXh0dXJlLCBzbG90KSB7XHJcblxyXG5cdFx0aWYgKHRleHR1cmUgJiYgdGV4dHVyZS5pc1dlYkdMUmVuZGVyVGFyZ2V0KSB7XHJcblxyXG5cdFx0XHRpZiAod2FybmVkVGV4dHVyZTJEID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFRleHR1cmVzLnNhZmVTZXRUZXh0dXJlMkQ6IGRvbid0IHVzZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIpO1xyXG5cdFx0XHRcdHdhcm5lZFRleHR1cmUyRCA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzZXRUZXh0dXJlMkQodGV4dHVyZSwgc2xvdCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2FmZVNldFRleHR1cmVDdWJlKHRleHR1cmUsIHNsb3QpIHtcclxuXHJcblx0XHRpZiAodGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlKSB7XHJcblxyXG5cdFx0XHRpZiAod2FybmVkVGV4dHVyZUN1YmUgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMVGV4dHVyZXMuc2FmZVNldFRleHR1cmVDdWJlOiBkb24ndCB1c2UgY3ViZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIpO1xyXG5cdFx0XHRcdHdhcm5lZFRleHR1cmVDdWJlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRleHR1cmUgPSB0ZXh0dXJlLnRleHR1cmU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGN1cnJlbnRseSByZWx5aW5nIG9uIHRoZSBmYWN0IHRoYXQgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgaXMgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxyXG5cdFx0Ly8gVE9ETzogdW5pZnkgdGhlc2UgY29kZSBwYXRoc1xyXG5cdFx0aWYgKCh0ZXh0dXJlICYmIHRleHR1cmUuaXNDdWJlVGV4dHVyZSkgfHxcclxuXHRcdFx0KEFycmF5LmlzQXJyYXkodGV4dHVyZS5pbWFnZSkgJiYgdGV4dHVyZS5pbWFnZS5sZW5ndGggPT09IDYpKSB7XHJcblxyXG5cdFx0XHQvLyBDb21wcmVzc2VkVGV4dHVyZSBjYW4gaGF2ZSBBcnJheSBpbiBpbWFnZSA6L1xyXG5cclxuXHRcdFx0Ly8gdGhpcyBmdW5jdGlvbiBhbG9uZSBzaG91bGQgdGFrZSBjYXJlIG9mIGN1YmUgdGV4dHVyZXNcclxuXHRcdFx0c2V0VGV4dHVyZUN1YmUodGV4dHVyZSwgc2xvdCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGFzc3VtZWQ6IHRleHR1cmUgcHJvcGVydHkgb2YgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlXHJcblx0XHRcdHNldFRleHR1cmVDdWJlRHluYW1pYyh0ZXh0dXJlLCBzbG90KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly9cclxuXHJcblx0dGhpcy5hbGxvY2F0ZVRleHR1cmVVbml0ID0gYWxsb2NhdGVUZXh0dXJlVW5pdDtcclxuXHR0aGlzLnJlc2V0VGV4dHVyZVVuaXRzID0gcmVzZXRUZXh0dXJlVW5pdHM7XHJcblxyXG5cdHRoaXMuc2V0VGV4dHVyZTJEID0gc2V0VGV4dHVyZTJEO1xyXG5cdHRoaXMuc2V0VGV4dHVyZTJEQXJyYXkgPSBzZXRUZXh0dXJlMkRBcnJheTtcclxuXHR0aGlzLnNldFRleHR1cmUzRCA9IHNldFRleHR1cmUzRDtcclxuXHR0aGlzLnNldFRleHR1cmVDdWJlID0gc2V0VGV4dHVyZUN1YmU7XHJcblx0dGhpcy5zZXRUZXh0dXJlQ3ViZUR5bmFtaWMgPSBzZXRUZXh0dXJlQ3ViZUR5bmFtaWM7XHJcblx0dGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0O1xyXG5cdHRoaXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwID0gdXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwO1xyXG5cdHRoaXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPSB1cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldDtcclxuXHJcblx0dGhpcy5zYWZlU2V0VGV4dHVyZTJEID0gc2FmZVNldFRleHR1cmUyRDtcclxuXHR0aGlzLnNhZmVTZXRUZXh0dXJlQ3ViZSA9IHNhZmVTZXRUZXh0dXJlQ3ViZTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHRoZXNwaXRlIC8gaHR0cDovL3d3dy50d2l0dGVyLmNvbS90aGVzcGl0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMVXRpbHMoZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcykge1xyXG5cclxuXHRmdW5jdGlvbiBjb252ZXJ0KHApIHtcclxuXHJcblx0XHR2YXIgZXh0ZW5zaW9uO1xyXG5cclxuXHRcdGlmIChwID09PSBSZXBlYXRXcmFwcGluZykgeyByZXR1cm4gMTA0OTc7IH1cclxuXHRcdGlmIChwID09PSBDbGFtcFRvRWRnZVdyYXBwaW5nKSB7IHJldHVybiAzMzA3MTsgfVxyXG5cdFx0aWYgKHAgPT09IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcpIHsgcmV0dXJuIDMzNjQ4OyB9XHJcblxyXG5cdFx0aWYgKHAgPT09IE5lYXJlc3RGaWx0ZXIpIHsgcmV0dXJuIDk3Mjg7IH1cclxuXHRcdGlmIChwID09PSBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcikgeyByZXR1cm4gOTk4NDsgfVxyXG5cdFx0aWYgKHAgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIpIHsgcmV0dXJuIDk5ODY7IH1cclxuXHJcblx0XHRpZiAocCA9PT0gTGluZWFyRmlsdGVyKSB7IHJldHVybiA5NzI5OyB9XHJcblx0XHRpZiAocCA9PT0gTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcikgeyByZXR1cm4gOTk4NTsgfVxyXG5cdFx0aWYgKHAgPT09IExpbmVhck1pcG1hcExpbmVhckZpbHRlcikgeyByZXR1cm4gOTk4NzsgfVxyXG5cclxuXHRcdGlmIChwID09PSBVbnNpZ25lZEJ5dGVUeXBlKSB7IHJldHVybiA1MTIxOyB9XHJcblx0XHRpZiAocCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlKSB7IHJldHVybiAzMjgxOTsgfVxyXG5cdFx0aWYgKHAgPT09IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSkgeyByZXR1cm4gMzI4MjA7IH1cclxuXHRcdGlmIChwID09PSBVbnNpZ25lZFNob3J0NTY1VHlwZSkgeyByZXR1cm4gMzM2MzU7IH1cclxuXHJcblx0XHRpZiAocCA9PT0gQnl0ZVR5cGUpIHsgcmV0dXJuIDUxMjA7IH1cclxuXHRcdGlmIChwID09PSBTaG9ydFR5cGUpIHsgcmV0dXJuIDUxMjI7IH1cclxuXHRcdGlmIChwID09PSBVbnNpZ25lZFNob3J0VHlwZSkgeyByZXR1cm4gNTEyMzsgfVxyXG5cdFx0aWYgKHAgPT09IEludFR5cGUpIHsgcmV0dXJuIDUxMjQ7IH1cclxuXHRcdGlmIChwID09PSBVbnNpZ25lZEludFR5cGUpIHsgcmV0dXJuIDUxMjU7IH1cclxuXHRcdGlmIChwID09PSBGbG9hdFR5cGUpIHsgcmV0dXJuIDUxMjY7IH1cclxuXHJcblx0XHRpZiAocCA9PT0gSGFsZkZsb2F0VHlwZSkge1xyXG5cclxuXHRcdFx0aWYgKGNhcGFiaWxpdGllcy5pc1dlYkdMMikgeyByZXR1cm4gNTEzMTsgfVxyXG5cclxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKTtcclxuXHJcblx0XHRcdGlmIChleHRlbnNpb24gIT09IG51bGwpIHsgcmV0dXJuIGV4dGVuc2lvbi5IQUxGX0ZMT0FUX09FUzsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocCA9PT0gQWxwaGFGb3JtYXQpIHsgcmV0dXJuIDY0MDY7IH1cclxuXHRcdGlmIChwID09PSBSR0JGb3JtYXQpIHsgcmV0dXJuIDY0MDc7IH1cclxuXHRcdGlmIChwID09PSBSR0JBRm9ybWF0KSB7IHJldHVybiA2NDA4OyB9XHJcblx0XHRpZiAocCA9PT0gTHVtaW5hbmNlRm9ybWF0KSB7IHJldHVybiA2NDA5OyB9XHJcblx0XHRpZiAocCA9PT0gTHVtaW5hbmNlQWxwaGFGb3JtYXQpIHsgcmV0dXJuIDY0MTA7IH1cclxuXHRcdGlmIChwID09PSBEZXB0aEZvcm1hdCkgeyByZXR1cm4gNjQwMjsgfVxyXG5cdFx0aWYgKHAgPT09IERlcHRoU3RlbmNpbEZvcm1hdCkgeyByZXR1cm4gMzQwNDE7IH1cclxuXHRcdGlmIChwID09PSBSZWRGb3JtYXQpIHsgcmV0dXJuIDY0MDM7IH1cclxuXHJcblx0XHRpZiAocCA9PT0gQWRkRXF1YXRpb24pIHsgcmV0dXJuIDMyNzc0OyB9XHJcblx0XHRpZiAocCA9PT0gU3VidHJhY3RFcXVhdGlvbikgeyByZXR1cm4gMzI3Nzg7IH1cclxuXHRcdGlmIChwID09PSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbikgeyByZXR1cm4gMzI3Nzk7IH1cclxuXHJcblx0XHRpZiAocCA9PT0gWmVyb0ZhY3RvcikgeyByZXR1cm4gMDsgfVxyXG5cdFx0aWYgKHAgPT09IE9uZUZhY3RvcikgeyByZXR1cm4gMTsgfVxyXG5cdFx0aWYgKHAgPT09IFNyY0NvbG9yRmFjdG9yKSB7IHJldHVybiA3Njg7IH1cclxuXHRcdGlmIChwID09PSBPbmVNaW51c1NyY0NvbG9yRmFjdG9yKSB7IHJldHVybiA3Njk7IH1cclxuXHRcdGlmIChwID09PSBTcmNBbHBoYUZhY3RvcikgeyByZXR1cm4gNzcwOyB9XHJcblx0XHRpZiAocCA9PT0gT25lTWludXNTcmNBbHBoYUZhY3RvcikgeyByZXR1cm4gNzcxOyB9XHJcblx0XHRpZiAocCA9PT0gRHN0QWxwaGFGYWN0b3IpIHsgcmV0dXJuIDc3MjsgfVxyXG5cdFx0aWYgKHAgPT09IE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IpIHsgcmV0dXJuIDc3MzsgfVxyXG5cclxuXHRcdGlmIChwID09PSBEc3RDb2xvckZhY3RvcikgeyByZXR1cm4gNzc0OyB9XHJcblx0XHRpZiAocCA9PT0gT25lTWludXNEc3RDb2xvckZhY3RvcikgeyByZXR1cm4gNzc1OyB9XHJcblx0XHRpZiAocCA9PT0gU3JjQWxwaGFTYXR1cmF0ZUZhY3RvcikgeyByZXR1cm4gNzc2OyB9XHJcblxyXG5cdFx0aWYgKHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCB8fFxyXG5cdFx0XHRwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDVfRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCgnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnKTtcclxuXHJcblx0XHRcdGlmIChleHRlbnNpb24gIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0aWYgKHAgPT09IFJHQl9TM1RDX0RYVDFfRm9ybWF0KSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDsgfVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHxcclxuXHRcdFx0cCA9PT0gUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCkge1xyXG5cclxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycpO1xyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbiAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHRpZiAocCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HOyB9XHJcblx0XHRcdFx0aWYgKHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0KSB7IHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRzsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRzsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRzsgfVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocCA9PT0gUkdCX0VUQzFfRm9ybWF0KSB7XHJcblxyXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCgnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnKTtcclxuXHJcblx0XHRcdGlmIChleHRlbnNpb24gIT09IG51bGwpIHsgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwID09PSBSR0JBX0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg0X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNXg1X0Zvcm1hdCB8fFxyXG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxyXG5cdFx0XHRwID09PSBSR0JBX0FTVENfOHg2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4NV9Gb3JtYXQgfHxcclxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfMTB4MTBfRm9ybWF0IHx8XHJcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCkge1xyXG5cclxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9hc3RjJyk7XHJcblxyXG5cdFx0XHRpZiAoZXh0ZW5zaW9uICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocCA9PT0gTWluRXF1YXRpb24gfHwgcCA9PT0gTWF4RXF1YXRpb24pIHtcclxuXHJcblx0XHRcdGlmIChjYXBhYmlsaXRpZXMuaXNXZWJHTDIpIHtcclxuXHJcblx0XHRcdFx0aWYgKHAgPT09IE1pbkVxdWF0aW9uKSB7IHJldHVybiAzMjc3NTsgfVxyXG5cdFx0XHRcdGlmIChwID09PSBNYXhFcXVhdGlvbikgeyByZXR1cm4gMzI3NzY7IH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCdFWFRfYmxlbmRfbWlubWF4Jyk7XHJcblxyXG5cdFx0XHRpZiAoZXh0ZW5zaW9uICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdGlmIChwID09PSBNaW5FcXVhdGlvbikgeyByZXR1cm4gZXh0ZW5zaW9uLk1JTl9FWFQ7IH1cclxuXHRcdFx0XHRpZiAocCA9PT0gTWF4RXF1YXRpb24pIHsgcmV0dXJuIGV4dGVuc2lvbi5NQVhfRVhUOyB9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwID09PSBVbnNpZ25lZEludDI0OFR5cGUpIHtcclxuXHJcblx0XHRcdGlmIChjYXBhYmlsaXRpZXMuaXNXZWJHTDIpIHsgcmV0dXJuIDM0MDQyOyB9XHJcblxyXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCgnV0VCR0xfZGVwdGhfdGV4dHVyZScpO1xyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbiAhPT0gbnVsbCkgeyByZXR1cm4gZXh0ZW5zaW9uLlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAwO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB7IGNvbnZlcnQ6IGNvbnZlcnQgfTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGZlcm5hbmRvanNnIC8gaHR0cDovL2Zlcm5hbmRvanNnLmNvbVxyXG4gKiBAYXV0aG9yIFRha2FoaXJvIGh0dHBzOi8vZ2l0aHViLmNvbS90YWthaGlyb3hcclxuICovXHJcblxyXG5mdW5jdGlvbiBXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldCh3aWR0aCwgaGVpZ2h0LCBudW1WaWV3cywgb3B0aW9ucykge1xyXG5cclxuXHRXZWJHTFJlbmRlclRhcmdldC5jYWxsKHRoaXMsIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpO1xyXG5cclxuXHR0aGlzLmRlcHRoQnVmZmVyID0gZmFsc2U7XHJcblx0dGhpcy5zdGVuY2lsQnVmZmVyID0gZmFsc2U7XHJcblxyXG5cdHRoaXMubnVtVmlld3MgPSBudW1WaWV3cztcclxuXHJcbn1cclxuXHJcbldlYkdMTXVsdGl2aWV3UmVuZGVyVGFyZ2V0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldCxcclxuXHJcblx0aXNXZWJHTE11bHRpdmlld1JlbmRlclRhcmdldDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLm51bVZpZXdzID0gc291cmNlLm51bVZpZXdzO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXROdW1WaWV3czogZnVuY3Rpb24gKG51bVZpZXdzKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMubnVtVmlld3MgIT09IG51bVZpZXdzKSB7XHJcblxyXG5cdFx0XHR0aGlzLm51bVZpZXdzID0gbnVtVmlld3M7XHJcblx0XHRcdHRoaXMuZGlzcG9zZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBmZXJuYW5kb2pzZyAvIGh0dHA6Ly9mZXJuYW5kb2pzZy5jb21cclxuICogQGF1dGhvciBUYWthaGlybyBodHRwczovL2dpdGh1Yi5jb20vdGFrYWhpcm94XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViR0xNdWx0aXZpZXcocmVuZGVyZXIsIGdsKSB7XHJcblxyXG5cdHZhciBERUZBVUxUX05VTVZJRVdTID0gMjtcclxuXHJcblx0dmFyIGV4dGVuc2lvbnMgPSByZW5kZXJlci5leHRlbnNpb25zO1xyXG5cdHZhciBwcm9wZXJ0aWVzID0gcmVuZGVyZXIucHJvcGVydGllcztcclxuXHJcblx0dmFyIHJlbmRlclRhcmdldCwgY3VycmVudFJlbmRlclRhcmdldDtcclxuXHR2YXIgbWF0MywgbWF0NCwgY2FtZXJhQXJyYXksIHJlbmRlclNpemU7XHJcblxyXG5cdHZhciBhdmFpbGFibGU7XHJcblx0dmFyIG1heE51bVZpZXdzID0gMDtcclxuXHJcblx0Ly9cclxuXHJcblx0ZnVuY3Rpb24gaXNBdmFpbGFibGUoKSB7XHJcblxyXG5cdFx0aWYgKGF2YWlsYWJsZSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ09WUl9tdWx0aXZpZXcyJyk7XHJcblxyXG5cdFx0XHRhdmFpbGFibGUgPSBleHRlbnNpb24gIT09IG51bGwgJiYgZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKS5hbnRpYWxpYXMgPT09IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKGF2YWlsYWJsZSkge1xyXG5cclxuXHRcdFx0XHRtYXhOdW1WaWV3cyA9IGdsLmdldFBhcmFtZXRlcihleHRlbnNpb24uTUFYX1ZJRVdTX09WUik7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMTXVsdGl2aWV3UmVuZGVyVGFyZ2V0KDAsIDAsIERFRkFVTFRfTlVNVklFV1MpO1xyXG5cclxuXHRcdFx0XHRyZW5kZXJTaXplID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdFx0XHRtYXQ0ID0gW107XHJcblx0XHRcdFx0bWF0MyA9IFtdO1xyXG5cdFx0XHRcdGNhbWVyYUFycmF5ID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF4TnVtVmlld3M7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdG1hdDRbaV0gPSBuZXcgTWF0cml4NCgpO1xyXG5cdFx0XHRcdFx0bWF0M1tpXSA9IG5ldyBNYXRyaXgzKCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGF2YWlsYWJsZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXRDYW1lcmFBcnJheShjYW1lcmEpIHtcclxuXHJcblx0XHRpZiAoY2FtZXJhLmlzQXJyYXlDYW1lcmEpIHsgcmV0dXJuIGNhbWVyYS5jYW1lcmFzOyB9XHJcblxyXG5cdFx0Y2FtZXJhQXJyYXlbMF0gPSBjYW1lcmE7XHJcblxyXG5cdFx0cmV0dXJuIGNhbWVyYUFycmF5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYVByb2plY3Rpb25NYXRyaWNlc1VuaWZvcm0oY2FtZXJhLCB1bmlmb3Jtcykge1xyXG5cclxuXHRcdHZhciBjYW1lcmFzID0gZ2V0Q2FtZXJhQXJyYXkoY2FtZXJhKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdG1hdDRbaV0uY29weShjYW1lcmFzW2ldLnByb2plY3Rpb25NYXRyaXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR1bmlmb3Jtcy5zZXRWYWx1ZShnbCwgJ3Byb2plY3Rpb25NYXRyaWNlcycsIG1hdDQpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYVZpZXdNYXRyaWNlc1VuaWZvcm0oY2FtZXJhLCB1bmlmb3Jtcykge1xyXG5cclxuXHRcdHZhciBjYW1lcmFzID0gZ2V0Q2FtZXJhQXJyYXkoY2FtZXJhKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdG1hdDRbaV0uY29weShjYW1lcmFzW2ldLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHVuaWZvcm1zLnNldFZhbHVlKGdsLCAndmlld01hdHJpY2VzJywgbWF0NCk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gdXBkYXRlT2JqZWN0TWF0cmljZXNVbmlmb3JtcyhvYmplY3QsIGNhbWVyYSwgdW5pZm9ybXMpIHtcclxuXHJcblx0XHR2YXIgY2FtZXJhcyA9IGdldENhbWVyYUFycmF5KGNhbWVyYSk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRtYXQ0W2ldLm11bHRpcGx5TWF0cmljZXMoY2FtZXJhc1tpXS5tYXRyaXhXb3JsZEludmVyc2UsIG9iamVjdC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdG1hdDNbaV0uZ2V0Tm9ybWFsTWF0cml4KG1hdDRbaV0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR1bmlmb3Jtcy5zZXRWYWx1ZShnbCwgJ21vZGVsVmlld01hdHJpY2VzJywgbWF0NCk7XHJcblx0XHR1bmlmb3Jtcy5zZXRWYWx1ZShnbCwgJ25vcm1hbE1hdHJpY2VzJywgbWF0Myk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaXNNdWx0aXZpZXdDb21wYXRpYmxlKGNhbWVyYSkge1xyXG5cclxuXHRcdGlmIChjYW1lcmEuaXNBcnJheUNhbWVyYSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB0cnVlOyB9XHJcblxyXG5cdFx0dmFyIGNhbWVyYXMgPSBjYW1lcmEuY2FtZXJhcztcclxuXHJcblx0XHRpZiAoY2FtZXJhcy5sZW5ndGggPiBtYXhOdW1WaWV3cykgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gMSwgaWwgPSBjYW1lcmFzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdGlmIChjYW1lcmFzWzBdLnZpZXdwb3J0LnogIT09IGNhbWVyYXNbaV0udmlld3BvcnQueiB8fFxyXG5cdFx0XHRcdGNhbWVyYXNbMF0udmlld3BvcnQudyAhPT0gY2FtZXJhc1tpXS52aWV3cG9ydC53KSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZXNpemVSZW5kZXJUYXJnZXQoY2FtZXJhKSB7XHJcblxyXG5cdFx0aWYgKGN1cnJlbnRSZW5kZXJUYXJnZXQpIHtcclxuXHJcblx0XHRcdHJlbmRlclNpemUuc2V0KGN1cnJlbnRSZW5kZXJUYXJnZXQud2lkdGgsIGN1cnJlbnRSZW5kZXJUYXJnZXQuaGVpZ2h0KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuZ2V0RHJhd2luZ0J1ZmZlclNpemUocmVuZGVyU2l6ZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChjYW1lcmEuaXNBcnJheUNhbWVyYSkge1xyXG5cclxuXHRcdFx0dmFyIHZpZXdwb3J0ID0gY2FtZXJhLmNhbWVyYXNbMF0udmlld3BvcnQ7XHJcblxyXG5cdFx0XHRyZW5kZXJUYXJnZXQuc2V0U2l6ZSh2aWV3cG9ydC56LCB2aWV3cG9ydC53KTtcclxuXHRcdFx0cmVuZGVyVGFyZ2V0LnNldE51bVZpZXdzKGNhbWVyYS5jYW1lcmFzLmxlbmd0aCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHJlbmRlclRhcmdldC5zZXRTaXplKHJlbmRlclNpemUueCwgcmVuZGVyU2l6ZS55KTtcclxuXHRcdFx0cmVuZGVyVGFyZ2V0LnNldE51bVZpZXdzKERFRkFVTFRfTlVNVklFV1MpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBhdHRhY2hDYW1lcmEoY2FtZXJhKSB7XHJcblxyXG5cdFx0aWYgKGlzTXVsdGl2aWV3Q29tcGF0aWJsZShjYW1lcmEpID09PSBmYWxzZSkgeyByZXR1cm47IH1cclxuXHJcblx0XHRjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XHJcblx0XHRyZXNpemVSZW5kZXJUYXJnZXQoY2FtZXJhKTtcclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRldGFjaENhbWVyYShjYW1lcmEpIHtcclxuXHJcblx0XHRpZiAocmVuZGVyVGFyZ2V0ICE9PSByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSkgeyByZXR1cm47IH1cclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoY3VycmVudFJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0Zmx1c2goY2FtZXJhKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBmbHVzaChjYW1lcmEpIHtcclxuXHJcblx0XHR2YXIgc3JjUmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xyXG5cdFx0dmFyIG51bVZpZXdzID0gc3JjUmVuZGVyVGFyZ2V0Lm51bVZpZXdzO1xyXG5cclxuXHRcdHZhciBzcmNGcmFtZWJ1ZmZlcnMgPSBwcm9wZXJ0aWVzLmdldChzcmNSZW5kZXJUYXJnZXQpLl9fd2ViZ2xWaWV3RnJhbWVidWZmZXJzO1xyXG5cclxuXHRcdHZhciB2aWV3V2lkdGggPSBzcmNSZW5kZXJUYXJnZXQud2lkdGg7XHJcblx0XHR2YXIgdmlld0hlaWdodCA9IHNyY1JlbmRlclRhcmdldC5oZWlnaHQ7XHJcblxyXG5cdFx0aWYgKGNhbWVyYS5pc0FycmF5Q2FtZXJhKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG51bVZpZXdzOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIHZpZXdwb3J0ID0gY2FtZXJhLmNhbWVyYXNbaV0udmlld3BvcnQ7XHJcblxyXG5cdFx0XHRcdHZhciB4MSA9IHZpZXdwb3J0Lng7XHJcblx0XHRcdFx0dmFyIHkxID0gdmlld3BvcnQueTtcclxuXHRcdFx0XHR2YXIgeDIgPSB4MSArIHZpZXdwb3J0Lno7XHJcblx0XHRcdFx0dmFyIHkyID0geTEgKyB2aWV3cG9ydC53O1xyXG5cclxuXHRcdFx0XHRnbC5iaW5kRnJhbWVidWZmZXIoMzYwMDgsIHNyY0ZyYW1lYnVmZmVyc1tpXSk7XHJcblx0XHRcdFx0Z2wuYmxpdEZyYW1lYnVmZmVyKDAsIDAsIHZpZXdXaWR0aCwgdmlld0hlaWdodCwgeDEsIHkxLCB4MiwgeTIsIDE2Mzg0LCA5NzI4KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKDM2MDA4LCBzcmNGcmFtZWJ1ZmZlcnNbMF0pO1xyXG5cdFx0XHRnbC5ibGl0RnJhbWVidWZmZXIoMCwgMCwgdmlld1dpZHRoLCB2aWV3SGVpZ2h0LCAwLCAwLCByZW5kZXJTaXplLngsIHJlbmRlclNpemUueSwgMTYzODQsIDk3MjgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR0aGlzLmlzQXZhaWxhYmxlID0gaXNBdmFpbGFibGU7XHJcblx0dGhpcy5hdHRhY2hDYW1lcmEgPSBhdHRhY2hDYW1lcmE7XHJcblx0dGhpcy5kZXRhY2hDYW1lcmEgPSBkZXRhY2hDYW1lcmE7XHJcblx0dGhpcy51cGRhdGVDYW1lcmFQcm9qZWN0aW9uTWF0cmljZXNVbmlmb3JtID0gdXBkYXRlQ2FtZXJhUHJvamVjdGlvbk1hdHJpY2VzVW5pZm9ybTtcclxuXHR0aGlzLnVwZGF0ZUNhbWVyYVZpZXdNYXRyaWNlc1VuaWZvcm0gPSB1cGRhdGVDYW1lcmFWaWV3TWF0cmljZXNVbmlmb3JtO1xyXG5cdHRoaXMudXBkYXRlT2JqZWN0TWF0cmljZXNVbmlmb3JtcyA9IHVwZGF0ZU9iamVjdE1hdHJpY2VzVW5pZm9ybXM7XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBHcm91cCgpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0dyb3VwJztcclxuXHJcbn1cclxuXHJcbkdyb3VwLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QzRC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBHcm91cCxcclxuXHJcblx0aXNHcm91cDogdHJ1ZVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBBcnJheUNhbWVyYShhcnJheSkge1xyXG5cclxuXHRQZXJzcGVjdGl2ZUNhbWVyYS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLmNhbWVyYXMgPSBhcnJheSB8fCBbXTtcclxuXHJcbn1cclxuXHJcbkFycmF5Q2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShQZXJzcGVjdGl2ZUNhbWVyYS5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBBcnJheUNhbWVyYSxcclxuXHJcblx0aXNBcnJheUNhbWVyYTogdHJ1ZVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBqc2FudGVsbCAvIGh0dHBzOi8vd3d3LmpzYW50ZWxsLmNvbS9cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG52YXIgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBjYW1lcmFSUG9zID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbi8qKlxyXG4gKiBBc3N1bWVzIDIgY2FtZXJhcyB0aGF0IGFyZSBwYXJhbGxlbCBhbmQgc2hhcmUgYW4gWC1heGlzLCBhbmQgdGhhdFxyXG4gKiB0aGUgY2FtZXJhcycgcHJvamVjdGlvbiBhbmQgd29ybGQgbWF0cmljZXMgaGF2ZSBhbHJlYWR5IGJlZW4gc2V0LlxyXG4gKiBBbmQgdGhhdCBuZWFyIGFuZCBmYXIgcGxhbmVzIGFyZSBpZGVudGljYWwgZm9yIGJvdGggY2FtZXJhcy5cclxuICogVmlzdWFsaXphdGlvbiBvZiB0aGlzIHRlY2huaXF1ZTogaHR0cHM6Ly9jb21wdXRlcmdyYXBoaWNzLnN0YWNrZXhjaGFuZ2UuY29tL2EvNDc2NVxyXG4gKi9cclxuZnVuY3Rpb24gc2V0UHJvamVjdGlvbkZyb21VbmlvbihjYW1lcmEsIGNhbWVyYUwsIGNhbWVyYVIpIHtcclxuXHJcblx0Y2FtZXJhTFBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oY2FtZXJhTC5tYXRyaXhXb3JsZCk7XHJcblx0Y2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oY2FtZXJhUi5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdHZhciBpcGQgPSBjYW1lcmFMUG9zLmRpc3RhbmNlVG8oY2FtZXJhUlBvcyk7XHJcblxyXG5cdHZhciBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcclxuXHR2YXIgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XHJcblxyXG5cdC8vIFZSIHN5c3RlbXMgd2lsbCBoYXZlIGlkZW50aWNhbCBmYXIgYW5kIG5lYXIgcGxhbmVzLCBhbmRcclxuXHQvLyBtb3N0IGxpa2VseSBpZGVudGljYWwgdG9wIGFuZCBib3R0b20gZnJ1c3R1bSBleHRlbnRzLlxyXG5cdC8vIFVzZSB0aGUgbGVmdCBjYW1lcmEgZm9yIHRoZXNlIHZhbHVlcy5cclxuXHR2YXIgbmVhciA9IHByb2pMWzE0XSAvIChwcm9qTFsxMF0gLSAxKTtcclxuXHR2YXIgZmFyID0gcHJvakxbMTRdIC8gKHByb2pMWzEwXSArIDEpO1xyXG5cdHZhciB0b3BGb3YgPSAocHJvakxbOV0gKyAxKSAvIHByb2pMWzVdO1xyXG5cdHZhciBib3R0b21Gb3YgPSAocHJvakxbOV0gLSAxKSAvIHByb2pMWzVdO1xyXG5cclxuXHR2YXIgbGVmdEZvdiA9IChwcm9qTFs4XSAtIDEpIC8gcHJvakxbMF07XHJcblx0dmFyIHJpZ2h0Rm92ID0gKHByb2pSWzhdICsgMSkgLyBwcm9qUlswXTtcclxuXHR2YXIgbGVmdCA9IG5lYXIgKiBsZWZ0Rm92O1xyXG5cdHZhciByaWdodCA9IG5lYXIgKiByaWdodEZvdjtcclxuXHJcblx0Ly8gQ2FsY3VsYXRlIHRoZSBuZXcgY2FtZXJhJ3MgcG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlXHJcblx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cclxuXHR2YXIgek9mZnNldCA9IGlwZCAvICgtIGxlZnRGb3YgKyByaWdodEZvdik7XHJcblx0dmFyIHhPZmZzZXQgPSB6T2Zmc2V0ICogLSBsZWZ0Rm92O1xyXG5cclxuXHQvLyBUT0RPOiBCZXR0ZXIgd2F5IHRvIGFwcGx5IHRoaXMgb2Zmc2V0P1xyXG5cdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSk7XHJcblx0Y2FtZXJhLnRyYW5zbGF0ZVgoeE9mZnNldCk7XHJcblx0Y2FtZXJhLnRyYW5zbGF0ZVooek9mZnNldCk7XHJcblx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoY2FtZXJhLnBvc2l0aW9uLCBjYW1lcmEucXVhdGVybmlvbiwgY2FtZXJhLnNjYWxlKTtcclxuXHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoY2FtZXJhLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0Ly8gRmluZCB0aGUgdW5pb24gb2YgdGhlIGZydXN0dW0gdmFsdWVzIG9mIHRoZSBjYW1lcmFzIGFuZCBzY2FsZVxyXG5cdC8vIHRoZSB2YWx1ZXMgc28gdGhhdCB0aGUgbmVhciBwbGFuZSdzIHBvc2l0aW9uIGRvZXMgbm90IGNoYW5nZSBpbiB3b3JsZCBzcGFjZSxcclxuXHQvLyBhbHRob3VnaCBtdXN0IG5vdyBiZSByZWxhdGl2ZSB0byB0aGUgbmV3IHVuaW9uIGNhbWVyYS5cclxuXHR2YXIgbmVhcjIgPSBuZWFyICsgek9mZnNldDtcclxuXHR2YXIgZmFyMiA9IGZhciArIHpPZmZzZXQ7XHJcblx0dmFyIGxlZnQyID0gbGVmdCAtIHhPZmZzZXQ7XHJcblx0dmFyIHJpZ2h0MiA9IHJpZ2h0ICsgKGlwZCAtIHhPZmZzZXQpO1xyXG5cdHZhciB0b3AyID0gdG9wRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xyXG5cdHZhciBib3R0b20yID0gYm90dG9tRm92ICogZmFyIC8gZmFyMiAqIG5lYXIyO1xyXG5cclxuXHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5tYWtlUGVyc3BlY3RpdmUobGVmdDIsIHJpZ2h0MiwgdG9wMiwgYm90dG9tMiwgbmVhcjIsIGZhcjIpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gV2ViVlJNYW5hZ2VyKHJlbmRlcmVyKSB7XHJcblxyXG5cdHZhciByZW5kZXJXaWR0aCwgcmVuZGVySGVpZ2h0O1xyXG5cdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdHZhciBkZXZpY2UgPSBudWxsO1xyXG5cdHZhciBmcmFtZURhdGEgPSBudWxsO1xyXG5cclxuXHR2YXIgcG9zZVRhcmdldCA9IG51bGw7XHJcblxyXG5cdHZhciBjb250cm9sbGVycyA9IFtdO1xyXG5cdHZhciBzdGFuZGluZ01hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblx0dmFyIHN0YW5kaW5nTWF0cml4SW52ZXJzZSA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG5cdHZhciBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gMS4wO1xyXG5cclxuXHR2YXIgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJztcclxuXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICdWUkZyYW1lRGF0YScgaW4gd2luZG93KSB7XHJcblxyXG5cdFx0ZnJhbWVEYXRhID0gbmV3IHdpbmRvdy5WUkZyYW1lRGF0YSgpO1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3ZyZGlzcGxheXByZXNlbnRjaGFuZ2UnLCBvblZSRGlzcGxheVByZXNlbnRDaGFuZ2UsIGZhbHNlKTtcclxuXHJcblx0fVxyXG5cclxuXHR2YXIgbWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcclxuXHR2YXIgdGVtcFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xyXG5cdHZhciB0ZW1wUG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xyXG5cdGNhbWVyYUwudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xyXG5cdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSgxKTtcclxuXHJcblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcclxuXHRjYW1lcmFSLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcclxuXHRjYW1lcmFSLmxheWVycy5lbmFibGUoMik7XHJcblxyXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYShbY2FtZXJhTCwgY2FtZXJhUl0pO1xyXG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoMSk7XHJcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSgyKTtcclxuXHJcblx0Ly9cclxuXHJcblx0ZnVuY3Rpb24gaXNQcmVzZW50aW5nKCkge1xyXG5cclxuXHRcdHJldHVybiBkZXZpY2UgIT09IG51bGwgJiYgZGV2aWNlLmlzUHJlc2VudGluZyA9PT0gdHJ1ZTtcclxuXHJcblx0fVxyXG5cclxuXHR2YXIgY3VycmVudFNpemUgPSBuZXcgVmVjdG9yMigpLCBjdXJyZW50UGl4ZWxSYXRpbztcclxuXHJcblx0ZnVuY3Rpb24gb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlKCkge1xyXG5cclxuXHRcdGlmIChpc1ByZXNlbnRpbmcoKSkge1xyXG5cclxuXHRcdFx0dmFyIGV5ZVBhcmFtZXRlcnMgPSBkZXZpY2UuZ2V0RXllUGFyYW1ldGVycygnbGVmdCcpO1xyXG5cdFx0XHRyZW5kZXJXaWR0aCA9IDIgKiBleWVQYXJhbWV0ZXJzLnJlbmRlcldpZHRoICogZnJhbWVidWZmZXJTY2FsZUZhY3RvcjtcclxuXHRcdFx0cmVuZGVySGVpZ2h0ID0gZXllUGFyYW1ldGVycy5yZW5kZXJIZWlnaHQgKiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yO1xyXG5cclxuXHRcdFx0Y3VycmVudFBpeGVsUmF0aW8gPSByZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XHJcblx0XHRcdHJlbmRlcmVyLmdldFNpemUoY3VycmVudFNpemUpO1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuc2V0RHJhd2luZ0J1ZmZlclNpemUocmVuZGVyV2lkdGgsIHJlbmRlckhlaWdodCwgMSk7XHJcblxyXG5cdFx0XHRjYW1lcmFMLnZpZXdwb3J0LnNldCgwLCAwLCByZW5kZXJXaWR0aCAvIDIsIHJlbmRlckhlaWdodCk7XHJcblx0XHRcdGNhbWVyYVIudmlld3BvcnQuc2V0KHJlbmRlcldpZHRoIC8gMiwgMCwgcmVuZGVyV2lkdGggLyAyLCByZW5kZXJIZWlnaHQpO1xyXG5cclxuXHRcdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XHJcblxyXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ3Nlc3Npb25zdGFydCcgfSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGlmIChzY29wZS5lbmFibGVkKSB7XHJcblxyXG5cdFx0XHRcdHJlbmRlcmVyLnNldERyYXdpbmdCdWZmZXJTaXplKGN1cnJlbnRTaXplLndpZHRoLCBjdXJyZW50U2l6ZS5oZWlnaHQsIGN1cnJlbnRQaXhlbFJhdGlvKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGFuaW1hdGlvbi5zdG9wKCk7XHJcblxyXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KHsgdHlwZTogJ3Nlc3Npb25lbmQnIH0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgdHJpZ2dlcnMgPSBbXTtcclxuXHJcblx0ZnVuY3Rpb24gZmluZEdhbWVwYWQoaWQpIHtcclxuXHJcblx0XHR2YXIgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMgJiYgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBsID0gZ2FtZXBhZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgZ2FtZXBhZCA9IGdhbWVwYWRzW2ldO1xyXG5cclxuXHRcdFx0aWYgKGdhbWVwYWQgJiYgKGdhbWVwYWQuaWQgPT09ICdEYXlkcmVhbSBDb250cm9sbGVyJyB8fFxyXG5cdFx0XHRcdGdhbWVwYWQuaWQgPT09ICdHZWFyIFZSIENvbnRyb2xsZXInIHx8IGdhbWVwYWQuaWQgPT09ICdPY3VsdXMgR28gQ29udHJvbGxlcicgfHxcclxuXHRcdFx0XHRnYW1lcGFkLmlkID09PSAnT3BlblZSIEdhbWVwYWQnIHx8IGdhbWVwYWQuaWQuc3RhcnRzV2l0aCgnT2N1bHVzIFRvdWNoJykgfHxcclxuXHRcdFx0XHRnYW1lcGFkLmlkLnN0YXJ0c1dpdGgoJ0hUQyBWaXZlIEZvY3VzJykgfHxcclxuXHRcdFx0XHRnYW1lcGFkLmlkLnN0YXJ0c1dpdGgoJ1NwYXRpYWwgQ29udHJvbGxlcicpKSkge1xyXG5cclxuXHRcdFx0XHRpZiAoaiA9PT0gaWQpIHsgcmV0dXJuIGdhbWVwYWQ7IH1cclxuXHJcblx0XHRcdFx0aisrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVDb250cm9sbGVycygpIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgY29udHJvbGxlciA9IGNvbnRyb2xsZXJzW2ldO1xyXG5cclxuXHRcdFx0dmFyIGdhbWVwYWQgPSBmaW5kR2FtZXBhZChpKTtcclxuXHJcblx0XHRcdGlmIChnYW1lcGFkICE9PSB1bmRlZmluZWQgJiYgZ2FtZXBhZC5wb3NlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0aWYgKGdhbWVwYWQucG9zZSA9PT0gbnVsbCkgeyByZXR1cm47IH1cclxuXHJcblx0XHRcdFx0Ly8gUG9zZVxyXG5cclxuXHRcdFx0XHR2YXIgcG9zZSA9IGdhbWVwYWQucG9zZTtcclxuXHJcblx0XHRcdFx0aWYgKHBvc2UuaGFzUG9zaXRpb24gPT09IGZhbHNlKSB7IGNvbnRyb2xsZXIucG9zaXRpb24uc2V0KDAuMiwgLSAwLjYsIC0gMC4wNSk7IH1cclxuXHJcblx0XHRcdFx0aWYgKHBvc2UucG9zaXRpb24gIT09IG51bGwpIHsgY29udHJvbGxlci5wb3NpdGlvbi5mcm9tQXJyYXkocG9zZS5wb3NpdGlvbik7IH1cclxuXHRcdFx0XHRpZiAocG9zZS5vcmllbnRhdGlvbiAhPT0gbnVsbCkgeyBjb250cm9sbGVyLnF1YXRlcm5pb24uZnJvbUFycmF5KHBvc2Uub3JpZW50YXRpb24pOyB9XHJcblx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguY29tcG9zZShjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnF1YXRlcm5pb24sIGNvbnRyb2xsZXIuc2NhbGUpO1xyXG5cdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LnByZW11bHRpcGx5KHN0YW5kaW5nTWF0cml4KTtcclxuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeC5kZWNvbXBvc2UoY29udHJvbGxlci5wb3NpdGlvbiwgY29udHJvbGxlci5xdWF0ZXJuaW9uLCBjb250cm9sbGVyLnNjYWxlKTtcclxuXHRcdFx0XHRjb250cm9sbGVyLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdC8vIFRyaWdnZXJcclxuXHJcblx0XHRcdFx0dmFyIGJ1dHRvbklkID0gZ2FtZXBhZC5pZCA9PT0gJ0RheWRyZWFtIENvbnRyb2xsZXInID8gMCA6IDE7XHJcblxyXG5cdFx0XHRcdGlmICh0cmlnZ2Vyc1tpXSA9PT0gdW5kZWZpbmVkKSB7IHRyaWdnZXJzW2ldID0gZmFsc2U7IH1cclxuXHJcblx0XHRcdFx0aWYgKHRyaWdnZXJzW2ldICE9PSBnYW1lcGFkLmJ1dHRvbnNbYnV0dG9uSWRdLnByZXNzZWQpIHtcclxuXHJcblx0XHRcdFx0XHR0cmlnZ2Vyc1tpXSA9IGdhbWVwYWQuYnV0dG9uc1tidXR0b25JZF0ucHJlc3NlZDtcclxuXHJcblx0XHRcdFx0XHRpZiAodHJpZ2dlcnNbaV0gPT09IHRydWUpIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdzZWxlY3RzdGFydCcgfSk7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdzZWxlY3RlbmQnIH0pO1xyXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnc2VsZWN0JyB9KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGVWaWV3cG9ydEZyb21Cb3VuZHModmlld3BvcnQsIGJvdW5kcykge1xyXG5cclxuXHRcdGlmIChib3VuZHMgIT09IG51bGwgJiYgYm91bmRzLmxlbmd0aCA9PT0gNCkge1xyXG5cclxuXHRcdFx0dmlld3BvcnQuc2V0KGJvdW5kc1swXSAqIHJlbmRlcldpZHRoLCBib3VuZHNbMV0gKiByZW5kZXJIZWlnaHQsIGJvdW5kc1syXSAqIHJlbmRlcldpZHRoLCBib3VuZHNbM10gKiByZW5kZXJIZWlnaHQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5nZXRDb250cm9sbGVyID0gZnVuY3Rpb24gKGlkKSB7XHJcblxyXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tpZF07XHJcblxyXG5cdFx0aWYgKGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29udHJvbGxlciA9IG5ldyBHcm91cCgpO1xyXG5cdFx0XHRjb250cm9sbGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHRcdFx0Y29udHJvbGxlci52aXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdFx0XHRjb250cm9sbGVyc1tpZF0gPSBjb250cm9sbGVyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY29udHJvbGxlcjtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIGRldmljZTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXREZXZpY2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgeyBkZXZpY2UgPSB2YWx1ZTsgfVxyXG5cclxuXHRcdGFuaW1hdGlvbi5zZXRDb250ZXh0KHZhbHVlKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0ZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IHZhbHVlO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFJlZmVyZW5jZVNwYWNlVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHJlZmVyZW5jZVNwYWNlVHlwZSA9IHZhbHVlO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFBvc2VUYXJnZXQgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0aWYgKG9iamVjdCAhPT0gdW5kZWZpbmVkKSB7IHBvc2VUYXJnZXQgPSBvYmplY3Q7IH1cclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcblxyXG5cdFx0dmFyIHVzZXJIZWlnaHQgPSByZWZlcmVuY2VTcGFjZVR5cGUgPT09ICdsb2NhbC1mbG9vcicgPyAxLjYgOiAwO1xyXG5cclxuXHRcdGlmIChpc1ByZXNlbnRpbmcoKSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgdXNlckhlaWdodCwgMCk7XHJcblx0XHRcdGNhbWVyYS5yb3RhdGlvbi5zZXQoMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gY2FtZXJhO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRkZXZpY2UuZGVwdGhOZWFyID0gY2FtZXJhLm5lYXI7XHJcblx0XHRkZXZpY2UuZGVwdGhGYXIgPSBjYW1lcmEuZmFyO1xyXG5cclxuXHRcdGRldmljZS5nZXRGcmFtZURhdGEoZnJhbWVEYXRhKTtcclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdGlmIChyZWZlcmVuY2VTcGFjZVR5cGUgPT09ICdsb2NhbC1mbG9vcicpIHtcclxuXHJcblx0XHRcdHZhciBzdGFnZVBhcmFtZXRlcnMgPSBkZXZpY2Uuc3RhZ2VQYXJhbWV0ZXJzO1xyXG5cclxuXHRcdFx0aWYgKHN0YWdlUGFyYW1ldGVycykge1xyXG5cclxuXHRcdFx0XHRzdGFuZGluZ01hdHJpeC5mcm9tQXJyYXkoc3RhZ2VQYXJhbWV0ZXJzLnNpdHRpbmdUb1N0YW5kaW5nVHJhbnNmb3JtKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHN0YW5kaW5nTWF0cml4Lm1ha2VUcmFuc2xhdGlvbigwLCB1c2VySGVpZ2h0LCAwKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHZhciBwb3NlID0gZnJhbWVEYXRhLnBvc2U7XHJcblx0XHR2YXIgcG9zZU9iamVjdCA9IHBvc2VUYXJnZXQgIT09IG51bGwgPyBwb3NlVGFyZ2V0IDogY2FtZXJhO1xyXG5cclxuXHRcdC8vIFdlIHdhbnQgdG8gbWFuaXB1bGF0ZSBwb3NlT2JqZWN0IGJ5IGl0cyBwb3NpdGlvbiBhbmQgcXVhdGVybmlvbiBjb21wb25lbnRzIHNpbmNlIHVzZXJzIG1heSByZWx5IG9uIHRoZW0uXHJcblx0XHRwb3NlT2JqZWN0Lm1hdHJpeC5jb3B5KHN0YW5kaW5nTWF0cml4KTtcclxuXHRcdHBvc2VPYmplY3QubWF0cml4LmRlY29tcG9zZShwb3NlT2JqZWN0LnBvc2l0aW9uLCBwb3NlT2JqZWN0LnF1YXRlcm5pb24sIHBvc2VPYmplY3Quc2NhbGUpO1xyXG5cclxuXHRcdGlmIChwb3NlLm9yaWVudGF0aW9uICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0ZW1wUXVhdGVybmlvbi5mcm9tQXJyYXkocG9zZS5vcmllbnRhdGlvbik7XHJcblx0XHRcdHBvc2VPYmplY3QucXVhdGVybmlvbi5tdWx0aXBseSh0ZW1wUXVhdGVybmlvbik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChwb3NlLnBvc2l0aW9uICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0ZW1wUXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoc3RhbmRpbmdNYXRyaXgpO1xyXG5cdFx0XHR0ZW1wUG9zaXRpb24uZnJvbUFycmF5KHBvc2UucG9zaXRpb24pO1xyXG5cdFx0XHR0ZW1wUG9zaXRpb24uYXBwbHlRdWF0ZXJuaW9uKHRlbXBRdWF0ZXJuaW9uKTtcclxuXHRcdFx0cG9zZU9iamVjdC5wb3NpdGlvbi5hZGQodGVtcFBvc2l0aW9uKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cG9zZU9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Y2FtZXJhTC5uZWFyID0gY2FtZXJhLm5lYXI7XHJcblx0XHRjYW1lcmFSLm5lYXIgPSBjYW1lcmEubmVhcjtcclxuXHJcblx0XHRjYW1lcmFMLmZhciA9IGNhbWVyYS5mYXI7XHJcblx0XHRjYW1lcmFSLmZhciA9IGNhbWVyYS5mYXI7XHJcblxyXG5cdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UuZnJvbUFycmF5KGZyYW1lRGF0YS5sZWZ0Vmlld01hdHJpeCk7XHJcblx0XHRjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoZnJhbWVEYXRhLnJpZ2h0Vmlld01hdHJpeCk7XHJcblxyXG5cdFx0Ly8gVE9ETyAobXJkb29iKSBEb3VibGUgY2hlY2sgdGhpcyBjb2RlXHJcblxyXG5cdFx0c3RhbmRpbmdNYXRyaXhJbnZlcnNlLmdldEludmVyc2Uoc3RhbmRpbmdNYXRyaXgpO1xyXG5cclxuXHRcdGlmIChyZWZlcmVuY2VTcGFjZVR5cGUgPT09ICdsb2NhbC1mbG9vcicpIHtcclxuXHJcblx0XHRcdGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KHN0YW5kaW5nTWF0cml4SW52ZXJzZSk7XHJcblx0XHRcdGNhbWVyYVIubWF0cml4V29ybGRJbnZlcnNlLm11bHRpcGx5KHN0YW5kaW5nTWF0cml4SW52ZXJzZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwYXJlbnQgPSBwb3NlT2JqZWN0LnBhcmVudDtcclxuXHJcblx0XHRpZiAocGFyZW50ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRtYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZShwYXJlbnQubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkobWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHRcdFx0Y2FtZXJhUi5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkobWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gZW52TWFwIGFuZCBNaXJyb3IgbmVlZHMgY2FtZXJhLm1hdHJpeFdvcmxkXHJcblxyXG5cdFx0Y2FtZXJhTC5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKGNhbWVyYUwubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHRcdGNhbWVyYVIubWF0cml4V29ybGQuZ2V0SW52ZXJzZShjYW1lcmFSLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG5cdFx0Y2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheShmcmFtZURhdGEubGVmdFByb2plY3Rpb25NYXRyaXgpO1xyXG5cdFx0Y2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmZyb21BcnJheShmcmFtZURhdGEucmlnaHRQcm9qZWN0aW9uTWF0cml4KTtcclxuXHJcblx0XHRzZXRQcm9qZWN0aW9uRnJvbVVuaW9uKGNhbWVyYVZSLCBjYW1lcmFMLCBjYW1lcmFSKTtcclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHZhciBsYXllcnMgPSBkZXZpY2UuZ2V0TGF5ZXJzKCk7XHJcblxyXG5cdFx0aWYgKGxheWVycy5sZW5ndGgpIHtcclxuXHJcblx0XHRcdHZhciBsYXllciA9IGxheWVyc1swXTtcclxuXHJcblx0XHRcdHVwZGF0ZVZpZXdwb3J0RnJvbUJvdW5kcyhjYW1lcmFMLnZpZXdwb3J0LCBsYXllci5sZWZ0Qm91bmRzKTtcclxuXHRcdFx0dXBkYXRlVmlld3BvcnRGcm9tQm91bmRzKGNhbWVyYVIudmlld3BvcnQsIGxheWVyLnJpZ2h0Qm91bmRzKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dXBkYXRlQ29udHJvbGxlcnMoKTtcclxuXHJcblx0XHRyZXR1cm4gY2FtZXJhVlI7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZ2V0U3RhbmRpbmdNYXRyaXggPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHN0YW5kaW5nTWF0cml4O1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmlzUHJlc2VudGluZyA9IGlzUHJlc2VudGluZztcclxuXHJcblx0Ly8gQW5pbWF0aW9uIExvb3BcclxuXHJcblx0dmFyIGFuaW1hdGlvbiA9IG5ldyBXZWJHTEFuaW1hdGlvbigpO1xyXG5cclxuXHR0aGlzLnNldEFuaW1hdGlvbkxvb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHJcblx0XHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcChjYWxsYmFjayk7XHJcblxyXG5cdFx0aWYgKGlzUHJlc2VudGluZygpKSB7IGFuaW1hdGlvbi5zdGFydCgpOyB9XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKGlzUHJlc2VudGluZygpKSB7IGRldmljZS5zdWJtaXRGcmFtZSgpOyB9XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcblx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2cmRpc3BsYXlwcmVzZW50Y2hhbmdlJywgb25WUkRpc3BsYXlQcmVzZW50Q2hhbmdlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdC8vIERFUFJFQ0FURURcclxuXHJcblx0dGhpcy5zZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYlZSTWFuYWdlcjogc2V0RnJhbWVPZlJlZmVyZW5jZVR5cGUoKSBoYXMgYmVlbiBkZXByZWNhdGVkLicpO1xyXG5cclxuXHR9O1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihXZWJWUk1hbmFnZXIucHJvdG90eXBlLCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlKTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYlhSTWFuYWdlcihyZW5kZXJlciwgZ2wpIHtcclxuXHJcblx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0dmFyIHNlc3Npb24gPSBudWxsO1xyXG5cclxuXHQvLyB2YXIgZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IDEuMDtcclxuXHJcblx0dmFyIHJlZmVyZW5jZVNwYWNlID0gbnVsbDtcclxuXHR2YXIgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJztcclxuXHJcblx0dmFyIHBvc2UgPSBudWxsO1xyXG5cclxuXHR2YXIgY29udHJvbGxlcnMgPSBbXTtcclxuXHR2YXIgaW5wdXRTb3VyY2VzID0gW107XHJcblxyXG5cdGZ1bmN0aW9uIGlzUHJlc2VudGluZygpIHtcclxuXHJcblx0XHRyZXR1cm4gc2Vzc2lvbiAhPT0gbnVsbCAmJiByZWZlcmVuY2VTcGFjZSAhPT0gbnVsbDtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xyXG5cdGNhbWVyYUwubGF5ZXJzLmVuYWJsZSgxKTtcclxuXHRjYW1lcmFMLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcclxuXHJcblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcclxuXHRjYW1lcmFSLmxheWVycy5lbmFibGUoMik7XHJcblx0Y2FtZXJhUi52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XHJcblxyXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYShbY2FtZXJhTCwgY2FtZXJhUl0pO1xyXG5cdGNhbWVyYVZSLmxheWVycy5lbmFibGUoMSk7XHJcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSgyKTtcclxuXHJcblx0Ly9cclxuXHJcblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuZ2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uIChpZCkge1xyXG5cclxuXHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbaWRdO1xyXG5cclxuXHRcdGlmIChjb250cm9sbGVyID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnRyb2xsZXIgPSBuZXcgR3JvdXAoKTtcclxuXHRcdFx0Y29udHJvbGxlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Y29udHJvbGxlcnNbaWRdID0gY29udHJvbGxlcjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNvbnRyb2xsZXI7XHJcblxyXG5cdH07XHJcblxyXG5cdC8vXHJcblxyXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KGV2ZW50KSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0aWYgKGlucHV0U291cmNlc1tpXSA9PT0gZXZlbnQuaW5wdXRTb3VyY2UpIHtcclxuXHJcblx0XHRcdFx0Y29udHJvbGxlcnNbaV0uZGlzcGF0Y2hFdmVudCh7IHR5cGU6IGV2ZW50LnR5cGUgfSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRGcmFtZWJ1ZmZlcihudWxsKTtcclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChyZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSk7IC8vIEhhY2sgIzE1ODMwXHJcblx0XHRhbmltYXRpb24uc3RvcCgpO1xyXG5cclxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiAnc2Vzc2lvbmVuZCcgfSk7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gb25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UodmFsdWUpIHtcclxuXHJcblx0XHRyZWZlcmVuY2VTcGFjZSA9IHZhbHVlO1xyXG5cclxuXHRcdGFuaW1hdGlvbi5zZXRDb250ZXh0KHNlc3Npb24pO1xyXG5cdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XHJcblxyXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCh7IHR5cGU6ICdzZXNzaW9uc3RhcnQnIH0pO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMuc2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZ1bmN0aW9uICggLyogdmFsdWUgKi8pIHtcclxuXHJcblx0XHQvLyBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gdmFsdWU7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuc2V0UmVmZXJlbmNlU3BhY2VUeXBlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0cmVmZXJlbmNlU3BhY2VUeXBlID0gdmFsdWU7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gc2Vzc2lvbjtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0c2Vzc2lvbiA9IHZhbHVlO1xyXG5cclxuXHRcdGlmIChzZXNzaW9uICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdCcsIG9uU2Vzc2lvbkV2ZW50KTtcclxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIG9uU2Vzc2lvbkV2ZW50KTtcclxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlbmQnLCBvblNlc3Npb25FdmVudCk7XHJcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgb25TZXNzaW9uRW5kKTtcclxuXHJcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG5cdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKHsgYmFzZUxheWVyOiBuZXcgWFJXZWJHTExheWVyKHNlc3Npb24sIGdsKSB9KTtcclxuXHJcblx0XHRcdHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKHJlZmVyZW5jZVNwYWNlVHlwZSkudGhlbihvblJlcXVlc3RSZWZlcmVuY2VTcGFjZSk7XHJcblxyXG5cdFx0XHQvL1xyXG5cclxuXHRcdFx0aW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XHJcblxyXG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0c291cmNlc2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0aW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coaW5wdXRTb3VyY2VzKTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbaV07XHJcblx0XHRcdFx0XHRjb250cm9sbGVyLnVzZXJEYXRhLmlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzW2ldO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIHVwZGF0ZUNhbWVyYShjYW1lcmEsIHBhcmVudCkge1xyXG5cclxuXHRcdGlmIChwYXJlbnQgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KGNhbWVyYS5tYXRyaXgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyhwYXJlbnQubWF0cml4V29ybGQsIGNhbWVyYS5tYXRyaXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoY2FtZXJhLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0fVxyXG5cclxuXHR0aGlzLmdldENhbWVyYSA9IGZ1bmN0aW9uIChjYW1lcmEpIHtcclxuXHJcblx0XHRpZiAoaXNQcmVzZW50aW5nKCkpIHtcclxuXHJcblx0XHRcdHZhciBwYXJlbnQgPSBjYW1lcmEucGFyZW50O1xyXG5cdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYVZSLmNhbWVyYXM7XHJcblxyXG5cdFx0XHR1cGRhdGVDYW1lcmEoY2FtZXJhVlIsIHBhcmVudCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNhbWVyYXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dXBkYXRlQ2FtZXJhKGNhbWVyYXNbaV0sIHBhcmVudCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB1cGRhdGUgY2FtZXJhIGFuZCBpdHMgY2hpbGRyZW5cclxuXHJcblx0XHRcdGNhbWVyYS5tYXRyaXhXb3JsZC5jb3B5KGNhbWVyYVZSLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdHZhciBjaGlsZHJlbiA9IGNhbWVyYS5jaGlsZHJlbjtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGNoaWxkcmVuW2ldLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2V0UHJvamVjdGlvbkZyb21VbmlvbihjYW1lcmFWUiwgY2FtZXJhTCwgY2FtZXJhUik7XHJcblxyXG5cdFx0XHRyZXR1cm4gY2FtZXJhVlI7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjYW1lcmE7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuaXNQcmVzZW50aW5nID0gaXNQcmVzZW50aW5nO1xyXG5cclxuXHQvLyBBbmltYXRpb24gTG9vcFxyXG5cclxuXHR2YXIgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gbnVsbDtcclxuXHJcblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSh0aW1lLCBmcmFtZSkge1xyXG5cclxuXHRcdHBvc2UgPSBmcmFtZS5nZXRWaWV3ZXJQb3NlKHJlZmVyZW5jZVNwYWNlKTtcclxuXHJcblx0XHRpZiAocG9zZSAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dmFyIHZpZXdzID0gcG9zZS52aWV3cztcclxuXHRcdFx0dmFyIGJhc2VMYXllciA9IHNlc3Npb24ucmVuZGVyU3RhdGUuYmFzZUxheWVyO1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuc2V0RnJhbWVidWZmZXIoYmFzZUxheWVyLmZyYW1lYnVmZmVyKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIHZpZXcgPSB2aWV3c1tpXTtcclxuXHRcdFx0XHR2YXIgdmlld3BvcnQgPSBiYXNlTGF5ZXIuZ2V0Vmlld3BvcnQodmlldyk7XHJcblx0XHRcdFx0dmFyIHZpZXdNYXRyaXggPSB2aWV3LnRyYW5zZm9ybS5pbnZlcnNlLm1hdHJpeDtcclxuXHJcblx0XHRcdFx0dmFyIGNhbWVyYSA9IGNhbWVyYVZSLmNhbWVyYXNbaV07XHJcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5mcm9tQXJyYXkodmlld01hdHJpeCkuZ2V0SW52ZXJzZShjYW1lcmEubWF0cml4KTtcclxuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkodmlldy5wcm9qZWN0aW9uTWF0cml4KTtcclxuXHRcdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KHZpZXdwb3J0LngsIHZpZXdwb3J0LnksIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xyXG5cclxuXHRcdFx0XHRpZiAoaSA9PT0gMCkge1xyXG5cclxuXHRcdFx0XHRcdGNhbWVyYVZSLm1hdHJpeC5jb3B5KGNhbWVyYS5tYXRyaXgpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1tpXTtcclxuXHJcblx0XHRcdHZhciBpbnB1dFNvdXJjZSA9IGlucHV0U291cmNlc1tpXTtcclxuXHJcblx0XHRcdGlmIChpbnB1dFNvdXJjZSkge1xyXG5cclxuXHRcdFx0XHR2YXIgaW5wdXRQb3NlID0gZnJhbWUuZ2V0UG9zZShpbnB1dFNvdXJjZS50YXJnZXRSYXlTcGFjZSwgcmVmZXJlbmNlU3BhY2UpO1xyXG5cclxuXHRcdFx0XHRpZiAoaW5wdXRQb3NlICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29udHJvbGxlci5tYXRyaXguZnJvbUFycmF5KGlucHV0UG9zZS50cmFuc2Zvcm0ubWF0cml4KTtcclxuXHRcdFx0XHRcdGNvbnRyb2xsZXIubWF0cml4LmRlY29tcG9zZShjb250cm9sbGVyLnBvc2l0aW9uLCBjb250cm9sbGVyLnJvdGF0aW9uLCBjb250cm9sbGVyLnNjYWxlKTtcclxuXHRcdFx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnRyb2xsZXIudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAob25BbmltYXRpb25GcmFtZUNhbGxiYWNrKSB7IG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayh0aW1lKTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcclxuXHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcChvbkFuaW1hdGlvbkZyYW1lKTtcclxuXHJcblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblxyXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHsgfTtcclxuXHJcblx0Ly8gREVQUkVDQVRFRFxyXG5cclxuXHR0aGlzLmdldFN0YW5kaW5nTWF0cml4ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViWFJNYW5hZ2VyOiBnZXRTdGFuZGluZ01hdHJpeCgpIGlzIG5vIGxvbmdlciBuZWVkZWQuJyk7XHJcblx0XHRyZXR1cm4gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXREZXZpY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJYUk1hbmFnZXI6IGdldERldmljZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJyk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuc2V0RGV2aWNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViWFJNYW5hZ2VyOiBzZXREZXZpY2UoKSBoYXMgYmVlbiBkZXByZWNhdGVkLicpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldEZyYW1lT2ZSZWZlcmVuY2VUeXBlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViWFJNYW5hZ2VyOiBzZXRGcmFtZU9mUmVmZXJlbmNlVHlwZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJyk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuc3VibWl0RnJhbWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFdlYlhSTWFuYWdlci5wcm90b3R5cGUsIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUpO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cclxuICogQGF1dGhvciB0c2Nod1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFdlYkdMUmVuZGVyZXIocGFyYW1ldGVycykge1xyXG5cclxuXHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCB7fTtcclxuXHJcblx0dmFyIF9jYW52YXMgPSBwYXJhbWV0ZXJzLmNhbnZhcyAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jYW52YXMgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyksXHJcblx0XHRfY29udGV4dCA9IHBhcmFtZXRlcnMuY29udGV4dCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5jb250ZXh0IDogbnVsbCxcclxuXHJcblx0XHRfYWxwaGEgPSBwYXJhbWV0ZXJzLmFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmFscGhhIDogZmFsc2UsXHJcblx0XHRfZGVwdGggPSBwYXJhbWV0ZXJzLmRlcHRoICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmRlcHRoIDogdHJ1ZSxcclxuXHRcdF9zdGVuY2lsID0gcGFyYW1ldGVycy5zdGVuY2lsICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnN0ZW5jaWwgOiB0cnVlLFxyXG5cdFx0X2FudGlhbGlhcyA9IHBhcmFtZXRlcnMuYW50aWFsaWFzICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmFudGlhbGlhcyA6IGZhbHNlLFxyXG5cdFx0X3ByZW11bHRpcGxpZWRBbHBoYSA9IHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSA6IHRydWUsXHJcblx0XHRfcHJlc2VydmVEcmF3aW5nQnVmZmVyID0gcGFyYW1ldGVycy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlc2VydmVEcmF3aW5nQnVmZmVyIDogZmFsc2UsXHJcblx0XHRfcG93ZXJQcmVmZXJlbmNlID0gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucG93ZXJQcmVmZXJlbmNlIDogJ2RlZmF1bHQnLFxyXG5cdFx0X2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCA6IGZhbHNlO1xyXG5cclxuXHR2YXIgY3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xyXG5cdHZhciBjdXJyZW50UmVuZGVyU3RhdGUgPSBudWxsO1xyXG5cclxuXHQvLyBwdWJsaWMgcHJvcGVydGllc1xyXG5cclxuXHR0aGlzLmRvbUVsZW1lbnQgPSBfY2FudmFzO1xyXG5cclxuXHQvLyBEZWJ1ZyBjb25maWd1cmF0aW9uIGNvbnRhaW5lclxyXG5cdHRoaXMuZGVidWcgPSB7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBFbmFibGVzIGVycm9yIGNoZWNraW5nIGFuZCByZXBvcnRpbmcgd2hlbiBzaGFkZXIgcHJvZ3JhbXMgYXJlIGJlaW5nIGNvbXBpbGVkXHJcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0Y2hlY2tTaGFkZXJFcnJvcnM6IHRydWVcclxuXHR9O1xyXG5cclxuXHQvLyBjbGVhcmluZ1xyXG5cclxuXHR0aGlzLmF1dG9DbGVhciA9IHRydWU7XHJcblx0dGhpcy5hdXRvQ2xlYXJDb2xvciA9IHRydWU7XHJcblx0dGhpcy5hdXRvQ2xlYXJEZXB0aCA9IHRydWU7XHJcblx0dGhpcy5hdXRvQ2xlYXJTdGVuY2lsID0gdHJ1ZTtcclxuXHJcblx0Ly8gc2NlbmUgZ3JhcGhcclxuXHJcblx0dGhpcy5zb3J0T2JqZWN0cyA9IHRydWU7XHJcblxyXG5cdC8vIHVzZXItZGVmaW5lZCBjbGlwcGluZ1xyXG5cclxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gW107XHJcblx0dGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuXHQvLyBwaHlzaWNhbGx5IGJhc2VkIHNoYWRpbmdcclxuXHJcblx0dGhpcy5nYW1tYUZhY3RvciA9IDIuMDtcdC8vIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxyXG5cdHRoaXMuZ2FtbWFJbnB1dCA9IGZhbHNlO1xyXG5cdHRoaXMuZ2FtbWFPdXRwdXQgPSBmYWxzZTtcclxuXHJcblx0Ly8gcGh5c2ljYWwgbGlnaHRzXHJcblxyXG5cdHRoaXMucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSBmYWxzZTtcclxuXHJcblx0Ly8gdG9uZSBtYXBwaW5nXHJcblxyXG5cdHRoaXMudG9uZU1hcHBpbmcgPSBMaW5lYXJUb25lTWFwcGluZztcclxuXHR0aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7XHJcblx0dGhpcy50b25lTWFwcGluZ1doaXRlUG9pbnQgPSAxLjA7XHJcblxyXG5cdC8vIG1vcnBoc1xyXG5cclxuXHR0aGlzLm1heE1vcnBoVGFyZ2V0cyA9IDg7XHJcblx0dGhpcy5tYXhNb3JwaE5vcm1hbHMgPSA0O1xyXG5cclxuXHQvLyBpbnRlcm5hbCBwcm9wZXJ0aWVzXHJcblxyXG5cdHZhciBfdGhpcyA9IHRoaXMsXHJcblxyXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZSxcclxuXHJcblx0XHQvLyBpbnRlcm5hbCBzdGF0ZSBjYWNoZVxyXG5cclxuXHRcdF9mcmFtZWJ1ZmZlciA9IG51bGwsXHJcblxyXG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDAsXHJcblx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gMCxcclxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gbnVsbCxcclxuXHRcdF9jdXJyZW50RnJhbWVidWZmZXIgPSBudWxsLFxyXG5cdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxLFxyXG5cclxuXHRcdC8vIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGNhY2hpbmdcclxuXHJcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSA9IHtcclxuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXHJcblx0XHRcdHByb2dyYW06IG51bGwsXHJcblx0XHRcdHdpcmVmcmFtZTogZmFsc2VcclxuXHRcdH0sXHJcblxyXG5cdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsLFxyXG5cdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IG51bGwsXHJcblxyXG5cdFx0X2N1cnJlbnRWaWV3cG9ydCA9IG5ldyBWZWN0b3I0KCksXHJcblx0XHRfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLFxyXG5cdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IG51bGwsXHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRfd2lkdGggPSBfY2FudmFzLndpZHRoLFxyXG5cdFx0X2hlaWdodCA9IF9jYW52YXMuaGVpZ2h0LFxyXG5cclxuXHRcdF9waXhlbFJhdGlvID0gMSxcclxuXHJcblx0XHRfdmlld3BvcnQgPSBuZXcgVmVjdG9yNCgwLCAwLCBfd2lkdGgsIF9oZWlnaHQpLFxyXG5cdFx0X3NjaXNzb3IgPSBuZXcgVmVjdG9yNCgwLCAwLCBfd2lkdGgsIF9oZWlnaHQpLFxyXG5cdFx0X3NjaXNzb3JUZXN0ID0gZmFsc2UsXHJcblxyXG5cdFx0Ly8gZnJ1c3R1bVxyXG5cclxuXHRcdF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcclxuXHJcblx0XHQvLyBjbGlwcGluZ1xyXG5cclxuXHRcdF9jbGlwcGluZyA9IG5ldyBXZWJHTENsaXBwaW5nKCksXHJcblx0XHRfY2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXHJcblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcclxuXHJcblx0XHQvLyBjYW1lcmEgbWF0cmljZXMgY2FjaGVcclxuXHJcblx0XHRfcHJvalNjcmVlbk1hdHJpeCA9IG5ldyBNYXRyaXg0KCksXHJcblxyXG5cdFx0X3ZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRmdW5jdGlvbiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkge1xyXG5cclxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCA/IF9waXhlbFJhdGlvIDogMTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBpbml0aWFsaXplXHJcblxyXG5cdHZhciBfZ2w7XHJcblxyXG5cdHRyeSB7XHJcblxyXG5cdFx0dmFyIGNvbnRleHRBdHRyaWJ1dGVzID0ge1xyXG5cdFx0XHRhbHBoYTogX2FscGhhLFxyXG5cdFx0XHRkZXB0aDogX2RlcHRoLFxyXG5cdFx0XHRzdGVuY2lsOiBfc3RlbmNpbCxcclxuXHRcdFx0YW50aWFsaWFzOiBfYW50aWFsaWFzLFxyXG5cdFx0XHRwcmVtdWx0aXBsaWVkQWxwaGE6IF9wcmVtdWx0aXBsaWVkQWxwaGEsXHJcblx0XHRcdHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogX3ByZXNlcnZlRHJhd2luZ0J1ZmZlcixcclxuXHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBfcG93ZXJQcmVmZXJlbmNlLFxyXG5cdFx0XHRmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiBfZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCxcclxuXHRcdFx0eHJDb21wYXRpYmxlOiB0cnVlXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIGV2ZW50IGxpc3RlbmVycyBtdXN0IGJlIHJlZ2lzdGVyZWQgYmVmb3JlIFdlYkdMIGNvbnRleHQgaXMgY3JlYXRlZCwgc2VlICMxMjc1M1xyXG5cclxuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlKTtcclxuXHRcdF9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSk7XHJcblxyXG5cdFx0X2dsID0gX2NvbnRleHQgfHwgX2NhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzKSB8fCBfY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzKTtcclxuXHJcblx0XHRpZiAoX2dsID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRpZiAoX2NhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dCB3aXRoIHlvdXIgc2VsZWN0ZWQgYXR0cmlidXRlcy4nKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dC4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU29tZSBleHBlcmltZW50YWwtd2ViZ2wgaW1wbGVtZW50YXRpb25zIGRvIG5vdCBoYXZlIGdldFNoYWRlclByZWNpc2lvbkZvcm1hdFxyXG5cclxuXHRcdGlmIChfZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdF9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiB7ICdyYW5nZU1pbic6IDEsICdyYW5nZU1heCc6IDEsICdwcmVjaXNpb24nOiAxIH07XHJcblxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAnICsgZXJyb3IubWVzc2FnZSk7XHJcblx0XHR0aHJvdyBlcnJvcjtcclxuXHJcblx0fVxyXG5cclxuXHR2YXIgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBzdGF0ZSwgaW5mbztcclxuXHR2YXIgcHJvcGVydGllcywgdGV4dHVyZXMsIGF0dHJpYnV0ZXMsIGdlb21ldHJpZXMsIG9iamVjdHM7XHJcblx0dmFyIHByb2dyYW1DYWNoZSwgcmVuZGVyTGlzdHMsIHJlbmRlclN0YXRlcztcclxuXHJcblx0dmFyIGJhY2tncm91bmQsIG1vcnBodGFyZ2V0cywgYnVmZmVyUmVuZGVyZXIsIGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcclxuXHJcblx0dmFyIHV0aWxzO1xyXG5cclxuXHRmdW5jdGlvbiBpbml0R0xDb250ZXh0KCkge1xyXG5cclxuXHRcdGV4dGVuc2lvbnMgPSBuZXcgV2ViR0xFeHRlbnNpb25zKF9nbCk7XHJcblxyXG5cdFx0Y2FwYWJpbGl0aWVzID0gbmV3IFdlYkdMQ2FwYWJpbGl0aWVzKF9nbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyk7XHJcblxyXG5cdFx0aWYgKGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9kZXB0aF90ZXh0dXJlJyk7XHJcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCdPRVNfdGV4dHVyZV9mbG9hdCcpO1xyXG5cdFx0XHRleHRlbnNpb25zLmdldCgnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcpO1xyXG5cdFx0XHRleHRlbnNpb25zLmdldCgnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInKTtcclxuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcycpO1xyXG5cdFx0XHRleHRlbnNpb25zLmdldCgnT0VTX2VsZW1lbnRfaW5kZXhfdWludCcpO1xyXG5cdFx0XHRleHRlbnNpb25zLmdldCgnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRleHRlbnNpb25zLmdldCgnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XHJcblxyXG5cdFx0dXRpbHMgPSBuZXcgV2ViR0xVdGlscyhfZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyk7XHJcblxyXG5cdFx0c3RhdGUgPSBuZXcgV2ViR0xTdGF0ZShfZ2wsIGV4dGVuc2lvbnMsIHV0aWxzLCBjYXBhYmlsaXRpZXMpO1xyXG5cdFx0c3RhdGUuc2Npc3NvcihfY3VycmVudFNjaXNzb3IuY29weShfc2Npc3NvcikubXVsdGlwbHlTY2FsYXIoX3BpeGVsUmF0aW8pLmZsb29yKCkpO1xyXG5cdFx0c3RhdGUudmlld3BvcnQoX2N1cnJlbnRWaWV3cG9ydC5jb3B5KF92aWV3cG9ydCkubXVsdGlwbHlTY2FsYXIoX3BpeGVsUmF0aW8pLmZsb29yKCkpO1xyXG5cclxuXHRcdGluZm8gPSBuZXcgV2ViR0xJbmZvKF9nbCk7XHJcblx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYkdMUHJvcGVydGllcygpO1xyXG5cdFx0dGV4dHVyZXMgPSBuZXcgV2ViR0xUZXh0dXJlcyhfZ2wsIGV4dGVuc2lvbnMsIHN0YXRlLCBwcm9wZXJ0aWVzLCBjYXBhYmlsaXRpZXMsIHV0aWxzLCBpbmZvKTtcclxuXHRcdGF0dHJpYnV0ZXMgPSBuZXcgV2ViR0xBdHRyaWJ1dGVzKF9nbCk7XHJcblx0XHRnZW9tZXRyaWVzID0gbmV3IFdlYkdMR2VvbWV0cmllcyhfZ2wsIGF0dHJpYnV0ZXMsIGluZm8pO1xyXG5cdFx0b2JqZWN0cyA9IG5ldyBXZWJHTE9iamVjdHMoX2dsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvKTtcclxuXHRcdG1vcnBodGFyZ2V0cyA9IG5ldyBXZWJHTE1vcnBodGFyZ2V0cyhfZ2wpO1xyXG5cdFx0cHJvZ3JhbUNhY2hlID0gbmV3IFdlYkdMUHJvZ3JhbXMoX3RoaXMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyk7XHJcblx0XHRyZW5kZXJMaXN0cyA9IG5ldyBXZWJHTFJlbmRlckxpc3RzKCk7XHJcblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZXMoKTtcclxuXHJcblx0XHRiYWNrZ3JvdW5kID0gbmV3IFdlYkdMQmFja2dyb3VuZChfdGhpcywgc3RhdGUsIG9iamVjdHMsIF9wcmVtdWx0aXBsaWVkQWxwaGEpO1xyXG5cclxuXHRcdGJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMQnVmZmVyUmVuZGVyZXIoX2dsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMpO1xyXG5cdFx0aW5kZXhlZEJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKF9nbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzKTtcclxuXHJcblx0XHRpbmZvLnByb2dyYW1zID0gcHJvZ3JhbUNhY2hlLnByb2dyYW1zO1xyXG5cclxuXHRcdF90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcclxuXHRcdF90aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xyXG5cdFx0X3RoaXMucHJvcGVydGllcyA9IHByb3BlcnRpZXM7XHJcblx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xyXG5cdFx0X3RoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHRcdF90aGlzLmluZm8gPSBpbmZvO1xyXG5cclxuXHR9XHJcblxyXG5cdGluaXRHTENvbnRleHQoKTtcclxuXHJcblx0Ly8gdnJcclxuXHJcblx0dmFyIHZyID0gKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmICd4cicgaW4gbmF2aWdhdG9yICYmICdzdXBwb3J0c1Nlc3Npb24nIGluIG5hdmlnYXRvci54cikgPyBuZXcgV2ViWFJNYW5hZ2VyKF90aGlzLCBfZ2wpIDogbmV3IFdlYlZSTWFuYWdlcihfdGhpcyk7XHJcblxyXG5cdHRoaXMudnIgPSB2cjtcclxuXHJcblx0Ly8gTXVsdGl2aWV3XHJcblxyXG5cdHZhciBtdWx0aXZpZXcgPSBuZXcgV2ViR0xNdWx0aXZpZXcoX3RoaXMsIF9nbCk7XHJcblxyXG5cdC8vIHNoYWRvdyBtYXBcclxuXHJcblx0dmFyIHNoYWRvd01hcCA9IG5ldyBXZWJHTFNoYWRvd01hcChfdGhpcywgb2JqZWN0cywgY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplKTtcclxuXHJcblx0dGhpcy5zaGFkb3dNYXAgPSBzaGFkb3dNYXA7XHJcblxyXG5cdC8vIEFQSVxyXG5cclxuXHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIF9nbDtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gX2dsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoJ1dFQkdMX2xvc2VfY29udGV4dCcpO1xyXG5cdFx0aWYgKGV4dGVuc2lvbikgeyBleHRlbnNpb24ubG9zZUNvbnRleHQoKTsgfVxyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmZvcmNlQ29udGV4dFJlc3RvcmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9sb3NlX2NvbnRleHQnKTtcclxuXHRcdGlmIChleHRlbnNpb24pIHsgZXh0ZW5zaW9uLnJlc3RvcmVDb250ZXh0KCk7IH1cclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBfcGl4ZWxSYXRpbztcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRQaXhlbFJhdGlvID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcclxuXHJcblx0XHR0aGlzLnNldFNpemUoX3dpZHRoLCBfaGVpZ2h0LCBmYWxzZSk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZ2V0U2l6ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignV2ViR0xSZW5kZXJlcjogLmdldHNpemUoKSBub3cgcmVxdWlyZXMgYSBWZWN0b3IyIGFzIGFuIGFyZ3VtZW50Jyk7XHJcblxyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LnNldChfd2lkdGgsIF9oZWlnaHQpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUpIHtcclxuXHJcblx0XHRpZiAodnIuaXNQcmVzZW50aW5nKCkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogQ2FuXFwndCBjaGFuZ2Ugc2l6ZSB3aGlsZSBWUiBkZXZpY2UgaXMgcHJlc2VudGluZy4nKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRfd2lkdGggPSB3aWR0aDtcclxuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0X2NhbnZhcy53aWR0aCA9IE1hdGguZmxvb3Iod2lkdGggKiBfcGl4ZWxSYXRpbyk7XHJcblx0XHRfY2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0ICogX3BpeGVsUmF0aW8pO1xyXG5cclxuXHRcdGlmICh1cGRhdGVTdHlsZSAhPT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdF9jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcblx0XHRcdF9jYW52YXMuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zZXRWaWV3cG9ydCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignV2ViR0xSZW5kZXJlcjogLmdldGRyYXdpbmdCdWZmZXJTaXplKCkgbm93IHJlcXVpcmVzIGEgVmVjdG9yMiBhcyBhbiBhcmd1bWVudCcpO1xyXG5cclxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoX3dpZHRoICogX3BpeGVsUmF0aW8sIF9oZWlnaHQgKiBfcGl4ZWxSYXRpbykuZmxvb3IoKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvKSB7XHJcblxyXG5cdFx0X3dpZHRoID0gd2lkdGg7XHJcblx0XHRfaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdF9waXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcclxuXHJcblx0XHRfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vcih3aWR0aCAqIHBpeGVsUmF0aW8pO1xyXG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKGhlaWdodCAqIHBpeGVsUmF0aW8pO1xyXG5cclxuXHRcdHRoaXMuc2V0Vmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuZ2V0Q3VycmVudFZpZXdwb3J0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdXZWJHTFJlbmRlcmVyOiAuZ2V0Q3VycmVudFZpZXdwb3J0KCkgbm93IHJlcXVpcmVzIGEgVmVjdG9yNCBhcyBhbiBhcmd1bWVudCcpO1xyXG5cclxuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjQoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KF9jdXJyZW50Vmlld3BvcnQpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmdldFZpZXdwb3J0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weShfdmlld3BvcnQpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcblx0XHRpZiAoeC5pc1ZlY3RvcjQpIHtcclxuXHJcblx0XHRcdF92aWV3cG9ydC5zZXQoeC54LCB4LnksIHgueiwgeC53KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X3ZpZXdwb3J0LnNldCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0c3RhdGUudmlld3BvcnQoX2N1cnJlbnRWaWV3cG9ydC5jb3B5KF92aWV3cG9ydCkubXVsdGlwbHlTY2FsYXIoX3BpeGVsUmF0aW8pLmZsb29yKCkpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmdldFNjaXNzb3IgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRhcmdldC5jb3B5KF9zY2lzc29yKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRTY2lzc29yID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcblx0XHRpZiAoeC5pc1ZlY3RvcjQpIHtcclxuXHJcblx0XHRcdF9zY2lzc29yLnNldCh4LngsIHgueSwgeC56LCB4LncpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfc2Npc3Nvci5zZXQoeCwgeSwgd2lkdGgsIGhlaWdodCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHN0YXRlLnNjaXNzb3IoX2N1cnJlbnRTY2lzc29yLmNvcHkoX3NjaXNzb3IpLm11bHRpcGx5U2NhbGFyKF9waXhlbFJhdGlvKS5mbG9vcigpKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gX3NjaXNzb3JUZXN0O1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFNjaXNzb3JUZXN0ID0gZnVuY3Rpb24gKGJvb2xlYW4pIHtcclxuXHJcblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdChfc2Npc3NvclRlc3QgPSBib29sZWFuKTtcclxuXHJcblx0fTtcclxuXHJcblx0Ly8gQ2xlYXJpbmdcclxuXHJcblx0dGhpcy5nZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5zZXRDbGVhckNvbG9yID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseShiYWNrZ3JvdW5kLCBhcmd1bWVudHMpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIGJhY2tncm91bmQuZ2V0Q2xlYXJBbHBoYSgpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0YmFja2dyb3VuZC5zZXRDbGVhckFscGhhLmFwcGx5KGJhY2tncm91bmQsIGFyZ3VtZW50cyk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuY2xlYXIgPSBmdW5jdGlvbiAoY29sb3IsIGRlcHRoLCBzdGVuY2lsKSB7XHJcblxyXG5cdFx0dmFyIGJpdHMgPSAwO1xyXG5cclxuXHRcdGlmIChjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yKSB7IGJpdHMgfD0gMTYzODQ7IH1cclxuXHRcdGlmIChkZXB0aCA9PT0gdW5kZWZpbmVkIHx8IGRlcHRoKSB7IGJpdHMgfD0gMjU2OyB9XHJcblx0XHRpZiAoc3RlbmNpbCA9PT0gdW5kZWZpbmVkIHx8IHN0ZW5jaWwpIHsgYml0cyB8PSAxMDI0OyB9XHJcblxyXG5cdFx0X2dsLmNsZWFyKGJpdHMpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmNsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5jbGVhcih0cnVlLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmNsZWFyRGVwdGggPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5jbGVhcihmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmNsZWFyU3RlbmNpbCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmNsZWFyKGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG5cdH07XHJcblxyXG5cdC8vXHJcblxyXG5cdHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRfY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dGxvc3QnLCBvbkNvbnRleHRMb3N0LCBmYWxzZSk7XHJcblx0XHRfY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmdsY29udGV4dHJlc3RvcmVkJywgb25Db250ZXh0UmVzdG9yZSwgZmFsc2UpO1xyXG5cclxuXHRcdHJlbmRlckxpc3RzLmRpc3Bvc2UoKTtcclxuXHRcdHJlbmRlclN0YXRlcy5kaXNwb3NlKCk7XHJcblx0XHRwcm9wZXJ0aWVzLmRpc3Bvc2UoKTtcclxuXHRcdG9iamVjdHMuZGlzcG9zZSgpO1xyXG5cclxuXHRcdHZyLmRpc3Bvc2UoKTtcclxuXHJcblx0XHRhbmltYXRpb24uc3RvcCgpO1xyXG5cclxuXHR9O1xyXG5cclxuXHQvLyBFdmVudHNcclxuXHJcblx0ZnVuY3Rpb24gb25Db250ZXh0TG9zdChldmVudCkge1xyXG5cclxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0Y29uc29sZS5sb2coJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgTG9zdC4nKTtcclxuXHJcblx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gb25Db250ZXh0UmVzdG9yZSggLyogZXZlbnQgKi8pIHtcclxuXHJcblx0XHRjb25zb2xlLmxvZygnVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBSZXN0b3JlZC4nKTtcclxuXHJcblx0XHRfaXNDb250ZXh0TG9zdCA9IGZhbHNlO1xyXG5cclxuXHRcdGluaXRHTENvbnRleHQoKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBvbk1hdGVyaWFsRGlzcG9zZShldmVudCkge1xyXG5cclxuXHRcdHZhciBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcclxuXHJcblx0XHRtYXRlcmlhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UpO1xyXG5cclxuXHRcdGRlYWxsb2NhdGVNYXRlcmlhbChtYXRlcmlhbCk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gQnVmZmVyIGRlYWxsb2NhdGlvblxyXG5cclxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlTWF0ZXJpYWwobWF0ZXJpYWwpIHtcclxuXHJcblx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKG1hdGVyaWFsKTtcclxuXHJcblx0XHRwcm9wZXJ0aWVzLnJlbW92ZShtYXRlcmlhbCk7XHJcblxyXG5cdH1cclxuXHJcblxyXG5cdGZ1bmN0aW9uIHJlbGVhc2VNYXRlcmlhbFByb2dyYW1SZWZlcmVuY2UobWF0ZXJpYWwpIHtcclxuXHJcblx0XHR2YXIgcHJvZ3JhbUluZm8gPSBwcm9wZXJ0aWVzLmdldChtYXRlcmlhbCkucHJvZ3JhbTtcclxuXHJcblx0XHRtYXRlcmlhbC5wcm9ncmFtID0gdW5kZWZpbmVkO1xyXG5cclxuXHRcdGlmIChwcm9ncmFtSW5mbyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRwcm9ncmFtQ2FjaGUucmVsZWFzZVByb2dyYW0ocHJvZ3JhbUluZm8pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBCdWZmZXIgcmVuZGVyaW5nXHJcblxyXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdEltbWVkaWF0ZShvYmplY3QsIHByb2dyYW0pIHtcclxuXHJcblx0XHRvYmplY3QucmVuZGVyKGZ1bmN0aW9uIChvYmplY3QpIHtcclxuXHJcblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckltbWVkaWF0ZShvYmplY3QsIHByb2dyYW0pO1xyXG5cclxuXHRcdH0pO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlID0gZnVuY3Rpb24gKG9iamVjdCwgcHJvZ3JhbSkge1xyXG5cclxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XHJcblxyXG5cdFx0dmFyIGJ1ZmZlcnMgPSBwcm9wZXJ0aWVzLmdldChvYmplY3QpO1xyXG5cclxuXHRcdGlmIChvYmplY3QuaGFzUG9zaXRpb25zICYmICFidWZmZXJzLnBvc2l0aW9uKSB7IGJ1ZmZlcnMucG9zaXRpb24gPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH1cclxuXHRcdGlmIChvYmplY3QuaGFzTm9ybWFscyAmJiAhYnVmZmVycy5ub3JtYWwpIHsgYnVmZmVycy5ub3JtYWwgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH1cclxuXHRcdGlmIChvYmplY3QuaGFzVXZzICYmICFidWZmZXJzLnV2KSB7IGJ1ZmZlcnMudXYgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH1cclxuXHRcdGlmIChvYmplY3QuaGFzQ29sb3JzICYmICFidWZmZXJzLmNvbG9yKSB7IGJ1ZmZlcnMuY29sb3IgPSBfZ2wuY3JlYXRlQnVmZmVyKCk7IH1cclxuXHJcblx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcclxuXHJcblx0XHRpZiAob2JqZWN0Lmhhc1Bvc2l0aW9ucykge1xyXG5cclxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoMzQ5NjIsIGJ1ZmZlcnMucG9zaXRpb24pO1xyXG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSgzNDk2Miwgb2JqZWN0LnBvc2l0aW9uQXJyYXksIDM1MDQ4KTtcclxuXHJcblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZShwcm9ncmFtQXR0cmlidXRlcy5wb3NpdGlvbik7XHJcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvYmplY3QuaGFzTm9ybWFscykge1xyXG5cclxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoMzQ5NjIsIGJ1ZmZlcnMubm9ybWFsKTtcclxuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoMzQ5NjIsIG9iamVjdC5ub3JtYWxBcnJheSwgMzUwNDgpO1xyXG5cclxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKHByb2dyYW1BdHRyaWJ1dGVzLm5vcm1hbCk7XHJcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGVzLm5vcm1hbCwgMywgNTEyNiwgZmFsc2UsIDAsIDApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAob2JqZWN0Lmhhc1V2cykge1xyXG5cclxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoMzQ5NjIsIGJ1ZmZlcnMudXYpO1xyXG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSgzNDk2Miwgb2JqZWN0LnV2QXJyYXksIDM1MDQ4KTtcclxuXHJcblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZShwcm9ncmFtQXR0cmlidXRlcy51dik7XHJcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGVzLnV2LCAyLCA1MTI2LCBmYWxzZSwgMCwgMCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvYmplY3QuaGFzQ29sb3JzKSB7XHJcblxyXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlcigzNDk2MiwgYnVmZmVycy5jb2xvcik7XHJcblx0XHRcdF9nbC5idWZmZXJEYXRhKDM0OTYyLCBvYmplY3QuY29sb3JBcnJheSwgMzUwNDgpO1xyXG5cclxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKHByb2dyYW1BdHRyaWJ1dGVzLmNvbG9yKTtcclxuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIocHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IsIDMsIDUxMjYsIGZhbHNlLCAwLCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0c3RhdGUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcclxuXHJcblx0XHRfZ2wuZHJhd0FycmF5cyg0LCAwLCBvYmplY3QuY291bnQpO1xyXG5cclxuXHRcdG9iamVjdC5jb3VudCA9IDA7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMucmVuZGVyQnVmZmVyRGlyZWN0ID0gZnVuY3Rpb24gKGNhbWVyYSwgZm9nLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG9iamVjdCwgZ3JvdXApIHtcclxuXHJcblx0XHR2YXIgZnJvbnRGYWNlQ1cgPSAob2JqZWN0LmlzTWVzaCAmJiBvYmplY3QubWF0cml4V29ybGQuZGV0ZXJtaW5hbnQoKSA8IDApO1xyXG5cclxuXHRcdHN0YXRlLnNldE1hdGVyaWFsKG1hdGVyaWFsLCBmcm9udEZhY2VDVyk7XHJcblxyXG5cdFx0dmFyIHByb2dyYW0gPSBzZXRQcm9ncmFtKGNhbWVyYSwgZm9nLCBtYXRlcmlhbCwgb2JqZWN0KTtcclxuXHJcblx0XHR2YXIgdXBkYXRlQnVmZmVycyA9IGZhbHNlO1xyXG5cclxuXHRcdGlmIChfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSAhPT0gZ2VvbWV0cnkuaWQgfHxcclxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSAhPT0gcHJvZ3JhbS5pZCB8fFxyXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgIT09IChtYXRlcmlhbC53aXJlZnJhbWUgPT09IHRydWUpKSB7XHJcblxyXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSA9IGdlb21ldHJ5LmlkO1xyXG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gcHJvZ3JhbS5pZDtcclxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlO1xyXG5cdFx0XHR1cGRhdGVCdWZmZXJzID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXMpIHtcclxuXHJcblx0XHRcdG1vcnBodGFyZ2V0cy51cGRhdGUob2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0pO1xyXG5cclxuXHRcdFx0dXBkYXRlQnVmZmVycyA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0dmFyIHJhbmdlRmFjdG9yID0gMTtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKGdlb21ldHJ5KTtcclxuXHRcdFx0cmFuZ2VGYWN0b3IgPSAyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYXR0cmlidXRlO1xyXG5cdFx0dmFyIHJlbmRlcmVyID0gYnVmZmVyUmVuZGVyZXI7XHJcblxyXG5cdFx0aWYgKGluZGV4ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldChpbmRleCk7XHJcblxyXG5cdFx0XHRyZW5kZXJlciA9IGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcclxuXHRcdFx0cmVuZGVyZXIuc2V0SW5kZXgoYXR0cmlidXRlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHVwZGF0ZUJ1ZmZlcnMpIHtcclxuXHJcblx0XHRcdHNldHVwVmVydGV4QXR0cmlidXRlcyhvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSk7XHJcblxyXG5cdFx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoMzQ5NjMsIGF0dHJpYnV0ZS5idWZmZXIpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHZhciBkYXRhQ291bnQgPSBJbmZpbml0eTtcclxuXHJcblx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdGRhdGFDb3VudCA9IGluZGV4LmNvdW50O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAocG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0ZGF0YUNvdW50ID0gcG9zaXRpb24uY291bnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByYW5nZVN0YXJ0ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLnN0YXJ0ICogcmFuZ2VGYWN0b3I7XHJcblx0XHR2YXIgcmFuZ2VDb3VudCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5jb3VudCAqIHJhbmdlRmFjdG9yO1xyXG5cclxuXHRcdHZhciBncm91cFN0YXJ0ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5zdGFydCAqIHJhbmdlRmFjdG9yIDogMDtcclxuXHRcdHZhciBncm91cENvdW50ID0gZ3JvdXAgIT09IG51bGwgPyBncm91cC5jb3VudCAqIHJhbmdlRmFjdG9yIDogSW5maW5pdHk7XHJcblxyXG5cdFx0dmFyIGRyYXdTdGFydCA9IE1hdGgubWF4KHJhbmdlU3RhcnQsIGdyb3VwU3RhcnQpO1xyXG5cdFx0dmFyIGRyYXdFbmQgPSBNYXRoLm1pbihkYXRhQ291bnQsIHJhbmdlU3RhcnQgKyByYW5nZUNvdW50LCBncm91cFN0YXJ0ICsgZ3JvdXBDb3VudCkgLSAxO1xyXG5cclxuXHRcdHZhciBkcmF3Q291bnQgPSBNYXRoLm1heCgwLCBkcmF3RW5kIC0gZHJhd1N0YXJ0ICsgMSk7XHJcblxyXG5cdFx0aWYgKGRyYXdDb3VudCA9PT0gMCkgeyByZXR1cm47IH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdGlmIChvYmplY3QuaXNNZXNoKSB7XHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdHN0YXRlLnNldExpbmVXaWR0aChtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkpO1xyXG5cdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoMSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRzd2l0Y2ggKG9iamVjdC5kcmF3TW9kZSkge1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVzRHJhd01vZGU6XHJcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoNCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgVHJpYW5nbGVTdHJpcERyYXdNb2RlOlxyXG5cdFx0XHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKDUpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlIFRyaWFuZ2xlRmFuRHJhd01vZGU6XHJcblx0XHRcdFx0XHRcdHJlbmRlcmVyLnNldE1vZGUoNik7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmIChvYmplY3QuaXNMaW5lKSB7XHJcblxyXG5cdFx0XHR2YXIgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xyXG5cclxuXHRcdFx0aWYgKGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkKSB7IGxpbmVXaWR0aCA9IDE7IH0gLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcclxuXHJcblx0XHRcdHN0YXRlLnNldExpbmVXaWR0aChsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkpO1xyXG5cclxuXHRcdFx0aWYgKG9iamVjdC5pc0xpbmVTZWdtZW50cykge1xyXG5cclxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKDEpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChvYmplY3QuaXNMaW5lTG9vcCkge1xyXG5cclxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKDIpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSgzKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKG9iamVjdC5pc1BvaW50cykge1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSgwKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG9iamVjdC5pc1Nwcml0ZSkge1xyXG5cclxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSg0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG9iamVjdC5pc0luc3RhbmNlZE1lc2gpIHtcclxuXHJcblx0XHRcdHJlbmRlcmVyLnJlbmRlckluc3RhbmNlcyhnZW9tZXRyeSwgZHJhd1N0YXJ0LCBkcmF3Q291bnQsIG9iamVjdC5jb3VudCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoZ2VvbWV0cnksIGRyYXdTdGFydCwgZHJhd0NvdW50LCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHJlbmRlcmVyLnJlbmRlcihkcmF3U3RhcnQsIGRyYXdDb3VudCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRmdW5jdGlvbiBzZXR1cFZlcnRleEF0dHJpYnV0ZXMob2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0pIHtcclxuXHJcblx0XHRpZiAoY2FwYWJpbGl0aWVzLmlzV2ViR0wyID09PSBmYWxzZSAmJiAob2JqZWN0LmlzSW5zdGFuY2VkTWVzaCB8fCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KSkge1xyXG5cclxuXHRcdFx0aWYgKGV4dGVuc2lvbnMuZ2V0KCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJykgPT09IG51bGwpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XHJcblxyXG5cdFx0dmFyIG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IG1hdGVyaWFsLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7XHJcblxyXG5cdFx0Zm9yICh2YXIgbmFtZSBpbiBwcm9ncmFtQXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGUgPSBwcm9ncmFtQXR0cmlidXRlc1tuYW1lXTtcclxuXHJcblx0XHRcdGlmIChwcm9ncmFtQXR0cmlidXRlID49IDApIHtcclxuXHJcblx0XHRcdFx0dmFyIGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzW25hbWVdO1xyXG5cclxuXHRcdFx0XHRpZiAoZ2VvbWV0cnlBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBub3JtYWxpemVkID0gZ2VvbWV0cnlBdHRyaWJ1dGUubm9ybWFsaXplZDtcclxuXHRcdFx0XHRcdHZhciBzaXplID0gZ2VvbWV0cnlBdHRyaWJ1dGUuaXRlbVNpemU7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KGdlb21ldHJ5QXR0cmlidXRlKTtcclxuXHJcblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcclxuXHJcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlID09PSB1bmRlZmluZWQpIHsgY29udGludWU7IH1cclxuXHJcblx0XHRcdFx0XHR2YXIgYnVmZmVyID0gYXR0cmlidXRlLmJ1ZmZlcjtcclxuXHRcdFx0XHRcdHZhciB0eXBlID0gYXR0cmlidXRlLnR5cGU7XHJcblx0XHRcdFx0XHR2YXIgYnl0ZXNQZXJFbGVtZW50ID0gYXR0cmlidXRlLmJ5dGVzUGVyRWxlbWVudDtcclxuXHJcblx0XHRcdFx0XHRpZiAoZ2VvbWV0cnlBdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGRhdGEgPSBnZW9tZXRyeUF0dHJpYnV0ZS5kYXRhO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7XHJcblx0XHRcdFx0XHRcdHZhciBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoZGF0YSAmJiBkYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcihwcm9ncmFtQXR0cmlidXRlLCBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID0gZGF0YS5tZXNoUGVyQXR0cmlidXRlICogZGF0YS5jb3VudDtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKHByb2dyYW1BdHRyaWJ1dGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoMzQ5NjIsIGJ1ZmZlcik7XHJcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGUsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSAqIGJ5dGVzUGVyRWxlbWVudCwgb2Zmc2V0ICogYnl0ZXNQZXJFbGVtZW50KTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGdlb21ldHJ5QXR0cmlidXRlLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IocHJvZ3JhbUF0dHJpYnV0ZSwgZ2VvbWV0cnlBdHRyaWJ1dGUubWVzaFBlckF0dHJpYnV0ZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5tZXNoUGVyQXR0cmlidXRlICogZ2VvbWV0cnlBdHRyaWJ1dGUuY291bnQ7XHJcblxyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZShwcm9ncmFtQXR0cmlidXRlKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdF9nbC5iaW5kQnVmZmVyKDM0OTYyLCBidWZmZXIpO1xyXG5cdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlcihwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCAwKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAobmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4Jykge1xyXG5cclxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldChvYmplY3QuaW5zdGFuY2VNYXRyaXgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIFRPRE8gQXR0cmlidXRlIG1heSBub3QgYmUgYXZhaWxhYmxlIG9uIGNvbnRleHQgcmVzdG9yZVxyXG5cclxuXHRcdFx0XHRcdGlmIChhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCkgeyBjb250aW51ZTsgfVxyXG5cclxuXHRcdFx0XHRcdHZhciBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xyXG5cdFx0XHRcdFx0dmFyIHR5cGUgPSBhdHRyaWJ1dGUudHlwZTtcclxuXHJcblx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKHByb2dyYW1BdHRyaWJ1dGUgKyAwLCAxKTtcclxuXHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IocHJvZ3JhbUF0dHJpYnV0ZSArIDEsIDEpO1xyXG5cdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvcihwcm9ncmFtQXR0cmlidXRlICsgMiwgMSk7XHJcblx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKHByb2dyYW1BdHRyaWJ1dGUgKyAzLCAxKTtcclxuXHJcblx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlcigzNDk2MiwgYnVmZmVyKTtcclxuXHJcblx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlcihwcm9ncmFtQXR0cmlidXRlICsgMCwgNCwgdHlwZSwgZmFsc2UsIDY0LCAwKTtcclxuXHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGUgKyAxLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDE2KTtcclxuXHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGUgKyAyLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDMyKTtcclxuXHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHByb2dyYW1BdHRyaWJ1dGUgKyAzLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDQ4KTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IG1hdGVyaWFsRGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1tuYW1lXTtcclxuXHJcblx0XHRcdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0c3dpdGNoICh2YWx1ZS5sZW5ndGgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAyOlxyXG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjJmdihwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSAzOlxyXG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjNmdihwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FzZSA0OlxyXG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjRmdihwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWIxZnYocHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzdGF0ZS5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIENvbXBpbGVcclxuXHJcblx0dGhpcy5jb21waWxlID0gZnVuY3Rpb24gKHNjZW5lLCBjYW1lcmEpIHtcclxuXHJcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KHNjZW5lLCBjYW1lcmEpO1xyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLmluaXQoKTtcclxuXHJcblx0XHRzY2VuZS50cmF2ZXJzZShmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0XHRpZiAob2JqZWN0LmlzTGlnaHQpIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodChvYmplY3QpO1xyXG5cclxuXHRcdFx0XHRpZiAob2JqZWN0LmNhc3RTaGFkb3cpIHtcclxuXHJcblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyhvYmplY3QpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKGNhbWVyYSk7XHJcblxyXG5cdFx0c2NlbmUudHJhdmVyc2UoZnVuY3Rpb24gKG9iamVjdCkge1xyXG5cclxuXHRcdFx0aWYgKG9iamVjdC5tYXRlcmlhbCkge1xyXG5cclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmplY3QubWF0ZXJpYWwpKSB7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubWF0ZXJpYWwubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdGluaXRNYXRlcmlhbChvYmplY3QubWF0ZXJpYWxbaV0sIHNjZW5lLmZvZywgb2JqZWN0KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0aW5pdE1hdGVyaWFsKG9iamVjdC5tYXRlcmlhbCwgc2NlbmUuZm9nLCBvYmplY3QpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdH07XHJcblxyXG5cdC8vIEFuaW1hdGlvbiBMb29wXHJcblxyXG5cdHZhciBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xyXG5cclxuXHRmdW5jdGlvbiBvbkFuaW1hdGlvbkZyYW1lKHRpbWUpIHtcclxuXHJcblx0XHRpZiAodnIuaXNQcmVzZW50aW5nKCkpIHsgcmV0dXJuOyB9XHJcblx0XHRpZiAob25BbmltYXRpb25GcmFtZUNhbGxiYWNrKSB7IG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayh0aW1lKTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcclxuXHRhbmltYXRpb24uc2V0QW5pbWF0aW9uTG9vcChvbkFuaW1hdGlvbkZyYW1lKTtcclxuXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IGFuaW1hdGlvbi5zZXRDb250ZXh0KHdpbmRvdyk7IH1cclxuXHJcblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblxyXG5cdFx0b25BbmltYXRpb25GcmFtZUNhbGxiYWNrID0gY2FsbGJhY2s7XHJcblx0XHR2ci5zZXRBbmltYXRpb25Mb29wKGNhbGxiYWNrKTtcclxuXHJcblx0XHRhbmltYXRpb24uc3RhcnQoKTtcclxuXHJcblx0fTtcclxuXHJcblx0Ly8gUmVuZGVyaW5nXHJcblxyXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKHNjZW5lLCBjYW1lcmEpIHtcclxuXHJcblx0XHR2YXIgcmVuZGVyVGFyZ2V0LCBmb3JjZUNsZWFyO1xyXG5cclxuXHRcdGlmIChhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcigpOiB0aGUgcmVuZGVyVGFyZ2V0IGFyZ3VtZW50IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc2V0UmVuZGVyVGFyZ2V0KCkgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmVuZGVyVGFyZ2V0ID0gYXJndW1lbnRzWzJdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlci5yZW5kZXIoKTogdGhlIGZvcmNlQ2xlYXIgYXJndW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5jbGVhcigpIGluc3RlYWQuJyk7XHJcblx0XHRcdGZvcmNlQ2xlYXIgPSBhcmd1bWVudHNbM107XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghKGNhbWVyYSAmJiBjYW1lcmEuaXNDYW1lcmEpKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKF9pc0NvbnRleHRMb3N0KSB7IHJldHVybjsgfVxyXG5cclxuXHRcdC8vIHJlc2V0IGNhY2hpbmcgZm9yIHRoaXMgZnJhbWVcclxuXHJcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5nZW9tZXRyeSA9IG51bGw7XHJcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gbnVsbDtcclxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gLSAxO1xyXG5cdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsO1xyXG5cclxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxyXG5cclxuXHRcdGlmIChzY2VuZS5hdXRvVXBkYXRlID09PSB0cnVlKSB7IHNjZW5lLnVwZGF0ZU1hdHJpeFdvcmxkKCk7IH1cclxuXHJcblx0XHQvLyB1cGRhdGUgY2FtZXJhIG1hdHJpY2VzIGFuZCBmcnVzdHVtXHJcblxyXG5cdFx0aWYgKGNhbWVyYS5wYXJlbnQgPT09IG51bGwpIHsgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7IH1cclxuXHJcblx0XHRpZiAodnIuZW5hYmxlZCkge1xyXG5cclxuXHRcdFx0Y2FtZXJhID0gdnIuZ2V0Q2FtZXJhKGNhbWVyYSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldChzY2VuZSwgY2FtZXJhKTtcclxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5pbml0KCk7XHJcblxyXG5cdFx0c2NlbmUub25CZWZvcmVSZW5kZXIoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIHJlbmRlclRhcmdldCB8fCBfY3VycmVudFJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhjYW1lcmEucHJvamVjdGlvbk1hdHJpeCwgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblx0XHRfZnJ1c3R1bS5zZXRGcm9tTWF0cml4KF9wcm9qU2NyZWVuTWF0cml4KTtcclxuXHJcblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSB0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkO1xyXG5cdFx0X2NsaXBwaW5nRW5hYmxlZCA9IF9jbGlwcGluZy5pbml0KHRoaXMuY2xpcHBpbmdQbGFuZXMsIF9sb2NhbENsaXBwaW5nRW5hYmxlZCwgY2FtZXJhKTtcclxuXHJcblx0XHRjdXJyZW50UmVuZGVyTGlzdCA9IHJlbmRlckxpc3RzLmdldChzY2VuZSwgY2FtZXJhKTtcclxuXHRcdGN1cnJlbnRSZW5kZXJMaXN0LmluaXQoKTtcclxuXHJcblx0XHRwcm9qZWN0T2JqZWN0KHNjZW5lLCBjYW1lcmEsIDAsIF90aGlzLnNvcnRPYmplY3RzKTtcclxuXHJcblx0XHRpZiAoX3RoaXMuc29ydE9iamVjdHMgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnNvcnQoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRpZiAoX2NsaXBwaW5nRW5hYmxlZCkgeyBfY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7IH1cclxuXHJcblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcclxuXHJcblx0XHRzaGFkb3dNYXAucmVuZGVyKHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSk7XHJcblxyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKGNhbWVyYSk7XHJcblxyXG5cdFx0aWYgKF9jbGlwcGluZ0VuYWJsZWQpIHsgX2NsaXBwaW5nLmVuZFNoYWRvd3MoKTsgfVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKHRoaXMuaW5mby5hdXRvUmVzZXQpIHsgdGhpcy5pbmZvLnJlc2V0KCk7IH1cclxuXHJcblx0XHRpZiAocmVuZGVyVGFyZ2V0ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHRoaXMuc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2ci5lbmFibGVkICYmIG11bHRpdmlldy5pc0F2YWlsYWJsZSgpKSB7XHJcblxyXG5cdFx0XHRtdWx0aXZpZXcuYXR0YWNoQ2FtZXJhKGNhbWVyYSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0YmFja2dyb3VuZC5yZW5kZXIoY3VycmVudFJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIpO1xyXG5cclxuXHRcdC8vIHJlbmRlciBzY2VuZVxyXG5cclxuXHRcdHZhciBvcGFxdWVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3Qub3BhcXVlO1xyXG5cdFx0dmFyIHRyYW5zcGFyZW50T2JqZWN0cyA9IGN1cnJlbnRSZW5kZXJMaXN0LnRyYW5zcGFyZW50O1xyXG5cclxuXHRcdGlmIChzY2VuZS5vdmVycmlkZU1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHR2YXIgb3ZlcnJpZGVNYXRlcmlhbCA9IHNjZW5lLm92ZXJyaWRlTWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRpZiAob3BhcXVlT2JqZWN0cy5sZW5ndGgpIHsgcmVuZGVyT2JqZWN0cyhvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsKTsgfVxyXG5cdFx0XHRpZiAodHJhbnNwYXJlbnRPYmplY3RzLmxlbmd0aCkgeyByZW5kZXJPYmplY3RzKHRyYW5zcGFyZW50T2JqZWN0cywgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCk7IH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gb3BhcXVlIHBhc3MgKGZyb250LXRvLWJhY2sgb3JkZXIpXHJcblxyXG5cdFx0XHRpZiAob3BhcXVlT2JqZWN0cy5sZW5ndGgpIHsgcmVuZGVyT2JqZWN0cyhvcGFxdWVPYmplY3RzLCBzY2VuZSwgY2FtZXJhKTsgfVxyXG5cclxuXHRcdFx0Ly8gdHJhbnNwYXJlbnQgcGFzcyAoYmFjay10by1mcm9udCBvcmRlcilcclxuXHJcblx0XHRcdGlmICh0cmFuc3BhcmVudE9iamVjdHMubGVuZ3RoKSB7IHJlbmRlck9iamVjdHModHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhKTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHNjZW5lLm9uQWZ0ZXJSZW5kZXIoX3RoaXMsIHNjZW5lLCBjYW1lcmEpO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0aWYgKF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHQvLyBHZW5lcmF0ZSBtaXBtYXAgaWYgd2UncmUgdXNpbmcgYW55IGtpbmQgb2YgbWlwbWFwIGZpbHRlcmluZ1xyXG5cclxuXHRcdFx0dGV4dHVyZXMudXBkYXRlUmVuZGVyVGFyZ2V0TWlwbWFwKF9jdXJyZW50UmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHRcdC8vIHJlc29sdmUgbXVsdGlzYW1wbGUgcmVuZGVyYnVmZmVycyB0byBhIHNpbmdsZS1zYW1wbGUgdGV4dHVyZSBpZiBuZWNlc3NhcnlcclxuXHJcblx0XHRcdHRleHR1cmVzLnVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0KF9jdXJyZW50UmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gRW5zdXJlIGRlcHRoIGJ1ZmZlciB3cml0aW5nIGlzIGVuYWJsZWQgc28gaXQgY2FuIGJlIGNsZWFyZWQgb24gbmV4dCByZW5kZXJcclxuXHJcblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QodHJ1ZSk7XHJcblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2sodHJ1ZSk7XHJcblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2sodHJ1ZSk7XHJcblxyXG5cdFx0c3RhdGUuc2V0UG9seWdvbk9mZnNldChmYWxzZSk7XHJcblxyXG5cdFx0aWYgKHZyLmVuYWJsZWQpIHtcclxuXHJcblx0XHRcdGlmIChtdWx0aXZpZXcuaXNBdmFpbGFibGUoKSkge1xyXG5cclxuXHRcdFx0XHRtdWx0aXZpZXcuZGV0YWNoQ2FtZXJhKGNhbWVyYSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2ci5zdWJtaXRGcmFtZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBfZ2wuZmluaXNoKCk7XHJcblxyXG5cdFx0Y3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcclxuXHJcblx0fTtcclxuXHJcblx0ZnVuY3Rpb24gcHJvamVjdE9iamVjdChvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMpIHtcclxuXHJcblx0XHRpZiAob2JqZWN0LnZpc2libGUgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KGNhbWVyYS5sYXllcnMpO1xyXG5cclxuXHRcdGlmICh2aXNpYmxlKSB7XHJcblxyXG5cdFx0XHRpZiAob2JqZWN0LmlzR3JvdXApIHtcclxuXHJcblx0XHRcdFx0Z3JvdXBPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAob2JqZWN0LmlzTE9EKSB7XHJcblxyXG5cdFx0XHRcdGlmIChvYmplY3QuYXV0b1VwZGF0ZSA9PT0gdHJ1ZSkgeyBvYmplY3QudXBkYXRlKGNhbWVyYSk7IH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAob2JqZWN0LmlzTGlnaHQpIHtcclxuXHJcblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodChvYmplY3QpO1xyXG5cclxuXHRcdFx0XHRpZiAob2JqZWN0LmNhc3RTaGFkb3cpIHtcclxuXHJcblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyhvYmplY3QpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG9iamVjdC5pc1Nwcml0ZSkge1xyXG5cclxuXHRcdFx0XHRpZiAoIW9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNTcHJpdGUob2JqZWN0KSkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChzb3J0T2JqZWN0cykge1xyXG5cclxuXHRcdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKG9iamVjdC5tYXRyaXhXb3JsZClcclxuXHRcdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KF9wcm9qU2NyZWVuTWF0cml4KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0cy51cGRhdGUob2JqZWN0KTtcclxuXHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9iamVjdC5tYXRlcmlhbDtcclxuXHJcblx0XHRcdFx0XHRpZiAobWF0ZXJpYWwudmlzaWJsZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaChvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG9iamVjdC5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCkge1xyXG5cclxuXHRcdFx0XHRpZiAoc29ydE9iamVjdHMpIHtcclxuXHJcblx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24ob2JqZWN0Lm1hdHJpeFdvcmxkKVxyXG5cdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KF9wcm9qU2NyZWVuTWF0cml4KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKG9iamVjdCwgbnVsbCwgb2JqZWN0Lm1hdGVyaWFsLCBncm91cE9yZGVyLCBfdmVjdG9yMy56LCBudWxsKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAob2JqZWN0LmlzTWVzaCB8fCBvYmplY3QuaXNMaW5lIHx8IG9iamVjdC5pc1BvaW50cykge1xyXG5cclxuXHRcdFx0XHRpZiAob2JqZWN0LmlzU2tpbm5lZE1lc2gpIHtcclxuXHJcblx0XHRcdFx0XHQvLyB1cGRhdGUgc2tlbGV0b24gb25seSBvbmNlIGluIGEgZnJhbWVcclxuXHJcblx0XHRcdFx0XHRpZiAob2JqZWN0LnNrZWxldG9uLmZyYW1lICE9PSBpbmZvLnJlbmRlci5mcmFtZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0b2JqZWN0LnNrZWxldG9uLnVwZGF0ZSgpO1xyXG5cdFx0XHRcdFx0XHRvYmplY3Quc2tlbGV0b24uZnJhbWUgPSBpbmZvLnJlbmRlci5mcmFtZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCFvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KG9iamVjdCkpIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoc29ydE9iamVjdHMpIHtcclxuXHJcblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbihvYmplY3QubWF0cml4V29ybGQpXHJcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NChfcHJvalNjcmVlbk1hdHJpeCk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKG9iamVjdCk7XHJcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XHJcblxyXG5cdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkobWF0ZXJpYWwpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgZ3JvdXBzID0gZ2VvbWV0cnkuZ3JvdXBzO1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBncm91cHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1tpXTtcclxuXHRcdFx0XHRcdFx0XHR2YXIgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsW2dyb3VwLm1hdGVyaWFsSW5kZXhdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoZ3JvdXBNYXRlcmlhbCAmJiBncm91cE1hdGVyaWFsLnZpc2libGUpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKG9iamVjdCwgZ2VvbWV0cnksIGdyb3VwTWF0ZXJpYWwsIGdyb3VwT3JkZXIsIF92ZWN0b3IzLnosIGdyb3VwKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwudmlzaWJsZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlckxpc3QucHVzaChvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0cHJvamVjdE9iamVjdChjaGlsZHJlbltpXSwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdHMocmVuZGVyTGlzdCwgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciByZW5kZXJJdGVtID0gcmVuZGVyTGlzdFtpXTtcclxuXHJcblx0XHRcdHZhciBvYmplY3QgPSByZW5kZXJJdGVtLm9iamVjdDtcclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcclxuXHRcdFx0dmFyIG1hdGVyaWFsID0gb3ZlcnJpZGVNYXRlcmlhbCA9PT0gdW5kZWZpbmVkID8gcmVuZGVySXRlbS5tYXRlcmlhbCA6IG92ZXJyaWRlTWF0ZXJpYWw7XHJcblx0XHRcdHZhciBncm91cCA9IHJlbmRlckl0ZW0uZ3JvdXA7XHJcblxyXG5cdFx0XHRpZiAoY2FtZXJhLmlzQXJyYXlDYW1lcmEpIHtcclxuXHJcblx0XHRcdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IGNhbWVyYTtcclxuXHJcblx0XHRcdFx0aWYgKHZyLmVuYWJsZWQgJiYgbXVsdGl2aWV3LmlzQXZhaWxhYmxlKCkpIHtcclxuXHJcblx0XHRcdFx0XHRyZW5kZXJPYmplY3Qob2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2FtZXJhcyA9IGNhbWVyYS5jYW1lcmFzO1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwLCBqbCA9IGNhbWVyYXMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGNhbWVyYTIgPSBjYW1lcmFzW2pdO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKG9iamVjdC5sYXllcnMudGVzdChjYW1lcmEyLmxheWVycykpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0c3RhdGUudmlld3BvcnQoX2N1cnJlbnRWaWV3cG9ydC5jb3B5KGNhbWVyYTIudmlld3BvcnQpKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKGNhbWVyYTIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRyZW5kZXJPYmplY3Qob2JqZWN0LCBzY2VuZSwgY2FtZXJhMiwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbDtcclxuXHJcblx0XHRcdFx0cmVuZGVyT2JqZWN0KG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdChvYmplY3QsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApIHtcclxuXHJcblx0XHRvYmplY3Qub25CZWZvcmVSZW5kZXIoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApO1xyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldChzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEpO1xyXG5cclxuXHRcdG9iamVjdC5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQpO1xyXG5cdFx0b2JqZWN0Lm5vcm1hbE1hdHJpeC5nZXROb3JtYWxNYXRyaXgob2JqZWN0Lm1vZGVsVmlld01hdHJpeCk7XHJcblxyXG5cdFx0aWYgKG9iamVjdC5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCkge1xyXG5cclxuXHRcdFx0c3RhdGUuc2V0TWF0ZXJpYWwobWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0dmFyIHByb2dyYW0gPSBzZXRQcm9ncmFtKGNhbWVyYSwgc2NlbmUuZm9nLCBtYXRlcmlhbCwgb2JqZWN0KTtcclxuXHJcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gbnVsbDtcclxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSA9IG51bGw7XHJcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0cmVuZGVyT2JqZWN0SW1tZWRpYXRlKG9iamVjdCwgcHJvZ3JhbSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdChjYW1lcmEsIHNjZW5lLmZvZywgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0b2JqZWN0Lm9uQWZ0ZXJSZW5kZXIoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApO1xyXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldChzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGluaXRNYXRlcmlhbChtYXRlcmlhbCwgZm9nLCBvYmplY3QpIHtcclxuXHJcblx0XHR2YXIgbWF0ZXJpYWxQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQobWF0ZXJpYWwpO1xyXG5cclxuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xyXG5cdFx0dmFyIHNoYWRvd3NBcnJheSA9IGN1cnJlbnRSZW5kZXJTdGF0ZS5zdGF0ZS5zaGFkb3dzQXJyYXk7XHJcblxyXG5cdFx0dmFyIGxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0cy5zdGF0ZS52ZXJzaW9uO1xyXG5cclxuXHRcdHZhciBwYXJhbWV0ZXJzID0gcHJvZ3JhbUNhY2hlLmdldFBhcmFtZXRlcnMoXHJcblx0XHRcdG1hdGVyaWFsLCBsaWdodHMuc3RhdGUsIHNoYWRvd3NBcnJheSwgZm9nLCBfY2xpcHBpbmcubnVtUGxhbmVzLCBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uLCBvYmplY3QpO1xyXG5cclxuXHRcdHZhciBjb2RlID0gcHJvZ3JhbUNhY2hlLmdldFByb2dyYW1Db2RlKG1hdGVyaWFsLCBwYXJhbWV0ZXJzKTtcclxuXHJcblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtO1xyXG5cdFx0dmFyIHByb2dyYW1DaGFuZ2UgPSB0cnVlO1xyXG5cclxuXHRcdGlmIChwcm9ncmFtID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdC8vIG5ldyBtYXRlcmlhbFxyXG5cdFx0XHRtYXRlcmlhbC5hZGRFdmVudExpc3RlbmVyKCdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UpO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAocHJvZ3JhbS5jb2RlICE9PSBjb2RlKSB7XHJcblxyXG5cdFx0XHQvLyBjaGFuZ2VkIGdsc2wgb3IgcGFyYW1ldGVyc1xyXG5cdFx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKG1hdGVyaWFsKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gIT09IGxpZ2h0c1N0YXRlVmVyc2lvbikge1xyXG5cclxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjtcclxuXHJcblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHBhcmFtZXRlcnMuc2hhZGVySUQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Ly8gc2FtZSBnbHNsIGFuZCB1bmlmb3JtIGxpc3RcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBvbmx5IHJlYnVpbGQgdW5pZm9ybSBsaXN0XHJcblx0XHRcdHByb2dyYW1DaGFuZ2UgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHByb2dyYW1DaGFuZ2UpIHtcclxuXHJcblx0XHRcdGlmIChwYXJhbWV0ZXJzLnNoYWRlcklEKSB7XHJcblxyXG5cdFx0XHRcdHZhciBzaGFkZXIgPSBTaGFkZXJMaWJbcGFyYW1ldGVycy5zaGFkZXJJRF07XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIgPSB7XHJcblx0XHRcdFx0XHRuYW1lOiBtYXRlcmlhbC50eXBlLFxyXG5cdFx0XHRcdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoc2hhZGVyLnVuaWZvcm1zKSxcclxuXHRcdFx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcclxuXHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBzaGFkZXIuZnJhZ21lbnRTaGFkZXJcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciA9IHtcclxuXHRcdFx0XHRcdG5hbWU6IG1hdGVyaWFsLnR5cGUsXHJcblx0XHRcdFx0XHR1bmlmb3JtczogbWF0ZXJpYWwudW5pZm9ybXMsXHJcblx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IG1hdGVyaWFsLnZlcnRleFNoYWRlcixcclxuXHRcdFx0XHRcdGZyYWdtZW50U2hhZGVyOiBtYXRlcmlhbC5mcmFnbWVudFNoYWRlclxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUobWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlciwgX3RoaXMpO1xyXG5cclxuXHRcdFx0Ly8gQ29tcHV0aW5nIGNvZGUgYWdhaW4gYXMgb25CZWZvcmVDb21waWxlIG1heSBoYXZlIGNoYW5nZWQgdGhlIHNoYWRlcnNcclxuXHRcdFx0Y29kZSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ29kZShtYXRlcmlhbCwgcGFyYW1ldGVycyk7XHJcblxyXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKG1hdGVyaWFsLCBtYXRlcmlhbFByb3BlcnRpZXMuc2hhZGVyLCBwYXJhbWV0ZXJzLCBjb2RlKTtcclxuXHJcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID0gcHJvZ3JhbTtcclxuXHRcdFx0bWF0ZXJpYWwucHJvZ3JhbSA9IHByb2dyYW07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwcm9ncmFtQXR0cmlidXRlcyA9IHByb2dyYW0uZ2V0QXR0cmlidXRlcygpO1xyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5tb3JwaFRhcmdldHMpIHtcclxuXHJcblx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoVGFyZ2V0czsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGlmIChwcm9ncmFtQXR0cmlidXRlc1snbW9ycGhUYXJnZXQnICsgaV0gPj0gMCkge1xyXG5cclxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cysrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5tb3JwaE5vcm1hbHMpIHtcclxuXHJcblx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyA9IDA7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLm1heE1vcnBoTm9ybWFsczsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGlmIChwcm9ncmFtQXR0cmlidXRlc1snbW9ycGhOb3JtYWwnICsgaV0gPj0gMCkge1xyXG5cclxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscysrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5zaGFkZXIudW5pZm9ybXM7XHJcblxyXG5cdFx0aWYgKCFtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmXHJcblx0XHRcdCFtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsIHx8XHJcblx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcubnVtUGxhbmVzO1xyXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbjtcclxuXHRcdFx0dW5pZm9ybXMuY2xpcHBpbmdQbGFuZXMgPSBfY2xpcHBpbmcudW5pZm9ybTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyA9IGZvZztcclxuXHJcblx0XHQvLyBzdG9yZSB0aGUgbGlnaHQgc2V0dXAgaXQgd2FzIGNyZWF0ZWQgZm9yXHJcblxyXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzID0gbWF0ZXJpYWxOZWVkc0xpZ2h0cyhtYXRlcmlhbCk7XHJcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uO1xyXG5cclxuXHRcdGlmIChtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMpIHtcclxuXHJcblx0XHRcdC8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZVxyXG5cclxuXHRcdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IudmFsdWUgPSBsaWdodHMuc3RhdGUuYW1iaWVudDtcclxuXHRcdFx0dW5pZm9ybXMubGlnaHRQcm9iZS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wcm9iZTtcclxuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWw7XHJcblx0XHRcdHVuaWZvcm1zLnNwb3RMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdDtcclxuXHRcdFx0dW5pZm9ybXMucmVjdEFyZWFMaWdodHMudmFsdWUgPSBsaWdodHMuc3RhdGUucmVjdEFyZWE7XHJcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50O1xyXG5cdFx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmhlbWk7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcDtcclxuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7XHJcblx0XHRcdHVuaWZvcm1zLnNwb3RTaGFkb3dNYXAudmFsdWUgPSBsaWdodHMuc3RhdGUuc3BvdFNoYWRvd01hcDtcclxuXHRcdFx0dW5pZm9ybXMuc3BvdFNoYWRvd01hdHJpeC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5zcG90U2hhZG93TWF0cml4O1xyXG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDtcclxuXHRcdFx0dW5pZm9ybXMucG9pbnRTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3dNYXRyaXg7XHJcblx0XHRcdC8vIFRPRE8gKGFiZWxuYXRpb24pOiBhZGQgYXJlYSBsaWdodHMgc2hhZG93IGluZm8gdG8gdW5pZm9ybXNcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLmdldFVuaWZvcm1zKCksXHJcblx0XHRcdHVuaWZvcm1zTGlzdCA9XHJcblx0XHRcdFx0V2ViR0xVbmlmb3Jtcy5zZXFXaXRoVmFsdWUocHJvZ1VuaWZvcm1zLnNlcSwgdW5pZm9ybXMpO1xyXG5cclxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QgPSB1bmlmb3Jtc0xpc3Q7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gc2V0UHJvZ3JhbShjYW1lcmEsIGZvZywgbWF0ZXJpYWwsIG9iamVjdCkge1xyXG5cclxuXHRcdHRleHR1cmVzLnJlc2V0VGV4dHVyZVVuaXRzKCk7XHJcblxyXG5cdFx0dmFyIG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KG1hdGVyaWFsKTtcclxuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xyXG5cclxuXHRcdGlmIChfY2xpcHBpbmdFbmFibGVkKSB7XHJcblxyXG5cdFx0XHRpZiAoX2xvY2FsQ2xpcHBpbmdFbmFibGVkIHx8IGNhbWVyYSAhPT0gX2N1cnJlbnRDYW1lcmEpIHtcclxuXHJcblx0XHRcdFx0dmFyIHVzZUNhY2hlID1cclxuXHRcdFx0XHRcdGNhbWVyYSA9PT0gX2N1cnJlbnRDYW1lcmEgJiZcclxuXHRcdFx0XHRcdG1hdGVyaWFsLmlkID09PSBfY3VycmVudE1hdGVyaWFsSWQ7XHJcblxyXG5cdFx0XHRcdC8vIHdlIG1pZ2h0IHdhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGggc29tZSBDbGlwcGluZ0dyb3VwXHJcblx0XHRcdFx0Ly8gb2JqZWN0IGluc3RlYWQgb2YgdGhlIG1hdGVyaWFsLCBvbmNlIGl0IGJlY29tZXMgZmVhc2libGVcclxuXHRcdFx0XHQvLyAoIzg0NjUsICM4Mzc5KVxyXG5cdFx0XHRcdF9jbGlwcGluZy5zZXRTdGF0ZShcclxuXHRcdFx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLCBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLCBtYXRlcmlhbC5jbGlwU2hhZG93cyxcclxuXHRcdFx0XHRcdGNhbWVyYSwgbWF0ZXJpYWxQcm9wZXJ0aWVzLCB1c2VDYWNoZSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGlmIChtYXRlcmlhbFByb3BlcnRpZXMucHJvZ3JhbSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuZm9nICYmIG1hdGVyaWFsUHJvcGVydGllcy5mb2cgIT09IGZvZykge1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyAmJiAobWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiAhPT0gbGlnaHRzLnN0YXRlLnZlcnNpb24pKSB7XHJcblxyXG5cdFx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSB1bmRlZmluZWQgJiZcclxuXHRcdFx0XHQobWF0ZXJpYWxQcm9wZXJ0aWVzLm51bUNsaXBwaW5nUGxhbmVzICE9PSBfY2xpcHBpbmcubnVtUGxhbmVzIHx8XHJcblx0XHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uKSkge1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5uZWVkc1VwZGF0ZSkge1xyXG5cclxuXHRcdFx0aW5pdE1hdGVyaWFsKG1hdGVyaWFsLCBmb2csIG9iamVjdCk7XHJcblx0XHRcdG1hdGVyaWFsLm5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByZWZyZXNoUHJvZ3JhbSA9IGZhbHNlO1xyXG5cdFx0dmFyIHJlZnJlc2hNYXRlcmlhbCA9IGZhbHNlO1xyXG5cdFx0dmFyIHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcclxuXHJcblx0XHR2YXIgcHJvZ3JhbSA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLFxyXG5cdFx0XHRwX3VuaWZvcm1zID0gcHJvZ3JhbS5nZXRVbmlmb3JtcygpLFxyXG5cdFx0XHRtX3VuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnNoYWRlci51bmlmb3JtcztcclxuXHJcblx0XHRpZiAoc3RhdGUudXNlUHJvZ3JhbShwcm9ncmFtLnByb2dyYW0pKSB7XHJcblxyXG5cdFx0XHRyZWZyZXNoUHJvZ3JhbSA9IHRydWU7XHJcblx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XHJcblx0XHRcdHJlZnJlc2hMaWdodHMgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCkge1xyXG5cclxuXHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gbWF0ZXJpYWwuaWQ7XHJcblxyXG5cdFx0XHRyZWZyZXNoTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVmcmVzaFByb2dyYW0gfHwgX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSkge1xyXG5cclxuXHRcdFx0aWYgKHByb2dyYW0ubnVtTXVsdGl2aWV3Vmlld3MgPiAwKSB7XHJcblxyXG5cdFx0XHRcdG11bHRpdmlldy51cGRhdGVDYW1lcmFQcm9qZWN0aW9uTWF0cmljZXNVbmlmb3JtKGNhbWVyYSwgcF91bmlmb3Jtcyk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoY2FwYWJpbGl0aWVzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIpIHtcclxuXHJcblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICdsb2dEZXB0aEJ1ZkZDJyxcclxuXHRcdFx0XHRcdDIuMCAvIChNYXRoLmxvZyhjYW1lcmEuZmFyICsgMS4wKSAvIE1hdGguTE4yKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoX2N1cnJlbnRDYW1lcmEgIT09IGNhbWVyYSkge1xyXG5cclxuXHRcdFx0XHRfY3VycmVudENhbWVyYSA9IGNhbWVyYTtcclxuXHJcblx0XHRcdFx0Ly8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGVcclxuXHRcdFx0XHQvLyBub3csIGluIGNhc2UgdGhpcyBtYXRlcmlhbCBzdXBwb3J0cyBsaWdodHMgLSBvciBsYXRlciwgd2hlblxyXG5cdFx0XHRcdC8vIHRoZSBuZXh0IG1hdGVyaWFsIHRoYXQgZG9lcyBnZXRzIGFjdGl2YXRlZDpcclxuXHJcblx0XHRcdFx0cmVmcmVzaE1hdGVyaWFsID0gdHJ1ZTtcdFx0Ly8gc2V0IHRvIHRydWUgb24gbWF0ZXJpYWwgY2hhbmdlXHJcblx0XHRcdFx0cmVmcmVzaExpZ2h0cyA9IHRydWU7XHRcdC8vIHJlbWFpbnMgc2V0IHVudGlsIHVwZGF0ZSBkb25lXHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBsb2FkIG1hdGVyaWFsIHNwZWNpZmljIHVuaWZvcm1zXHJcblx0XHRcdC8vIChzaGFkZXIgbWF0ZXJpYWwgYWxzbyBnZXRzIHRoZW0gZm9yIHRoZSBzYWtlIG9mIGdlbmVyaWNpdHkpXHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxyXG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcclxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XHJcblx0XHRcdFx0bWF0ZXJpYWwuZW52TWFwKSB7XHJcblxyXG5cdFx0XHRcdHZhciB1Q2FtUG9zID0gcF91bmlmb3Jtcy5tYXAuY2FtZXJhUG9zaXRpb247XHJcblxyXG5cdFx0XHRcdGlmICh1Q2FtUG9zICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHR1Q2FtUG9zLnNldFZhbHVlKF9nbCxcclxuXHRcdFx0XHRcdFx0X3ZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGNhbWVyYS5tYXRyaXhXb3JsZCkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxyXG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fFxyXG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgfHxcclxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XHJcblx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxyXG5cdFx0XHRcdG1hdGVyaWFsLnNraW5uaW5nKSB7XHJcblxyXG5cdFx0XHRcdGlmIChwcm9ncmFtLm51bU11bHRpdmlld1ZpZXdzID4gMCkge1xyXG5cclxuXHRcdFx0XHRcdG11bHRpdmlldy51cGRhdGVDYW1lcmFWaWV3TWF0cmljZXNVbmlmb3JtKGNhbWVyYSwgcF91bmlmb3Jtcyk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2tpbm5pbmcgdW5pZm9ybXMgbXVzdCBiZSBzZXQgZXZlbiBpZiBtYXRlcmlhbCBkaWRuJ3QgY2hhbmdlXHJcblx0XHQvLyBhdXRvLXNldHRpbmcgb2YgdGV4dHVyZSB1bml0IGZvciBib25lIHRleHR1cmUgbXVzdCBnbyBiZWZvcmUgb3RoZXIgdGV4dHVyZXNcclxuXHRcdC8vIG5vdCBzdXJlIHdoeSwgYnV0IG90aGVyd2lzZSB3ZWlyZCB0aGluZ3MgaGFwcGVuXHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLnNraW5uaW5nKSB7XHJcblxyXG5cdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeCcpO1xyXG5cdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKF9nbCwgb2JqZWN0LCAnYmluZE1hdHJpeEludmVyc2UnKTtcclxuXHJcblx0XHRcdHZhciBza2VsZXRvbiA9IG9iamVjdC5za2VsZXRvbjtcclxuXHJcblx0XHRcdGlmIChza2VsZXRvbikge1xyXG5cclxuXHRcdFx0XHR2YXIgYm9uZXMgPSBza2VsZXRvbi5ib25lcztcclxuXHJcblx0XHRcdFx0aWYgKGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzKSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGxheW91dCAoMSBtYXRyaXggPSA0IHBpeGVscylcclxuXHRcdFx0XHRcdFx0Ly8gICAgICBSR0JBIFJHQkEgUkdCQSBSR0JBICg9PiBjb2x1bW4xLCBjb2x1bW4yLCBjb2x1bW4zLCBjb2x1bW40KVxyXG5cdFx0XHRcdFx0XHQvLyAgd2l0aCAgOHg4ICBwaXhlbCB0ZXh0dXJlIG1heCAgIDE2IGJvbmVzICogNCBwaXhlbHMgPSAgKDggKiA4KVxyXG5cdFx0XHRcdFx0XHQvLyAgICAgICAxNngxNiBwaXhlbCB0ZXh0dXJlIG1heCAgIDY0IGJvbmVzICogNCBwaXhlbHMgPSAoMTYgKiAxNilcclxuXHRcdFx0XHRcdFx0Ly8gICAgICAgMzJ4MzIgcGl4ZWwgdGV4dHVyZSBtYXggIDI1NiBib25lcyAqIDQgcGl4ZWxzID0gKDMyICogMzIpXHJcblx0XHRcdFx0XHRcdC8vICAgICAgIDY0eDY0IHBpeGVsIHRleHR1cmUgbWF4IDEwMjQgYm9uZXMgKiA0IHBpeGVscyA9ICg2NCAqIDY0KVxyXG5cclxuXHJcblx0XHRcdFx0XHRcdHZhciBzaXplID0gTWF0aC5zcXJ0KGJvbmVzLmxlbmd0aCAqIDQpOyAvLyA0IHBpeGVscyBuZWVkZWQgZm9yIDEgbWF0cml4XHJcblx0XHRcdFx0XHRcdHNpemUgPSBfTWF0aC5jZWlsUG93ZXJPZlR3byhzaXplKTtcclxuXHRcdFx0XHRcdFx0c2l6ZSA9IE1hdGgubWF4KHNpemUsIDQpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSAqIHNpemUgKiA0KTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcclxuXHRcdFx0XHRcdFx0Ym9uZU1hdHJpY2VzLnNldChza2VsZXRvbi5ib25lTWF0cmljZXMpOyAvLyBjb3B5IGN1cnJlbnQgdmFsdWVzXHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgYm9uZVRleHR1cmUgPSBuZXcgRGF0YVRleHR1cmUoYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xyXG5cdFx0XHRcdFx0XHRza2VsZXRvbi5ib25lVGV4dHVyZSA9IGJvbmVUZXh0dXJlO1xyXG5cdFx0XHRcdFx0XHRza2VsZXRvbi5ib25lVGV4dHVyZVNpemUgPSBzaXplO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKF9nbCwgJ2JvbmVUZXh0dXJlJywgc2tlbGV0b24uYm9uZVRleHR1cmUsIHRleHR1cmVzKTtcclxuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoX2dsLCAnYm9uZVRleHR1cmVTaXplJywgc2tlbGV0b24uYm9uZVRleHR1cmVTaXplKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKF9nbCwgc2tlbGV0b24sICdib25lTWF0cmljZXMnKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVmcmVzaE1hdGVyaWFsIHx8IG1hdGVyaWFsUHJvcGVydGllcy5yZWNlaXZlU2hhZG93ICE9PSBvYmplY3QucmVjZWl2ZVNoYWRvdykge1xyXG5cclxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgPSBvYmplY3QucmVjZWl2ZVNoYWRvdztcclxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICdyZWNlaXZlU2hhZG93Jywgb2JqZWN0LnJlY2VpdmVTaGFkb3cpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVmcmVzaE1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKF9nbCwgJ3RvbmVNYXBwaW5nRXhwb3N1cmUnLCBfdGhpcy50b25lTWFwcGluZ0V4cG9zdXJlKTtcclxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICd0b25lTWFwcGluZ1doaXRlUG9pbnQnLCBfdGhpcy50b25lTWFwcGluZ1doaXRlUG9pbnQpO1xyXG5cclxuXHRcdFx0aWYgKG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cykge1xyXG5cclxuXHRcdFx0XHQvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvXHJcblxyXG5cdFx0XHRcdC8vIG5vdGU6IGFsbCBsaWdodGluZyB1bmlmb3JtcyBhcmUgYWx3YXlzIHNldCBjb3JyZWN0bHlcclxuXHRcdFx0XHQvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyXHJcblx0XHRcdFx0Ly8gdmFsdWVzXHJcblx0XHRcdFx0Ly9cclxuXHRcdFx0XHQvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0XHJcblx0XHRcdFx0Ly8gdGhlIEdMIHN0YXRlIHdoZW4gcmVxdWlyZWRcclxuXHJcblx0XHRcdFx0bWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUobV91bmlmb3JtcywgcmVmcmVzaExpZ2h0cyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyByZWZyZXNoIHVuaWZvcm1zIGNvbW1vbiB0byBzZXZlcmFsIG1hdGVyaWFsc1xyXG5cclxuXHRcdFx0aWYgKGZvZyAmJiBtYXRlcmlhbC5mb2cpIHtcclxuXHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRm9nKG1fdW5pZm9ybXMsIGZvZyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCkge1xyXG5cclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24obV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwpIHtcclxuXHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCkge1xyXG5cclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNDb21tb24obV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHRpZiAobWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zVG9vbihtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcobV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwpIHtcclxuXHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHJcblx0XHRcdFx0aWYgKG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwpIHtcclxuXHJcblx0XHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbChtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zU3RhbmRhcmQobV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmlzTWVzaE1hdGNhcE1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbihtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc01hdGNhcChtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmlzTWVzaERlcHRoTWF0ZXJpYWwpIHtcclxuXHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEZXB0aChtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwpIHtcclxuXHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZShtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmlzTWVzaE5vcm1hbE1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbihtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTm9ybWFsKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuaXNMaW5lQmFzaWNNYXRlcmlhbCkge1xyXG5cclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNMaW5lKG1fdW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHJcblx0XHRcdFx0aWYgKG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGFzaChtX3VuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuaXNQb2ludHNNYXRlcmlhbCkge1xyXG5cclxuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQb2ludHMobV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMobV91bmlmb3JtcywgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChtYXRlcmlhbC5pc1NoYWRvd01hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdG1fdW5pZm9ybXMuY29sb3IudmFsdWUuY29weShtYXRlcmlhbC5jb2xvcik7XHJcblx0XHRcdFx0bV91bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIFJlY3RBcmVhTGlnaHQgVGV4dHVyZVxyXG5cdFx0XHQvLyBUT0RPIChtcmRvb2IpOiBGaW5kIGEgbmljZXIgaW1wbGVtZW50YXRpb25cclxuXHJcblx0XHRcdGlmIChtX3VuaWZvcm1zLmx0Y18xICE9PSB1bmRlZmluZWQpIHsgbV91bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18xOyB9XHJcblx0XHRcdGlmIChtX3VuaWZvcm1zLmx0Y18yICE9PSB1bmRlZmluZWQpIHsgbV91bmlmb3Jtcy5sdGNfMi52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18yOyB9XHJcblxyXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZChfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRXZWJHTFVuaWZvcm1zLnVwbG9hZChfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzKTtcclxuXHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKF9nbCwgJ2NlbnRlcicsIG9iamVjdC5jZW50ZXIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb21tb24gbWF0cmljZXNcclxuXHJcblx0XHRpZiAocHJvZ3JhbS5udW1NdWx0aXZpZXdWaWV3cyA+IDApIHtcclxuXHJcblx0XHRcdG11bHRpdmlldy51cGRhdGVPYmplY3RNYXRyaWNlc1VuaWZvcm1zKG9iamVjdCwgY2FtZXJhLCBwX3VuaWZvcm1zKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICdtb2RlbFZpZXdNYXRyaXgnLCBvYmplY3QubW9kZWxWaWV3TWF0cml4KTtcclxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICdub3JtYWxNYXRyaXgnLCBvYmplY3Qubm9ybWFsTWF0cml4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZShfZ2wsICdtb2RlbE1hdHJpeCcsIG9iamVjdC5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0cmV0dXJuIHByb2dyYW07XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gVW5pZm9ybXMgKHJlZnJlc2ggdW5pZm9ybXMgb2JqZWN0cylcclxuXHJcblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKHVuaWZvcm1zLCBtYXRlcmlhbCkge1xyXG5cclxuXHRcdHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5jb2xvcikge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KG1hdGVyaWFsLmNvbG9yKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmVtaXNzaXZlKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KG1hdGVyaWFsLmVtaXNzaXZlKS5tdWx0aXBseVNjYWxhcihtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5tYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmFscGhhTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuc3BlY3VsYXJNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5lbnZNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDtcclxuXHJcblx0XHRcdC8vIGRvbid0IGZsaXAgQ3ViZVRleHR1cmUgZW52TWFwcywgZmxpcCBldmVyeXRoaW5nIGVsc2U6XHJcblx0XHRcdC8vICBXZWJHTFJlbmRlclRhcmdldEN1YmUgd2lsbCBiZSBmbGlwcGVkIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxyXG5cdFx0XHQvLyAgV2ViR0xSZW5kZXJUYXJnZXRDdWJlLnRleHR1cmUgd2lsbCBiZSBmbGlwcGVkIGJlY2F1c2UgaXQncyBhIFRleHR1cmUgYW5kIE5PVCBhIEN1YmVUZXh0dXJlXHJcblx0XHRcdC8vIHRoaXMgY2hlY2sgbXVzdCBiZSBoYW5kbGVkIGRpZmZlcmVudGx5LCBvciByZW1vdmVkIGVudGlyZWx5LCBpZiBXZWJHTFJlbmRlclRhcmdldEN1YmUgdXNlcyBhIEN1YmVUZXh0dXJlIGluIHRoZSBmdXR1cmVcclxuXHRcdFx0dW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlID8gLSAxIDogMTtcclxuXHJcblx0XHRcdHVuaWZvcm1zLnJlZmxlY3Rpdml0eS52YWx1ZSA9IG1hdGVyaWFsLnJlZmxlY3Rpdml0eTtcclxuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xyXG5cclxuXHRcdFx0dW5pZm9ybXMubWF4TWlwTGV2ZWwudmFsdWUgPSBwcm9wZXJ0aWVzLmdldChtYXRlcmlhbC5lbnZNYXApLl9fbWF4TWlwTGV2ZWw7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5saWdodE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcclxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmFvTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5hb01hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB1diByZXBlYXQgYW5kIG9mZnNldCBzZXR0aW5nIHByaW9yaXRpZXNcclxuXHRcdC8vIDEuIGNvbG9yIG1hcFxyXG5cdFx0Ly8gMi4gc3BlY3VsYXIgbWFwXHJcblx0XHQvLyAzLiBub3JtYWwgbWFwXHJcblx0XHQvLyA0LiBidW1wIG1hcFxyXG5cdFx0Ly8gNS4gYWxwaGEgbWFwXHJcblx0XHQvLyA2LiBlbWlzc2l2ZSBtYXBcclxuXHJcblx0XHR2YXIgdXZTY2FsZU1hcDtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwubWFwKSB7XHJcblxyXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuc3BlY3VsYXJNYXApIHtcclxuXHJcblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCkge1xyXG5cclxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLm5vcm1hbE1hcCkge1xyXG5cclxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmJ1bXBNYXApIHtcclxuXHJcblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5idW1wTWFwO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwucm91Z2huZXNzTWFwKSB7XHJcblxyXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwubWV0YWxuZXNzTWFwKSB7XHJcblxyXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAobWF0ZXJpYWwuYWxwaGFNYXApIHtcclxuXHJcblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcclxuXHJcblx0XHR9IGVsc2UgaWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSB7XHJcblxyXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcblx0XHRcdGlmICh1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQpIHtcclxuXHJcblx0XHRcdFx0dXZTY2FsZU1hcCA9IHV2U2NhbGVNYXAudGV4dHVyZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkodXZTY2FsZU1hcC5tYXRyaXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNMaW5lKHVuaWZvcm1zLCBtYXRlcmlhbCkge1xyXG5cclxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weShtYXRlcmlhbC5jb2xvcik7XHJcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEYXNoKHVuaWZvcm1zLCBtYXRlcmlhbCkge1xyXG5cclxuXHRcdHVuaWZvcm1zLmRhc2hTaXplLnZhbHVlID0gbWF0ZXJpYWwuZGFzaFNpemU7XHJcblx0XHR1bmlmb3Jtcy50b3RhbFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZSArIG1hdGVyaWFsLmdhcFNpemU7XHJcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IG1hdGVyaWFsLnNjYWxlO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BvaW50cyh1bmlmb3JtcywgbWF0ZXJpYWwpIHtcclxuXHJcblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkobWF0ZXJpYWwuY29sb3IpO1xyXG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XHJcblx0XHR1bmlmb3Jtcy5zaXplLnZhbHVlID0gbWF0ZXJpYWwuc2l6ZSAqIF9waXhlbFJhdGlvO1xyXG5cdFx0dW5pZm9ybXMuc2NhbGUudmFsdWUgPSBfaGVpZ2h0ICogMC41O1xyXG5cclxuXHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwubWFwICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRpZiAobWF0ZXJpYWwubWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdFx0bWF0ZXJpYWwubWFwLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weShtYXRlcmlhbC5tYXAubWF0cml4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zU3ByaXRlcyh1bmlmb3JtcywgbWF0ZXJpYWwpIHtcclxuXHJcblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkobWF0ZXJpYWwuY29sb3IpO1xyXG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XHJcblx0XHR1bmlmb3Jtcy5yb3RhdGlvbi52YWx1ZSA9IG1hdGVyaWFsLnJvdGF0aW9uO1xyXG5cdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5tYXAgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdGlmIChtYXRlcmlhbC5tYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbC5tYXAudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KG1hdGVyaWFsLm1hcC5tYXRyaXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNGb2codW5pZm9ybXMsIGZvZykge1xyXG5cclxuXHRcdHVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlLmNvcHkoZm9nLmNvbG9yKTtcclxuXHJcblx0XHRpZiAoZm9nLmlzRm9nKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5mb2dOZWFyLnZhbHVlID0gZm9nLm5lYXI7XHJcblx0XHRcdHVuaWZvcm1zLmZvZ0Zhci52YWx1ZSA9IGZvZy5mYXI7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChmb2cuaXNGb2dFeHAyKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5mb2dEZW5zaXR5LnZhbHVlID0gZm9nLmRlbnNpdHk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQodW5pZm9ybXMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNQaG9uZyh1bmlmb3JtcywgbWF0ZXJpYWwpIHtcclxuXHJcblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KG1hdGVyaWFsLnNwZWN1bGFyKTtcclxuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KG1hdGVyaWFsLnNoaW5pbmVzcywgMWUtNCk7IC8vIHRvIHByZXZlbnQgcG93KCAwLjAsIDAuMCApXHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuYnVtcE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XHJcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLm5vcm1hbE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KG1hdGVyaWFsLm5vcm1hbFNjYWxlKTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24odW5pZm9ybXMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcodW5pZm9ybXMsIG1hdGVyaWFsKTtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuZ3JhZGllbnRNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLmdyYWRpZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZ3JhZGllbnRNYXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKHVuaWZvcm1zLCBtYXRlcmlhbCkge1xyXG5cclxuXHRcdHVuaWZvcm1zLnJvdWdobmVzcy52YWx1ZSA9IG1hdGVyaWFsLnJvdWdobmVzcztcclxuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwucm91Z2huZXNzTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5tZXRhbG5lc3NNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLm1ldGFsbmVzc01hcC52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmVtaXNzaXZlTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZU1hcC52YWx1ZSA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuYnVtcE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XHJcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLm5vcm1hbE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KG1hdGVyaWFsLm5vcm1hbFNjYWxlKTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5lbnZNYXApIHtcclxuXHJcblx0XHRcdC8vdW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwOyAvLyBwYXJ0IG9mIHVuaWZvcm1zIGNvbW1vblxyXG5cdFx0XHR1bmlmb3Jtcy5lbnZNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1BoeXNpY2FsKHVuaWZvcm1zLCBtYXRlcmlhbCkge1xyXG5cclxuXHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKHVuaWZvcm1zLCBtYXRlcmlhbCk7XHJcblxyXG5cdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXHJcblxyXG5cdFx0dW5pZm9ybXMuY2xlYXJjb2F0LnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0O1xyXG5cdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xyXG5cdFx0aWYgKG1hdGVyaWFsLnNoZWVuKSB7IHVuaWZvcm1zLnNoZWVuLnZhbHVlLmNvcHkobWF0ZXJpYWwuc2hlZW4pOyB9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUuY29weShtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZSk7XHJcblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcclxuXHJcblx0XHRcdGlmIChtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSkge1xyXG5cclxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dW5pZm9ybXMudHJhbnNwYXJlbmN5LnZhbHVlID0gbWF0ZXJpYWwudHJhbnNwYXJlbmN5O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc01hdGNhcCh1bmlmb3JtcywgbWF0ZXJpYWwpIHtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwubWF0Y2FwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5idW1wTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcclxuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xyXG5cdFx0XHRpZiAobWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUpIHsgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobWF0ZXJpYWwubm9ybWFsTWFwKSB7XHJcblxyXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XHJcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkobWF0ZXJpYWwubm9ybWFsU2NhbGUpO1xyXG5cdFx0XHRpZiAobWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUpIHsgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGVwdGgodW5pZm9ybXMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UodW5pZm9ybXMsIG1hdGVyaWFsKSB7XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dW5pZm9ybXMucmVmZXJlbmNlUG9zaXRpb24udmFsdWUuY29weShtYXRlcmlhbC5yZWZlcmVuY2VQb3NpdGlvbik7XHJcblx0XHR1bmlmb3Jtcy5uZWFyRGlzdGFuY2UudmFsdWUgPSBtYXRlcmlhbC5uZWFyRGlzdGFuY2U7XHJcblx0XHR1bmlmb3Jtcy5mYXJEaXN0YW5jZS52YWx1ZSA9IG1hdGVyaWFsLmZhckRpc3RhbmNlO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc05vcm1hbCh1bmlmb3JtcywgbWF0ZXJpYWwpIHtcclxuXHJcblx0XHRpZiAobWF0ZXJpYWwuYnVtcE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XHJcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG1hdGVyaWFsLm5vcm1hbE1hcCkge1xyXG5cclxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xyXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KG1hdGVyaWFsLm5vcm1hbFNjYWxlKTtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlKSB7IHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXApIHtcclxuXHJcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIElmIHVuaWZvcm1zIGFyZSBtYXJrZWQgYXMgY2xlYW4sIHRoZXkgZG9uJ3QgbmVlZCB0byBiZSBsb2FkZWQgdG8gdGhlIEdQVS5cclxuXHJcblx0ZnVuY3Rpb24gbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUodW5pZm9ybXMsIHZhbHVlKSB7XHJcblxyXG5cdFx0dW5pZm9ybXMuYW1iaWVudExpZ2h0Q29sb3IubmVlZHNVcGRhdGUgPSB2YWx1ZTtcclxuXHRcdHVuaWZvcm1zLmxpZ2h0UHJvYmUubmVlZHNVcGRhdGUgPSB2YWx1ZTtcclxuXHJcblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xyXG5cdFx0dW5pZm9ybXMucG9pbnRMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcclxuXHRcdHVuaWZvcm1zLnNwb3RMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcclxuXHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XHJcblx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XHJcblxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gbWF0ZXJpYWxOZWVkc0xpZ2h0cyhtYXRlcmlhbCkge1xyXG5cclxuXHRcdHJldHVybiBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxyXG5cdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgfHxcclxuXHRcdFx0KG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiYgbWF0ZXJpYWwubGlnaHRzID09PSB0cnVlKTtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cdHRoaXMuc2V0RnJhbWVidWZmZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAoX2ZyYW1lYnVmZmVyICE9PSB2YWx1ZSkgeyBfZ2wuYmluZEZyYW1lYnVmZmVyKDM2MTYwLCB2YWx1ZSk7IH1cclxuXHJcblx0XHRfZnJhbWVidWZmZXIgPSB2YWx1ZTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRBY3RpdmVDdWJlRmFjZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVDdWJlRmFjZTtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gX2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbDtcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5nZXRSZW5kZXJUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIF9jdXJyZW50UmVuZGVyVGFyZ2V0O1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLnNldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uIChyZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlLCBhY3RpdmVNaXBtYXBMZXZlbCkge1xyXG5cclxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xyXG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IGFjdGl2ZUN1YmVGYWNlO1xyXG5cdFx0X2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IGFjdGl2ZU1pcG1hcExldmVsO1xyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQgJiYgcHJvcGVydGllcy5nZXQocmVuZGVyVGFyZ2V0KS5fX3dlYmdsRnJhbWVidWZmZXIgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dGV4dHVyZXMuc2V0dXBSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gX2ZyYW1lYnVmZmVyO1xyXG5cdFx0dmFyIGlzQ3ViZSA9IGZhbHNlO1xyXG5cclxuXHRcdGlmIChyZW5kZXJUYXJnZXQpIHtcclxuXHJcblx0XHRcdHZhciBfX3dlYmdsRnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQpLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcclxuXHJcblx0XHRcdGlmIChyZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUpIHtcclxuXHJcblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXJbYWN0aXZlQ3ViZUZhY2UgfHwgMF07XHJcblx0XHRcdFx0aXNDdWJlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAocmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCkge1xyXG5cclxuXHRcdFx0XHRmcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KHJlbmRlclRhcmdldCkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBfX3dlYmdsRnJhbWVidWZmZXI7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkocmVuZGVyVGFyZ2V0LnZpZXdwb3J0KTtcclxuXHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkocmVuZGVyVGFyZ2V0LnNjaXNzb3IpO1xyXG5cdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gcmVuZGVyVGFyZ2V0LnNjaXNzb3JUZXN0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoX3ZpZXdwb3J0KS5tdWx0aXBseVNjYWxhcihfcGl4ZWxSYXRpbykuZmxvb3IoKTtcclxuXHRcdFx0X2N1cnJlbnRTY2lzc29yLmNvcHkoX3NjaXNzb3IpLm11bHRpcGx5U2NhbGFyKF9waXhlbFJhdGlvKS5mbG9vcigpO1xyXG5cdFx0XHRfY3VycmVudFNjaXNzb3JUZXN0ID0gX3NjaXNzb3JUZXN0O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoX2N1cnJlbnRGcmFtZWJ1ZmZlciAhPT0gZnJhbWVidWZmZXIpIHtcclxuXHJcblx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIGZyYW1lYnVmZmVyKTtcclxuXHRcdFx0X2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzdGF0ZS52aWV3cG9ydChfY3VycmVudFZpZXdwb3J0KTtcclxuXHRcdHN0YXRlLnNjaXNzb3IoX2N1cnJlbnRTY2lzc29yKTtcclxuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KF9jdXJyZW50U2Npc3NvclRlc3QpO1xyXG5cclxuXHRcdGlmIChpc0N1YmUpIHtcclxuXHJcblx0XHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KHJlbmRlclRhcmdldC50ZXh0dXJlKTtcclxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKDM2MTYwLCAzNjA2NCwgMzQwNjkgKyAoYWN0aXZlQ3ViZUZhY2UgfHwgMCksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCB8fCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMucmVhZFJlbmRlclRhcmdldFBpeGVscyA9IGZ1bmN0aW9uIChyZW5kZXJUYXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQsIGJ1ZmZlciwgYWN0aXZlQ3ViZUZhY2VJbmRleCkge1xyXG5cclxuXHRcdGlmICghKHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQuaXNXZWJHTFJlbmRlclRhcmdldCkpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC4nKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldChyZW5kZXJUYXJnZXQpLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcclxuXHJcblx0XHRpZiAocmVuZGVyVGFyZ2V0LmlzV2ViR0xSZW5kZXJUYXJnZXRDdWJlICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0ZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclthY3RpdmVDdWJlRmFjZUluZGV4XTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGZyYW1lYnVmZmVyKSB7XHJcblxyXG5cdFx0XHR2YXIgcmVzdG9yZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKGZyYW1lYnVmZmVyICE9PSBfY3VycmVudEZyYW1lYnVmZmVyKSB7XHJcblxyXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIGZyYW1lYnVmZmVyKTtcclxuXHJcblx0XHRcdFx0cmVzdG9yZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cclxuXHRcdFx0XHR2YXIgdGV4dHVyZSA9IHJlbmRlclRhcmdldC50ZXh0dXJlO1xyXG5cdFx0XHRcdHZhciB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XHJcblx0XHRcdFx0dmFyIHRleHR1cmVUeXBlID0gdGV4dHVyZS50eXBlO1xyXG5cclxuXHRcdFx0XHRpZiAodGV4dHVyZUZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB1dGlscy5jb252ZXJ0KHRleHR1cmVGb3JtYXQpICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKDM1NzM5KSkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicpO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0ZXh0dXJlVHlwZSAhPT0gVW5zaWduZWRCeXRlVHlwZSAmJiB1dGlscy5jb252ZXJ0KHRleHR1cmVUeXBlKSAhPT0gX2dsLmdldFBhcmFtZXRlcigzNTczOCkgJiYgLy8gSUUxMSwgRWRnZSBhbmQgQ2hyb21lIE1hYyA8IDUyICgjOTUxMylcclxuXHRcdFx0XHRcdCEodGV4dHVyZVR5cGUgPT09IEZsb2F0VHlwZSAmJiAoY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCdPRVNfdGV4dHVyZV9mbG9hdCcpIHx8IGV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnKSkpICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcclxuXHRcdFx0XHRcdCEodGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgKGNhcGFiaWxpdGllcy5pc1dlYkdMMiA/IGV4dGVuc2lvbnMuZ2V0KCdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JykgOiBleHRlbnNpb25zLmdldCgnRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0JykpKSkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBVbnNpZ25lZEJ5dGVUeXBlIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgdHlwZS4nKTtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoX2dsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoMzYxNjApID09PSAzNjA1Mykge1xyXG5cclxuXHRcdFx0XHRcdC8vIHRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50IGVuc3VyZXMgdmFsaWQgcmVhZCByZXF1ZXN0cyAobm8gb3V0LW9mLWJvdW5kcyBwaXhlbHMsIHNlZSAjODYwNClcclxuXHJcblx0XHRcdFx0XHRpZiAoKHggPj0gMCAmJiB4IDw9IChyZW5kZXJUYXJnZXQud2lkdGggLSB3aWR0aCkpICYmICh5ID49IDAgJiYgeSA8PSAocmVuZGVyVGFyZ2V0LmhlaWdodCAtIGhlaWdodCkpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRfZ2wucmVhZFBpeGVscyh4LCB5LCB3aWR0aCwgaGVpZ2h0LCB1dGlscy5jb252ZXJ0KHRleHR1cmVGb3JtYXQpLCB1dGlscy5jb252ZXJ0KHRleHR1cmVUeXBlKSwgYnVmZmVyKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZWFkUGl4ZWxzIGZyb20gcmVuZGVyVGFyZ2V0IGZhaWxlZC4gRnJhbWVidWZmZXIgbm90IGNvbXBsZXRlLicpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGZpbmFsbHkge1xyXG5cclxuXHRcdFx0XHRpZiAocmVzdG9yZSkge1xyXG5cclxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoMzYxNjAsIF9jdXJyZW50RnJhbWVidWZmZXIpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmNvcHlGcmFtZWJ1ZmZlclRvVGV4dHVyZSA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgdGV4dHVyZSwgbGV2ZWwpIHtcclxuXHJcblx0XHR2YXIgd2lkdGggPSB0ZXh0dXJlLmltYWdlLndpZHRoO1xyXG5cdFx0dmFyIGhlaWdodCA9IHRleHR1cmUuaW1hZ2UuaGVpZ2h0O1xyXG5cdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCh0ZXh0dXJlLmZvcm1hdCk7XHJcblxyXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKHRleHR1cmUsIDApO1xyXG5cclxuXHRcdF9nbC5jb3B5VGV4SW1hZ2UyRCgzNTUzLCBsZXZlbCB8fCAwLCBnbEZvcm1hdCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgMCk7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuY29weVRleHR1cmVUb1RleHR1cmUgPSBmdW5jdGlvbiAocG9zaXRpb24sIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIGxldmVsKSB7XHJcblxyXG5cdFx0dmFyIHdpZHRoID0gc3JjVGV4dHVyZS5pbWFnZS53aWR0aDtcclxuXHRcdHZhciBoZWlnaHQgPSBzcmNUZXh0dXJlLmltYWdlLmhlaWdodDtcclxuXHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoZHN0VGV4dHVyZS5mb3JtYXQpO1xyXG5cdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoZHN0VGV4dHVyZS50eXBlKTtcclxuXHJcblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoZHN0VGV4dHVyZSwgMCk7XHJcblxyXG5cdFx0aWYgKHNyY1RleHR1cmUuaXNEYXRhVGV4dHVyZSkge1xyXG5cclxuXHRcdFx0X2dsLnRleFN1YkltYWdlMkQoMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZS5kYXRhKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0X2dsLnRleFN1YkltYWdlMkQoMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRpZiAodHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcblx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ29ic2VydmUnLCB7IGRldGFpbDogdGhpcyB9KSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRm9nRXhwMihjb2xvciwgZGVuc2l0eSkge1xyXG5cclxuXHR0aGlzLm5hbWUgPSAnJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcihjb2xvcik7XHJcblx0dGhpcy5kZW5zaXR5ID0gKGRlbnNpdHkgIT09IHVuZGVmaW5lZCkgPyBkZW5zaXR5IDogMC4wMDAyNTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oRm9nRXhwMi5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNGb2dFeHAyOiB0cnVlLFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgRm9nRXhwMih0aGlzLmNvbG9yLCB0aGlzLmRlbnNpdHkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICggLyogbWV0YSAqLykge1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHR5cGU6ICdGb2dFeHAyJyxcclxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXHJcblx0XHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBGb2coY29sb3IsIG5lYXIsIGZhcikge1xyXG5cclxuXHR0aGlzLm5hbWUgPSAnJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcihjb2xvcik7XHJcblxyXG5cdHRoaXMubmVhciA9IChuZWFyICE9PSB1bmRlZmluZWQpID8gbmVhciA6IDE7XHJcblx0dGhpcy5mYXIgPSAoZmFyICE9PSB1bmRlZmluZWQpID8gZmFyIDogMTAwMDtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oRm9nLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc0ZvZzogdHJ1ZSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEZvZyh0aGlzLmNvbG9yLCB0aGlzLm5lYXIsIHRoaXMuZmFyKTtcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAoIC8qIG1ldGEgKi8pIHtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0eXBlOiAnRm9nJyxcclxuXHRcdFx0Y29sb3I6IHRoaXMuY29sb3IuZ2V0SGV4KCksXHJcblx0XHRcdG5lYXI6IHRoaXMubmVhcixcclxuXHRcdFx0ZmFyOiB0aGlzLmZhclxyXG5cdFx0fTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gSW50ZXJsZWF2ZWRCdWZmZXIoYXJyYXksIHN0cmlkZSkge1xyXG5cclxuXHR0aGlzLmFycmF5ID0gYXJyYXk7XHJcblx0dGhpcy5zdHJpZGUgPSBzdHJpZGU7XHJcblx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBzdHJpZGUgOiAwO1xyXG5cclxuXHR0aGlzLmR5bmFtaWMgPSBmYWxzZTtcclxuXHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcclxuXHJcblx0dGhpcy52ZXJzaW9uID0gMDtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAodmFsdWUgPT09IHRydWUpIHsgdGhpcy52ZXJzaW9uKys7IH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc0ludGVybGVhdmVkQnVmZmVyOiB0cnVlLFxyXG5cclxuXHRvblVwbG9hZENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IH0sXHJcblxyXG5cdHNldER5bmFtaWM6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMuZHluYW1pYyA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3Ioc291cmNlLmFycmF5KTtcclxuXHRcdHRoaXMuY291bnQgPSBzb3VyY2UuY291bnQ7XHJcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XHJcblx0XHR0aGlzLmR5bmFtaWMgPSBzb3VyY2UuZHluYW1pYztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weUF0OiBmdW5jdGlvbiAoaW5kZXgxLCBhdHRyaWJ1dGUsIGluZGV4Mikge1xyXG5cclxuXHRcdGluZGV4MSAqPSB0aGlzLnN0cmlkZTtcclxuXHRcdGluZGV4MiAqPSBhdHRyaWJ1dGUuc3RyaWRlO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5zdHJpZGU7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHRoaXMuYXJyYXlbaW5kZXgxICsgaV0gPSBhdHRyaWJ1dGUuYXJyYXlbaW5kZXgyICsgaV07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7IG9mZnNldCA9IDA7IH1cclxuXHJcblx0XHR0aGlzLmFycmF5LnNldCh2YWx1ZSwgb2Zmc2V0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRvblVwbG9hZDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblxyXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKGludGVybGVhdmVkQnVmZmVyLCBpdGVtU2l6ZSwgb2Zmc2V0LCBub3JtYWxpemVkKSB7XHJcblxyXG5cdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xyXG5cdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcclxuXHR0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuXHJcblx0dGhpcy5ub3JtYWxpemVkID0gbm9ybWFsaXplZCA9PT0gdHJ1ZTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xyXG5cclxuXHRjb3VudDoge1xyXG5cclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5jb3VudDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGFycmF5OiB7XHJcblxyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlOiB0cnVlLFxyXG5cclxuXHRzZXRYOiBmdW5jdGlvbiAoaW5kZXgsIHgpIHtcclxuXHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXRdID0geDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WTogZnVuY3Rpb24gKGluZGV4LCB5KSB7XHJcblxyXG5cdFx0dGhpcy5kYXRhLmFycmF5W2luZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMV0gPSB5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRaOiBmdW5jdGlvbiAoaW5kZXgsIHopIHtcclxuXHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyXSA9IHo7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFc6IGZ1bmN0aW9uIChpbmRleCwgdykge1xyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDNdID0gdztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0WDogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVtpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldF07XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFk6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxXTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0WjogZnVuY3Rpb24gKGluZGV4KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVtpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDJdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRXOiBmdW5jdGlvbiAoaW5kZXgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2luZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgM107XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFhZOiBmdW5jdGlvbiAoaW5kZXgsIHgsIHkpIHtcclxuXHJcblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCArIDBdID0geDtcclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCArIDFdID0geTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WFlaOiBmdW5jdGlvbiAoaW5kZXgsIHgsIHksIHopIHtcclxuXHJcblx0XHRpbmRleCA9IGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0O1xyXG5cclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCArIDBdID0geDtcclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCArIDFdID0geTtcclxuXHRcdHRoaXMuZGF0YS5hcnJheVtpbmRleCArIDJdID0gejtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0WFlaVzogZnVuY3Rpb24gKGluZGV4LCB4LCB5LCB6LCB3KSB7XHJcblxyXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcclxuXHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKyAwXSA9IHg7XHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKyAxXSA9IHk7XHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKyAyXSA9IHo7XHJcblx0XHR0aGlzLmRhdGEuYXJyYXlbaW5kZXggKyAzXSA9IHc7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBjb2xvcjogPGhleD4sXHJcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICByb3RhdGlvbjogPGZsb2F0PixcclxuICogIHNpemVBdHRlbnVhdGlvbjogPGJvb2w+XHJcbiAqIH1cclxuICovXHJcblxyXG5mdW5jdGlvbiBTcHJpdGVNYXRlcmlhbChwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdE1hdGVyaWFsLmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdTcHJpdGVNYXRlcmlhbCc7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoMHhmZmZmZmYpO1xyXG5cdHRoaXMubWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5yb3RhdGlvbiA9IDA7XHJcblxyXG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcclxuXHJcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcHJpdGVNYXRlcmlhbDtcclxuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmlzU3ByaXRlTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHR0aGlzLnJvdGF0aW9uID0gc291cmNlLnJvdGF0aW9uO1xyXG5cclxuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbnZhciBfZ2VvbWV0cnk7XHJcblxyXG52YXIgX2ludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF93b3JsZFNjYWxlID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9tdlBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbnZhciBfYWxpZ25lZFBvc2l0aW9uID0gbmV3IFZlY3RvcjIoKTtcclxudmFyIF9yb3RhdGVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xyXG52YXIgX3ZpZXdXb3JsZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG52YXIgX3ZBJDEgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3ZCJDEgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3ZDJDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxudmFyIF91dkEkMSA9IG5ldyBWZWN0b3IyKCk7XHJcbnZhciBfdXZCJDEgPSBuZXcgVmVjdG9yMigpO1xyXG52YXIgX3V2QyQxID0gbmV3IFZlY3RvcjIoKTtcclxuXHJcbmZ1bmN0aW9uIFNwcml0ZShtYXRlcmlhbCkge1xyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU3ByaXRlJztcclxuXHJcblx0aWYgKF9nZW9tZXRyeSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0X2dlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdFx0dmFyIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG5cdFx0XHQtIDAuNSwgLSAwLjUsIDAsIDAsIDAsXHJcblx0XHRcdDAuNSwgLSAwLjUsIDAsIDEsIDAsXHJcblx0XHRcdDAuNSwgMC41LCAwLCAxLCAxLFxyXG5cdFx0XHQtIDAuNSwgMC41LCAwLCAwLCAxXHJcblx0XHRdKTtcclxuXHJcblx0XHR2YXIgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoZmxvYXQzMkFycmF5LCA1KTtcclxuXHJcblx0XHRfZ2VvbWV0cnkuc2V0SW5kZXgoWzAsIDEsIDIsIDAsIDIsIDNdKTtcclxuXHRcdF9nZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKGludGVybGVhdmVkQnVmZmVyLCAzLCAwLCBmYWxzZSkpO1xyXG5cdFx0X2dlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoaW50ZXJsZWF2ZWRCdWZmZXIsIDIsIDMsIGZhbHNlKSk7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5nZW9tZXRyeSA9IF9nZW9tZXRyeTtcclxuXHR0aGlzLm1hdGVyaWFsID0gKG1hdGVyaWFsICE9PSB1bmRlZmluZWQpID8gbWF0ZXJpYWwgOiBuZXcgU3ByaXRlTWF0ZXJpYWwoKTtcclxuXHJcblx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMigwLjUsIDAuNSk7XHJcblxyXG59XHJcblxyXG5TcHJpdGUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFNwcml0ZSxcclxuXHJcblx0aXNTcHJpdGU6IHRydWUsXHJcblxyXG5cdHJheWNhc3Q6IGZ1bmN0aW9uIChyYXljYXN0ZXIsIGludGVyc2VjdHMpIHtcclxuXHJcblx0XHRpZiAocmF5Y2FzdGVyLmNhbWVyYSA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU3ByaXRlOiBcIlJheWNhc3Rlci5jYW1lcmFcIiBuZWVkcyB0byBiZSBzZXQgaW4gb3JkZXIgdG8gcmF5Y2FzdCBhZ2FpbnN0IHNwcml0ZXMuJyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdF93b3JsZFNjYWxlLnNldEZyb21NYXRyaXhTY2FsZSh0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRfdmlld1dvcmxkTWF0cml4LmNvcHkocmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZCk7XHJcblx0XHR0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKHJheWNhc3Rlci5jYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCB0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRfbXZQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tb2RlbFZpZXdNYXRyaXgpO1xyXG5cclxuXHRcdGlmIChyYXljYXN0ZXIuY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEgJiYgdGhpcy5tYXRlcmlhbC5zaXplQXR0ZW51YXRpb24gPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRfd29ybGRTY2FsZS5tdWx0aXBseVNjYWxhcigtIF9tdlBvc2l0aW9uLnopO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcm90YXRpb24gPSB0aGlzLm1hdGVyaWFsLnJvdGF0aW9uO1xyXG5cdFx0dmFyIHNpbiwgY29zO1xyXG5cdFx0aWYgKHJvdGF0aW9uICE9PSAwKSB7XHJcblxyXG5cdFx0XHRjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbik7XHJcblx0XHRcdHNpbiA9IE1hdGguc2luKHJvdGF0aW9uKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGNlbnRlciA9IHRoaXMuY2VudGVyO1xyXG5cclxuXHRcdHRyYW5zZm9ybVZlcnRleChfdkEkMS5zZXQoLSAwLjUsIC0gMC41LCAwKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zKTtcclxuXHRcdHRyYW5zZm9ybVZlcnRleChfdkIkMS5zZXQoMC41LCAtIDAuNSwgMCksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyk7XHJcblx0XHR0cmFuc2Zvcm1WZXJ0ZXgoX3ZDJDEuc2V0KDAuNSwgMC41LCAwKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zKTtcclxuXHJcblx0XHRfdXZBJDEuc2V0KDAsIDApO1xyXG5cdFx0X3V2QiQxLnNldCgxLCAwKTtcclxuXHRcdF91dkMkMS5zZXQoMSwgMSk7XHJcblxyXG5cdFx0Ly8gY2hlY2sgZmlyc3QgdHJpYW5nbGVcclxuXHRcdHZhciBpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKF92QSQxLCBfdkIkMSwgX3ZDJDEsIGZhbHNlLCBfaW50ZXJzZWN0UG9pbnQpO1xyXG5cclxuXHRcdGlmIChpbnRlcnNlY3QgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdC8vIGNoZWNrIHNlY29uZCB0cmlhbmdsZVxyXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoX3ZCJDEuc2V0KC0gMC41LCAwLjUsIDApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MpO1xyXG5cdFx0XHRfdXZCJDEuc2V0KDAsIDEpO1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZShfdkEkMSwgX3ZDJDEsIF92QiQxLCBmYWxzZSwgX2ludGVyc2VjdFBvaW50KTtcclxuXHRcdFx0aWYgKGludGVyc2VjdCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oX2ludGVyc2VjdFBvaW50KTtcclxuXHJcblx0XHRpZiAoZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0aW50ZXJzZWN0cy5wdXNoKHtcclxuXHJcblx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxyXG5cdFx0XHR1djogVHJpYW5nbGUuZ2V0VVYoX2ludGVyc2VjdFBvaW50LCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBfdXZBJDEsIF91dkIkMSwgX3V2QyQxLCBuZXcgVmVjdG9yMigpKSxcclxuXHRcdFx0ZmFjZTogbnVsbCxcclxuXHRcdFx0b2JqZWN0OiB0aGlzXHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubWF0ZXJpYWwpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0aWYgKHNvdXJjZS5jZW50ZXIgIT09IHVuZGVmaW5lZCkgeyB0aGlzLmNlbnRlci5jb3B5KHNvdXJjZS5jZW50ZXIpOyB9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcblxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHRyYW5zZm9ybVZlcnRleCh2ZXJ0ZXhQb3NpdGlvbiwgbXZQb3NpdGlvbiwgY2VudGVyLCBzY2FsZSwgc2luLCBjb3MpIHtcclxuXHJcblx0Ly8gY29tcHV0ZSBwb3NpdGlvbiBpbiBjYW1lcmEgc3BhY2VcclxuXHRfYWxpZ25lZFBvc2l0aW9uLnN1YlZlY3RvcnModmVydGV4UG9zaXRpb24sIGNlbnRlcikuYWRkU2NhbGFyKDAuNSkubXVsdGlwbHkoc2NhbGUpO1xyXG5cclxuXHQvLyB0byBjaGVjayBpZiByb3RhdGlvbiBpcyBub3QgemVyb1xyXG5cdGlmIChzaW4gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdF9yb3RhdGVkUG9zaXRpb24ueCA9IChjb3MgKiBfYWxpZ25lZFBvc2l0aW9uLngpIC0gKHNpbiAqIF9hbGlnbmVkUG9zaXRpb24ueSk7XHJcblx0XHRfcm90YXRlZFBvc2l0aW9uLnkgPSAoc2luICogX2FsaWduZWRQb3NpdGlvbi54KSArIChjb3MgKiBfYWxpZ25lZFBvc2l0aW9uLnkpO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdF9yb3RhdGVkUG9zaXRpb24uY29weShfYWxpZ25lZFBvc2l0aW9uKTtcclxuXHJcblx0fVxyXG5cclxuXHJcblx0dmVydGV4UG9zaXRpb24uY29weShtdlBvc2l0aW9uKTtcclxuXHR2ZXJ0ZXhQb3NpdGlvbi54ICs9IF9yb3RhdGVkUG9zaXRpb24ueDtcclxuXHR2ZXJ0ZXhQb3NpdGlvbi55ICs9IF9yb3RhdGVkUG9zaXRpb24ueTtcclxuXHJcblx0Ly8gdHJhbnNmb3JtIHRvIHdvcmxkIHNwYWNlXHJcblx0dmVydGV4UG9zaXRpb24uYXBwbHlNYXRyaXg0KF92aWV3V29ybGRNYXRyaXgpO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIF92MSQ0ID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MiQyID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIExPRCgpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xPRCc7XHJcblxyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcclxuXHRcdGxldmVsczoge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHR2YWx1ZTogW11cclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dGhpcy5hdXRvVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn1cclxuXHJcbkxPRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogTE9ELFxyXG5cclxuXHRpc0xPRDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlLCBmYWxzZSk7XHJcblxyXG5cdFx0dmFyIGxldmVscyA9IHNvdXJjZS5sZXZlbHM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBsZXZlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbaV07XHJcblxyXG5cdFx0XHR0aGlzLmFkZExldmVsKGxldmVsLm9iamVjdC5jbG9uZSgpLCBsZXZlbC5kaXN0YW5jZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGRMZXZlbDogZnVuY3Rpb24gKG9iamVjdCwgZGlzdGFuY2UpIHtcclxuXHJcblx0XHRpZiAoZGlzdGFuY2UgPT09IHVuZGVmaW5lZCkgeyBkaXN0YW5jZSA9IDA7IH1cclxuXHJcblx0XHRkaXN0YW5jZSA9IE1hdGguYWJzKGRpc3RhbmNlKTtcclxuXHJcblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XHJcblxyXG5cdFx0Zm9yICh2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsKyspIHtcclxuXHJcblx0XHRcdGlmIChkaXN0YW5jZSA8IGxldmVsc1tsXS5kaXN0YW5jZSkge1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0bGV2ZWxzLnNwbGljZShsLCAwLCB7IGRpc3RhbmNlOiBkaXN0YW5jZSwgb2JqZWN0OiBvYmplY3QgfSk7XHJcblxyXG5cdFx0dGhpcy5hZGQob2JqZWN0KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0T2JqZWN0Rm9yRGlzdGFuY2U6IGZ1bmN0aW9uIChkaXN0YW5jZSkge1xyXG5cclxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdGlmIChkaXN0YW5jZSA8IGxldmVsc1tpXS5kaXN0YW5jZSkge1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGxldmVsc1tpIC0gMV0ub2JqZWN0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRyYXljYXN0OiBmdW5jdGlvbiAocmF5Y2FzdGVyLCBpbnRlcnNlY3RzKSB7XHJcblxyXG5cdFx0X3YxJDQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oX3YxJDQpO1xyXG5cclxuXHRcdHRoaXMuZ2V0T2JqZWN0Rm9yRGlzdGFuY2UoZGlzdGFuY2UpLnJheWNhc3QocmF5Y2FzdGVyLCBpbnRlcnNlY3RzKTtcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlOiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcblxyXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xyXG5cclxuXHRcdGlmIChsZXZlbHMubGVuZ3RoID4gMSkge1xyXG5cclxuXHRcdFx0X3YxJDQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGNhbWVyYS5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdF92MiQyLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdHZhciBkaXN0YW5jZSA9IF92MSQ0LmRpc3RhbmNlVG8oX3YyJDIpO1xyXG5cclxuXHRcdFx0bGV2ZWxzWzBdLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRpZiAoZGlzdGFuY2UgPj0gbGV2ZWxzW2ldLmRpc3RhbmNlKSB7XHJcblxyXG5cdFx0XHRcdFx0bGV2ZWxzW2kgLSAxXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0bGV2ZWxzW2ldLm9iamVjdC52aXNpYmxlID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0bGV2ZWxzW2ldLm9iamVjdC52aXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3QubGV2ZWxzID0gW107XHJcblxyXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGxldmVsID0gbGV2ZWxzW2ldO1xyXG5cclxuXHRcdFx0ZGF0YS5vYmplY3QubGV2ZWxzLnB1c2goe1xyXG5cdFx0XHRcdG9iamVjdDogbGV2ZWwub2JqZWN0LnV1aWQsXHJcblx0XHRcdFx0ZGlzdGFuY2U6IGxldmVsLmRpc3RhbmNlXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gU2tpbm5lZE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKSB7XHJcblxyXG5cdGlmIChnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5KSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU2tpbm5lZE1lc2ggbm8gbG9uZ2VyIHN1cHBvcnRzIFRIUkVFLkdlb21ldHJ5LiBVc2UgVEhSRUUuQnVmZmVyR2VvbWV0cnkgaW5zdGVhZC4nKTtcclxuXHJcblx0fVxyXG5cclxuXHRNZXNoLmNhbGwodGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1NraW5uZWRNZXNoJztcclxuXHJcblx0dGhpcy5iaW5kTW9kZSA9ICdhdHRhY2hlZCc7XHJcblx0dGhpcy5iaW5kTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcbn1cclxuXHJcblNraW5uZWRNZXNoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShNZXNoLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFNraW5uZWRNZXNoLFxyXG5cclxuXHRpc1NraW5uZWRNZXNoOiB0cnVlLFxyXG5cclxuXHRiaW5kOiBmdW5jdGlvbiAoc2tlbGV0b24sIGJpbmRNYXRyaXgpIHtcclxuXHJcblx0XHR0aGlzLnNrZWxldG9uID0gc2tlbGV0b247XHJcblxyXG5cdFx0aWYgKGJpbmRNYXRyaXggPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHJcblx0XHRcdHRoaXMuc2tlbGV0b24uY2FsY3VsYXRlSW52ZXJzZXMoKTtcclxuXHJcblx0XHRcdGJpbmRNYXRyaXggPSB0aGlzLm1hdHJpeFdvcmxkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJpbmRNYXRyaXguY29weShiaW5kTWF0cml4KTtcclxuXHRcdHRoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZShiaW5kTWF0cml4KTtcclxuXHJcblx0fSxcclxuXHJcblx0cG9zZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuc2tlbGV0b24ucG9zZSgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRub3JtYWxpemVTa2luV2VpZ2h0czogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xyXG5cclxuXHRcdHZhciBza2luV2VpZ2h0ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQ7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBza2luV2VpZ2h0LmNvdW50OyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2ZWN0b3IueCA9IHNraW5XZWlnaHQuZ2V0WChpKTtcclxuXHRcdFx0dmVjdG9yLnkgPSBza2luV2VpZ2h0LmdldFkoaSk7XHJcblx0XHRcdHZlY3Rvci56ID0gc2tpbldlaWdodC5nZXRaKGkpO1xyXG5cdFx0XHR2ZWN0b3IudyA9IHNraW5XZWlnaHQuZ2V0VyhpKTtcclxuXHJcblx0XHRcdHZhciBzY2FsZSA9IDEuMCAvIHZlY3Rvci5tYW5oYXR0YW5MZW5ndGgoKTtcclxuXHJcblx0XHRcdGlmIChzY2FsZSAhPT0gSW5maW5pdHkpIHtcclxuXHJcblx0XHRcdFx0dmVjdG9yLm11bHRpcGx5U2NhbGFyKHNjYWxlKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHZlY3Rvci5zZXQoMSwgMCwgMCwgMCk7IC8vIGRvIHNvbWV0aGluZyByZWFzb25hYmxlXHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRza2luV2VpZ2h0LnNldFhZWlcoaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdmVjdG9yLncpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uIChmb3JjZSkge1xyXG5cclxuXHRcdE1lc2gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcywgZm9yY2UpO1xyXG5cclxuXHRcdGlmICh0aGlzLmJpbmRNb2RlID09PSAnYXR0YWNoZWQnKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UodGhpcy5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICh0aGlzLmJpbmRNb2RlID09PSAnZGV0YWNoZWQnKSB7XHJcblxyXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UodGhpcy5iaW5kTWF0cml4KTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Ta2lubmVkTWVzaDogVW5yZWNvZ25pemVkIGJpbmRNb2RlOiAnICsgdGhpcy5iaW5kTW9kZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIG1pY2hhZWwgZ3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbVxyXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cclxuICovXHJcblxyXG52YXIgX29mZnNldE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuZnVuY3Rpb24gU2tlbGV0b24oYm9uZXMsIGJvbmVJbnZlcnNlcykge1xyXG5cclxuXHQvLyBjb3B5IHRoZSBib25lIGFycmF5XHJcblxyXG5cdGJvbmVzID0gYm9uZXMgfHwgW107XHJcblxyXG5cdHRoaXMuYm9uZXMgPSBib25lcy5zbGljZSgwKTtcclxuXHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5ib25lcy5sZW5ndGggKiAxNik7XHJcblxyXG5cdHRoaXMuZnJhbWUgPSAtIDE7XHJcblxyXG5cdC8vIHVzZSB0aGUgc3VwcGxpZWQgYm9uZSBpbnZlcnNlcyBvciBjYWxjdWxhdGUgdGhlIGludmVyc2VzXHJcblxyXG5cdGlmIChib25lSW52ZXJzZXMgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdHRoaXMuY2FsY3VsYXRlSW52ZXJzZXMoKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRpZiAodGhpcy5ib25lcy5sZW5ndGggPT09IGJvbmVJbnZlcnNlcy5sZW5ndGgpIHtcclxuXHJcblx0XHRcdHRoaXMuYm9uZUludmVyc2VzID0gYm9uZUludmVyc2VzLnNsaWNlKDApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlNrZWxldG9uIGJvbmVJbnZlcnNlcyBpcyB0aGUgd3JvbmcgbGVuZ3RoLicpO1xyXG5cclxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKG5ldyBNYXRyaXg0KCkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihTa2VsZXRvbi5wcm90b3R5cGUsIHtcclxuXHJcblx0Y2FsY3VsYXRlSW52ZXJzZXM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuYm9uZXNbaV0pIHtcclxuXHJcblx0XHRcdFx0aW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMuYm9uZXNbaV0ubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaChpbnZlcnNlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdHBvc2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgYm9uZSwgaSwgaWw7XHJcblxyXG5cdFx0Ly8gcmVjb3ZlciB0aGUgYmluZC10aW1lIHdvcmxkIG1hdHJpY2VzXHJcblxyXG5cdFx0Zm9yIChpID0gMCwgaWwgPSB0aGlzLmJvbmVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdGJvbmUgPSB0aGlzLmJvbmVzW2ldO1xyXG5cclxuXHRcdFx0aWYgKGJvbmUpIHtcclxuXHJcblx0XHRcdFx0Ym9uZS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKHRoaXMuYm9uZUludmVyc2VzW2ldKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0Ym9uZSA9IHRoaXMuYm9uZXNbaV07XHJcblxyXG5cdFx0XHRpZiAoYm9uZSkge1xyXG5cclxuXHRcdFx0XHRpZiAoYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lKSB7XHJcblxyXG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXguZ2V0SW52ZXJzZShib25lLnBhcmVudC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0XHRib25lLm1hdHJpeC5tdWx0aXBseShib25lLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRib25lLm1hdHJpeC5jb3B5KGJvbmUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJvbmUubWF0cml4LmRlY29tcG9zZShib25lLnBvc2l0aW9uLCBib25lLnF1YXRlcm5pb24sIGJvbmUuc2NhbGUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGJvbmVzID0gdGhpcy5ib25lcztcclxuXHRcdHZhciBib25lSW52ZXJzZXMgPSB0aGlzLmJvbmVJbnZlcnNlcztcclxuXHRcdHZhciBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcclxuXHRcdHZhciBib25lVGV4dHVyZSA9IHRoaXMuYm9uZVRleHR1cmU7XHJcblxyXG5cdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0Ly8gY29tcHV0ZSB0aGUgb2Zmc2V0IGJldHdlZW4gdGhlIGN1cnJlbnQgYW5kIHRoZSBvcmlnaW5hbCB0cmFuc2Zvcm1cclxuXHJcblx0XHRcdHZhciBtYXRyaXggPSBib25lc1tpXSA/IGJvbmVzW2ldLm1hdHJpeFdvcmxkIDogX2lkZW50aXR5TWF0cml4O1xyXG5cclxuXHRcdFx0X29mZnNldE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKG1hdHJpeCwgYm9uZUludmVyc2VzW2ldKTtcclxuXHRcdFx0X29mZnNldE1hdHJpeC50b0FycmF5KGJvbmVNYXRyaWNlcywgaSAqIDE2KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGJvbmVUZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBTa2VsZXRvbih0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEJvbmVCeU5hbWU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gdGhpcy5ib25lcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgYm9uZSA9IHRoaXMuYm9uZXNbaV07XHJcblxyXG5cdFx0XHRpZiAoYm9uZS5uYW1lID09PSBuYW1lKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBib25lO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cclxuICovXHJcblxyXG5mdW5jdGlvbiBCb25lKCkge1xyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQm9uZSc7XHJcblxyXG59XHJcblxyXG5Cb25lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QzRC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBCb25lLFxyXG5cclxuXHRpc0JvbmU6IHRydWVcclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gSW5zdGFuY2VkTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50KSB7XHJcblx0TWVzaC5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG5cdHRoaXMuaW5zdGFuY2VNYXRyaXggPSBuZXcgQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoY291bnQgKiAxNiksIDE2KTtcclxuXHJcblx0dGhpcy5jb3VudCA9IGNvdW50O1xyXG5cclxufVxyXG5cclxuSW5zdGFuY2VkTWVzaC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTWVzaC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRNZXNoLFxyXG5cclxuXHRpc0luc3RhbmNlZE1lc2g6IHRydWUsXHJcblxyXG5cdHJheWNhc3Q6IGZ1bmN0aW9uICgpIHsgfSxcclxuXHJcblx0c2V0TWF0cml4QXQ6IGZ1bmN0aW9uIChpbmRleCwgbWF0cml4KSB7XHJcblxyXG5cdFx0bWF0cml4LnRvQXJyYXkodGhpcy5pbnN0YW5jZU1hdHJpeC5hcnJheSwgaW5kZXggKiAxNik7XHJcblxyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkgeyB9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKlxyXG4gKiBwYXJhbWV0ZXJzID0ge1xyXG4gKiAgY29sb3I6IDxoZXg+LFxyXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcclxuICpcclxuICogIGxpbmV3aWR0aDogPGZsb2F0PixcclxuICogIGxpbmVjYXA6IFwicm91bmRcIixcclxuICogIGxpbmVqb2luOiBcInJvdW5kXCJcclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpbmVCYXNpY01hdGVyaWFsJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigweGZmZmZmZik7XHJcblxyXG5cdHRoaXMubGluZXdpZHRoID0gMTtcclxuXHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xyXG5cdHRoaXMubGluZWpvaW4gPSAncm91bmQnO1xyXG5cclxuXHR0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcclxuXHJcbn1cclxuXHJcbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUJhc2ljTWF0ZXJpYWw7XHJcblxyXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lQmFzaWNNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5MaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLmNvbG9yLmNvcHkoc291cmNlLmNvbG9yKTtcclxuXHJcblx0dGhpcy5saW5ld2lkdGggPSBzb3VyY2UubGluZXdpZHRoO1xyXG5cdHRoaXMubGluZWNhcCA9IHNvdXJjZS5saW5lY2FwO1xyXG5cdHRoaXMubGluZWpvaW4gPSBzb3VyY2UubGluZWpvaW47XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbnZhciBfc3RhcnQgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2VuZCA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfaW52ZXJzZU1hdHJpeCQxID0gbmV3IE1hdHJpeDQoKTtcclxudmFyIF9yYXkkMSA9IG5ldyBSYXkoKTtcclxudmFyIF9zcGhlcmUkMiA9IG5ldyBTcGhlcmUoKTtcclxuXHJcbmZ1bmN0aW9uIExpbmUoZ2VvbWV0cnksIG1hdGVyaWFsLCBtb2RlKSB7XHJcblxyXG5cdGlmIChtb2RlID09PSAxKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTGluZTogcGFyYW1ldGVyIFRIUkVFLkxpbmVQaWVjZXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFRIUkVFLkxpbmVTZWdtZW50cyBpbnN0ZWFkLicpO1xyXG5cclxuXHR9XHJcblxyXG5cdE9iamVjdDNELmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdMaW5lJztcclxuXHJcblx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmIH0pO1xyXG5cclxufVxyXG5cclxuTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogTGluZSxcclxuXHJcblx0aXNMaW5lOiB0cnVlLFxyXG5cclxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdC8vIHdlIGFzc3VtZSBub24taW5kZXhlZCBnZW9tZXRyeVxyXG5cclxuXHRcdFx0aWYgKGdlb21ldHJ5LmluZGV4ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbMF07XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAxLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRfc3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbkF0dHJpYnV0ZSwgaSAtIDEpO1xyXG5cdFx0XHRcdFx0X2VuZC5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uQXR0cmlidXRlLCBpKTtcclxuXHJcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzW2ldID0gbGluZURpc3RhbmNlc1tpIC0gMV07XHJcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzW2ldICs9IF9zdGFydC5kaXN0YW5jZVRvKF9lbmQpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobGluZURpc3RhbmNlcywgMSkpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKGdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xyXG5cdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7XHJcblxyXG5cdFx0XHRsaW5lRGlzdGFuY2VzWzBdID0gMDtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAxLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbaV0gPSBsaW5lRGlzdGFuY2VzW2kgLSAxXTtcclxuXHRcdFx0XHRsaW5lRGlzdGFuY2VzW2ldICs9IHZlcnRpY2VzW2kgLSAxXS5kaXN0YW5jZVRvKHZlcnRpY2VzW2ldKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHJheWNhc3Q6IGZ1bmN0aW9uIChyYXljYXN0ZXIsIGludGVyc2VjdHMpIHtcclxuXHJcblx0XHR2YXIgcHJlY2lzaW9uID0gcmF5Y2FzdGVyLmxpbmVQcmVjaXNpb247XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHRcdHZhciBtYXRyaXhXb3JsZCA9IHRoaXMubWF0cml4V29ybGQ7XHJcblxyXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsKSB7IGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOyB9XHJcblxyXG5cdFx0X3NwaGVyZSQyLmNvcHkoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUpO1xyXG5cdFx0X3NwaGVyZSQyLmFwcGx5TWF0cml4NChtYXRyaXhXb3JsZCk7XHJcblx0XHRfc3BoZXJlJDIucmFkaXVzICs9IHByZWNpc2lvbjtcclxuXHJcblx0XHRpZiAocmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKF9zcGhlcmUkMikgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0X2ludmVyc2VNYXRyaXgkMS5nZXRJbnZlcnNlKG1hdHJpeFdvcmxkKTtcclxuXHRcdF9yYXkkMS5jb3B5KHJheWNhc3Rlci5yYXkpLmFwcGx5TWF0cml4NChfaW52ZXJzZU1hdHJpeCQxKTtcclxuXHJcblx0XHR2YXIgbG9jYWxQcmVjaXNpb24gPSBwcmVjaXNpb24gLyAoKHRoaXMuc2NhbGUueCArIHRoaXMuc2NhbGUueSArIHRoaXMuc2NhbGUueikgLyAzKTtcclxuXHRcdHZhciBsb2NhbFByZWNpc2lvblNxID0gbG9jYWxQcmVjaXNpb24gKiBsb2NhbFByZWNpc2lvbjtcclxuXHJcblx0XHR2YXIgdlN0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHZhciB2RW5kID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHZhciBpbnRlclNlZ21lbnQgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIGludGVyUmF5ID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHZhciBzdGVwID0gKHRoaXMgJiYgdGhpcy5pc0xpbmVTZWdtZW50cykgPyAyIDogMTtcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0dmFyIGluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRcdHZhciBhdHRyaWJ1dGVzID0gZ2VvbWV0cnkuYXR0cmlidXRlcztcclxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XHJcblxyXG5cdFx0XHRpZiAoaW5kZXggIT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aCAtIDE7IGkgPCBsOyBpICs9IHN0ZXApIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbaV07XHJcblx0XHRcdFx0XHR2YXIgYiA9IGluZGljZXNbaSArIDFdO1xyXG5cclxuXHRcdFx0XHRcdHZTdGFydC5mcm9tQXJyYXkocG9zaXRpb25zLCBhICogMyk7XHJcblx0XHRcdFx0XHR2RW5kLmZyb21BcnJheShwb3NpdGlvbnMsIGIgKiAzKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgZGlzdFNxID0gX3JheSQxLmRpc3RhbmNlU3FUb1NlZ21lbnQodlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50KTtcclxuXHJcblx0XHRcdFx0XHRpZiAoZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSkgeyBjb250aW51ZTsgfVxyXG5cclxuXHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXHJcblxyXG5cdFx0XHRcdFx0dmFyIGRpc3RhbmNlID0gcmF5Y2FzdGVyLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhpbnRlclJheSk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyKSB7IGNvbnRpbnVlOyB9XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKHtcclxuXHJcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XHJcblx0XHRcdFx0XHRcdC8vIHBvaW50OiByYXljYXN0ZXIucmF5LmF0KCBkaXN0YW5jZSApLFxyXG5cdFx0XHRcdFx0XHRwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpLFxyXG5cdFx0XHRcdFx0XHRpbmRleDogaSxcclxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcclxuXHRcdFx0XHRcdFx0ZmFjZUluZGV4OiBudWxsLFxyXG5cdFx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcclxuXHJcblx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7IGkgPCBsOyBpICs9IHN0ZXApIHtcclxuXHJcblx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KHBvc2l0aW9ucywgMyAqIGkpO1xyXG5cdFx0XHRcdFx0dkVuZC5mcm9tQXJyYXkocG9zaXRpb25zLCAzICogaSArIDMpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBkaXN0U3EgPSBfcmF5JDEuZGlzdGFuY2VTcVRvU2VnbWVudCh2U3RhcnQsIHZFbmQsIGludGVyUmF5LCBpbnRlclNlZ21lbnQpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChkaXN0U3EgPiBsb2NhbFByZWNpc2lvblNxKSB7IGNvbnRpbnVlOyB9XHJcblxyXG5cdFx0XHRcdFx0aW50ZXJSYXkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cclxuXHJcblx0XHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGludGVyUmF5KTtcclxuXHJcblx0XHRcdFx0XHRpZiAoZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIpIHsgY29udGludWU7IH1cclxuXHJcblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goe1xyXG5cclxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxyXG5cdFx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cclxuXHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXHJcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksXHJcblx0XHRcdFx0XHRcdGluZGV4OiBpLFxyXG5cdFx0XHRcdFx0XHRmYWNlOiBudWxsLFxyXG5cdFx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXHJcblx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xyXG5cclxuXHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIGlmIChnZW9tZXRyeS5pc0dlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcclxuXHRcdFx0dmFyIG5iVmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5iVmVydGljZXMgLSAxOyBpICs9IHN0ZXApIHtcclxuXHJcblx0XHRcdFx0dmFyIGRpc3RTcSA9IF9yYXkkMS5kaXN0YW5jZVNxVG9TZWdtZW50KHZlcnRpY2VzW2ldLCB2ZXJ0aWNlc1tpICsgMV0sIGludGVyUmF5LCBpbnRlclNlZ21lbnQpO1xyXG5cclxuXHRcdFx0XHRpZiAoZGlzdFNxID4gbG9jYWxQcmVjaXNpb25TcSkgeyBjb250aW51ZTsgfVxyXG5cclxuXHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7IC8vTW92ZSBiYWNrIHRvIHdvcmxkIHNwYWNlIGZvciBkaXN0YW5jZSBjYWxjdWxhdGlvblxyXG5cclxuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGludGVyUmF5KTtcclxuXHJcblx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyKSB7IGNvbnRpbnVlOyB9XHJcblxyXG5cdFx0XHRcdGludGVyc2VjdHMucHVzaCh7XHJcblxyXG5cdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxyXG5cdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XHJcblx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcclxuXHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksXHJcblx0XHRcdFx0XHRpbmRleDogaSxcclxuXHRcdFx0XHRcdGZhY2U6IG51bGwsXHJcblx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXHJcblx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcclxuXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbnZhciBfc3RhcnQkMSA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfZW5kJDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gTGluZVNlZ21lbnRzKGdlb21ldHJ5LCBtYXRlcmlhbCkge1xyXG5cclxuXHRMaW5lLmNhbGwodGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpbmVTZWdtZW50cyc7XHJcblxyXG59XHJcblxyXG5MaW5lU2VnbWVudHMucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpbmUucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogTGluZVNlZ21lbnRzLFxyXG5cclxuXHRpc0xpbmVTZWdtZW50czogdHJ1ZSxcclxuXHJcblx0Y29tcHV0ZUxpbmVEaXN0YW5jZXM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHQvLyB3ZSBhc3N1bWUgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcclxuXHJcblx0XHRcdGlmIChnZW9tZXRyeS5pbmRleCA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHR2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHRcdHZhciBsaW5lRGlzdGFuY2VzID0gW107XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gcG9zaXRpb25BdHRyaWJ1dGUuY291bnQ7IGkgPCBsOyBpICs9IDIpIHtcclxuXHJcblx0XHRcdFx0XHRfc3RhcnQkMS5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uQXR0cmlidXRlLCBpKTtcclxuXHRcdFx0XHRcdF9lbmQkMS5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSk7XHJcblxyXG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1tpXSA9IChpID09PSAwKSA/IDAgOiBsaW5lRGlzdGFuY2VzW2kgLSAxXTtcclxuXHRcdFx0XHRcdGxpbmVEaXN0YW5jZXNbaSArIDFdID0gbGluZURpc3RhbmNlc1tpXSArIF9zdGFydCQxLmRpc3RhbmNlVG8oX2VuZCQxKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKGxpbmVEaXN0YW5jZXMsIDEpKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGluZVNlZ21lbnRzLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCk6IENvbXB1dGF0aW9uIG9ubHkgcG9zc2libGUgd2l0aCBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeS4nKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2UgaWYgKGdlb21ldHJ5LmlzR2VvbWV0cnkpIHtcclxuXHJcblx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xyXG5cdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xyXG5cclxuXHRcdFx0XHRfc3RhcnQkMS5jb3B5KHZlcnRpY2VzW2ldKTtcclxuXHRcdFx0XHRfZW5kJDEuY29weSh2ZXJ0aWNlc1tpICsgMV0pO1xyXG5cclxuXHRcdFx0XHRsaW5lRGlzdGFuY2VzW2ldID0gKGkgPT09IDApID8gMCA6IGxpbmVEaXN0YW5jZXNbaSAtIDFdO1xyXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbaSArIDFdID0gbGluZURpc3RhbmNlc1tpXSArIF9zdGFydCQxLmRpc3RhbmNlVG8oX2VuZCQxKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbWdyZXRlciAvIGh0dHA6Ly9naXRodWIuY29tL21ncmV0ZXJcclxuICovXHJcblxyXG5mdW5jdGlvbiBMaW5lTG9vcChnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHJcblx0TGluZS5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdMaW5lTG9vcCc7XHJcblxyXG59XHJcblxyXG5MaW5lTG9vcC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTGluZS5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBMaW5lTG9vcCxcclxuXHJcblx0aXNMaW5lTG9vcDogdHJ1ZSxcclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBjb2xvcjogPGhleD4sXHJcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxyXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgc2l6ZTogPGZsb2F0PixcclxuICogIHNpemVBdHRlbnVhdGlvbjogPGJvb2w+XHJcbiAqXHJcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUG9pbnRzTWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnUG9pbnRzTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKDB4ZmZmZmZmKTtcclxuXHJcblx0dGhpcy5tYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLnNpemUgPSAxO1xyXG5cdHRoaXMuc2l6ZUF0dGVudWF0aW9uID0gdHJ1ZTtcclxuXHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hdGVyaWFsLnByb3RvdHlwZSk7XHJcblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50c01hdGVyaWFsO1xyXG5cclxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmlzUG9pbnRzTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuUG9pbnRzTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblxyXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcclxuXHJcblx0dGhpcy5zaXplID0gc291cmNlLnNpemU7XHJcblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xyXG5cclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbnZhciBfaW52ZXJzZU1hdHJpeCQyID0gbmV3IE1hdHJpeDQoKTtcclxudmFyIF9yYXkkMiA9IG5ldyBSYXkoKTtcclxudmFyIF9zcGhlcmUkMyA9IG5ldyBTcGhlcmUoKTtcclxudmFyIF9wb3NpdGlvbiQxID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIFBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BvaW50cyc7XHJcblxyXG5cdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsIDogbmV3IFBvaW50c01hdGVyaWFsKHsgY29sb3I6IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZiB9KTtcclxuXHJcblx0dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKTtcclxuXHJcbn1cclxuXHJcblBvaW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogUG9pbnRzLFxyXG5cclxuXHRpc1BvaW50czogdHJ1ZSxcclxuXHJcblx0cmF5Y2FzdDogZnVuY3Rpb24gKHJheWNhc3RlciwgaW50ZXJzZWN0cykge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XHJcblx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xyXG5cdFx0dmFyIHRocmVzaG9sZCA9IHJheWNhc3Rlci5wYXJhbXMuUG9pbnRzLnRocmVzaG9sZDtcclxuXHJcblx0XHQvLyBDaGVja2luZyBib3VuZGluZ1NwaGVyZSBkaXN0YW5jZSB0byByYXlcclxuXHJcblx0XHRpZiAoZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwpIHsgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7IH1cclxuXHJcblx0XHRfc3BoZXJlJDMuY29weShnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSk7XHJcblx0XHRfc3BoZXJlJDMuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkKTtcclxuXHRcdF9zcGhlcmUkMy5yYWRpdXMgKz0gdGhyZXNob2xkO1xyXG5cclxuXHRcdGlmIChyYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoX3NwaGVyZSQzKSA9PT0gZmFsc2UpIHsgcmV0dXJuOyB9XHJcblxyXG5cdFx0Ly9cclxuXHJcblx0XHRfaW52ZXJzZU1hdHJpeCQyLmdldEludmVyc2UobWF0cml4V29ybGQpO1xyXG5cdFx0X3JheSQyLmNvcHkocmF5Y2FzdGVyLnJheSkuYXBwbHlNYXRyaXg0KF9pbnZlcnNlTWF0cml4JDIpO1xyXG5cclxuXHRcdHZhciBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICgodGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56KSAvIDMpO1xyXG5cdFx0dmFyIGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcclxuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xyXG5cdFx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcclxuXHJcblx0XHRcdGlmIChpbmRleCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IGluZGV4LmFycmF5O1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbaV07XHJcblxyXG5cdFx0XHRcdFx0X3Bvc2l0aW9uJDEuZnJvbUFycmF5KHBvc2l0aW9ucywgYSAqIDMpO1xyXG5cclxuXHRcdFx0XHRcdHRlc3RQb2ludChfcG9zaXRpb24kMSwgYSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRfcG9zaXRpb24kMS5mcm9tQXJyYXkocG9zaXRpb25zLCBpICogMyk7XHJcblxyXG5cdFx0XHRcdFx0dGVzdFBvaW50KF9wb3NpdGlvbiQxLCBpLCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0aGlzKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR2YXIgdmVydGljZXMgPSBnZW9tZXRyeS52ZXJ0aWNlcztcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHRlc3RQb2ludCh2ZXJ0aWNlc1tpXSwgaSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHR1cGRhdGVNb3JwaFRhcmdldHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdFx0dmFyIG0sIG1sLCBuYW1lO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xyXG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1vcnBoQXR0cmlidXRlcyk7XHJcblxyXG5cdFx0XHRpZiAoa2V5cy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlc1trZXlzWzBdXTtcclxuXHJcblx0XHRcdFx0aWYgKG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xyXG5cdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKG0gPSAwLCBtbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgbSA8IG1sOyBtKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdG5hbWUgPSBtb3JwaEF0dHJpYnV0ZVttXS5uYW1lIHx8IFN0cmluZyhtKTtcclxuXHJcblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzLnB1c2goMCk7XHJcblx0XHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5W25hbWVdID0gbTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cztcclxuXHJcblx0XHRcdGlmIChtb3JwaFRhcmdldHMgIT09IHVuZGVmaW5lZCAmJiBtb3JwaFRhcmdldHMubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5Qb2ludHMudXBkYXRlTW9ycGhUYXJnZXRzKCkgZG9lcyBub3Qgc3VwcG9ydCBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIHRlc3RQb2ludChwb2ludCwgaW5kZXgsIGxvY2FsVGhyZXNob2xkU3EsIG1hdHJpeFdvcmxkLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIG9iamVjdCkge1xyXG5cclxuXHR2YXIgcmF5UG9pbnREaXN0YW5jZVNxID0gX3JheSQyLmRpc3RhbmNlU3FUb1BvaW50KHBvaW50KTtcclxuXHJcblx0aWYgKHJheVBvaW50RGlzdGFuY2VTcSA8IGxvY2FsVGhyZXNob2xkU3EpIHtcclxuXHJcblx0XHR2YXIgaW50ZXJzZWN0UG9pbnQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdF9yYXkkMi5jbG9zZXN0UG9pbnRUb1BvaW50KHBvaW50LCBpbnRlcnNlY3RQb2ludCk7XHJcblx0XHRpbnRlcnNlY3RQb2ludC5hcHBseU1hdHJpeDQobWF0cml4V29ybGQpO1xyXG5cclxuXHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oaW50ZXJzZWN0UG9pbnQpO1xyXG5cclxuXHRcdGlmIChkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhcikgeyByZXR1cm47IH1cclxuXHJcblx0XHRpbnRlcnNlY3RzLnB1c2goe1xyXG5cclxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxyXG5cdFx0XHRkaXN0YW5jZVRvUmF5OiBNYXRoLnNxcnQocmF5UG9pbnREaXN0YW5jZVNxKSxcclxuXHRcdFx0cG9pbnQ6IGludGVyc2VjdFBvaW50LFxyXG5cdFx0XHRpbmRleDogaW5kZXgsXHJcblx0XHRcdGZhY2U6IG51bGwsXHJcblx0XHRcdG9iamVjdDogb2JqZWN0XHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFZpZGVvVGV4dHVyZSh2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5KSB7XHJcblxyXG5cdFRleHR1cmUuY2FsbCh0aGlzLCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5KTtcclxuXHJcblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkZvcm1hdDtcclxuXHJcblx0dGhpcy5taW5GaWx0ZXIgPSBtaW5GaWx0ZXIgIT09IHVuZGVmaW5lZCA/IG1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcclxuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xyXG5cclxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxufVxyXG5cclxuVmlkZW9UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShUZXh0dXJlLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFZpZGVvVGV4dHVyZSxcclxuXHJcblx0aXNWaWRlb1RleHR1cmU6IHRydWUsXHJcblxyXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB2aWRlbyA9IHRoaXMuaW1hZ2U7XHJcblxyXG5cdFx0aWYgKHZpZGVvLnJlYWR5U3RhdGUgPj0gdmlkZW8uSEFWRV9DVVJSRU5UX0RBVEEpIHtcclxuXHJcblx0XHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZShtaXBtYXBzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGVuY29kaW5nKSB7XHJcblxyXG5cdFRleHR1cmUuY2FsbCh0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nKTtcclxuXHJcblx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xyXG5cdHRoaXMubWlwbWFwcyA9IG1pcG1hcHM7XHJcblxyXG5cdC8vIG5vIGZsaXBwaW5nIGZvciBjdWJlIHRleHR1cmVzXHJcblx0Ly8gKGFsc28gZmxpcHBpbmcgZG9lc24ndCB3b3JrIGZvciBjb21wcmVzc2VkIHRleHR1cmVzIClcclxuXHJcblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xyXG5cclxuXHQvLyBjYW4ndCBnZW5lcmF0ZSBtaXBtYXBzIGZvciBjb21wcmVzc2VkIHRleHR1cmVzXHJcblx0Ly8gbWlwcyBtdXN0IGJlIGVtYmVkZGVkIGluIEREUyBmaWxlc1xyXG5cclxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xyXG5cclxufVxyXG5cclxuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUZXh0dXJlLnByb3RvdHlwZSk7XHJcbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbXByZXNzZWRUZXh0dXJlO1xyXG5cclxuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmlzQ29tcHJlc3NlZFRleHR1cmUgPSB0cnVlO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQ2FudmFzVGV4dHVyZShjYW52YXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSkge1xyXG5cclxuXHRUZXh0dXJlLmNhbGwodGhpcywgY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkpO1xyXG5cclxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn1cclxuXHJcbkNhbnZhc1RleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUZXh0dXJlLnByb3RvdHlwZSk7XHJcbkNhbnZhc1RleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2FudmFzVGV4dHVyZTtcclxuQ2FudmFzVGV4dHVyZS5wcm90b3R5cGUuaXNDYW52YXNUZXh0dXJlID0gdHJ1ZTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIE1hdHQgRGVzTGF1cmllcnMgLyBAbWF0dGRlc2xcclxuICogQGF1dGhvciBhdGl4IC8gYXJ0aHVyc2lsYmVyLmRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRGVwdGhUZXh0dXJlKHdpZHRoLCBoZWlnaHQsIHR5cGUsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGFuaXNvdHJvcHksIGZvcm1hdCkge1xyXG5cclxuXHRmb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IERlcHRoRm9ybWF0O1xyXG5cclxuXHRpZiAoZm9ybWF0ICE9PSBEZXB0aEZvcm1hdCAmJiBmb3JtYXQgIT09IERlcHRoU3RlbmNpbEZvcm1hdCkge1xyXG5cclxuXHRcdHRocm93IG5ldyBFcnJvcignRGVwdGhUZXh0dXJlIGZvcm1hdCBtdXN0IGJlIGVpdGhlciBUSFJFRS5EZXB0aEZvcm1hdCBvciBUSFJFRS5EZXB0aFN0ZW5jaWxGb3JtYXQnKTtcclxuXHJcblx0fVxyXG5cclxuXHRpZiAodHlwZSA9PT0gdW5kZWZpbmVkICYmIGZvcm1hdCA9PT0gRGVwdGhGb3JtYXQpIHsgdHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlOyB9XHJcblx0aWYgKHR5cGUgPT09IHVuZGVmaW5lZCAmJiBmb3JtYXQgPT09IERlcHRoU3RlbmNpbEZvcm1hdCkgeyB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlOyB9XHJcblxyXG5cdFRleHR1cmUuY2FsbCh0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkpO1xyXG5cclxuXHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XHJcblxyXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xyXG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xyXG5cclxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XHJcblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcclxuXHJcbn1cclxuXHJcbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRleHR1cmUucHJvdG90eXBlKTtcclxuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoVGV4dHVyZTtcclxuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5pc0RlcHRoVGV4dHVyZSA9IHRydWU7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICovXHJcblxyXG5mdW5jdGlvbiBXaXJlZnJhbWVHZW9tZXRyeShnZW9tZXRyeSkge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnV2lyZWZyYW1lR2VvbWV0cnknO1xyXG5cclxuXHQvLyBidWZmZXJcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gW107XHJcblxyXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0dmFyIGksIGosIGwsIG8sIG9sO1xyXG5cdHZhciBlZGdlID0gWzAsIDBdLCBlZGdlcyA9IHt9LCBlLCBlZGdlMSwgZWRnZTI7XHJcblx0dmFyIGtleSwga2V5cyA9IFsnYScsICdiJywgJ2MnXTtcclxuXHR2YXIgdmVydGV4O1xyXG5cclxuXHQvLyBkaWZmZXJlbnQgbG9naWMgZm9yIEdlb21ldHJ5IGFuZCBCdWZmZXJHZW9tZXRyeVxyXG5cclxuXHRpZiAoZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSkge1xyXG5cclxuXHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVkZ2VzIHdpdGhvdXQgZHVwbGljYXRlc1xyXG5cclxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gZmFjZXNbaV07XHJcblxyXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgMzsgaisrKSB7XHJcblxyXG5cdFx0XHRcdGVkZ2UxID0gZmFjZVtrZXlzW2pdXTtcclxuXHRcdFx0XHRlZGdlMiA9IGZhY2Vba2V5c1soaiArIDEpICUgM11dO1xyXG5cdFx0XHRcdGVkZ2VbMF0gPSBNYXRoLm1pbihlZGdlMSwgZWRnZTIpOyAvLyBzb3J0aW5nIHByZXZlbnRzIGR1cGxpY2F0ZXNcclxuXHRcdFx0XHRlZGdlWzFdID0gTWF0aC5tYXgoZWRnZTEsIGVkZ2UyKTtcclxuXHJcblx0XHRcdFx0a2V5ID0gZWRnZVswXSArICcsJyArIGVkZ2VbMV07XHJcblxyXG5cdFx0XHRcdGlmIChlZGdlc1trZXldID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRlZGdlc1trZXldID0geyBpbmRleDE6IGVkZ2VbMF0sIGluZGV4MjogZWRnZVsxXSB9O1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzXHJcblxyXG5cdFx0Zm9yIChrZXkgaW4gZWRnZXMpIHtcclxuXHJcblx0XHRcdGUgPSBlZGdlc1trZXldO1xyXG5cclxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbZS5pbmRleDFdO1xyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbZS5pbmRleDJdO1xyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmIChnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIHBvc2l0aW9uLCBpbmRpY2VzLCBncm91cHM7XHJcblx0XHR2YXIgZ3JvdXAsIHN0YXJ0LCBjb3VudDtcclxuXHRcdHZhciBpbmRleDEsIGluZGV4MjtcclxuXHJcblx0XHR2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdGlmIChnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0Ly8gaW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxyXG5cclxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdFx0XHRpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXg7XHJcblx0XHRcdGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcclxuXHJcblx0XHRcdGlmIChncm91cHMubGVuZ3RoID09PSAwKSB7XHJcblxyXG5cdFx0XHRcdGdyb3VwcyA9IFt7IHN0YXJ0OiAwLCBjb3VudDogaW5kaWNlcy5jb3VudCwgbWF0ZXJpYWxJbmRleDogMCB9XTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzXHJcblxyXG5cdFx0XHRmb3IgKG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKytvKSB7XHJcblxyXG5cdFx0XHRcdGdyb3VwID0gZ3JvdXBzW29dO1xyXG5cclxuXHRcdFx0XHRzdGFydCA9IGdyb3VwLnN0YXJ0O1xyXG5cdFx0XHRcdGNvdW50ID0gZ3JvdXAuY291bnQ7XHJcblxyXG5cdFx0XHRcdGZvciAoaSA9IHN0YXJ0LCBsID0gKHN0YXJ0ICsgY291bnQpOyBpIDwgbDsgaSArPSAzKSB7XHJcblxyXG5cdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IDM7IGorKykge1xyXG5cclxuXHRcdFx0XHRcdFx0ZWRnZTEgPSBpbmRpY2VzLmdldFgoaSArIGopO1xyXG5cdFx0XHRcdFx0XHRlZGdlMiA9IGluZGljZXMuZ2V0WChpICsgKGogKyAxKSAlIDMpO1xyXG5cdFx0XHRcdFx0XHRlZGdlWzBdID0gTWF0aC5taW4oZWRnZTEsIGVkZ2UyKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzXHJcblx0XHRcdFx0XHRcdGVkZ2VbMV0gPSBNYXRoLm1heChlZGdlMSwgZWRnZTIpO1xyXG5cclxuXHRcdFx0XHRcdFx0a2V5ID0gZWRnZVswXSArICcsJyArIGVkZ2VbMV07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoZWRnZXNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGVkZ2VzW2tleV0gPSB7IGluZGV4MTogZWRnZVswXSwgaW5kZXgyOiBlZGdlWzFdIH07XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xyXG5cclxuXHRcdFx0Zm9yIChrZXkgaW4gZWRnZXMpIHtcclxuXHJcblx0XHRcdFx0ZSA9IGVkZ2VzW2tleV07XHJcblxyXG5cdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBlLmluZGV4MSk7XHJcblx0XHRcdFx0dmVydGljZXMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGUuaW5kZXgyKTtcclxuXHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBub24taW5kZXhlZCBCdWZmZXJHZW9tZXRyeVxyXG5cclxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHRcdFx0Zm9yIChpID0gMCwgbCA9IChwb3NpdGlvbi5jb3VudCAvIDMpOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCAzOyBqKyspIHtcclxuXHJcblx0XHRcdFx0XHQvLyB0aHJlZSBlZGdlcyBwZXIgdHJpYW5nbGUsIGFuIGVkZ2UgaXMgcmVwcmVzZW50ZWQgYXMgKGluZGV4MSwgaW5kZXgyKVxyXG5cdFx0XHRcdFx0Ly8gZS5nLiB0aGUgZmlyc3QgdHJpYW5nbGUgaGFzIHRoZSBmb2xsb3dpbmcgZWRnZXM6ICgwLDEpLCgxLDIpLCgyLDApXHJcblxyXG5cdFx0XHRcdFx0aW5kZXgxID0gMyAqIGkgKyBqO1xyXG5cdFx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb24sIGluZGV4MSk7XHJcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdFx0XHRcdGluZGV4MiA9IDMgKiBpICsgKChqICsgMSkgJSAzKTtcclxuXHRcdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCBpbmRleDIpO1xyXG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xyXG5cclxufVxyXG5cclxuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5XaXJlZnJhbWVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBXaXJlZnJhbWVHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKlxyXG4gKiBQYXJhbWV0cmljIFN1cmZhY2VzIEdlb21ldHJ5XHJcbiAqIGJhc2VkIG9uIHRoZSBicmlsbGlhbnQgYXJ0aWNsZSBieSBAcHJpZGVvdXQgaHR0cDovL3ByaWRlb3V0Lm5ldC9ibG9nLz9wPTQ0XHJcbiAqL1xyXG5cclxuLy8gUGFyYW1ldHJpY0dlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBQYXJhbWV0cmljR2VvbWV0cnkoZnVuYywgc2xpY2VzLCBzdGFja3MpIHtcclxuXHJcblx0R2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BhcmFtZXRyaWNHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdGZ1bmM6IGZ1bmMsXHJcblx0XHRzbGljZXM6IHNsaWNlcyxcclxuXHRcdHN0YWNrczogc3RhY2tzXHJcblx0fTtcclxuXHJcblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeShmdW5jLCBzbGljZXMsIHN0YWNrcykpO1xyXG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xyXG5cclxufVxyXG5cclxuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlKTtcclxuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNHZW9tZXRyeTtcclxuXHJcbi8vIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5KGZ1bmMsIHNsaWNlcywgc3RhY2tzKSB7XHJcblxyXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRmdW5jOiBmdW5jLFxyXG5cdFx0c2xpY2VzOiBzbGljZXMsXHJcblx0XHRzdGFja3M6IHN0YWNrc1xyXG5cdH07XHJcblxyXG5cdC8vIGJ1ZmZlcnNcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHR2YXIgdmVydGljZXMgPSBbXTtcclxuXHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0dmFyIEVQUyA9IDAuMDAwMDE7XHJcblxyXG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgcDAgPSBuZXcgVmVjdG9yMygpLCBwMSA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIHB1ID0gbmV3IFZlY3RvcjMoKSwgcHYgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgaSwgajtcclxuXHJcblx0aWYgKGZ1bmMubGVuZ3RoIDwgMykge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeTogRnVuY3Rpb24gbXVzdCBub3cgbW9kaWZ5IGEgVmVjdG9yMyBhcyB0aGlyZCBwYXJhbWV0ZXIuJyk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHR2YXIgc2xpY2VDb3VudCA9IHNsaWNlcyArIDE7XHJcblxyXG5cdGZvciAoaSA9IDA7IGkgPD0gc3RhY2tzOyBpKyspIHtcclxuXHJcblx0XHR2YXIgdiA9IGkgLyBzdGFja3M7XHJcblxyXG5cdFx0Zm9yIChqID0gMDsgaiA8PSBzbGljZXM7IGorKykge1xyXG5cclxuXHRcdFx0dmFyIHUgPSBqIC8gc2xpY2VzO1xyXG5cclxuXHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHRmdW5jKHUsIHYsIHAwKTtcclxuXHRcdFx0dmVydGljZXMucHVzaChwMC54LCBwMC55LCBwMC56KTtcclxuXHJcblx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0Ly8gYXBwcm94aW1hdGUgdGFuZ2VudCB2ZWN0b3JzIHZpYSBmaW5pdGUgZGlmZmVyZW5jZXNcclxuXHJcblx0XHRcdGlmICh1IC0gRVBTID49IDApIHtcclxuXHJcblx0XHRcdFx0ZnVuYyh1IC0gRVBTLCB2LCBwMSk7XHJcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyhwMCwgcDEpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0ZnVuYyh1ICsgRVBTLCB2LCBwMSk7XHJcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyhwMSwgcDApO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHYgLSBFUFMgPj0gMCkge1xyXG5cclxuXHRcdFx0XHRmdW5jKHUsIHYgLSBFUFMsIHAxKTtcclxuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKHAwLCBwMSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRmdW5jKHUsIHYgKyBFUFMsIHAxKTtcclxuXHRcdFx0XHRwdi5zdWJWZWN0b3JzKHAxLCBwMCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBjcm9zcyBwcm9kdWN0IG9mIHRhbmdlbnQgdmVjdG9ycyByZXR1cm5zIHN1cmZhY2Ugbm9ybWFsXHJcblxyXG5cdFx0XHRub3JtYWwuY3Jvc3NWZWN0b3JzKHB1LCBwdikubm9ybWFsaXplKCk7XHJcblx0XHRcdG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcblx0XHRcdC8vIHV2XHJcblxyXG5cdFx0XHR1dnMucHVzaCh1LCB2KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDwgc3RhY2tzOyBpKyspIHtcclxuXHJcblx0XHRmb3IgKGogPSAwOyBqIDwgc2xpY2VzOyBqKyspIHtcclxuXHJcblx0XHRcdHZhciBhID0gaSAqIHNsaWNlQ291bnQgKyBqO1xyXG5cdFx0XHR2YXIgYiA9IGkgKiBzbGljZUNvdW50ICsgaiArIDE7XHJcblx0XHRcdHZhciBjID0gKGkgKyAxKSAqIHNsaWNlQ291bnQgKyBqICsgMTtcclxuXHRcdFx0dmFyIGQgPSAoaSArIDEpICogc2xpY2VDb3VudCArIGo7XHJcblxyXG5cdFx0XHQvLyBmYWNlcyBvbmUgYW5kIHR3b1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG5cdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxufVxyXG5cclxuUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGNsb2Nrd29ya2dlZWsgLyBodHRwczovL2dpdGh1Yi5jb20vY2xvY2t3b3JrZ2Vla1xyXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbi8vIFBvbHloZWRyb25HZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gUG9seWhlZHJvbkdlb21ldHJ5KHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxyXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0ZGV0YWlsOiBkZXRhaWxcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCkpO1xyXG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xyXG5cclxufVxyXG5cclxuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlKTtcclxuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25HZW9tZXRyeTtcclxuXHJcbi8vIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxyXG5cdFx0aW5kaWNlczogaW5kaWNlcyxcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0ZGV0YWlsOiBkZXRhaWxcclxuXHR9O1xyXG5cclxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcclxuXHRkZXRhaWwgPSBkZXRhaWwgfHwgMDtcclxuXHJcblx0Ly8gZGVmYXVsdCBidWZmZXIgZGF0YVxyXG5cclxuXHR2YXIgdmVydGV4QnVmZmVyID0gW107XHJcblx0dmFyIHV2QnVmZmVyID0gW107XHJcblxyXG5cdC8vIHRoZSBzdWJkaXZpc2lvbiBjcmVhdGVzIHRoZSB2ZXJ0ZXggYnVmZmVyIGRhdGFcclxuXHJcblx0c3ViZGl2aWRlKGRldGFpbCk7XHJcblxyXG5cdC8vIGFsbCB2ZXJ0aWNlcyBzaG91bGQgbGllIG9uIGEgY29uY2VwdHVhbCBzcGhlcmUgd2l0aCBhIGdpdmVuIHJhZGl1c1xyXG5cclxuXHRhcHBseVJhZGl1cyhyYWRpdXMpO1xyXG5cclxuXHQvLyBmaW5hbGx5LCBjcmVhdGUgdGhlIHV2IGRhdGFcclxuXHJcblx0Z2VuZXJhdGVVVnMoKTtcclxuXHJcblx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcclxuXHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGV4QnVmZmVyLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodXZCdWZmZXIsIDIpKTtcclxuXHJcblx0aWYgKGRldGFpbCA9PT0gMCkge1xyXG5cclxuXHRcdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTsgLy8gZmxhdCBub3JtYWxzXHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7IC8vIHNtb290aCBub3JtYWxzXHJcblxyXG5cdH1cclxuXHJcblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xyXG5cclxuXHRmdW5jdGlvbiBzdWJkaXZpZGUoZGV0YWlsKSB7XHJcblxyXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIGIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIGMgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdC8vIGl0ZXJhdGUgb3ZlciBhbGwgZmFjZXMgYW5kIGFwcGx5IGEgc3ViZGl2aXNvbiB3aXRoIHRoZSBnaXZlbiBkZXRhaWwgdmFsdWVcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMpIHtcclxuXHJcblx0XHRcdC8vIGdldCB0aGUgdmVydGljZXMgb2YgdGhlIGZhY2VcclxuXHJcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoaW5kaWNlc1tpICsgMF0sIGEpO1xyXG5cdFx0XHRnZXRWZXJ0ZXhCeUluZGV4KGluZGljZXNbaSArIDFdLCBiKTtcclxuXHRcdFx0Z2V0VmVydGV4QnlJbmRleChpbmRpY2VzW2kgKyAyXSwgYyk7XHJcblxyXG5cdFx0XHQvLyBwZXJmb3JtIHN1YmRpdmlzaW9uXHJcblxyXG5cdFx0XHRzdWJkaXZpZGVGYWNlKGEsIGIsIGMsIGRldGFpbCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHN1YmRpdmlkZUZhY2UoYSwgYiwgYywgZGV0YWlsKSB7XHJcblxyXG5cdFx0dmFyIGNvbHMgPSBNYXRoLnBvdygyLCBkZXRhaWwpO1xyXG5cclxuXHRcdC8vIHdlIHVzZSB0aGlzIG11bHRpZGltZW5zaW9uYWwgYXJyYXkgYXMgYSBkYXRhIHN0cnVjdHVyZSBmb3IgY3JlYXRpbmcgdGhlIHN1YmRpdmlzaW9uXHJcblxyXG5cdFx0dmFyIHYgPSBbXTtcclxuXHJcblx0XHR2YXIgaSwgajtcclxuXHJcblx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSB2ZXJ0aWNlcyBmb3IgdGhpcyBzdWJkaXZpc2lvblxyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPD0gY29sczsgaSsrKSB7XHJcblxyXG5cdFx0XHR2W2ldID0gW107XHJcblxyXG5cdFx0XHR2YXIgYWogPSBhLmNsb25lKCkubGVycChjLCBpIC8gY29scyk7XHJcblx0XHRcdHZhciBiaiA9IGIuY2xvbmUoKS5sZXJwKGMsIGkgLyBjb2xzKTtcclxuXHJcblx0XHRcdHZhciByb3dzID0gY29scyAtIGk7XHJcblxyXG5cdFx0XHRmb3IgKGogPSAwOyBqIDw9IHJvd3M7IGorKykge1xyXG5cclxuXHRcdFx0XHRpZiAoaiA9PT0gMCAmJiBpID09PSBjb2xzKSB7XHJcblxyXG5cdFx0XHRcdFx0dltpXVtqXSA9IGFqO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHZbaV1bal0gPSBhai5jbG9uZSgpLmxlcnAoYmosIGogLyByb3dzKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBjb25zdHJ1Y3QgYWxsIG9mIHRoZSBmYWNlc1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCBjb2xzOyBpKyspIHtcclxuXHJcblx0XHRcdGZvciAoaiA9IDA7IGogPCAyICogKGNvbHMgLSBpKSAtIDE7IGorKykge1xyXG5cclxuXHRcdFx0XHR2YXIgayA9IE1hdGguZmxvb3IoaiAvIDIpO1xyXG5cclxuXHRcdFx0XHRpZiAoaiAlIDIgPT09IDApIHtcclxuXHJcblx0XHRcdFx0XHRwdXNoVmVydGV4KHZbaV1bayArIDFdKTtcclxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgodltpICsgMV1ba10pO1xyXG5cdFx0XHRcdFx0cHVzaFZlcnRleCh2W2ldW2tdKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRwdXNoVmVydGV4KHZbaV1bayArIDFdKTtcclxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgodltpICsgMV1bayArIDFdKTtcclxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgodltpICsgMV1ba10pO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFwcGx5UmFkaXVzKHJhZGl1cykge1xyXG5cclxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdC8vIGl0ZXJhdGUgb3ZlciB0aGUgZW50aXJlIGJ1ZmZlciBhbmQgYXBwbHkgdGhlIHJhZGl1cyB0byBlYWNoIHZlcnRleFxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzKSB7XHJcblxyXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlcltpICsgMF07XHJcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyW2kgKyAxXTtcclxuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbaSArIDJdO1xyXG5cclxuXHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHJhZGl1cyk7XHJcblxyXG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbaSArIDBdID0gdmVydGV4Lng7XHJcblx0XHRcdHZlcnRleEJ1ZmZlcltpICsgMV0gPSB2ZXJ0ZXgueTtcclxuXHRcdFx0dmVydGV4QnVmZmVyW2kgKyAyXSA9IHZlcnRleC56O1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcclxuXHJcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gMykge1xyXG5cclxuXHRcdFx0dmVydGV4LnggPSB2ZXJ0ZXhCdWZmZXJbaSArIDBdO1xyXG5cdFx0XHR2ZXJ0ZXgueSA9IHZlcnRleEJ1ZmZlcltpICsgMV07XHJcblx0XHRcdHZlcnRleC56ID0gdmVydGV4QnVmZmVyW2kgKyAyXTtcclxuXHJcblx0XHRcdHZhciB1ID0gYXppbXV0aCh2ZXJ0ZXgpIC8gMiAvIE1hdGguUEkgKyAwLjU7XHJcblx0XHRcdHZhciB2ID0gaW5jbGluYXRpb24odmVydGV4KSAvIE1hdGguUEkgKyAwLjU7XHJcblx0XHRcdHV2QnVmZmVyLnB1c2godSwgMSAtIHYpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb3JyZWN0VVZzKCk7XHJcblxyXG5cdFx0Y29ycmVjdFNlYW0oKTtcclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjb3JyZWN0U2VhbSgpIHtcclxuXHJcblx0XHQvLyBoYW5kbGUgY2FzZSB3aGVuIGZhY2Ugc3RyYWRkbGVzIHRoZSBzZWFtLCBzZWUgIzMyNjlcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHV2QnVmZmVyLmxlbmd0aDsgaSArPSA2KSB7XHJcblxyXG5cdFx0XHQvLyB1diBkYXRhIG9mIGEgc2luZ2xlIGZhY2VcclxuXHJcblx0XHRcdHZhciB4MCA9IHV2QnVmZmVyW2kgKyAwXTtcclxuXHRcdFx0dmFyIHgxID0gdXZCdWZmZXJbaSArIDJdO1xyXG5cdFx0XHR2YXIgeDIgPSB1dkJ1ZmZlcltpICsgNF07XHJcblxyXG5cdFx0XHR2YXIgbWF4ID0gTWF0aC5tYXgoeDAsIHgxLCB4Mik7XHJcblx0XHRcdHZhciBtaW4gPSBNYXRoLm1pbih4MCwgeDEsIHgyKTtcclxuXHJcblx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcclxuXHJcblx0XHRcdGlmIChtYXggPiAwLjkgJiYgbWluIDwgMC4xKSB7XHJcblxyXG5cdFx0XHRcdGlmICh4MCA8IDAuMikgeyB1dkJ1ZmZlcltpICsgMF0gKz0gMTsgfVxyXG5cdFx0XHRcdGlmICh4MSA8IDAuMikgeyB1dkJ1ZmZlcltpICsgMl0gKz0gMTsgfVxyXG5cdFx0XHRcdGlmICh4MiA8IDAuMikgeyB1dkJ1ZmZlcltpICsgNF0gKz0gMTsgfVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwdXNoVmVydGV4KHZlcnRleCkge1xyXG5cclxuXHRcdHZlcnRleEJ1ZmZlci5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdldFZlcnRleEJ5SW5kZXgoaW5kZXgsIHZlcnRleCkge1xyXG5cclxuXHRcdHZhciBzdHJpZGUgPSBpbmRleCAqIDM7XHJcblxyXG5cdFx0dmVydGV4LnggPSB2ZXJ0aWNlc1tzdHJpZGUgKyAwXTtcclxuXHRcdHZlcnRleC55ID0gdmVydGljZXNbc3RyaWRlICsgMV07XHJcblx0XHR2ZXJ0ZXgueiA9IHZlcnRpY2VzW3N0cmlkZSArIDJdO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGNvcnJlY3RVVnMoKSB7XHJcblxyXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIGIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIGMgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdHZhciBjZW50cm9pZCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0dmFyIHV2QSA9IG5ldyBWZWN0b3IyKCk7XHJcblx0XHR2YXIgdXZCID0gbmV3IFZlY3RvcjIoKTtcclxuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2KSB7XHJcblxyXG5cdFx0XHRhLnNldCh2ZXJ0ZXhCdWZmZXJbaSArIDBdLCB2ZXJ0ZXhCdWZmZXJbaSArIDFdLCB2ZXJ0ZXhCdWZmZXJbaSArIDJdKTtcclxuXHRcdFx0Yi5zZXQodmVydGV4QnVmZmVyW2kgKyAzXSwgdmVydGV4QnVmZmVyW2kgKyA0XSwgdmVydGV4QnVmZmVyW2kgKyA1XSk7XHJcblx0XHRcdGMuc2V0KHZlcnRleEJ1ZmZlcltpICsgNl0sIHZlcnRleEJ1ZmZlcltpICsgN10sIHZlcnRleEJ1ZmZlcltpICsgOF0pO1xyXG5cclxuXHRcdFx0dXZBLnNldCh1dkJ1ZmZlcltqICsgMF0sIHV2QnVmZmVyW2ogKyAxXSk7XHJcblx0XHRcdHV2Qi5zZXQodXZCdWZmZXJbaiArIDJdLCB1dkJ1ZmZlcltqICsgM10pO1xyXG5cdFx0XHR1dkMuc2V0KHV2QnVmZmVyW2ogKyA0XSwgdXZCdWZmZXJbaiArIDVdKTtcclxuXHJcblx0XHRcdGNlbnRyb2lkLmNvcHkoYSkuYWRkKGIpLmFkZChjKS5kaXZpZGVTY2FsYXIoMyk7XHJcblxyXG5cdFx0XHR2YXIgYXppID0gYXppbXV0aChjZW50cm9pZCk7XHJcblxyXG5cdFx0XHRjb3JyZWN0VVYodXZBLCBqICsgMCwgYSwgYXppKTtcclxuXHRcdFx0Y29ycmVjdFVWKHV2QiwgaiArIDIsIGIsIGF6aSk7XHJcblx0XHRcdGNvcnJlY3RVVih1dkMsIGogKyA0LCBjLCBhemkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjb3JyZWN0VVYodXYsIHN0cmlkZSwgdmVjdG9yLCBhemltdXRoKSB7XHJcblxyXG5cdFx0aWYgKChhemltdXRoIDwgMCkgJiYgKHV2LnggPT09IDEpKSB7XHJcblxyXG5cdFx0XHR1dkJ1ZmZlcltzdHJpZGVdID0gdXYueCAtIDE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgodmVjdG9yLnggPT09IDApICYmICh2ZWN0b3IueiA9PT0gMCkpIHtcclxuXHJcblx0XHRcdHV2QnVmZmVyW3N0cmlkZV0gPSBhemltdXRoIC8gMiAvIE1hdGguUEkgKyAwLjU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIEFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzLCBjb3VudGVyLWNsb2Nrd2lzZSB3aGVuIGxvb2tpbmcgZnJvbSBhYm92ZS5cclxuXHJcblx0ZnVuY3Rpb24gYXppbXV0aCh2ZWN0b3IpIHtcclxuXHJcblx0XHRyZXR1cm4gTWF0aC5hdGFuMih2ZWN0b3IueiwgLSB2ZWN0b3IueCk7XHJcblxyXG5cdH1cclxuXHJcblxyXG5cdC8vIEFuZ2xlIGFib3ZlIHRoZSBYWiBwbGFuZS5cclxuXHJcblx0ZnVuY3Rpb24gaW5jbGluYXRpb24odmVjdG9yKSB7XHJcblxyXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoLSB2ZWN0b3IueSwgTWF0aC5zcXJ0KCh2ZWN0b3IueCAqIHZlY3Rvci54KSArICh2ZWN0b3IueiAqIHZlY3Rvci56KSkpO1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5Qb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5Qb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgdGltb3RoeXByYXRsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vdGltb3RoeXByYXRsZXlcclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICovXHJcblxyXG4vLyBUZXRyYWhlZHJvbkdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBUZXRyYWhlZHJvbkdlb21ldHJ5KHJhZGl1cywgZGV0YWlsKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRkZXRhaWw6IGRldGFpbFxyXG5cdH07XHJcblxyXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgZGV0YWlsKSk7XHJcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG59XHJcblxyXG5UZXRyYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlKTtcclxuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXRyYWhlZHJvbkdlb21ldHJ5O1xyXG5cclxuLy8gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeShyYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHR2YXIgdmVydGljZXMgPSBbXHJcblx0XHQxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLCAtIDEsIDEsIC0gMSwgLSAxXHJcblx0XTtcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXHJcblx0XHQyLCAxLCAwLCAwLCAzLCAyLCAxLCAzLCAwLCAyLCAzLCAxXHJcblx0XTtcclxuXHJcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1RldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdGRldGFpbDogZGV0YWlsXHJcblx0fTtcclxuXHJcbn1cclxuXHJcblRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgdGltb3RoeXByYXRsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vdGltb3RoeXByYXRsZXlcclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICovXHJcblxyXG4vLyBPY3RhaGVkcm9uR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIE9jdGFoZWRyb25HZW9tZXRyeShyYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRkZXRhaWw6IGRldGFpbFxyXG5cdH07XHJcblxyXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkocmFkaXVzLCBkZXRhaWwpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcbk9jdGFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbk9jdGFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPY3RhaGVkcm9uR2VvbWV0cnk7XHJcblxyXG4vLyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeShyYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHR2YXIgdmVydGljZXMgPSBbXHJcblx0XHQxLCAwLCAwLCAtIDEsIDAsIDAsIDAsIDEsIDAsXHJcblx0XHQwLCAtIDEsIDAsIDAsIDAsIDEsIDAsIDAsIC0gMVxyXG5cdF07XHJcblxyXG5cdHZhciBpbmRpY2VzID0gW1xyXG5cdFx0MCwgMiwgNCwgMCwgNCwgMywgMCwgMywgNSxcclxuXHRcdDAsIDUsIDIsIDEsIDIsIDUsIDEsIDUsIDMsXHJcblx0XHQxLCAzLCA0LCAxLCA0LCAyXHJcblx0XTtcclxuXHJcblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcywgdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ09jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0ZGV0YWlsOiBkZXRhaWxcclxuXHR9O1xyXG5cclxufVxyXG5cclxuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbk9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciB0aW1vdGh5cHJhdGxleSAvIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1vdGh5cHJhdGxleVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbi8vIEljb3NhaGVkcm9uR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIEljb3NhaGVkcm9uR2VvbWV0cnkocmFkaXVzLCBkZXRhaWwpIHtcclxuXHJcblx0R2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0ljb3NhaGVkcm9uR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdGRldGFpbDogZGV0YWlsXHJcblx0fTtcclxuXHJcblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkocmFkaXVzLCBkZXRhaWwpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5JY29zYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uR2VvbWV0cnk7XHJcblxyXG4vLyBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgZGV0YWlsKSB7XHJcblxyXG5cdHZhciB0ID0gKDEgKyBNYXRoLnNxcnQoNSkpIC8gMjtcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gW1xyXG5cdFx0LSAxLCB0LCAwLCAxLCB0LCAwLCAtIDEsIC0gdCwgMCwgMSwgLSB0LCAwLFxyXG5cdFx0MCwgLSAxLCB0LCAwLCAxLCB0LCAwLCAtIDEsIC0gdCwgMCwgMSwgLSB0LFxyXG5cdFx0dCwgMCwgLSAxLCB0LCAwLCAxLCAtIHQsIDAsIC0gMSwgLSB0LCAwLCAxXHJcblx0XTtcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXHJcblx0XHQwLCAxMSwgNSwgMCwgNSwgMSwgMCwgMSwgNywgMCwgNywgMTAsIDAsIDEwLCAxMSxcclxuXHRcdDEsIDUsIDksIDUsIDExLCA0LCAxMSwgMTAsIDIsIDEwLCA3LCA2LCA3LCAxLCA4LFxyXG5cdFx0MywgOSwgNCwgMywgNCwgMiwgMywgMiwgNiwgMywgNiwgOCwgMywgOCwgOSxcclxuXHRcdDQsIDksIDUsIDIsIDQsIDExLCA2LCAyLCAxMCwgOCwgNiwgNywgOSwgOCwgMVxyXG5cdF07XHJcblxyXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRkZXRhaWw6IGRldGFpbFxyXG5cdH07XHJcblxyXG59XHJcblxyXG5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIEFiZSBQYXpvcyAvIGh0dHBzOi8vaGFtb2lkLmNvbVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbi8vIERvZGVjYWhlZHJvbkdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBEb2RlY2FoZWRyb25HZW9tZXRyeShyYWRpdXMsIGRldGFpbCkge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdGRldGFpbDogZGV0YWlsXHJcblx0fTtcclxuXHJcblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgZGV0YWlsKSk7XHJcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG59XHJcblxyXG5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbkRvZGVjYWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERvZGVjYWhlZHJvbkdlb21ldHJ5O1xyXG5cclxuLy8gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgZGV0YWlsKSB7XHJcblxyXG5cdHZhciB0ID0gKDEgKyBNYXRoLnNxcnQoNSkpIC8gMjtcclxuXHR2YXIgciA9IDEgLyB0O1xyXG5cclxuXHR2YXIgdmVydGljZXMgPSBbXHJcblxyXG5cdFx0Ly8gKMKxMSwgwrExLCDCsTEpXHJcblx0XHQtIDEsIC0gMSwgLSAxLCAtIDEsIC0gMSwgMSxcclxuXHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXHJcblx0XHQxLCAtIDEsIC0gMSwgMSwgLSAxLCAxLFxyXG5cdFx0MSwgMSwgLSAxLCAxLCAxLCAxLFxyXG5cclxuXHRcdC8vICgwLCDCsTEvz4YsIMKxz4YpXHJcblx0XHQwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxyXG5cdFx0MCwgciwgLSB0LCAwLCByLCB0LFxyXG5cclxuXHRcdC8vICjCsTEvz4YsIMKxz4YsIDApXHJcblx0XHQtIHIsIC0gdCwgMCwgLSByLCB0LCAwLFxyXG5cdFx0ciwgLSB0LCAwLCByLCB0LCAwLFxyXG5cclxuXHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXHJcblx0XHQtIHQsIDAsIC0gciwgdCwgMCwgLSByLFxyXG5cdFx0LSB0LCAwLCByLCB0LCAwLCByXHJcblx0XTtcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXHJcblx0XHQzLCAxMSwgNywgMywgNywgMTUsIDMsIDE1LCAxMyxcclxuXHRcdDcsIDE5LCAxNywgNywgMTcsIDYsIDcsIDYsIDE1LFxyXG5cdFx0MTcsIDQsIDgsIDE3LCA4LCAxMCwgMTcsIDEwLCA2LFxyXG5cdFx0OCwgMCwgMTYsIDgsIDE2LCAyLCA4LCAyLCAxMCxcclxuXHRcdDAsIDEyLCAxLCAwLCAxLCAxOCwgMCwgMTgsIDE2LFxyXG5cdFx0NiwgMTAsIDIsIDYsIDIsIDEzLCA2LCAxMywgMTUsXHJcblx0XHQyLCAxNiwgMTgsIDIsIDE4LCAzLCAyLCAzLCAxMyxcclxuXHRcdDE4LCAxLCA5LCAxOCwgOSwgMTEsIDE4LCAxMSwgMyxcclxuXHRcdDQsIDE0LCAxMiwgNCwgMTIsIDAsIDQsIDAsIDgsXHJcblx0XHQxMSwgOSwgNSwgMTEsIDUsIDE5LCAxMSwgMTksIDcsXHJcblx0XHQxOSwgNSwgMTQsIDE5LCAxNCwgNCwgMTksIDQsIDE3LFxyXG5cdFx0MSwgMTIsIDE0LCAxLCAxNCwgNSwgMSwgNSwgOVxyXG5cdF07XHJcblxyXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0ZGV0YWlsOiBkZXRhaWxcclxuXHR9O1xyXG5cclxufVxyXG5cclxuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGUgLyBodHRwczovL2dpdGh1Yi5jb20vb29zbW94aWVjb2RlXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwczovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcclxuICogQGF1dGhvciBtaW5pbmdvbGQgLyBodHRwczovL2dpdGh1Yi5jb20vbWluaW5nb2xkXHJcbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9qb25vYnIxXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqXHJcbiAqL1xyXG5cclxuLy8gVHViZUdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBUdWJlR2VvbWV0cnkocGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQsIHRhcGVyKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdUdWJlR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRwYXRoOiBwYXRoLFxyXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuXHRcdGNsb3NlZDogY2xvc2VkXHJcblx0fTtcclxuXHJcblx0aWYgKHRhcGVyICE9PSB1bmRlZmluZWQpIHsgY29uc29sZS53YXJuKCdUSFJFRS5UdWJlR2VvbWV0cnk6IHRhcGVyIGhhcyBiZWVuIHJlbW92ZWQuJyk7IH1cclxuXHJcblx0dmFyIGJ1ZmZlckdlb21ldHJ5ID0gbmV3IFR1YmVCdWZmZXJHZW9tZXRyeShwYXRoLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGl1cywgcmFkaWFsU2VnbWVudHMsIGNsb3NlZCk7XHJcblxyXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcclxuXHJcblx0dGhpcy50YW5nZW50cyA9IGJ1ZmZlckdlb21ldHJ5LnRhbmdlbnRzO1xyXG5cdHRoaXMubm9ybWFscyA9IGJ1ZmZlckdlb21ldHJ5Lm5vcm1hbHM7XHJcblx0dGhpcy5iaW5vcm1hbHMgPSBidWZmZXJHZW9tZXRyeS5iaW5vcm1hbHM7XHJcblxyXG5cdC8vIGNyZWF0ZSBnZW9tZXRyeVxyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShidWZmZXJHZW9tZXRyeSk7XHJcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG59XHJcblxyXG5UdWJlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5UdWJlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUdlb21ldHJ5O1xyXG5cclxuLy8gVHViZUJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBUdWJlQnVmZmVyR2VvbWV0cnkocGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQpIHtcclxuXHJcblx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1R1YmVCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHBhdGg6IHBhdGgsXHJcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0Y2xvc2VkOiBjbG9zZWRcclxuXHR9O1xyXG5cclxuXHR0dWJ1bGFyU2VnbWVudHMgPSB0dWJ1bGFyU2VnbWVudHMgfHwgNjQ7XHJcblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XHJcblx0cmFkaWFsU2VnbWVudHMgPSByYWRpYWxTZWdtZW50cyB8fCA4O1xyXG5cdGNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcclxuXHJcblx0dmFyIGZyYW1lcyA9IHBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyh0dWJ1bGFyU2VnbWVudHMsIGNsb3NlZCk7XHJcblxyXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcclxuXHJcblx0dGhpcy50YW5nZW50cyA9IGZyYW1lcy50YW5nZW50cztcclxuXHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcclxuXHR0aGlzLmJpbm9ybWFscyA9IGZyYW1lcy5iaW5vcm1hbHM7XHJcblxyXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcclxuXHR2YXIgUCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdHZhciBpLCBqO1xyXG5cclxuXHQvLyBidWZmZXJcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gW107XHJcblx0dmFyIG5vcm1hbHMgPSBbXTtcclxuXHR2YXIgdXZzID0gW107XHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHJcblx0Ly8gY3JlYXRlIGJ1ZmZlciBkYXRhXHJcblxyXG5cdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xyXG5cclxuXHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHR0aGlzLnNldEluZGV4KGluZGljZXMpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5vcm1hbHMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcclxuXHJcblx0Ly8gZnVuY3Rpb25zXHJcblxyXG5cdGZ1bmN0aW9uIGdlbmVyYXRlQnVmZmVyRGF0YSgpIHtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgdHVidWxhclNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRcdGdlbmVyYXRlU2VnbWVudChpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIG5vdCBjbG9zZWQsIGdlbmVyYXRlIHRoZSBsYXN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFsc1xyXG5cdFx0Ly8gYXQgdGhlIHJlZ3VsYXIgcG9zaXRpb24gb24gdGhlIGdpdmVuIHBhdGhcclxuXHRcdC8vXHJcblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgY2xvc2VkLCBkdXBsaWNhdGUgdGhlIGZpcnN0IHJvdyBvZiB2ZXJ0aWNlcyBhbmQgbm9ybWFscyAodXZzIHdpbGwgZGlmZmVyKVxyXG5cclxuXHRcdGdlbmVyYXRlU2VnbWVudCgoY2xvc2VkID09PSBmYWxzZSkgPyB0dWJ1bGFyU2VnbWVudHMgOiAwKTtcclxuXHJcblx0XHQvLyB1dnMgYXJlIGdlbmVyYXRlZCBpbiBhIHNlcGFyYXRlIGZ1bmN0aW9uLlxyXG5cdFx0Ly8gdGhpcyBtYWtlcyBpdCBlYXN5IGNvbXB1dGUgY29ycmVjdCB2YWx1ZXMgZm9yIGNsb3NlZCBnZW9tZXRyaWVzXHJcblxyXG5cdFx0Z2VuZXJhdGVVVnMoKTtcclxuXHJcblx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xyXG5cclxuXHRcdGdlbmVyYXRlSW5kaWNlcygpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudChpKSB7XHJcblxyXG5cdFx0Ly8gd2UgdXNlIGdldFBvaW50QXQgdG8gc2FtcGxlIGV2ZW5seSBkaXN0cmlidXRlZCBwb2ludHMgZnJvbSB0aGUgZ2l2ZW4gcGF0aFxyXG5cclxuXHRcdFAgPSBwYXRoLmdldFBvaW50QXQoaSAvIHR1YnVsYXJTZWdtZW50cywgUCk7XHJcblxyXG5cdFx0Ly8gcmV0cmlldmUgY29ycmVzcG9uZGluZyBub3JtYWwgYW5kIGJpbm9ybWFsXHJcblxyXG5cdFx0dmFyIE4gPSBmcmFtZXMubm9ybWFsc1tpXTtcclxuXHRcdHZhciBCID0gZnJhbWVzLmJpbm9ybWFsc1tpXTtcclxuXHJcblx0XHQvLyBnZW5lcmF0ZSBub3JtYWxzIGFuZCB2ZXJ0aWNlcyBmb3IgdGhlIGN1cnJlbnQgc2VnbWVudFxyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGorKykge1xyXG5cclxuXHRcdFx0dmFyIHYgPSBqIC8gcmFkaWFsU2VnbWVudHMgKiBNYXRoLlBJICogMjtcclxuXHJcblx0XHRcdHZhciBzaW4gPSBNYXRoLnNpbih2KTtcclxuXHRcdFx0dmFyIGNvcyA9IC0gTWF0aC5jb3Modik7XHJcblxyXG5cdFx0XHQvLyBub3JtYWxcclxuXHJcblx0XHRcdG5vcm1hbC54ID0gKGNvcyAqIE4ueCArIHNpbiAqIEIueCk7XHJcblx0XHRcdG5vcm1hbC55ID0gKGNvcyAqIE4ueSArIHNpbiAqIEIueSk7XHJcblx0XHRcdG5vcm1hbC56ID0gKGNvcyAqIE4ueiArIHNpbiAqIEIueik7XHJcblx0XHRcdG5vcm1hbC5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcblx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcclxuXHRcdFx0dmVydGV4LnkgPSBQLnkgKyByYWRpdXMgKiBub3JtYWwueTtcclxuXHRcdFx0dmVydGV4LnogPSBQLnogKyByYWRpdXMgKiBub3JtYWwuejtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdlbmVyYXRlSW5kaWNlcygpIHtcclxuXHJcblx0XHRmb3IgKGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaisrKSB7XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGEgPSAocmFkaWFsU2VnbWVudHMgKyAxKSAqIChqIC0gMSkgKyAoaSAtIDEpO1xyXG5cdFx0XHRcdHZhciBiID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiBqICsgKGkgLSAxKTtcclxuXHRcdFx0XHR2YXIgYyA9IChyYWRpYWxTZWdtZW50cyArIDEpICogaiArIGk7XHJcblx0XHRcdFx0dmFyIGQgPSAocmFkaWFsU2VnbWVudHMgKyAxKSAqIChqIC0gMSkgKyBpO1xyXG5cclxuXHRcdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzLnB1c2goYSwgYiwgZCk7XHJcblx0XHRcdFx0aW5kaWNlcy5wdXNoKGIsIGMsIGQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSsrKSB7XHJcblxyXG5cdFx0XHRmb3IgKGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqKyspIHtcclxuXHJcblx0XHRcdFx0dXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7XHJcblx0XHRcdFx0dXYueSA9IGogLyByYWRpYWxTZWdtZW50cztcclxuXHJcblx0XHRcdFx0dXZzLnB1c2godXYueCwgdXYueSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuVHViZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xyXG5cclxuXHRkYXRhLnBhdGggPSB0aGlzLnBhcmFtZXRlcnMucGF0aC50b0pTT04oKTtcclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqXHJcbiAqIGJhc2VkIG9uIGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wcXRvcnVzL1xyXG4gKi9cclxuXHJcbi8vIFRvcnVzS25vdEdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBUb3J1c0tub3RHZW9tZXRyeShyYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEsIGhlaWdodFNjYWxlKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdUb3J1c0tub3RHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0dHViZTogdHViZSxcclxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxyXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0cDogcCxcclxuXHRcdHE6IHFcclxuXHR9O1xyXG5cclxuXHRpZiAoaGVpZ2h0U2NhbGUgIT09IHVuZGVmaW5lZCkgeyBjb25zb2xlLndhcm4oJ1RIUkVFLlRvcnVzS25vdEdlb21ldHJ5OiBoZWlnaHRTY2FsZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNjYWxlKCB4LCB5LCB6ICkgaW5zdGVhZC4nKTsgfVxyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkocmFkaXVzLCB0dWJlLCB0dWJ1bGFyU2VnbWVudHMsIHJhZGlhbFNlZ21lbnRzLCBwLCBxKSk7XHJcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG59XHJcblxyXG5Ub3J1c0tub3RHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEdlb21ldHJ5O1xyXG5cclxuLy8gVG9ydXNLbm90QnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSkge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90QnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdHR1YmU6IHR1YmUsXHJcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuXHRcdHA6IHAsXHJcblx0XHRxOiBxXHJcblx0fTtcclxuXHJcblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XHJcblx0dHViZSA9IHR1YmUgfHwgMC40O1xyXG5cdHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IodHVidWxhclNlZ21lbnRzKSB8fCA2NDtcclxuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IocmFkaWFsU2VnbWVudHMpIHx8IDg7XHJcblx0cCA9IHAgfHwgMjtcclxuXHRxID0gcSB8fCAzO1xyXG5cclxuXHQvLyBidWZmZXJzXHJcblxyXG5cdHZhciBpbmRpY2VzID0gW107XHJcblx0dmFyIHZlcnRpY2VzID0gW107XHJcblx0dmFyIG5vcm1hbHMgPSBbXTtcclxuXHR2YXIgdXZzID0gW107XHJcblxyXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0dmFyIGksIGo7XHJcblxyXG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xyXG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgUDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cdHZhciBQMiA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdHZhciBCID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgVCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIE4gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG5cdGZvciAoaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArK2kpIHtcclxuXHJcblx0XHQvLyB0aGUgcmFkaWFuIFwidVwiIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmUgb2YgdGhlIGN1cnJlbnQgdHVidWxhciBzZWdlbWVudFxyXG5cclxuXHRcdHZhciB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcclxuXHJcblx0XHQvLyBub3cgd2UgY2FsY3VsYXRlIHR3byBwb2ludHMuIFAxIGlzIG91ciBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZSwgUDIgaXMgYSBsaXR0bGUgZmFydGhlciBhaGVhZC5cclxuXHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcclxuXHJcblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUodSwgcCwgcSwgcmFkaXVzLCBQMSk7XHJcblx0XHRjYWxjdWxhdGVQb3NpdGlvbk9uQ3VydmUodSArIDAuMDEsIHAsIHEsIHJhZGl1cywgUDIpO1xyXG5cclxuXHRcdC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xyXG5cclxuXHRcdFQuc3ViVmVjdG9ycyhQMiwgUDEpO1xyXG5cdFx0Ti5hZGRWZWN0b3JzKFAyLCBQMSk7XHJcblx0XHRCLmNyb3NzVmVjdG9ycyhULCBOKTtcclxuXHRcdE4uY3Jvc3NWZWN0b3JzKEIsIFQpO1xyXG5cclxuXHRcdC8vIG5vcm1hbGl6ZSBCLCBOLiBUIGNhbiBiZSBpZ25vcmVkLCB3ZSBkb24ndCB1c2UgaXRcclxuXHJcblx0XHRCLm5vcm1hbGl6ZSgpO1xyXG5cdFx0Ti5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRmb3IgKGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArK2opIHtcclxuXHJcblx0XHRcdC8vIG5vdyBjYWxjdWxhdGUgdGhlIHZlcnRpY2VzLiB0aGV5IGFyZSBub3RoaW5nIG1vcmUgdGhhbiBhbiBleHRydXNpb24gb2YgdGhlIHRvcnVzIGN1cnZlLlxyXG5cdFx0XHQvLyBiZWNhdXNlIHdlIGV4dHJ1ZGUgYSBzaGFwZSBpbiB0aGUgeHktcGxhbmUsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGEgei12YWx1ZS5cclxuXHJcblx0XHRcdHZhciB2ID0gaiAvIHJhZGlhbFNlZ21lbnRzICogTWF0aC5QSSAqIDI7XHJcblx0XHRcdHZhciBjeCA9IC0gdHViZSAqIE1hdGguY29zKHYpO1xyXG5cdFx0XHR2YXIgY3kgPSB0dWJlICogTWF0aC5zaW4odik7XHJcblxyXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXHJcblx0XHRcdC8vIGZpcnN0IHdlIG9yaWVudCB0aGUgZXh0cnVzaW9uIHdpdGggb3VyIGJhc2lzIHZlY3RvcywgdGhlbiB3ZSBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlXHJcblxyXG5cdFx0XHR2ZXJ0ZXgueCA9IFAxLnggKyAoY3ggKiBOLnggKyBjeSAqIEIueCk7XHJcblx0XHRcdHZlcnRleC55ID0gUDEueSArIChjeCAqIE4ueSArIGN5ICogQi55KTtcclxuXHRcdFx0dmVydGV4LnogPSBQMS56ICsgKGN4ICogTi56ICsgY3kgKiBCLnopO1xyXG5cclxuXHRcdFx0dmVydGljZXMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHRcdC8vIG5vcm1hbCAoUDEgaXMgYWx3YXlzIHRoZSBjZW50ZXIvb3JpZ2luIG9mIHRoZSBleHRydXNpb24sIHRodXMgd2UgY2FuIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIG5vcm1hbClcclxuXHJcblx0XHRcdG5vcm1hbC5zdWJWZWN0b3JzKHZlcnRleCwgUDEpLm5vcm1hbGl6ZSgpO1xyXG5cclxuXHRcdFx0bm9ybWFscy5wdXNoKG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnopO1xyXG5cclxuXHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdHV2cy5wdXNoKGkgLyB0dWJ1bGFyU2VnbWVudHMpO1xyXG5cdFx0XHR1dnMucHVzaChqIC8gcmFkaWFsU2VnbWVudHMpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXHJcblxyXG5cdGZvciAoaiA9IDE7IGogPD0gdHVidWxhclNlZ21lbnRzOyBqKyspIHtcclxuXHJcblx0XHRmb3IgKGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRcdC8vIGluZGljZXNcclxuXHJcblx0XHRcdHZhciBhID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiAoaiAtIDEpICsgKGkgLSAxKTtcclxuXHRcdFx0dmFyIGIgPSAocmFkaWFsU2VnbWVudHMgKyAxKSAqIGogKyAoaSAtIDEpO1xyXG5cdFx0XHR2YXIgYyA9IChyYWRpYWxTZWdtZW50cyArIDEpICogaiArIGk7XHJcblx0XHRcdHZhciBkID0gKHJhZGlhbFNlZ21lbnRzICsgMSkgKiAoaiAtIDEpICsgaTtcclxuXHJcblx0XHRcdC8vIGZhY2VzXHJcblxyXG5cdFx0XHRpbmRpY2VzLnB1c2goYSwgYiwgZCk7XHJcblx0XHRcdGluZGljZXMucHVzaChiLCBjLCBkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gYnVpbGQgZ2VvbWV0cnlcclxuXHJcblx0dGhpcy5zZXRJbmRleChpbmRpY2VzKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShub3JtYWxzLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodXZzLCAyKSk7XHJcblxyXG5cdC8vIHRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvbiB0aGUgdG9ydXMgY3VydmVcclxuXHJcblx0ZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKHUsIHAsIHEsIHJhZGl1cywgcG9zaXRpb24pIHtcclxuXHJcblx0XHR2YXIgY3UgPSBNYXRoLmNvcyh1KTtcclxuXHRcdHZhciBzdSA9IE1hdGguc2luKHUpO1xyXG5cdFx0dmFyIHF1T3ZlclAgPSBxIC8gcCAqIHU7XHJcblx0XHR2YXIgY3MgPSBNYXRoLmNvcyhxdU92ZXJQKTtcclxuXHJcblx0XHRwb3NpdGlvbi54ID0gcmFkaXVzICogKDIgKyBjcykgKiAwLjUgKiBjdTtcclxuXHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoMiArIGNzKSAqIHN1ICogMC41O1xyXG5cdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKHF1T3ZlclApICogMC41O1xyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuLy8gVG9ydXNHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gVG9ydXNHZW9tZXRyeShyYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYykge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnVG9ydXNHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0dHViZTogdHViZSxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxyXG5cdFx0YXJjOiBhcmNcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVG9ydXNCdWZmZXJHZW9tZXRyeShyYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYykpO1xyXG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xyXG5cclxufVxyXG5cclxuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRvcnVzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNHZW9tZXRyeTtcclxuXHJcbi8vIFRvcnVzQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFRvcnVzQnVmZmVyR2VvbWV0cnkocmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMpIHtcclxuXHJcblx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1RvcnVzQnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdHR1YmU6IHR1YmUsXHJcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcclxuXHRcdGFyYzogYXJjXHJcblx0fTtcclxuXHJcblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XHJcblx0dHViZSA9IHR1YmUgfHwgMC40O1xyXG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vcihyYWRpYWxTZWdtZW50cykgfHwgODtcclxuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKHR1YnVsYXJTZWdtZW50cykgfHwgNjtcclxuXHRhcmMgPSBhcmMgfHwgTWF0aC5QSSAqIDI7XHJcblxyXG5cdC8vIGJ1ZmZlcnNcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHR2YXIgdmVydGljZXMgPSBbXTtcclxuXHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHR2YXIgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0dmFyIGosIGk7XHJcblxyXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcclxuXHJcblx0Zm9yIChqID0gMDsgaiA8PSByYWRpYWxTZWdtZW50czsgaisrKSB7XHJcblxyXG5cdFx0Zm9yIChpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHUgPSBpIC8gdHVidWxhclNlZ21lbnRzICogYXJjO1xyXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xyXG5cclxuXHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHR2ZXJ0ZXgueCA9IChyYWRpdXMgKyB0dWJlICogTWF0aC5jb3ModikpICogTWF0aC5jb3ModSk7XHJcblx0XHRcdHZlcnRleC55ID0gKHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyh2KSkgKiBNYXRoLnNpbih1KTtcclxuXHRcdFx0dmVydGV4LnogPSB0dWJlICogTWF0aC5zaW4odik7XHJcblxyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdFx0Ly8gbm9ybWFsXHJcblxyXG5cdFx0XHRjZW50ZXIueCA9IHJhZGl1cyAqIE1hdGguY29zKHUpO1xyXG5cdFx0XHRjZW50ZXIueSA9IHJhZGl1cyAqIE1hdGguc2luKHUpO1xyXG5cdFx0XHRub3JtYWwuc3ViVmVjdG9ycyh2ZXJ0ZXgsIGNlbnRlcikubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRub3JtYWxzLnB1c2gobm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueik7XHJcblxyXG5cdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0dXZzLnB1c2goaSAvIHR1YnVsYXJTZWdtZW50cyk7XHJcblx0XHRcdHV2cy5wdXNoKGogLyByYWRpYWxTZWdtZW50cyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGdlbmVyYXRlIGluZGljZXNcclxuXHJcblx0Zm9yIChqID0gMTsgaiA8PSByYWRpYWxTZWdtZW50czsgaisrKSB7XHJcblxyXG5cdFx0Zm9yIChpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkrKykge1xyXG5cclxuXHRcdFx0Ly8gaW5kaWNlc1xyXG5cclxuXHRcdFx0dmFyIGEgPSAodHVidWxhclNlZ21lbnRzICsgMSkgKiBqICsgaSAtIDE7XHJcblx0XHRcdHZhciBiID0gKHR1YnVsYXJTZWdtZW50cyArIDEpICogKGogLSAxKSArIGkgLSAxO1xyXG5cdFx0XHR2YXIgYyA9ICh0dWJ1bGFyU2VnbWVudHMgKyAxKSAqIChqIC0gMSkgKyBpO1xyXG5cdFx0XHR2YXIgZCA9ICh0dWJ1bGFyU2VnbWVudHMgKyAxKSAqIGogKyBpO1xyXG5cclxuXHRcdFx0Ly8gZmFjZXNcclxuXHJcblx0XHRcdGluZGljZXMucHVzaChhLCBiLCBkKTtcclxuXHRcdFx0aW5kaWNlcy5wdXNoKGIsIGMsIGQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHR0aGlzLnNldEluZGV4KGluZGljZXMpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5vcm1hbHMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcclxuXHJcbn1cclxuXHJcblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5Ub3J1c0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvcnVzQnVmZmVyR2VvbWV0cnk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICogUG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0ICh2Mi4xLjUpXHJcbiAqL1xyXG5cclxudmFyIEVhcmN1dCA9IHtcclxuXHJcblx0dHJpYW5ndWxhdGU6IGZ1bmN0aW9uIChkYXRhLCBob2xlSW5kaWNlcywgZGltKSB7XHJcblxyXG5cdFx0ZGltID0gZGltIHx8IDI7XHJcblxyXG5cdFx0dmFyIGhhc0hvbGVzID0gaG9sZUluZGljZXMgJiYgaG9sZUluZGljZXMubGVuZ3RoLFxyXG5cdFx0XHRvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbMF0gKiBkaW0gOiBkYXRhLmxlbmd0aCxcclxuXHRcdFx0b3V0ZXJOb2RlID0gbGlua2VkTGlzdChkYXRhLCAwLCBvdXRlckxlbiwgZGltLCB0cnVlKSxcclxuXHRcdFx0dHJpYW5nbGVzID0gW107XHJcblxyXG5cdFx0aWYgKCFvdXRlck5vZGUgfHwgb3V0ZXJOb2RlLm5leHQgPT09IG91dGVyTm9kZS5wcmV2KSB7IHJldHVybiB0cmlhbmdsZXM7IH1cclxuXHJcblx0XHR2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcclxuXHJcblx0XHRpZiAoaGFzSG9sZXMpIHsgb3V0ZXJOb2RlID0gZWxpbWluYXRlSG9sZXMoZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltKTsgfVxyXG5cclxuXHRcdC8vIGlmIHRoZSBzaGFwZSBpcyBub3QgdG9vIHNpbXBsZSwgd2UnbGwgdXNlIHotb3JkZXIgY3VydmUgaGFzaCBsYXRlcjsgY2FsY3VsYXRlIHBvbHlnb24gYmJveFxyXG5cdFx0aWYgKGRhdGEubGVuZ3RoID4gODAgKiBkaW0pIHtcclxuXHJcblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVswXTtcclxuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWzFdO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IGRpbTsgaSA8IG91dGVyTGVuOyBpICs9IGRpbSkge1xyXG5cclxuXHRcdFx0XHR4ID0gZGF0YVtpXTtcclxuXHRcdFx0XHR5ID0gZGF0YVtpICsgMV07XHJcblx0XHRcdFx0aWYgKHggPCBtaW5YKSB7IG1pblggPSB4OyB9XHJcblx0XHRcdFx0aWYgKHkgPCBtaW5ZKSB7IG1pblkgPSB5OyB9XHJcblx0XHRcdFx0aWYgKHggPiBtYXhYKSB7IG1heFggPSB4OyB9XHJcblx0XHRcdFx0aWYgKHkgPiBtYXhZKSB7IG1heFkgPSB5OyB9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBtaW5YLCBtaW5ZIGFuZCBpbnZTaXplIGFyZSBsYXRlciB1c2VkIHRvIHRyYW5zZm9ybSBjb29yZHMgaW50byBpbnRlZ2VycyBmb3Igei1vcmRlciBjYWxjdWxhdGlvblxyXG5cdFx0XHRpbnZTaXplID0gTWF0aC5tYXgobWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcclxuXHRcdFx0aW52U2l6ZSA9IGludlNpemUgIT09IDAgPyAxIC8gaW52U2l6ZSA6IDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGVhcmN1dExpbmtlZChvdXRlck5vZGUsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuXHJcblx0XHRyZXR1cm4gdHJpYW5nbGVzO1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuLy8gY3JlYXRlIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0IGZyb20gcG9seWdvbiBwb2ludHMgaW4gdGhlIHNwZWNpZmllZCB3aW5kaW5nIG9yZGVyXHJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHtcclxuXHJcblx0dmFyIGksIGxhc3Q7XHJcblxyXG5cdGlmIChjbG9ja3dpc2UgPT09IChzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSkge1xyXG5cclxuXHRcdGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGRpbSkgeyBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7IH1cclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRmb3IgKGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltKSB7IGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdGlmIChsYXN0ICYmIGVxdWFscyhsYXN0LCBsYXN0Lm5leHQpKSB7XHJcblxyXG5cdFx0cmVtb3ZlTm9kZShsYXN0KTtcclxuXHRcdGxhc3QgPSBsYXN0Lm5leHQ7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGxhc3Q7XHJcblxyXG59XHJcblxyXG4vLyBlbGltaW5hdGUgY29saW5lYXIgb3IgZHVwbGljYXRlIHBvaW50c1xyXG5mdW5jdGlvbiBmaWx0ZXJQb2ludHMoc3RhcnQsIGVuZCkge1xyXG5cclxuXHRpZiAoIXN0YXJ0KSB7IHJldHVybiBzdGFydDsgfVxyXG5cdGlmICghZW5kKSB7IGVuZCA9IHN0YXJ0OyB9XHJcblxyXG5cdHZhciBwID0gc3RhcnQsXHJcblx0XHRhZ2FpbjtcclxuXHRkbyB7XHJcblxyXG5cdFx0YWdhaW4gPSBmYWxzZTtcclxuXHJcblx0XHRpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7XHJcblxyXG5cdFx0XHRyZW1vdmVOb2RlKHApO1xyXG5cdFx0XHRwID0gZW5kID0gcC5wcmV2O1xyXG5cdFx0XHRpZiAocCA9PT0gcC5uZXh0KSB7IGJyZWFrOyB9XHJcblx0XHRcdGFnYWluID0gdHJ1ZTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cCA9IHAubmV4dDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0gd2hpbGUgKGFnYWluIHx8IHAgIT09IGVuZCk7XHJcblxyXG5cdHJldHVybiBlbmQ7XHJcblxyXG59XHJcblxyXG4vLyBtYWluIGVhciBzbGljaW5nIGxvb3Agd2hpY2ggdHJpYW5ndWxhdGVzIGEgcG9seWdvbiAoZ2l2ZW4gYXMgYSBsaW5rZWQgbGlzdClcclxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MpIHtcclxuXHJcblx0aWYgKCFlYXIpIHsgcmV0dXJuOyB9XHJcblxyXG5cdC8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcclxuXHRpZiAoIXBhc3MgJiYgaW52U2l6ZSkgeyBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSk7IH1cclxuXHJcblx0dmFyIHN0b3AgPSBlYXIsXHJcblx0XHRwcmV2LCBuZXh0O1xyXG5cclxuXHQvLyBpdGVyYXRlIHRocm91Z2ggZWFycywgc2xpY2luZyB0aGVtIG9uZSBieSBvbmVcclxuXHR3aGlsZSAoZWFyLnByZXYgIT09IGVhci5uZXh0KSB7XHJcblxyXG5cdFx0cHJldiA9IGVhci5wcmV2O1xyXG5cdFx0bmV4dCA9IGVhci5uZXh0O1xyXG5cclxuXHRcdGlmIChpbnZTaXplID8gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSA6IGlzRWFyKGVhcikpIHtcclxuXHJcblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKHByZXYuaSAvIGRpbSk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKGVhci5pIC8gZGltKTtcclxuXHRcdFx0dHJpYW5nbGVzLnB1c2gobmV4dC5pIC8gZGltKTtcclxuXHJcblx0XHRcdHJlbW92ZU5vZGUoZWFyKTtcclxuXHJcblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcclxuXHRcdFx0ZWFyID0gbmV4dC5uZXh0O1xyXG5cdFx0XHRzdG9wID0gbmV4dC5uZXh0O1xyXG5cclxuXHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGVhciA9IG5leHQ7XHJcblxyXG5cdFx0Ly8gaWYgd2UgbG9vcGVkIHRocm91Z2ggdGhlIHdob2xlIHJlbWFpbmluZyBwb2x5Z29uIGFuZCBjYW4ndCBmaW5kIGFueSBtb3JlIGVhcnNcclxuXHRcdGlmIChlYXIgPT09IHN0b3ApIHtcclxuXHJcblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXHJcblx0XHRcdGlmICghcGFzcykge1xyXG5cclxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoZmlsdGVyUG9pbnRzKGVhciksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxKTtcclxuXHJcblx0XHRcdFx0Ly8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAocGFzcyA9PT0gMSkge1xyXG5cclxuXHRcdFx0XHRlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGVhciwgdHJpYW5nbGVzLCBkaW0pO1xyXG5cdFx0XHRcdGVhcmN1dExpbmtlZChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAyKTtcclxuXHJcblx0XHRcdFx0Ly8gYXMgYSBsYXN0IHJlc29ydCwgdHJ5IHNwbGl0dGluZyB0aGUgcmVtYWluaW5nIHBvbHlnb24gaW50byB0d29cclxuXHJcblx0XHRcdH0gZWxzZSBpZiAocGFzcyA9PT0gMikge1xyXG5cclxuXHRcdFx0XHRzcGxpdEVhcmN1dChlYXIsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXHJcbmZ1bmN0aW9uIGlzRWFyKGVhcikge1xyXG5cclxuXHR2YXIgYSA9IGVhci5wcmV2LFxyXG5cdFx0YiA9IGVhcixcclxuXHRcdGMgPSBlYXIubmV4dDtcclxuXHJcblx0aWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgeyByZXR1cm4gZmFsc2U7IH0gLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcclxuXHJcblx0Ly8gbm93IG1ha2Ugc3VyZSB3ZSBkb24ndCBoYXZlIG90aGVyIHBvaW50cyBpbnNpZGUgdGhlIHBvdGVudGlhbCBlYXJcclxuXHR2YXIgcCA9IGVhci5uZXh0Lm5leHQ7XHJcblxyXG5cdHdoaWxlIChwICE9PSBlYXIucHJldikge1xyXG5cclxuXHRcdGlmIChwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgcC54LCBwLnkpICYmXHJcblx0XHRcdGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHsgcmV0dXJuIGZhbHNlOyB9XHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiB0cnVlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XHJcblxyXG5cdHZhciBhID0gZWFyLnByZXYsXHJcblx0XHRiID0gZWFyLFxyXG5cdFx0YyA9IGVhci5uZXh0O1xyXG5cclxuXHRpZiAoYXJlYShhLCBiLCBjKSA+PSAwKSB7IHJldHVybiBmYWxzZTsgfSAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxyXG5cclxuXHQvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxyXG5cdHZhciBtaW5UWCA9IGEueCA8IGIueCA/IChhLnggPCBjLnggPyBhLnggOiBjLngpIDogKGIueCA8IGMueCA/IGIueCA6IGMueCksXHJcblx0XHRtaW5UWSA9IGEueSA8IGIueSA/IChhLnkgPCBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA8IGMueSA/IGIueSA6IGMueSksXHJcblx0XHRtYXhUWCA9IGEueCA+IGIueCA/IChhLnggPiBjLnggPyBhLnggOiBjLngpIDogKGIueCA+IGMueCA/IGIueCA6IGMueCksXHJcblx0XHRtYXhUWSA9IGEueSA+IGIueSA/IChhLnkgPiBjLnkgPyBhLnkgOiBjLnkpIDogKGIueSA+IGMueSA/IGIueSA6IGMueSk7XHJcblxyXG5cdC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XHJcblx0dmFyIG1pblogPSB6T3JkZXIobWluVFgsIG1pblRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSxcclxuXHRcdG1heFogPSB6T3JkZXIobWF4VFgsIG1heFRZLCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcclxuXHJcblx0dmFyIHAgPSBlYXIucHJldlosXHJcblx0XHRuID0gZWFyLm5leHRaO1xyXG5cclxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBib3RoIGRpcmVjdGlvbnNcclxuXHR3aGlsZSAocCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaKSB7XHJcblxyXG5cdFx0aWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXHJcblx0XHRcdHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcclxuXHRcdFx0YXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHRcdHAgPSBwLnByZXZaO1xyXG5cclxuXHRcdGlmIChuICE9PSBlYXIucHJldiAmJiBuICE9PSBlYXIubmV4dCAmJlxyXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkpICYmXHJcblx0XHRcdGFyZWEobi5wcmV2LCBuLCBuLm5leHQpID49IDApIHsgcmV0dXJuIGZhbHNlOyB9XHJcblx0XHRuID0gbi5uZXh0WjtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxyXG5cdHdoaWxlIChwICYmIHAueiA+PSBtaW5aKSB7XHJcblxyXG5cdFx0aWYgKHAgIT09IGVhci5wcmV2ICYmIHAgIT09IGVhci5uZXh0ICYmXHJcblx0XHRcdHBvaW50SW5UcmlhbmdsZShhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSkgJiZcclxuXHRcdFx0YXJlYShwLnByZXYsIHAsIHAubmV4dCkgPj0gMCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHRcdHAgPSBwLnByZXZaO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXHJcblx0d2hpbGUgKG4gJiYgbi56IDw9IG1heFopIHtcclxuXHJcblx0XHRpZiAobiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcclxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55KSAmJlxyXG5cdFx0XHRhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cdFx0biA9IG4ubmV4dFo7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRydWU7XHJcblxyXG59XHJcblxyXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xyXG5mdW5jdGlvbiBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKHN0YXJ0LCB0cmlhbmdsZXMsIGRpbSkge1xyXG5cclxuXHR2YXIgcCA9IHN0YXJ0O1xyXG5cdGRvIHtcclxuXHJcblx0XHR2YXIgYSA9IHAucHJldixcclxuXHRcdFx0YiA9IHAubmV4dC5uZXh0O1xyXG5cclxuXHRcdGlmICghZXF1YWxzKGEsIGIpICYmIGludGVyc2VjdHMoYSwgcCwgcC5uZXh0LCBiKSAmJiBsb2NhbGx5SW5zaWRlKGEsIGIpICYmIGxvY2FsbHlJbnNpZGUoYiwgYSkpIHtcclxuXHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKGEuaSAvIGRpbSk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKHAuaSAvIGRpbSk7XHJcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKGIuaSAvIGRpbSk7XHJcblxyXG5cdFx0XHQvLyByZW1vdmUgdHdvIG5vZGVzIGludm9sdmVkXHJcblx0XHRcdHJlbW92ZU5vZGUocCk7XHJcblx0XHRcdHJlbW92ZU5vZGUocC5uZXh0KTtcclxuXHJcblx0XHRcdHAgPSBzdGFydCA9IGI7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHAgPSBwLm5leHQ7XHJcblxyXG5cdH0gd2hpbGUgKHAgIT09IHN0YXJ0KTtcclxuXHJcblx0cmV0dXJuIHA7XHJcblxyXG59XHJcblxyXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxyXG5mdW5jdGlvbiBzcGxpdEVhcmN1dChzdGFydCwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpIHtcclxuXHJcblx0Ly8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cclxuXHR2YXIgYSA9IHN0YXJ0O1xyXG5cdGRvIHtcclxuXHJcblx0XHR2YXIgYiA9IGEubmV4dC5uZXh0O1xyXG5cdFx0d2hpbGUgKGIgIT09IGEucHJldikge1xyXG5cclxuXHRcdFx0aWYgKGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbChhLCBiKSkge1xyXG5cclxuXHRcdFx0XHQvLyBzcGxpdCB0aGUgcG9seWdvbiBpbiB0d28gYnkgdGhlIGRpYWdvbmFsXHJcblx0XHRcdFx0dmFyIGMgPSBzcGxpdFBvbHlnb24oYSwgYik7XHJcblxyXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXHJcblx0XHRcdFx0YSA9IGZpbHRlclBvaW50cyhhLCBhLm5leHQpO1xyXG5cdFx0XHRcdGMgPSBmaWx0ZXJQb2ludHMoYywgYy5uZXh0KTtcclxuXHJcblx0XHRcdFx0Ly8gcnVuIGVhcmN1dCBvbiBlYWNoIGhhbGZcclxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoYSwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUpO1xyXG5cdFx0XHRcdGVhcmN1dExpbmtlZChjLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0YiA9IGIubmV4dDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0YSA9IGEubmV4dDtcclxuXHJcblx0fSB3aGlsZSAoYSAhPT0gc3RhcnQpO1xyXG5cclxufVxyXG5cclxuLy8gbGluayBldmVyeSBob2xlIGludG8gdGhlIG91dGVyIGxvb3AsIHByb2R1Y2luZyBhIHNpbmdsZS1yaW5nIHBvbHlnb24gd2l0aG91dCBob2xlc1xyXG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlcyhkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0pIHtcclxuXHJcblx0dmFyIHF1ZXVlID0gW10sXHJcblx0XHRpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XHJcblxyXG5cdGZvciAoaSA9IDAsIGxlbiA9IGhvbGVJbmRpY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcblxyXG5cdFx0c3RhcnQgPSBob2xlSW5kaWNlc1tpXSAqIGRpbTtcclxuXHRcdGVuZCA9IGkgPCBsZW4gLSAxID8gaG9sZUluZGljZXNbaSArIDFdICogZGltIDogZGF0YS5sZW5ndGg7XHJcblx0XHRsaXN0ID0gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlKTtcclxuXHRcdGlmIChsaXN0ID09PSBsaXN0Lm5leHQpIHsgbGlzdC5zdGVpbmVyID0gdHJ1ZTsgfVxyXG5cdFx0cXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7XHJcblxyXG5cdH1cclxuXHJcblx0cXVldWUuc29ydChjb21wYXJlWCk7XHJcblxyXG5cdC8vIHByb2Nlc3MgaG9sZXMgZnJvbSBsZWZ0IHRvIHJpZ2h0XHJcblx0Zm9yIChpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0ZWxpbWluYXRlSG9sZShxdWV1ZVtpXSwgb3V0ZXJOb2RlKTtcclxuXHRcdG91dGVyTm9kZSA9IGZpbHRlclBvaW50cyhvdXRlck5vZGUsIG91dGVyTm9kZS5uZXh0KTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gb3V0ZXJOb2RlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY29tcGFyZVgoYSwgYikge1xyXG5cclxuXHRyZXR1cm4gYS54IC0gYi54O1xyXG5cclxufVxyXG5cclxuLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0XHJcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoaG9sZSwgb3V0ZXJOb2RlKSB7XHJcblxyXG5cdG91dGVyTm9kZSA9IGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSk7XHJcblx0aWYgKG91dGVyTm9kZSkge1xyXG5cclxuXHRcdHZhciBiID0gc3BsaXRQb2x5Z29uKG91dGVyTm9kZSwgaG9sZSk7XHJcblx0XHRmaWx0ZXJQb2ludHMoYiwgYi5uZXh0KTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxyXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZShob2xlLCBvdXRlck5vZGUpIHtcclxuXHJcblx0dmFyIHAgPSBvdXRlck5vZGUsXHJcblx0XHRoeCA9IGhvbGUueCxcclxuXHRcdGh5ID0gaG9sZS55LFxyXG5cdFx0cXggPSAtIEluZmluaXR5LFxyXG5cdFx0bTtcclxuXHJcblx0Ly8gZmluZCBhIHNlZ21lbnQgaW50ZXJzZWN0ZWQgYnkgYSByYXkgZnJvbSB0aGUgaG9sZSdzIGxlZnRtb3N0IHBvaW50IHRvIHRoZSBsZWZ0O1xyXG5cdC8vIHNlZ21lbnQncyBlbmRwb2ludCB3aXRoIGxlc3NlciB4IHdpbGwgYmUgcG90ZW50aWFsIGNvbm5lY3Rpb24gcG9pbnRcclxuXHRkbyB7XHJcblxyXG5cdFx0aWYgKGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55KSB7XHJcblxyXG5cdFx0XHR2YXIgeCA9IHAueCArIChoeSAtIHAueSkgKiAocC5uZXh0LnggLSBwLngpIC8gKHAubmV4dC55IC0gcC55KTtcclxuXHRcdFx0aWYgKHggPD0gaHggJiYgeCA+IHF4KSB7XHJcblxyXG5cdFx0XHRcdHF4ID0geDtcclxuXHRcdFx0XHRpZiAoeCA9PT0gaHgpIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoaHkgPT09IHAueSkgeyByZXR1cm4gcDsgfVxyXG5cdFx0XHRcdFx0aWYgKGh5ID09PSBwLm5leHQueSkgeyByZXR1cm4gcC5uZXh0OyB9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bSA9IHAueCA8IHAubmV4dC54ID8gcCA6IHAubmV4dDtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cCA9IHAubmV4dDtcclxuXHJcblx0fSB3aGlsZSAocCAhPT0gb3V0ZXJOb2RlKTtcclxuXHJcblx0aWYgKCFtKSB7IHJldHVybiBudWxsOyB9XHJcblxyXG5cdGlmIChoeCA9PT0gcXgpIHsgcmV0dXJuIG0ucHJldjsgfSAvLyBob2xlIHRvdWNoZXMgb3V0ZXIgc2VnbWVudDsgcGljayBsb3dlciBlbmRwb2ludFxyXG5cclxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XHJcblx0Ly8gaWYgdGhlcmUgYXJlIG5vIHBvaW50cyBmb3VuZCwgd2UgaGF2ZSBhIHZhbGlkIGNvbm5lY3Rpb247XHJcblx0Ly8gb3RoZXJ3aXNlIGNob29zZSB0aGUgcG9pbnQgb2YgdGhlIG1pbmltdW0gYW5nbGUgd2l0aCB0aGUgcmF5IGFzIGNvbm5lY3Rpb24gcG9pbnRcclxuXHJcblx0dmFyIHN0b3AgPSBtLFxyXG5cdFx0bXggPSBtLngsXHJcblx0XHRteSA9IG0ueSxcclxuXHRcdHRhbk1pbiA9IEluZmluaXR5LFxyXG5cdFx0dGFuO1xyXG5cclxuXHRwID0gbS5uZXh0O1xyXG5cclxuXHR3aGlsZSAocCAhPT0gc3RvcCkge1xyXG5cclxuXHRcdGlmIChoeCA+PSBwLnggJiYgcC54ID49IG14ICYmIGh4ICE9PSBwLnggJiZcclxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55KSkge1xyXG5cclxuXHRcdFx0dGFuID0gTWF0aC5hYnMoaHkgLSBwLnkpIC8gKGh4IC0gcC54KTsgLy8gdGFuZ2VudGlhbFxyXG5cclxuXHRcdFx0aWYgKCh0YW4gPCB0YW5NaW4gfHwgKHRhbiA9PT0gdGFuTWluICYmIHAueCA+IG0ueCkpICYmIGxvY2FsbHlJbnNpZGUocCwgaG9sZSkpIHtcclxuXHJcblx0XHRcdFx0bSA9IHA7XHJcblx0XHRcdFx0dGFuTWluID0gdGFuO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBtO1xyXG5cclxufVxyXG5cclxuLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxyXG5mdW5jdGlvbiBpbmRleEN1cnZlKHN0YXJ0LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XHJcblxyXG5cdHZhciBwID0gc3RhcnQ7XHJcblx0ZG8ge1xyXG5cclxuXHRcdGlmIChwLnogPT09IG51bGwpIHsgcC56ID0gek9yZGVyKHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplKTsgfVxyXG5cdFx0cC5wcmV2WiA9IHAucHJldjtcclxuXHRcdHAubmV4dFogPSBwLm5leHQ7XHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlIChwICE9PSBzdGFydCk7XHJcblxyXG5cdHAucHJldloubmV4dFogPSBudWxsO1xyXG5cdHAucHJldlogPSBudWxsO1xyXG5cclxuXHRzb3J0TGlua2VkKHApO1xyXG5cclxufVxyXG5cclxuLy8gU2ltb24gVGF0aGFtJ3MgbGlua2VkIGxpc3QgbWVyZ2Ugc29ydCBhbGdvcml0aG1cclxuLy8gaHR0cDovL3d3dy5jaGlhcmsuZ3JlZW5lbmQub3JnLnVrL35zZ3RhdGhhbS9hbGdvcml0aG1zL2xpc3Rzb3J0Lmh0bWxcclxuZnVuY3Rpb24gc29ydExpbmtlZChsaXN0KSB7XHJcblxyXG5cdHZhciBpLCBwLCBxLCBlLCB0YWlsLCBudW1NZXJnZXMsIHBTaXplLCBxU2l6ZSxcclxuXHRcdGluU2l6ZSA9IDE7XHJcblxyXG5cdGRvIHtcclxuXHJcblx0XHRwID0gbGlzdDtcclxuXHRcdGxpc3QgPSBudWxsO1xyXG5cdFx0dGFpbCA9IG51bGw7XHJcblx0XHRudW1NZXJnZXMgPSAwO1xyXG5cclxuXHRcdHdoaWxlIChwKSB7XHJcblxyXG5cdFx0XHRudW1NZXJnZXMrKztcclxuXHRcdFx0cSA9IHA7XHJcblx0XHRcdHBTaXplID0gMDtcclxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGluU2l6ZTsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHBTaXplKys7XHJcblx0XHRcdFx0cSA9IHEubmV4dFo7XHJcblx0XHRcdFx0aWYgKCFxKSB7IGJyZWFrOyB9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRxU2l6ZSA9IGluU2l6ZTtcclxuXHJcblx0XHRcdHdoaWxlIChwU2l6ZSA+IDAgfHwgKHFTaXplID4gMCAmJiBxKSkge1xyXG5cclxuXHRcdFx0XHRpZiAocFNpemUgIT09IDAgJiYgKHFTaXplID09PSAwIHx8ICFxIHx8IHAueiA8PSBxLnopKSB7XHJcblxyXG5cdFx0XHRcdFx0ZSA9IHA7XHJcblx0XHRcdFx0XHRwID0gcC5uZXh0WjtcclxuXHRcdFx0XHRcdHBTaXplLS07XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0ZSA9IHE7XHJcblx0XHRcdFx0XHRxID0gcS5uZXh0WjtcclxuXHRcdFx0XHRcdHFTaXplLS07XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHRhaWwpIHsgdGFpbC5uZXh0WiA9IGU7IH1cclxuXHRcdFx0XHRlbHNlIHsgbGlzdCA9IGU7IH1cclxuXHJcblx0XHRcdFx0ZS5wcmV2WiA9IHRhaWw7XHJcblx0XHRcdFx0dGFpbCA9IGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwID0gcTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGFpbC5uZXh0WiA9IG51bGw7XHJcblx0XHRpblNpemUgKj0gMjtcclxuXHJcblx0fSB3aGlsZSAobnVtTWVyZ2VzID4gMSk7XHJcblxyXG5cdHJldHVybiBsaXN0O1xyXG5cclxufVxyXG5cclxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgaW52ZXJzZSBvZiB0aGUgbG9uZ2VyIHNpZGUgb2YgZGF0YSBiYm94XHJcbmZ1bmN0aW9uIHpPcmRlcih4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XHJcblxyXG5cdC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2VcclxuXHR4ID0gMzI3NjcgKiAoeCAtIG1pblgpICogaW52U2l6ZTtcclxuXHR5ID0gMzI3NjcgKiAoeSAtIG1pblkpICogaW52U2l6ZTtcclxuXHJcblx0eCA9ICh4IHwgKHggPDwgOCkpICYgMHgwMEZGMDBGRjtcclxuXHR4ID0gKHggfCAoeCA8PCA0KSkgJiAweDBGMEYwRjBGO1xyXG5cdHggPSAoeCB8ICh4IDw8IDIpKSAmIDB4MzMzMzMzMzM7XHJcblx0eCA9ICh4IHwgKHggPDwgMSkpICYgMHg1NTU1NTU1NTtcclxuXHJcblx0eSA9ICh5IHwgKHkgPDwgOCkpICYgMHgwMEZGMDBGRjtcclxuXHR5ID0gKHkgfCAoeSA8PCA0KSkgJiAweDBGMEYwRjBGO1xyXG5cdHkgPSAoeSB8ICh5IDw8IDIpKSAmIDB4MzMzMzMzMzM7XHJcblx0eSA9ICh5IHwgKHkgPDwgMSkpICYgMHg1NTU1NTU1NTtcclxuXHJcblx0cmV0dXJuIHggfCAoeSA8PCAxKTtcclxuXHJcbn1cclxuXHJcbi8vIGZpbmQgdGhlIGxlZnRtb3N0IG5vZGUgb2YgYSBwb2x5Z29uIHJpbmdcclxuZnVuY3Rpb24gZ2V0TGVmdG1vc3Qoc3RhcnQpIHtcclxuXHJcblx0dmFyIHAgPSBzdGFydCxcclxuXHRcdGxlZnRtb3N0ID0gc3RhcnQ7XHJcblx0ZG8ge1xyXG5cclxuXHRcdGlmIChwLnggPCBsZWZ0bW9zdC54IHx8IChwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSkpIHsgbGVmdG1vc3QgPSBwOyB9XHJcblx0XHRwID0gcC5uZXh0O1xyXG5cclxuXHR9IHdoaWxlIChwICE9PSBzdGFydCk7XHJcblxyXG5cdHJldHVybiBsZWZ0bW9zdDtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcclxuZnVuY3Rpb24gcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSkge1xyXG5cclxuXHRyZXR1cm4gKGN4IC0gcHgpICogKGF5IC0gcHkpIC0gKGF4IC0gcHgpICogKGN5IC0gcHkpID49IDAgJiZcclxuXHRcdChheCAtIHB4KSAqIChieSAtIHB5KSAtIChieCAtIHB4KSAqIChheSAtIHB5KSA+PSAwICYmXHJcblx0XHQoYnggLSBweCkgKiAoY3kgLSBweSkgLSAoY3ggLSBweCkgKiAoYnkgLSBweSkgPj0gMDtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxyXG5mdW5jdGlvbiBpc1ZhbGlkRGlhZ29uYWwoYSwgYikge1xyXG5cclxuXHRyZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJlxyXG5cdFx0bG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpICYmIG1pZGRsZUluc2lkZShhLCBiKTtcclxuXHJcbn1cclxuXHJcbi8vIHNpZ25lZCBhcmVhIG9mIGEgdHJpYW5nbGVcclxuZnVuY3Rpb24gYXJlYShwLCBxLCByKSB7XHJcblxyXG5cdHJldHVybiAocS55IC0gcC55KSAqIChyLnggLSBxLngpIC0gKHEueCAtIHAueCkgKiAoci55IC0gcS55KTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXHJcbmZ1bmN0aW9uIGVxdWFscyhwMSwgcDIpIHtcclxuXHJcblx0cmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcclxuZnVuY3Rpb24gaW50ZXJzZWN0cyhwMSwgcTEsIHAyLCBxMikge1xyXG5cclxuXHRpZiAoKGVxdWFscyhwMSwgcDIpICYmIGVxdWFscyhxMSwgcTIpKSB8fFxyXG5cdFx0KGVxdWFscyhwMSwgcTIpICYmIGVxdWFscyhwMiwgcTEpKSkgeyByZXR1cm4gdHJ1ZTsgfVxyXG5cdHJldHVybiBhcmVhKHAxLCBxMSwgcDIpID4gMCAhPT0gYXJlYShwMSwgcTEsIHEyKSA+IDAgJiZcclxuXHRcdGFyZWEocDIsIHEyLCBwMSkgPiAwICE9PSBhcmVhKHAyLCBxMiwgcTEpID4gMDtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXHJcbmZ1bmN0aW9uIGludGVyc2VjdHNQb2x5Z29uKGEsIGIpIHtcclxuXHJcblx0dmFyIHAgPSBhO1xyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAocC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXHJcblx0XHRcdGludGVyc2VjdHMocCwgcC5uZXh0LCBhLCBiKSkgeyByZXR1cm4gdHJ1ZTsgfVxyXG5cdFx0cCA9IHAubmV4dDtcclxuXHJcblx0fSB3aGlsZSAocCAhPT0gYSk7XHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxuXHJcbn1cclxuXHJcbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpcyBsb2NhbGx5IGluc2lkZSB0aGUgcG9seWdvblxyXG5mdW5jdGlvbiBsb2NhbGx5SW5zaWRlKGEsIGIpIHtcclxuXHJcblx0cmV0dXJuIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpIDwgMCA/XHJcblx0XHRhcmVhKGEsIGIsIGEubmV4dCkgPj0gMCAmJiBhcmVhKGEsIGEucHJldiwgYikgPj0gMCA6XHJcblx0XHRhcmVhKGEsIGIsIGEucHJldikgPCAwIHx8IGFyZWEoYSwgYS5uZXh0LCBiKSA8IDA7XHJcblxyXG59XHJcblxyXG4vLyBjaGVjayBpZiB0aGUgbWlkZGxlIHBvaW50IG9mIGEgcG9seWdvbiBkaWFnb25hbCBpcyBpbnNpZGUgdGhlIHBvbHlnb25cclxuZnVuY3Rpb24gbWlkZGxlSW5zaWRlKGEsIGIpIHtcclxuXHJcblx0dmFyIHAgPSBhLFxyXG5cdFx0aW5zaWRlID0gZmFsc2UsXHJcblx0XHRweCA9IChhLnggKyBiLngpIC8gMixcclxuXHRcdHB5ID0gKGEueSArIGIueSkgLyAyO1xyXG5cdGRvIHtcclxuXHJcblx0XHRpZiAoKChwLnkgPiBweSkgIT09IChwLm5leHQueSA+IHB5KSkgJiYgcC5uZXh0LnkgIT09IHAueSAmJlxyXG5cdFx0XHQocHggPCAocC5uZXh0LnggLSBwLngpICogKHB5IC0gcC55KSAvIChwLm5leHQueSAtIHAueSkgKyBwLngpKSB7IGluc2lkZSA9ICFpbnNpZGU7IH1cclxuXHRcdHAgPSBwLm5leHQ7XHJcblxyXG5cdH0gd2hpbGUgKHAgIT09IGEpO1xyXG5cclxuXHRyZXR1cm4gaW5zaWRlO1xyXG5cclxufVxyXG5cclxuLy8gbGluayB0d28gcG9seWdvbiB2ZXJ0aWNlcyB3aXRoIGEgYnJpZGdlOyBpZiB0aGUgdmVydGljZXMgYmVsb25nIHRvIHRoZSBzYW1lIHJpbmcsIGl0IHNwbGl0cyBwb2x5Z29uIGludG8gdHdvO1xyXG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcclxuZnVuY3Rpb24gc3BsaXRQb2x5Z29uKGEsIGIpIHtcclxuXHJcblx0dmFyIGEyID0gbmV3IE5vZGUoYS5pLCBhLngsIGEueSksXHJcblx0XHRiMiA9IG5ldyBOb2RlKGIuaSwgYi54LCBiLnkpLFxyXG5cdFx0YW4gPSBhLm5leHQsXHJcblx0XHRicCA9IGIucHJldjtcclxuXHJcblx0YS5uZXh0ID0gYjtcclxuXHRiLnByZXYgPSBhO1xyXG5cclxuXHRhMi5uZXh0ID0gYW47XHJcblx0YW4ucHJldiA9IGEyO1xyXG5cclxuXHRiMi5uZXh0ID0gYTI7XHJcblx0YTIucHJldiA9IGIyO1xyXG5cclxuXHRicC5uZXh0ID0gYjI7XHJcblx0YjIucHJldiA9IGJwO1xyXG5cclxuXHRyZXR1cm4gYjI7XHJcblxyXG59XHJcblxyXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxyXG5mdW5jdGlvbiBpbnNlcnROb2RlKGksIHgsIHksIGxhc3QpIHtcclxuXHJcblx0dmFyIHAgPSBuZXcgTm9kZShpLCB4LCB5KTtcclxuXHJcblx0aWYgKCFsYXN0KSB7XHJcblxyXG5cdFx0cC5wcmV2ID0gcDtcclxuXHRcdHAubmV4dCA9IHA7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0cC5uZXh0ID0gbGFzdC5uZXh0O1xyXG5cdFx0cC5wcmV2ID0gbGFzdDtcclxuXHRcdGxhc3QubmV4dC5wcmV2ID0gcDtcclxuXHRcdGxhc3QubmV4dCA9IHA7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVOb2RlKHApIHtcclxuXHJcblx0cC5uZXh0LnByZXYgPSBwLnByZXY7XHJcblx0cC5wcmV2Lm5leHQgPSBwLm5leHQ7XHJcblxyXG5cdGlmIChwLnByZXZaKSB7IHAucHJldloubmV4dFogPSBwLm5leHRaOyB9XHJcblx0aWYgKHAubmV4dFopIHsgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7IH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIE5vZGUoaSwgeCwgeSkge1xyXG5cclxuXHQvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcclxuXHR0aGlzLmkgPSBpO1xyXG5cclxuXHQvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcclxuXHR0aGlzLnggPSB4O1xyXG5cdHRoaXMueSA9IHk7XHJcblxyXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IHZlcnRleCBub2RlcyBpbiBhIHBvbHlnb24gcmluZ1xyXG5cdHRoaXMucHJldiA9IG51bGw7XHJcblx0dGhpcy5uZXh0ID0gbnVsbDtcclxuXHJcblx0Ly8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxyXG5cdHRoaXMueiA9IG51bGw7XHJcblxyXG5cdC8vIHByZXZpb3VzIGFuZCBuZXh0IG5vZGVzIGluIHotb3JkZXJcclxuXHR0aGlzLnByZXZaID0gbnVsbDtcclxuXHR0aGlzLm5leHRaID0gbnVsbDtcclxuXHJcblx0Ly8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcclxuXHR0aGlzLnN0ZWluZXIgPSBmYWxzZTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSB7XHJcblxyXG5cdHZhciBzdW0gPSAwO1xyXG5cdGZvciAodmFyIGkgPSBzdGFydCwgaiA9IGVuZCAtIGRpbTsgaSA8IGVuZDsgaSArPSBkaW0pIHtcclxuXHJcblx0XHRzdW0gKz0gKGRhdGFbal0gLSBkYXRhW2ldKSAqIChkYXRhW2kgKyAxXSArIGRhdGFbaiArIDFdKTtcclxuXHRcdGogPSBpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBzdW07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xyXG4gKi9cclxuXHJcbnZhciBTaGFwZVV0aWxzID0ge1xyXG5cclxuXHQvLyBjYWxjdWxhdGUgYXJlYSBvZiB0aGUgY29udG91ciBwb2x5Z29uXHJcblxyXG5cdGFyZWE6IGZ1bmN0aW9uIChjb250b3VyKSB7XHJcblxyXG5cdFx0dmFyIG4gPSBjb250b3VyLmxlbmd0aDtcclxuXHRcdHZhciBhID0gMC4wO1xyXG5cclxuXHRcdGZvciAodmFyIHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSsrKSB7XHJcblxyXG5cdFx0XHRhICs9IGNvbnRvdXJbcF0ueCAqIGNvbnRvdXJbcV0ueSAtIGNvbnRvdXJbcV0ueCAqIGNvbnRvdXJbcF0ueTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGEgKiAwLjU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGlzQ2xvY2tXaXNlOiBmdW5jdGlvbiAocHRzKSB7XHJcblxyXG5cdFx0cmV0dXJuIFNoYXBlVXRpbHMuYXJlYShwdHMpIDwgMDtcclxuXHJcblx0fSxcclxuXHJcblx0dHJpYW5ndWxhdGVTaGFwZTogZnVuY3Rpb24gKGNvbnRvdXIsIGhvbGVzKSB7XHJcblxyXG5cdFx0dmFyIHZlcnRpY2VzID0gW107IC8vIGZsYXQgYXJyYXkgb2YgdmVydGljZXMgbGlrZSBbIHgwLHkwLCB4MSx5MSwgeDIseTIsIC4uLiBdXHJcblx0XHR2YXIgaG9sZUluZGljZXMgPSBbXTsgLy8gYXJyYXkgb2YgaG9sZSBpbmRpY2VzXHJcblx0XHR2YXIgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cclxuXHJcblx0XHRyZW1vdmVEdXBFbmRQdHMoY29udG91cik7XHJcblx0XHRhZGRDb250b3VyKHZlcnRpY2VzLCBjb250b3VyKTtcclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHZhciBob2xlSW5kZXggPSBjb250b3VyLmxlbmd0aDtcclxuXHJcblx0XHRob2xlcy5mb3JFYWNoKHJlbW92ZUR1cEVuZFB0cyk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0aG9sZUluZGljZXMucHVzaChob2xlSW5kZXgpO1xyXG5cdFx0XHRob2xlSW5kZXggKz0gaG9sZXNbaV0ubGVuZ3RoO1xyXG5cdFx0XHRhZGRDb250b3VyKHZlcnRpY2VzLCBob2xlc1tpXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0dmFyIHRyaWFuZ2xlcyA9IEVhcmN1dC50cmlhbmd1bGF0ZSh2ZXJ0aWNlcywgaG9sZUluZGljZXMpO1xyXG5cclxuXHRcdC8vXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMpIHtcclxuXHJcblx0XHRcdGZhY2VzLnB1c2godHJpYW5nbGVzLnNsaWNlKGksIGkgKyAzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWNlcztcclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUR1cEVuZFB0cyhwb2ludHMpIHtcclxuXHJcblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xyXG5cclxuXHRpZiAobCA+IDIgJiYgcG9pbnRzW2wgLSAxXS5lcXVhbHMocG9pbnRzWzBdKSkge1xyXG5cclxuXHRcdHBvaW50cy5wb3AoKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkQ29udG91cih2ZXJ0aWNlcywgY29udG91cikge1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRvdXIubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHR2ZXJ0aWNlcy5wdXNoKGNvbnRvdXJbaV0ueCk7XHJcblx0XHR2ZXJ0aWNlcy5wdXNoKGNvbnRvdXJbaV0ueSk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqXHJcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqXHJcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXHJcbiAqICBzdGVwczogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgZm9yIHotc2lkZSBleHRydXNpb25zIC8gdXNlZCBmb3Igc3ViZGl2aWRpbmcgc2VnbWVudHMgb2YgZXh0cnVkZSBzcGxpbmUgdG9vXHJcbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gRGVwdGggdG8gZXh0cnVkZSB0aGUgc2hhcGVcclxuICpcclxuICogIGJldmVsRW5hYmxlZDogPGJvb2w+LCAvLyB0dXJuIG9uIGJldmVsXHJcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0aGUgb3JpZ2luYWwgc2hhcGUgYmV2ZWwgZ29lc1xyXG4gKiAgYmV2ZWxTaXplOiA8ZmxvYXQ+LCAvLyBob3cgZmFyIGZyb20gc2hhcGUgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbFxyXG4gKiAgYmV2ZWxPZmZzZXQ6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSBzaGFwZSBvdXRsaW5lIGRvZXMgYmV2ZWwgc3RhcnRcclxuICogIGJldmVsU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgYmV2ZWwgbGF5ZXJzXHJcbiAqXHJcbiAqICBleHRydWRlUGF0aDogPFRIUkVFLkN1cnZlPiAvLyBjdXJ2ZSB0byBleHRydWRlIHNoYXBlIGFsb25nXHJcbiAqXHJcbiAqICBVVkdlbmVyYXRvcjogPE9iamVjdD4gLy8gb2JqZWN0IHRoYXQgcHJvdmlkZXMgVVYgZ2VuZXJhdG9yIGZ1bmN0aW9uc1xyXG4gKlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuLy8gRXh0cnVkZUdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBFeHRydWRlR2VvbWV0cnkoc2hhcGVzLCBvcHRpb25zKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdFeHRydWRlR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRzaGFwZXM6IHNoYXBlcyxcclxuXHRcdG9wdGlvbnM6IG9wdGlvbnNcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KHNoYXBlcywgb3B0aW9ucykpO1xyXG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xyXG5cclxufVxyXG5cclxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlKTtcclxuRXh0cnVkZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4dHJ1ZGVHZW9tZXRyeTtcclxuXHJcbkV4dHJ1ZGVHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XHJcblx0dmFyIG9wdGlvbnMgPSB0aGlzLnBhcmFtZXRlcnMub3B0aW9ucztcclxuXHJcblx0cmV0dXJuIHRvSlNPTihzaGFwZXMsIG9wdGlvbnMsIGRhdGEpO1xyXG5cclxufTtcclxuXHJcbi8vIEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KHNoYXBlcywgb3B0aW9ucykge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnRXh0cnVkZUJ1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0c2hhcGVzOiBzaGFwZXMsXHJcblx0XHRvcHRpb25zOiBvcHRpb25zXHJcblx0fTtcclxuXHJcblx0c2hhcGVzID0gQXJyYXkuaXNBcnJheShzaGFwZXMpID8gc2hhcGVzIDogW3NoYXBlc107XHJcblxyXG5cdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdHZhciB2ZXJ0aWNlc0FycmF5ID0gW107XHJcblx0dmFyIHV2QXJyYXkgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0dmFyIHNoYXBlID0gc2hhcGVzW2ldO1xyXG5cdFx0YWRkU2hhcGUoc2hhcGUpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzQXJyYXksIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dkFycmF5LCAyKSk7XHJcblxyXG5cdHRoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuXHJcblx0Ly8gZnVuY3Rpb25zXHJcblxyXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKHNoYXBlKSB7XHJcblxyXG5cdFx0dmFyIHBsYWNlaG9sZGVyID0gW107XHJcblxyXG5cdFx0Ly8gb3B0aW9uc1xyXG5cclxuXHRcdHZhciBjdXJ2ZVNlZ21lbnRzID0gb3B0aW9ucy5jdXJ2ZVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmN1cnZlU2VnbWVudHMgOiAxMjtcclxuXHRcdHZhciBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xyXG5cdFx0dmFyIGRlcHRoID0gb3B0aW9ucy5kZXB0aCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aCA6IDEwMDtcclxuXHJcblx0XHR2YXIgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcclxuXHRcdHZhciBiZXZlbFRoaWNrbmVzcyA9IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxUaGlja25lc3MgOiA2O1xyXG5cdFx0dmFyIGJldmVsU2l6ZSA9IG9wdGlvbnMuYmV2ZWxTaXplICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2l6ZSA6IGJldmVsVGhpY2tuZXNzIC0gMjtcclxuXHRcdHZhciBiZXZlbE9mZnNldCA9IG9wdGlvbnMuYmV2ZWxPZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxPZmZzZXQgOiAwO1xyXG5cdFx0dmFyIGJldmVsU2VnbWVudHMgPSBvcHRpb25zLmJldmVsU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTZWdtZW50cyA6IDM7XHJcblxyXG5cdFx0dmFyIGV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aDtcclxuXHJcblx0XHR2YXIgdXZnZW4gPSBvcHRpb25zLlVWR2VuZXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLlVWR2VuZXJhdG9yIDogV29ybGRVVkdlbmVyYXRvcjtcclxuXHJcblx0XHQvLyBkZXByZWNhdGVkIG9wdGlvbnNcclxuXHJcblx0XHRpZiAob3B0aW9ucy5hbW91bnQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IGFtb3VudCBoYXMgYmVlbiByZW5hbWVkIHRvIGRlcHRoLicpO1xyXG5cdFx0XHRkZXB0aCA9IG9wdGlvbnMuYW1vdW50O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL1xyXG5cclxuXHRcdHZhciBleHRydWRlUHRzLCBleHRydWRlQnlQYXRoID0gZmFsc2U7XHJcblx0XHR2YXIgc3BsaW5lVHViZSwgYmlub3JtYWwsIG5vcm1hbCwgcG9zaXRpb24yO1xyXG5cclxuXHRcdGlmIChleHRydWRlUGF0aCkge1xyXG5cclxuXHRcdFx0ZXh0cnVkZVB0cyA9IGV4dHJ1ZGVQYXRoLmdldFNwYWNlZFBvaW50cyhzdGVwcyk7XHJcblxyXG5cdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcclxuXHRcdFx0YmV2ZWxFbmFibGVkID0gZmFsc2U7IC8vIGJldmVscyBub3Qgc3VwcG9ydGVkIGZvciBwYXRoIGV4dHJ1c2lvblxyXG5cclxuXHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xyXG5cclxuXHRcdFx0Ly8gVE9ETzEgLSBoYXZlIGEgLmlzQ2xvc2VkIGluIHNwbGluZT9cclxuXHJcblx0XHRcdHNwbGluZVR1YmUgPSBleHRydWRlUGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKHN0ZXBzLCBmYWxzZSk7XHJcblxyXG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzcGxpbmVUdWJlLCAnc3BsaW5lVHViZScsIHNwbGluZVR1YmUubm9ybWFscy5sZW5ndGgsICdzdGVwcycsIHN0ZXBzLCAnZXh0cnVkZVB0cycsIGV4dHJ1ZGVQdHMubGVuZ3RoKTtcclxuXHJcblx0XHRcdGJpbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdFx0bm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gU2FmZWd1YXJkcyBpZiBiZXZlbHMgYXJlIG5vdCBlbmFibGVkXHJcblxyXG5cdFx0aWYgKCFiZXZlbEVuYWJsZWQpIHtcclxuXHJcblx0XHRcdGJldmVsU2VnbWVudHMgPSAwO1xyXG5cdFx0XHRiZXZlbFRoaWNrbmVzcyA9IDA7XHJcblx0XHRcdGJldmVsU2l6ZSA9IDA7XHJcblx0XHRcdGJldmVsT2Zmc2V0ID0gMDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXHJcblxyXG5cdFx0dmFyIGFob2xlLCBoLCBobDsgLy8gbG9vcGluZyBvZiBob2xlc1xyXG5cclxuXHRcdHZhciBzaGFwZVBvaW50cyA9IHNoYXBlLmV4dHJhY3RQb2ludHMoY3VydmVTZWdtZW50cyk7XHJcblxyXG5cdFx0dmFyIHZlcnRpY2VzID0gc2hhcGVQb2ludHMuc2hhcGU7XHJcblx0XHR2YXIgaG9sZXMgPSBzaGFwZVBvaW50cy5ob2xlcztcclxuXHJcblx0XHR2YXIgcmV2ZXJzZSA9ICFTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKHZlcnRpY2VzKTtcclxuXHJcblx0XHRpZiAocmV2ZXJzZSkge1xyXG5cclxuXHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5yZXZlcnNlKCk7XHJcblxyXG5cdFx0XHQvLyBNYXliZSB3ZSBzaG91bGQgYWxzbyBjaGVjayBpZiBob2xlcyBhcmUgaW4gdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiwganVzdCB0byBiZSBzYWZlIC4uLlxyXG5cclxuXHRcdFx0Zm9yIChoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCsrKSB7XHJcblxyXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbaF07XHJcblxyXG5cdFx0XHRcdGlmIChTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKGFob2xlKSkge1xyXG5cclxuXHRcdFx0XHRcdGhvbGVzW2hdID0gYWhvbGUucmV2ZXJzZSgpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHR2YXIgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUodmVydGljZXMsIGhvbGVzKTtcclxuXHJcblx0XHQvKiBWZXJ0aWNlcyAqL1xyXG5cclxuXHRcdHZhciBjb250b3VyID0gdmVydGljZXM7IC8vIHZlcnRpY2VzIGhhcyBhbGwgcG9pbnRzIGJ1dCBjb250b3VyIGhhcyBvbmx5IHBvaW50cyBvZiBjaXJjdW1mZXJlbmNlXHJcblxyXG5cdFx0Zm9yIChoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCsrKSB7XHJcblxyXG5cdFx0XHRhaG9sZSA9IGhvbGVzW2hdO1xyXG5cclxuXHRcdFx0dmVydGljZXMgPSB2ZXJ0aWNlcy5jb25jYXQoYWhvbGUpO1xyXG5cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0ZnVuY3Rpb24gc2NhbGVQdDIocHQsIHZlYywgc2l6ZSkge1xyXG5cclxuXHRcdFx0aWYgKCF2ZWMpIHsgY29uc29sZS5lcnJvcihcIlRIUkVFLkV4dHJ1ZGVHZW9tZXRyeTogdmVjIGRvZXMgbm90IGV4aXN0XCIpOyB9XHJcblxyXG5cdFx0XHRyZXR1cm4gdmVjLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoc2l6ZSkuYWRkKHB0KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGIsIGJzLCB0LCB6LFxyXG5cdFx0XHR2ZXJ0LCB2bGVuID0gdmVydGljZXMubGVuZ3RoLFxyXG5cdFx0XHRmYWNlLCBmbGVuID0gZmFjZXMubGVuZ3RoO1xyXG5cclxuXHJcblx0XHQvLyBGaW5kIGRpcmVjdGlvbnMgZm9yIHBvaW50IG1vdmVtZW50XHJcblxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldEJldmVsVmVjKGluUHQsIGluUHJldiwgaW5OZXh0KSB7XHJcblxyXG5cdFx0XHQvLyBjb21wdXRlcyBmb3IgaW5QdCB0aGUgY29ycmVzcG9uZGluZyBwb2ludCBpblB0JyBvbiBhIG5ldyBjb250b3VyXHJcblx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcclxuXHRcdFx0Ly8gaWYgd2Ugd2FsayBhbG9uZyBjb250b3VyIGNsb2Nrd2lzZSwgdGhpcyBuZXcgY29udG91ciBpcyBvdXRzaWRlIHRoZSBvbGQgb25lXHJcblx0XHRcdC8vXHJcblx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXHJcblx0XHRcdC8vICBhZGphY2VudCBlZGdlcyBvZiBpblB0IGF0IGEgZGlzdGFuY2Ugb2YgMSB1bml0IG9uIHRoZSBsZWZ0IHNpZGUuXHJcblxyXG5cdFx0XHR2YXIgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdFxyXG5cclxuXHRcdFx0Ly8gZ29vZCByZWFkaW5nIGZvciBnZW9tZXRyeSBhbGdvcml0aG1zIChoZXJlOiBsaW5lLWxpbmUgaW50ZXJzZWN0aW9uKVxyXG5cdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxyXG5cclxuXHRcdFx0dmFyIHZfcHJldl94ID0gaW5QdC54IC0gaW5QcmV2LngsXHJcblx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcclxuXHRcdFx0dmFyIHZfbmV4dF94ID0gaW5OZXh0LnggLSBpblB0LngsXHJcblx0XHRcdFx0dl9uZXh0X3kgPSBpbk5leHQueSAtIGluUHQueTtcclxuXHJcblx0XHRcdHZhciB2X3ByZXZfbGVuc3EgPSAodl9wcmV2X3ggKiB2X3ByZXZfeCArIHZfcHJldl95ICogdl9wcmV2X3kpO1xyXG5cclxuXHRcdFx0Ly8gY2hlY2sgZm9yIGNvbGxpbmVhciBlZGdlc1xyXG5cdFx0XHR2YXIgY29sbGluZWFyMCA9ICh2X3ByZXZfeCAqIHZfbmV4dF95IC0gdl9wcmV2X3kgKiB2X25leHRfeCk7XHJcblxyXG5cdFx0XHRpZiAoTWF0aC5hYnMoY29sbGluZWFyMCkgPiBOdW1iZXIuRVBTSUxPTikge1xyXG5cclxuXHRcdFx0XHQvLyBub3QgY29sbGluZWFyXHJcblxyXG5cdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xyXG5cclxuXHRcdFx0XHR2YXIgdl9wcmV2X2xlbiA9IE1hdGguc3FydCh2X3ByZXZfbGVuc3EpO1xyXG5cdFx0XHRcdHZhciB2X25leHRfbGVuID0gTWF0aC5zcXJ0KHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95KTtcclxuXHJcblx0XHRcdFx0Ly8gc2hpZnQgYWRqYWNlbnQgcG9pbnRzIGJ5IHVuaXQgdmVjdG9ycyB0byB0aGUgbGVmdFxyXG5cclxuXHRcdFx0XHR2YXIgcHRQcmV2U2hpZnRfeCA9IChpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbik7XHJcblx0XHRcdFx0dmFyIHB0UHJldlNoaWZ0X3kgPSAoaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4pO1xyXG5cclxuXHRcdFx0XHR2YXIgcHROZXh0U2hpZnRfeCA9IChpbk5leHQueCAtIHZfbmV4dF95IC8gdl9uZXh0X2xlbik7XHJcblx0XHRcdFx0dmFyIHB0TmV4dFNoaWZ0X3kgPSAoaW5OZXh0LnkgKyB2X25leHRfeCAvIHZfbmV4dF9sZW4pO1xyXG5cclxuXHRcdFx0XHQvLyBzY2FsaW5nIGZhY3RvciBmb3Igdl9wcmV2IHRvIGludGVyc2VjdGlvbiBwb2ludFxyXG5cclxuXHRcdFx0XHR2YXIgc2YgPSAoKHB0TmV4dFNoaWZ0X3ggLSBwdFByZXZTaGlmdF94KSAqIHZfbmV4dF95IC1cclxuXHRcdFx0XHRcdChwdE5leHRTaGlmdF95IC0gcHRQcmV2U2hpZnRfeSkgKiB2X25leHRfeCkgL1xyXG5cdFx0XHRcdFx0KHZfcHJldl94ICogdl9uZXh0X3kgLSB2X3ByZXZfeSAqIHZfbmV4dF94KTtcclxuXHJcblx0XHRcdFx0Ly8gdmVjdG9yIGZyb20gaW5QdCB0byBpbnRlcnNlY3Rpb24gcG9pbnRcclxuXHJcblx0XHRcdFx0dl90cmFuc194ID0gKHB0UHJldlNoaWZ0X3ggKyB2X3ByZXZfeCAqIHNmIC0gaW5QdC54KTtcclxuXHRcdFx0XHR2X3RyYW5zX3kgPSAocHRQcmV2U2hpZnRfeSArIHZfcHJldl95ICogc2YgLSBpblB0LnkpO1xyXG5cclxuXHRcdFx0XHQvLyBEb24ndCBub3JtYWxpemUhLCBvdGhlcndpc2Ugc2hhcnAgY29ybmVycyBiZWNvbWUgdWdseVxyXG5cdFx0XHRcdC8vICBidXQgcHJldmVudCBjcmF6eSBzcGlrZXNcclxuXHRcdFx0XHR2YXIgdl90cmFuc19sZW5zcSA9ICh2X3RyYW5zX3ggKiB2X3RyYW5zX3ggKyB2X3RyYW5zX3kgKiB2X3RyYW5zX3kpO1xyXG5cdFx0XHRcdGlmICh2X3RyYW5zX2xlbnNxIDw9IDIpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gbmV3IFZlY3RvcjIodl90cmFuc194LCB2X3RyYW5zX3kpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCh2X3RyYW5zX2xlbnNxIC8gMik7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIGhhbmRsZSBzcGVjaWFsIGNhc2Ugb2YgY29sbGluZWFyIGVkZ2VzXHJcblxyXG5cdFx0XHRcdHZhciBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcclxuXHRcdFx0XHRpZiAodl9wcmV2X3ggPiBOdW1iZXIuRVBTSUxPTikge1xyXG5cclxuXHRcdFx0XHRcdGlmICh2X25leHRfeCA+IE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRpZiAodl9wcmV2X3ggPCAtIE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodl9uZXh0X3ggPCAtIE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChNYXRoLnNpZ24odl9wcmV2X3kpID09PSBNYXRoLnNpZ24odl9uZXh0X3kpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbl9lcSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChkaXJlY3Rpb25fZXEpIHtcclxuXHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcIldhcm5pbmc6IGxpbmVzIGFyZSBhIHN0cmFpZ2h0IHNlcXVlbmNlXCIpO1xyXG5cdFx0XHRcdFx0dl90cmFuc194ID0gLSB2X3ByZXZfeTtcclxuXHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl94O1xyXG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KHZfcHJldl9sZW5zcSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzcGlrZVwiKTtcclxuXHRcdFx0XHRcdHZfdHJhbnNfeCA9IHZfcHJldl94O1xyXG5cdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XHJcblx0XHRcdFx0XHRzaHJpbmtfYnkgPSBNYXRoLnNxcnQodl9wcmV2X2xlbnNxIC8gMik7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMih2X3RyYW5zX3ggLyBzaHJpbmtfYnksIHZfdHJhbnNfeSAvIHNocmlua19ieSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHR2YXIgY29udG91ck1vdmVtZW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSsrLCBqKyssIGsrKykge1xyXG5cclxuXHRcdFx0aWYgKGogPT09IGlsKSB7IGogPSAwOyB9XHJcblx0XHRcdGlmIChrID09PSBpbCkgeyBrID0gMDsgfVxyXG5cclxuXHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxyXG5cdFx0XHQvLyBjb25zb2xlLmxvZygnaSxqLGsnLCBpLCBqICwgaylcclxuXHJcblx0XHRcdGNvbnRvdXJNb3ZlbWVudHNbaV0gPSBnZXRCZXZlbFZlYyhjb250b3VyW2ldLCBjb250b3VyW2pdLCBjb250b3VyW2tdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGhvbGVzTW92ZW1lbnRzID0gW10sXHJcblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcclxuXHJcblx0XHRmb3IgKGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoKyspIHtcclxuXHJcblx0XHRcdGFob2xlID0gaG9sZXNbaF07XHJcblxyXG5cdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gW107XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkrKywgaisrLCBrKyspIHtcclxuXHJcblx0XHRcdFx0aWYgKGogPT09IGlsKSB7IGogPSAwOyB9XHJcblx0XHRcdFx0aWYgKGsgPT09IGlsKSB7IGsgPSAwOyB9XHJcblxyXG5cdFx0XHRcdC8vICAoaiktLS0oaSktLS0oaylcclxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzW2ldID0gZ2V0QmV2ZWxWZWMoYWhvbGVbaV0sIGFob2xlW2pdLCBhaG9sZVtrXSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRob2xlc01vdmVtZW50cy5wdXNoKG9uZUhvbGVNb3ZlbWVudHMpO1xyXG5cdFx0XHR2ZXJ0aWNlc01vdmVtZW50cyA9IHZlcnRpY2VzTW92ZW1lbnRzLmNvbmNhdChvbmVIb2xlTW92ZW1lbnRzKTtcclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdC8vIExvb3AgYmV2ZWxTZWdtZW50cywgMSBmb3IgdGhlIGZyb250LCAxIGZvciB0aGUgYmFja1xyXG5cclxuXHRcdGZvciAoYiA9IDA7IGIgPCBiZXZlbFNlZ21lbnRzOyBiKyspIHtcclxuXHJcblx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xyXG5cclxuXHRcdFx0dCA9IGIgLyBiZXZlbFNlZ21lbnRzO1xyXG5cdFx0XHR6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyh0ICogTWF0aC5QSSAvIDIpO1xyXG5cdFx0XHRicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKHQgKiBNYXRoLlBJIC8gMikgKyBiZXZlbE9mZnNldDtcclxuXHJcblx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoY29udG91cltpXSwgY29udG91ck1vdmVtZW50c1tpXSwgYnMpO1xyXG5cclxuXHRcdFx0XHR2KHZlcnQueCwgdmVydC55LCAtIHopO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gZXhwYW5kIGhvbGVzXHJcblxyXG5cdFx0XHRmb3IgKGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoKyspIHtcclxuXHJcblx0XHRcdFx0YWhvbGUgPSBob2xlc1toXTtcclxuXHRcdFx0XHRvbmVIb2xlTW92ZW1lbnRzID0gaG9sZXNNb3ZlbWVudHNbaF07XHJcblxyXG5cdFx0XHRcdGZvciAoaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdHZlcnQgPSBzY2FsZVB0MihhaG9sZVtpXSwgb25lSG9sZU1vdmVtZW50c1tpXSwgYnMpO1xyXG5cclxuXHRcdFx0XHRcdHYodmVydC54LCB2ZXJ0LnksIC0geik7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0YnMgPSBiZXZlbFNpemUgKyBiZXZlbE9mZnNldDtcclxuXHJcblx0XHQvLyBCYWNrIGZhY2luZyB2ZXJ0aWNlc1xyXG5cclxuXHRcdGZvciAoaSA9IDA7IGkgPCB2bGVuOyBpKyspIHtcclxuXHJcblx0XHRcdHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0Mih2ZXJ0aWNlc1tpXSwgdmVydGljZXNNb3ZlbWVudHNbaV0sIGJzKSA6IHZlcnRpY2VzW2ldO1xyXG5cclxuXHRcdFx0aWYgKCFleHRydWRlQnlQYXRoKSB7XHJcblxyXG5cdFx0XHRcdHYodmVydC54LCB2ZXJ0LnksIDApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyAwIF0ueSwgZXh0cnVkZVB0c1sgMCBdLnggKTtcclxuXHJcblx0XHRcdFx0bm9ybWFsLmNvcHkoc3BsaW5lVHViZS5ub3JtYWxzWzBdKS5tdWx0aXBseVNjYWxhcih2ZXJ0LngpO1xyXG5cdFx0XHRcdGJpbm9ybWFsLmNvcHkoc3BsaW5lVHViZS5iaW5vcm1hbHNbMF0pLm11bHRpcGx5U2NhbGFyKHZlcnQueSk7XHJcblxyXG5cdFx0XHRcdHBvc2l0aW9uMi5jb3B5KGV4dHJ1ZGVQdHNbMF0pLmFkZChub3JtYWwpLmFkZChiaW5vcm1hbCk7XHJcblxyXG5cdFx0XHRcdHYocG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueik7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIEFkZCBzdGVwcGVkIHZlcnRpY2VzLi4uXHJcblx0XHQvLyBJbmNsdWRpbmcgZnJvbnQgZmFjaW5nIHZlcnRpY2VzXHJcblxyXG5cdFx0dmFyIHM7XHJcblxyXG5cdFx0Zm9yIChzID0gMTsgcyA8PSBzdGVwczsgcysrKSB7XHJcblxyXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgdmxlbjsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHZlcnQgPSBiZXZlbEVuYWJsZWQgPyBzY2FsZVB0Mih2ZXJ0aWNlc1tpXSwgdmVydGljZXNNb3ZlbWVudHNbaV0sIGJzKSA6IHZlcnRpY2VzW2ldO1xyXG5cclxuXHRcdFx0XHRpZiAoIWV4dHJ1ZGVCeVBhdGgpIHtcclxuXHJcblx0XHRcdFx0XHR2KHZlcnQueCwgdmVydC55LCBkZXB0aCAvIHN0ZXBzICogcyk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gdiggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzIC0gMSBdLnksIGV4dHJ1ZGVQdHNbIHMgLSAxIF0ueCApO1xyXG5cclxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KHNwbGluZVR1YmUubm9ybWFsc1tzXSkubXVsdGlwbHlTY2FsYXIodmVydC54KTtcclxuXHRcdFx0XHRcdGJpbm9ybWFsLmNvcHkoc3BsaW5lVHViZS5iaW5vcm1hbHNbc10pLm11bHRpcGx5U2NhbGFyKHZlcnQueSk7XHJcblxyXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoZXh0cnVkZVB0c1tzXSkuYWRkKG5vcm1hbCkuYWRkKGJpbm9ybWFsKTtcclxuXHJcblx0XHRcdFx0XHR2KHBvc2l0aW9uMi54LCBwb3NpdGlvbjIueSwgcG9zaXRpb24yLnopO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHJcblx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXHJcblxyXG5cdFx0Ly9mb3IgKCBiID0gMTsgYiA8PSBiZXZlbFNlZ21lbnRzOyBiICsrICkge1xyXG5cdFx0Zm9yIChiID0gYmV2ZWxTZWdtZW50cyAtIDE7IGIgPj0gMDsgYi0tKSB7XHJcblxyXG5cdFx0XHR0ID0gYiAvIGJldmVsU2VnbWVudHM7XHJcblx0XHRcdHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKHQgKiBNYXRoLlBJIC8gMik7XHJcblx0XHRcdGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4odCAqIE1hdGguUEkgLyAyKSArIGJldmVsT2Zmc2V0O1xyXG5cclxuXHRcdFx0Ly8gY29udHJhY3Qgc2hhcGVcclxuXHJcblx0XHRcdGZvciAoaSA9IDAsIGlsID0gY29udG91ci5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHZlcnQgPSBzY2FsZVB0Mihjb250b3VyW2ldLCBjb250b3VyTW92ZW1lbnRzW2ldLCBicyk7XHJcblx0XHRcdFx0dih2ZXJ0LngsIHZlcnQueSwgZGVwdGggKyB6KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGV4cGFuZCBob2xlc1xyXG5cclxuXHRcdFx0Zm9yIChoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCsrKSB7XHJcblxyXG5cdFx0XHRcdGFob2xlID0gaG9sZXNbaF07XHJcblx0XHRcdFx0b25lSG9sZU1vdmVtZW50cyA9IGhvbGVzTW92ZW1lbnRzW2hdO1xyXG5cclxuXHRcdFx0XHRmb3IgKGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2ZXJ0ID0gc2NhbGVQdDIoYWhvbGVbaV0sIG9uZUhvbGVNb3ZlbWVudHNbaV0sIGJzKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIWV4dHJ1ZGVCeVBhdGgpIHtcclxuXHJcblx0XHRcdFx0XHRcdHYodmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeik7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHYodmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzW3N0ZXBzIC0gMV0ueSwgZXh0cnVkZVB0c1tzdGVwcyAtIDFdLnggKyB6KTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0LyogRmFjZXMgKi9cclxuXHJcblx0XHQvLyBUb3AgYW5kIGJvdHRvbSBmYWNlc1xyXG5cclxuXHRcdGJ1aWxkTGlkRmFjZXMoKTtcclxuXHJcblx0XHQvLyBTaWRlcyBmYWNlc1xyXG5cclxuXHRcdGJ1aWxkU2lkZUZhY2VzKCk7XHJcblxyXG5cclxuXHRcdC8vLy8vICBJbnRlcm5hbCBmdW5jdGlvbnNcclxuXHJcblx0XHRmdW5jdGlvbiBidWlsZExpZEZhY2VzKCkge1xyXG5cclxuXHRcdFx0dmFyIHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xyXG5cclxuXHRcdFx0aWYgKGJldmVsRW5hYmxlZCkge1xyXG5cclxuXHRcdFx0XHR2YXIgbGF5ZXIgPSAwOyAvLyBzdGVwcyArIDFcclxuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gdmxlbiAqIGxheWVyO1xyXG5cclxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcclxuXHJcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGZsZW47IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdGZhY2UgPSBmYWNlc1tpXTtcclxuXHRcdFx0XHRcdGYzKGZhY2VbMl0gKyBvZmZzZXQsIGZhY2VbMV0gKyBvZmZzZXQsIGZhY2VbMF0gKyBvZmZzZXQpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGxheWVyID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcclxuXHRcdFx0XHRvZmZzZXQgPSB2bGVuICogbGF5ZXI7XHJcblxyXG5cdFx0XHRcdC8vIFRvcCBmYWNlc1xyXG5cclxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZmxlbjsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzW2ldO1xyXG5cdFx0XHRcdFx0ZjMoZmFjZVswXSArIG9mZnNldCwgZmFjZVsxXSArIG9mZnNldCwgZmFjZVsyXSArIG9mZnNldCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIEJvdHRvbSBmYWNlc1xyXG5cclxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZmxlbjsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0ZmFjZSA9IGZhY2VzW2ldO1xyXG5cdFx0XHRcdFx0ZjMoZmFjZVsyXSwgZmFjZVsxXSwgZmFjZVswXSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gVG9wIGZhY2VzXHJcblxyXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBmbGVuOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbaV07XHJcblx0XHRcdFx0XHRmMyhmYWNlWzBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWzFdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWzJdICsgdmxlbiAqIHN0ZXBzKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ3JlYXRlIGZhY2VzIGZvciB0aGUgei1zaWRlcyBvZiB0aGUgc2hhcGVcclxuXHJcblx0XHRmdW5jdGlvbiBidWlsZFNpZGVGYWNlcygpIHtcclxuXHJcblx0XHRcdHZhciBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcclxuXHRcdFx0dmFyIGxheWVyb2Zmc2V0ID0gMDtcclxuXHRcdFx0c2lkZXdhbGxzKGNvbnRvdXIsIGxheWVyb2Zmc2V0KTtcclxuXHRcdFx0bGF5ZXJvZmZzZXQgKz0gY29udG91ci5sZW5ndGg7XHJcblxyXG5cdFx0XHRmb3IgKGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoKyspIHtcclxuXHJcblx0XHRcdFx0YWhvbGUgPSBob2xlc1toXTtcclxuXHRcdFx0XHRzaWRld2FsbHMoYWhvbGUsIGxheWVyb2Zmc2V0KTtcclxuXHJcblx0XHRcdFx0Ly8sIHRydWVcclxuXHRcdFx0XHRsYXllcm9mZnNldCArPSBhaG9sZS5sZW5ndGg7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0c2NvcGUuYWRkR3JvdXAoc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAxKTtcclxuXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIHNpZGV3YWxscyhjb250b3VyLCBsYXllcm9mZnNldCkge1xyXG5cclxuXHRcdFx0dmFyIGosIGs7XHJcblx0XHRcdGkgPSBjb250b3VyLmxlbmd0aDtcclxuXHJcblx0XHRcdHdoaWxlICgtLWkgPj0gMCkge1xyXG5cclxuXHRcdFx0XHRqID0gaTtcclxuXHRcdFx0XHRrID0gaSAtIDE7XHJcblx0XHRcdFx0aWYgKGsgPCAwKSB7IGsgPSBjb250b3VyLmxlbmd0aCAtIDE7IH1cclxuXHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnYicsIGksaiwgaS0xLCBrLHZlcnRpY2VzLmxlbmd0aCk7XHJcblxyXG5cdFx0XHRcdHZhciBzID0gMCxcclxuXHRcdFx0XHRcdHNsID0gc3RlcHMgKyBiZXZlbFNlZ21lbnRzICogMjtcclxuXHJcblx0XHRcdFx0Zm9yIChzID0gMDsgcyA8IHNsOyBzKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgc2xlbjEgPSB2bGVuICogcztcclxuXHRcdFx0XHRcdHZhciBzbGVuMiA9IHZsZW4gKiAocyArIDEpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBhID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjEsXHJcblx0XHRcdFx0XHRcdGIgPSBsYXllcm9mZnNldCArIGsgKyBzbGVuMSxcclxuXHRcdFx0XHRcdFx0YyA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4yLFxyXG5cdFx0XHRcdFx0XHRkID0gbGF5ZXJvZmZzZXQgKyBqICsgc2xlbjI7XHJcblxyXG5cdFx0XHRcdFx0ZjQoYSwgYiwgYywgZCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gdih4LCB5LCB6KSB7XHJcblxyXG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKHgpO1xyXG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKHkpO1xyXG5cdFx0XHRwbGFjZWhvbGRlci5wdXNoKHopO1xyXG5cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0ZnVuY3Rpb24gZjMoYSwgYiwgYykge1xyXG5cclxuXHRcdFx0YWRkVmVydGV4KGEpO1xyXG5cdFx0XHRhZGRWZXJ0ZXgoYik7XHJcblx0XHRcdGFkZFZlcnRleChjKTtcclxuXHJcblx0XHRcdHZhciBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XHJcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVRvcFVWKHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxKTtcclxuXHJcblx0XHRcdGFkZFVWKHV2c1swXSk7XHJcblx0XHRcdGFkZFVWKHV2c1sxXSk7XHJcblx0XHRcdGFkZFVWKHV2c1syXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGY0KGEsIGIsIGMsIGQpIHtcclxuXHJcblx0XHRcdGFkZFZlcnRleChhKTtcclxuXHRcdFx0YWRkVmVydGV4KGIpO1xyXG5cdFx0XHRhZGRWZXJ0ZXgoZCk7XHJcblxyXG5cdFx0XHRhZGRWZXJ0ZXgoYik7XHJcblx0XHRcdGFkZFZlcnRleChjKTtcclxuXHRcdFx0YWRkVmVydGV4KGQpO1xyXG5cclxuXHJcblx0XHRcdHZhciBuZXh0SW5kZXggPSB2ZXJ0aWNlc0FycmF5Lmxlbmd0aCAvIDM7XHJcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVNpZGVXYWxsVVYoc2NvcGUsIHZlcnRpY2VzQXJyYXksIG5leHRJbmRleCAtIDYsIG5leHRJbmRleCAtIDMsIG5leHRJbmRleCAtIDIsIG5leHRJbmRleCAtIDEpO1xyXG5cclxuXHRcdFx0YWRkVVYodXZzWzBdKTtcclxuXHRcdFx0YWRkVVYodXZzWzFdKTtcclxuXHRcdFx0YWRkVVYodXZzWzNdKTtcclxuXHJcblx0XHRcdGFkZFVWKHV2c1sxXSk7XHJcblx0XHRcdGFkZFVWKHV2c1syXSk7XHJcblx0XHRcdGFkZFVWKHV2c1szXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZFZlcnRleChpbmRleCkge1xyXG5cclxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKHBsYWNlaG9sZGVyW2luZGV4ICogMyArIDBdKTtcclxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKHBsYWNlaG9sZGVyW2luZGV4ICogMyArIDFdKTtcclxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKHBsYWNlaG9sZGVyW2luZGV4ICogMyArIDJdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGZ1bmN0aW9uIGFkZFVWKHZlY3RvcjIpIHtcclxuXHJcblx0XHRcdHV2QXJyYXkucHVzaCh2ZWN0b3IyLngpO1xyXG5cdFx0XHR1dkFycmF5LnB1c2godmVjdG9yMi55KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7XHJcblxyXG5FeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xyXG5cdHZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XHJcblxyXG5cdHJldHVybiB0b0pTT04oc2hhcGVzLCBvcHRpb25zLCBkYXRhKTtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxudmFyIFdvcmxkVVZHZW5lcmF0b3IgPSB7XHJcblxyXG5cdGdlbmVyYXRlVG9wVVY6IGZ1bmN0aW9uIChnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMpIHtcclxuXHJcblx0XHR2YXIgYV94ID0gdmVydGljZXNbaW5kZXhBICogM107XHJcblx0XHR2YXIgYV95ID0gdmVydGljZXNbaW5kZXhBICogMyArIDFdO1xyXG5cdFx0dmFyIGJfeCA9IHZlcnRpY2VzW2luZGV4QiAqIDNdO1xyXG5cdFx0dmFyIGJfeSA9IHZlcnRpY2VzW2luZGV4QiAqIDMgKyAxXTtcclxuXHRcdHZhciBjX3ggPSB2ZXJ0aWNlc1tpbmRleEMgKiAzXTtcclxuXHRcdHZhciBjX3kgPSB2ZXJ0aWNlc1tpbmRleEMgKiAzICsgMV07XHJcblxyXG5cdFx0cmV0dXJuIFtcclxuXHRcdFx0bmV3IFZlY3RvcjIoYV94LCBhX3kpLFxyXG5cdFx0XHRuZXcgVmVjdG9yMihiX3gsIGJfeSksXHJcblx0XHRcdG5ldyBWZWN0b3IyKGNfeCwgY195KVxyXG5cdFx0XTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2VuZXJhdGVTaWRlV2FsbFVWOiBmdW5jdGlvbiAoZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDLCBpbmRleEQpIHtcclxuXHJcblx0XHR2YXIgYV94ID0gdmVydGljZXNbaW5kZXhBICogM107XHJcblx0XHR2YXIgYV95ID0gdmVydGljZXNbaW5kZXhBICogMyArIDFdO1xyXG5cdFx0dmFyIGFfeiA9IHZlcnRpY2VzW2luZGV4QSAqIDMgKyAyXTtcclxuXHRcdHZhciBiX3ggPSB2ZXJ0aWNlc1tpbmRleEIgKiAzXTtcclxuXHRcdHZhciBiX3kgPSB2ZXJ0aWNlc1tpbmRleEIgKiAzICsgMV07XHJcblx0XHR2YXIgYl96ID0gdmVydGljZXNbaW5kZXhCICogMyArIDJdO1xyXG5cdFx0dmFyIGNfeCA9IHZlcnRpY2VzW2luZGV4QyAqIDNdO1xyXG5cdFx0dmFyIGNfeSA9IHZlcnRpY2VzW2luZGV4QyAqIDMgKyAxXTtcclxuXHRcdHZhciBjX3ogPSB2ZXJ0aWNlc1tpbmRleEMgKiAzICsgMl07XHJcblx0XHR2YXIgZF94ID0gdmVydGljZXNbaW5kZXhEICogM107XHJcblx0XHR2YXIgZF95ID0gdmVydGljZXNbaW5kZXhEICogMyArIDFdO1xyXG5cdFx0dmFyIGRfeiA9IHZlcnRpY2VzW2luZGV4RCAqIDMgKyAyXTtcclxuXHJcblx0XHRpZiAoTWF0aC5hYnMoYV95IC0gYl95KSA8IDAuMDEpIHtcclxuXHJcblx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0bmV3IFZlY3RvcjIoYV94LCAxIC0gYV96KSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMihiX3gsIDEgLSBiX3opLFxyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKGNfeCwgMSAtIGNfeiksXHJcblx0XHRcdFx0bmV3IFZlY3RvcjIoZF94LCAxIC0gZF96KVxyXG5cdFx0XHRdO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKGFfeSwgMSAtIGFfeiksXHJcblx0XHRcdFx0bmV3IFZlY3RvcjIoYl95LCAxIC0gYl96KSxcclxuXHRcdFx0XHRuZXcgVmVjdG9yMihjX3ksIDEgLSBjX3opLFxyXG5cdFx0XHRcdG5ldyBWZWN0b3IyKGRfeSwgMSAtIGRfeilcclxuXHRcdFx0XTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIHRvSlNPTihzaGFwZXMsIG9wdGlvbnMsIGRhdGEpIHtcclxuXHJcblx0Ly9cclxuXHJcblx0ZGF0YS5zaGFwZXMgPSBbXTtcclxuXHJcblx0aWYgKEFycmF5LmlzQXJyYXkoc2hhcGVzKSkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzW2ldO1xyXG5cclxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaChzaGFwZS51dWlkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0ZGF0YS5zaGFwZXMucHVzaChzaGFwZXMudXVpZCk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly9cclxuXHJcblx0aWYgKG9wdGlvbnMuZXh0cnVkZVBhdGggIT09IHVuZGVmaW5lZCkgeyBkYXRhLm9wdGlvbnMuZXh0cnVkZVBhdGggPSBvcHRpb25zLmV4dHJ1ZGVQYXRoLnRvSlNPTigpOyB9XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICpcclxuICogVGV4dCA9IDNEIFRleHRcclxuICpcclxuICogcGFyYW1ldGVycyA9IHtcclxuICogIGZvbnQ6IDxUSFJFRS5Gb250PiwgLy8gZm9udFxyXG4gKlxyXG4gKiAgc2l6ZTogPGZsb2F0PiwgLy8gc2l6ZSBvZiB0aGUgdGV4dFxyXG4gKiAgaGVpZ2h0OiA8ZmxvYXQ+LCAvLyB0aGlja25lc3MgdG8gZXh0cnVkZSB0ZXh0XHJcbiAqICBjdXJ2ZVNlZ21lbnRzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBvbiB0aGUgY3VydmVzXHJcbiAqXHJcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxyXG4gKiAgYmV2ZWxUaGlja25lc3M6IDxmbG9hdD4sIC8vIGhvdyBkZWVwIGludG8gdGV4dCBiZXZlbCBnb2VzXHJcbiAqICBiZXZlbFNpemU6IDxmbG9hdD4sIC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgKGluY2x1ZGluZyBiZXZlbE9mZnNldCkgaXMgYmV2ZWxcclxuICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+IC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydFxyXG4gKiB9XHJcbiAqL1xyXG5cclxuLy8gVGV4dEdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBUZXh0R2VvbWV0cnkodGV4dCwgcGFyYW1ldGVycykge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnVGV4dEdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0dGV4dDogdGV4dCxcclxuXHRcdHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVGV4dEJ1ZmZlckdlb21ldHJ5KHRleHQsIHBhcmFtZXRlcnMpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcblRleHRHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0R2VvbWV0cnk7XHJcblxyXG4vLyBUZXh0QnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFRleHRCdWZmZXJHZW9tZXRyeSh0ZXh0LCBwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xyXG5cclxuXHR2YXIgZm9udCA9IHBhcmFtZXRlcnMuZm9udDtcclxuXHJcblx0aWYgKCEoZm9udCAmJiBmb250LmlzRm9udCkpIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5UZXh0R2VvbWV0cnk6IGZvbnQgcGFyYW1ldGVyIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5Gb250LicpO1xyXG5cdFx0cmV0dXJuIG5ldyBHZW9tZXRyeSgpO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBzaGFwZXMgPSBmb250LmdlbmVyYXRlU2hhcGVzKHRleHQsIHBhcmFtZXRlcnMuc2l6ZSk7XHJcblxyXG5cdC8vIHRyYW5zbGF0ZSBwYXJhbWV0ZXJzIHRvIEV4dHJ1ZGVHZW9tZXRyeSBBUElcclxuXHJcblx0cGFyYW1ldGVycy5kZXB0aCA9IHBhcmFtZXRlcnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmhlaWdodCA6IDUwO1xyXG5cclxuXHQvLyBkZWZhdWx0c1xyXG5cclxuXHRpZiAocGFyYW1ldGVycy5iZXZlbFRoaWNrbmVzcyA9PT0gdW5kZWZpbmVkKSB7IHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPSAxMDsgfVxyXG5cdGlmIChwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9PT0gdW5kZWZpbmVkKSB7IHBhcmFtZXRlcnMuYmV2ZWxTaXplID0gODsgfVxyXG5cdGlmIChwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9PT0gdW5kZWZpbmVkKSB7IHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID0gZmFsc2U7IH1cclxuXHJcblx0RXh0cnVkZUJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcywgc2hhcGVzLCBwYXJhbWV0ZXJzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1RleHRCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG59XHJcblxyXG5UZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRCdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcclxuICovXHJcblxyXG4vLyBTcGhlcmVHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gU3BoZXJlR2VvbWV0cnkocmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpIHtcclxuXHJcblx0R2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1NwaGVyZUdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxyXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxyXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxyXG5cdFx0cGhpTGVuZ3RoOiBwaGlMZW5ndGgsXHJcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxyXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXHJcblx0fTtcclxuXHJcblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFNwaGVyZUJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoKSk7XHJcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XHJcblxyXG59XHJcblxyXG5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUdlb21ldHJ5O1xyXG5cclxuLy8gU3BoZXJlQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFNwaGVyZUJ1ZmZlckdlb21ldHJ5KHJhZGl1cywgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoKSB7XHJcblxyXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcclxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcclxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxyXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcclxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdH07XHJcblxyXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xyXG5cclxuXHR3aWR0aFNlZ21lbnRzID0gTWF0aC5tYXgoMywgTWF0aC5mbG9vcih3aWR0aFNlZ21lbnRzKSB8fCA4KTtcclxuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGgubWF4KDIsIE1hdGguZmxvb3IoaGVpZ2h0U2VnbWVudHMpIHx8IDYpO1xyXG5cclxuXHRwaGlTdGFydCA9IHBoaVN0YXJ0ICE9PSB1bmRlZmluZWQgPyBwaGlTdGFydCA6IDA7XHJcblx0cGhpTGVuZ3RoID0gcGhpTGVuZ3RoICE9PSB1bmRlZmluZWQgPyBwaGlMZW5ndGggOiBNYXRoLlBJICogMjtcclxuXHJcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xyXG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSTtcclxuXHJcblx0dmFyIHRoZXRhRW5kID0gTWF0aC5taW4odGhldGFTdGFydCArIHRoZXRhTGVuZ3RoLCBNYXRoLlBJKTtcclxuXHJcblx0dmFyIGl4LCBpeTtcclxuXHJcblx0dmFyIGluZGV4ID0gMDtcclxuXHR2YXIgZ3JpZCA9IFtdO1xyXG5cclxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0Ly8gYnVmZmVyc1xyXG5cclxuXHR2YXIgaW5kaWNlcyA9IFtdO1xyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cdHZhciBub3JtYWxzID0gW107XHJcblx0dmFyIHV2cyA9IFtdO1xyXG5cclxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXHJcblxyXG5cdGZvciAoaXkgPSAwOyBpeSA8PSBoZWlnaHRTZWdtZW50czsgaXkrKykge1xyXG5cclxuXHRcdHZhciB2ZXJ0aWNlc1JvdyA9IFtdO1xyXG5cclxuXHRcdHZhciB2ID0gaXkgLyBoZWlnaHRTZWdtZW50cztcclxuXHJcblx0XHQvLyBzcGVjaWFsIGNhc2UgZm9yIHRoZSBwb2xlc1xyXG5cclxuXHRcdHZhciB1T2Zmc2V0ID0gMDtcclxuXHJcblx0XHRpZiAoaXkgPT0gMCAmJiB0aGV0YVN0YXJ0ID09IDApIHtcclxuXHJcblx0XHRcdHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoaXkgPT0gaGVpZ2h0U2VnbWVudHMgJiYgdGhldGFFbmQgPT0gTWF0aC5QSSkge1xyXG5cclxuXHRcdFx0dU9mZnNldCA9IC0gMC41IC8gd2lkdGhTZWdtZW50cztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChpeCA9IDA7IGl4IDw9IHdpZHRoU2VnbWVudHM7IGl4KyspIHtcclxuXHJcblx0XHRcdHZhciB1ID0gaXggLyB3aWR0aFNlZ21lbnRzO1xyXG5cclxuXHRcdFx0Ly8gdmVydGV4XHJcblxyXG5cdFx0XHR2ZXJ0ZXgueCA9IC0gcmFkaXVzICogTWF0aC5jb3MocGhpU3RhcnQgKyB1ICogcGhpTGVuZ3RoKSAqIE1hdGguc2luKHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGgpO1xyXG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguY29zKHRoZXRhU3RhcnQgKyB2ICogdGhldGFMZW5ndGgpO1xyXG5cdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCkgKiBNYXRoLnNpbih0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoKTtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0XHQvLyBub3JtYWxcclxuXHJcblx0XHRcdG5vcm1hbC5jb3B5KHZlcnRleCkubm9ybWFsaXplKCk7XHJcblx0XHRcdG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcblx0XHRcdC8vIHV2XHJcblxyXG5cdFx0XHR1dnMucHVzaCh1ICsgdU9mZnNldCwgMSAtIHYpO1xyXG5cclxuXHRcdFx0dmVydGljZXNSb3cucHVzaChpbmRleCsrKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Z3JpZC5wdXNoKHZlcnRpY2VzUm93KTtcclxuXHJcblx0fVxyXG5cclxuXHQvLyBpbmRpY2VzXHJcblxyXG5cdGZvciAoaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSsrKSB7XHJcblxyXG5cdFx0Zm9yIChpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXgrKykge1xyXG5cclxuXHRcdFx0dmFyIGEgPSBncmlkW2l5XVtpeCArIDFdO1xyXG5cdFx0XHR2YXIgYiA9IGdyaWRbaXldW2l4XTtcclxuXHRcdFx0dmFyIGMgPSBncmlkW2l5ICsgMV1baXhdO1xyXG5cdFx0XHR2YXIgZCA9IGdyaWRbaXkgKyAxXVtpeCArIDFdO1xyXG5cclxuXHRcdFx0aWYgKGl5ICE9PSAwIHx8IHRoZXRhU3RhcnQgPiAwKSB7IGluZGljZXMucHVzaChhLCBiLCBkKTsgfVxyXG5cdFx0XHRpZiAoaXkgIT09IGhlaWdodFNlZ21lbnRzIC0gMSB8fCB0aGV0YUVuZCA8IE1hdGguUEkpIHsgaW5kaWNlcy5wdXNoKGIsIGMsIGQpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxufVxyXG5cclxuU3BoZXJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcGhlcmVCdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIEthbGViIE11cnBoeVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbi8vIFJpbmdHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gUmluZ0dlb21ldHJ5KGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdSaW5nR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXHJcblx0XHRvdXRlclJhZGl1czogb3V0ZXJSYWRpdXMsXHJcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxyXG5cdFx0cGhpU2VnbWVudHM6IHBoaVNlZ21lbnRzLFxyXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcclxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdH07XHJcblxyXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBSaW5nQnVmZmVyR2VvbWV0cnkoaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCB0aGV0YVNlZ21lbnRzLCBwaGlTZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcblJpbmdHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblJpbmdHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSaW5nR2VvbWV0cnk7XHJcblxyXG4vLyBSaW5nQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFJpbmdCdWZmZXJHZW9tZXRyeShpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCkge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnUmluZ0J1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxyXG5cdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxyXG5cdFx0dGhldGFTZWdtZW50czogdGhldGFTZWdtZW50cyxcclxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcclxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcclxuXHR9O1xyXG5cclxuXHRpbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzIHx8IDAuNTtcclxuXHRvdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIHx8IDE7XHJcblxyXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcclxuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xyXG5cclxuXHR0aGV0YVNlZ21lbnRzID0gdGhldGFTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoMywgdGhldGFTZWdtZW50cykgOiA4O1xyXG5cdHBoaVNlZ21lbnRzID0gcGhpU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IE1hdGgubWF4KDEsIHBoaVNlZ21lbnRzKSA6IDE7XHJcblxyXG5cdC8vIGJ1ZmZlcnNcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHR2YXIgdmVydGljZXMgPSBbXTtcclxuXHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0Ly8gc29tZSBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdHZhciBzZWdtZW50O1xyXG5cdHZhciByYWRpdXMgPSBpbm5lclJhZGl1cztcclxuXHR2YXIgcmFkaXVzU3RlcCA9ICgob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyBwaGlTZWdtZW50cyk7XHJcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcclxuXHR2YXIgaiwgaTtcclxuXHJcblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRmb3IgKGogPSAwOyBqIDw9IHBoaVNlZ21lbnRzOyBqKyspIHtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDw9IHRoZXRhU2VnbWVudHM7IGkrKykge1xyXG5cclxuXHRcdFx0Ly8gdmFsdWVzIGFyZSBnZW5lcmF0ZSBmcm9tIHRoZSBpbnNpZGUgb2YgdGhlIHJpbmcgdG8gdGhlIG91dHNpZGVcclxuXHJcblx0XHRcdHNlZ21lbnQgPSB0aGV0YVN0YXJ0ICsgaSAvIHRoZXRhU2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcclxuXHJcblx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyhzZWdtZW50KTtcclxuXHRcdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbihzZWdtZW50KTtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0XHQvLyBub3JtYWxcclxuXHJcblx0XHRcdG5vcm1hbHMucHVzaCgwLCAwLCAxKTtcclxuXHJcblx0XHRcdC8vIHV2XHJcblxyXG5cdFx0XHR1di54ID0gKHZlcnRleC54IC8gb3V0ZXJSYWRpdXMgKyAxKSAvIDI7XHJcblx0XHRcdHV2LnkgPSAodmVydGV4LnkgLyBvdXRlclJhZGl1cyArIDEpIC8gMjtcclxuXHJcblx0XHRcdHV2cy5wdXNoKHV2LngsIHV2LnkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBpbmNyZWFzZSB0aGUgcmFkaXVzIGZvciBuZXh0IHJvdyBvZiB2ZXJ0aWNlc1xyXG5cclxuXHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGluZGljZXNcclxuXHJcblx0Zm9yIChqID0gMDsgaiA8IHBoaVNlZ21lbnRzOyBqKyspIHtcclxuXHJcblx0XHR2YXIgdGhldGFTZWdtZW50TGV2ZWwgPSBqICogKHRoZXRhU2VnbWVudHMgKyAxKTtcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDwgdGhldGFTZWdtZW50czsgaSsrKSB7XHJcblxyXG5cdFx0XHRzZWdtZW50ID0gaSArIHRoZXRhU2VnbWVudExldmVsO1xyXG5cclxuXHRcdFx0dmFyIGEgPSBzZWdtZW50O1xyXG5cdFx0XHR2YXIgYiA9IHNlZ21lbnQgKyB0aGV0YVNlZ21lbnRzICsgMTtcclxuXHRcdFx0dmFyIGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7XHJcblx0XHRcdHZhciBkID0gc2VnbWVudCArIDE7XHJcblxyXG5cdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG5cdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxufVxyXG5cclxuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdCdWZmZXJHZW9tZXRyeTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuLy8gTGF0aGVHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gTGF0aGVHZW9tZXRyeShwb2ludHMsIHNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdMYXRoZUdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cG9pbnRzOiBwb2ludHMsXHJcblx0XHRzZWdtZW50czogc2VnbWVudHMsXHJcblx0XHRwaGlTdGFydDogcGhpU3RhcnQsXHJcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxyXG5cdH07XHJcblxyXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBMYXRoZUJ1ZmZlckdlb21ldHJ5KHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcbkxhdGhlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlR2VvbWV0cnk7XHJcblxyXG4vLyBMYXRoZUJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBMYXRoZUJ1ZmZlckdlb21ldHJ5KHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGgpIHtcclxuXHJcblx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xhdGhlQnVmZmVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRwb2ludHM6IHBvaW50cyxcclxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcclxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcclxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXHJcblx0fTtcclxuXHJcblx0c2VnbWVudHMgPSBNYXRoLmZsb29yKHNlZ21lbnRzKSB8fCAxMjtcclxuXHRwaGlTdGFydCA9IHBoaVN0YXJ0IHx8IDA7XHJcblx0cGhpTGVuZ3RoID0gcGhpTGVuZ3RoIHx8IE1hdGguUEkgKiAyO1xyXG5cclxuXHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXHJcblxyXG5cdHBoaUxlbmd0aCA9IF9NYXRoLmNsYW1wKHBoaUxlbmd0aCwgMCwgTWF0aC5QSSAqIDIpO1xyXG5cclxuXHJcblx0Ly8gYnVmZmVyc1xyXG5cclxuXHR2YXIgaW5kaWNlcyA9IFtdO1xyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHR2YXIgYmFzZTtcclxuXHR2YXIgaW52ZXJzZVNlZ21lbnRzID0gMS4wIC8gc2VnbWVudHM7XHJcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0dmFyIHV2ID0gbmV3IFZlY3RvcjIoKTtcclxuXHR2YXIgaSwgajtcclxuXHJcblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMgYW5kIHV2c1xyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHR2YXIgcGhpID0gcGhpU3RhcnQgKyBpICogaW52ZXJzZVNlZ21lbnRzICogcGhpTGVuZ3RoO1xyXG5cclxuXHRcdHZhciBzaW4gPSBNYXRoLnNpbihwaGkpO1xyXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zKHBoaSk7XHJcblxyXG5cdFx0Zm9yIChqID0gMDsgaiA8PSAocG9pbnRzLmxlbmd0aCAtIDEpOyBqKyspIHtcclxuXHJcblx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0dmVydGV4LnggPSBwb2ludHNbal0ueCAqIHNpbjtcclxuXHRcdFx0dmVydGV4LnkgPSBwb2ludHNbal0ueTtcclxuXHRcdFx0dmVydGV4LnogPSBwb2ludHNbal0ueCAqIGNvcztcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0dXYueCA9IGkgLyBzZWdtZW50cztcclxuXHRcdFx0dXYueSA9IGogLyAocG9pbnRzLmxlbmd0aCAtIDEpO1xyXG5cclxuXHRcdFx0dXZzLnB1c2godXYueCwgdXYueSk7XHJcblxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBpbmRpY2VzXHJcblxyXG5cdGZvciAoaSA9IDA7IGkgPCBzZWdtZW50czsgaSsrKSB7XHJcblxyXG5cdFx0Zm9yIChqID0gMDsgaiA8IChwb2ludHMubGVuZ3RoIC0gMSk7IGorKykge1xyXG5cclxuXHRcdFx0YmFzZSA9IGogKyBpICogcG9pbnRzLmxlbmd0aDtcclxuXHJcblx0XHRcdHZhciBhID0gYmFzZTtcclxuXHRcdFx0dmFyIGIgPSBiYXNlICsgcG9pbnRzLmxlbmd0aDtcclxuXHRcdFx0dmFyIGMgPSBiYXNlICsgcG9pbnRzLmxlbmd0aCArIDE7XHJcblx0XHRcdHZhciBkID0gYmFzZSArIDE7XHJcblxyXG5cdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGQpO1xyXG5cdFx0XHRpbmRpY2VzLnB1c2goYiwgYywgZCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcclxuXHJcblx0Ly8gZ2VuZXJhdGUgbm9ybWFsc1xyXG5cclxuXHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XHJcblxyXG5cdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIHdlIG5lZWQgdG8gYXZlcmFnZSB0aGUgbm9ybWFscyBhbG9uZyB0aGUgc2VhbS5cclxuXHQvLyBiZWNhdXNlIHRoZSBjb3JyZXNwb25kaW5nIHZlcnRpY2VzIGFyZSBpZGVudGljYWwgKGJ1dCBzdGlsbCBoYXZlIGRpZmZlcmVudCBVVnMpLlxyXG5cclxuXHRpZiAocGhpTGVuZ3RoID09PSBNYXRoLlBJICogMikge1xyXG5cclxuXHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcclxuXHRcdHZhciBuMSA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHR2YXIgbjIgPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0dmFyIG4gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdC8vIHRoaXMgaXMgdGhlIGJ1ZmZlciBvZmZzZXQgZm9yIHRoZSBsYXN0IGxpbmUgb2YgdmVydGljZXNcclxuXHJcblx0XHRiYXNlID0gc2VnbWVudHMgKiBwb2ludHMubGVuZ3RoICogMztcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBqID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKywgaiArPSAzKSB7XHJcblxyXG5cdFx0XHQvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBmaXJzdCBsaW5lXHJcblxyXG5cdFx0XHRuMS54ID0gbm9ybWFsc1tqICsgMF07XHJcblx0XHRcdG4xLnkgPSBub3JtYWxzW2ogKyAxXTtcclxuXHRcdFx0bjEueiA9IG5vcm1hbHNbaiArIDJdO1xyXG5cclxuXHRcdFx0Ly8gc2VsZWN0IHRoZSBub3JtYWwgb2YgdGhlIHZlcnRleCBpbiB0aGUgbGFzdCBsaW5lXHJcblxyXG5cdFx0XHRuMi54ID0gbm9ybWFsc1tiYXNlICsgaiArIDBdO1xyXG5cdFx0XHRuMi55ID0gbm9ybWFsc1tiYXNlICsgaiArIDFdO1xyXG5cdFx0XHRuMi56ID0gbm9ybWFsc1tiYXNlICsgaiArIDJdO1xyXG5cclxuXHRcdFx0Ly8gYXZlcmFnZSBub3JtYWxzXHJcblxyXG5cdFx0XHRuLmFkZFZlY3RvcnMobjEsIG4yKS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRcdC8vIGFzc2lnbiB0aGUgbmV3IHZhbHVlcyB0byBib3RoIG5vcm1hbHNcclxuXHJcblx0XHRcdG5vcm1hbHNbaiArIDBdID0gbm9ybWFsc1tiYXNlICsgaiArIDBdID0gbi54O1xyXG5cdFx0XHRub3JtYWxzW2ogKyAxXSA9IG5vcm1hbHNbYmFzZSArIGogKyAxXSA9IG4ueTtcclxuXHRcdFx0bm9ybWFsc1tqICsgMl0gPSBub3JtYWxzW2Jhc2UgKyBqICsgMl0gPSBuLno7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5MYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuTGF0aGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXRoZUJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igam9ub2JyMSAvIGh0dHA6Ly9qb25vYnIxLmNvbVxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbi8vIFNoYXBlR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIFNoYXBlR2VvbWV0cnkoc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzKSB7XHJcblxyXG5cdEdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdTaGFwZUdlb21ldHJ5JztcclxuXHJcblx0aWYgKHR5cGVvZiBjdXJ2ZVNlZ21lbnRzID09PSAnb2JqZWN0Jykge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuU2hhcGVHZW9tZXRyeTogT3B0aW9ucyBwYXJhbWV0ZXIgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0XHRjdXJ2ZVNlZ21lbnRzID0gY3VydmVTZWdtZW50cy5jdXJ2ZVNlZ21lbnRzO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHNoYXBlczogc2hhcGVzLFxyXG5cdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xyXG5cdH07XHJcblxyXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBTaGFwZUJ1ZmZlckdlb21ldHJ5KHNoYXBlcywgY3VydmVTZWdtZW50cykpO1xyXG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xyXG5cclxufVxyXG5cclxuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdlb21ldHJ5LnByb3RvdHlwZSk7XHJcblNoYXBlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2hhcGVHZW9tZXRyeTtcclxuXHJcblNoYXBlR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xyXG5cclxuXHRyZXR1cm4gdG9KU09OJDEoc2hhcGVzLCBkYXRhKTtcclxuXHJcbn07XHJcblxyXG4vLyBTaGFwZUJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBTaGFwZUJ1ZmZlckdlb21ldHJ5KHNoYXBlcywgY3VydmVTZWdtZW50cykge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHNoYXBlczogc2hhcGVzLFxyXG5cdFx0Y3VydmVTZWdtZW50czogY3VydmVTZWdtZW50c1xyXG5cdH07XHJcblxyXG5cdGN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzIHx8IDEyO1xyXG5cclxuXHQvLyBidWZmZXJzXHJcblxyXG5cdHZhciBpbmRpY2VzID0gW107XHJcblx0dmFyIHZlcnRpY2VzID0gW107XHJcblx0dmFyIG5vcm1hbHMgPSBbXTtcclxuXHR2YXIgdXZzID0gW107XHJcblxyXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcclxuXHJcblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xyXG5cdHZhciBncm91cENvdW50ID0gMDtcclxuXHJcblx0Ly8gYWxsb3cgc2luZ2xlIGFuZCBhcnJheSB2YWx1ZXMgZm9yIFwic2hhcGVzXCIgcGFyYW1ldGVyXHJcblxyXG5cdGlmIChBcnJheS5pc0FycmF5KHNoYXBlcykgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0YWRkU2hhcGUoc2hhcGVzKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNoYXBlcy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0YWRkU2hhcGUoc2hhcGVzW2ldKTtcclxuXHJcblx0XHRcdHRoaXMuYWRkR3JvdXAoZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSk7IC8vIGVuYWJsZXMgTXVsdGlNYXRlcmlhbCBzdXBwb3J0XHJcblxyXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XHJcblx0XHRcdGdyb3VwQ291bnQgPSAwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBidWlsZCBnZW9tZXRyeVxyXG5cclxuXHR0aGlzLnNldEluZGV4KGluZGljZXMpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5vcm1hbHMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1dnMsIDIpKTtcclxuXHJcblxyXG5cdC8vIGhlbHBlciBmdW5jdGlvbnNcclxuXHJcblx0ZnVuY3Rpb24gYWRkU2hhcGUoc2hhcGUpIHtcclxuXHJcblx0XHR2YXIgaSwgbCwgc2hhcGVIb2xlO1xyXG5cclxuXHRcdHZhciBpbmRleE9mZnNldCA9IHZlcnRpY2VzLmxlbmd0aCAvIDM7XHJcblx0XHR2YXIgcG9pbnRzID0gc2hhcGUuZXh0cmFjdFBvaW50cyhjdXJ2ZVNlZ21lbnRzKTtcclxuXHJcblx0XHR2YXIgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcclxuXHRcdHZhciBzaGFwZUhvbGVzID0gcG9pbnRzLmhvbGVzO1xyXG5cclxuXHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xyXG5cclxuXHRcdGlmIChTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKHNoYXBlVmVydGljZXMpID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0c2hhcGVWZXJ0aWNlcyA9IHNoYXBlVmVydGljZXMucmV2ZXJzZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbaV07XHJcblxyXG5cdFx0XHRpZiAoU2hhcGVVdGlscy5pc0Nsb2NrV2lzZShzaGFwZUhvbGUpID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdHNoYXBlSG9sZXNbaV0gPSBzaGFwZUhvbGUucmV2ZXJzZSgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZmFjZXMgPSBTaGFwZVV0aWxzLnRyaWFuZ3VsYXRlU2hhcGUoc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyk7XHJcblxyXG5cdFx0Ly8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXlcclxuXHJcblx0XHRmb3IgKGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHNoYXBlSG9sZSA9IHNoYXBlSG9sZXNbaV07XHJcblx0XHRcdHNoYXBlVmVydGljZXMgPSBzaGFwZVZlcnRpY2VzLmNvbmNhdChzaGFwZUhvbGUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB2ZXJ0aWNlcywgbm9ybWFscywgdXZzXHJcblxyXG5cdFx0Zm9yIChpID0gMCwgbCA9IHNoYXBlVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgdmVydGV4ID0gc2hhcGVWZXJ0aWNlc1tpXTtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCAwKTtcclxuXHRcdFx0bm9ybWFscy5wdXNoKDAsIDAsIDEpO1xyXG5cdFx0XHR1dnMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnkpOyAvLyB3b3JsZCB1dnNcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaW5jaWRlc1xyXG5cclxuXHRcdGZvciAoaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gZmFjZXNbaV07XHJcblxyXG5cdFx0XHR2YXIgYSA9IGZhY2VbMF0gKyBpbmRleE9mZnNldDtcclxuXHRcdFx0dmFyIGIgPSBmYWNlWzFdICsgaW5kZXhPZmZzZXQ7XHJcblx0XHRcdHZhciBjID0gZmFjZVsyXSArIGluZGV4T2Zmc2V0O1xyXG5cclxuXHRcdFx0aW5kaWNlcy5wdXNoKGEsIGIsIGMpO1xyXG5cdFx0XHRncm91cENvdW50ICs9IDM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG5TaGFwZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFwZUJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuU2hhcGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XHJcblxyXG5cdHJldHVybiB0b0pTT04kMShzaGFwZXMsIGRhdGEpO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5mdW5jdGlvbiB0b0pTT04kMShzaGFwZXMsIGRhdGEpIHtcclxuXHJcblx0ZGF0YS5zaGFwZXMgPSBbXTtcclxuXHJcblx0aWYgKEFycmF5LmlzQXJyYXkoc2hhcGVzKSkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzW2ldO1xyXG5cclxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaChzaGFwZS51dWlkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0ZGF0YS5zaGFwZXMucHVzaChzaGFwZXMudXVpZCk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRWRnZXNHZW9tZXRyeShnZW9tZXRyeSwgdGhyZXNob2xkQW5nbGUpIHtcclxuXHJcblx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHR0aHJlc2hvbGRBbmdsZTogdGhyZXNob2xkQW5nbGVcclxuXHR9O1xyXG5cclxuXHR0aHJlc2hvbGRBbmdsZSA9ICh0aHJlc2hvbGRBbmdsZSAhPT0gdW5kZWZpbmVkKSA/IHRocmVzaG9sZEFuZ2xlIDogMTtcclxuXHJcblx0Ly8gYnVmZmVyXHJcblxyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cclxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdHZhciB0aHJlc2hvbGREb3QgPSBNYXRoLmNvcyhfTWF0aC5ERUcyUkFEICogdGhyZXNob2xkQW5nbGUpO1xyXG5cdHZhciBlZGdlID0gWzAsIDBdLCBlZGdlcyA9IHt9LCBlZGdlMSwgZWRnZTI7XHJcblx0dmFyIGtleSwga2V5cyA9IFsnYScsICdiJywgJ2MnXTtcclxuXHJcblx0Ly8gcHJlcGFyZSBzb3VyY2UgZ2VvbWV0cnlcclxuXHJcblx0dmFyIGdlb21ldHJ5MjtcclxuXHJcblx0aWYgKGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkpIHtcclxuXHJcblx0XHRnZW9tZXRyeTIgPSBuZXcgR2VvbWV0cnkoKTtcclxuXHRcdGdlb21ldHJ5Mi5mcm9tQnVmZmVyR2VvbWV0cnkoZ2VvbWV0cnkpO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdGdlb21ldHJ5MiA9IGdlb21ldHJ5LmNsb25lKCk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2VvbWV0cnkyLm1lcmdlVmVydGljZXMoKTtcclxuXHRnZW9tZXRyeTIuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XHJcblxyXG5cdHZhciBzb3VyY2VWZXJ0aWNlcyA9IGdlb21ldHJ5Mi52ZXJ0aWNlcztcclxuXHR2YXIgZmFjZXMgPSBnZW9tZXRyeTIuZmFjZXM7XHJcblxyXG5cdC8vIG5vdyBjcmVhdGUgYSBkYXRhIHN0cnVjdHVyZSB3aGVyZSBlYWNoIGVudHJ5IHJlcHJlc2VudHMgYW4gZWRnZSB3aXRoIGl0cyBhZGpvaW5pbmcgZmFjZXNcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgZmFjZSA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgMzsgaisrKSB7XHJcblxyXG5cdFx0XHRlZGdlMSA9IGZhY2Vba2V5c1tqXV07XHJcblx0XHRcdGVkZ2UyID0gZmFjZVtrZXlzWyhqICsgMSkgJSAzXV07XHJcblx0XHRcdGVkZ2VbMF0gPSBNYXRoLm1pbihlZGdlMSwgZWRnZTIpO1xyXG5cdFx0XHRlZGdlWzFdID0gTWF0aC5tYXgoZWRnZTEsIGVkZ2UyKTtcclxuXHJcblx0XHRcdGtleSA9IGVkZ2VbMF0gKyAnLCcgKyBlZGdlWzFdO1xyXG5cclxuXHRcdFx0aWYgKGVkZ2VzW2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRlZGdlc1trZXldID0geyBpbmRleDE6IGVkZ2VbMF0sIGluZGV4MjogZWRnZVsxXSwgZmFjZTE6IGksIGZhY2UyOiB1bmRlZmluZWQgfTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdGVkZ2VzW2tleV0uZmFjZTIgPSBpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xyXG5cclxuXHRmb3IgKGtleSBpbiBlZGdlcykge1xyXG5cclxuXHRcdHZhciBlID0gZWRnZXNba2V5XTtcclxuXHJcblx0XHQvLyBhbiBlZGdlIGlzIG9ubHkgcmVuZGVyZWQgaWYgdGhlIGFuZ2xlIChpbiBkZWdyZWVzKSBiZXR3ZWVuIHRoZSBmYWNlIG5vcm1hbHMgb2YgdGhlIGFkam9pbmluZyBmYWNlcyBleGNlZWRzIHRoaXMgdmFsdWUuIGRlZmF1bHQgPSAxIGRlZ3JlZS5cclxuXHJcblx0XHRpZiAoZS5mYWNlMiA9PT0gdW5kZWZpbmVkIHx8IGZhY2VzW2UuZmFjZTFdLm5vcm1hbC5kb3QoZmFjZXNbZS5mYWNlMl0ubm9ybWFsKSA8PSB0aHJlc2hvbGREb3QpIHtcclxuXHJcblx0XHRcdHZhciB2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1tlLmluZGV4MV07XHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0XHR2ZXJ0ZXggPSBzb3VyY2VWZXJ0aWNlc1tlLmluZGV4Ml07XHJcblx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XHJcblxyXG59XHJcblxyXG5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlKTtcclxuRWRnZXNHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFZGdlc0dlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxuLy8gQ3lsaW5kZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gQ3lsaW5kZXJHZW9tZXRyeShyYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpIHtcclxuXHJcblx0R2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0N5bGluZGVyR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXNUb3A6IHJhZGl1c1RvcCxcclxuXHRcdHJhZGl1c0JvdHRvbTogcmFkaXVzQm90dG9tLFxyXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXHJcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXHJcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcclxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeShyYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcbkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5DeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyR2VvbWV0cnk7XHJcblxyXG4vLyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5KHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCkge1xyXG5cclxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1c1RvcDogcmFkaXVzVG9wLFxyXG5cdFx0cmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sXHJcblx0XHRoZWlnaHQ6IGhlaWdodCxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxyXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcclxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdH07XHJcblxyXG5cdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdHJhZGl1c1RvcCA9IHJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkID8gcmFkaXVzVG9wIDogMTtcclxuXHRyYWRpdXNCb3R0b20gPSByYWRpdXNCb3R0b20gIT09IHVuZGVmaW5lZCA/IHJhZGl1c0JvdHRvbSA6IDE7XHJcblx0aGVpZ2h0ID0gaGVpZ2h0IHx8IDE7XHJcblxyXG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vcihyYWRpYWxTZWdtZW50cykgfHwgODtcclxuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoaGVpZ2h0U2VnbWVudHMpIHx8IDE7XHJcblxyXG5cdG9wZW5FbmRlZCA9IG9wZW5FbmRlZCAhPT0gdW5kZWZpbmVkID8gb3BlbkVuZGVkIDogZmFsc2U7XHJcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwLjA7XHJcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcclxuXHJcblx0Ly8gYnVmZmVyc1xyXG5cclxuXHR2YXIgaW5kaWNlcyA9IFtdO1xyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cdHZhciBub3JtYWxzID0gW107XHJcblx0dmFyIHV2cyA9IFtdO1xyXG5cclxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXHJcblxyXG5cdHZhciBpbmRleCA9IDA7XHJcblx0dmFyIGluZGV4QXJyYXkgPSBbXTtcclxuXHR2YXIgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7XHJcblx0dmFyIGdyb3VwU3RhcnQgPSAwO1xyXG5cclxuXHQvLyBnZW5lcmF0ZSBnZW9tZXRyeVxyXG5cclxuXHRnZW5lcmF0ZVRvcnNvKCk7XHJcblxyXG5cdGlmIChvcGVuRW5kZWQgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0aWYgKHJhZGl1c1RvcCA+IDApIHsgZ2VuZXJhdGVDYXAodHJ1ZSk7IH1cclxuXHRcdGlmIChyYWRpdXNCb3R0b20gPiAwKSB7IGdlbmVyYXRlQ2FwKGZhbHNlKTsgfVxyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvKCkge1xyXG5cclxuXHRcdHZhciB4LCB5O1xyXG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XHJcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0XHR2YXIgZ3JvdXBDb3VudCA9IDA7XHJcblxyXG5cdFx0Ly8gdGhpcyB3aWxsIGJlIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBub3JtYWxcclxuXHRcdHZhciBzbG9wZSA9IChyYWRpdXNCb3R0b20gLSByYWRpdXNUb3ApIC8gaGVpZ2h0O1xyXG5cclxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcclxuXHJcblx0XHRmb3IgKHkgPSAwOyB5IDw9IGhlaWdodFNlZ21lbnRzOyB5KyspIHtcclxuXHJcblx0XHRcdHZhciBpbmRleFJvdyA9IFtdO1xyXG5cclxuXHRcdFx0dmFyIHYgPSB5IC8gaGVpZ2h0U2VnbWVudHM7XHJcblxyXG5cdFx0XHQvLyBjYWxjdWxhdGUgdGhlIHJhZGl1cyBvZiB0aGUgY3VycmVudCByb3dcclxuXHJcblx0XHRcdHZhciByYWRpdXMgPSB2ICogKHJhZGl1c0JvdHRvbSAtIHJhZGl1c1RvcCkgKyByYWRpdXNUb3A7XHJcblxyXG5cdFx0XHRmb3IgKHggPSAwOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4KyspIHtcclxuXHJcblx0XHRcdFx0dmFyIHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XHJcblxyXG5cdFx0XHRcdHZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XHJcblxyXG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcclxuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyh0aGV0YSk7XHJcblxyXG5cdFx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIHNpblRoZXRhO1xyXG5cdFx0XHRcdHZlcnRleC55ID0gLSB2ICogaGVpZ2h0ICsgaGFsZkhlaWdodDtcclxuXHRcdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIGNvc1RoZXRhO1xyXG5cdFx0XHRcdHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueik7XHJcblxyXG5cdFx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0XHRub3JtYWwuc2V0KHNpblRoZXRhLCBzbG9wZSwgY29zVGhldGEpLm5vcm1hbGl6ZSgpO1xyXG5cdFx0XHRcdG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KTtcclxuXHJcblx0XHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdFx0dXZzLnB1c2godSwgMSAtIHYpO1xyXG5cclxuXHRcdFx0XHQvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvd1xyXG5cclxuXHRcdFx0XHRpbmRleFJvdy5wdXNoKGluZGV4KyspO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gbm93IHNhdmUgdmVydGljZXMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcclxuXHJcblx0XHRcdGluZGV4QXJyYXkucHVzaChpbmRleFJvdyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcclxuXHJcblx0XHRmb3IgKHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHgrKykge1xyXG5cclxuXHRcdFx0Zm9yICh5ID0gMDsgeSA8IGhlaWdodFNlZ21lbnRzOyB5KyspIHtcclxuXHJcblx0XHRcdFx0Ly8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xyXG5cclxuXHRcdFx0XHR2YXIgYSA9IGluZGV4QXJyYXlbeV1beF07XHJcblx0XHRcdFx0dmFyIGIgPSBpbmRleEFycmF5W3kgKyAxXVt4XTtcclxuXHRcdFx0XHR2YXIgYyA9IGluZGV4QXJyYXlbeSArIDFdW3ggKyAxXTtcclxuXHRcdFx0XHR2YXIgZCA9IGluZGV4QXJyYXlbeV1beCArIDFdO1xyXG5cclxuXHRcdFx0XHQvLyBmYWNlc1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzLnB1c2goYSwgYiwgZCk7XHJcblx0XHRcdFx0aW5kaWNlcy5wdXNoKGIsIGMsIGQpO1xyXG5cclxuXHRcdFx0XHQvLyB1cGRhdGUgZ3JvdXAgY291bnRlclxyXG5cclxuXHRcdFx0XHRncm91cENvdW50ICs9IDY7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XHJcblxyXG5cdFx0c2NvcGUuYWRkR3JvdXAoZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgMCk7XHJcblxyXG5cdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXHJcblxyXG5cdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGdlbmVyYXRlQ2FwKHRvcCkge1xyXG5cclxuXHRcdHZhciB4LCBjZW50ZXJJbmRleFN0YXJ0LCBjZW50ZXJJbmRleEVuZDtcclxuXHJcblx0XHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xyXG5cdFx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0dmFyIGdyb3VwQ291bnQgPSAwO1xyXG5cclxuXHRcdHZhciByYWRpdXMgPSAodG9wID09PSB0cnVlKSA/IHJhZGl1c1RvcCA6IHJhZGl1c0JvdHRvbTtcclxuXHRcdHZhciBzaWduID0gKHRvcCA9PT0gdHJ1ZSkgPyAxIDogLSAxO1xyXG5cclxuXHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjZW50ZXIgdmVydGV4XHJcblx0XHRjZW50ZXJJbmRleFN0YXJ0ID0gaW5kZXg7XHJcblxyXG5cdFx0Ly8gZmlyc3Qgd2UgZ2VuZXJhdGUgdGhlIGNlbnRlciB2ZXJ0ZXggZGF0YSBvZiB0aGUgY2FwLlxyXG5cdFx0Ly8gYmVjYXVzZSB0aGUgZ2VvbWV0cnkgbmVlZHMgb25lIHNldCBvZiB1dnMgcGVyIGZhY2UsXHJcblx0XHQvLyB3ZSBtdXN0IGdlbmVyYXRlIGEgY2VudGVyIHZlcnRleCBwZXIgZmFjZS9zZWdtZW50XHJcblxyXG5cdFx0Zm9yICh4ID0gMTsgeCA8PSByYWRpYWxTZWdtZW50czsgeCsrKSB7XHJcblxyXG5cdFx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2goMCwgaGFsZkhlaWdodCAqIHNpZ24sIDApO1xyXG5cclxuXHRcdFx0Ly8gbm9ybWFsXHJcblxyXG5cdFx0XHRub3JtYWxzLnB1c2goMCwgc2lnbiwgMCk7XHJcblxyXG5cdFx0XHQvLyB1dlxyXG5cclxuXHRcdFx0dXZzLnB1c2goMC41LCAwLjUpO1xyXG5cclxuXHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcclxuXHJcblx0XHRcdGluZGV4Kys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGNlbnRlciB2ZXJ0ZXhcclxuXHJcblx0XHRjZW50ZXJJbmRleEVuZCA9IGluZGV4O1xyXG5cclxuXHRcdC8vIG5vdyB3ZSBnZW5lcmF0ZSB0aGUgc3Vycm91bmRpbmcgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xyXG5cclxuXHRcdGZvciAoeCA9IDA7IHggPD0gcmFkaWFsU2VnbWVudHM7IHgrKykge1xyXG5cclxuXHRcdFx0dmFyIHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XHJcblx0XHRcdHZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XHJcblxyXG5cdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyh0aGV0YSk7XHJcblx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcclxuXHJcblx0XHRcdC8vIHZlcnRleFxyXG5cclxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcclxuXHRcdFx0dmVydGV4LnkgPSBoYWxmSGVpZ2h0ICogc2lnbjtcclxuXHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcclxuXHRcdFx0dmVydGljZXMucHVzaCh2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56KTtcclxuXHJcblx0XHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdFx0bm9ybWFscy5wdXNoKDAsIHNpZ24sIDApO1xyXG5cclxuXHRcdFx0Ly8gdXZcclxuXHJcblx0XHRcdHV2LnggPSAoY29zVGhldGEgKiAwLjUpICsgMC41O1xyXG5cdFx0XHR1di55ID0gKHNpblRoZXRhICogMC41ICogc2lnbikgKyAwLjU7XHJcblx0XHRcdHV2cy5wdXNoKHV2LngsIHV2LnkpO1xyXG5cclxuXHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcclxuXHJcblx0XHRcdGluZGV4Kys7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGdlbmVyYXRlIGluZGljZXNcclxuXHJcblx0XHRmb3IgKHggPSAwOyB4IDwgcmFkaWFsU2VnbWVudHM7IHgrKykge1xyXG5cclxuXHRcdFx0dmFyIGMgPSBjZW50ZXJJbmRleFN0YXJ0ICsgeDtcclxuXHRcdFx0dmFyIGkgPSBjZW50ZXJJbmRleEVuZCArIHg7XHJcblxyXG5cdFx0XHRpZiAodG9wID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHRcdC8vIGZhY2UgdG9wXHJcblxyXG5cdFx0XHRcdGluZGljZXMucHVzaChpLCBpICsgMSwgYyk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHQvLyBmYWNlIGJvdHRvbVxyXG5cclxuXHRcdFx0XHRpbmRpY2VzLnB1c2goaSArIDEsIGksIGMpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z3JvdXBDb3VudCArPSAzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxyXG5cclxuXHRcdHNjb3BlLmFkZEdyb3VwKGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIHRvcCA9PT0gdHJ1ZSA/IDEgOiAyKTtcclxuXHJcblx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcclxuXHJcblx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbkN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN5bGluZGVyQnVmZmVyR2VvbWV0cnk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxyXG4gKi9cclxuXHJcbi8vIENvbmVHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gQ29uZUdlb21ldHJ5KHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpIHtcclxuXHJcblx0Q3lsaW5kZXJHZW9tZXRyeS5jYWxsKHRoaXMsIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQ29uZUdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRoZWlnaHQ6IGhlaWdodCxcclxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcclxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcclxuXHRcdG9wZW5FbmRlZDogb3BlbkVuZGVkLFxyXG5cdFx0dGhldGFTdGFydDogdGhldGFTdGFydCxcclxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxyXG5cdH07XHJcblxyXG59XHJcblxyXG5Db25lR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZSk7XHJcbkNvbmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lR2VvbWV0cnk7XHJcblxyXG4vLyBDb25lQnVmZmVyR2VvbWV0cnlcclxuXHJcbmZ1bmN0aW9uIENvbmVCdWZmZXJHZW9tZXRyeShyYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoKSB7XHJcblxyXG5cdEN5bGluZGVyQnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzLCAwLCByYWRpdXMsIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0NvbmVCdWZmZXJHZW9tZXRyeSc7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcclxuXHRcdHJhZGl1czogcmFkaXVzLFxyXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXHJcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXHJcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXHJcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcclxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcclxuXHR9O1xyXG5cclxufVxyXG5cclxuQ29uZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5Db25lQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uZUJ1ZmZlckdlb21ldHJ5O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKiBAYXV0aG9yIGh1Z2hlc1xyXG4gKi9cclxuXHJcbi8vIENpcmNsZUdlb21ldHJ5XHJcblxyXG5mdW5jdGlvbiBDaXJjbGVHZW9tZXRyeShyYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCkge1xyXG5cclxuXHRHZW9tZXRyeS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQ2lyY2xlR2VvbWV0cnknO1xyXG5cclxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XHJcblx0XHRyYWRpdXM6IHJhZGl1cyxcclxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcclxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXHJcblx0XHR0aGV0YUxlbmd0aDogdGhldGFMZW5ndGhcclxuXHR9O1xyXG5cclxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgQ2lyY2xlQnVmZmVyR2VvbWV0cnkocmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpKTtcclxuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcclxuXHJcbn1cclxuXHJcbkNpcmNsZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR2VvbWV0cnkucHJvdG90eXBlKTtcclxuQ2lyY2xlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2lyY2xlR2VvbWV0cnk7XHJcblxyXG4vLyBDaXJjbGVCdWZmZXJHZW9tZXRyeVxyXG5cclxuZnVuY3Rpb24gQ2lyY2xlQnVmZmVyR2VvbWV0cnkocmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGgpIHtcclxuXHJcblx0QnVmZmVyR2VvbWV0cnkuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0NpcmNsZUJ1ZmZlckdlb21ldHJ5JztcclxuXHJcblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xyXG5cdFx0cmFkaXVzOiByYWRpdXMsXHJcblx0XHRzZWdtZW50czogc2VnbWVudHMsXHJcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxyXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXHJcblx0fTtcclxuXHJcblx0cmFkaXVzID0gcmFkaXVzIHx8IDE7XHJcblx0c2VnbWVudHMgPSBzZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoMywgc2VnbWVudHMpIDogODtcclxuXHJcblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xyXG5cdHRoZXRhTGVuZ3RoID0gdGhldGFMZW5ndGggIT09IHVuZGVmaW5lZCA/IHRoZXRhTGVuZ3RoIDogTWF0aC5QSSAqIDI7XHJcblxyXG5cdC8vIGJ1ZmZlcnNcclxuXHJcblx0dmFyIGluZGljZXMgPSBbXTtcclxuXHR2YXIgdmVydGljZXMgPSBbXTtcclxuXHR2YXIgbm9ybWFscyA9IFtdO1xyXG5cdHZhciB1dnMgPSBbXTtcclxuXHJcblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xyXG5cclxuXHR2YXIgaSwgcztcclxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcclxuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHQvLyBjZW50ZXIgcG9pbnRcclxuXHJcblx0dmVydGljZXMucHVzaCgwLCAwLCAwKTtcclxuXHRub3JtYWxzLnB1c2goMCwgMCwgMSk7XHJcblx0dXZzLnB1c2goMC41LCAwLjUpO1xyXG5cclxuXHRmb3IgKHMgPSAwLCBpID0gMzsgcyA8PSBzZWdtZW50czsgcysrLCBpICs9IDMpIHtcclxuXHJcblx0XHR2YXIgc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBzIC8gc2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcclxuXHJcblx0XHQvLyB2ZXJ0ZXhcclxuXHJcblx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKHNlZ21lbnQpO1xyXG5cdFx0dmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLnNpbihzZWdtZW50KTtcclxuXHJcblx0XHR2ZXJ0aWNlcy5wdXNoKHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnopO1xyXG5cclxuXHRcdC8vIG5vcm1hbFxyXG5cclxuXHRcdG5vcm1hbHMucHVzaCgwLCAwLCAxKTtcclxuXHJcblx0XHQvLyB1dnNcclxuXHJcblx0XHR1di54ID0gKHZlcnRpY2VzW2ldIC8gcmFkaXVzICsgMSkgLyAyO1xyXG5cdFx0dXYueSA9ICh2ZXJ0aWNlc1tpICsgMV0gLyByYWRpdXMgKyAxKSAvIDI7XHJcblxyXG5cdFx0dXZzLnB1c2godXYueCwgdXYueSk7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gaW5kaWNlc1xyXG5cclxuXHRmb3IgKGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRpbmRpY2VzLnB1c2goaSwgaSArIDEsIDApO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XHJcblxyXG5cdHRoaXMuc2V0SW5kZXgoaW5kaWNlcyk7XHJcblx0dGhpcy5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHR0aGlzLmFkZEF0dHJpYnV0ZSgnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobm9ybWFscywgMykpO1xyXG5cdHRoaXMuYWRkQXR0cmlidXRlKCd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHV2cywgMikpO1xyXG5cclxufVxyXG5cclxuQ2lyY2xlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpO1xyXG5DaXJjbGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaXJjbGVCdWZmZXJHZW9tZXRyeTtcclxuXHJcblxyXG5cclxudmFyIEdlb21ldHJpZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcblx0V2lyZWZyYW1lR2VvbWV0cnk6IFdpcmVmcmFtZUdlb21ldHJ5LFxyXG5cdFBhcmFtZXRyaWNHZW9tZXRyeTogUGFyYW1ldHJpY0dlb21ldHJ5LFxyXG5cdFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeTogUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5LFxyXG5cdFRldHJhaGVkcm9uR2VvbWV0cnk6IFRldHJhaGVkcm9uR2VvbWV0cnksXHJcblx0VGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTogVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSxcclxuXHRPY3RhaGVkcm9uR2VvbWV0cnk6IE9jdGFoZWRyb25HZW9tZXRyeSxcclxuXHRPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSxcclxuXHRJY29zYWhlZHJvbkdlb21ldHJ5OiBJY29zYWhlZHJvbkdlb21ldHJ5LFxyXG5cdEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk6IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksXHJcblx0RG9kZWNhaGVkcm9uR2VvbWV0cnk6IERvZGVjYWhlZHJvbkdlb21ldHJ5LFxyXG5cdERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSxcclxuXHRQb2x5aGVkcm9uR2VvbWV0cnk6IFBvbHloZWRyb25HZW9tZXRyeSxcclxuXHRQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnk6IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSxcclxuXHRUdWJlR2VvbWV0cnk6IFR1YmVHZW9tZXRyeSxcclxuXHRUdWJlQnVmZmVyR2VvbWV0cnk6IFR1YmVCdWZmZXJHZW9tZXRyeSxcclxuXHRUb3J1c0tub3RHZW9tZXRyeTogVG9ydXNLbm90R2VvbWV0cnksXHJcblx0VG9ydXNLbm90QnVmZmVyR2VvbWV0cnk6IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LFxyXG5cdFRvcnVzR2VvbWV0cnk6IFRvcnVzR2VvbWV0cnksXHJcblx0VG9ydXNCdWZmZXJHZW9tZXRyeTogVG9ydXNCdWZmZXJHZW9tZXRyeSxcclxuXHRUZXh0R2VvbWV0cnk6IFRleHRHZW9tZXRyeSxcclxuXHRUZXh0QnVmZmVyR2VvbWV0cnk6IFRleHRCdWZmZXJHZW9tZXRyeSxcclxuXHRTcGhlcmVHZW9tZXRyeTogU3BoZXJlR2VvbWV0cnksXHJcblx0U3BoZXJlQnVmZmVyR2VvbWV0cnk6IFNwaGVyZUJ1ZmZlckdlb21ldHJ5LFxyXG5cdFJpbmdHZW9tZXRyeTogUmluZ0dlb21ldHJ5LFxyXG5cdFJpbmdCdWZmZXJHZW9tZXRyeTogUmluZ0J1ZmZlckdlb21ldHJ5LFxyXG5cdFBsYW5lR2VvbWV0cnk6IFBsYW5lR2VvbWV0cnksXHJcblx0UGxhbmVCdWZmZXJHZW9tZXRyeTogUGxhbmVCdWZmZXJHZW9tZXRyeSxcclxuXHRMYXRoZUdlb21ldHJ5OiBMYXRoZUdlb21ldHJ5LFxyXG5cdExhdGhlQnVmZmVyR2VvbWV0cnk6IExhdGhlQnVmZmVyR2VvbWV0cnksXHJcblx0U2hhcGVHZW9tZXRyeTogU2hhcGVHZW9tZXRyeSxcclxuXHRTaGFwZUJ1ZmZlckdlb21ldHJ5OiBTaGFwZUJ1ZmZlckdlb21ldHJ5LFxyXG5cdEV4dHJ1ZGVHZW9tZXRyeTogRXh0cnVkZUdlb21ldHJ5LFxyXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LFxyXG5cdEVkZ2VzR2VvbWV0cnk6IEVkZ2VzR2VvbWV0cnksXHJcblx0Q29uZUdlb21ldHJ5OiBDb25lR2VvbWV0cnksXHJcblx0Q29uZUJ1ZmZlckdlb21ldHJ5OiBDb25lQnVmZmVyR2VvbWV0cnksXHJcblx0Q3lsaW5kZXJHZW9tZXRyeTogQ3lsaW5kZXJHZW9tZXRyeSxcclxuXHRDeWxpbmRlckJ1ZmZlckdlb21ldHJ5OiBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LFxyXG5cdENpcmNsZUdlb21ldHJ5OiBDaXJjbGVHZW9tZXRyeSxcclxuXHRDaXJjbGVCdWZmZXJHZW9tZXRyeTogQ2lyY2xlQnVmZmVyR2VvbWV0cnksXHJcblx0Qm94R2VvbWV0cnk6IEJveEdlb21ldHJ5LFxyXG5cdEJveEJ1ZmZlckdlb21ldHJ5OiBCb3hCdWZmZXJHZW9tZXRyeVxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKlxyXG4gKiBwYXJhbWV0ZXJzID0ge1xyXG4gKiAgY29sb3I6IDxUSFJFRS5Db2xvcj5cclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFNoYWRvd01hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1NoYWRvd01hdGVyaWFsJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigweDAwMDAwMCk7XHJcblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkb3dNYXRlcmlhbDtcclxuXHJcblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5pc1NoYWRvd01hdGVyaWFsID0gdHJ1ZTtcclxuXHJcblNoYWRvd01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMuY29sb3IuY29weShzb3VyY2UuY29sb3IpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBSYXdTaGFkZXJNYXRlcmlhbChwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdFNoYWRlck1hdGVyaWFsLmNhbGwodGhpcywgcGFyYW1ldGVycyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdSYXdTaGFkZXJNYXRlcmlhbCc7XHJcblxyXG59XHJcblxyXG5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSk7XHJcblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJhd1NoYWRlck1hdGVyaWFsO1xyXG5cclxuUmF3U2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKlxyXG4gKiBwYXJhbWV0ZXJzID0ge1xyXG4gKiAgY29sb3I6IDxoZXg+LFxyXG4gKiAgcm91Z2huZXNzOiA8ZmxvYXQ+LFxyXG4gKiAgbWV0YWxuZXNzOiA8ZmxvYXQ+LFxyXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcclxuICpcclxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cclxuICpcclxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cclxuICpcclxuICogIGVtaXNzaXZlOiA8aGV4PixcclxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XHJcbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXHJcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxyXG4gKlxyXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXHJcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgcm91Z2huZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgbWV0YWxuZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXHJcbiAqICBlbnZNYXBJbnRlbnNpdHk6IDxmbG9hdD5cclxuICpcclxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcclxuICpcclxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxyXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgc2tpbm5pbmc6IDxib29sPixcclxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxyXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hTdGFuZGFyZE1hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKDB4ZmZmZmZmKTsgLy8gZGlmZnVzZVxyXG5cdHRoaXMucm91Z2huZXNzID0gMC41O1xyXG5cdHRoaXMubWV0YWxuZXNzID0gMC41O1xyXG5cclxuXHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xyXG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xyXG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoMHgwMDAwMDApO1xyXG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XHJcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xyXG5cclxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XHJcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigxLCAxKTtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdHRoaXMucm91Z2huZXNzTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5lbnZNYXAgPSBudWxsO1xyXG5cdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gMS4wO1xyXG5cclxuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XHJcblxyXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XHJcblxyXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xyXG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcclxuXHJcbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcclxuXHJcblx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblx0dGhpcy5yb3VnaG5lc3MgPSBzb3VyY2Uucm91Z2huZXNzO1xyXG5cdHRoaXMubWV0YWxuZXNzID0gc291cmNlLm1ldGFsbmVzcztcclxuXHJcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xyXG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XHJcblxyXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XHJcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcclxuXHJcblx0dGhpcy5lbWlzc2l2ZS5jb3B5KHNvdXJjZS5lbWlzc2l2ZSk7XHJcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcclxuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xyXG5cclxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcclxuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XHJcblxyXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcclxuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcclxuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoc291cmNlLm5vcm1hbFNjYWxlKTtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XHJcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdHRoaXMucm91Z2huZXNzTWFwID0gc291cmNlLnJvdWdobmVzc01hcDtcclxuXHJcblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBzb3VyY2UubWV0YWxuZXNzTWFwO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xyXG5cclxuXHR0aGlzLmVudk1hcCA9IHNvdXJjZS5lbnZNYXA7XHJcblx0dGhpcy5lbnZNYXBJbnRlbnNpdHkgPSBzb3VyY2UuZW52TWFwSW50ZW5zaXR5O1xyXG5cclxuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XHJcblxyXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcclxuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcclxuXHJcblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD5cclxuICogIGNsZWFyY29hdDogPGZsb2F0PlxyXG4gKiAgY2xlYXJjb2F0Um91Z2huZXNzOiA8ZmxvYXQ+XHJcbiAqXHJcbiAqICBzaGVlbjogPENvbG9yPlxyXG4gKlxyXG4gKiAgY2xlYXJjb2F0Tm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcclxuICogIGNsZWFyY29hdE5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hQaHlzaWNhbE1hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWVzaFN0YW5kYXJkTWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy5kZWZpbmVzID0ge1xyXG5cclxuXHRcdCdTVEFOREFSRCc6ICcnLFxyXG5cdFx0J1BIWVNJQ0FMJzogJydcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy50eXBlID0gJ01lc2hQaHlzaWNhbE1hdGVyaWFsJztcclxuXHJcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAwLjU7IC8vIG1hcHMgdG8gRjAgPSAwLjA0XHJcblxyXG5cdHRoaXMuY2xlYXJjb2F0ID0gMC4wO1xyXG5cdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzID0gMC4wO1xyXG5cclxuXHR0aGlzLnNoZWVuID0gbnVsbDsgLy8gbnVsbCB3aWxsIGRpc2FibGUgc2hlZW4gYnNkZlxyXG5cclxuXHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoMSwgMSk7XHJcblx0dGhpcy5jbGVhcmNvYXROb3JtYWxNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLnRyYW5zcGFyZW5jeSA9IDAuMDtcclxuXHJcblx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZSk7XHJcbk1lc2hQaHlzaWNhbE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hQaHlzaWNhbE1hdGVyaWFsO1xyXG5cclxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5kZWZpbmVzID0ge1xyXG5cclxuXHRcdCdTVEFOREFSRCc6ICcnLFxyXG5cdFx0J1BIWVNJQ0FMJzogJydcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xyXG5cclxuXHR0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7XHJcblx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzO1xyXG5cclxuXHRpZiAoc291cmNlLnNoZWVuKSB7IHRoaXMuc2hlZW4gPSAodGhpcy5zaGVlbiB8fCBuZXcgQ29sb3IoKSkuY29weShzb3VyY2Uuc2hlZW4pOyB9XHJcblx0ZWxzZSB7IHRoaXMuc2hlZW4gPSBudWxsOyB9XHJcblxyXG5cdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gc291cmNlLmNsZWFyY29hdE5vcm1hbE1hcDtcclxuXHR0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLmNvcHkoc291cmNlLmNsZWFyY29hdE5vcm1hbFNjYWxlKTtcclxuXHJcblx0dGhpcy50cmFuc3BhcmVuY3kgPSBzb3VyY2UudHJhbnNwYXJlbmN5O1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICpcclxuICogcGFyYW1ldGVycyA9IHtcclxuICogIGNvbG9yOiA8aGV4PixcclxuICogIHNwZWN1bGFyOiA8aGV4PixcclxuICogIHNoaW5pbmVzczogPGZsb2F0PixcclxuICogIG9wYWNpdHk6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XHJcbiAqXHJcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XHJcbiAqXHJcbiAqICBlbWlzc2l2ZTogPGhleD4sXHJcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxyXG4gKiAgZW1pc3NpdmVNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxyXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcclxuICpcclxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxyXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcclxuICpcclxuICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXHJcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcclxuICogIHJlZmxlY3Rpdml0eTogPGZsb2F0PixcclxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcclxuICpcclxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxyXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgc2tpbm5pbmc6IDxib29sPixcclxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxyXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hQaG9uZ01hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ01lc2hQaG9uZ01hdGVyaWFsJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigweGZmZmZmZik7IC8vIGRpZmZ1c2VcclxuXHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKDB4MTExMTExKTtcclxuXHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xyXG5cclxuXHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMubGlnaHRNYXAgPSBudWxsO1xyXG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdHRoaXMuYW9NYXAgPSBudWxsO1xyXG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XHJcblxyXG5cdHRoaXMuZW1pc3NpdmUgPSBuZXcgQ29sb3IoMHgwMDAwMDApO1xyXG5cdHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgPSAxLjA7XHJcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xyXG5cclxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XHJcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigxLCAxKTtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5lbnZNYXAgPSBudWxsO1xyXG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xyXG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gMTtcclxuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XHJcblxyXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9ICdyb3VuZCc7XHJcblxyXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IGZhbHNlO1xyXG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGhvbmdNYXRlcmlhbDtcclxuXHJcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hQaG9uZ01hdGVyaWFsID0gdHJ1ZTtcclxuXHJcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMuY29sb3IuY29weShzb3VyY2UuY29sb3IpO1xyXG5cdHRoaXMuc3BlY3VsYXIuY29weShzb3VyY2Uuc3BlY3VsYXIpO1xyXG5cdHRoaXMuc2hpbmluZXNzID0gc291cmNlLnNoaW5pbmVzcztcclxuXHJcblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xyXG5cclxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xyXG5cdHRoaXMubGlnaHRNYXBJbnRlbnNpdHkgPSBzb3VyY2UubGlnaHRNYXBJbnRlbnNpdHk7XHJcblxyXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XHJcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IHNvdXJjZS5hb01hcEludGVuc2l0eTtcclxuXHJcblx0dGhpcy5lbWlzc2l2ZS5jb3B5KHNvdXJjZS5lbWlzc2l2ZSk7XHJcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcclxuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gc291cmNlLmVtaXNzaXZlSW50ZW5zaXR5O1xyXG5cclxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcclxuXHR0aGlzLmJ1bXBTY2FsZSA9IHNvdXJjZS5idW1wU2NhbGU7XHJcblxyXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcclxuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBzb3VyY2Uubm9ybWFsTWFwVHlwZTtcclxuXHR0aGlzLm5vcm1hbFNjYWxlLmNvcHkoc291cmNlLm5vcm1hbFNjYWxlKTtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSBzb3VyY2UuZGlzcGxhY2VtZW50U2NhbGU7XHJcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XHJcblxyXG5cdHRoaXMuc3BlY3VsYXJNYXAgPSBzb3VyY2Uuc3BlY3VsYXJNYXA7XHJcblxyXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XHJcblxyXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcclxuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcclxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XHJcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSBzb3VyY2Uud2lyZWZyYW1lTGluZWpvaW47XHJcblxyXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xyXG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBncmFkaWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKVxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTWVzaFRvb25NYXRlcmlhbChwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdE1lc2hQaG9uZ01hdGVyaWFsLmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1RPT04nOiAnJyB9O1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaFRvb25NYXRlcmlhbCc7XHJcblxyXG5cdHRoaXMuZ3JhZGllbnRNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcclxuXHJcbn1cclxuXHJcbk1lc2hUb29uTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hUb29uTWF0ZXJpYWw7XHJcblxyXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hUb29uTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuTWVzaFRvb25NYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLmdyYWRpZW50TWFwID0gc291cmNlLmdyYWRpZW50TWFwO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcclxuICpcclxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcclxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXHJcbiAqXHJcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcclxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcclxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PlxyXG4gKlxyXG4gKiAgc2tpbm5pbmc6IDxib29sPixcclxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxyXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbChwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdE1hdGVyaWFsLmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdNZXNoTm9ybWFsTWF0ZXJpYWwnO1xyXG5cclxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xyXG5cdHRoaXMuYnVtcFNjYWxlID0gMTtcclxuXHJcblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xyXG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IFRhbmdlbnRTcGFjZU5vcm1hbE1hcDtcclxuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoMSwgMSk7XHJcblxyXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcclxuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcclxuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xyXG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcclxuXHJcblx0dGhpcy5mb2cgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xyXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNYXRlcmlhbC5wcm90b3R5cGUpO1xyXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaE5vcm1hbE1hdGVyaWFsO1xyXG5cclxuTWVzaE5vcm1hbE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hOb3JtYWxNYXRlcmlhbCA9IHRydWU7XHJcblxyXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5idW1wTWFwID0gc291cmNlLmJ1bXBNYXA7XHJcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xyXG5cclxuXHR0aGlzLm5vcm1hbE1hcCA9IHNvdXJjZS5ub3JtYWxNYXA7XHJcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XHJcblx0dGhpcy5ub3JtYWxTY2FsZS5jb3B5KHNvdXJjZS5ub3JtYWxTY2FsZSk7XHJcblxyXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcclxuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IHNvdXJjZS5kaXNwbGFjZW1lbnRCaWFzO1xyXG5cclxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xyXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcclxuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKlxyXG4gKiBwYXJhbWV0ZXJzID0ge1xyXG4gKiAgY29sb3I6IDxoZXg+LFxyXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcclxuICpcclxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cclxuICpcclxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cclxuICpcclxuICogIGVtaXNzaXZlOiA8aGV4PixcclxuICogIGVtaXNzaXZlSW50ZW5zaXR5OiA8ZmxvYXQ+XHJcbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqXHJcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXHJcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcclxuICogIHJlZmxlY3Rpdml0eTogPGZsb2F0PixcclxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcclxuICpcclxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxyXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgc2tpbm5pbmc6IDxib29sPixcclxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxyXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cclxuICogfVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIE1lc2hMYW1iZXJ0TWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaExhbWJlcnRNYXRlcmlhbCc7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoMHhmZmZmZmYpOyAvLyBkaWZmdXNlXHJcblxyXG5cdHRoaXMubWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5saWdodE1hcCA9IG51bGw7XHJcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcclxuXHJcblx0dGhpcy5hb01hcCA9IG51bGw7XHJcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcclxuXHJcblx0dGhpcy5lbWlzc2l2ZSA9IG5ldyBDb2xvcigweDAwMDAwMCk7XHJcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcclxuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcclxuXHJcblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLmVudk1hcCA9IG51bGw7XHJcblx0dGhpcy5jb21iaW5lID0gTXVsdGlwbHlPcGVyYXRpb247XHJcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xyXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcclxuXHJcblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcclxuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gJ3JvdW5kJztcclxuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcclxuXHJcblx0dGhpcy5za2lubmluZyA9IGZhbHNlO1xyXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5zZXRWYWx1ZXMocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTGFtYmVydE1hdGVyaWFsO1xyXG5cclxuTWVzaExhbWJlcnRNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTGFtYmVydE1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5jb2xvci5jb3B5KHNvdXJjZS5jb2xvcik7XHJcblxyXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcclxuXHJcblx0dGhpcy5saWdodE1hcCA9IHNvdXJjZS5saWdodE1hcDtcclxuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xyXG5cclxuXHR0aGlzLmFvTWFwID0gc291cmNlLmFvTWFwO1xyXG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XHJcblxyXG5cdHRoaXMuZW1pc3NpdmUuY29weShzb3VyY2UuZW1pc3NpdmUpO1xyXG5cdHRoaXMuZW1pc3NpdmVNYXAgPSBzb3VyY2UuZW1pc3NpdmVNYXA7XHJcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcclxuXHJcblx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcclxuXHJcblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xyXG5cdHRoaXMuY29tYmluZSA9IHNvdXJjZS5jb21iaW5lO1xyXG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcclxuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XHJcblxyXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcclxuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lY2FwID0gc291cmNlLndpcmVmcmFtZUxpbmVjYXA7XHJcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcclxuXHJcblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIHBhcmFtZXRlcnMgPSB7XHJcbiAqICBjb2xvcjogPGhleD4sXHJcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxyXG4gKlxyXG4gKiAgbWF0Y2FwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxyXG4gKlxyXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcclxuICpcclxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcclxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXHJcbiAqXHJcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXHJcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcclxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcclxuICpcclxuICogIHNraW5uaW5nOiA8Ym9vbD4sXHJcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcclxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XHJcbiAqIH1cclxuICovXHJcblxyXG5mdW5jdGlvbiBNZXNoTWF0Y2FwTWF0ZXJpYWwocGFyYW1ldGVycykge1xyXG5cclxuXHRNYXRlcmlhbC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnTWVzaE1hdGNhcE1hdGVyaWFsJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigweGZmZmZmZik7IC8vIGRpZmZ1c2VcclxuXHJcblx0dGhpcy5tYXRjYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLm1hcCA9IG51bGw7XHJcblxyXG5cdHRoaXMuYnVtcE1hcCA9IG51bGw7XHJcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xyXG5cclxuXHR0aGlzLm5vcm1hbE1hcCA9IG51bGw7XHJcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xyXG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMigxLCAxKTtcclxuXHJcblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xyXG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XHJcblxyXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xyXG5cclxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XHJcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcclxuXHR0aGlzLm1vcnBoTm9ybWFscyA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnNldFZhbHVlcyhwYXJhbWV0ZXJzKTtcclxuXHJcbn1cclxuXHJcbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1hdGVyaWFsLnByb3RvdHlwZSk7XHJcbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTWF0Y2FwTWF0ZXJpYWw7XHJcblxyXG5NZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaE1hdGNhcE1hdGVyaWFsID0gdHJ1ZTtcclxuXHJcbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xyXG5cclxuXHR0aGlzLmNvbG9yLmNvcHkoc291cmNlLmNvbG9yKTtcclxuXHJcblx0dGhpcy5tYXRjYXAgPSBzb3VyY2UubWF0Y2FwO1xyXG5cclxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XHJcblxyXG5cdHRoaXMuYnVtcE1hcCA9IHNvdXJjZS5idW1wTWFwO1xyXG5cdHRoaXMuYnVtcFNjYWxlID0gc291cmNlLmJ1bXBTY2FsZTtcclxuXHJcblx0dGhpcy5ub3JtYWxNYXAgPSBzb3VyY2Uubm9ybWFsTWFwO1xyXG5cdHRoaXMubm9ybWFsTWFwVHlwZSA9IHNvdXJjZS5ub3JtYWxNYXBUeXBlO1xyXG5cdHRoaXMubm9ybWFsU2NhbGUuY29weShzb3VyY2Uubm9ybWFsU2NhbGUpO1xyXG5cclxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IHNvdXJjZS5kaXNwbGFjZW1lbnRNYXA7XHJcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcclxuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcclxuXHJcblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcclxuXHJcblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcclxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XHJcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICpcclxuICogcGFyYW1ldGVycyA9IHtcclxuICogIGNvbG9yOiA8aGV4PixcclxuICogIG9wYWNpdHk6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICBsaW5ld2lkdGg6IDxmbG9hdD4sXHJcbiAqXHJcbiAqICBzY2FsZTogPGZsb2F0PixcclxuICogIGRhc2hTaXplOiA8ZmxvYXQ+LFxyXG4gKiAgZ2FwU2l6ZTogPGZsb2F0PlxyXG4gKiB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTGluZURhc2hlZE1hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0TGluZUJhc2ljTWF0ZXJpYWwuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpbmVEYXNoZWRNYXRlcmlhbCc7XHJcblxyXG5cdHRoaXMuc2NhbGUgPSAxO1xyXG5cdHRoaXMuZGFzaFNpemUgPSAzO1xyXG5cdHRoaXMuZ2FwU2l6ZSA9IDE7XHJcblxyXG5cdHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlKTtcclxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVEYXNoZWRNYXRlcmlhbDtcclxuXHJcbkxpbmVEYXNoZWRNYXRlcmlhbC5wcm90b3R5cGUuaXNMaW5lRGFzaGVkTWF0ZXJpYWwgPSB0cnVlO1xyXG5cclxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRMaW5lQmFzaWNNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMuc2NhbGUgPSBzb3VyY2Uuc2NhbGU7XHJcblx0dGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTtcclxuXHR0aGlzLmdhcFNpemUgPSBzb3VyY2UuZ2FwU2l6ZTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuXHJcblxyXG52YXIgTWF0ZXJpYWxzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG5cdFNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCxcclxuXHRTcHJpdGVNYXRlcmlhbDogU3ByaXRlTWF0ZXJpYWwsXHJcblx0UmF3U2hhZGVyTWF0ZXJpYWw6IFJhd1NoYWRlck1hdGVyaWFsLFxyXG5cdFNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCxcclxuXHRQb2ludHNNYXRlcmlhbDogUG9pbnRzTWF0ZXJpYWwsXHJcblx0TWVzaFBoeXNpY2FsTWF0ZXJpYWw6IE1lc2hQaHlzaWNhbE1hdGVyaWFsLFxyXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCxcclxuXHRNZXNoUGhvbmdNYXRlcmlhbDogTWVzaFBob25nTWF0ZXJpYWwsXHJcblx0TWVzaFRvb25NYXRlcmlhbDogTWVzaFRvb25NYXRlcmlhbCxcclxuXHRNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCxcclxuXHRNZXNoTGFtYmVydE1hdGVyaWFsOiBNZXNoTGFtYmVydE1hdGVyaWFsLFxyXG5cdE1lc2hEZXB0aE1hdGVyaWFsOiBNZXNoRGVwdGhNYXRlcmlhbCxcclxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsXHJcblx0TWVzaEJhc2ljTWF0ZXJpYWw6IE1lc2hCYXNpY01hdGVyaWFsLFxyXG5cdE1lc2hNYXRjYXBNYXRlcmlhbDogTWVzaE1hdGNhcE1hdGVyaWFsLFxyXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxyXG5cdExpbmVCYXNpY01hdGVyaWFsOiBMaW5lQmFzaWNNYXRlcmlhbCxcclxuXHRNYXRlcmlhbDogTWF0ZXJpYWxcclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciB0c2Nod1xyXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xyXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cclxuICovXHJcblxyXG52YXIgQW5pbWF0aW9uVXRpbHMgPSB7XHJcblxyXG5cdC8vIHNhbWUgYXMgQXJyYXkucHJvdG90eXBlLnNsaWNlLCBidXQgYWxzbyB3b3JrcyBvbiB0eXBlZCBhcnJheXNcclxuXHRhcnJheVNsaWNlOiBmdW5jdGlvbiAoYXJyYXksIGZyb20sIHRvKSB7XHJcblxyXG5cdFx0aWYgKEFuaW1hdGlvblV0aWxzLmlzVHlwZWRBcnJheShhcnJheSkpIHtcclxuXHJcblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxyXG5cdFx0XHQvLyBidXQgYXJyYXkuc3ViYXJyYXkoZnJvbSkgb3IgYXJyYXkuc3ViYXJyYXkoZnJvbSwgbGVuKSBpcyBjb3JyZWN0XHJcblx0XHRcdHJldHVybiBuZXcgYXJyYXkuY29uc3RydWN0b3IoYXJyYXkuc3ViYXJyYXkoZnJvbSwgdG8gIT09IHVuZGVmaW5lZCA/IHRvIDogYXJyYXkubGVuZ3RoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhcnJheS5zbGljZShmcm9tLCB0byk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGNvbnZlcnRzIGFuIGFycmF5IHRvIGEgc3BlY2lmaWMgdHlwZVxyXG5cdGNvbnZlcnRBcnJheTogZnVuY3Rpb24gKGFycmF5LCB0eXBlLCBmb3JjZUNsb25lKSB7XHJcblxyXG5cdFx0aWYgKCFhcnJheSB8fCAvLyBsZXQgJ3VuZGVmaW5lZCcgYW5kICdudWxsJyBwYXNzXHJcblx0XHRcdCFmb3JjZUNsb25lICYmIGFycmF5LmNvbnN0cnVjdG9yID09PSB0eXBlKSB7IHJldHVybiBhcnJheTsgfVxyXG5cclxuXHRcdGlmICh0eXBlb2YgdHlwZS5CWVRFU19QRVJfRUxFTUVOVCA9PT0gJ251bWJlcicpIHtcclxuXHJcblx0XHRcdHJldHVybiBuZXcgdHlwZShhcnJheSk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXkpOyAvLyBjcmVhdGUgQXJyYXlcclxuXHJcblx0fSxcclxuXHJcblx0aXNUeXBlZEFycmF5OiBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdFx0cmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhvYmplY3QpICYmXHJcblx0XHRcdCEob2JqZWN0IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZFxyXG5cdGdldEtleWZyYW1lT3JkZXI6IGZ1bmN0aW9uICh0aW1lcykge1xyXG5cclxuXHRcdGZ1bmN0aW9uIGNvbXBhcmVUaW1lKGksIGopIHtcclxuXHJcblx0XHRcdHJldHVybiB0aW1lc1tpXSAtIHRpbWVzW2pdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbiA9IHRpbWVzLmxlbmd0aDtcclxuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkobik7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSAhPT0gbjsgKytpKSB7IHJlc3VsdFtpXSA9IGk7IH1cclxuXHJcblx0XHRyZXN1bHQuc29ydChjb21wYXJlVGltZSk7XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gdXNlcyB0aGUgYXJyYXkgcHJldmlvdXNseSByZXR1cm5lZCBieSAnZ2V0S2V5ZnJhbWVPcmRlcicgdG8gc29ydCBkYXRhXHJcblx0c29ydGVkQXJyYXk6IGZ1bmN0aW9uICh2YWx1ZXMsIHN0cmlkZSwgb3JkZXIpIHtcclxuXHJcblx0XHR2YXIgblZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XHJcblx0XHR2YXIgcmVzdWx0ID0gbmV3IHZhbHVlcy5jb25zdHJ1Y3RvcihuVmFsdWVzKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgZHN0T2Zmc2V0ID0gMDsgZHN0T2Zmc2V0ICE9PSBuVmFsdWVzOyArK2kpIHtcclxuXHJcblx0XHRcdHZhciBzcmNPZmZzZXQgPSBvcmRlcltpXSAqIHN0cmlkZTtcclxuXHJcblx0XHRcdGZvciAodmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsraikge1xyXG5cclxuXHRcdFx0XHRyZXN1bHRbZHN0T2Zmc2V0KytdID0gdmFsdWVzW3NyY09mZnNldCArIGpdO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBmdW5jdGlvbiBmb3IgcGFyc2luZyBBT1Mga2V5ZnJhbWUgZm9ybWF0c1xyXG5cdGZsYXR0ZW5KU09OOiBmdW5jdGlvbiAoanNvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHZhbHVlUHJvcGVydHlOYW1lKSB7XHJcblxyXG5cdFx0dmFyIGkgPSAxLCBrZXkgPSBqc29uS2V5c1swXTtcclxuXHJcblx0XHR3aGlsZSAoa2V5ICE9PSB1bmRlZmluZWQgJiYga2V5W3ZhbHVlUHJvcGVydHlOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRrZXkgPSBqc29uS2V5c1tpKytdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9IC8vIG5vIGRhdGFcclxuXHJcblx0XHR2YXIgdmFsdWUgPSBrZXlbdmFsdWVQcm9wZXJ0eU5hbWVdO1xyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9IC8vIG5vIGRhdGFcclxuXHJcblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuXHJcblx0XHRcdGRvIHtcclxuXHJcblx0XHRcdFx0dmFsdWUgPSBrZXlbdmFsdWVQcm9wZXJ0eU5hbWVdO1xyXG5cclxuXHRcdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdHRpbWVzLnB1c2goa2V5LnRpbWUpO1xyXG5cdFx0XHRcdFx0dmFsdWVzLnB1c2guYXBwbHkodmFsdWVzLCB2YWx1ZSk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzXHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0a2V5ID0ganNvbktleXNbaSsrXTtcclxuXHJcblx0XHRcdH0gd2hpbGUgKGtleSAhPT0gdW5kZWZpbmVkKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHZhbHVlLnRvQXJyYXkgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Ly8gLi4uYXNzdW1lIFRIUkVFLk1hdGgtaXNoXHJcblxyXG5cdFx0XHRkbyB7XHJcblxyXG5cdFx0XHRcdHZhbHVlID0ga2V5W3ZhbHVlUHJvcGVydHlOYW1lXTtcclxuXHJcblx0XHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHR0aW1lcy5wdXNoKGtleS50aW1lKTtcclxuXHRcdFx0XHRcdHZhbHVlLnRvQXJyYXkodmFsdWVzLCB2YWx1ZXMubGVuZ3RoKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRrZXkgPSBqc29uS2V5c1tpKytdO1xyXG5cclxuXHRcdFx0fSB3aGlsZSAoa2V5ICE9PSB1bmRlZmluZWQpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBvdGhlcndpc2UgcHVzaCBhcy1pc1xyXG5cclxuXHRcdFx0ZG8ge1xyXG5cclxuXHRcdFx0XHR2YWx1ZSA9IGtleVt2YWx1ZVByb3BlcnR5TmFtZV07XHJcblxyXG5cdFx0XHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZXMucHVzaChrZXkudGltZSk7XHJcblx0XHRcdFx0XHR2YWx1ZXMucHVzaCh2YWx1ZSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0a2V5ID0ganNvbktleXNbaSsrXTtcclxuXHJcblx0XHRcdH0gd2hpbGUgKGtleSAhPT0gdW5kZWZpbmVkKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBvZiBpbnRlcnBvbGFudHMgb3ZlciBwYXJhbWV0cmljIHNhbXBsZXMuXHJcbiAqXHJcbiAqIFRoZSBwYXJhbWV0ZXIgZG9tYWluIGlzIG9uZSBkaW1lbnNpb25hbCwgdHlwaWNhbGx5IHRoZSB0aW1lIG9yIGEgcGF0aFxyXG4gKiBhbG9uZyBhIGN1cnZlIGRlZmluZWQgYnkgdGhlIGRhdGEuXHJcbiAqXHJcbiAqIFRoZSBzYW1wbGUgdmFsdWVzIGNhbiBoYXZlIGFueSBkaW1lbnNpb25hbGl0eSBhbmQgZGVyaXZlZCBjbGFzc2VzIG1heVxyXG4gKiBhcHBseSBzcGVjaWFsIGludGVycHJldGF0aW9ucyB0byB0aGUgZGF0YS5cclxuICpcclxuICogVGhpcyBjbGFzcyBwcm92aWRlcyB0aGUgaW50ZXJ2YWwgc2VlayBpbiBhIFRlbXBsYXRlIE1ldGhvZCwgZGVmZXJyaW5nXHJcbiAqIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiB0byBkZXJpdmVkIGNsYXNzZXMuXHJcbiAqXHJcbiAqIFRpbWUgY29tcGxleGl0eSBpcyBPKDEpIGZvciBsaW5lYXIgYWNjZXNzIGNyb3NzaW5nIGF0IG1vc3QgdHdvIHBvaW50c1xyXG4gKiBhbmQgTyhsb2cgTikgZm9yIHJhbmRvbSBhY2Nlc3MsIHdoZXJlIE4gaXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbnMuXHJcbiAqXHJcbiAqIFJlZmVyZW5jZXM6XHJcbiAqXHJcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXHJcbiAqXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBJbnRlcnBvbGFudChwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyKSB7XHJcblxyXG5cdHRoaXMucGFyYW1ldGVyUG9zaXRpb25zID0gcGFyYW1ldGVyUG9zaXRpb25zO1xyXG5cdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcclxuXHJcblx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XHJcblx0XHRyZXN1bHRCdWZmZXIgOiBuZXcgc2FtcGxlVmFsdWVzLmNvbnN0cnVjdG9yKHNhbXBsZVNpemUpO1xyXG5cdHRoaXMuc2FtcGxlVmFsdWVzID0gc2FtcGxlVmFsdWVzO1xyXG5cdHRoaXMudmFsdWVTaXplID0gc2FtcGxlU2l6ZTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oSW50ZXJwb2xhbnQucHJvdG90eXBlLCB7XHJcblxyXG5cdGV2YWx1YXRlOiBmdW5jdGlvbiAodCkge1xyXG5cclxuXHRcdHZhciBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zLFxyXG5cdFx0XHRpMSA9IHRoaXMuX2NhY2hlZEluZGV4LFxyXG5cclxuXHRcdFx0dDEgPSBwcFtpMV0sXHJcblx0XHRcdHQwID0gcHBbaTEgLSAxXTtcclxuXHJcblx0XHR2YWxpZGF0ZV9pbnRlcnZhbDoge1xyXG5cclxuXHRcdFx0c2Vlazoge1xyXG5cclxuXHRcdFx0XHR2YXIgcmlnaHQ7XHJcblxyXG5cdFx0XHRcdGxpbmVhcl9zY2FuOiB7XHJcblxyXG5cdFx0XHRcdFx0Ly8tIFNlZSBodHRwOi8vanNwZXJmLmNvbS9jb21wYXJpc29uLXRvLXVuZGVmaW5lZC8zXHJcblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XHJcblx0XHRcdFx0XHQvLy1cclxuXHRcdFx0XHRcdC8vLSBcdFx0XHRcdGlmICggdCA+PSB0MSB8fCB0MSA9PT0gdW5kZWZpbmVkICkge1xyXG5cdFx0XHRcdFx0Zm9yd2FyZF9zY2FuOiBpZiAoISh0IDwgdDEpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBnaXZlVXBBdCA9IGkxICsgMjsgOykge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodDEgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0IDwgdDApIHsgYnJlYWsgZm9yd2FyZF9zY2FuOyB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYWZ0ZXIgZW5kXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aTEgPSBwcC5sZW5ndGg7XHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IGkxO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKGkxIC0gMSwgdCwgdDApO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChpMSA9PT0gZ2l2ZVVwQXQpIHsgYnJlYWs7IH0gLy8gdGhpcyBsb29wXHJcblxyXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XHJcblx0XHRcdFx0XHRcdFx0dDEgPSBwcFsrK2kxXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKHQgPCB0MSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYXJyaXZlZCBhdCB0aGUgc291Z2h0IGludGVydmFsXHJcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGluZGV4XHJcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xyXG5cdFx0XHRcdFx0XHRicmVhayBsaW5lYXJfc2NhbjtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8tIHNsb3dlciBjb2RlOlxyXG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XHJcblx0XHRcdFx0XHRpZiAoISh0ID49IHQwKSkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gbG9vcGluZz9cclxuXHJcblx0XHRcdFx0XHRcdHZhciB0MWdsb2JhbCA9IHBwWzFdO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHQgPCB0MWdsb2JhbCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpMSA9IDI7IC8vICsgMSwgdXNpbmcgdGhlIHNjYW4gZm9yIHRoZSBkZXRhaWxzXHJcblx0XHRcdFx0XHRcdFx0dDAgPSB0MWdsb2JhbDtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdC8vIGxpbmVhciByZXZlcnNlIHNjYW5cclxuXHJcblx0XHRcdFx0XHRcdGZvciAodmFyIGdpdmVVcEF0ID0gaTEgLSAyOyA7KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICh0MCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmVmb3JlIHN0YXJ0XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSAwO1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKDAsIHQsIHQxKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAoaTEgPT09IGdpdmVVcEF0KSB7IGJyZWFrOyB9IC8vIHRoaXMgbG9vcFxyXG5cclxuXHRcdFx0XHRcdFx0XHR0MSA9IHQwO1xyXG5cdFx0XHRcdFx0XHRcdHQwID0gcHBbLS1pMSAtIDFdO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRpZiAodCA+PSB0MCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYXJyaXZlZCBhdCB0aGUgc291Z2h0IGludGVydmFsXHJcblx0XHRcdFx0XHRcdFx0XHRicmVhayBzZWVrO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBwcmVwYXJlIGJpbmFyeSBzZWFyY2ggb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgaW5kZXhcclxuXHRcdFx0XHRcdFx0cmlnaHQgPSBpMTtcclxuXHRcdFx0XHRcdFx0aTEgPSAwO1xyXG5cdFx0XHRcdFx0XHRicmVhayBsaW5lYXJfc2NhbjtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gdGhlIGludGVydmFsIGlzIHZhbGlkXHJcblxyXG5cdFx0XHRcdFx0YnJlYWsgdmFsaWRhdGVfaW50ZXJ2YWw7XHJcblxyXG5cdFx0XHRcdH0gLy8gbGluZWFyIHNjYW5cclxuXHJcblx0XHRcdFx0Ly8gYmluYXJ5IHNlYXJjaFxyXG5cclxuXHRcdFx0XHR3aGlsZSAoaTEgPCByaWdodCkge1xyXG5cclxuXHRcdFx0XHRcdHZhciBtaWQgPSAoaTEgKyByaWdodCkgPj4+IDE7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHQgPCBwcFttaWRdKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRyaWdodCA9IG1pZDtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0aTEgPSBtaWQgKyAxO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0MSA9IHBwW2kxXTtcclxuXHRcdFx0XHR0MCA9IHBwW2kxIC0gMV07XHJcblxyXG5cdFx0XHRcdC8vIGNoZWNrIGJvdW5kYXJ5IGNhc2VzLCBhZ2FpblxyXG5cclxuXHRcdFx0XHRpZiAodDAgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmJlZm9yZVN0YXJ0XygwLCB0LCB0MSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHQxID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRpMSA9IHBwLmxlbmd0aDtcclxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hZnRlckVuZF8oaTEgLSAxLCB0MCwgdCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gLy8gc2Vla1xyXG5cclxuXHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSBpMTtcclxuXHJcblx0XHRcdHRoaXMuaW50ZXJ2YWxDaGFuZ2VkXyhpMSwgdDAsIHQxKTtcclxuXHJcblx0XHR9IC8vIHZhbGlkYXRlX2ludGVydmFsXHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKGkxLCB0MCwgdCwgdDEpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXR0aW5nczogbnVsbCwgLy8gb3B0aW9uYWwsIHN1YmNsYXNzLXNwZWNpZmljIHNldHRpbmdzIHN0cnVjdHVyZVxyXG5cdC8vIE5vdGU6IFRoZSBpbmRpcmVjdGlvbiBhbGxvd3MgY2VudHJhbCBjb250cm9sIG9mIG1hbnkgaW50ZXJwb2xhbnRzLlxyXG5cclxuXHQvLyAtLS0gUHJvdGVjdGVkIGludGVyZmFjZVxyXG5cclxuXHREZWZhdWx0U2V0dGluZ3NfOiB7fSxcclxuXHJcblx0Z2V0U2V0dGluZ3NfOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2V0dGluZ3MgfHwgdGhpcy5EZWZhdWx0U2V0dGluZ3NfO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5U2FtcGxlVmFsdWVfOiBmdW5jdGlvbiAoaW5kZXgpIHtcclxuXHJcblx0XHQvLyBjb3BpZXMgYSBzYW1wbGUgdmFsdWUgdG8gdGhlIHJlc3VsdCBidWZmZXJcclxuXHJcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXHJcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiBzdHJpZGU7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKytpKSB7XHJcblxyXG5cdFx0XHRyZXN1bHRbaV0gPSB2YWx1ZXNbb2Zmc2V0ICsgaV07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIFRlbXBsYXRlIG1ldGhvZHMgZm9yIGRlcml2ZWQgY2xhc3NlczpcclxuXHJcblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdCwgdDEgKi8pIHtcclxuXHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2NhbGwgdG8gYWJzdHJhY3QgbWV0aG9kJyk7XHJcblx0XHQvLyBpbXBsZW1lbnRhdGlvbnMgc2hhbGwgcmV0dXJuIHRoaXMucmVzdWx0QnVmZmVyXHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVydmFsQ2hhbmdlZF86IGZ1bmN0aW9uICggLyogaTEsIHQwLCB0MSAqLykge1xyXG5cclxuXHRcdC8vIGVtcHR5XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcclxuT2JqZWN0LmFzc2lnbihJbnRlcnBvbGFudC5wcm90b3R5cGUsIHtcclxuXHJcblx0Ly8oIDAsIHQsIHQwICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcclxuXHRiZWZvcmVTdGFydF86IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfLFxyXG5cclxuXHQvLyggTi0xLCB0Ti0xLCB0ICksIHJldHVybnMgdGhpcy5yZXN1bHRCdWZmZXJcclxuXHRhZnRlckVuZF86IEludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfLFxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogRmFzdCBhbmQgc2ltcGxlIGN1YmljIHNwbGluZSBpbnRlcnBvbGFudC5cclxuICpcclxuICogSXQgd2FzIGRlcml2ZWQgZnJvbSBhIEhlcm1pdGlhbiBjb25zdHJ1Y3Rpb24gc2V0dGluZyB0aGUgZmlyc3QgZGVyaXZhdGl2ZVxyXG4gKiBhdCBlYWNoIHNhbXBsZSBwb3NpdGlvbiB0byB0aGUgbGluZWFyIHNsb3BlIGJldHdlZW4gbmVpZ2hib3JpbmcgcG9zaXRpb25zXHJcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxyXG4gKlxyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQ3ViaWNJbnRlcnBvbGFudChwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyKSB7XHJcblxyXG5cdEludGVycG9sYW50LmNhbGwodGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlcik7XHJcblxyXG5cdHRoaXMuX3dlaWdodFByZXYgPSAtIDA7XHJcblx0dGhpcy5fb2Zmc2V0UHJldiA9IC0gMDtcclxuXHR0aGlzLl93ZWlnaHROZXh0ID0gLSAwO1xyXG5cdHRoaXMuX29mZnNldE5leHQgPSAtIDA7XHJcblxyXG59XHJcblxyXG5DdWJpY0ludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShJbnRlcnBvbGFudC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBDdWJpY0ludGVycG9sYW50LFxyXG5cclxuXHREZWZhdWx0U2V0dGluZ3NfOiB7XHJcblxyXG5cdFx0ZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsXHJcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJ2YWxDaGFuZ2VkXzogZnVuY3Rpb24gKGkxLCB0MCwgdDEpIHtcclxuXHJcblx0XHR2YXIgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyxcclxuXHRcdFx0aVByZXYgPSBpMSAtIDIsXHJcblx0XHRcdGlOZXh0ID0gaTEgKyAxLFxyXG5cclxuXHRcdFx0dFByZXYgPSBwcFtpUHJldl0sXHJcblx0XHRcdHROZXh0ID0gcHBbaU5leHRdO1xyXG5cclxuXHRcdGlmICh0UHJldiA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRzd2l0Y2ggKHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nU3RhcnQpIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XHJcblxyXG5cdFx0XHRcdFx0Ly8gZicodDApID0gMFxyXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcclxuXHRcdFx0XHRcdHRQcmV2ID0gMiAqIHQwIC0gdDE7XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcclxuXHJcblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcclxuXHRcdFx0XHRcdGlQcmV2ID0gcHAubGVuZ3RoIC0gMjtcclxuXHRcdFx0XHRcdHRQcmV2ID0gdDAgKyBwcFtpUHJldl0gLSBwcFtpUHJldiArIDFdO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXHJcblxyXG5cdFx0XHRcdFx0Ly8gZicnKHQwKSA9IDAgYS5rLmEuIE5hdHVyYWwgU3BsaW5lXHJcblx0XHRcdFx0XHRpUHJldiA9IGkxO1xyXG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHROZXh0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHN3aXRjaCAodGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdFbmQpIHtcclxuXHJcblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XHJcblxyXG5cdFx0XHRcdFx0Ly8gZicodE4pID0gMFxyXG5cdFx0XHRcdFx0aU5leHQgPSBpMTtcclxuXHRcdFx0XHRcdHROZXh0ID0gMiAqIHQxIC0gdDA7XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgV3JhcEFyb3VuZEVuZGluZzpcclxuXHJcblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcclxuXHRcdFx0XHRcdGlOZXh0ID0gMTtcclxuXHRcdFx0XHRcdHROZXh0ID0gdDEgKyBwcFsxXSAtIHBwWzBdO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRkZWZhdWx0OiAvLyBaZXJvQ3VydmF0dXJlRW5kaW5nXHJcblxyXG5cdFx0XHRcdFx0Ly8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZVxyXG5cdFx0XHRcdFx0aU5leHQgPSBpMSAtIDE7XHJcblx0XHRcdFx0XHR0TmV4dCA9IHQwO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaGFsZkR0ID0gKHQxIC0gdDApICogMC41LFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZTtcclxuXHJcblx0XHR0aGlzLl93ZWlnaHRQcmV2ID0gaGFsZkR0IC8gKHQwIC0gdFByZXYpO1xyXG5cdFx0dGhpcy5fd2VpZ2h0TmV4dCA9IGhhbGZEdCAvICh0TmV4dCAtIHQxKTtcclxuXHRcdHRoaXMuX29mZnNldFByZXYgPSBpUHJldiAqIHN0cmlkZTtcclxuXHRcdHRoaXMuX29mZnNldE5leHQgPSBpTmV4dCAqIHN0cmlkZTtcclxuXHJcblx0fSxcclxuXHJcblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoaTEsIHQwLCB0LCB0MSkge1xyXG5cclxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcclxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cclxuXHRcdFx0bzEgPSBpMSAqIHN0cmlkZSwgbzAgPSBvMSAtIHN0cmlkZSxcclxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBvTiA9IHRoaXMuX29mZnNldE5leHQsXHJcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldiwgd04gPSB0aGlzLl93ZWlnaHROZXh0LFxyXG5cclxuXHRcdFx0cCA9ICh0IC0gdDApIC8gKHQxIC0gdDApLFxyXG5cdFx0XHRwcCA9IHAgKiBwLFxyXG5cdFx0XHRwcHAgPSBwcCAqIHA7XHJcblxyXG5cdFx0Ly8gZXZhbHVhdGUgcG9seW5vbWlhbHNcclxuXHJcblx0XHR2YXIgc1AgPSAtIHdQICogcHBwICsgMiAqIHdQICogcHAgLSB3UCAqIHA7XHJcblx0XHR2YXIgczAgPSAoMSArIHdQKSAqIHBwcCArICgtIDEuNSAtIDIgKiB3UCkgKiBwcCArICgtIDAuNSArIHdQKSAqIHAgKyAxO1xyXG5cdFx0dmFyIHMxID0gKC0gMSAtIHdOKSAqIHBwcCArICgxLjUgKyB3TikgKiBwcCArIDAuNSAqIHA7XHJcblx0XHR2YXIgc04gPSB3TiAqIHBwcCAtIHdOICogcHA7XHJcblxyXG5cdFx0Ly8gY29tYmluZSBkYXRhIGxpbmVhcmx5XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKytpKSB7XHJcblxyXG5cdFx0XHRyZXN1bHRbaV0gPVxyXG5cdFx0XHRcdHNQICogdmFsdWVzW29QICsgaV0gK1xyXG5cdFx0XHRcdHMwICogdmFsdWVzW28wICsgaV0gK1xyXG5cdFx0XHRcdHMxICogdmFsdWVzW28xICsgaV0gK1xyXG5cdFx0XHRcdHNOICogdmFsdWVzW29OICsgaV07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBMaW5lYXJJbnRlcnBvbGFudChwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyKSB7XHJcblxyXG5cdEludGVycG9sYW50LmNhbGwodGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlcik7XHJcblxyXG59XHJcblxyXG5MaW5lYXJJbnRlcnBvbGFudC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoSW50ZXJwb2xhbnQucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogTGluZWFySW50ZXJwb2xhbnQsXHJcblxyXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKGkxLCB0MCwgdCwgdDEpIHtcclxuXHJcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXHJcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHJcblx0XHRcdG9mZnNldDEgPSBpMSAqIHN0cmlkZSxcclxuXHRcdFx0b2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUsXHJcblxyXG5cdFx0XHR3ZWlnaHQxID0gKHQgLSB0MCkgLyAodDEgLSB0MCksXHJcblx0XHRcdHdlaWdodDAgPSAxIC0gd2VpZ2h0MTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArK2kpIHtcclxuXHJcblx0XHRcdHJlc3VsdFtpXSA9XHJcblx0XHRcdFx0dmFsdWVzW29mZnNldDAgKyBpXSAqIHdlaWdodDAgK1xyXG5cdFx0XHRcdHZhbHVlc1tvZmZzZXQxICsgaV0gKiB3ZWlnaHQxO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBJbnRlcnBvbGFudCB0aGF0IGV2YWx1YXRlcyB0byB0aGUgc2FtcGxlIHZhbHVlIGF0IHRoZSBwb3NpdGlvbiBwcmVjZWVkaW5nXHJcbiAqIHRoZSBwYXJhbWV0ZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBEaXNjcmV0ZUludGVycG9sYW50KHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIpIHtcclxuXHJcblx0SW50ZXJwb2xhbnQuY2FsbCh0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyKTtcclxuXHJcbn1cclxuXHJcbkRpc2NyZXRlSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEludGVycG9sYW50LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IERpc2NyZXRlSW50ZXJwb2xhbnQsXHJcblxyXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKGkxIC8qLCB0MCwgdCwgdDEgKi8pIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5jb3B5U2FtcGxlVmFsdWVfKGkxIC0gMSk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEEgdGltZWQgc2VxdWVuY2Ugb2Yga2V5ZnJhbWVzIGZvciBhIHNwZWNpZmljIHByb3BlcnR5LlxyXG4gKlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xyXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cclxuICogQGF1dGhvciB0c2Nod1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEtleWZyYW1lVHJhY2sobmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbikge1xyXG5cclxuXHRpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7IHRocm93IG5ldyBFcnJvcignVEhSRUUuS2V5ZnJhbWVUcmFjazogdHJhY2sgbmFtZSBpcyB1bmRlZmluZWQnKTsgfVxyXG5cdGlmICh0aW1lcyA9PT0gdW5kZWZpbmVkIHx8IHRpbWVzLmxlbmd0aCA9PT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCAnICsgbmFtZSk7IH1cclxuXHJcblx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHJcblx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSh0aW1lcywgdGhpcy5UaW1lQnVmZmVyVHlwZSk7XHJcblx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkodmFsdWVzLCB0aGlzLlZhbHVlQnVmZmVyVHlwZSk7XHJcblxyXG5cdHRoaXMuc2V0SW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uIHx8IHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24pO1xyXG5cclxufVxyXG5cclxuLy8gU3RhdGljIG1ldGhvZHNcclxuXHJcbk9iamVjdC5hc3NpZ24oS2V5ZnJhbWVUcmFjaywge1xyXG5cclxuXHQvLyBTZXJpYWxpemF0aW9uIChpbiBzdGF0aWMgY29udGV4dCwgYmVjYXVzZSBvZiBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uXHJcblx0Ly8gYW5kIGF1dG9tYXRpYyBpbnZvY2F0aW9uIG9mIC50b0pTT04pOlxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICh0cmFjaykge1xyXG5cclxuXHRcdHZhciB0cmFja1R5cGUgPSB0cmFjay5jb25zdHJ1Y3RvcjtcclxuXHJcblx0XHR2YXIganNvbjtcclxuXHJcblx0XHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyB0b0pTT04gbWV0aG9kXHJcblx0XHRpZiAodHJhY2tUeXBlLnRvSlNPTiAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRqc29uID0gdHJhY2tUeXBlLnRvSlNPTih0cmFjayk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSB0aGUgZGF0YSBjYW4gYmUgc2VyaWFsaXplZCBhcy1pc1xyXG5cdFx0XHRqc29uID0ge1xyXG5cclxuXHRcdFx0XHQnbmFtZSc6IHRyYWNrLm5hbWUsXHJcblx0XHRcdFx0J3RpbWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KHRyYWNrLnRpbWVzLCBBcnJheSksXHJcblx0XHRcdFx0J3ZhbHVlcyc6IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSh0cmFjay52YWx1ZXMsIEFycmF5KVxyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHZhciBpbnRlcnBvbGF0aW9uID0gdHJhY2suZ2V0SW50ZXJwb2xhdGlvbigpO1xyXG5cclxuXHRcdFx0aWYgKGludGVycG9sYXRpb24gIT09IHRyYWNrLkRlZmF1bHRJbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdFx0XHRcdGpzb24uaW50ZXJwb2xhdGlvbiA9IGludGVycG9sYXRpb247XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGpzb24udHlwZSA9IHRyYWNrLlZhbHVlVHlwZU5hbWU7IC8vIG1hbmRhdG9yeVxyXG5cclxuXHRcdHJldHVybiBqc29uO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUsIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEtleWZyYW1lVHJhY2ssXHJcblxyXG5cdFRpbWVCdWZmZXJUeXBlOiBGbG9hdDMyQXJyYXksXHJcblxyXG5cdFZhbHVlQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxyXG5cclxuXHREZWZhdWx0SW50ZXJwb2xhdGlvbjogSW50ZXJwb2xhdGVMaW5lYXIsXHJcblxyXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBEaXNjcmV0ZUludGVycG9sYW50KHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEN1YmljSW50ZXJwb2xhbnQodGhpcy50aW1lcywgdGhpcy52YWx1ZXMsIHRoaXMuZ2V0VmFsdWVTaXplKCksIHJlc3VsdCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEludGVycG9sYXRpb246IGZ1bmN0aW9uIChpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdFx0dmFyIGZhY3RvcnlNZXRob2Q7XHJcblxyXG5cdFx0c3dpdGNoIChpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdFx0XHRjYXNlIEludGVycG9sYXRlRGlzY3JldGU6XHJcblxyXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVMaW5lYXI6XHJcblxyXG5cdFx0XHRcdGZhY3RvcnlNZXRob2QgPSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlIEludGVycG9sYXRlU21vb3RoOlxyXG5cclxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZmFjdG9yeU1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgbWVzc2FnZSA9IFwidW5zdXBwb3J0ZWQgaW50ZXJwb2xhdGlvbiBmb3IgXCIgK1xyXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArIFwiIGtleWZyYW1lIHRyYWNrIG5hbWVkIFwiICsgdGhpcy5uYW1lO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcclxuXHRcdFx0XHRpZiAoaW50ZXJwb2xhdGlvbiAhPT0gdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbikge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuc2V0SW50ZXJwb2xhdGlvbih0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGZhdGFsLCBpbiB0aGlzIGNhc2VcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5LZXlmcmFtZVRyYWNrOicsIG1lc3NhZ2UpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jcmVhdGVJbnRlcnBvbGFudCA9IGZhY3RvcnlNZXRob2Q7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEludGVycG9sYXRpb246IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRzd2l0Y2ggKHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQpIHtcclxuXHJcblx0XHRcdGNhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTpcclxuXHJcblx0XHRcdFx0cmV0dXJuIEludGVycG9sYXRlRGlzY3JldGU7XHJcblxyXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxyXG5cclxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVMaW5lYXI7XHJcblxyXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOlxyXG5cclxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRWYWx1ZVNpemU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMubGVuZ3RoIC8gdGhpcy50aW1lcy5sZW5ndGg7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIG1vdmUgYWxsIGtleWZyYW1lcyBlaXRoZXIgZm9yd2FyZHMgb3IgYmFja3dhcmRzIGluIHRpbWVcclxuXHRzaGlmdDogZnVuY3Rpb24gKHRpbWVPZmZzZXQpIHtcclxuXHJcblx0XHRpZiAodGltZU9mZnNldCAhPT0gMC4wKSB7XHJcblxyXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0XHR0aW1lc1tpXSArPSB0aW1lT2Zmc2V0O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gc2NhbGUgYWxsIGtleWZyYW1lIHRpbWVzIGJ5IGEgZmFjdG9yICh1c2VmdWwgZm9yIGZyYW1lIDwtPiBzZWNvbmRzIGNvbnZlcnNpb25zKVxyXG5cdHNjYWxlOiBmdW5jdGlvbiAodGltZVNjYWxlKSB7XHJcblxyXG5cdFx0aWYgKHRpbWVTY2FsZSAhPT0gMS4wKSB7XHJcblxyXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0XHR0aW1lc1tpXSAqPSB0aW1lU2NhbGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZW1vdmVzIGtleWZyYW1lcyBiZWZvcmUgYW5kIGFmdGVyIGFuaW1hdGlvbiB3aXRob3V0IGNoYW5naW5nIGFueSB2YWx1ZXMgd2l0aGluIHRoZSByYW5nZSBbc3RhcnRUaW1lLCBlbmRUaW1lXS5cclxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXHJcblx0dHJpbTogZnVuY3Rpb24gKHN0YXJ0VGltZSwgZW5kVGltZSkge1xyXG5cclxuXHRcdHZhciB0aW1lcyA9IHRoaXMudGltZXMsXHJcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoLFxyXG5cdFx0XHRmcm9tID0gMCxcclxuXHRcdFx0dG8gPSBuS2V5cyAtIDE7XHJcblxyXG5cdFx0d2hpbGUgKGZyb20gIT09IG5LZXlzICYmIHRpbWVzW2Zyb21dIDwgc3RhcnRUaW1lKSB7XHJcblxyXG5cdFx0XHQrK2Zyb207XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHdoaWxlICh0byAhPT0gLSAxICYmIHRpbWVzW3RvXSA+IGVuZFRpbWUpIHtcclxuXHJcblx0XHRcdC0tdG87XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdCsrdG87IC8vIGluY2x1c2l2ZSAtPiBleGNsdXNpdmUgYm91bmRcclxuXHJcblx0XHRpZiAoZnJvbSAhPT0gMCB8fCB0byAhPT0gbktleXMpIHtcclxuXHJcblx0XHRcdC8vIGVtcHR5IHRyYWNrcyBhcmUgZm9yYmlkZGVuLCBzbyBrZWVwIGF0IGxlYXN0IG9uZSBrZXlmcmFtZVxyXG5cdFx0XHRpZiAoZnJvbSA+PSB0bykgeyB0byA9IE1hdGgubWF4KHRvLCAxKSwgZnJvbSA9IHRvIC0gMTsgfVxyXG5cclxuXHRcdFx0dmFyIHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XHJcblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKHRpbWVzLCBmcm9tLCB0byk7XHJcblx0XHRcdHRoaXMudmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSh0aGlzLnZhbHVlcywgZnJvbSAqIHN0cmlkZSwgdG8gKiBzdHJpZGUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gZW5zdXJlIHdlIGRvIG5vdCBnZXQgYSBHYXJiYWdlSW5HYXJiYWdlT3V0IHNpdHVhdGlvbiwgbWFrZSBzdXJlIHRyYWNrcyBhcmUgYXQgbGVhc3QgbWluaW1hbGx5IHZpYWJsZVxyXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcclxuXHJcblx0XHR2YXIgdmFsdWVTaXplID0gdGhpcy5nZXRWYWx1ZVNpemUoKTtcclxuXHRcdGlmICh2YWx1ZVNpemUgLSBNYXRoLmZsb29yKHZhbHVlU2l6ZSkgIT09IDApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IEludmFsaWQgdmFsdWUgc2l6ZSBpbiB0cmFjay4nLCB0aGlzKTtcclxuXHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcclxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXHJcblxyXG5cdFx0XHRuS2V5cyA9IHRpbWVzLmxlbmd0aDtcclxuXHJcblx0XHRpZiAobktleXMgPT09IDApIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IFRyYWNrIGlzIGVtcHR5LicsIHRoaXMpO1xyXG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcHJldlRpbWUgPSBudWxsO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpICE9PSBuS2V5czsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgY3VyclRpbWUgPSB0aW1lc1tpXTtcclxuXHJcblx0XHRcdGlmICh0eXBlb2YgY3VyclRpbWUgPT09ICdudW1iZXInICYmIGlzTmFOKGN1cnJUaW1lKSkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUaW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCBjdXJyVGltZSk7XHJcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IE91dCBvZiBvcmRlciBrZXlzLicsIHRoaXMsIGksIGN1cnJUaW1lLCBwcmV2VGltZSk7XHJcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHByZXZUaW1lID0gY3VyclRpbWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh2YWx1ZXMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0aWYgKEFuaW1hdGlvblV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZXMpKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBuID0gdmFsdWVzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gdmFsdWVzW2ldO1xyXG5cclxuXHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZSkpIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IFZhbHVlIGlzIG5vdCBhIHZhbGlkIG51bWJlci4nLCB0aGlzLCBpLCB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsaWQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIHJlbW92ZXMgZXF1aXZhbGVudCBzZXF1ZW50aWFsIGtleXMgYXMgY29tbW9uIGluIG1vcnBoIHRhcmdldCBzZXF1ZW5jZXNcclxuXHQvLyAoMCwwLDAsMCwxLDEsMSwwLDAsMCwwLDAsMCwwKSAtLT4gKDAsMCwxLDEsMCwwKVxyXG5cdG9wdGltaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcclxuXHRcdFx0dmFsdWVzID0gdGhpcy52YWx1ZXMsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXHJcblxyXG5cdFx0XHRzbW9vdGhJbnRlcnBvbGF0aW9uID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uKCkgPT09IEludGVycG9sYXRlU21vb3RoLFxyXG5cclxuXHRcdFx0d3JpdGVJbmRleCA9IDEsXHJcblx0XHRcdGxhc3RJbmRleCA9IHRpbWVzLmxlbmd0aCAtIDE7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBsYXN0SW5kZXg7ICsraSkge1xyXG5cclxuXHRcdFx0dmFyIGtlZXAgPSBmYWxzZTtcclxuXHJcblx0XHRcdHZhciB0aW1lID0gdGltZXNbaV07XHJcblx0XHRcdHZhciB0aW1lTmV4dCA9IHRpbWVzW2kgKyAxXTtcclxuXHJcblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcclxuXHJcblx0XHRcdGlmICh0aW1lICE9PSB0aW1lTmV4dCAmJiAoaSAhPT0gMSB8fCB0aW1lICE9PSB0aW1lWzBdKSkge1xyXG5cclxuXHRcdFx0XHRpZiAoIXNtb290aEludGVycG9sYXRpb24pIHtcclxuXHJcblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXHJcblxyXG5cdFx0XHRcdFx0dmFyIG9mZnNldCA9IGkgKiBzdHJpZGUsXHJcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXHJcblx0XHRcdFx0XHRcdG9mZnNldE4gPSBvZmZzZXQgKyBzdHJpZGU7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogIT09IHN0cmlkZTsgKytqKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSB2YWx1ZXNbb2Zmc2V0ICsgal07XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IHZhbHVlc1tvZmZzZXRQICsgal0gfHxcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZSAhPT0gdmFsdWVzW29mZnNldE4gKyBqXSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0a2VlcCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGluLXBsYWNlIGNvbXBhY3Rpb25cclxuXHJcblx0XHRcdGlmIChrZWVwKSB7XHJcblxyXG5cdFx0XHRcdGlmIChpICE9PSB3cml0ZUluZGV4KSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZXNbd3JpdGVJbmRleF0gPSB0aW1lc1tpXTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcmVhZE9mZnNldCA9IGkgKiBzdHJpZGUsXHJcblx0XHRcdFx0XHRcdHdyaXRlT2Zmc2V0ID0gd3JpdGVJbmRleCAqIHN0cmlkZTtcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArK2opIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhbHVlc1t3cml0ZU9mZnNldCArIGpdID0gdmFsdWVzW3JlYWRPZmZzZXQgKyBqXTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Kyt3cml0ZUluZGV4O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBmbHVzaCBsYXN0IGtleWZyYW1lIChjb21wYWN0aW9uIGxvb2tzIGFoZWFkKVxyXG5cclxuXHRcdGlmIChsYXN0SW5kZXggPiAwKSB7XHJcblxyXG5cdFx0XHR0aW1lc1t3cml0ZUluZGV4XSA9IHRpbWVzW2xhc3RJbmRleF07XHJcblxyXG5cdFx0XHRmb3IgKHZhciByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsraikge1xyXG5cclxuXHRcdFx0XHR2YWx1ZXNbd3JpdGVPZmZzZXQgKyBqXSA9IHZhbHVlc1tyZWFkT2Zmc2V0ICsgal07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQrK3dyaXRlSW5kZXg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGgpIHtcclxuXHJcblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKHRpbWVzLCAwLCB3cml0ZUluZGV4KTtcclxuXHRcdFx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKHZhbHVlcywgMCwgd3JpdGVJbmRleCAqIHN0cmlkZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB0aW1lcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UodGhpcy50aW1lcywgMCk7XHJcblx0XHR2YXIgdmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSh0aGlzLnZhbHVlcywgMCk7XHJcblxyXG5cdFx0dmFyIFR5cGVkS2V5ZnJhbWVUcmFjayA9IHRoaXMuY29uc3RydWN0b3I7XHJcblx0XHR2YXIgdHJhY2sgPSBuZXcgVHlwZWRLZXlmcmFtZVRyYWNrKHRoaXMubmFtZSwgdGltZXMsIHZhbHVlcyk7XHJcblxyXG5cdFx0Ly8gSW50ZXJwb2xhbnQgYXJndW1lbnQgdG8gY29uc3RydWN0b3IgaXMgbm90IHNhdmVkLCBzbyBjb3B5IHRoZSBmYWN0b3J5IG1ldGhvZCBkaXJlY3RseS5cclxuXHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gdGhpcy5jcmVhdGVJbnRlcnBvbGFudDtcclxuXHJcblx0XHRyZXR1cm4gdHJhY2s7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEEgVHJhY2sgb2YgQm9vbGVhbiBrZXlmcmFtZSB2YWx1ZXMuXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQm9vbGVhbktleWZyYW1lVHJhY2sobmFtZSwgdGltZXMsIHZhbHVlcykge1xyXG5cclxuXHRLZXlmcmFtZVRyYWNrLmNhbGwodGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcyk7XHJcblxyXG59XHJcblxyXG5Cb29sZWFuS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBCb29sZWFuS2V5ZnJhbWVUcmFjayxcclxuXHJcblx0VmFsdWVUeXBlTmFtZTogJ2Jvb2wnLFxyXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXHJcblxyXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZURpc2NyZXRlLFxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IHVuZGVmaW5lZCxcclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZFxyXG5cclxuXHQvLyBOb3RlOiBBY3R1YWxseSB0aGlzIHRyYWNrIGNvdWxkIGhhdmUgYSBvcHRpbWl6ZWQgLyBjb21wcmVzc2VkXHJcblx0Ly8gcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgdmFsdWUgYW5kIGEgY3VzdG9tIGludGVycG9sYW50IHRoYXRcclxuXHQvLyBjb21wdXRlcyBcImZpcnN0VmFsdWUgXiBpc09kZCggaW5kZXggKVwiLlxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBUcmFjayBvZiBrZXlmcmFtZSB2YWx1ZXMgdGhhdCByZXByZXNlbnQgY29sb3IuXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQ29sb3JLZXlmcmFtZVRyYWNrKG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24pIHtcclxuXHJcblx0S2V5ZnJhbWVUcmFjay5jYWxsKHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24pO1xyXG5cclxufVxyXG5cclxuQ29sb3JLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IENvbG9yS2V5ZnJhbWVUcmFjayxcclxuXHJcblx0VmFsdWVUeXBlTmFtZTogJ2NvbG9yJ1xyXG5cclxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXHJcblxyXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxyXG5cclxuXHQvLyBOb3RlOiBWZXJ5IGJhc2ljIGltcGxlbWVudGF0aW9uIGFuZCBub3RoaW5nIHNwZWNpYWwgeWV0LlxyXG5cdC8vIEhvd2V2ZXIsIHRoaXMgaXMgdGhlIHBsYWNlIGZvciBjb2xvciBzcGFjZSBwYXJhbWV0ZXJpemF0aW9uLlxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBUcmFjayBvZiBudW1lcmljIGtleWZyYW1lIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cclxuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBOdW1iZXJLZXlmcmFtZVRyYWNrKG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24pIHtcclxuXHJcblx0S2V5ZnJhbWVUcmFjay5jYWxsKHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24pO1xyXG5cclxufVxyXG5cclxuTnVtYmVyS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBOdW1iZXJLZXlmcmFtZVRyYWNrLFxyXG5cclxuXHRWYWx1ZVR5cGVOYW1lOiAnbnVtYmVyJ1xyXG5cclxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXHJcblxyXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogU3BoZXJpY2FsIGxpbmVhciB1bml0IHF1YXRlcm5pb24gaW50ZXJwb2xhbnQuXHJcbiAqXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQocGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlcikge1xyXG5cclxuXHRJbnRlcnBvbGFudC5jYWxsKHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIpO1xyXG5cclxufVxyXG5cclxuUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShJbnRlcnBvbGFudC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsXHJcblxyXG5cdGludGVycG9sYXRlXzogZnVuY3Rpb24gKGkxLCB0MCwgdCwgdDEpIHtcclxuXHJcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXHJcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxyXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHJcblx0XHRcdG9mZnNldCA9IGkxICogc3RyaWRlLFxyXG5cclxuXHRcdFx0YWxwaGEgPSAodCAtIHQwKSAvICh0MSAtIHQwKTtcclxuXHJcblx0XHRmb3IgKHZhciBlbmQgPSBvZmZzZXQgKyBzdHJpZGU7IG9mZnNldCAhPT0gZW5kOyBvZmZzZXQgKz0gNCkge1xyXG5cclxuXHRcdFx0UXVhdGVybmlvbi5zbGVycEZsYXQocmVzdWx0LCAwLCB2YWx1ZXMsIG9mZnNldCAtIHN0cmlkZSwgdmFsdWVzLCBvZmZzZXQsIGFscGhhKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBUcmFjayBvZiBxdWF0ZXJuaW9uIGtleWZyYW1lIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cclxuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXHJcbiAqIEBhdXRob3IgdHNjaHdcclxuICovXHJcblxyXG5mdW5jdGlvbiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayhuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdEtleWZyYW1lVHJhY2suY2FsbCh0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKTtcclxuXHJcbn1cclxuXHJcblF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLFxyXG5cclxuXHRWYWx1ZVR5cGVOYW1lOiAncXVhdGVybmlvbicsXHJcblxyXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcclxuXHJcblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlTGluZWFyLFxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCh0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0KTtcclxuXHJcblx0fSxcclxuXHJcblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWQgLy8gbm90IHlldCBpbXBsZW1lbnRlZFxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBUcmFjayB0aGF0IGludGVycG9sYXRlcyBTdHJpbmdzXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gU3RyaW5nS2V5ZnJhbWVUcmFjayhuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdEtleWZyYW1lVHJhY2suY2FsbCh0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKTtcclxuXHJcbn1cclxuXHJcblN0cmluZ0tleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEtleWZyYW1lVHJhY2sucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogU3RyaW5nS2V5ZnJhbWVUcmFjayxcclxuXHJcblx0VmFsdWVUeXBlTmFtZTogJ3N0cmluZycsXHJcblx0VmFsdWVCdWZmZXJUeXBlOiBBcnJheSxcclxuXHJcblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXHJcblxyXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogdW5kZWZpbmVkLFxyXG5cclxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZFxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBUcmFjayBvZiB2ZWN0b3JlZCBrZXlmcmFtZSB2YWx1ZXMuXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gVmVjdG9yS2V5ZnJhbWVUcmFjayhuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKSB7XHJcblxyXG5cdEtleWZyYW1lVHJhY2suY2FsbCh0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uKTtcclxuXHJcbn1cclxuXHJcblZlY3RvcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEtleWZyYW1lVHJhY2sucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogVmVjdG9yS2V5ZnJhbWVUcmFjayxcclxuXHJcblx0VmFsdWVUeXBlTmFtZTogJ3ZlY3RvcidcclxuXHJcblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxyXG5cclxuXHQvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWRcclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIFJldXNhYmxlIHNldCBvZiBUcmFja3MgdGhhdCByZXByZXNlbnQgYW4gYW5pbWF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xyXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cclxuICovXHJcblxyXG5mdW5jdGlvbiBBbmltYXRpb25DbGlwKG5hbWUsIGR1cmF0aW9uLCB0cmFja3MpIHtcclxuXHJcblx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHR0aGlzLnRyYWNrcyA9IHRyYWNrcztcclxuXHR0aGlzLmR1cmF0aW9uID0gKGR1cmF0aW9uICE9PSB1bmRlZmluZWQpID8gZHVyYXRpb24gOiAtIDE7XHJcblxyXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHQvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzXHJcblx0aWYgKHRoaXMuZHVyYXRpb24gPCAwKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNldER1cmF0aW9uKCk7XHJcblxyXG5cdH1cclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWUodHlwZU5hbWUpIHtcclxuXHJcblx0c3dpdGNoICh0eXBlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcblxyXG5cdFx0Y2FzZSAnc2NhbGFyJzpcclxuXHRcdGNhc2UgJ2RvdWJsZSc6XHJcblx0XHRjYXNlICdmbG9hdCc6XHJcblx0XHRjYXNlICdudW1iZXInOlxyXG5cdFx0Y2FzZSAnaW50ZWdlcic6XHJcblxyXG5cdFx0XHRyZXR1cm4gTnVtYmVyS2V5ZnJhbWVUcmFjaztcclxuXHJcblx0XHRjYXNlICd2ZWN0b3InOlxyXG5cdFx0Y2FzZSAndmVjdG9yMic6XHJcblx0XHRjYXNlICd2ZWN0b3IzJzpcclxuXHRcdGNhc2UgJ3ZlY3RvcjQnOlxyXG5cclxuXHRcdFx0cmV0dXJuIFZlY3RvcktleWZyYW1lVHJhY2s7XHJcblxyXG5cdFx0Y2FzZSAnY29sb3InOlxyXG5cclxuXHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcclxuXHJcblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcclxuXHJcblx0XHRcdHJldHVybiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaztcclxuXHJcblx0XHRjYXNlICdib29sJzpcclxuXHRcdGNhc2UgJ2Jvb2xlYW4nOlxyXG5cclxuXHRcdFx0cmV0dXJuIEJvb2xlYW5LZXlmcmFtZVRyYWNrO1xyXG5cclxuXHRcdGNhc2UgJ3N0cmluZyc6XHJcblxyXG5cdFx0XHRyZXR1cm4gU3RyaW5nS2V5ZnJhbWVUcmFjaztcclxuXHJcblx0fVxyXG5cclxuXHR0aHJvdyBuZXcgRXJyb3IoJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VLZXlmcmFtZVRyYWNrKGpzb24pIHtcclxuXHJcblx0aWYgKGpzb24udHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayB0eXBlIHVuZGVmaW5lZCwgY2FuIG5vdCBwYXJzZScpO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciB0cmFja1R5cGUgPSBnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lKGpzb24udHlwZSk7XHJcblxyXG5cdGlmIChqc29uLnRpbWVzID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHR2YXIgdGltZXMgPSBbXSwgdmFsdWVzID0gW107XHJcblxyXG5cdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oanNvbi5rZXlzLCB0aW1lcywgdmFsdWVzLCAndmFsdWUnKTtcclxuXHJcblx0XHRqc29uLnRpbWVzID0gdGltZXM7XHJcblx0XHRqc29uLnZhbHVlcyA9IHZhbHVlcztcclxuXHJcblx0fVxyXG5cclxuXHQvLyBkZXJpdmVkIGNsYXNzZXMgY2FuIGRlZmluZSBhIHN0YXRpYyBwYXJzZSBtZXRob2RcclxuXHRpZiAodHJhY2tUeXBlLnBhcnNlICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRyZXR1cm4gdHJhY2tUeXBlLnBhcnNlKGpzb24pO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIGJ5IGRlZmF1bHQsIHdlIGFzc3VtZSBhIGNvbnN0cnVjdG9yIGNvbXBhdGlibGUgd2l0aCB0aGUgYmFzZVxyXG5cdFx0cmV0dXJuIG5ldyB0cmFja1R5cGUoanNvbi5uYW1lLCBqc29uLnRpbWVzLCBqc29uLnZhbHVlcywganNvbi5pbnRlcnBvbGF0aW9uKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihBbmltYXRpb25DbGlwLCB7XHJcblxyXG5cdHBhcnNlOiBmdW5jdGlvbiAoanNvbikge1xyXG5cclxuXHRcdHZhciB0cmFja3MgPSBbXSxcclxuXHRcdFx0anNvblRyYWNrcyA9IGpzb24udHJhY2tzLFxyXG5cdFx0XHRmcmFtZVRpbWUgPSAxLjAgLyAoanNvbi5mcHMgfHwgMS4wKTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGpzb25UcmFja3MubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdHRyYWNrcy5wdXNoKHBhcnNlS2V5ZnJhbWVUcmFjayhqc29uVHJhY2tzW2ldKS5zY2FsZShmcmFtZVRpbWUpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKGpzb24ubmFtZSwganNvbi5kdXJhdGlvbiwgdHJhY2tzKTtcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAoY2xpcCkge1xyXG5cclxuXHRcdHZhciB0cmFja3MgPSBbXSxcclxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xyXG5cclxuXHRcdHZhciBqc29uID0ge1xyXG5cclxuXHRcdFx0J25hbWUnOiBjbGlwLm5hbWUsXHJcblx0XHRcdCdkdXJhdGlvbic6IGNsaXAuZHVyYXRpb24sXHJcblx0XHRcdCd0cmFja3MnOiB0cmFja3MsXHJcblx0XHRcdCd1dWlkJzogY2xpcC51dWlkXHJcblxyXG5cdFx0fTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGNsaXBUcmFja3MubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdHRyYWNrcy5wdXNoKEtleWZyYW1lVHJhY2sudG9KU09OKGNsaXBUcmFja3NbaV0pKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGpzb247XHJcblxyXG5cdH0sXHJcblxyXG5cdENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlOiBmdW5jdGlvbiAobmFtZSwgbW9ycGhUYXJnZXRTZXF1ZW5jZSwgZnBzLCBub0xvb3ApIHtcclxuXHJcblx0XHR2YXIgbnVtTW9ycGhUYXJnZXRzID0gbW9ycGhUYXJnZXRTZXF1ZW5jZS5sZW5ndGg7XHJcblx0XHR2YXIgdHJhY2tzID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBudW1Nb3JwaFRhcmdldHM7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIHRpbWVzID0gW107XHJcblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRcdHRpbWVzLnB1c2goXHJcblx0XHRcdFx0KGkgKyBudW1Nb3JwaFRhcmdldHMgLSAxKSAlIG51bU1vcnBoVGFyZ2V0cyxcclxuXHRcdFx0XHRpLFxyXG5cdFx0XHRcdChpICsgMSkgJSBudW1Nb3JwaFRhcmdldHMpO1xyXG5cclxuXHRcdFx0dmFsdWVzLnB1c2goMCwgMSwgMCk7XHJcblxyXG5cdFx0XHR2YXIgb3JkZXIgPSBBbmltYXRpb25VdGlscy5nZXRLZXlmcmFtZU9yZGVyKHRpbWVzKTtcclxuXHRcdFx0dGltZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSh0aW1lcywgMSwgb3JkZXIpO1xyXG5cdFx0XHR2YWx1ZXMgPSBBbmltYXRpb25VdGlscy5zb3J0ZWRBcnJheSh2YWx1ZXMsIDEsIG9yZGVyKTtcclxuXHJcblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxyXG5cdFx0XHQvLyBsYXN0IGZyYW1lIGFzIHdlbGwgZm9yIHBlcmZlY3QgbG9vcC5cclxuXHRcdFx0aWYgKCFub0xvb3AgJiYgdGltZXNbMF0gPT09IDApIHtcclxuXHJcblx0XHRcdFx0dGltZXMucHVzaChudW1Nb3JwaFRhcmdldHMpO1xyXG5cdFx0XHRcdHZhbHVlcy5wdXNoKHZhbHVlc1swXSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0cmFja3MucHVzaChcclxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcclxuXHRcdFx0XHRcdCcubW9ycGhUYXJnZXRJbmZsdWVuY2VzWycgKyBtb3JwaFRhcmdldFNlcXVlbmNlW2ldLm5hbWUgKyAnXScsXHJcblx0XHRcdFx0XHR0aW1lcywgdmFsdWVzXHJcblx0XHRcdFx0KS5zY2FsZSgxLjAgLyBmcHMpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKG5hbWUsIC0gMSwgdHJhY2tzKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZmluZEJ5TmFtZTogZnVuY3Rpb24gKG9iamVjdE9yQ2xpcEFycmF5LCBuYW1lKSB7XHJcblxyXG5cdFx0dmFyIGNsaXBBcnJheSA9IG9iamVjdE9yQ2xpcEFycmF5O1xyXG5cclxuXHRcdGlmICghQXJyYXkuaXNBcnJheShvYmplY3RPckNsaXBBcnJheSkpIHtcclxuXHJcblx0XHRcdHZhciBvID0gb2JqZWN0T3JDbGlwQXJyYXk7XHJcblx0XHRcdGNsaXBBcnJheSA9IG8uZ2VvbWV0cnkgJiYgby5nZW9tZXRyeS5hbmltYXRpb25zIHx8IG8uYW5pbWF0aW9ucztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjbGlwQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdGlmIChjbGlwQXJyYXlbaV0ubmFtZSA9PT0gbmFtZSkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gY2xpcEFycmF5W2ldO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0fSxcclxuXHJcblx0Q3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXM6IGZ1bmN0aW9uIChtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wKSB7XHJcblxyXG5cdFx0dmFyIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XHJcblxyXG5cdFx0Ly8gdGVzdGVkIHdpdGggaHR0cHM6Ly9yZWdleDEwMS5jb20vIG9uIHRyaWNrIHNlcXVlbmNlc1xyXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XHJcblx0XHR2YXIgcGF0dGVybiA9IC9eKFtcXHctXSo/KShbXFxkXSspJC87XHJcblxyXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXHJcblx0XHQvLyBwYXR0ZXJucyBsaWtlIFdhbGtfMDAxLCBXYWxrXzAwMiwgUnVuXzAwMSwgUnVuXzAwMlxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1tpXTtcclxuXHRcdFx0dmFyIHBhcnRzID0gbW9ycGhUYXJnZXQubmFtZS5tYXRjaChwYXR0ZXJuKTtcclxuXHJcblx0XHRcdGlmIChwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxKSB7XHJcblxyXG5cdFx0XHRcdHZhciBuYW1lID0gcGFydHNbMV07XHJcblxyXG5cdFx0XHRcdHZhciBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBhbmltYXRpb25Ub01vcnBoVGFyZ2V0c1tuYW1lXTtcclxuXHRcdFx0XHRpZiAoIWFuaW1hdGlvbk1vcnBoVGFyZ2V0cykge1xyXG5cclxuXHRcdFx0XHRcdGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzW25hbWVdID0gYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gW107XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0YW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2gobW9ycGhUYXJnZXQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY2xpcHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBuYW1lIGluIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzKSB7XHJcblxyXG5cdFx0XHRjbGlwcy5wdXNoKEFuaW1hdGlvbkNsaXAuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UobmFtZSwgYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbbmFtZV0sIGZwcywgbm9Mb29wKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjbGlwcztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gcGFyc2UgdGhlIGFuaW1hdGlvbi5oaWVyYXJjaHkgZm9ybWF0XHJcblx0cGFyc2VBbmltYXRpb246IGZ1bmN0aW9uIChhbmltYXRpb24sIGJvbmVzKSB7XHJcblxyXG5cdFx0aWYgKCFhbmltYXRpb24pIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyk7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYWRkTm9uZW1wdHlUcmFjayA9IGZ1bmN0aW9uICh0cmFja1R5cGUsIHRyYWNrTmFtZSwgYW5pbWF0aW9uS2V5cywgcHJvcGVydHlOYW1lLCBkZXN0VHJhY2tzKSB7XHJcblxyXG5cdFx0XHQvLyBvbmx5IHJldHVybiB0cmFjayBpZiB0aGVyZSBhcmUgYWN0dWFsbHkga2V5cy5cclxuXHRcdFx0aWYgKGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwKSB7XHJcblxyXG5cdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xyXG5cdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcclxuXHJcblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oYW5pbWF0aW9uS2V5cywgdGltZXMsIHZhbHVlcywgcHJvcGVydHlOYW1lKTtcclxuXHJcblx0XHRcdFx0Ly8gZW1wdHkga2V5cyBhcmUgZmlsdGVyZWQgb3V0LCBzbyBjaGVjayBhZ2FpblxyXG5cdFx0XHRcdGlmICh0aW1lcy5sZW5ndGggIT09IDApIHtcclxuXHJcblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2gobmV3IHRyYWNrVHlwZSh0cmFja05hbWUsIHRpbWVzLCB2YWx1ZXMpKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xyXG5cclxuXHRcdHZhciBjbGlwTmFtZSA9IGFuaW1hdGlvbi5uYW1lIHx8ICdkZWZhdWx0JztcclxuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxyXG5cdFx0dmFyIGR1cmF0aW9uID0gYW5pbWF0aW9uLmxlbmd0aCB8fCAtIDE7XHJcblx0XHR2YXIgZnBzID0gYW5pbWF0aW9uLmZwcyB8fCAzMDtcclxuXHJcblx0XHR2YXIgaGllcmFyY2h5VHJhY2tzID0gYW5pbWF0aW9uLmhpZXJhcmNoeSB8fCBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBoID0gMDsgaCA8IGhpZXJhcmNoeVRyYWNrcy5sZW5ndGg7IGgrKykge1xyXG5cclxuXHRcdFx0dmFyIGFuaW1hdGlvbktleXMgPSBoaWVyYXJjaHlUcmFja3NbaF0ua2V5cztcclxuXHJcblx0XHRcdC8vIHNraXAgZW1wdHkgdHJhY2tzXHJcblx0XHRcdGlmICghYW5pbWF0aW9uS2V5cyB8fCBhbmltYXRpb25LZXlzLmxlbmd0aCA9PT0gMCkgeyBjb250aW51ZTsgfVxyXG5cclxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCB0YXJnZXRzXHJcblx0XHRcdGlmIChhbmltYXRpb25LZXlzWzBdLm1vcnBoVGFyZ2V0cykge1xyXG5cclxuXHRcdFx0XHQvLyBmaWd1cmUgb3V0IGFsbCBtb3JwaCB0YXJnZXRzIHVzZWQgaW4gdGhpcyB0cmFja1xyXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldE5hbWVzID0ge307XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgYW5pbWF0aW9uS2V5cy5sZW5ndGg7IGsrKykge1xyXG5cclxuXHRcdFx0XHRcdGlmIChhbmltYXRpb25LZXlzW2tdLm1vcnBoVGFyZ2V0cykge1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzW2tdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7IG0rKykge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzW2FuaW1hdGlvbktleXNba10ubW9ycGhUYXJnZXRzW21dXSA9IC0gMTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gY3JlYXRlIGEgdHJhY2sgZm9yIGVhY2ggbW9ycGggdGFyZ2V0IHdpdGggYWxsIHplcm9cclxuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxyXG5cdFx0XHRcdC8vIHRoZSBtb3JwaFRhcmdldCBpcyBuYW1lZC5cclxuXHRcdFx0XHRmb3IgKHZhciBtb3JwaFRhcmdldE5hbWUgaW4gbW9ycGhUYXJnZXROYW1lcykge1xyXG5cclxuXHRcdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xyXG5cdFx0XHRcdFx0dmFyIHZhbHVlcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIG0gPSAwOyBtICE9PSBhbmltYXRpb25LZXlzW2tdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrbSkge1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGFuaW1hdGlvbktleSA9IGFuaW1hdGlvbktleXNba107XHJcblxyXG5cdFx0XHRcdFx0XHR0aW1lcy5wdXNoKGFuaW1hdGlvbktleS50aW1lKTtcclxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goKGFuaW1hdGlvbktleS5tb3JwaFRhcmdldCA9PT0gbW9ycGhUYXJnZXROYW1lKSA/IDEgOiAwKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dHJhY2tzLnB1c2gobmV3IE51bWJlcktleWZyYW1lVHJhY2soJy5tb3JwaFRhcmdldEluZmx1ZW5jZVsnICsgbW9ycGhUYXJnZXROYW1lICsgJ10nLCB0aW1lcywgdmFsdWVzKSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZHVyYXRpb24gPSBtb3JwaFRhcmdldE5hbWVzLmxlbmd0aCAqIChmcHMgfHwgMS4wKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cclxuXHJcblx0XHRcdFx0dmFyIGJvbmVOYW1lID0gJy5ib25lc1snICsgYm9uZXNbaF0ubmFtZSArICddJztcclxuXHJcblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcclxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5wb3NpdGlvbicsXHJcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncG9zJywgdHJhY2tzKTtcclxuXHJcblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcclxuXHRcdFx0XHRcdFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucXVhdGVybmlvbicsXHJcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAncm90JywgdHJhY2tzKTtcclxuXHJcblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcclxuXHRcdFx0XHRcdFZlY3RvcktleWZyYW1lVHJhY2ssIGJvbmVOYW1lICsgJy5zY2FsZScsXHJcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRyYWNrcy5sZW5ndGggPT09IDApIHtcclxuXHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgY2xpcCA9IG5ldyBBbmltYXRpb25DbGlwKGNsaXBOYW1lLCBkdXJhdGlvbiwgdHJhY2tzKTtcclxuXHJcblx0XHRyZXR1cm4gY2xpcDtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKEFuaW1hdGlvbkNsaXAucHJvdG90eXBlLCB7XHJcblxyXG5cdHJlc2V0RHVyYXRpb246IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdHJhY2tzID0gdGhpcy50cmFja3MsIGR1cmF0aW9uID0gMDtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbiA9IHRyYWNrcy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0dmFyIHRyYWNrID0gdGhpcy50cmFja3NbaV07XHJcblxyXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KGR1cmF0aW9uLCB0cmFjay50aW1lc1t0cmFjay50aW1lcy5sZW5ndGggLSAxXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dHJpbTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdHRoaXMudHJhY2tzW2ldLnRyaW0oMCwgdGhpcy5kdXJhdGlvbik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB2YWxpZCA9IHRydWU7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1tpXS52YWxpZGF0ZSgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsaWQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdG9wdGltaXplOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy50cmFja3NbaV0ub3B0aW1pemUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB0cmFja3MgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR0cmFja3MucHVzaCh0aGlzLnRyYWNrc1tpXS5jbG9uZSgpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKHRoaXMubmFtZSwgdGhpcy5kdXJhdGlvbiwgdHJhY2tzKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG52YXIgQ2FjaGUgPSB7XHJcblxyXG5cdGVuYWJsZWQ6IGZhbHNlLFxyXG5cclxuXHRmaWxlczoge30sXHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKGtleSwgZmlsZSkge1xyXG5cclxuXHRcdGlmICh0aGlzLmVuYWJsZWQgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQWRkaW5nIGtleTonLCBrZXkgKTtcclxuXHJcblx0XHR0aGlzLmZpbGVzW2tleV0gPSBmaWxlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuXHJcblx0XHRpZiAodGhpcy5lbmFibGVkID09PSBmYWxzZSkgeyByZXR1cm47IH1cclxuXHJcblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0NoZWNraW5nIGtleTonLCBrZXkgKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5maWxlc1trZXldO1xyXG5cclxuXHR9LFxyXG5cclxuXHRyZW1vdmU6IGZ1bmN0aW9uIChrZXkpIHtcclxuXHJcblx0XHRkZWxldGUgdGhpcy5maWxlc1trZXldO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGVhcjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuZmlsZXMgPSB7fTtcclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIExvYWRpbmdNYW5hZ2VyKG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcikge1xyXG5cclxuXHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHR2YXIgaXNMb2FkaW5nID0gZmFsc2U7XHJcblx0dmFyIGl0ZW1zTG9hZGVkID0gMDtcclxuXHR2YXIgaXRlbXNUb3RhbCA9IDA7XHJcblx0dmFyIHVybE1vZGlmaWVyID0gdW5kZWZpbmVkO1xyXG5cdHZhciBoYW5kbGVycyA9IFtdO1xyXG5cclxuXHQvLyBSZWZlciB0byAjNTY4OSBmb3IgdGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3Qgc2V0IC5vblN0YXJ0XHJcblx0Ly8gaW4gdGhlIGNvbnN0cnVjdG9yXHJcblxyXG5cdHRoaXMub25TdGFydCA9IHVuZGVmaW5lZDtcclxuXHR0aGlzLm9uTG9hZCA9IG9uTG9hZDtcclxuXHR0aGlzLm9uUHJvZ3Jlc3MgPSBvblByb2dyZXNzO1xyXG5cdHRoaXMub25FcnJvciA9IG9uRXJyb3I7XHJcblxyXG5cdHRoaXMuaXRlbVN0YXJ0ID0gZnVuY3Rpb24gKHVybCkge1xyXG5cclxuXHRcdGl0ZW1zVG90YWwrKztcclxuXHJcblx0XHRpZiAoaXNMb2FkaW5nID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0aWYgKHNjb3BlLm9uU3RhcnQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRzY29wZS5vblN0YXJ0KHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLml0ZW1FbmQgPSBmdW5jdGlvbiAodXJsKSB7XHJcblxyXG5cdFx0aXRlbXNMb2FkZWQrKztcclxuXHJcblx0XHRpZiAoc2NvcGUub25Qcm9ncmVzcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRzY29wZS5vblByb2dyZXNzKHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaXRlbXNMb2FkZWQgPT09IGl0ZW1zVG90YWwpIHtcclxuXHJcblx0XHRcdGlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKHNjb3BlLm9uTG9hZCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHNjb3BlLm9uTG9hZCgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5pdGVtRXJyb3IgPSBmdW5jdGlvbiAodXJsKSB7XHJcblxyXG5cdFx0aWYgKHNjb3BlLm9uRXJyb3IgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0c2NvcGUub25FcnJvcih1cmwpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5yZXNvbHZlVVJMID0gZnVuY3Rpb24gKHVybCkge1xyXG5cclxuXHRcdGlmICh1cmxNb2RpZmllcikge1xyXG5cclxuXHRcdFx0cmV0dXJuIHVybE1vZGlmaWVyKHVybCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB1cmw7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuc2V0VVJMTW9kaWZpZXIgPSBmdW5jdGlvbiAodHJhbnNmb3JtKSB7XHJcblxyXG5cdFx0dXJsTW9kaWZpZXIgPSB0cmFuc2Zvcm07XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH07XHJcblxyXG5cdHRoaXMuYWRkSGFuZGxlciA9IGZ1bmN0aW9uIChyZWdleCwgbG9hZGVyKSB7XHJcblxyXG5cdFx0aGFuZGxlcnMucHVzaChyZWdleCwgbG9hZGVyKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fTtcclxuXHJcblx0dGhpcy5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKHJlZ2V4KSB7XHJcblxyXG5cdFx0dmFyIGluZGV4ID0gaGFuZGxlcnMuaW5kZXhPZihyZWdleCk7XHJcblxyXG5cdFx0aWYgKGluZGV4ICE9PSAtIDEpIHtcclxuXHJcblx0XHRcdGhhbmRsZXJzLnNwbGljZShpbmRleCwgMik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9O1xyXG5cclxuXHR0aGlzLmdldEhhbmRsZXIgPSBmdW5jdGlvbiAoZmlsZSkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XHJcblxyXG5cdFx0XHR2YXIgcmVnZXggPSBoYW5kbGVyc1tpXTtcclxuXHRcdFx0dmFyIGxvYWRlciA9IGhhbmRsZXJzW2kgKyAxXTtcclxuXHJcblx0XHRcdGlmIChyZWdleC50ZXN0KGZpbGUpKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBsb2FkZXI7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudWxsO1xyXG5cclxuXHR9O1xyXG5cclxufVxyXG5cclxudmFyIERlZmF1bHRMb2FkaW5nTWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlcigpO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0dGhpcy5tYW5hZ2VyID0gKG1hbmFnZXIgIT09IHVuZGVmaW5lZCkgPyBtYW5hZ2VyIDogRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xyXG5cclxuXHR0aGlzLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XHJcblx0dGhpcy5wYXRoID0gJyc7XHJcblx0dGhpcy5yZXNvdXJjZVBhdGggPSAnJztcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oTG9hZGVyLnByb3RvdHlwZSwge1xyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAoIC8qIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICovKSB7IH0sXHJcblxyXG5cdHBhcnNlOiBmdW5jdGlvbiAoIC8qIGRhdGEgKi8pIHsgfSxcclxuXHJcblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uIChjcm9zc09yaWdpbikge1xyXG5cclxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRQYXRoOiBmdW5jdGlvbiAocGF0aCkge1xyXG5cclxuXHRcdHRoaXMucGF0aCA9IHBhdGg7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0UmVzb3VyY2VQYXRoOiBmdW5jdGlvbiAocmVzb3VyY2VQYXRoKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG52YXIgbG9hZGluZyA9IHt9O1xyXG5cclxuZnVuY3Rpb24gRmlsZUxvYWRlcihtYW5hZ2VyKSB7XHJcblxyXG5cdExvYWRlci5jYWxsKHRoaXMsIG1hbmFnZXIpO1xyXG5cclxufVxyXG5cclxuRmlsZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEZpbGVMb2FkZXIsXHJcblxyXG5cdGxvYWQ6IGZ1bmN0aW9uICh1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcikge1xyXG5cclxuXHRcdGlmICh1cmwgPT09IHVuZGVmaW5lZCkgeyB1cmwgPSAnJzsgfVxyXG5cclxuXHRcdGlmICh0aGlzLnBhdGggIT09IHVuZGVmaW5lZCkgeyB1cmwgPSB0aGlzLnBhdGggKyB1cmw7IH1cclxuXHJcblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCh1cmwpO1xyXG5cclxuXHRcdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCh1cmwpO1xyXG5cclxuXHRcdGlmIChjYWNoZWQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQodXJsKTtcclxuXHJcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRpZiAob25Mb2FkKSB7IG9uTG9hZChjYWNoZWQpOyB9XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0fSwgMCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayBpZiByZXF1ZXN0IGlzIGR1cGxpY2F0ZVxyXG5cclxuXHRcdGlmIChsb2FkaW5nW3VybF0gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0bG9hZGluZ1t1cmxdLnB1c2goe1xyXG5cclxuXHRcdFx0XHRvbkxvYWQ6IG9uTG9hZCxcclxuXHRcdFx0XHRvblByb2dyZXNzOiBvblByb2dyZXNzLFxyXG5cdFx0XHRcdG9uRXJyb3I6IG9uRXJyb3JcclxuXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayBmb3IgZGF0YTogVVJJXHJcblx0XHR2YXIgZGF0YVVyaVJlZ2V4ID0gL15kYXRhOiguKj8pKDtiYXNlNjQpPywoLiopJC87XHJcblx0XHR2YXIgZGF0YVVyaVJlZ2V4UmVzdWx0ID0gdXJsLm1hdGNoKGRhdGFVcmlSZWdleCk7XHJcblxyXG5cdFx0Ly8gU2FmYXJpIGNhbiBub3QgaGFuZGxlIERhdGEgVVJJcyB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0IHNvIHByb2Nlc3MgbWFudWFsbHlcclxuXHRcdGlmIChkYXRhVXJpUmVnZXhSZXN1bHQpIHtcclxuXHJcblx0XHRcdHZhciBtaW1lVHlwZSA9IGRhdGFVcmlSZWdleFJlc3VsdFsxXTtcclxuXHRcdFx0dmFyIGlzQmFzZTY0ID0gISFkYXRhVXJpUmVnZXhSZXN1bHRbMl07XHJcblx0XHRcdHZhciBkYXRhID0gZGF0YVVyaVJlZ2V4UmVzdWx0WzNdO1xyXG5cclxuXHRcdFx0ZGF0YSA9IGRlY29kZVVSSUNvbXBvbmVudChkYXRhKTtcclxuXHJcblx0XHRcdGlmIChpc0Jhc2U2NCkgeyBkYXRhID0gYXRvYihkYXRhKTsgfVxyXG5cclxuXHRcdFx0dHJ5IHtcclxuXHJcblx0XHRcdFx0dmFyIHJlc3BvbnNlO1xyXG5cdFx0XHRcdHZhciByZXNwb25zZVR5cGUgPSAodGhpcy5yZXNwb25zZVR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKCk7XHJcblxyXG5cdFx0XHRcdHN3aXRjaCAocmVzcG9uc2VUeXBlKSB7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxyXG5cdFx0XHRcdFx0Y2FzZSAnYmxvYic6XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoKTtcclxuXHJcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0XHR2aWV3W2ldID0gZGF0YS5jaGFyQ29kZUF0KGkpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlVHlwZSA9PT0gJ2Jsb2InKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gbmV3IEJsb2IoW3ZpZXcuYnVmZmVyXSwgeyB0eXBlOiBtaW1lVHlwZSB9KTtcclxuXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gdmlldy5idWZmZXI7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdkb2N1bWVudCc6XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoZGF0YSwgbWltZVR5cGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnanNvbic6XHJcblxyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRkZWZhdWx0OiAvLyAndGV4dCcgb3Igb3RoZXJcclxuXHJcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gZGF0YTtcclxuXHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdC8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lc1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChvbkxvYWQpIHsgb25Mb2FkKHJlc3BvbnNlKTsgfVxyXG5cclxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0XHR9LCAwKTtcclxuXHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblxyXG5cdFx0XHRcdC8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lc1xyXG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChvbkVycm9yKSB7IG9uRXJyb3IoZXJyb3IpOyB9XHJcblxyXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IodXJsKTtcclxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0XHR9LCAwKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gSW5pdGlhbGlzZSBhcnJheSBmb3IgZHVwbGljYXRlIHJlcXVlc3RzXHJcblxyXG5cdFx0XHRsb2FkaW5nW3VybF0gPSBbXTtcclxuXHJcblx0XHRcdGxvYWRpbmdbdXJsXS5wdXNoKHtcclxuXHJcblx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXHJcblx0XHRcdFx0b25Qcm9ncmVzczogb25Qcm9ncmVzcyxcclxuXHRcdFx0XHRvbkVycm9yOiBvbkVycm9yXHJcblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG5cdFx0XHRyZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRyZXF1ZXN0ICYmIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciAmJiByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcblx0XHRcdFx0dmFyIHJlc3BvbnNlID0gdGhpcy5yZXNwb25zZTtcclxuXHJcblx0XHRcdFx0Q2FjaGUuYWRkKHVybCwgcmVzcG9uc2UpO1xyXG5cclxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1t1cmxdO1xyXG5cclxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1t1cmxdO1xyXG5cclxuXHRcdFx0XHRpZiAodGhpcy5zdGF0dXMgPT09IDIwMCB8fCB0aGlzLnN0YXR1cyA9PT0gMCkge1xyXG5cclxuXHRcdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIEhUVFAgU3RhdHVzIDAgd2hlbiB1c2luZyBub24taHR0cCBwcm90b2NvbFxyXG5cdFx0XHRcdFx0Ly8gZS5nLiAnZmlsZTovLycgb3IgJ2RhdGE6Ly8nLiBIYW5kbGUgYXMgc3VjY2Vzcy5cclxuXHJcblx0XHRcdFx0XHRpZiAodGhpcy5zdGF0dXMgPT09IDApIHsgY29uc29sZS53YXJuKCdUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLicpOyB9XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTtcclxuXHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrLm9uTG9hZCkgeyBjYWxsYmFjay5vbkxvYWQocmVzcG9uc2UpOyB9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XHJcblx0XHRcdFx0XHRcdGlmIChjYWxsYmFjay5vbkVycm9yKSB7IGNhbGxiYWNrLm9uRXJyb3IoZXZlbnQpOyB9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKHVybCk7XHJcblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSwgZmFsc2UpO1xyXG5cclxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChldmVudCkge1xyXG5cclxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1t1cmxdO1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXTtcclxuXHRcdFx0XHRcdGlmIChjYWxsYmFjay5vblByb2dyZXNzKSB7IGNhbGxiYWNrLm9uUHJvZ3Jlc3MoZXZlbnQpOyB9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sIGZhbHNlKTtcclxuXHJcblx0XHRcdHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbdXJsXTtcclxuXHJcblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbdXJsXTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XHJcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2sub25FcnJvcikgeyBjYWxsYmFjay5vbkVycm9yKGV2ZW50KTsgfVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKHVybCk7XHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKHVybCk7XHJcblxyXG5cdFx0XHR9LCBmYWxzZSk7XHJcblxyXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcblxyXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nW3VybF07XHJcblxyXG5cdFx0XHRcdGRlbGV0ZSBsb2FkaW5nW3VybF07XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzW2ldO1xyXG5cdFx0XHRcdFx0aWYgKGNhbGxiYWNrLm9uRXJyb3IpIHsgY2FsbGJhY2sub25FcnJvcihldmVudCk7IH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvcih1cmwpO1xyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0fSwgZmFsc2UpO1xyXG5cclxuXHRcdFx0aWYgKHRoaXMucmVzcG9uc2VUeXBlICE9PSB1bmRlZmluZWQpIHsgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTsgfVxyXG5cdFx0XHRpZiAodGhpcy53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCkgeyByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzOyB9XHJcblxyXG5cdFx0XHRpZiAocmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKSB7IHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZSh0aGlzLm1pbWVUeXBlICE9PSB1bmRlZmluZWQgPyB0aGlzLm1pbWVUeXBlIDogJ3RleHQvcGxhaW4nKTsgfVxyXG5cclxuXHRcdFx0Zm9yICh2YXIgaGVhZGVyIGluIHRoaXMucmVxdWVzdEhlYWRlcikge1xyXG5cclxuXHRcdFx0XHRyZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCB0aGlzLnJlcXVlc3RIZWFkZXJbaGVhZGVyXSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KHVybCk7XHJcblxyXG5cdFx0cmV0dXJuIHJlcXVlc3Q7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJlc3BvbnNlVHlwZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0dGhpcy5yZXNwb25zZVR5cGUgPSB2YWx1ZTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRXaXRoQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMud2l0aENyZWRlbnRpYWxzID0gdmFsdWU7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0TWltZVR5cGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMubWltZVR5cGUgPSB2YWx1ZTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHR0aGlzLnJlcXVlc3RIZWFkZXIgPSB2YWx1ZTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEFuaW1hdGlvbkxvYWRlcihtYW5hZ2VyKSB7XHJcblxyXG5cdExvYWRlci5jYWxsKHRoaXMsIG1hbmFnZXIpO1xyXG5cclxufVxyXG5cclxuQW5pbWF0aW9uTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMb2FkZXIucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogQW5pbWF0aW9uTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlcihzY29wZS5tYW5hZ2VyKTtcclxuXHRcdGxvYWRlci5zZXRQYXRoKHNjb3BlLnBhdGgpO1xyXG5cdFx0bG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAodGV4dCkge1xyXG5cclxuXHRcdFx0b25Mb2FkKHNjb3BlLnBhcnNlKEpTT04ucGFyc2UodGV4dCkpKTtcclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2U6IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0dmFyIGFuaW1hdGlvbnMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGpzb24ubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZShqc29uW2ldKTtcclxuXHJcblx0XHRcdGFuaW1hdGlvbnMucHVzaChjbGlwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGFuaW1hdGlvbnM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqXHJcbiAqIEFic3RyYWN0IEJhc2UgY2xhc3MgdG8gYmxvY2sgYmFzZWQgdGV4dHVyZXMgbG9hZGVyIChkZHMsIHB2ciwgLi4uKVxyXG4gKlxyXG4gKiBTdWIgY2xhc3NlcyBoYXZlIHRvIGltcGxlbWVudCB0aGUgcGFyc2UoKSBtZXRob2Qgd2hpY2ggd2lsbCBiZSB1c2VkIGluIGxvYWQoKS5cclxuICovXHJcblxyXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZUxvYWRlcihtYW5hZ2VyKSB7XHJcblxyXG5cdExvYWRlci5jYWxsKHRoaXMsIG1hbmFnZXIpO1xyXG5cclxufVxyXG5cclxuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExvYWRlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBDb21wcmVzc2VkVGV4dHVyZUxvYWRlcixcclxuXHJcblx0bG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XHJcblxyXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR2YXIgaW1hZ2VzID0gW107XHJcblxyXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ29tcHJlc3NlZFRleHR1cmUoKTtcclxuXHRcdHRleHR1cmUuaW1hZ2UgPSBpbWFnZXM7XHJcblxyXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKHRoaXMubWFuYWdlcik7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xyXG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSgnYXJyYXlidWZmZXInKTtcclxuXHJcblx0XHRmdW5jdGlvbiBsb2FkVGV4dHVyZShpKSB7XHJcblxyXG5cdFx0XHRsb2FkZXIubG9hZCh1cmxbaV0sIGZ1bmN0aW9uIChidWZmZXIpIHtcclxuXHJcblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUucGFyc2UoYnVmZmVyLCB0cnVlKTtcclxuXHJcblx0XHRcdFx0aW1hZ2VzW2ldID0ge1xyXG5cdFx0XHRcdFx0d2lkdGg6IHRleERhdGFzLndpZHRoLFxyXG5cdFx0XHRcdFx0aGVpZ2h0OiB0ZXhEYXRhcy5oZWlnaHQsXHJcblx0XHRcdFx0XHRmb3JtYXQ6IHRleERhdGFzLmZvcm1hdCxcclxuXHRcdFx0XHRcdG1pcG1hcHM6IHRleERhdGFzLm1pcG1hcHNcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRsb2FkZWQgKz0gMTtcclxuXHJcblx0XHRcdFx0aWYgKGxvYWRlZCA9PT0gNikge1xyXG5cclxuXHRcdFx0XHRcdGlmICh0ZXhEYXRhcy5taXBtYXBDb3VudCA9PT0gMSkgeyB0ZXh0dXJlLm1pbkZpbHRlciA9IExpbmVhckZpbHRlcjsgfVxyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xyXG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0aWYgKG9uTG9hZCkgeyBvbkxvYWQodGV4dHVyZSk7IH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvcik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChBcnJheS5pc0FycmF5KHVybCkpIHtcclxuXHJcblx0XHRcdHZhciBsb2FkZWQgPSAwO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gdXJsLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuXHJcblx0XHRcdFx0bG9hZFRleHR1cmUoaSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGNvbXByZXNzZWQgY3ViZW1hcCB0ZXh0dXJlIHN0b3JlZCBpbiBhIHNpbmdsZSBERFMgZmlsZVxyXG5cclxuXHRcdFx0bG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAoYnVmZmVyKSB7XHJcblxyXG5cdFx0XHRcdHZhciB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKGJ1ZmZlciwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdGlmICh0ZXhEYXRhcy5pc0N1YmVtYXApIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgZmFjZXMgPSB0ZXhEYXRhcy5taXBtYXBzLmxlbmd0aCAvIHRleERhdGFzLm1pcG1hcENvdW50O1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGYgPSAwOyBmIDwgZmFjZXM7IGYrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0aW1hZ2VzW2ZdID0geyBtaXBtYXBzOiBbXSB9O1xyXG5cclxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0ZXhEYXRhcy5taXBtYXBDb3VudDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGltYWdlc1tmXS5taXBtYXBzLnB1c2godGV4RGF0YXMubWlwbWFwc1tmICogdGV4RGF0YXMubWlwbWFwQ291bnQgKyBpXSk7XHJcblx0XHRcdFx0XHRcdFx0aW1hZ2VzW2ZdLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcclxuXHRcdFx0XHRcdFx0XHRpbWFnZXNbZl0ud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcclxuXHRcdFx0XHRcdFx0XHRpbWFnZXNbZl0uaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YXMud2lkdGg7XHJcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcclxuXHRcdFx0XHRcdHRleHR1cmUubWlwbWFwcyA9IHRleERhdGFzLm1pcG1hcHM7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxKSB7XHJcblxyXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XHJcblx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdGlmIChvbkxvYWQpIHsgb25Mb2FkKHRleHR1cmUpOyB9XHJcblxyXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRleHR1cmU7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgTmlrb3MgTS4gLyBodHRwczovL2dpdGh1Yi5jb20vZm9vMTIzL1xyXG4gKlxyXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGxvYWQgZ2VuZXJpYyBiaW5hcnkgdGV4dHVyZXMgZm9ybWF0cyAocmdiZSwgaGRyLCAuLi4pXHJcbiAqXHJcbiAqIFN1YiBjbGFzc2VzIGhhdmUgdG8gaW1wbGVtZW50IHRoZSBwYXJzZSgpIG1ldGhvZCB3aGljaCB3aWxsIGJlIHVzZWQgaW4gbG9hZCgpLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIERhdGFUZXh0dXJlTG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5EYXRhVGV4dHVyZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IERhdGFUZXh0dXJlTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XHJcblxyXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKHRoaXMubWFuYWdlcik7XHJcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCdhcnJheWJ1ZmZlcicpO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcclxuXHRcdGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG5cclxuXHRcdFx0dmFyIHRleERhdGEgPSBzY29wZS5wYXJzZShidWZmZXIpO1xyXG5cclxuXHRcdFx0aWYgKCF0ZXhEYXRhKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdFx0aWYgKHRleERhdGEuaW1hZ2UgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlID0gdGV4RGF0YS5pbWFnZTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAodGV4RGF0YS5kYXRhICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS53aWR0aCA9IHRleERhdGEud2lkdGg7XHJcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhLmhlaWdodDtcclxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLmRhdGEgPSB0ZXhEYXRhLmRhdGE7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ZXh0dXJlLndyYXBTID0gdGV4RGF0YS53cmFwUyAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS53cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XHJcblx0XHRcdHRleHR1cmUud3JhcFQgPSB0ZXhEYXRhLndyYXBUICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuXHJcblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gdGV4RGF0YS5tYWdGaWx0ZXIgIT09IHVuZGVmaW5lZCA/IHRleERhdGEubWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xyXG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IHRleERhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhck1pcG1hcExpbmVhckZpbHRlcjtcclxuXHJcblx0XHRcdHRleHR1cmUuYW5pc290cm9weSA9IHRleERhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5hbmlzb3Ryb3B5IDogMTtcclxuXHJcblx0XHRcdGlmICh0ZXhEYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YS5mb3JtYXQ7XHJcblxyXG5cdFx0XHR9XHJcblx0XHRcdGlmICh0ZXhEYXRhLnR5cGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSB0ZXhEYXRhLnR5cGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAodGV4RGF0YS5taXBtYXBzICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5taXBtYXBzID0gdGV4RGF0YS5taXBtYXBzO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHRleERhdGEubWlwbWFwQ291bnQgPT09IDEpIHtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdGlmIChvbkxvYWQpIHsgb25Mb2FkKHRleHR1cmUsIHRleERhdGEpOyB9XHJcblxyXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvcik7XHJcblxyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEltYWdlTG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5JbWFnZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEltYWdlTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHRpZiAodGhpcy5wYXRoICE9PSB1bmRlZmluZWQpIHsgdXJsID0gdGhpcy5wYXRoICsgdXJsOyB9XHJcblxyXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwodXJsKTtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQodXJsKTtcclxuXHJcblx0XHRpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KHVybCk7XHJcblxyXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0aWYgKG9uTG9hZCkgeyBvbkxvYWQoY2FjaGVkKTsgfVxyXG5cclxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHRcdH0sIDApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2ltZycpO1xyXG5cclxuXHRcdGZ1bmN0aW9uIG9uSW1hZ2VMb2FkKCkge1xyXG5cclxuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSk7XHJcblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSk7XHJcblxyXG5cdFx0XHRDYWNoZS5hZGQodXJsLCB0aGlzKTtcclxuXHJcblx0XHRcdGlmIChvbkxvYWQpIHsgb25Mb2FkKHRoaXMpOyB9XHJcblxyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUVycm9yKGV2ZW50KSB7XHJcblxyXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlKTtcclxuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlKTtcclxuXHJcblx0XHRcdGlmIChvbkVycm9yKSB7IG9uRXJyb3IoZXZlbnQpOyB9XHJcblxyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvcih1cmwpO1xyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSk7XHJcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIG9uSW1hZ2VFcnJvciwgZmFsc2UpO1xyXG5cclxuXHRcdGlmICh1cmwuc3Vic3RyKDAsIDUpICE9PSAnZGF0YTonKSB7XHJcblxyXG5cdFx0XHRpZiAodGhpcy5jcm9zc09yaWdpbiAhPT0gdW5kZWZpbmVkKSB7IGltYWdlLmNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCh1cmwpO1xyXG5cclxuXHRcdGltYWdlLnNyYyA9IHVybDtcclxuXHJcblx0XHRyZXR1cm4gaW1hZ2U7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuXHJcbmZ1bmN0aW9uIEN1YmVUZXh0dXJlTG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5DdWJlVGV4dHVyZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEN1YmVUZXh0dXJlTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XHJcblxyXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcclxuXHJcblx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKHRoaXMubWFuYWdlcik7XHJcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xyXG5cclxuXHRcdHZhciBsb2FkZWQgPSAwO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxvYWRUZXh0dXJlKGkpIHtcclxuXHJcblx0XHRcdGxvYWRlci5sb2FkKHVybHNbaV0sIGZ1bmN0aW9uIChpbWFnZSkge1xyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlc1tpXSA9IGltYWdlO1xyXG5cclxuXHRcdFx0XHRsb2FkZWQrKztcclxuXHJcblx0XHRcdFx0aWYgKGxvYWRlZCA9PT0gNikge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdGlmIChvbkxvYWQpIHsgb25Mb2FkKHRleHR1cmUpOyB9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0sIHVuZGVmaW5lZCwgb25FcnJvcik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsraSkge1xyXG5cclxuXHRcdFx0bG9hZFRleHR1cmUoaSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFRleHR1cmVMb2FkZXIobWFuYWdlcikge1xyXG5cclxuXHRMb2FkZXIuY2FsbCh0aGlzLCBtYW5hZ2VyKTtcclxuXHJcbn1cclxuXHJcblRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExvYWRlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBUZXh0dXJlTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XHJcblxyXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBJbWFnZUxvYWRlcih0aGlzLm1hbmFnZXIpO1xyXG5cdFx0bG9hZGVyLnNldENyb3NzT3JpZ2luKHRoaXMuY3Jvc3NPcmlnaW4pO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcclxuXHJcblx0XHRsb2FkZXIubG9hZCh1cmwsIGZ1bmN0aW9uIChpbWFnZSkge1xyXG5cclxuXHRcdFx0dGV4dHVyZS5pbWFnZSA9IGltYWdlO1xyXG5cclxuXHRcdFx0Ly8gSlBFR3MgY2FuJ3QgaGF2ZSBhbiBhbHBoYSBjaGFubmVsLCBzbyBtZW1vcnkgY2FuIGJlIHNhdmVkIGJ5IHN0b3JpbmcgdGhlbSBhcyBSR0IuXHJcblx0XHRcdHZhciBpc0pQRUcgPSB1cmwuc2VhcmNoKC9cXC5qcGU/ZygkfFxcPykvaSkgPiAwIHx8IHVybC5zZWFyY2goL15kYXRhXFw6aW1hZ2VcXC9qcGVnLykgPT09IDA7XHJcblxyXG5cdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IGlzSlBFRyA/IFJHQkZvcm1hdCA6IFJHQkFGb3JtYXQ7XHJcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdFx0aWYgKG9uTG9hZCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdG9uTG9hZCh0ZXh0dXJlKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xyXG4gKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdFxyXG4gKlxyXG4gKiBTb21lIGNvbW1vbiBvZiBjdXJ2ZSBtZXRob2RzOlxyXG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0IClcclxuICogLmdldFBvaW50QXQoIHUsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50QXQoIHUgKVxyXG4gKiAuZ2V0UG9pbnRzKCksIC5nZXRTcGFjZWRQb2ludHMoKVxyXG4gKiAuZ2V0TGVuZ3RoKClcclxuICogLnVwZGF0ZUFyY0xlbmd0aHMoKVxyXG4gKlxyXG4gKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOlxyXG4gKlxyXG4gKiAtLSAyRCBjdXJ2ZXMgLS1cclxuICogVEhSRUUuQXJjQ3VydmVcclxuICogVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZVxyXG4gKiBUSFJFRS5FbGxpcHNlQ3VydmVcclxuICogVEhSRUUuTGluZUN1cnZlXHJcbiAqIFRIUkVFLlF1YWRyYXRpY0JlemllckN1cnZlXHJcbiAqIFRIUkVFLlNwbGluZUN1cnZlXHJcbiAqXHJcbiAqIC0tIDNEIGN1cnZlcyAtLVxyXG4gKiBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzXHJcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzXHJcbiAqIFRIUkVFLkxpbmVDdXJ2ZTNcclxuICogVEhSRUUuUXVhZHJhdGljQmV6aWVyQ3VydmUzXHJcbiAqXHJcbiAqIEEgc2VyaWVzIG9mIGN1cnZlcyBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBUSFJFRS5DdXJ2ZVBhdGguXHJcbiAqXHJcbiAqKi9cclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKlx0QWJzdHJhY3QgQ3VydmUgYmFzZSBjbGFzc1xyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5mdW5jdGlvbiBDdXJ2ZSgpIHtcclxuXHJcblx0dGhpcy50eXBlID0gJ0N1cnZlJztcclxuXHJcblx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSAyMDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKEN1cnZlLnByb3RvdHlwZSwge1xyXG5cclxuXHQvLyBWaXJ0dWFsIGJhc2UgY2xhc3MgbWV0aG9kIHRvIG92ZXJ3cml0ZSBhbmQgaW1wbGVtZW50IGluIHN1YmNsYXNzZXNcclxuXHQvL1x0LSB0IFswIC4uIDFdXHJcblxyXG5cdGdldFBvaW50OiBmdW5jdGlvbiAoIC8qIHQsIG9wdGlvbmFsVGFyZ2V0ICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicpO1xyXG5cdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxyXG5cdC8vIC0gdSBbMCAuLiAxXVxyXG5cclxuXHRnZXRQb2ludEF0OiBmdW5jdGlvbiAodSwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0XHR2YXIgdCA9IHRoaXMuZ2V0VXRvVG1hcHBpbmcodSk7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludCh0LCBvcHRpb25hbFRhcmdldCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnQoIHQgKVxyXG5cclxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uIChkaXZpc2lvbnMpIHtcclxuXHJcblx0XHRpZiAoZGl2aXNpb25zID09PSB1bmRlZmluZWQpIHsgZGl2aXNpb25zID0gNTsgfVxyXG5cclxuXHRcdHZhciBwb2ludHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBkID0gMDsgZCA8PSBkaXZpc2lvbnM7IGQrKykge1xyXG5cclxuXHRcdFx0cG9pbnRzLnB1c2godGhpcy5nZXRQb2ludChkIC8gZGl2aXNpb25zKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBwb2ludHM7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIEdldCBzZXF1ZW5jZSBvZiBwb2ludHMgdXNpbmcgZ2V0UG9pbnRBdCggdSApXHJcblxyXG5cdGdldFNwYWNlZFBvaW50czogZnVuY3Rpb24gKGRpdmlzaW9ucykge1xyXG5cclxuXHRcdGlmIChkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCkgeyBkaXZpc2lvbnMgPSA1OyB9XHJcblxyXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGQgPSAwOyBkIDw9IGRpdmlzaW9uczsgZCsrKSB7XHJcblxyXG5cdFx0XHRwb2ludHMucHVzaCh0aGlzLmdldFBvaW50QXQoZCAvIGRpdmlzaW9ucykpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxyXG5cclxuXHRnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgbGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xyXG5cdFx0cmV0dXJuIGxlbmd0aHNbbGVuZ3Rocy5sZW5ndGggLSAxXTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gR2V0IGxpc3Qgb2YgY3VtdWxhdGl2ZSBzZWdtZW50IGxlbmd0aHNcclxuXHJcblx0Z2V0TGVuZ3RoczogZnVuY3Rpb24gKGRpdmlzaW9ucykge1xyXG5cclxuXHRcdGlmIChkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCkgeyBkaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9uczsgfVxyXG5cclxuXHRcdGlmICh0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxyXG5cdFx0XHQodGhpcy5jYWNoZUFyY0xlbmd0aHMubGVuZ3RoID09PSBkaXZpc2lvbnMgKyAxKSAmJlxyXG5cdFx0XHQhdGhpcy5uZWVkc1VwZGF0ZSkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVBcmNMZW5ndGhzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0dmFyIGNhY2hlID0gW107XHJcblx0XHR2YXIgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoMCk7XHJcblx0XHR2YXIgcCwgc3VtID0gMDtcclxuXHJcblx0XHRjYWNoZS5wdXNoKDApO1xyXG5cclxuXHRcdGZvciAocCA9IDE7IHAgPD0gZGl2aXNpb25zOyBwKyspIHtcclxuXHJcblx0XHRcdGN1cnJlbnQgPSB0aGlzLmdldFBvaW50KHAgLyBkaXZpc2lvbnMpO1xyXG5cdFx0XHRzdW0gKz0gY3VycmVudC5kaXN0YW5jZVRvKGxhc3QpO1xyXG5cdFx0XHRjYWNoZS5wdXNoKHN1bSk7XHJcblx0XHRcdGxhc3QgPSBjdXJyZW50O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xyXG5cclxuXHRcdHJldHVybiBjYWNoZTsgLy8geyBzdW1zOiBjYWNoZSwgc3VtOiBzdW0gfTsgU3VtIGlzIGluIHRoZSBsYXN0IGVsZW1lbnQuXHJcblxyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBHaXZlbiB1ICggMCAuLiAxICksIGdldCBhIHQgdG8gZmluZCBwLiBUaGlzIGdpdmVzIHlvdSBwb2ludHMgd2hpY2ggYXJlIGVxdWlkaXN0YW50XHJcblxyXG5cdGdldFV0b1RtYXBwaW5nOiBmdW5jdGlvbiAodSwgZGlzdGFuY2UpIHtcclxuXHJcblx0XHR2YXIgYXJjTGVuZ3RocyA9IHRoaXMuZ2V0TGVuZ3RocygpO1xyXG5cclxuXHRcdHZhciBpID0gMCwgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcclxuXHJcblx0XHR2YXIgdGFyZ2V0QXJjTGVuZ3RoOyAvLyBUaGUgdGFyZ2V0ZWQgdSBkaXN0YW5jZSB2YWx1ZSB0byBnZXRcclxuXHJcblx0XHRpZiAoZGlzdGFuY2UpIHtcclxuXHJcblx0XHRcdHRhcmdldEFyY0xlbmd0aCA9IGRpc3RhbmNlO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1tpbCAtIDFdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxyXG5cclxuXHRcdHZhciBsb3cgPSAwLCBoaWdoID0gaWwgLSAxLCBjb21wYXJpc29uO1xyXG5cclxuXHRcdHdoaWxlIChsb3cgPD0gaGlnaCkge1xyXG5cclxuXHRcdFx0aSA9IE1hdGguZmxvb3IobG93ICsgKGhpZ2ggLSBsb3cpIC8gMik7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcclxuXHJcblx0XHRcdGNvbXBhcmlzb24gPSBhcmNMZW5ndGhzW2ldIC0gdGFyZ2V0QXJjTGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKGNvbXBhcmlzb24gPCAwKSB7XHJcblxyXG5cdFx0XHRcdGxvdyA9IGkgKyAxO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChjb21wYXJpc29uID4gMCkge1xyXG5cclxuXHRcdFx0XHRoaWdoID0gaSAtIDE7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRoaWdoID0gaTtcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Ly8gRE9ORVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpID0gaGlnaDtcclxuXHJcblx0XHRpZiAoYXJjTGVuZ3Roc1tpXSA9PT0gdGFyZ2V0QXJjTGVuZ3RoKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gaSAvIChpbCAtIDEpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB3ZSBjb3VsZCBnZXQgZmluZXIgZ3JhaW4gYXQgbGVuZ3Rocywgb3IgdXNlIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xyXG5cclxuXHRcdHZhciBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzW2ldO1xyXG5cdFx0dmFyIGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1tpICsgMV07XHJcblxyXG5cdFx0dmFyIHNlZ21lbnRMZW5ndGggPSBsZW5ndGhBZnRlciAtIGxlbmd0aEJlZm9yZTtcclxuXHJcblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xyXG5cclxuXHRcdHZhciBzZWdtZW50RnJhY3Rpb24gPSAodGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlKSAvIHNlZ21lbnRMZW5ndGg7XHJcblxyXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxyXG5cclxuXHRcdHZhciB0ID0gKGkgKyBzZWdtZW50RnJhY3Rpb24pIC8gKGlsIC0gMSk7XHJcblxyXG5cdFx0cmV0dXJuIHQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcclxuXHQvLyBJbiBjYXNlIGFueSBzdWIgY3VydmUgZG9lcyBub3QgaW1wbGVtZW50IGl0cyB0YW5nZW50IGRlcml2YXRpb24sXHJcblx0Ly8gMiBwb2ludHMgYSBzbWFsbCBkZWx0YSBhcGFydCB3aWxsIGJlIHVzZWQgdG8gZmluZCBpdHMgZ3JhZGllbnRcclxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXHJcblxyXG5cdGdldFRhbmdlbnQ6IGZ1bmN0aW9uICh0KSB7XHJcblxyXG5cdFx0dmFyIGRlbHRhID0gMC4wMDAxO1xyXG5cdFx0dmFyIHQxID0gdCAtIGRlbHRhO1xyXG5cdFx0dmFyIHQyID0gdCArIGRlbHRhO1xyXG5cclxuXHRcdC8vIENhcHBpbmcgaW4gY2FzZSBvZiBkYW5nZXJcclxuXHJcblx0XHRpZiAodDEgPCAwKSB7IHQxID0gMDsgfVxyXG5cdFx0aWYgKHQyID4gMSkgeyB0MiA9IDE7IH1cclxuXHJcblx0XHR2YXIgcHQxID0gdGhpcy5nZXRQb2ludCh0MSk7XHJcblx0XHR2YXIgcHQyID0gdGhpcy5nZXRQb2ludCh0Mik7XHJcblxyXG5cdFx0dmFyIHZlYyA9IHB0Mi5jbG9uZSgpLnN1YihwdDEpO1xyXG5cdFx0cmV0dXJuIHZlYy5ub3JtYWxpemUoKTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0VGFuZ2VudEF0OiBmdW5jdGlvbiAodSkge1xyXG5cclxuXHRcdHZhciB0ID0gdGhpcy5nZXRVdG9UbWFwcGluZyh1KTtcclxuXHRcdHJldHVybiB0aGlzLmdldFRhbmdlbnQodCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvbXB1dGVGcmVuZXRGcmFtZXM6IGZ1bmN0aW9uIChzZWdtZW50cywgY2xvc2VkKSB7XHJcblxyXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuY3MuaW5kaWFuYS5lZHUvcHViL3RlY2hyZXBvcnRzL1RSNDI1LnBkZlxyXG5cclxuXHRcdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdHZhciB0YW5nZW50cyA9IFtdO1xyXG5cdFx0dmFyIG5vcm1hbHMgPSBbXTtcclxuXHRcdHZhciBiaW5vcm1hbHMgPSBbXTtcclxuXHJcblx0XHR2YXIgdmVjID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuXHRcdHZhciBpLCB1LCB0aGV0YTtcclxuXHJcblx0XHQvLyBjb21wdXRlIHRoZSB0YW5nZW50IHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcclxuXHJcblx0XHRmb3IgKGkgPSAwOyBpIDw9IHNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRcdHUgPSBpIC8gc2VnbWVudHM7XHJcblxyXG5cdFx0XHR0YW5nZW50c1tpXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KHUpO1xyXG5cdFx0XHR0YW5nZW50c1tpXS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2VsZWN0IGFuIGluaXRpYWwgbm9ybWFsIHZlY3RvciBwZXJwZW5kaWN1bGFyIHRvIHRoZSBmaXJzdCB0YW5nZW50IHZlY3RvcixcclxuXHRcdC8vIGFuZCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBtaW5pbXVtIHRhbmdlbnQgeHl6IGNvbXBvbmVudFxyXG5cclxuXHRcdG5vcm1hbHNbMF0gPSBuZXcgVmVjdG9yMygpO1xyXG5cdFx0Ymlub3JtYWxzWzBdID0gbmV3IFZlY3RvcjMoKTtcclxuXHRcdHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG5cdFx0dmFyIHR4ID0gTWF0aC5hYnModGFuZ2VudHNbMF0ueCk7XHJcblx0XHR2YXIgdHkgPSBNYXRoLmFicyh0YW5nZW50c1swXS55KTtcclxuXHRcdHZhciB0eiA9IE1hdGguYWJzKHRhbmdlbnRzWzBdLnopO1xyXG5cclxuXHRcdGlmICh0eCA8PSBtaW4pIHtcclxuXHJcblx0XHRcdG1pbiA9IHR4O1xyXG5cdFx0XHRub3JtYWwuc2V0KDEsIDAsIDApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodHkgPD0gbWluKSB7XHJcblxyXG5cdFx0XHRtaW4gPSB0eTtcclxuXHRcdFx0bm9ybWFsLnNldCgwLCAxLCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHR6IDw9IG1pbikge1xyXG5cclxuXHRcdFx0bm9ybWFsLnNldCgwLCAwLCAxKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmVjLmNyb3NzVmVjdG9ycyh0YW5nZW50c1swXSwgbm9ybWFsKS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHRub3JtYWxzWzBdLmNyb3NzVmVjdG9ycyh0YW5nZW50c1swXSwgdmVjKTtcclxuXHRcdGJpbm9ybWFsc1swXS5jcm9zc1ZlY3RvcnModGFuZ2VudHNbMF0sIG5vcm1hbHNbMF0pO1xyXG5cclxuXHJcblx0XHQvLyBjb21wdXRlIHRoZSBzbG93bHktdmFyeWluZyBub3JtYWwgYW5kIGJpbm9ybWFsIHZlY3RvcnMgZm9yIGVhY2ggc2VnbWVudCBvbiB0aGUgY3VydmVcclxuXHJcblx0XHRmb3IgKGkgPSAxOyBpIDw9IHNlZ21lbnRzOyBpKyspIHtcclxuXHJcblx0XHRcdG5vcm1hbHNbaV0gPSBub3JtYWxzW2kgLSAxXS5jbG9uZSgpO1xyXG5cclxuXHRcdFx0Ymlub3JtYWxzW2ldID0gYmlub3JtYWxzW2kgLSAxXS5jbG9uZSgpO1xyXG5cclxuXHRcdFx0dmVjLmNyb3NzVmVjdG9ycyh0YW5nZW50c1tpIC0gMV0sIHRhbmdlbnRzW2ldKTtcclxuXHJcblx0XHRcdGlmICh2ZWMubGVuZ3RoKCkgPiBOdW1iZXIuRVBTSUxPTikge1xyXG5cclxuXHRcdFx0XHR2ZWMubm9ybWFsaXplKCk7XHJcblxyXG5cdFx0XHRcdHRoZXRhID0gTWF0aC5hY29zKF9NYXRoLmNsYW1wKHRhbmdlbnRzW2kgLSAxXS5kb3QodGFuZ2VudHNbaV0pLCAtIDEsIDEpKTsgLy8gY2xhbXAgZm9yIGZsb2F0aW5nIHB0IGVycm9yc1xyXG5cclxuXHRcdFx0XHRub3JtYWxzW2ldLmFwcGx5TWF0cml4NChtYXQubWFrZVJvdGF0aW9uQXhpcyh2ZWMsIHRoZXRhKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRiaW5vcm1hbHNbaV0uY3Jvc3NWZWN0b3JzKHRhbmdlbnRzW2ldLCBub3JtYWxzW2ldKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gaWYgdGhlIGN1cnZlIGlzIGNsb3NlZCwgcG9zdHByb2Nlc3MgdGhlIHZlY3RvcnMgc28gdGhlIGZpcnN0IGFuZCBsYXN0IG5vcm1hbCB2ZWN0b3JzIGFyZSB0aGUgc2FtZVxyXG5cclxuXHRcdGlmIChjbG9zZWQgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdHRoZXRhID0gTWF0aC5hY29zKF9NYXRoLmNsYW1wKG5vcm1hbHNbMF0uZG90KG5vcm1hbHNbc2VnbWVudHNdKSwgLSAxLCAxKSk7XHJcblx0XHRcdHRoZXRhIC89IHNlZ21lbnRzO1xyXG5cclxuXHRcdFx0aWYgKHRhbmdlbnRzWzBdLmRvdCh2ZWMuY3Jvc3NWZWN0b3JzKG5vcm1hbHNbMF0sIG5vcm1hbHNbc2VnbWVudHNdKSkgPiAwKSB7XHJcblxyXG5cdFx0XHRcdHRoZXRhID0gLSB0aGV0YTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvciAoaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkrKykge1xyXG5cclxuXHRcdFx0XHQvLyB0d2lzdCBhIGxpdHRsZS4uLlxyXG5cdFx0XHRcdG5vcm1hbHNbaV0uYXBwbHlNYXRyaXg0KG1hdC5tYWtlUm90YXRpb25BeGlzKHRhbmdlbnRzW2ldLCB0aGV0YSAqIGkpKTtcclxuXHRcdFx0XHRiaW5vcm1hbHNbaV0uY3Jvc3NWZWN0b3JzKHRhbmdlbnRzW2ldLCBub3JtYWxzW2ldKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGFuZ2VudHM6IHRhbmdlbnRzLFxyXG5cdFx0XHRub3JtYWxzOiBub3JtYWxzLFxyXG5cdFx0XHRiaW5vcm1hbHM6IGJpbm9ybWFsc1xyXG5cdFx0fTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IHtcclxuXHRcdFx0bWV0YWRhdGE6IHtcclxuXHRcdFx0XHR2ZXJzaW9uOiA0LjUsXHJcblx0XHRcdFx0dHlwZTogJ0N1cnZlJyxcclxuXHRcdFx0XHRnZW5lcmF0b3I6ICdDdXJ2ZS50b0pTT04nXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0ZGF0YS5hcmNMZW5ndGhEaXZpc2lvbnMgPSB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucztcclxuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUpTT046IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9ucztcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5mdW5jdGlvbiBFbGxpcHNlQ3VydmUoYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24pIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0VsbGlwc2VDdXJ2ZSc7XHJcblxyXG5cdHRoaXMuYVggPSBhWCB8fCAwO1xyXG5cdHRoaXMuYVkgPSBhWSB8fCAwO1xyXG5cclxuXHR0aGlzLnhSYWRpdXMgPSB4UmFkaXVzIHx8IDE7XHJcblx0dGhpcy55UmFkaXVzID0geVJhZGl1cyB8fCAxO1xyXG5cclxuXHR0aGlzLmFTdGFydEFuZ2xlID0gYVN0YXJ0QW5nbGUgfHwgMDtcclxuXHR0aGlzLmFFbmRBbmdsZSA9IGFFbmRBbmdsZSB8fCAyICogTWF0aC5QSTtcclxuXHJcblx0dGhpcy5hQ2xvY2t3aXNlID0gYUNsb2Nrd2lzZSB8fCBmYWxzZTtcclxuXHJcblx0dGhpcy5hUm90YXRpb24gPSBhUm90YXRpb24gfHwgMDtcclxuXHJcbn1cclxuXHJcbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEN1cnZlLnByb3RvdHlwZSk7XHJcbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFbGxpcHNlQ3VydmU7XHJcblxyXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmlzRWxsaXBzZUN1cnZlID0gdHJ1ZTtcclxuXHJcbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAodCwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHJcblx0dmFyIHR3b1BpID0gTWF0aC5QSSAqIDI7XHJcblx0dmFyIGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7XHJcblx0dmFyIHNhbWVQb2ludHMgPSBNYXRoLmFicyhkZWx0YUFuZ2xlKSA8IE51bWJlci5FUFNJTE9OO1xyXG5cclxuXHQvLyBlbnN1cmVzIHRoYXQgZGVsdGFBbmdsZSBpcyAwIC4uIDIgUElcclxuXHR3aGlsZSAoZGVsdGFBbmdsZSA8IDApIHsgZGVsdGFBbmdsZSArPSB0d29QaTsgfVxyXG5cdHdoaWxlIChkZWx0YUFuZ2xlID4gdHdvUGkpIHsgZGVsdGFBbmdsZSAtPSB0d29QaTsgfVxyXG5cclxuXHRpZiAoZGVsdGFBbmdsZSA8IE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0aWYgKHNhbWVQb2ludHMpIHtcclxuXHJcblx0XHRcdGRlbHRhQW5nbGUgPSAwO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRkZWx0YUFuZ2xlID0gdHdvUGk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGlmICh0aGlzLmFDbG9ja3dpc2UgPT09IHRydWUgJiYgIXNhbWVQb2ludHMpIHtcclxuXHJcblx0XHRpZiAoZGVsdGFBbmdsZSA9PT0gdHdvUGkpIHtcclxuXHJcblx0XHRcdGRlbHRhQW5nbGUgPSAtIHR3b1BpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRkZWx0YUFuZ2xlID0gZGVsdGFBbmdsZSAtIHR3b1BpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR2YXIgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XHJcblx0dmFyIHggPSB0aGlzLmFYICsgdGhpcy54UmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xyXG5cdHZhciB5ID0gdGhpcy5hWSArIHRoaXMueVJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcclxuXHJcblx0aWYgKHRoaXMuYVJvdGF0aW9uICE9PSAwKSB7XHJcblxyXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zKHRoaXMuYVJvdGF0aW9uKTtcclxuXHRcdHZhciBzaW4gPSBNYXRoLnNpbih0aGlzLmFSb3RhdGlvbik7XHJcblxyXG5cdFx0dmFyIHR4ID0geCAtIHRoaXMuYVg7XHJcblx0XHR2YXIgdHkgPSB5IC0gdGhpcy5hWTtcclxuXHJcblx0XHQvLyBSb3RhdGUgdGhlIHBvaW50IGFib3V0IHRoZSBjZW50ZXIgb2YgdGhlIGVsbGlwc2UuXHJcblx0XHR4ID0gdHggKiBjb3MgLSB0eSAqIHNpbiArIHRoaXMuYVg7XHJcblx0XHR5ID0gdHggKiBzaW4gKyB0eSAqIGNvcyArIHRoaXMuYVk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHBvaW50LnNldCh4LCB5KTtcclxuXHJcbn07XHJcblxyXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5hWCA9IHNvdXJjZS5hWDtcclxuXHR0aGlzLmFZID0gc291cmNlLmFZO1xyXG5cclxuXHR0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1cztcclxuXHR0aGlzLnlSYWRpdXMgPSBzb3VyY2UueVJhZGl1cztcclxuXHJcblx0dGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTtcclxuXHR0aGlzLmFFbmRBbmdsZSA9IHNvdXJjZS5hRW5kQW5nbGU7XHJcblxyXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IHNvdXJjZS5hQ2xvY2t3aXNlO1xyXG5cclxuXHR0aGlzLmFSb3RhdGlvbiA9IHNvdXJjZS5hUm90YXRpb247XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcblxyXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdGRhdGEuYVggPSB0aGlzLmFYO1xyXG5cdGRhdGEuYVkgPSB0aGlzLmFZO1xyXG5cclxuXHRkYXRhLnhSYWRpdXMgPSB0aGlzLnhSYWRpdXM7XHJcblx0ZGF0YS55UmFkaXVzID0gdGhpcy55UmFkaXVzO1xyXG5cclxuXHRkYXRhLmFTdGFydEFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZTtcclxuXHRkYXRhLmFFbmRBbmdsZSA9IHRoaXMuYUVuZEFuZ2xlO1xyXG5cclxuXHRkYXRhLmFDbG9ja3dpc2UgPSB0aGlzLmFDbG9ja3dpc2U7XHJcblxyXG5cdGRhdGEuYVJvdGF0aW9uID0gdGhpcy5hUm90YXRpb247XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufTtcclxuXHJcbkVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcclxuXHJcblx0dGhpcy5hWCA9IGpzb24uYVg7XHJcblx0dGhpcy5hWSA9IGpzb24uYVk7XHJcblxyXG5cdHRoaXMueFJhZGl1cyA9IGpzb24ueFJhZGl1cztcclxuXHR0aGlzLnlSYWRpdXMgPSBqc29uLnlSYWRpdXM7XHJcblxyXG5cdHRoaXMuYVN0YXJ0QW5nbGUgPSBqc29uLmFTdGFydEFuZ2xlO1xyXG5cdHRoaXMuYUVuZEFuZ2xlID0ganNvbi5hRW5kQW5nbGU7XHJcblxyXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IGpzb24uYUNsb2Nrd2lzZTtcclxuXHJcblx0dGhpcy5hUm90YXRpb24gPSBqc29uLmFSb3RhdGlvbjtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gQXJjQ3VydmUoYVgsIGFZLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlKSB7XHJcblxyXG5cdEVsbGlwc2VDdXJ2ZS5jYWxsKHRoaXMsIGFYLCBhWSwgYVJhZGl1cywgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdBcmNDdXJ2ZSc7XHJcblxyXG59XHJcblxyXG5BcmNDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVsbGlwc2VDdXJ2ZS5wcm90b3R5cGUpO1xyXG5BcmNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcmNDdXJ2ZTtcclxuXHJcbkFyY0N1cnZlLnByb3RvdHlwZS5pc0FyY0N1cnZlID0gdHJ1ZTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcclxuICpcclxuICogQ2VudHJpcGV0YWwgQ2F0bXVsbFJvbSBDdXJ2ZSAtIHdoaWNoIGlzIHVzZWZ1bCBmb3IgYXZvaWRpbmdcclxuICogY3VzcHMgYW5kIHNlbGYtaW50ZXJzZWN0aW9ucyBpbiBub24tdW5pZm9ybSBjYXRtdWxsIHJvbSBjdXJ2ZXMuXHJcbiAqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXHJcbiAqXHJcbiAqIGN1cnZlLnR5cGUgYWNjZXB0cyBjZW50cmlwZXRhbChkZWZhdWx0KSwgY2hvcmRhbCBhbmQgY2F0bXVsbHJvbVxyXG4gKiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XHJcbiAqL1xyXG5cclxuXHJcbi8qXHJcbkJhc2VkIG9uIGFuIG9wdGltaXplZCBjKysgc29sdXRpb24gaW5cclxuIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDg5NzM2L2NhdG11bGwtcm9tLWN1cnZlLXdpdGgtbm8tY3VzcHMtYW5kLW5vLXNlbGYtaW50ZXJzZWN0aW9ucy9cclxuIC0gaHR0cDovL2lkZW9uZS5jb20vTm9FYlZNXHJcblxyXG5UaGlzIEN1YmljUG9seSBjbGFzcyBjb3VsZCBiZSB1c2VkIGZvciByZXVzaW5nIHNvbWUgdmFyaWFibGVzIGFuZCBjYWxjdWxhdGlvbnMsXHJcbmJ1dCBmb3IgdGhyZWUuanMgY3VydmUgdXNlLCBpdCBjb3VsZCBiZSBwb3NzaWJsZSBpbmxpbmVkIGFuZCBmbGF0dGVuIGludG8gYSBzaW5nbGUgZnVuY3Rpb24gY2FsbFxyXG53aGljaCBjYW4gYmUgcGxhY2VkIGluIEN1cnZlVXRpbHMuXHJcbiovXHJcblxyXG5mdW5jdGlvbiBDdWJpY1BvbHkoKSB7XHJcblxyXG5cdHZhciBjMCA9IDAsIGMxID0gMCwgYzIgPSAwLCBjMyA9IDA7XHJcblxyXG5cdC8qXHJcblx0ICogQ29tcHV0ZSBjb2VmZmljaWVudHMgZm9yIGEgY3ViaWMgcG9seW5vbWlhbFxyXG5cdCAqICAgcChzKSA9IGMwICsgYzEqcyArIGMyKnNeMiArIGMzKnNeM1xyXG5cdCAqIHN1Y2ggdGhhdFxyXG5cdCAqICAgcCgwKSA9IHgwLCBwKDEpID0geDFcclxuXHQgKiAgYW5kXHJcblx0ICogICBwJygwKSA9IHQwLCBwJygxKSA9IHQxLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGluaXQoeDAsIHgxLCB0MCwgdDEpIHtcclxuXHJcblx0XHRjMCA9IHgwO1xyXG5cdFx0YzEgPSB0MDtcclxuXHRcdGMyID0gLSAzICogeDAgKyAzICogeDEgLSAyICogdDAgLSB0MTtcclxuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4ge1xyXG5cclxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoeDAsIHgxLCB4MiwgeDMsIHRlbnNpb24pIHtcclxuXHJcblx0XHRcdGluaXQoeDEsIHgyLCB0ZW5zaW9uICogKHgyIC0geDApLCB0ZW5zaW9uICogKHgzIC0geDEpKTtcclxuXHJcblx0XHR9LFxyXG5cclxuXHRcdGluaXROb251bmlmb3JtQ2F0bXVsbFJvbTogZnVuY3Rpb24gKHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyKSB7XHJcblxyXG5cdFx0XHQvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdXHJcblx0XHRcdHZhciB0MSA9ICh4MSAtIHgwKSAvIGR0MCAtICh4MiAtIHgwKSAvIChkdDAgKyBkdDEpICsgKHgyIC0geDEpIC8gZHQxO1xyXG5cdFx0XHR2YXIgdDIgPSAoeDIgLSB4MSkgLyBkdDEgLSAoeDMgLSB4MSkgLyAoZHQxICsgZHQyKSArICh4MyAtIHgyKSAvIGR0MjtcclxuXHJcblx0XHRcdC8vIHJlc2NhbGUgdGFuZ2VudHMgZm9yIHBhcmFtZXRyaXphdGlvbiBpbiBbMCwxXVxyXG5cdFx0XHR0MSAqPSBkdDE7XHJcblx0XHRcdHQyICo9IGR0MTtcclxuXHJcblx0XHRcdGluaXQoeDEsIHgyLCB0MSwgdDIpO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0Y2FsYzogZnVuY3Rpb24gKHQpIHtcclxuXHJcblx0XHRcdHZhciB0MiA9IHQgKiB0O1xyXG5cdFx0XHR2YXIgdDMgPSB0MiAqIHQ7XHJcblx0XHRcdHJldHVybiBjMCArIGMxICogdCArIGMyICogdDIgKyBjMyAqIHQzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcbn1cclxuXHJcbi8vXHJcblxyXG52YXIgdG1wID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIHB4ID0gbmV3IEN1YmljUG9seSgpLCBweSA9IG5ldyBDdWJpY1BvbHkoKSwgcHogPSBuZXcgQ3ViaWNQb2x5KCk7XHJcblxyXG5mdW5jdGlvbiBDYXRtdWxsUm9tQ3VydmUzKHBvaW50cywgY2xvc2VkLCBjdXJ2ZVR5cGUsIHRlbnNpb24pIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0NhdG11bGxSb21DdXJ2ZTMnO1xyXG5cclxuXHR0aGlzLnBvaW50cyA9IHBvaW50cyB8fCBbXTtcclxuXHR0aGlzLmNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcclxuXHR0aGlzLmN1cnZlVHlwZSA9IGN1cnZlVHlwZSB8fCAnY2VudHJpcGV0YWwnO1xyXG5cdHRoaXMudGVuc2lvbiA9IHRlbnNpb24gfHwgMC41O1xyXG5cclxufVxyXG5cclxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEN1cnZlLnByb3RvdHlwZSk7XHJcbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2F0bXVsbFJvbUN1cnZlMztcclxuXHJcbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmlzQ2F0bXVsbFJvbUN1cnZlMyA9IHRydWU7XHJcblxyXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICh0LCBvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XHJcblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xyXG5cclxuXHR2YXIgcCA9IChsIC0gKHRoaXMuY2xvc2VkID8gMCA6IDEpKSAqIHQ7XHJcblx0dmFyIGludFBvaW50ID0gTWF0aC5mbG9vcihwKTtcclxuXHR2YXIgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xyXG5cclxuXHRpZiAodGhpcy5jbG9zZWQpIHtcclxuXHJcblx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKE1hdGguZmxvb3IoTWF0aC5hYnMoaW50UG9pbnQpIC8gbCkgKyAxKSAqIGw7XHJcblxyXG5cdH0gZWxzZSBpZiAod2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSkge1xyXG5cclxuXHRcdGludFBvaW50ID0gbCAtIDI7XHJcblx0XHR3ZWlnaHQgPSAxO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBwMCwgcDEsIHAyLCBwMzsgLy8gNCBwb2ludHNcclxuXHJcblx0aWYgKHRoaXMuY2xvc2VkIHx8IGludFBvaW50ID4gMCkge1xyXG5cclxuXHRcdHAwID0gcG9pbnRzWyhpbnRQb2ludCAtIDEpICUgbF07XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Ly8gZXh0cmFwb2xhdGUgZmlyc3QgcG9pbnRcclxuXHRcdHRtcC5zdWJWZWN0b3JzKHBvaW50c1swXSwgcG9pbnRzWzFdKS5hZGQocG9pbnRzWzBdKTtcclxuXHRcdHAwID0gdG1wO1xyXG5cclxuXHR9XHJcblxyXG5cdHAxID0gcG9pbnRzW2ludFBvaW50ICUgbF07XHJcblx0cDIgPSBwb2ludHNbKGludFBvaW50ICsgMSkgJSBsXTtcclxuXHJcblx0aWYgKHRoaXMuY2xvc2VkIHx8IGludFBvaW50ICsgMiA8IGwpIHtcclxuXHJcblx0XHRwMyA9IHBvaW50c1soaW50UG9pbnQgKyAyKSAlIGxdO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdC8vIGV4dHJhcG9sYXRlIGxhc3QgcG9pbnRcclxuXHRcdHRtcC5zdWJWZWN0b3JzKHBvaW50c1tsIC0gMV0sIHBvaW50c1tsIC0gMl0pLmFkZChwb2ludHNbbCAtIDFdKTtcclxuXHRcdHAzID0gdG1wO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICh0aGlzLmN1cnZlVHlwZSA9PT0gJ2NlbnRyaXBldGFsJyB8fCB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnKSB7XHJcblxyXG5cdFx0Ly8gaW5pdCBDZW50cmlwZXRhbCAvIENob3JkYWwgQ2F0bXVsbC1Sb21cclxuXHRcdHZhciBwb3cgPSB0aGlzLmN1cnZlVHlwZSA9PT0gJ2Nob3JkYWwnID8gMC41IDogMC4yNTtcclxuXHRcdHZhciBkdDAgPSBNYXRoLnBvdyhwMC5kaXN0YW5jZVRvU3F1YXJlZChwMSksIHBvdyk7XHJcblx0XHR2YXIgZHQxID0gTWF0aC5wb3cocDEuZGlzdGFuY2VUb1NxdWFyZWQocDIpLCBwb3cpO1xyXG5cdFx0dmFyIGR0MiA9IE1hdGgucG93KHAyLmRpc3RhbmNlVG9TcXVhcmVkKHAzKSwgcG93KTtcclxuXHJcblx0XHQvLyBzYWZldHkgY2hlY2sgZm9yIHJlcGVhdGVkIHBvaW50c1xyXG5cdFx0aWYgKGR0MSA8IDFlLTQpIHsgZHQxID0gMS4wOyB9XHJcblx0XHRpZiAoZHQwIDwgMWUtNCkgeyBkdDAgPSBkdDE7IH1cclxuXHRcdGlmIChkdDIgPCAxZS00KSB7IGR0MiA9IGR0MTsgfVxyXG5cclxuXHRcdHB4LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbShwMC54LCBwMS54LCBwMi54LCBwMy54LCBkdDAsIGR0MSwgZHQyKTtcclxuXHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbShwMC55LCBwMS55LCBwMi55LCBwMy55LCBkdDAsIGR0MSwgZHQyKTtcclxuXHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbShwMC56LCBwMS56LCBwMi56LCBwMy56LCBkdDAsIGR0MSwgZHQyKTtcclxuXHJcblx0fSBlbHNlIGlmICh0aGlzLmN1cnZlVHlwZSA9PT0gJ2NhdG11bGxyb20nKSB7XHJcblxyXG5cdFx0cHguaW5pdENhdG11bGxSb20ocDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uKTtcclxuXHRcdHB5LmluaXRDYXRtdWxsUm9tKHAwLnksIHAxLnksIHAyLnksIHAzLnksIHRoaXMudGVuc2lvbik7XHJcblx0XHRwei5pbml0Q2F0bXVsbFJvbShwMC56LCBwMS56LCBwMi56LCBwMy56LCB0aGlzLnRlbnNpb24pO1xyXG5cclxuXHR9XHJcblxyXG5cdHBvaW50LnNldChcclxuXHRcdHB4LmNhbGMod2VpZ2h0KSxcclxuXHRcdHB5LmNhbGMod2VpZ2h0KSxcclxuXHRcdHB6LmNhbGMod2VpZ2h0KVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiBwb2ludDtcclxuXHJcbn07XHJcblxyXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMucG9pbnRzID0gW107XHJcblxyXG5cdGZvciAodmFyIGkgPSAwLCBsID0gc291cmNlLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzW2ldO1xyXG5cclxuXHRcdHRoaXMucG9pbnRzLnB1c2gocG9pbnQuY2xvbmUoKSk7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5jbG9zZWQgPSBzb3VyY2UuY2xvc2VkO1xyXG5cdHRoaXMuY3VydmVUeXBlID0gc291cmNlLmN1cnZlVHlwZTtcclxuXHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0ZGF0YS5wb2ludHMgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1tpXTtcclxuXHRcdGRhdGEucG9pbnRzLnB1c2gocG9pbnQudG9BcnJheSgpKTtcclxuXHJcblx0fVxyXG5cclxuXHRkYXRhLmNsb3NlZCA9IHRoaXMuY2xvc2VkO1xyXG5cdGRhdGEuY3VydmVUeXBlID0gdGhpcy5jdXJ2ZVR5cGU7XHJcblx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxuXHJcbn07XHJcblxyXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xyXG5cclxuXHR0aGlzLnBvaW50cyA9IFtdO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMCwgbCA9IGpzb24ucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdHZhciBwb2ludCA9IGpzb24ucG9pbnRzW2ldO1xyXG5cdFx0dGhpcy5wb2ludHMucHVzaChuZXcgVmVjdG9yMygpLmZyb21BcnJheShwb2ludCkpO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMuY2xvc2VkID0ganNvbi5jbG9zZWQ7XHJcblx0dGhpcy5jdXJ2ZVR5cGUgPSBqc29uLmN1cnZlVHlwZTtcclxuXHR0aGlzLnRlbnNpb24gPSBqc29uLnRlbnNpb247XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqXHJcbiAqIEJlemllciBDdXJ2ZXMgZm9ybXVsYXMgb2J0YWluZWQgZnJvbVxyXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0LDqXppZXJfY3VydmVcclxuICovXHJcblxyXG5mdW5jdGlvbiBDYXRtdWxsUm9tKHQsIHAwLCBwMSwgcDIsIHAzKSB7XHJcblxyXG5cdHZhciB2MCA9IChwMiAtIHAwKSAqIDAuNTtcclxuXHR2YXIgdjEgPSAocDMgLSBwMSkgKiAwLjU7XHJcblx0dmFyIHQyID0gdCAqIHQ7XHJcblx0dmFyIHQzID0gdCAqIHQyO1xyXG5cdHJldHVybiAoMiAqIHAxIC0gMiAqIHAyICsgdjAgKyB2MSkgKiB0MyArICgtIDMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxKSAqIHQyICsgdjAgKiB0ICsgcDE7XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDAodCwgcCkge1xyXG5cclxuXHR2YXIgayA9IDEgLSB0O1xyXG5cdHJldHVybiBrICogayAqIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMSh0LCBwKSB7XHJcblxyXG5cdHJldHVybiAyICogKDEgLSB0KSAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDIodCwgcCkge1xyXG5cclxuXHRyZXR1cm4gdCAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKHQsIHAwLCBwMSwgcDIpIHtcclxuXHJcblx0cmV0dXJuIFF1YWRyYXRpY0JlemllclAwKHQsIHAwKSArIFF1YWRyYXRpY0JlemllclAxKHQsIHAxKSArXHJcblx0XHRRdWFkcmF0aWNCZXppZXJQMih0LCBwMik7XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMCh0LCBwKSB7XHJcblxyXG5cdHZhciBrID0gMSAtIHQ7XHJcblx0cmV0dXJuIGsgKiBrICogayAqIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBDdWJpY0JlemllclAxKHQsIHApIHtcclxuXHJcblx0dmFyIGsgPSAxIC0gdDtcclxuXHRyZXR1cm4gMyAqIGsgKiBrICogdCAqIHA7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBDdWJpY0JlemllclAyKHQsIHApIHtcclxuXHJcblx0cmV0dXJuIDMgKiAoMSAtIHQpICogdCAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMyh0LCBwKSB7XHJcblxyXG5cdHJldHVybiB0ICogdCAqIHQgKiBwO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gQ3ViaWNCZXppZXIodCwgcDAsIHAxLCBwMiwgcDMpIHtcclxuXHJcblx0cmV0dXJuIEN1YmljQmV6aWVyUDAodCwgcDApICsgQ3ViaWNCZXppZXJQMSh0LCBwMSkgKyBDdWJpY0JlemllclAyKHQsIHAyKSArXHJcblx0XHRDdWJpY0JlemllclAzKHQsIHAzKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIEN1YmljQmV6aWVyQ3VydmUodjAsIHYxLCB2MiwgdjMpIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUnO1xyXG5cclxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHR0aGlzLnYzID0gdjMgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHJcbn1cclxuXHJcbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDdXJ2ZS5wcm90b3R5cGUpO1xyXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmU7XHJcblxyXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc0N1YmljQmV6aWVyQ3VydmUgPSB0cnVlO1xyXG5cclxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAodCwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcclxuXHJcblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcclxuXHJcblx0cG9pbnQuc2V0KFxyXG5cdFx0Q3ViaWNCZXppZXIodCwgdjAueCwgdjEueCwgdjIueCwgdjMueCksXHJcblx0XHRDdWJpY0Jlemllcih0LCB2MC55LCB2MS55LCB2Mi55LCB2My55KVxyXG5cdCk7XHJcblxyXG5cdHJldHVybiBwb2ludDtcclxuXHJcbn07XHJcblxyXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMudjAuY29weShzb3VyY2UudjApO1xyXG5cdHRoaXMudjEuY29weShzb3VyY2UudjEpO1xyXG5cdHRoaXMudjIuY29weShzb3VyY2UudjIpO1xyXG5cdHRoaXMudjMuY29weShzb3VyY2UudjMpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xyXG5cclxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XHJcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcclxuXHRkYXRhLnYzID0gdGhpcy52My50b0FycmF5KCk7XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufTtcclxuXHJcbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcclxuXHJcblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XHJcblxyXG5cdHRoaXMudjAuZnJvbUFycmF5KGpzb24udjApO1xyXG5cdHRoaXMudjEuZnJvbUFycmF5KGpzb24udjEpO1xyXG5cdHRoaXMudjIuZnJvbUFycmF5KGpzb24udjIpO1xyXG5cdHRoaXMudjMuZnJvbUFycmF5KGpzb24udjMpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBDdWJpY0JlemllckN1cnZlMyh2MCwgdjEsIHYyLCB2Mykge1xyXG5cclxuXHRDdXJ2ZS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQ3ViaWNCZXppZXJDdXJ2ZTMnO1xyXG5cclxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHR0aGlzLnYzID0gdjMgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHJcbn1cclxuXHJcbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ3VydmUucHJvdG90eXBlKTtcclxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3ViaWNCZXppZXJDdXJ2ZTM7XHJcblxyXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlMyA9IHRydWU7XHJcblxyXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAodCwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcclxuXHJcblx0cG9pbnQuc2V0KFxyXG5cdFx0Q3ViaWNCZXppZXIodCwgdjAueCwgdjEueCwgdjIueCwgdjMueCksXHJcblx0XHRDdWJpY0Jlemllcih0LCB2MC55LCB2MS55LCB2Mi55LCB2My55KSxcclxuXHRcdEN1YmljQmV6aWVyKHQsIHYwLnosIHYxLnosIHYyLnosIHYzLnopXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIHBvaW50O1xyXG5cclxufTtcclxuXHJcbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMudjAuY29weShzb3VyY2UudjApO1xyXG5cdHRoaXMudjEuY29weShzb3VyY2UudjEpO1xyXG5cdHRoaXMudjIuY29weShzb3VyY2UudjIpO1xyXG5cdHRoaXMudjMuY29weShzb3VyY2UudjMpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xyXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcclxuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XHJcblx0ZGF0YS52MyA9IHRoaXMudjMudG9BcnJheSgpO1xyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxuXHJcbn07XHJcblxyXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcclxuXHJcblx0dGhpcy52MC5mcm9tQXJyYXkoanNvbi52MCk7XHJcblx0dGhpcy52MS5mcm9tQXJyYXkoanNvbi52MSk7XHJcblx0dGhpcy52Mi5mcm9tQXJyYXkoanNvbi52Mik7XHJcblx0dGhpcy52My5mcm9tQXJyYXkoanNvbi52Myk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbmZ1bmN0aW9uIExpbmVDdXJ2ZSh2MSwgdjIpIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZSc7XHJcblxyXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xyXG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xyXG5cclxufVxyXG5cclxuTGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ3VydmUucHJvdG90eXBlKTtcclxuTGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTtcclxuXHJcbkxpbmVDdXJ2ZS5wcm90b3R5cGUuaXNMaW5lQ3VydmUgPSB0cnVlO1xyXG5cclxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICh0LCBvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRpZiAodCA9PT0gMSkge1xyXG5cclxuXHRcdHBvaW50LmNvcHkodGhpcy52Mik7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0cG9pbnQuY29weSh0aGlzLnYyKS5zdWIodGhpcy52MSk7XHJcblx0XHRwb2ludC5tdWx0aXBseVNjYWxhcih0KS5hZGQodGhpcy52MSk7XHJcblxyXG5cdH1cclxuXHJcblx0cmV0dXJuIHBvaW50O1xyXG5cclxufTtcclxuXHJcbi8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxyXG5cclxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludEF0ID0gZnVuY3Rpb24gKHUsIG9wdGlvbmFsVGFyZ2V0KSB7XHJcblxyXG5cdHJldHVybiB0aGlzLmdldFBvaW50KHUsIG9wdGlvbmFsVGFyZ2V0KTtcclxuXHJcbn07XHJcblxyXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnQgPSBmdW5jdGlvbiAoIC8qIHQgKi8pIHtcclxuXHJcblx0dmFyIHRhbmdlbnQgPSB0aGlzLnYyLmNsb25lKCkuc3ViKHRoaXMudjEpO1xyXG5cclxuXHRyZXR1cm4gdGFuZ2VudC5ub3JtYWxpemUoKTtcclxuXHJcbn07XHJcblxyXG5MaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy52MS5jb3B5KHNvdXJjZS52MSk7XHJcblx0dGhpcy52Mi5jb3B5KHNvdXJjZS52Mik7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbkxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcblxyXG59O1xyXG5cclxuTGluZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xyXG5cclxuXHR0aGlzLnYxLmZyb21BcnJheShqc29uLnYxKTtcclxuXHR0aGlzLnYyLmZyb21BcnJheShqc29uLnYyKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gTGluZUN1cnZlMyh2MSwgdjIpIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpbmVDdXJ2ZTMnO1xyXG5cclxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHJcbn1cclxuXHJcbkxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDdXJ2ZS5wcm90b3R5cGUpO1xyXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExpbmVDdXJ2ZTM7XHJcblxyXG5MaW5lQ3VydmUzLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZTMgPSB0cnVlO1xyXG5cclxuTGluZUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAodCwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjMoKTtcclxuXHJcblx0aWYgKHQgPT09IDEpIHtcclxuXHJcblx0XHRwb2ludC5jb3B5KHRoaXMudjIpO1xyXG5cclxuXHR9IGVsc2Uge1xyXG5cclxuXHRcdHBvaW50LmNvcHkodGhpcy52Mikuc3ViKHRoaXMudjEpO1xyXG5cdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIodCkuYWRkKHRoaXMudjEpO1xyXG5cclxuXHR9XHJcblxyXG5cdHJldHVybiBwb2ludDtcclxuXHJcbn07XHJcblxyXG4vLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcclxuXHJcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50QXQgPSBmdW5jdGlvbiAodSwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQodSwgb3B0aW9uYWxUYXJnZXQpO1xyXG5cclxufTtcclxuXHJcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy52MS5jb3B5KHNvdXJjZS52MSk7XHJcblx0dGhpcy52Mi5jb3B5KHNvdXJjZS52Mik7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcclxuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufTtcclxuXHJcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKGpzb24pIHtcclxuXHJcblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcywganNvbik7XHJcblxyXG5cdHRoaXMudjEuZnJvbUFycmF5KGpzb24udjEpO1xyXG5cdHRoaXMudjIuZnJvbUFycmF5KGpzb24udjIpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJDdXJ2ZSh2MCwgdjEsIHYyKSB7XHJcblxyXG5cdEN1cnZlLmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdRdWFkcmF0aWNCZXppZXJDdXJ2ZSc7XHJcblxyXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMigpO1xyXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xyXG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xyXG5cclxufVxyXG5cclxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDdXJ2ZS5wcm90b3R5cGUpO1xyXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTtcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICh0LCBvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcclxuXHJcblx0cG9pbnQuc2V0KFxyXG5cdFx0UXVhZHJhdGljQmV6aWVyKHQsIHYwLngsIHYxLngsIHYyLngpLFxyXG5cdFx0UXVhZHJhdGljQmV6aWVyKHQsIHYwLnksIHYxLnksIHYyLnkpXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIHBvaW50O1xyXG5cclxufTtcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdHRoaXMudjAuY29weShzb3VyY2UudjApO1xyXG5cdHRoaXMudjEuY29weShzb3VyY2UudjEpO1xyXG5cdHRoaXMudjIuY29weShzb3VyY2UudjIpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xyXG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcclxuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG5cclxufTtcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xyXG5cclxuXHR0aGlzLnYwLmZyb21BcnJheShqc29uLnYwKTtcclxuXHR0aGlzLnYxLmZyb21BcnJheShqc29uLnYxKTtcclxuXHR0aGlzLnYyLmZyb21BcnJheShqc29uLnYyKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUzKHYwLCB2MSwgdjIpIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlMyc7XHJcblxyXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMygpO1xyXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xyXG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xyXG5cclxufVxyXG5cclxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ3VydmUucHJvdG90eXBlKTtcclxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1YWRyYXRpY0JlemllckN1cnZlMztcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgPSB0cnVlO1xyXG5cclxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICh0LCBvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgdjAgPSB0aGlzLnYwLCB2MSA9IHRoaXMudjEsIHYyID0gdGhpcy52MjtcclxuXHJcblx0cG9pbnQuc2V0KFxyXG5cdFx0UXVhZHJhdGljQmV6aWVyKHQsIHYwLngsIHYxLngsIHYyLngpLFxyXG5cdFx0UXVhZHJhdGljQmV6aWVyKHQsIHYwLnksIHYxLnksIHYyLnkpLFxyXG5cdFx0UXVhZHJhdGljQmV6aWVyKHQsIHYwLnosIHYxLnosIHYyLnopXHJcblx0KTtcclxuXHJcblx0cmV0dXJuIHBvaW50O1xyXG5cclxufTtcclxuXHJcblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHR0aGlzLnYwLmNvcHkoc291cmNlLnYwKTtcclxuXHR0aGlzLnYxLmNvcHkoc291cmNlLnYxKTtcclxuXHR0aGlzLnYyLmNvcHkoc291cmNlLnYyKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xyXG5cclxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XHJcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xyXG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcblxyXG59O1xyXG5cclxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xyXG5cclxuXHR0aGlzLnYwLmZyb21BcnJheShqc29uLnYwKTtcclxuXHR0aGlzLnYxLmZyb21BcnJheShqc29uLnYxKTtcclxuXHR0aGlzLnYyLmZyb21BcnJheShqc29uLnYyKTtcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gU3BsaW5lQ3VydmUocG9pbnRzIC8qIGFycmF5IG9mIFZlY3RvcjIgKi8pIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1NwbGluZUN1cnZlJztcclxuXHJcblx0dGhpcy5wb2ludHMgPSBwb2ludHMgfHwgW107XHJcblxyXG59XHJcblxyXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEN1cnZlLnByb3RvdHlwZSk7XHJcblNwbGluZUN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwbGluZUN1cnZlO1xyXG5cclxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmlzU3BsaW5lQ3VydmUgPSB0cnVlO1xyXG5cclxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKHQsIG9wdGlvbmFsVGFyZ2V0KSB7XHJcblxyXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cztcclxuXHR2YXIgcCA9IChwb2ludHMubGVuZ3RoIC0gMSkgKiB0O1xyXG5cclxuXHR2YXIgaW50UG9pbnQgPSBNYXRoLmZsb29yKHApO1xyXG5cdHZhciB3ZWlnaHQgPSBwIC0gaW50UG9pbnQ7XHJcblxyXG5cdHZhciBwMCA9IHBvaW50c1tpbnRQb2ludCA9PT0gMCA/IGludFBvaW50IDogaW50UG9pbnQgLSAxXTtcclxuXHR2YXIgcDEgPSBwb2ludHNbaW50UG9pbnRdO1xyXG5cdHZhciBwMiA9IHBvaW50c1tpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAyID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDFdO1xyXG5cdHZhciBwMyA9IHBvaW50c1tpbnRQb2ludCA+IHBvaW50cy5sZW5ndGggLSAzID8gcG9pbnRzLmxlbmd0aCAtIDEgOiBpbnRQb2ludCArIDJdO1xyXG5cclxuXHRwb2ludC5zZXQoXHJcblx0XHRDYXRtdWxsUm9tKHdlaWdodCwgcDAueCwgcDEueCwgcDIueCwgcDMueCksXHJcblx0XHRDYXRtdWxsUm9tKHdlaWdodCwgcDAueSwgcDEueSwgcDIueSwgcDMueSlcclxuXHQpO1xyXG5cclxuXHRyZXR1cm4gcG9pbnQ7XHJcblxyXG59O1xyXG5cclxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5wb2ludHMgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdHZhciBwb2ludCA9IHNvdXJjZS5wb2ludHNbaV07XHJcblxyXG5cdFx0dGhpcy5wb2ludHMucHVzaChwb2ludC5jbG9uZSgpKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0ZGF0YS5wb2ludHMgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1tpXTtcclxuXHRcdGRhdGEucG9pbnRzLnB1c2gocG9pbnQudG9BcnJheSgpKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZGF0YTtcclxuXHJcbn07XHJcblxyXG5TcGxpbmVDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoanNvbikge1xyXG5cclxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcclxuXHJcblx0dGhpcy5wb2ludHMgPSBbXTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgcG9pbnQgPSBqc29uLnBvaW50c1tpXTtcclxuXHRcdHRoaXMucG9pbnRzLnB1c2gobmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkocG9pbnQpKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5cclxuXHJcbnZhciBDdXJ2ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcblx0QXJjQ3VydmU6IEFyY0N1cnZlLFxyXG5cdENhdG11bGxSb21DdXJ2ZTM6IENhdG11bGxSb21DdXJ2ZTMsXHJcblx0Q3ViaWNCZXppZXJDdXJ2ZTogQ3ViaWNCZXppZXJDdXJ2ZSxcclxuXHRDdWJpY0JlemllckN1cnZlMzogQ3ViaWNCZXppZXJDdXJ2ZTMsXHJcblx0RWxsaXBzZUN1cnZlOiBFbGxpcHNlQ3VydmUsXHJcblx0TGluZUN1cnZlOiBMaW5lQ3VydmUsXHJcblx0TGluZUN1cnZlMzogTGluZUN1cnZlMyxcclxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTogUXVhZHJhdGljQmV6aWVyQ3VydmUsXHJcblx0UXVhZHJhdGljQmV6aWVyQ3VydmUzOiBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMsXHJcblx0U3BsaW5lQ3VydmU6IFNwbGluZUN1cnZlXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcclxuICpcclxuICoqL1xyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqXHRDdXJ2ZWQgUGF0aCAtIGEgY3VydmUgcGF0aCBpcyBzaW1wbHkgYSBhcnJheSBvZiBjb25uZWN0ZWRcclxuICogIGN1cnZlcywgYnV0IHJldGFpbnMgdGhlIGFwaSBvZiBhIGN1cnZlXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmZ1bmN0aW9uIEN1cnZlUGF0aCgpIHtcclxuXHJcblx0Q3VydmUuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0N1cnZlUGF0aCc7XHJcblxyXG5cdHRoaXMuY3VydmVzID0gW107XHJcblx0dGhpcy5hdXRvQ2xvc2UgPSBmYWxzZTsgLy8gQXV0b21hdGljYWxseSBjbG9zZXMgdGhlIHBhdGhcclxuXHJcbn1cclxuXHJcbkN1cnZlUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoQ3VydmUucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogQ3VydmVQYXRoLFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uIChjdXJ2ZSkge1xyXG5cclxuXHRcdHRoaXMuY3VydmVzLnB1c2goY3VydmUpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9zZVBhdGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHQvLyBBZGQgYSBsaW5lIGN1cnZlIGlmIHN0YXJ0IGFuZCBlbmQgb2YgbGluZXMgYXJlIG5vdCBjb25uZWN0ZWRcclxuXHRcdHZhciBzdGFydFBvaW50ID0gdGhpcy5jdXJ2ZXNbMF0uZ2V0UG9pbnQoMCk7XHJcblx0XHR2YXIgZW5kUG9pbnQgPSB0aGlzLmN1cnZlc1t0aGlzLmN1cnZlcy5sZW5ndGggLSAxXS5nZXRQb2ludCgxKTtcclxuXHJcblx0XHRpZiAoIXN0YXJ0UG9pbnQuZXF1YWxzKGVuZFBvaW50KSkge1xyXG5cclxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaChuZXcgTGluZUN1cnZlKGVuZFBvaW50LCBzdGFydFBvaW50KSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBUbyBnZXQgYWNjdXJhdGUgcG9pbnQgd2l0aCByZWZlcmVuY2UgdG9cclxuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXHJcblx0Ly8gZm9sbG93aW5nIGhhcyB0byBiZSBkb25lOlxyXG5cclxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXHJcblx0Ly8gMi4gTG9jYXRlIGFuZCBpZGVudGlmeSB0eXBlIG9mIGN1cnZlXHJcblx0Ly8gMy4gR2V0IHQgZm9yIHRoZSBjdXJ2ZVxyXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxyXG5cclxuXHRnZXRQb2ludDogZnVuY3Rpb24gKHQpIHtcclxuXHJcblx0XHR2YXIgZCA9IHQgKiB0aGlzLmdldExlbmd0aCgpO1xyXG5cdFx0dmFyIGN1cnZlTGVuZ3RocyA9IHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XHJcblx0XHR2YXIgaSA9IDA7XHJcblxyXG5cdFx0Ly8gVG8gdGhpbmsgYWJvdXQgYm91bmRhcmllcyBwb2ludHMuXHJcblxyXG5cdFx0d2hpbGUgKGkgPCBjdXJ2ZUxlbmd0aHMubGVuZ3RoKSB7XHJcblxyXG5cdFx0XHRpZiAoY3VydmVMZW5ndGhzW2ldID49IGQpIHtcclxuXHJcblx0XHRcdFx0dmFyIGRpZmYgPSBjdXJ2ZUxlbmd0aHNbaV0gLSBkO1xyXG5cdFx0XHRcdHZhciBjdXJ2ZSA9IHRoaXMuY3VydmVzW2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgc2VnbWVudExlbmd0aCA9IGN1cnZlLmdldExlbmd0aCgpO1xyXG5cdFx0XHRcdHZhciB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7XHJcblxyXG5cdFx0XHRcdHJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aSsrO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHJcblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gV2UgY2Fubm90IHVzZSB0aGUgZGVmYXVsdCBUSFJFRS5DdXJ2ZSBnZXRQb2ludCgpIHdpdGggZ2V0TGVuZ3RoKCkgYmVjYXVzZSBpblxyXG5cdC8vIFRIUkVFLkN1cnZlLCBnZXRMZW5ndGgoKSBkZXBlbmRzIG9uIGdldFBvaW50KCkgYnV0IGluIFRIUkVFLkN1cnZlUGF0aFxyXG5cdC8vIGdldFBvaW50KCkgZGVwZW5kcyBvbiBnZXRMZW5ndGhcclxuXHJcblx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGxlbnMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xyXG5cdFx0cmV0dXJuIGxlbnNbbGVucy5sZW5ndGggLSAxXTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gY2FjaGVMZW5ndGhzIG11c3QgYmUgcmVjYWxjdWxhdGVkLlxyXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbnVsbDtcclxuXHRcdHRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIENvbXB1dGUgbGVuZ3RocyBhbmQgY2FjaGUgdGhlbVxyXG5cdC8vIFdlIGNhbm5vdCBvdmVyd3JpdGUgZ2V0TGVuZ3RocygpIGJlY2F1c2UgVXRvVCBtYXBwaW5nIHVzZXMgaXQuXHJcblxyXG5cdGdldEN1cnZlTGVuZ3RoczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdC8vIFdlIHVzZSBjYWNoZSB2YWx1ZXMgaWYgY3VydmVzIGFuZCBjYWNoZSBhcnJheSBhcmUgc2FtZSBsZW5ndGhcclxuXHJcblx0XHRpZiAodGhpcy5jYWNoZUxlbmd0aHMgJiYgdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoID09PSB0aGlzLmN1cnZlcy5sZW5ndGgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLmNhY2hlTGVuZ3RocztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gR2V0IGxlbmd0aCBvZiBzdWItY3VydmVcclxuXHRcdC8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheVxyXG5cclxuXHRcdHZhciBsZW5ndGhzID0gW10sIHN1bXMgPSAwO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRzdW1zICs9IHRoaXMuY3VydmVzW2ldLmdldExlbmd0aCgpO1xyXG5cdFx0XHRsZW5ndGhzLnB1c2goc3Vtcyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbGVuZ3RocztcclxuXHJcblx0XHRyZXR1cm4gbGVuZ3RocztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0U3BhY2VkUG9pbnRzOiBmdW5jdGlvbiAoZGl2aXNpb25zKSB7XHJcblxyXG5cdFx0aWYgKGRpdmlzaW9ucyA9PT0gdW5kZWZpbmVkKSB7IGRpdmlzaW9ucyA9IDQwOyB9XHJcblxyXG5cdFx0dmFyIHBvaW50cyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGRpdmlzaW9uczsgaSsrKSB7XHJcblxyXG5cdFx0XHRwb2ludHMucHVzaCh0aGlzLmdldFBvaW50KGkgLyBkaXZpc2lvbnMpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuYXV0b0Nsb3NlKSB7XHJcblxyXG5cdFx0XHRwb2ludHMucHVzaChwb2ludHNbMF0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uIChkaXZpc2lvbnMpIHtcclxuXHJcblx0XHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTI7XHJcblxyXG5cdFx0dmFyIHBvaW50cyA9IFtdLCBsYXN0O1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBjdXJ2ZXMgPSB0aGlzLmN1cnZlczsgaSA8IGN1cnZlcy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGN1cnZlID0gY3VydmVzW2ldO1xyXG5cdFx0XHR2YXIgcmVzb2x1dGlvbiA9IChjdXJ2ZSAmJiBjdXJ2ZS5pc0VsbGlwc2VDdXJ2ZSkgPyBkaXZpc2lvbnMgKiAyXHJcblx0XHRcdFx0OiAoY3VydmUgJiYgKGN1cnZlLmlzTGluZUN1cnZlIHx8IGN1cnZlLmlzTGluZUN1cnZlMykpID8gMVxyXG5cdFx0XHRcdFx0OiAoY3VydmUgJiYgY3VydmUuaXNTcGxpbmVDdXJ2ZSkgPyBkaXZpc2lvbnMgKiBjdXJ2ZS5wb2ludHMubGVuZ3RoXHJcblx0XHRcdFx0XHRcdDogZGl2aXNpb25zO1xyXG5cclxuXHRcdFx0dmFyIHB0cyA9IGN1cnZlLmdldFBvaW50cyhyZXNvbHV0aW9uKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcHRzLmxlbmd0aDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdHZhciBwb2ludCA9IHB0c1tqXTtcclxuXHJcblx0XHRcdFx0aWYgKGxhc3QgJiYgbGFzdC5lcXVhbHMocG9pbnQpKSB7IGNvbnRpbnVlOyB9IC8vIGVuc3VyZXMgbm8gY29uc2VjdXRpdmUgcG9pbnRzIGFyZSBkdXBsaWNhdGVzXHJcblxyXG5cdFx0XHRcdHBvaW50cy5wdXNoKHBvaW50KTtcclxuXHRcdFx0XHRsYXN0ID0gcG9pbnQ7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmF1dG9DbG9zZSAmJiBwb2ludHMubGVuZ3RoID4gMSAmJiAhcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS5lcXVhbHMocG9pbnRzWzBdKSkge1xyXG5cclxuXHRcdFx0cG9pbnRzLnB1c2gocG9pbnRzWzBdKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50cztcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLmN1cnZlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc291cmNlLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBjdXJ2ZSA9IHNvdXJjZS5jdXJ2ZXNbaV07XHJcblxyXG5cdFx0XHR0aGlzLmN1cnZlcy5wdXNoKGN1cnZlLmNsb25lKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmF1dG9DbG9zZSA9IHNvdXJjZS5hdXRvQ2xvc2U7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xyXG5cclxuXHRcdGRhdGEuYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2U7XHJcblx0XHRkYXRhLmN1cnZlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5jdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1tpXTtcclxuXHRcdFx0ZGF0YS5jdXJ2ZXMucHVzaChjdXJ2ZS50b0pTT04oKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9LFxyXG5cclxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKGpzb24pIHtcclxuXHJcblx0XHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcclxuXHJcblx0XHR0aGlzLmF1dG9DbG9zZSA9IGpzb24uYXV0b0Nsb3NlO1xyXG5cdFx0dGhpcy5jdXJ2ZXMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGpzb24uY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGN1cnZlID0ganNvbi5jdXJ2ZXNbaV07XHJcblx0XHRcdHRoaXMuY3VydmVzLnB1c2gobmV3IEN1cnZlc1tjdXJ2ZS50eXBlXSgpLmZyb21KU09OKGN1cnZlKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqIENyZWF0ZXMgZnJlZSBmb3JtIDJkIHBhdGggdXNpbmcgc2VyaWVzIG9mIHBvaW50cywgbGluZXMgb3IgY3VydmVzLlxyXG4gKiovXHJcblxyXG5mdW5jdGlvbiBQYXRoKHBvaW50cykge1xyXG5cclxuXHRDdXJ2ZVBhdGguY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BhdGgnO1xyXG5cclxuXHR0aGlzLmN1cnJlbnRQb2ludCA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdGlmIChwb2ludHMpIHtcclxuXHJcblx0XHR0aGlzLnNldEZyb21Qb2ludHMocG9pbnRzKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoQ3VydmVQYXRoLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFBhdGgsXHJcblxyXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uIChwb2ludHMpIHtcclxuXHJcblx0XHR0aGlzLm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAxLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5saW5lVG8ocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdG1vdmVUbzogZnVuY3Rpb24gKHgsIHkpIHtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoeCwgeSk7IC8vIFRPRE8gY29uc2lkZXIgcmVmZXJlbmNpbmcgdmVjdG9ycyBpbnN0ZWFkIG9mIGNvcHlpbmc/XHJcblxyXG5cdH0sXHJcblxyXG5cdGxpbmVUbzogZnVuY3Rpb24gKHgsIHkpIHtcclxuXHJcblx0XHR2YXIgY3VydmUgPSBuZXcgTGluZUN1cnZlKHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksIG5ldyBWZWN0b3IyKHgsIHkpKTtcclxuXHRcdHRoaXMuY3VydmVzLnB1c2goY3VydmUpO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCh4LCB5KTtcclxuXHJcblx0fSxcclxuXHJcblx0cXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKGFDUHgsIGFDUHksIGFYLCBhWSkge1xyXG5cclxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBRdWFkcmF0aWNCZXppZXJDdXJ2ZShcclxuXHRcdFx0dGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxcclxuXHRcdFx0bmV3IFZlY3RvcjIoYUNQeCwgYUNQeSksXHJcblx0XHRcdG5ldyBWZWN0b3IyKGFYLCBhWSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaChjdXJ2ZSk7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KGFYLCBhWSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGJlemllckN1cnZlVG86IGZ1bmN0aW9uIChhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZKSB7XHJcblxyXG5cdFx0dmFyIGN1cnZlID0gbmV3IEN1YmljQmV6aWVyQ3VydmUoXHJcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXHJcblx0XHRcdG5ldyBWZWN0b3IyKGFDUDF4LCBhQ1AxeSksXHJcblx0XHRcdG5ldyBWZWN0b3IyKGFDUDJ4LCBhQ1AyeSksXHJcblx0XHRcdG5ldyBWZWN0b3IyKGFYLCBhWSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaChjdXJ2ZSk7XHJcblxyXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuc2V0KGFYLCBhWSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNwbGluZVRocnU6IGZ1bmN0aW9uIChwdHMgLypBcnJheSBvZiBWZWN0b3IqLykge1xyXG5cclxuXHRcdHZhciBucHRzID0gW3RoaXMuY3VycmVudFBvaW50LmNsb25lKCldLmNvbmNhdChwdHMpO1xyXG5cclxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBTcGxpbmVDdXJ2ZShucHRzKTtcclxuXHRcdHRoaXMuY3VydmVzLnB1c2goY3VydmUpO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkocHRzW3B0cy5sZW5ndGggLSAxXSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFyYzogZnVuY3Rpb24gKGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSkge1xyXG5cclxuXHRcdHZhciB4MCA9IHRoaXMuY3VycmVudFBvaW50Lng7XHJcblx0XHR2YXIgeTAgPSB0aGlzLmN1cnJlbnRQb2ludC55O1xyXG5cclxuXHRcdHRoaXMuYWJzYXJjKGFYICsgeDAsIGFZICsgeTAsIGFSYWRpdXMsXHJcblx0XHRcdGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhYnNhcmM6IGZ1bmN0aW9uIChhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UpIHtcclxuXHJcblx0XHR0aGlzLmFic2VsbGlwc2UoYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlKTtcclxuXHJcblx0fSxcclxuXHJcblx0ZWxsaXBzZTogZnVuY3Rpb24gKGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uKSB7XHJcblxyXG5cdFx0dmFyIHgwID0gdGhpcy5jdXJyZW50UG9pbnQueDtcclxuXHRcdHZhciB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XHJcblxyXG5cdFx0dGhpcy5hYnNlbGxpcHNlKGFYICsgeDAsIGFZICsgeTAsIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbik7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFic2VsbGlwc2U6IGZ1bmN0aW9uIChhWCwgYVksIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbikge1xyXG5cclxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBFbGxpcHNlQ3VydmUoYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24pO1xyXG5cclxuXHRcdGlmICh0aGlzLmN1cnZlcy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHQvLyBpZiBhIHByZXZpb3VzIGN1cnZlIGlzIHByZXNlbnQsIGF0dGVtcHQgdG8gam9pblxyXG5cdFx0XHR2YXIgZmlyc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KDApO1xyXG5cclxuXHRcdFx0aWYgKCFmaXJzdFBvaW50LmVxdWFscyh0aGlzLmN1cnJlbnRQb2ludCkpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5saW5lVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmN1cnZlcy5wdXNoKGN1cnZlKTtcclxuXHJcblx0XHR2YXIgbGFzdFBvaW50ID0gY3VydmUuZ2V0UG9pbnQoMSk7XHJcblx0XHR0aGlzLmN1cnJlbnRQb2ludC5jb3B5KGxhc3RQb2ludCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRDdXJ2ZVBhdGgucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LmNvcHkoc291cmNlLmN1cnJlbnRQb2ludCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gQ3VydmVQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcclxuXHJcblx0XHRkYXRhLmN1cnJlbnRQb2ludCA9IHRoaXMuY3VycmVudFBvaW50LnRvQXJyYXkoKTtcclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUpTT046IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0Q3VydmVQYXRoLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsIGpzb24pO1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBvaW50LmZyb21BcnJheShqc29uLmN1cnJlbnRQb2ludCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcclxuICogRGVmaW5lcyBhIDJkIHNoYXBlIHBsYW5lIHVzaW5nIHBhdGhzLlxyXG4gKiovXHJcblxyXG4vLyBTVEVQIDEgQ3JlYXRlIGEgcGF0aC5cclxuLy8gU1RFUCAyIFR1cm4gcGF0aCBpbnRvIHNoYXBlLlxyXG4vLyBTVEVQIDMgRXh0cnVkZUdlb21ldHJ5IHRha2VzIGluIFNoYXBlL1NoYXBlc1xyXG4vLyBTVEVQIDNhIC0gRXh0cmFjdCBwb2ludHMgZnJvbSBlYWNoIHNoYXBlLCB0dXJuIHRvIHZlcnRpY2VzXHJcbi8vIFNURVAgM2IgLSBUcmlhbmd1bGF0ZSBlYWNoIHNoYXBlLCBhZGQgZmFjZXMuXHJcblxyXG5mdW5jdGlvbiBTaGFwZShwb2ludHMpIHtcclxuXHJcblx0UGF0aC5jYWxsKHRoaXMsIHBvaW50cyk7XHJcblxyXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU2hhcGUnO1xyXG5cclxuXHR0aGlzLmhvbGVzID0gW107XHJcblxyXG59XHJcblxyXG5TaGFwZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoUGF0aC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBTaGFwZSxcclxuXHJcblx0Z2V0UG9pbnRzSG9sZXM6IGZ1bmN0aW9uIChkaXZpc2lvbnMpIHtcclxuXHJcblx0XHR2YXIgaG9sZXNQdHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRob2xlc1B0c1tpXSA9IHRoaXMuaG9sZXNbaV0uZ2V0UG9pbnRzKGRpdmlzaW9ucyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBob2xlc1B0cztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gZ2V0IHBvaW50cyBvZiBzaGFwZSBhbmQgaG9sZXMgKGtleXBvaW50cyBiYXNlZCBvbiBzZWdtZW50cyBwYXJhbWV0ZXIpXHJcblxyXG5cdGV4dHJhY3RQb2ludHM6IGZ1bmN0aW9uIChkaXZpc2lvbnMpIHtcclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cclxuXHRcdFx0c2hhcGU6IHRoaXMuZ2V0UG9pbnRzKGRpdmlzaW9ucyksXHJcblx0XHRcdGhvbGVzOiB0aGlzLmdldFBvaW50c0hvbGVzKGRpdmlzaW9ucylcclxuXHJcblx0XHR9O1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0UGF0aC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0dGhpcy5ob2xlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc291cmNlLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGhvbGUgPSBzb3VyY2UuaG9sZXNbaV07XHJcblxyXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goaG9sZS5jbG9uZSgpKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gUGF0aC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xyXG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBob2xlID0gdGhpcy5ob2xlc1tpXTtcclxuXHRcdFx0ZGF0YS5ob2xlcy5wdXNoKGhvbGUudG9KU09OKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fSxcclxuXHJcblx0ZnJvbUpTT046IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0UGF0aC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLCBqc29uKTtcclxuXHJcblx0XHR0aGlzLnV1aWQgPSBqc29uLnV1aWQ7XHJcblx0XHR0aGlzLmhvbGVzID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBqc29uLmhvbGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGhvbGUgPSBqc29uLmhvbGVzW2ldO1xyXG5cdFx0XHR0aGlzLmhvbGVzLnB1c2gobmV3IFBhdGgoKS5mcm9tSlNPTihob2xlKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIExpZ2h0KGNvbG9yLCBpbnRlbnNpdHkpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0xpZ2h0JztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcihjb2xvcik7XHJcblx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHkgIT09IHVuZGVmaW5lZCA/IGludGVuc2l0eSA6IDE7XHJcblxyXG5cdHRoaXMucmVjZWl2ZVNoYWRvdyA9IHVuZGVmaW5lZDtcclxuXHJcbn1cclxuXHJcbkxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QzRC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBMaWdodCxcclxuXHJcblx0aXNMaWdodDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLmNvbG9yLmNvcHkoc291cmNlLmNvbG9yKTtcclxuXHRcdHRoaXMuaW50ZW5zaXR5ID0gc291cmNlLmludGVuc2l0eTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsIG1ldGEpO1xyXG5cclxuXHRcdGRhdGEub2JqZWN0LmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcclxuXHRcdGRhdGEub2JqZWN0LmludGVuc2l0eSA9IHRoaXMuaW50ZW5zaXR5O1xyXG5cclxuXHRcdGlmICh0aGlzLmdyb3VuZENvbG9yICE9PSB1bmRlZmluZWQpIHsgZGF0YS5vYmplY3QuZ3JvdW5kQ29sb3IgPSB0aGlzLmdyb3VuZENvbG9yLmdldEhleCgpOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkgeyBkYXRhLm9iamVjdC5kaXN0YW5jZSA9IHRoaXMuZGlzdGFuY2U7IH1cclxuXHRcdGlmICh0aGlzLmFuZ2xlICE9PSB1bmRlZmluZWQpIHsgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlOyB9XHJcblx0XHRpZiAodGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkKSB7IGRhdGEub2JqZWN0LmRlY2F5ID0gdGhpcy5kZWNheTsgfVxyXG5cdFx0aWYgKHRoaXMucGVudW1icmEgIT09IHVuZGVmaW5lZCkgeyBkYXRhLm9iamVjdC5wZW51bWJyYSA9IHRoaXMucGVudW1icmE7IH1cclxuXHJcblx0XHRpZiAodGhpcy5zaGFkb3cgIT09IHVuZGVmaW5lZCkgeyBkYXRhLm9iamVjdC5zaGFkb3cgPSB0aGlzLnNoYWRvdy50b0pTT04oKTsgfVxyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodChza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSkge1xyXG5cclxuXHRMaWdodC5jYWxsKHRoaXMsIHNreUNvbG9yLCBpbnRlbnNpdHkpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnSGVtaXNwaGVyZUxpZ2h0JztcclxuXHJcblx0dGhpcy5jYXN0U2hhZG93ID0gdW5kZWZpbmVkO1xyXG5cclxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoT2JqZWN0M0QuRGVmYXVsdFVwKTtcclxuXHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHR0aGlzLmdyb3VuZENvbG9yID0gbmV3IENvbG9yKGdyb3VuZENvbG9yKTtcclxuXHJcbn1cclxuXHJcbkhlbWlzcGhlcmVMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTGlnaHQucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogSGVtaXNwaGVyZUxpZ2h0LFxyXG5cclxuXHRpc0hlbWlzcGhlcmVMaWdodDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLmdyb3VuZENvbG9yLmNvcHkoc291cmNlLmdyb3VuZENvbG9yKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBMaWdodFNoYWRvdyhjYW1lcmEpIHtcclxuXHJcblx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XHJcblxyXG5cdHRoaXMuYmlhcyA9IDA7XHJcblx0dGhpcy5yYWRpdXMgPSAxO1xyXG5cclxuXHR0aGlzLm1hcFNpemUgPSBuZXcgVmVjdG9yMig1MTIsIDUxMik7XHJcblxyXG5cdHRoaXMubWFwID0gbnVsbDtcclxuXHR0aGlzLm1hcFBhc3MgPSBudWxsO1xyXG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcclxuXHJcblx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XHJcblx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoMSwgMSk7XHJcblxyXG5cdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSAxO1xyXG5cclxuXHR0aGlzLl92aWV3cG9ydHMgPSBbXHJcblxyXG5cdFx0bmV3IFZlY3RvcjQoMCwgMCwgMSwgMSlcclxuXHJcblx0XTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oTGlnaHRTaGFkb3cucHJvdG90eXBlLCB7XHJcblxyXG5cdF9wcm9qU2NyZWVuTWF0cml4OiBuZXcgTWF0cml4NCgpLFxyXG5cclxuXHRfbGlnaHRQb3NpdGlvbldvcmxkOiBuZXcgVmVjdG9yMygpLFxyXG5cclxuXHRfbG9va1RhcmdldDogbmV3IFZlY3RvcjMoKSxcclxuXHJcblx0Z2V0Vmlld3BvcnRDb3VudDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl92aWV3cG9ydENvdW50O1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRGcnVzdHVtOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2ZydXN0dW07XHJcblxyXG5cdH0sXHJcblxyXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAobGlnaHQpIHtcclxuXHJcblx0XHR2YXIgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmEsXHJcblx0XHRcdHNoYWRvd01hdHJpeCA9IHRoaXMubWF0cml4LFxyXG5cdFx0XHRwcm9qU2NyZWVuTWF0cml4ID0gdGhpcy5fcHJvalNjcmVlbk1hdHJpeCxcclxuXHRcdFx0bG9va1RhcmdldCA9IHRoaXMuX2xvb2tUYXJnZXQsXHJcblx0XHRcdGxpZ2h0UG9zaXRpb25Xb3JsZCA9IHRoaXMuX2xpZ2h0UG9zaXRpb25Xb3JsZDtcclxuXHJcblx0XHRsaWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KGxpZ2h0UG9zaXRpb25Xb3JsZCk7XHJcblxyXG5cdFx0bG9va1RhcmdldC5zZXRGcm9tTWF0cml4UG9zaXRpb24obGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTtcclxuXHRcdHNoYWRvd0NhbWVyYS5sb29rQXQobG9va1RhcmdldCk7XHJcblx0XHRzaGFkb3dDYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcblx0XHRwcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgsIHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tTWF0cml4KHByb2pTY3JlZW5NYXRyaXgpO1xyXG5cclxuXHRcdHNoYWRvd01hdHJpeC5zZXQoXHJcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcclxuXHRcdFx0MC4wLCAwLjUsIDAuMCwgMC41LFxyXG5cdFx0XHQwLjAsIDAuMCwgMC41LCAwLjUsXHJcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxyXG5cdFx0KTtcclxuXHJcblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoc2hhZG93Q2FtZXJhLnByb2plY3Rpb25NYXRyaXgpO1xyXG5cdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KHNoYWRvd0NhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRWaWV3cG9ydDogZnVuY3Rpb24gKHZpZXdwb3J0SW5kZXgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fdmlld3BvcnRzW3ZpZXdwb3J0SW5kZXhdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRGcmFtZUV4dGVudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0dGhpcy5jYW1lcmEgPSBzb3VyY2UuY2FtZXJhLmNsb25lKCk7XHJcblxyXG5cdFx0dGhpcy5iaWFzID0gc291cmNlLmJpYXM7XHJcblx0XHR0aGlzLnJhZGl1cyA9IHNvdXJjZS5yYWRpdXM7XHJcblxyXG5cdFx0dGhpcy5tYXBTaXplLmNvcHkoc291cmNlLm1hcFNpemUpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBvYmplY3QgPSB7fTtcclxuXHJcblx0XHRpZiAodGhpcy5iaWFzICE9PSAwKSB7IG9iamVjdC5iaWFzID0gdGhpcy5iaWFzOyB9XHJcblx0XHRpZiAodGhpcy5yYWRpdXMgIT09IDEpIHsgb2JqZWN0LnJhZGl1cyA9IHRoaXMucmFkaXVzOyB9XHJcblx0XHRpZiAodGhpcy5tYXBTaXplLnggIT09IDUxMiB8fCB0aGlzLm1hcFNpemUueSAhPT0gNTEyKSB7IG9iamVjdC5tYXBTaXplID0gdGhpcy5tYXBTaXplLnRvQXJyYXkoKTsgfVxyXG5cclxuXHRcdG9iamVjdC5jYW1lcmEgPSB0aGlzLmNhbWVyYS50b0pTT04oZmFsc2UpLm9iamVjdDtcclxuXHRcdGRlbGV0ZSBvYmplY3QuY2FtZXJhLm1hdHJpeDtcclxuXHJcblx0XHRyZXR1cm4gb2JqZWN0O1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFNwb3RMaWdodFNoYWRvdygpIHtcclxuXHJcblx0TGlnaHRTaGFkb3cuY2FsbCh0aGlzLCBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoNTAsIDEsIDAuNSwgNTAwKSk7XHJcblxyXG59XHJcblxyXG5TcG90TGlnaHRTaGFkb3cucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0U2hhZG93LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFNwb3RMaWdodFNoYWRvdyxcclxuXHJcblx0aXNTcG90TGlnaHRTaGFkb3c6IHRydWUsXHJcblxyXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAobGlnaHQsIHZpZXdDYW1lcmEsIHZpZXdwb3J0SW5kZXgpIHtcclxuXHJcblx0XHR2YXIgY2FtZXJhID0gdGhpcy5jYW1lcmE7XHJcblxyXG5cdFx0dmFyIGZvdiA9IF9NYXRoLlJBRDJERUcgKiAyICogbGlnaHQuYW5nbGU7XHJcblx0XHR2YXIgYXNwZWN0ID0gdGhpcy5tYXBTaXplLndpZHRoIC8gdGhpcy5tYXBTaXplLmhlaWdodDtcclxuXHRcdHZhciBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xyXG5cclxuXHRcdGlmIChmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhcikge1xyXG5cclxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcclxuXHRcdFx0Y2FtZXJhLmFzcGVjdCA9IGFzcGVjdDtcclxuXHRcdFx0Y2FtZXJhLmZhciA9IGZhcjtcclxuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0TGlnaHRTaGFkb3cucHJvdG90eXBlLnVwZGF0ZU1hdHJpY2VzLmNhbGwodGhpcywgbGlnaHQsIHZpZXdDYW1lcmEsIHZpZXdwb3J0SW5kZXgpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFNwb3RMaWdodChjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSkge1xyXG5cclxuXHRMaWdodC5jYWxsKHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU3BvdExpZ2h0JztcclxuXHJcblx0dGhpcy5wb3NpdGlvbi5jb3B5KE9iamVjdDNELkRlZmF1bHRVcCk7XHJcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcclxuXHJcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdwb3dlcicsIHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxyXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXHJcblx0XHRcdHJldHVybiB0aGlzLmludGVuc2l0eSAqIE1hdGguUEk7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHBvd2VyKSB7XHJcblxyXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXHJcblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcclxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvIE1hdGguUEk7XHJcblxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHR0aGlzLmRpc3RhbmNlID0gKGRpc3RhbmNlICE9PSB1bmRlZmluZWQpID8gZGlzdGFuY2UgOiAwO1xyXG5cdHRoaXMuYW5nbGUgPSAoYW5nbGUgIT09IHVuZGVmaW5lZCkgPyBhbmdsZSA6IE1hdGguUEkgLyAzO1xyXG5cdHRoaXMucGVudW1icmEgPSAocGVudW1icmEgIT09IHVuZGVmaW5lZCkgPyBwZW51bWJyYSA6IDA7XHJcblx0dGhpcy5kZWNheSA9IChkZWNheSAhPT0gdW5kZWZpbmVkKSA/IGRlY2F5IDogMTtcdC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cclxuXHJcblx0dGhpcy5zaGFkb3cgPSBuZXcgU3BvdExpZ2h0U2hhZG93KCk7XHJcblxyXG59XHJcblxyXG5TcG90TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFNwb3RMaWdodCxcclxuXHJcblx0aXNTcG90TGlnaHQ6IHRydWUsXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0dGhpcy5kaXN0YW5jZSA9IHNvdXJjZS5kaXN0YW5jZTtcclxuXHRcdHRoaXMuYW5nbGUgPSBzb3VyY2UuYW5nbGU7XHJcblx0XHR0aGlzLnBlbnVtYnJhID0gc291cmNlLnBlbnVtYnJhO1xyXG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcclxuXHJcblx0XHR0aGlzLnRhcmdldCA9IHNvdXJjZS50YXJnZXQuY2xvbmUoKTtcclxuXHJcblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5mdW5jdGlvbiBQb2ludExpZ2h0U2hhZG93KCkge1xyXG5cclxuXHRMaWdodFNoYWRvdy5jYWxsKHRoaXMsIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg5MCwgMSwgMC41LCA1MDApKTtcclxuXHJcblx0dGhpcy5fZnJhbWVFeHRlbnRzID0gbmV3IFZlY3RvcjIoNCwgMik7XHJcblxyXG5cdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2O1xyXG5cclxuXHR0aGlzLl92aWV3cG9ydHMgPSBbXHJcblx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcclxuXHRcdC8vIGZvbGxvd2luZyBvcmllbnRhdGlvbjpcclxuXHRcdC8vXHJcblx0XHQvLyAgeHpYWlxyXG5cdFx0Ly8gICB5IFlcclxuXHRcdC8vXHJcblx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cclxuXHRcdC8vIHggLSBOZWdhdGl2ZSB4IGRpcmVjdGlvblxyXG5cdFx0Ly8gWSAtIFBvc2l0aXZlIHkgZGlyZWN0aW9uXHJcblx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cclxuXHRcdC8vIFogLSBQb3NpdGl2ZSB6IGRpcmVjdGlvblxyXG5cdFx0Ly8geiAtIE5lZ2F0aXZlIHogZGlyZWN0aW9uXHJcblxyXG5cdFx0Ly8gcG9zaXRpdmUgWFxyXG5cdFx0bmV3IFZlY3RvcjQoMiwgMSwgMSwgMSksXHJcblx0XHQvLyBuZWdhdGl2ZSBYXHJcblx0XHRuZXcgVmVjdG9yNCgwLCAxLCAxLCAxKSxcclxuXHRcdC8vIHBvc2l0aXZlIFpcclxuXHRcdG5ldyBWZWN0b3I0KDMsIDEsIDEsIDEpLFxyXG5cdFx0Ly8gbmVnYXRpdmUgWlxyXG5cdFx0bmV3IFZlY3RvcjQoMSwgMSwgMSwgMSksXHJcblx0XHQvLyBwb3NpdGl2ZSBZXHJcblx0XHRuZXcgVmVjdG9yNCgzLCAwLCAxLCAxKSxcclxuXHRcdC8vIG5lZ2F0aXZlIFlcclxuXHRcdG5ldyBWZWN0b3I0KDEsIDAsIDEsIDEpXHJcblx0XTtcclxuXHJcblx0dGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbXHJcblx0XHRuZXcgVmVjdG9yMygxLCAwLCAwKSwgbmV3IFZlY3RvcjMoLSAxLCAwLCAwKSwgbmV3IFZlY3RvcjMoMCwgMCwgMSksXHJcblx0XHRuZXcgVmVjdG9yMygwLCAwLCAtIDEpLCBuZXcgVmVjdG9yMygwLCAxLCAwKSwgbmV3IFZlY3RvcjMoMCwgLSAxLCAwKVxyXG5cdF07XHJcblxyXG5cdHRoaXMuX2N1YmVVcHMgPSBbXHJcblx0XHRuZXcgVmVjdG9yMygwLCAxLCAwKSwgbmV3IFZlY3RvcjMoMCwgMSwgMCksIG5ldyBWZWN0b3IzKDAsIDEsIDApLFxyXG5cdFx0bmV3IFZlY3RvcjMoMCwgMSwgMCksIG5ldyBWZWN0b3IzKDAsIDAsIDEpLCBuZXcgVmVjdG9yMygwLCAwLCAtIDEpXHJcblx0XTtcclxuXHJcbn1cclxuXHJcblBvaW50TGlnaHRTaGFkb3cucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0U2hhZG93LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFBvaW50TGlnaHRTaGFkb3csXHJcblxyXG5cdGlzUG9pbnRMaWdodFNoYWRvdzogdHJ1ZSxcclxuXHJcblx0dXBkYXRlTWF0cmljZXM6IGZ1bmN0aW9uIChsaWdodCwgdmlld0NhbWVyYSwgdmlld3BvcnRJbmRleCkge1xyXG5cclxuXHRcdHZhciBjYW1lcmEgPSB0aGlzLmNhbWVyYSxcclxuXHRcdFx0c2hhZG93TWF0cml4ID0gdGhpcy5tYXRyaXgsXHJcblx0XHRcdGxpZ2h0UG9zaXRpb25Xb3JsZCA9IHRoaXMuX2xpZ2h0UG9zaXRpb25Xb3JsZCxcclxuXHRcdFx0bG9va1RhcmdldCA9IHRoaXMuX2xvb2tUYXJnZXQsXHJcblx0XHRcdHByb2pTY3JlZW5NYXRyaXggPSB0aGlzLl9wcm9qU2NyZWVuTWF0cml4O1xyXG5cclxuXHRcdGxpZ2h0UG9zaXRpb25Xb3JsZC5zZXRGcm9tTWF0cml4UG9zaXRpb24obGlnaHQubWF0cml4V29ybGQpO1xyXG5cdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkobGlnaHRQb3NpdGlvbldvcmxkKTtcclxuXHJcblx0XHRsb29rVGFyZ2V0LmNvcHkoY2FtZXJhLnBvc2l0aW9uKTtcclxuXHRcdGxvb2tUYXJnZXQuYWRkKHRoaXMuX2N1YmVEaXJlY3Rpb25zW3ZpZXdwb3J0SW5kZXhdKTtcclxuXHRcdGNhbWVyYS51cC5jb3B5KHRoaXMuX2N1YmVVcHNbdmlld3BvcnRJbmRleF0pO1xyXG5cdFx0Y2FtZXJhLmxvb2tBdChsb29rVGFyZ2V0KTtcclxuXHRcdGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHRcdHNoYWRvd01hdHJpeC5tYWtlVHJhbnNsYXRpb24oLSBsaWdodFBvc2l0aW9uV29ybGQueCwgLSBsaWdodFBvc2l0aW9uV29ybGQueSwgLSBsaWdodFBvc2l0aW9uV29ybGQueik7XHJcblxyXG5cdFx0cHJvalNjcmVlbk1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHRcdHRoaXMuX2ZydXN0dW0uc2V0RnJvbU1hdHJpeChwcm9qU2NyZWVuTWF0cml4KTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5cclxuZnVuY3Rpb24gUG9pbnRMaWdodChjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkpIHtcclxuXHJcblx0TGlnaHQuY2FsbCh0aGlzLCBjb2xvciwgaW50ZW5zaXR5KTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BvaW50TGlnaHQnO1xyXG5cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Bvd2VyJywge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXHJcblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE1KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcclxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHBvd2VyKSB7XHJcblxyXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXHJcblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE1KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcclxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICg0ICogTWF0aC5QSSk7XHJcblxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHR0aGlzLmRpc3RhbmNlID0gKGRpc3RhbmNlICE9PSB1bmRlZmluZWQpID8gZGlzdGFuY2UgOiAwO1xyXG5cdHRoaXMuZGVjYXkgPSAoZGVjYXkgIT09IHVuZGVmaW5lZCkgPyBkZWNheSA6IDE7XHQvLyBmb3IgcGh5c2ljYWxseSBjb3JyZWN0IGxpZ2h0cywgc2hvdWxkIGJlIDIuXHJcblxyXG5cdHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcclxuXHJcbn1cclxuXHJcblBvaW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFBvaW50TGlnaHQsXHJcblxyXG5cdGlzUG9pbnRMaWdodDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xyXG5cdFx0dGhpcy5kZWNheSA9IHNvdXJjZS5kZWNheTtcclxuXHJcblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBhcm9zZSAvIGh0dHA6Ly9naXRodWIuY29tL2Fyb3NlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gT3J0aG9ncmFwaGljQ2FtZXJhKGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyKSB7XHJcblxyXG5cdENhbWVyYS5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnT3J0aG9ncmFwaGljQ2FtZXJhJztcclxuXHJcblx0dGhpcy56b29tID0gMTtcclxuXHR0aGlzLnZpZXcgPSBudWxsO1xyXG5cclxuXHR0aGlzLmxlZnQgPSAobGVmdCAhPT0gdW5kZWZpbmVkKSA/IGxlZnQgOiAtIDE7XHJcblx0dGhpcy5yaWdodCA9IChyaWdodCAhPT0gdW5kZWZpbmVkKSA/IHJpZ2h0IDogMTtcclxuXHR0aGlzLnRvcCA9ICh0b3AgIT09IHVuZGVmaW5lZCkgPyB0b3AgOiAxO1xyXG5cdHRoaXMuYm90dG9tID0gKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSA/IGJvdHRvbSA6IC0gMTtcclxuXHJcblx0dGhpcy5uZWFyID0gKG5lYXIgIT09IHVuZGVmaW5lZCkgPyBuZWFyIDogMC4xO1xyXG5cdHRoaXMuZmFyID0gKGZhciAhPT0gdW5kZWZpbmVkKSA/IGZhciA6IDIwMDA7XHJcblxyXG5cdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxufVxyXG5cclxuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShDYW1lcmEucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogT3J0aG9ncmFwaGljQ2FtZXJhLFxyXG5cclxuXHRpc09ydGhvZ3JhcGhpY0NhbWVyYTogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSwgcmVjdXJzaXZlKSB7XHJcblxyXG5cdFx0Q2FtZXJhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlLCByZWN1cnNpdmUpO1xyXG5cclxuXHRcdHRoaXMubGVmdCA9IHNvdXJjZS5sZWZ0O1xyXG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcclxuXHRcdHRoaXMudG9wID0gc291cmNlLnRvcDtcclxuXHRcdHRoaXMuYm90dG9tID0gc291cmNlLmJvdHRvbTtcclxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xyXG5cdFx0dGhpcy5mYXIgPSBzb3VyY2UuZmFyO1xyXG5cclxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xyXG5cdFx0dGhpcy52aWV3ID0gc291cmNlLnZpZXcgPT09IG51bGwgPyBudWxsIDogT2JqZWN0LmFzc2lnbih7fSwgc291cmNlLnZpZXcpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG5cdFx0aWYgKHRoaXMudmlldyA9PT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy52aWV3ID0ge1xyXG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXHJcblx0XHRcdFx0ZnVsbFdpZHRoOiAxLFxyXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXHJcblx0XHRcdFx0b2Zmc2V0WDogMCxcclxuXHRcdFx0XHRvZmZzZXRZOiAwLFxyXG5cdFx0XHRcdHdpZHRoOiAxLFxyXG5cdFx0XHRcdGhlaWdodDogMVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XHJcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xyXG5cdFx0dGhpcy52aWV3LmZ1bGxIZWlnaHQgPSBmdWxsSGVpZ2h0O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xyXG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xyXG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodGhpcy52aWV3ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBkeCA9ICh0aGlzLnJpZ2h0IC0gdGhpcy5sZWZ0KSAvICgyICogdGhpcy56b29tKTtcclxuXHRcdHZhciBkeSA9ICh0aGlzLnRvcCAtIHRoaXMuYm90dG9tKSAvICgyICogdGhpcy56b29tKTtcclxuXHRcdHZhciBjeCA9ICh0aGlzLnJpZ2h0ICsgdGhpcy5sZWZ0KSAvIDI7XHJcblx0XHR2YXIgY3kgPSAodGhpcy50b3AgKyB0aGlzLmJvdHRvbSkgLyAyO1xyXG5cclxuXHRcdHZhciBsZWZ0ID0gY3ggLSBkeDtcclxuXHRcdHZhciByaWdodCA9IGN4ICsgZHg7XHJcblx0XHR2YXIgdG9wID0gY3kgKyBkeTtcclxuXHRcdHZhciBib3R0b20gPSBjeSAtIGR5O1xyXG5cclxuXHRcdGlmICh0aGlzLnZpZXcgIT09IG51bGwgJiYgdGhpcy52aWV3LmVuYWJsZWQpIHtcclxuXHJcblx0XHRcdHZhciB6b29tVyA9IHRoaXMuem9vbSAvICh0aGlzLnZpZXcud2lkdGggLyB0aGlzLnZpZXcuZnVsbFdpZHRoKTtcclxuXHRcdFx0dmFyIHpvb21IID0gdGhpcy56b29tIC8gKHRoaXMudmlldy5oZWlnaHQgLyB0aGlzLnZpZXcuZnVsbEhlaWdodCk7XHJcblx0XHRcdHZhciBzY2FsZVcgPSAodGhpcy5yaWdodCAtIHRoaXMubGVmdCkgLyB0aGlzLnZpZXcud2lkdGg7XHJcblx0XHRcdHZhciBzY2FsZUggPSAodGhpcy50b3AgLSB0aGlzLmJvdHRvbSkgLyB0aGlzLnZpZXcuaGVpZ2h0O1xyXG5cclxuXHRcdFx0bGVmdCArPSBzY2FsZVcgKiAodGhpcy52aWV3Lm9mZnNldFggLyB6b29tVyk7XHJcblx0XHRcdHJpZ2h0ID0gbGVmdCArIHNjYWxlVyAqICh0aGlzLnZpZXcud2lkdGggLyB6b29tVyk7XHJcblx0XHRcdHRvcCAtPSBzY2FsZUggKiAodGhpcy52aWV3Lm9mZnNldFkgLyB6b29tSCk7XHJcblx0XHRcdGJvdHRvbSA9IHRvcCAtIHNjYWxlSCAqICh0aGlzLnZpZXcuaGVpZ2h0IC8gem9vbUgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyhsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIpO1xyXG5cclxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSh0aGlzLnByb2plY3Rpb25NYXRyaXgpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3Quem9vbSA9IHRoaXMuem9vbTtcclxuXHRcdGRhdGEub2JqZWN0LmxlZnQgPSB0aGlzLmxlZnQ7XHJcblx0XHRkYXRhLm9iamVjdC5yaWdodCA9IHRoaXMucmlnaHQ7XHJcblx0XHRkYXRhLm9iamVjdC50b3AgPSB0aGlzLnRvcDtcclxuXHRcdGRhdGEub2JqZWN0LmJvdHRvbSA9IHRoaXMuYm90dG9tO1xyXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcclxuXHRcdGRhdGEub2JqZWN0LmZhciA9IHRoaXMuZmFyO1xyXG5cclxuXHRcdGlmICh0aGlzLnZpZXcgIT09IG51bGwpIHsgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMudmlldyk7IH1cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCkge1xyXG5cclxuXHRMaWdodFNoYWRvdy5jYWxsKHRoaXMsIG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoLSA1LCA1LCA1LCAtIDUsIDAuNSwgNTAwKSk7XHJcblxyXG59XHJcblxyXG5EaXJlY3Rpb25hbExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMaWdodFNoYWRvdy5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0U2hhZG93LFxyXG5cclxuXHRpc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3c6IHRydWUsXHJcblxyXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAobGlnaHQsIHZpZXdDYW1lcmEsIHZpZXdwb3J0SW5kZXgpIHtcclxuXHJcblx0XHRMaWdodFNoYWRvdy5wcm90b3R5cGUudXBkYXRlTWF0cmljZXMuY2FsbCh0aGlzLCBsaWdodCwgdmlld0NhbWVyYSwgdmlld3BvcnRJbmRleCk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodChjb2xvciwgaW50ZW5zaXR5KSB7XHJcblxyXG5cdExpZ2h0LmNhbGwodGhpcywgY29sb3IsIGludGVuc2l0eSk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdEaXJlY3Rpb25hbExpZ2h0JztcclxuXHJcblx0dGhpcy5wb3NpdGlvbi5jb3B5KE9iamVjdDNELkRlZmF1bHRVcCk7XHJcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcclxuXHJcblx0dGhpcy5zaGFkb3cgPSBuZXcgRGlyZWN0aW9uYWxMaWdodFNoYWRvdygpO1xyXG5cclxufVxyXG5cclxuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTGlnaHQucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogRGlyZWN0aW9uYWxMaWdodCxcclxuXHJcblx0aXNEaXJlY3Rpb25hbExpZ2h0OiB0cnVlLFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7XHJcblxyXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHRcdHRoaXMudGFyZ2V0ID0gc291cmNlLnRhcmdldC5jbG9uZSgpO1xyXG5cclxuXHRcdHRoaXMuc2hhZG93ID0gc291cmNlLnNoYWRvdy5jbG9uZSgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEFtYmllbnRMaWdodChjb2xvciwgaW50ZW5zaXR5KSB7XHJcblxyXG5cdExpZ2h0LmNhbGwodGhpcywgY29sb3IsIGludGVuc2l0eSk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdBbWJpZW50TGlnaHQnO1xyXG5cclxuXHR0aGlzLmNhc3RTaGFkb3cgPSB1bmRlZmluZWQ7XHJcblxyXG59XHJcblxyXG5BbWJpZW50TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEFtYmllbnRMaWdodCxcclxuXHJcblx0aXNBbWJpZW50TGlnaHQ6IHRydWVcclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWJlbG5hdGlvbiAvIGh0dHA6Ly9naXRodWIuY29tL2FiZWxuYXRpb25cclxuICovXHJcblxyXG5mdW5jdGlvbiBSZWN0QXJlYUxpZ2h0KGNvbG9yLCBpbnRlbnNpdHksIHdpZHRoLCBoZWlnaHQpIHtcclxuXHJcblx0TGlnaHQuY2FsbCh0aGlzLCBjb2xvciwgaW50ZW5zaXR5KTtcclxuXHJcblx0dGhpcy50eXBlID0gJ1JlY3RBcmVhTGlnaHQnO1xyXG5cclxuXHR0aGlzLndpZHRoID0gKHdpZHRoICE9PSB1bmRlZmluZWQpID8gd2lkdGggOiAxMDtcclxuXHR0aGlzLmhlaWdodCA9IChoZWlnaHQgIT09IHVuZGVmaW5lZCkgPyBoZWlnaHQgOiAxMDtcclxuXHJcbn1cclxuXHJcblJlY3RBcmVhTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExpZ2h0LnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IFJlY3RBcmVhTGlnaHQsXHJcblxyXG5cdGlzUmVjdEFyZWFMaWdodDogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLndpZHRoID0gc291cmNlLndpZHRoO1xyXG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uIChtZXRhKSB7XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBMaWdodC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0ZGF0YS5vYmplY3Qud2lkdGggPSB0aGlzLndpZHRoO1xyXG5cdFx0ZGF0YS5vYmplY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gTWF0ZXJpYWxMb2FkZXIobWFuYWdlcikge1xyXG5cclxuXHRMb2FkZXIuY2FsbCh0aGlzLCBtYW5hZ2VyKTtcclxuXHJcblx0dGhpcy50ZXh0dXJlcyA9IHt9O1xyXG5cclxufVxyXG5cclxuTWF0ZXJpYWxMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKExvYWRlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBNYXRlcmlhbExvYWRlcixcclxuXHJcblx0bG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XHJcblxyXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoc2NvcGUubWFuYWdlcik7XHJcblx0XHRsb2FkZXIuc2V0UGF0aChzY29wZS5wYXRoKTtcclxuXHRcdGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKHRleHQpIHtcclxuXHJcblx0XHRcdG9uTG9hZChzY29wZS5wYXJzZShKU09OLnBhcnNlKHRleHQpKSk7XHJcblxyXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvcik7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlOiBmdW5jdGlvbiAoanNvbikge1xyXG5cclxuXHRcdHZhciB0ZXh0dXJlcyA9IHRoaXMudGV4dHVyZXM7XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VGV4dHVyZShuYW1lKSB7XHJcblxyXG5cdFx0XHRpZiAodGV4dHVyZXNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGVyaWFsTG9hZGVyOiBVbmRlZmluZWQgdGV4dHVyZScsIG5hbWUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRleHR1cmVzW25hbWVdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxzW2pzb24udHlwZV0oKTtcclxuXHJcblx0XHRpZiAoanNvbi51dWlkICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwudXVpZCA9IGpzb24udXVpZDsgfVxyXG5cdFx0aWYgKGpzb24ubmFtZSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLm5hbWUgPSBqc29uLm5hbWU7IH1cclxuXHRcdGlmIChqc29uLmNvbG9yICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuY29sb3Iuc2V0SGV4KGpzb24uY29sb3IpOyB9XHJcblx0XHRpZiAoanNvbi5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5yb3VnaG5lc3MgPSBqc29uLnJvdWdobmVzczsgfVxyXG5cdFx0aWYgKGpzb24ubWV0YWxuZXNzICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwubWV0YWxuZXNzID0ganNvbi5tZXRhbG5lc3M7IH1cclxuXHRcdGlmIChqc29uLnNoZWVuICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc2hlZW4gPSBuZXcgQ29sb3IoKS5zZXRIZXgoanNvbi5zaGVlbik7IH1cclxuXHRcdGlmIChqc29uLmVtaXNzaXZlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZW1pc3NpdmUuc2V0SGV4KGpzb24uZW1pc3NpdmUpOyB9XHJcblx0XHRpZiAoanNvbi5zcGVjdWxhciAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnNwZWN1bGFyLnNldEhleChqc29uLnNwZWN1bGFyKTsgfVxyXG5cdFx0aWYgKGpzb24uc2hpbmluZXNzICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc2hpbmluZXNzID0ganNvbi5zaGluaW5lc3M7IH1cclxuXHRcdGlmIChqc29uLmNsZWFyY29hdCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLmNsZWFyY29hdCA9IGpzb24uY2xlYXJjb2F0OyB9XHJcblx0XHRpZiAoanNvbi5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgPSBqc29uLmNsZWFyY29hdFJvdWdobmVzczsgfVxyXG5cdFx0aWYgKGpzb24udmVydGV4Q29sb3JzICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwudmVydGV4Q29sb3JzID0ganNvbi52ZXJ0ZXhDb2xvcnM7IH1cclxuXHRcdGlmIChqc29uLmZvZyAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLmZvZyA9IGpzb24uZm9nOyB9XHJcblx0XHRpZiAoanNvbi5mbGF0U2hhZGluZyAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLmZsYXRTaGFkaW5nID0ganNvbi5mbGF0U2hhZGluZzsgfVxyXG5cdFx0aWYgKGpzb24uYmxlbmRpbmcgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5ibGVuZGluZyA9IGpzb24uYmxlbmRpbmc7IH1cclxuXHRcdGlmIChqc29uLmNvbWJpbmUgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5jb21iaW5lID0ganNvbi5jb21iaW5lOyB9XHJcblx0XHRpZiAoanNvbi5zaWRlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc2lkZSA9IGpzb24uc2lkZTsgfVxyXG5cdFx0aWYgKGpzb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLm9wYWNpdHkgPSBqc29uLm9wYWNpdHk7IH1cclxuXHRcdGlmIChqc29uLnRyYW5zcGFyZW50ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBqc29uLnRyYW5zcGFyZW50OyB9XHJcblx0XHRpZiAoanNvbi5hbHBoYVRlc3QgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5hbHBoYVRlc3QgPSBqc29uLmFscGhhVGVzdDsgfVxyXG5cdFx0aWYgKGpzb24uZGVwdGhUZXN0ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGVwdGhUZXN0ID0ganNvbi5kZXB0aFRlc3Q7IH1cclxuXHRcdGlmIChqc29uLmRlcHRoV3JpdGUgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5kZXB0aFdyaXRlID0ganNvbi5kZXB0aFdyaXRlOyB9XHJcblx0XHRpZiAoanNvbi5jb2xvcldyaXRlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuY29sb3JXcml0ZSA9IGpzb24uY29sb3JXcml0ZTsgfVxyXG5cclxuXHRcdGlmIChqc29uLnN0ZW5jaWxXcml0ZSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnN0ZW5jaWxXcml0ZSA9IGpzb24uc3RlbmNpbFdyaXRlOyB9XHJcblx0XHRpZiAoanNvbi5zdGVuY2lsV3JpdGVNYXNrICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayA9IGpzb24uc3RlbmNpbFdyaXRlTWFzazsgfVxyXG5cdFx0aWYgKGpzb24uc3RlbmNpbEZ1bmMgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zdGVuY2lsRnVuYyA9IGpzb24uc3RlbmNpbEZ1bmM7IH1cclxuXHRcdGlmIChqc29uLnN0ZW5jaWxSZWYgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zdGVuY2lsUmVmID0ganNvbi5zdGVuY2lsUmVmOyB9XHJcblx0XHRpZiAoanNvbi5zdGVuY2lsRnVuY01hc2sgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zdGVuY2lsRnVuY01hc2sgPSBqc29uLnN0ZW5jaWxGdW5jTWFzazsgfVxyXG5cdFx0aWYgKGpzb24uc3RlbmNpbEZhaWwgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zdGVuY2lsRmFpbCA9IGpzb24uc3RlbmNpbEZhaWw7IH1cclxuXHRcdGlmIChqc29uLnN0ZW5jaWxaRmFpbCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnN0ZW5jaWxaRmFpbCA9IGpzb24uc3RlbmNpbFpGYWlsOyB9XHJcblx0XHRpZiAoanNvbi5zdGVuY2lsWlBhc3MgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgPSBqc29uLnN0ZW5jaWxaUGFzczsgfVxyXG5cclxuXHRcdGlmIChqc29uLndpcmVmcmFtZSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLndpcmVmcmFtZSA9IGpzb24ud2lyZWZyYW1lOyB9XHJcblx0XHRpZiAoanNvbi53aXJlZnJhbWVMaW5ld2lkdGggIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggPSBqc29uLndpcmVmcmFtZUxpbmV3aWR0aDsgfVxyXG5cdFx0aWYgKGpzb24ud2lyZWZyYW1lTGluZWNhcCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLndpcmVmcmFtZUxpbmVjYXAgPSBqc29uLndpcmVmcmFtZUxpbmVjYXA7IH1cclxuXHRcdGlmIChqc29uLndpcmVmcmFtZUxpbmVqb2luICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWpvaW4gPSBqc29uLndpcmVmcmFtZUxpbmVqb2luOyB9XHJcblxyXG5cdFx0aWYgKGpzb24ucm90YXRpb24gIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5yb3RhdGlvbiA9IGpzb24ucm90YXRpb247IH1cclxuXHJcblx0XHRpZiAoanNvbi5saW5ld2lkdGggIT09IDEpIHsgbWF0ZXJpYWwubGluZXdpZHRoID0ganNvbi5saW5ld2lkdGg7IH1cclxuXHRcdGlmIChqc29uLmRhc2hTaXplICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplOyB9XHJcblx0XHRpZiAoanNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZ2FwU2l6ZSA9IGpzb24uZ2FwU2l6ZTsgfVxyXG5cdFx0aWYgKGpzb24uc2NhbGUgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5zY2FsZSA9IGpzb24uc2NhbGU7IH1cclxuXHJcblx0XHRpZiAoanNvbi5wb2x5Z29uT2Zmc2V0ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwucG9seWdvbk9mZnNldCA9IGpzb24ucG9seWdvbk9mZnNldDsgfVxyXG5cdFx0aWYgKGpzb24ucG9seWdvbk9mZnNldEZhY3RvciAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3I7IH1cclxuXHRcdGlmIChqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyA9IGpzb24ucG9seWdvbk9mZnNldFVuaXRzOyB9XHJcblxyXG5cdFx0aWYgKGpzb24uc2tpbm5pbmcgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5za2lubmluZyA9IGpzb24uc2tpbm5pbmc7IH1cclxuXHRcdGlmIChqc29uLm1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9IGpzb24ubW9ycGhUYXJnZXRzOyB9XHJcblx0XHRpZiAoanNvbi5tb3JwaE5vcm1hbHMgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSBqc29uLm1vcnBoTm9ybWFsczsgfVxyXG5cdFx0aWYgKGpzb24uZGl0aGVyaW5nICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGl0aGVyaW5nID0ganNvbi5kaXRoZXJpbmc7IH1cclxuXHJcblx0XHRpZiAoanNvbi52aXNpYmxlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwudmlzaWJsZSA9IGpzb24udmlzaWJsZTsgfVxyXG5cclxuXHRcdGlmIChqc29uLnRvbmVNYXBwZWQgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC50b25lTWFwcGVkID0ganNvbi50b25lTWFwcGVkOyB9XHJcblxyXG5cdFx0aWYgKGpzb24udXNlckRhdGEgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7IH1cclxuXHJcblx0XHQvLyBTaGFkZXIgTWF0ZXJpYWxcclxuXHJcblx0XHRpZiAoanNvbi51bmlmb3JtcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIGpzb24udW5pZm9ybXMpIHtcclxuXHJcblx0XHRcdFx0dmFyIHVuaWZvcm0gPSBqc29uLnVuaWZvcm1zW25hbWVdO1xyXG5cclxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1tuYW1lXSA9IHt9O1xyXG5cclxuXHRcdFx0XHRzd2l0Y2ggKHVuaWZvcm0udHlwZSkge1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ3QnOlxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1tuYW1lXS52YWx1ZSA9IGdldFRleHR1cmUodW5pZm9ybS52YWx1ZSk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ2MnOlxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1tuYW1lXS52YWx1ZSA9IG5ldyBDb2xvcigpLnNldEhleCh1bmlmb3JtLnZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAndjInOlxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1tuYW1lXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KHVuaWZvcm0udmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICd2Myc6XHJcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zW25hbWVdLnZhbHVlID0gbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkodW5pZm9ybS52YWx1ZSk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ3Y0JzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbbmFtZV0udmFsdWUgPSBuZXcgVmVjdG9yNCgpLmZyb21BcnJheSh1bmlmb3JtLnZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnbTMnOlxyXG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1tuYW1lXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KHVuaWZvcm0udmFsdWUpO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ200JzpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbbmFtZV0udmFsdWUgPSBuZXcgTWF0cml4NCgpLmZyb21BcnJheSh1bmlmb3JtLnZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbbmFtZV0udmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChqc29uLmRlZmluZXMgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5kZWZpbmVzID0ganNvbi5kZWZpbmVzOyB9XHJcblx0XHRpZiAoanNvbi52ZXJ0ZXhTaGFkZXIgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXIgPSBqc29uLnZlcnRleFNoYWRlcjsgfVxyXG5cdFx0aWYgKGpzb24uZnJhZ21lbnRTaGFkZXIgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IGpzb24uZnJhZ21lbnRTaGFkZXI7IH1cclxuXHJcblx0XHRpZiAoanNvbi5leHRlbnNpb25zICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBqc29uLmV4dGVuc2lvbnMpIHtcclxuXHJcblx0XHRcdFx0bWF0ZXJpYWwuZXh0ZW5zaW9uc1trZXldID0ganNvbi5leHRlbnNpb25zW2tleV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdC8vIERlcHJlY2F0ZWRcclxuXHJcblx0XHRpZiAoanNvbi5zaGFkaW5nICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLnNoYWRpbmcgPT09IDE7IH0gLy8gVEhSRUUuRmxhdFNoYWRpbmdcclxuXHJcblx0XHQvLyBmb3IgUG9pbnRzTWF0ZXJpYWxcclxuXHJcblx0XHRpZiAoanNvbi5zaXplICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc2l6ZSA9IGpzb24uc2l6ZTsgfVxyXG5cdFx0aWYgKGpzb24uc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID0ganNvbi5zaXplQXR0ZW51YXRpb247IH1cclxuXHJcblx0XHQvLyBtYXBzXHJcblxyXG5cdFx0aWYgKGpzb24ubWFwICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwubWFwID0gZ2V0VGV4dHVyZShqc29uLm1hcCk7IH1cclxuXHRcdGlmIChqc29uLm1hdGNhcCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLm1hdGNhcCA9IGdldFRleHR1cmUoanNvbi5tYXRjYXApOyB9XHJcblxyXG5cdFx0aWYgKGpzb24uYWxwaGFNYXAgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0bWF0ZXJpYWwuYWxwaGFNYXAgPSBnZXRUZXh0dXJlKGpzb24uYWxwaGFNYXApO1xyXG5cdFx0XHRtYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChqc29uLmJ1bXBNYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5idW1wTWFwID0gZ2V0VGV4dHVyZShqc29uLmJ1bXBNYXApOyB9XHJcblx0XHRpZiAoanNvbi5idW1wU2NhbGUgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5idW1wU2NhbGUgPSBqc29uLmJ1bXBTY2FsZTsgfVxyXG5cclxuXHRcdGlmIChqc29uLm5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLm5vcm1hbE1hcCA9IGdldFRleHR1cmUoanNvbi5ub3JtYWxNYXApOyB9XHJcblx0XHRpZiAoanNvbi5ub3JtYWxNYXBUeXBlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9IGpzb24ubm9ybWFsTWFwVHlwZTsgfVxyXG5cdFx0aWYgKGpzb24ubm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dmFyIG5vcm1hbFNjYWxlID0ganNvbi5ub3JtYWxTY2FsZTtcclxuXHJcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG5vcm1hbFNjYWxlKSA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdFx0Ly8gQmxlbmRlciBleHBvcnRlciB1c2VkIHRvIGV4cG9ydCBhIHNjYWxhci4gU2VlICM3NDU5XHJcblxyXG5cdFx0XHRcdG5vcm1hbFNjYWxlID0gW25vcm1hbFNjYWxlLCBub3JtYWxTY2FsZV07XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KG5vcm1hbFNjYWxlKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGpzb24uZGlzcGxhY2VtZW50TWFwICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZShqc29uLmRpc3BsYWNlbWVudE1hcCk7IH1cclxuXHRcdGlmIChqc29uLmRpc3BsYWNlbWVudFNjYWxlICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgPSBqc29uLmRpc3BsYWNlbWVudFNjYWxlOyB9XHJcblx0XHRpZiAoanNvbi5kaXNwbGFjZW1lbnRCaWFzICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcyA9IGpzb24uZGlzcGxhY2VtZW50QmlhczsgfVxyXG5cclxuXHRcdGlmIChqc29uLnJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoanNvbi5yb3VnaG5lc3NNYXApOyB9XHJcblx0XHRpZiAoanNvbi5tZXRhbG5lc3NNYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSBnZXRUZXh0dXJlKGpzb24ubWV0YWxuZXNzTWFwKTsgfVxyXG5cclxuXHRcdGlmIChqc29uLmVtaXNzaXZlTWFwICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBnZXRUZXh0dXJlKGpzb24uZW1pc3NpdmVNYXApOyB9XHJcblx0XHRpZiAoanNvbi5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0ganNvbi5lbWlzc2l2ZUludGVuc2l0eTsgfVxyXG5cclxuXHRcdGlmIChqc29uLnNwZWN1bGFyTWFwICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBnZXRUZXh0dXJlKGpzb24uc3BlY3VsYXJNYXApOyB9XHJcblxyXG5cdFx0aWYgKGpzb24uZW52TWFwICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuZW52TWFwID0gZ2V0VGV4dHVyZShqc29uLmVudk1hcCk7IH1cclxuXHRcdGlmIChqc29uLmVudk1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IGpzb24uZW52TWFwSW50ZW5zaXR5OyB9XHJcblxyXG5cdFx0aWYgKGpzb24ucmVmbGVjdGl2aXR5ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwucmVmbGVjdGl2aXR5ID0ganNvbi5yZWZsZWN0aXZpdHk7IH1cclxuXHRcdGlmIChqc29uLnJlZnJhY3Rpb25SYXRpbyAhPT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IGpzb24ucmVmcmFjdGlvblJhdGlvOyB9XHJcblxyXG5cdFx0aWYgKGpzb24ubGlnaHRNYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5saWdodE1hcCA9IGdldFRleHR1cmUoanNvbi5saWdodE1hcCk7IH1cclxuXHRcdGlmIChqc29uLmxpZ2h0TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5OyB9XHJcblxyXG5cdFx0aWYgKGpzb24uYW9NYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5hb01hcCA9IGdldFRleHR1cmUoanNvbi5hb01hcCk7IH1cclxuXHRcdGlmIChqc29uLmFvTWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHsgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSBqc29uLmFvTWFwSW50ZW5zaXR5OyB9XHJcblxyXG5cdFx0aWYgKGpzb24uZ3JhZGllbnRNYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5ncmFkaWVudE1hcCA9IGdldFRleHR1cmUoanNvbi5ncmFkaWVudE1hcCk7IH1cclxuXHJcblx0XHRpZiAoanNvbi5jbGVhcmNvYXROb3JtYWxNYXAgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgPSBnZXRUZXh0dXJlKGpzb24uY2xlYXJjb2F0Tm9ybWFsTWFwKTsgfVxyXG5cdFx0aWYgKGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCkgeyBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUpOyB9XHJcblxyXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRUZXh0dXJlczogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxyXG4gKi9cclxuXHJcbnZhciBMb2FkZXJVdGlscyA9IHtcclxuXHJcblx0ZGVjb2RlVGV4dDogZnVuY3Rpb24gKGFycmF5KSB7XHJcblxyXG5cdFx0aWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHJcblx0XHRcdHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYXJyYXkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBBdm9pZCB0aGUgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcnJheSkgc2hvcnRjdXQsIHdoaWNoXHJcblx0XHQvLyB0aHJvd3MgYSBcIm1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIgZXJyb3IgZm9yIGxhcmdlIGFycmF5cy5cclxuXHJcblx0XHR2YXIgcyA9ICcnO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBpbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdC8vIEltcGxpY2l0bHkgYXNzdW1lcyBsaXR0bGUtZW5kaWFuLlxyXG5cdFx0XHRzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJyYXlbaV0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0cnkge1xyXG5cclxuXHRcdFx0Ly8gbWVyZ2VzIG11bHRpLWJ5dGUgdXRmLTggY2hhcmFjdGVycy5cclxuXHJcblx0XHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHMpKTtcclxuXHJcblx0XHR9IGNhdGNoIChlKSB7IC8vIHNlZSAjMTYzNThcclxuXHJcblx0XHRcdHJldHVybiBzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0ZXh0cmFjdFVybEJhc2U6IGZ1bmN0aW9uICh1cmwpIHtcclxuXHJcblx0XHR2YXIgaW5kZXggPSB1cmwubGFzdEluZGV4T2YoJy8nKTtcclxuXHJcblx0XHRpZiAoaW5kZXggPT09IC0gMSkgeyByZXR1cm4gJy4vJzsgfVxyXG5cclxuXHRcdHJldHVybiB1cmwuc3Vic3RyKDAsIGluZGV4ICsgMSk7XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSB7XHJcblxyXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc7XHJcblx0dGhpcy5tYXhJbnN0YW5jZWRDb3VudCA9IHVuZGVmaW5lZDtcclxuXHJcbn1cclxuXHJcbkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSxcclxuXHJcblx0aXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHR0aGlzLm1heEluc3RhbmNlZENvdW50ID0gc291cmNlLm1heEluc3RhbmNlZENvdW50O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xyXG5cclxuXHRcdGRhdGEubWF4SW5zdGFuY2VkQ291bnQgPSB0aGlzLm1heEluc3RhbmNlZENvdW50O1xyXG5cclxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA9IHRydWU7XHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQsIG1lc2hQZXJBdHRyaWJ1dGUpIHtcclxuXHJcblx0aWYgKHR5cGVvZiAobm9ybWFsaXplZCkgPT09ICdudW1iZXInKSB7XHJcblxyXG5cdFx0bWVzaFBlckF0dHJpYnV0ZSA9IG5vcm1hbGl6ZWQ7XHJcblxyXG5cdFx0bm9ybWFsaXplZCA9IGZhbHNlO1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTogVGhlIGNvbnN0cnVjdG9yIG5vdyBleHBlY3RzIG5vcm1hbGl6ZWQgYXMgdGhlIHRoaXJkIGFyZ3VtZW50LicpO1xyXG5cclxuXHR9XHJcblxyXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKHRoaXMsIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCk7XHJcblxyXG5cdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGUgfHwgMTtcclxuXHJcbn1cclxuXHJcbkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSxcclxuXHJcblx0aXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLCBzb3VyY2UpO1xyXG5cclxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7XHJcblxyXG5cdFx0ZGF0YS5tZXNoUGVyQXR0cmlidXRlID0gdGhpcy5tZXNoUGVyQXR0cmlidXRlO1xyXG5cclxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiBkYXRhO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5TG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5CdWZmZXJHZW9tZXRyeUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEJ1ZmZlckdlb21ldHJ5TG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlcihzY29wZS5tYW5hZ2VyKTtcclxuXHRcdGxvYWRlci5zZXRQYXRoKHNjb3BlLnBhdGgpO1xyXG5cdFx0bG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAodGV4dCkge1xyXG5cclxuXHRcdFx0b25Mb2FkKHNjb3BlLnBhcnNlKEpTT04ucGFyc2UodGV4dCkpKTtcclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2U6IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5ID0ganNvbi5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID8gbmV3IEluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5KCkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcblx0XHR2YXIgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XHJcblxyXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1tpbmRleC50eXBlXShpbmRleC5hcnJheSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEluZGV4KG5ldyBCdWZmZXJBdHRyaWJ1dGUodHlwZWRBcnJheSwgMSkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgYXR0cmlidXRlcyA9IGpzb24uZGF0YS5hdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcblxyXG5cdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1trZXldO1xyXG5cdFx0XHR2YXIgdHlwZWRBcnJheSA9IG5ldyBUWVBFRF9BUlJBWVNbYXR0cmlidXRlLnR5cGVdKGF0dHJpYnV0ZS5hcnJheSk7XHJcblx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7XHJcblx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgYnVmZmVyQXR0cmlidXRlQ29uc3RyKHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQpO1xyXG5cdFx0XHRpZiAoYXR0cmlidXRlLm5hbWUgIT09IHVuZGVmaW5lZCkgeyBidWZmZXJBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZS5uYW1lOyB9XHJcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZShrZXksIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBqc29uLmRhdGEubW9ycGhBdHRyaWJ1dGVzO1xyXG5cclxuXHRcdGlmIChtb3JwaEF0dHJpYnV0ZXMpIHtcclxuXHJcblx0XHRcdGZvciAodmFyIGtleSBpbiBtb3JwaEF0dHJpYnV0ZXMpIHtcclxuXHJcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5ID0gbW9ycGhBdHRyaWJ1dGVzW2tleV07XHJcblxyXG5cdFx0XHRcdHZhciBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBhdHRyaWJ1dGVBcnJheS5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5W2ldO1xyXG5cdFx0XHRcdFx0dmFyIHR5cGVkQXJyYXkgPSBuZXcgVFlQRURfQVJSQVlTW2F0dHJpYnV0ZS50eXBlXShhdHRyaWJ1dGUuYXJyYXkpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKHR5cGVkQXJyYXksIGF0dHJpYnV0ZS5pdGVtU2l6ZSwgYXR0cmlidXRlLm5vcm1hbGl6ZWQpO1xyXG5cdFx0XHRcdFx0aWYgKGF0dHJpYnV0ZS5uYW1lICE9PSB1bmRlZmluZWQpIHsgYnVmZmVyQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTsgfVxyXG5cdFx0XHRcdFx0YXJyYXkucHVzaChidWZmZXJBdHRyaWJ1dGUpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlc1trZXldID0gYXJyYXk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBncm91cHMgPSBqc29uLmRhdGEuZ3JvdXBzIHx8IGpzb24uZGF0YS5kcmF3Y2FsbHMgfHwganNvbi5kYXRhLm9mZnNldHM7XHJcblxyXG5cdFx0aWYgKGdyb3VwcyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGdyb3Vwcy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbaV07XHJcblxyXG5cdFx0XHRcdGdlb21ldHJ5LmFkZEdyb3VwKGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IGpzb24uZGF0YS5ib3VuZGluZ1NwaGVyZTtcclxuXHJcblx0XHRpZiAoYm91bmRpbmdTcGhlcmUgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dmFyIGNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0XHRpZiAoYm91bmRpbmdTcGhlcmUuY2VudGVyICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Y2VudGVyLmZyb21BcnJheShib3VuZGluZ1NwaGVyZS5jZW50ZXIpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKGNlbnRlciwgYm91bmRpbmdTcGhlcmUucmFkaXVzKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGpzb24ubmFtZSkgeyBnZW9tZXRyeS5uYW1lID0ganNvbi5uYW1lOyB9XHJcblx0XHRpZiAoanNvbi51c2VyRGF0YSkgeyBnZW9tZXRyeS51c2VyRGF0YSA9IGpzb24udXNlckRhdGE7IH1cclxuXHJcblx0XHRyZXR1cm4gZ2VvbWV0cnk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxudmFyIFRZUEVEX0FSUkFZUyA9IHtcclxuXHRJbnQ4QXJyYXk6IEludDhBcnJheSxcclxuXHRVaW50OEFycmF5OiBVaW50OEFycmF5LFxyXG5cdC8vIFdvcmthcm91bmQgZm9yIElFMTEgcHJlIEtCMjkyOTQzNy4gU2VlICMxMTQ0MFxyXG5cdFVpbnQ4Q2xhbXBlZEFycmF5OiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhDbGFtcGVkQXJyYXkgOiBVaW50OEFycmF5LFxyXG5cdEludDE2QXJyYXk6IEludDE2QXJyYXksXHJcblx0VWludDE2QXJyYXk6IFVpbnQxNkFycmF5LFxyXG5cdEludDMyQXJyYXk6IEludDMyQXJyYXksXHJcblx0VWludDMyQXJyYXk6IFVpbnQzMkFycmF5LFxyXG5cdEZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LFxyXG5cdEZsb2F0NjRBcnJheTogRmxvYXQ2NEFycmF5XHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBPYmplY3RMb2FkZXIobWFuYWdlcikge1xyXG5cclxuXHRMb2FkZXIuY2FsbCh0aGlzLCBtYW5hZ2VyKTtcclxuXHJcbn1cclxuXHJcbk9iamVjdExvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IE9iamVjdExvYWRlcixcclxuXHJcblx0bG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XHJcblxyXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR2YXIgcGF0aCA9ICh0aGlzLnBhdGggPT09ICcnKSA/IExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKHVybCkgOiB0aGlzLnBhdGg7XHJcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9IHRoaXMucmVzb3VyY2VQYXRoIHx8IHBhdGg7XHJcblxyXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKHNjb3BlLm1hbmFnZXIpO1xyXG5cdFx0bG9hZGVyLnNldFBhdGgodGhpcy5wYXRoKTtcclxuXHRcdGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKHRleHQpIHtcclxuXHJcblx0XHRcdHZhciBqc29uID0gbnVsbDtcclxuXHJcblx0XHRcdHRyeSB7XHJcblxyXG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKHRleHQpO1xyXG5cclxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHJcblx0XHRcdFx0aWYgKG9uRXJyb3IgIT09IHVuZGVmaW5lZCkgeyBvbkVycm9yKGVycm9yKTsgfVxyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRTpPYmplY3RMb2FkZXI6IENhblxcJ3QgcGFyc2UgJyArIHVybCArICcuJywgZXJyb3IubWVzc2FnZSk7XHJcblxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBtZXRhZGF0YSA9IGpzb24ubWV0YWRhdGE7XHJcblxyXG5cdFx0XHRpZiAobWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlID09PSB1bmRlZmluZWQgfHwgbWV0YWRhdGEudHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZ2VvbWV0cnknKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNjb3BlLnBhcnNlKGpzb24sIG9uTG9hZCk7XHJcblxyXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvcik7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlOiBmdW5jdGlvbiAoanNvbiwgb25Mb2FkKSB7XHJcblxyXG5cdFx0dmFyIHNoYXBlcyA9IHRoaXMucGFyc2VTaGFwZShqc29uLnNoYXBlcyk7XHJcblx0XHR2YXIgZ2VvbWV0cmllcyA9IHRoaXMucGFyc2VHZW9tZXRyaWVzKGpzb24uZ2VvbWV0cmllcywgc2hhcGVzKTtcclxuXHJcblx0XHR2YXIgaW1hZ2VzID0gdGhpcy5wYXJzZUltYWdlcyhqc29uLmltYWdlcywgZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0aWYgKG9uTG9hZCAhPT0gdW5kZWZpbmVkKSB7IG9uTG9hZChvYmplY3QpOyB9XHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dmFyIHRleHR1cmVzID0gdGhpcy5wYXJzZVRleHR1cmVzKGpzb24udGV4dHVyZXMsIGltYWdlcyk7XHJcblx0XHR2YXIgbWF0ZXJpYWxzID0gdGhpcy5wYXJzZU1hdGVyaWFscyhqc29uLm1hdGVyaWFscywgdGV4dHVyZXMpO1xyXG5cclxuXHRcdHZhciBvYmplY3QgPSB0aGlzLnBhcnNlT2JqZWN0KGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMpO1xyXG5cclxuXHRcdGlmIChqc29uLmFuaW1hdGlvbnMpIHtcclxuXHJcblx0XHRcdG9iamVjdC5hbmltYXRpb25zID0gdGhpcy5wYXJzZUFuaW1hdGlvbnMoanNvbi5hbmltYXRpb25zKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGpzb24uaW1hZ2VzID09PSB1bmRlZmluZWQgfHwganNvbi5pbWFnZXMubGVuZ3RoID09PSAwKSB7XHJcblxyXG5cdFx0XHRpZiAob25Mb2FkICE9PSB1bmRlZmluZWQpIHsgb25Mb2FkKG9iamVjdCk7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG9iamVjdDtcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2VTaGFwZTogZnVuY3Rpb24gKGpzb24pIHtcclxuXHJcblx0XHR2YXIgc2hhcGVzID0ge307XHJcblxyXG5cdFx0aWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHR2YXIgc2hhcGUgPSBuZXcgU2hhcGUoKS5mcm9tSlNPTihqc29uW2ldKTtcclxuXHJcblx0XHRcdFx0c2hhcGVzW3NoYXBlLnV1aWRdID0gc2hhcGU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBzaGFwZXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlR2VvbWV0cmllczogZnVuY3Rpb24gKGpzb24sIHNoYXBlcykge1xyXG5cclxuXHRcdHZhciBnZW9tZXRyaWVzID0ge307XHJcblxyXG5cdFx0aWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dmFyIGJ1ZmZlckdlb21ldHJ5TG9hZGVyID0gbmV3IEJ1ZmZlckdlb21ldHJ5TG9hZGVyKCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHZhciBnZW9tZXRyeTtcclxuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25baV07XHJcblxyXG5cdFx0XHRcdHN3aXRjaCAoZGF0YS50eXBlKSB7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnUGxhbmVHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdQbGFuZUJ1ZmZlckdlb21ldHJ5JzpcclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbZGF0YS50eXBlXShcclxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGhTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdCb3hHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdCb3hCdWZmZXJHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdDdWJlR2VvbWV0cnknOiAvLyBiYWNrd2FyZHMgY29tcGF0aWJsZVxyXG5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGgsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXB0aCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmRlcHRoU2VnbWVudHNcclxuXHRcdFx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ0NpcmNsZUJ1ZmZlckdlb21ldHJ5JzpcclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbZGF0YS50eXBlXShcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdDeWxpbmRlckdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ0N5bGluZGVyQnVmZmVyR2VvbWV0cnknOlxyXG5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzVG9wLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzQm90dG9tLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHRTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wZW5FbmRlZCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnQ29uZUdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ0NvbmVCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzW2RhdGEudHlwZV0oXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEub3BlbkVuZGVkLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdTcGhlcmVHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzW2RhdGEudHlwZV0oXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aFNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5waGlTdGFydCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknOlxyXG5cdFx0XHRcdFx0Y2FzZSAnRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxyXG5cdFx0XHRcdFx0Y2FzZSAnSWNvc2FoZWRyb25HZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ09jdGFoZWRyb25HZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxyXG5cdFx0XHRcdFx0Y2FzZSAnVGV0cmFoZWRyb25HZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JzpcclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbZGF0YS50eXBlXShcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmRldGFpbFxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnUmluZ0dlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ1JpbmdCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzW2RhdGEudHlwZV0oXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5pbm5lclJhZGl1cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLm91dGVyUmFkaXVzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdUb3J1c0dlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzQnVmZmVyR2VvbWV0cnknOlxyXG5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudHViZSxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuYXJjXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdUb3J1c0tub3RHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzW2RhdGEudHlwZV0oXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJlLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEudHVidWxhclNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5wLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucVxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnVHViZUdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ1R1YmVCdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGJ1aWx0LWluIGN1cnZlcyAoZS5nLiBDYXRtdWxsUm9tQ3VydmUzKS5cclxuXHRcdFx0XHRcdFx0Ly8gVXNlciBkZWZpbmVkIGN1cnZlcyBvciBpbnN0YW5jZXMgb2YgQ3VydmVQYXRoIHdpbGwgbm90IGJlIGRlc2VyaWFsaXplZC5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdG5ldyBDdXJ2ZXNbZGF0YS5wYXRoLnR5cGVdKCkuZnJvbUpTT04oZGF0YS5wYXRoKSxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuY2xvc2VkXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdMYXRoZUdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ0xhdGhlQnVmZmVyR2VvbWV0cnknOlxyXG5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEucG9pbnRzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuc2VnbWVudHMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5waGlTdGFydCxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aFxyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0Y2FzZSAnUG9seWhlZHJvbkdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzW2RhdGEudHlwZV0oXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS52ZXJ0aWNlcyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmluZGljZXMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5kZXRhaWxzXHJcblx0XHRcdFx0XHRcdCk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdTaGFwZUdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ1NoYXBlQnVmZmVyR2VvbWV0cnknOlxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1tkYXRhLnNoYXBlc1tqXV07XHJcblxyXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goc2hhcGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1tkYXRhLnR5cGVdKFxyXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuY3VydmVTZWdtZW50c1xyXG5cdFx0XHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ0V4dHJ1ZGVHZW9tZXRyeSc6XHJcblx0XHRcdFx0XHRjYXNlICdFeHRydWRlQnVmZmVyR2VvbWV0cnknOlxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XHJcblxyXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaisrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1tkYXRhLnNoYXBlc1tqXV07XHJcblxyXG5cdFx0XHRcdFx0XHRcdGdlb21ldHJ5U2hhcGVzLnB1c2goc2hhcGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGV4dHJ1ZGVQYXRoID0gZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGV4dHJ1ZGVQYXRoICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gbmV3IEN1cnZlc1tleHRydWRlUGF0aC50eXBlXSgpLmZyb21KU09OKGV4dHJ1ZGVQYXRoKTtcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbZGF0YS50eXBlXShcclxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wdGlvbnNcclxuXHRcdFx0XHRcdFx0KTtcclxuXHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRcdGNhc2UgJ0J1ZmZlckdlb21ldHJ5JzpcclxuXHRcdFx0XHRcdGNhc2UgJ0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5JzpcclxuXHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gYnVmZmVyR2VvbWV0cnlMb2FkZXIucGFyc2UoZGF0YSk7XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRjYXNlICdHZW9tZXRyeSc6XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoJ1RIUkVFJyBpbiB3aW5kb3cgJiYgJ0xlZ2FjeUpTT05Mb2FkZXInIGluIFRIUkVFKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBnZW9tZXRyeUxvYWRlciA9IG5ldyBUSFJFRS5MZWdhY3lKU09OTG9hZGVyKCk7XHJcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBnZW9tZXRyeUxvYWRlci5wYXJzZShkYXRhLCB0aGlzLnJlc291cmNlUGF0aCkuZ2VvbWV0cnk7XHJcblxyXG5cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuT2JqZWN0TG9hZGVyOiBZb3UgaGF2ZSB0byBpbXBvcnQgTGVnYWN5SlNPTkxvYWRlciBpbiBvcmRlciBsb2FkIGdlb21ldHJ5IGRhdGEgb2YgdHlwZSBcIkdlb21ldHJ5XCIuJyk7XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRkZWZhdWx0OlxyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXI6IFVuc3VwcG9ydGVkIGdlb21ldHJ5IHR5cGUgXCInICsgZGF0YS50eXBlICsgJ1wiJyk7XHJcblxyXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRnZW9tZXRyeS51dWlkID0gZGF0YS51dWlkO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5uYW1lICE9PSB1bmRlZmluZWQpIHsgZ2VvbWV0cnkubmFtZSA9IGRhdGEubmFtZTsgfVxyXG5cdFx0XHRcdGlmIChnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ID09PSB0cnVlICYmIGRhdGEudXNlckRhdGEgIT09IHVuZGVmaW5lZCkgeyBnZW9tZXRyeS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7IH1cclxuXHJcblx0XHRcdFx0Z2VvbWV0cmllc1tkYXRhLnV1aWRdID0gZ2VvbWV0cnk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBnZW9tZXRyaWVzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRwYXJzZU1hdGVyaWFsczogZnVuY3Rpb24gKGpzb24sIHRleHR1cmVzKSB7XHJcblxyXG5cdFx0dmFyIGNhY2hlID0ge307IC8vIE11bHRpTWF0ZXJpYWxcclxuXHRcdHZhciBtYXRlcmlhbHMgPSB7fTtcclxuXHJcblx0XHRpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IE1hdGVyaWFsTG9hZGVyKCk7XHJcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyh0ZXh0dXJlcyk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGpzb24ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdHZhciBkYXRhID0ganNvbltpXTtcclxuXHJcblx0XHRcdFx0aWYgKGRhdGEudHlwZSA9PT0gJ011bHRpTWF0ZXJpYWwnKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gRGVwcmVjYXRlZFxyXG5cclxuXHRcdFx0XHRcdHZhciBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZGF0YS5tYXRlcmlhbHMubGVuZ3RoOyBqKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IGRhdGEubWF0ZXJpYWxzW2pdO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGNhY2hlW21hdGVyaWFsLnV1aWRdID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2FjaGVbbWF0ZXJpYWwudXVpZF0gPSBsb2FkZXIucGFyc2UobWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0YXJyYXkucHVzaChjYWNoZVttYXRlcmlhbC51dWlkXSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdG1hdGVyaWFsc1tkYXRhLnV1aWRdID0gYXJyYXk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0aWYgKGNhY2hlW2RhdGEudXVpZF0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y2FjaGVbZGF0YS51dWlkXSA9IGxvYWRlci5wYXJzZShkYXRhKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0bWF0ZXJpYWxzW2RhdGEudXVpZF0gPSBjYWNoZVtkYXRhLnV1aWRdO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBtYXRlcmlhbHM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlQW5pbWF0aW9uczogZnVuY3Rpb24gKGpzb24pIHtcclxuXHJcblx0XHR2YXIgYW5pbWF0aW9ucyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwganNvbi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dmFyIGRhdGEgPSBqc29uW2ldO1xyXG5cclxuXHRcdFx0dmFyIGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKGRhdGEpO1xyXG5cclxuXHRcdFx0aWYgKGRhdGEudXVpZCAhPT0gdW5kZWZpbmVkKSB7IGNsaXAudXVpZCA9IGRhdGEudXVpZDsgfVxyXG5cclxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKGNsaXApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2VJbWFnZXM6IGZ1bmN0aW9uIChqc29uLCBvbkxvYWQpIHtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cdFx0dmFyIGltYWdlcyA9IHt9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxvYWRJbWFnZSh1cmwpIHtcclxuXHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KHVybCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdFx0fSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKHVybCk7XHJcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKHVybCk7XHJcblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGpzb24gIT09IHVuZGVmaW5lZCAmJiBqc29uLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdHZhciBtYW5hZ2VyID0gbmV3IExvYWRpbmdNYW5hZ2VyKG9uTG9hZCk7XHJcblxyXG5cdFx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKG1hbmFnZXIpO1xyXG5cdFx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWwgPSBqc29uLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGltYWdlID0ganNvbltpXTtcclxuXHRcdFx0XHR2YXIgdXJsID0gaW1hZ2UudXJsO1xyXG5cclxuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh1cmwpKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbG9hZCBhcnJheSBvZiBpbWFnZXMgZS5nIEN1YmVUZXh0dXJlXHJcblxyXG5cdFx0XHRcdFx0aW1hZ2VzW2ltYWdlLnV1aWRdID0gW107XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsID0gdXJsLmxlbmd0aDsgaiA8IGpsOyBqKyspIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBjdXJyZW50VXJsID0gdXJsW2pdO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHBhdGggPSAvXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3QoY3VycmVudFVybCkgPyBjdXJyZW50VXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgY3VycmVudFVybDtcclxuXHJcblx0XHRcdFx0XHRcdGltYWdlc1tpbWFnZS51dWlkXS5wdXNoKGxvYWRJbWFnZShwYXRoKSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdC8vIGxvYWQgc2luZ2xlIGltYWdlXHJcblxyXG5cdFx0XHRcdFx0dmFyIHBhdGggPSAvXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3QoaW1hZ2UudXJsKSA/IGltYWdlLnVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIGltYWdlLnVybDtcclxuXHJcblx0XHRcdFx0XHRpbWFnZXNbaW1hZ2UudXVpZF0gPSBsb2FkSW1hZ2UocGF0aCk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGltYWdlcztcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2VUZXh0dXJlczogZnVuY3Rpb24gKGpzb24sIGltYWdlcykge1xyXG5cclxuXHRcdGZ1bmN0aW9uIHBhcnNlQ29uc3RhbnQodmFsdWUsIHR5cGUpIHtcclxuXHJcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7IHJldHVybiB2YWx1ZTsgfVxyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLicsIHZhbHVlKTtcclxuXHJcblx0XHRcdHJldHVybiB0eXBlW3ZhbHVlXTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRleHR1cmVzID0ge307XHJcblxyXG5cdFx0aWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IGpzb25baV07XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLmltYWdlID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdExvYWRlcjogTm8gXCJpbWFnZVwiIHNwZWNpZmllZCBmb3InLCBkYXRhLnV1aWQpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChpbWFnZXNbZGF0YS5pbWFnZV0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgaW1hZ2UnLCBkYXRhLmltYWdlKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgdGV4dHVyZTtcclxuXHJcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoaW1hZ2VzW2RhdGEuaW1hZ2VdKSkge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoaW1hZ2VzW2RhdGEuaW1hZ2VdKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHR0ZXh0dXJlID0gbmV3IFRleHR1cmUoaW1hZ2VzW2RhdGEuaW1hZ2VdKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0dGV4dHVyZS51dWlkID0gZGF0YS51dWlkO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5uYW1lICE9PSB1bmRlZmluZWQpIHsgdGV4dHVyZS5uYW1lID0gZGF0YS5uYW1lOyB9XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLm1hcHBpbmcgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLm1hcHBpbmcgPSBwYXJzZUNvbnN0YW50KGRhdGEubWFwcGluZywgVEVYVFVSRV9NQVBQSU5HKTsgfVxyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5vZmZzZXQgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLm9mZnNldC5mcm9tQXJyYXkoZGF0YS5vZmZzZXQpOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEucmVwZWF0ICE9PSB1bmRlZmluZWQpIHsgdGV4dHVyZS5yZXBlYXQuZnJvbUFycmF5KGRhdGEucmVwZWF0KTsgfVxyXG5cdFx0XHRcdGlmIChkYXRhLmNlbnRlciAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUuY2VudGVyLmZyb21BcnJheShkYXRhLmNlbnRlcik7IH1cclxuXHRcdFx0XHRpZiAoZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUucm90YXRpb24gPSBkYXRhLnJvdGF0aW9uOyB9XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLndyYXAgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdHRleHR1cmUud3JhcFMgPSBwYXJzZUNvbnN0YW50KGRhdGEud3JhcFswXSwgVEVYVFVSRV9XUkFQUElORyk7XHJcblx0XHRcdFx0XHR0ZXh0dXJlLndyYXBUID0gcGFyc2VDb25zdGFudChkYXRhLndyYXBbMV0sIFRFWFRVUkVfV1JBUFBJTkcpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUuZm9ybWF0ID0gZGF0YS5mb3JtYXQ7IH1cclxuXHRcdFx0XHRpZiAoZGF0YS50eXBlICE9PSB1bmRlZmluZWQpIHsgdGV4dHVyZS50eXBlID0gZGF0YS50eXBlOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEuZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLmVuY29kaW5nID0gZGF0YS5lbmNvZGluZzsgfVxyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5taW5GaWx0ZXIgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLm1pbkZpbHRlciA9IHBhcnNlQ29uc3RhbnQoZGF0YS5taW5GaWx0ZXIsIFRFWFRVUkVfRklMVEVSKTsgfVxyXG5cdFx0XHRcdGlmIChkYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUubWFnRmlsdGVyID0gcGFyc2VDb25zdGFudChkYXRhLm1hZ0ZpbHRlciwgVEVYVFVSRV9GSUxURVIpOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUuYW5pc290cm9weSA9IGRhdGEuYW5pc290cm9weTsgfVxyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkKSB7IHRleHR1cmUuZmxpcFkgPSBkYXRhLmZsaXBZOyB9XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLnByZW11bHRpcGx5QWxwaGEgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEgPSBkYXRhLnByZW11bHRpcGx5QWxwaGE7IH1cclxuXHRcdFx0XHRpZiAoZGF0YS51bnBhY2tBbGlnbm1lbnQgIT09IHVuZGVmaW5lZCkgeyB0ZXh0dXJlLnVucGFja0FsaWdubWVudCA9IGRhdGEudW5wYWNrQWxpZ25tZW50OyB9XHJcblxyXG5cdFx0XHRcdHRleHR1cmVzW2RhdGEudXVpZF0gPSB0ZXh0dXJlO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlT2JqZWN0OiBmdW5jdGlvbiAoZGF0YSwgZ2VvbWV0cmllcywgbWF0ZXJpYWxzKSB7XHJcblxyXG5cdFx0dmFyIG9iamVjdDtcclxuXHJcblx0XHRmdW5jdGlvbiBnZXRHZW9tZXRyeShuYW1lKSB7XHJcblxyXG5cdFx0XHRpZiAoZ2VvbWV0cmllc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnknLCBuYW1lKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBnZW9tZXRyaWVzW25hbWVdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBnZXRNYXRlcmlhbChuYW1lKSB7XHJcblxyXG5cdFx0XHRpZiAobmFtZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cclxuXHJcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XHJcblxyXG5cdFx0XHRcdHZhciBhcnJheSA9IFtdO1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHV1aWQgPSBuYW1lW2ldO1xyXG5cclxuXHRcdFx0XHRcdGlmIChtYXRlcmlhbHNbdXVpZF0gPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIHV1aWQpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRhcnJheS5wdXNoKG1hdGVyaWFsc1t1dWlkXSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGFycmF5O1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKG1hdGVyaWFsc1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgbWF0ZXJpYWwnLCBuYW1lKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBtYXRlcmlhbHNbbmFtZV07XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHN3aXRjaCAoZGF0YS50eXBlKSB7XHJcblxyXG5cdFx0XHRjYXNlICdTY2VuZSc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTY2VuZSgpO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRpZiAoTnVtYmVyLmlzSW50ZWdlcihkYXRhLmJhY2tncm91bmQpKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRvYmplY3QuYmFja2dyb3VuZCA9IG5ldyBDb2xvcihkYXRhLmJhY2tncm91bmQpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5mb2cgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRcdGlmIChkYXRhLmZvZy50eXBlID09PSAnRm9nJykge1xyXG5cclxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coZGF0YS5mb2cuY29sb3IsIGRhdGEuZm9nLm5lYXIsIGRhdGEuZm9nLmZhcik7XHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLmZvZy50eXBlID09PSAnRm9nRXhwMicpIHtcclxuXHJcblx0XHRcdFx0XHRcdG9iamVjdC5mb2cgPSBuZXcgRm9nRXhwMihkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoZGF0YS5mb3YsIGRhdGEuYXNwZWN0LCBkYXRhLm5lYXIsIGRhdGEuZmFyKTtcclxuXHJcblx0XHRcdFx0aWYgKGRhdGEuZm9jdXMgIT09IHVuZGVmaW5lZCkgeyBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC56b29tID0gZGF0YS56b29tOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEuZmlsbUdhdWdlICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LmZpbG1HYXVnZSA9IGRhdGEuZmlsbUdhdWdlOyB9XHJcblx0XHRcdFx0aWYgKGRhdGEuZmlsbU9mZnNldCAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0OyB9XHJcblx0XHRcdFx0aWYgKGRhdGEudmlldyAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC52aWV3ID0gT2JqZWN0LmFzc2lnbih7fSwgZGF0YS52aWV3KTsgfVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoZGF0YS5sZWZ0LCBkYXRhLnJpZ2h0LCBkYXRhLnRvcCwgZGF0YS5ib3R0b20sIGRhdGEubmVhciwgZGF0YS5mYXIpO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS56b29tICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207IH1cclxuXHRcdFx0XHRpZiAoZGF0YS52aWV3ICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhLnZpZXcpOyB9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnQW1iaWVudExpZ2h0JzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IEFtYmllbnRMaWdodChkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5KTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdQb2ludExpZ2h0JzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuZGVjYXkpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUmVjdEFyZWFMaWdodChkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBTcG90TGlnaHQoZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHksIGRhdGEuZGlzdGFuY2UsIGRhdGEuYW5nbGUsIGRhdGEucGVudW1icmEsIGRhdGEuZGVjYXkpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0hlbWlzcGhlcmVMaWdodCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoZGF0YS5jb2xvciwgZGF0YS5ncm91bmRDb2xvciwgZGF0YS5pbnRlbnNpdHkpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1NraW5uZWRNZXNoJzpcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VPYmplY3QoKSBkb2VzIG5vdCBzdXBwb3J0IFNraW5uZWRNZXNoIHlldC4nKTtcclxuXHJcblx0XHRcdGNhc2UgJ01lc2gnOlxyXG5cclxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBnZXRHZW9tZXRyeShkYXRhLmdlb21ldHJ5KTtcclxuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBnZXRNYXRlcmlhbChkYXRhLm1hdGVyaWFsKTtcclxuXHJcblx0XHRcdFx0aWYgKGdlb21ldHJ5LmJvbmVzICYmIGdlb21ldHJ5LmJvbmVzLmxlbmd0aCA+IDApIHtcclxuXHJcblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgU2tpbm5lZE1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRvYmplY3QgPSBuZXcgTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhLmRyYXdNb2RlICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LnNldERyYXdNb2RlKGRhdGEuZHJhd01vZGUpOyB9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnTE9EJzpcclxuXHJcblx0XHRcdFx0b2JqZWN0ID0gbmV3IExPRCgpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0xpbmUnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZShnZXRHZW9tZXRyeShkYXRhLmdlb21ldHJ5KSwgZ2V0TWF0ZXJpYWwoZGF0YS5tYXRlcmlhbCksIGRhdGEubW9kZSk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnTGluZUxvb3AnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoZ2V0R2VvbWV0cnkoZGF0YS5nZW9tZXRyeSksIGdldE1hdGVyaWFsKGRhdGEubWF0ZXJpYWwpKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdMaW5lU2VnbWVudHMnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKGdldEdlb21ldHJ5KGRhdGEuZ2VvbWV0cnkpLCBnZXRNYXRlcmlhbChkYXRhLm1hdGVyaWFsKSk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnUG9pbnRDbG91ZCc6XHJcblx0XHRcdGNhc2UgJ1BvaW50cyc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQb2ludHMoZ2V0R2VvbWV0cnkoZGF0YS5nZW9tZXRyeSksIGdldE1hdGVyaWFsKGRhdGEubWF0ZXJpYWwpKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdTcHJpdGUnOlxyXG5cclxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3ByaXRlKGdldE1hdGVyaWFsKGRhdGEubWF0ZXJpYWwpKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdHcm91cCc6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBHcm91cCgpO1xyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBPYmplY3QzRCgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRvYmplY3QudXVpZCA9IGRhdGEudXVpZDtcclxuXHJcblx0XHRpZiAoZGF0YS5uYW1lICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0Lm5hbWUgPSBkYXRhLm5hbWU7IH1cclxuXHJcblx0XHRpZiAoZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0b2JqZWN0Lm1hdHJpeC5mcm9tQXJyYXkoZGF0YS5tYXRyaXgpO1xyXG5cclxuXHRcdFx0aWYgKGRhdGEubWF0cml4QXV0b1VwZGF0ZSAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5tYXRyaXhBdXRvVXBkYXRlID0gZGF0YS5tYXRyaXhBdXRvVXBkYXRlOyB9XHJcblx0XHRcdGlmIChvYmplY3QubWF0cml4QXV0b1VwZGF0ZSkgeyBvYmplY3QubWF0cml4LmRlY29tcG9zZShvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUpOyB9XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGlmIChkYXRhLnBvc2l0aW9uICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LnBvc2l0aW9uLmZyb21BcnJheShkYXRhLnBvc2l0aW9uKTsgfVxyXG5cdFx0XHRpZiAoZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5yb3RhdGlvbi5mcm9tQXJyYXkoZGF0YS5yb3RhdGlvbik7IH1cclxuXHRcdFx0aWYgKGRhdGEucXVhdGVybmlvbiAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5xdWF0ZXJuaW9uLmZyb21BcnJheShkYXRhLnF1YXRlcm5pb24pOyB9XHJcblx0XHRcdGlmIChkYXRhLnNjYWxlICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LnNjYWxlLmZyb21BcnJheShkYXRhLnNjYWxlKTsgfVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZGF0YS5jYXN0U2hhZG93ICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LmNhc3RTaGFkb3cgPSBkYXRhLmNhc3RTaGFkb3c7IH1cclxuXHRcdGlmIChkYXRhLnJlY2VpdmVTaGFkb3cgIT09IHVuZGVmaW5lZCkgeyBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IGRhdGEucmVjZWl2ZVNoYWRvdzsgfVxyXG5cclxuXHRcdGlmIChkYXRhLnNoYWRvdykge1xyXG5cclxuXHRcdFx0aWYgKGRhdGEuc2hhZG93LmJpYXMgIT09IHVuZGVmaW5lZCkgeyBvYmplY3Quc2hhZG93LmJpYXMgPSBkYXRhLnNoYWRvdy5iaWFzOyB9XHJcblx0XHRcdGlmIChkYXRhLnNoYWRvdy5yYWRpdXMgIT09IHVuZGVmaW5lZCkgeyBvYmplY3Quc2hhZG93LnJhZGl1cyA9IGRhdGEuc2hhZG93LnJhZGl1czsgfVxyXG5cdFx0XHRpZiAoZGF0YS5zaGFkb3cubWFwU2l6ZSAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5zaGFkb3cubWFwU2l6ZS5mcm9tQXJyYXkoZGF0YS5zaGFkb3cubWFwU2l6ZSk7IH1cclxuXHRcdFx0aWYgKGRhdGEuc2hhZG93LmNhbWVyYSAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5zaGFkb3cuY2FtZXJhID0gdGhpcy5wYXJzZU9iamVjdChkYXRhLnNoYWRvdy5jYW1lcmEpOyB9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChkYXRhLnZpc2libGUgIT09IHVuZGVmaW5lZCkgeyBvYmplY3QudmlzaWJsZSA9IGRhdGEudmlzaWJsZTsgfVxyXG5cdFx0aWYgKGRhdGEuZnJ1c3R1bUN1bGxlZCAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5mcnVzdHVtQ3VsbGVkID0gZGF0YS5mcnVzdHVtQ3VsbGVkOyB9XHJcblx0XHRpZiAoZGF0YS5yZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkKSB7IG9iamVjdC5yZW5kZXJPcmRlciA9IGRhdGEucmVuZGVyT3JkZXI7IH1cclxuXHRcdGlmIChkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LnVzZXJEYXRhID0gZGF0YS51c2VyRGF0YTsgfVxyXG5cdFx0aWYgKGRhdGEubGF5ZXJzICE9PSB1bmRlZmluZWQpIHsgb2JqZWN0LmxheWVycy5tYXNrID0gZGF0YS5sYXllcnM7IH1cclxuXHJcblx0XHRpZiAoZGF0YS5jaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSBkYXRhLmNoaWxkcmVuO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRvYmplY3QuYWRkKHRoaXMucGFyc2VPYmplY3QoY2hpbGRyZW5baV0sIGdlb21ldHJpZXMsIG1hdGVyaWFscykpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZGF0YS50eXBlID09PSAnTE9EJykge1xyXG5cclxuXHRcdFx0dmFyIGxldmVscyA9IGRhdGEubGV2ZWxzO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIGxldmVsID0gbGV2ZWxzW2xdO1xyXG5cdFx0XHRcdHZhciBjaGlsZCA9IG9iamVjdC5nZXRPYmplY3RCeVByb3BlcnR5KCd1dWlkJywgbGV2ZWwub2JqZWN0KTtcclxuXHJcblx0XHRcdFx0aWYgKGNoaWxkICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHRvYmplY3QuYWRkTGV2ZWwoY2hpbGQsIGxldmVsLmRpc3RhbmNlKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gb2JqZWN0O1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbnZhciBURVhUVVJFX01BUFBJTkcgPSB7XHJcblx0VVZNYXBwaW5nOiBVVk1hcHBpbmcsXHJcblx0Q3ViZVJlZmxlY3Rpb25NYXBwaW5nOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmcsXHJcblx0Q3ViZVJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsXHJcblx0RXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLFxyXG5cdEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nOiBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyxcclxuXHRTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZzogU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsXHJcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxyXG5cdEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nOiBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZ1xyXG59O1xyXG5cclxudmFyIFRFWFRVUkVfV1JBUFBJTkcgPSB7XHJcblx0UmVwZWF0V3JhcHBpbmc6IFJlcGVhdFdyYXBwaW5nLFxyXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXHJcblx0TWlycm9yZWRSZXBlYXRXcmFwcGluZzogTWlycm9yZWRSZXBlYXRXcmFwcGluZ1xyXG59O1xyXG5cclxudmFyIFRFWFRVUkVfRklMVEVSID0ge1xyXG5cdE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsXHJcblx0TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxyXG5cdE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXI6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXHJcblx0TGluZWFyRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXHJcblx0TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcjogTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcixcclxuXHRMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI6IExpbmVhck1pcG1hcExpbmVhckZpbHRlclxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgdGhlc3BpdGUgLyBodHRwOi8vY2xpY2t0b3JlbGVhc2UuY29tL1xyXG4gKi9cclxuXHJcblxyXG5mdW5jdGlvbiBJbWFnZUJpdG1hcExvYWRlcihtYW5hZ2VyKSB7XHJcblxyXG5cdGlmICh0eXBlb2YgY3JlYXRlSW1hZ2VCaXRtYXAgPT09ICd1bmRlZmluZWQnKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogZmV0Y2goKSBub3Qgc3VwcG9ydGVkLicpO1xyXG5cclxuXHR9XHJcblxyXG5cdExvYWRlci5jYWxsKHRoaXMsIG1hbmFnZXIpO1xyXG5cclxuXHR0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcblxyXG59XHJcblxyXG5JbWFnZUJpdG1hcExvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEltYWdlQml0bWFwTG9hZGVyLFxyXG5cclxuXHRzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcclxuXHJcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHRpZiAodXJsID09PSB1bmRlZmluZWQpIHsgdXJsID0gJyc7IH1cclxuXHJcblx0XHRpZiAodGhpcy5wYXRoICE9PSB1bmRlZmluZWQpIHsgdXJsID0gdGhpcy5wYXRoICsgdXJsOyB9XHJcblxyXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwodXJsKTtcclxuXHJcblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQodXJsKTtcclxuXHJcblx0XHRpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KHVybCk7XHJcblxyXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0aWYgKG9uTG9hZCkgeyBvbkxvYWQoY2FjaGVkKTsgfVxyXG5cclxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHRcdH0sIDApO1xyXG5cclxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZmV0Y2godXJsKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuXHJcblx0XHRcdHJldHVybiByZXMuYmxvYigpO1xyXG5cclxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKGJsb2IpIHtcclxuXHJcblx0XHRcdGlmIChzY29wZS5vcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Ly8gV29ya2Fyb3VuZCBmb3IgRmlyZUZveC4gSXQgY2F1c2VzIGFuIGVycm9yIGlmIHlvdSBwYXNzIG9wdGlvbnMuXHJcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZUltYWdlQml0bWFwKGJsb2IsIHNjb3BlLm9wdGlvbnMpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gKGltYWdlQml0bWFwKSB7XHJcblxyXG5cdFx0XHRDYWNoZS5hZGQodXJsLCBpbWFnZUJpdG1hcCk7XHJcblxyXG5cdFx0XHRpZiAob25Mb2FkKSB7IG9uTG9hZChpbWFnZUJpdG1hcCk7IH1cclxuXHJcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCh1cmwpO1xyXG5cclxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XHJcblxyXG5cdFx0XHRpZiAob25FcnJvcikgeyBvbkVycm9yKGUpOyB9XHJcblxyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvcih1cmwpO1xyXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQodXJsKTtcclxuXHJcblx0XHR9KTtcclxuXHJcblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCh1cmwpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqIG1pbmltYWwgY2xhc3MgZm9yIHByb3hpbmcgZnVuY3Rpb25zIHRvIFBhdGguIFJlcGxhY2VzIG9sZCBcImV4dHJhY3RTdWJwYXRocygpXCJcclxuICoqL1xyXG5cclxuZnVuY3Rpb24gU2hhcGVQYXRoKCkge1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnU2hhcGVQYXRoJztcclxuXHJcblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xyXG5cclxuXHR0aGlzLnN1YlBhdGhzID0gW107XHJcblx0dGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFNoYXBlUGF0aC5wcm90b3R5cGUsIHtcclxuXHJcblx0bW92ZVRvOiBmdW5jdGlvbiAoeCwgeSkge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGggPSBuZXcgUGF0aCgpO1xyXG5cdFx0dGhpcy5zdWJQYXRocy5wdXNoKHRoaXMuY3VycmVudFBhdGgpO1xyXG5cdFx0dGhpcy5jdXJyZW50UGF0aC5tb3ZlVG8oeCwgeSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGxpbmVUbzogZnVuY3Rpb24gKHgsIHkpIHtcclxuXHJcblx0XHR0aGlzLmN1cnJlbnRQYXRoLmxpbmVUbyh4LCB5KTtcclxuXHJcblx0fSxcclxuXHJcblx0cXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24gKGFDUHgsIGFDUHksIGFYLCBhWSkge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyhhQ1B4LCBhQ1B5LCBhWCwgYVkpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSkge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGguYmV6aWVyQ3VydmVUbyhhQ1AxeCwgYUNQMXksIGFDUDJ4LCBhQ1AyeSwgYVgsIGFZKTtcclxuXHJcblx0fSxcclxuXHJcblx0c3BsaW5lVGhydTogZnVuY3Rpb24gKHB0cykge1xyXG5cclxuXHRcdHRoaXMuY3VycmVudFBhdGguc3BsaW5lVGhydShwdHMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b1NoYXBlczogZnVuY3Rpb24gKGlzQ0NXLCBub0hvbGVzKSB7XHJcblxyXG5cdFx0ZnVuY3Rpb24gdG9TaGFwZXNOb0hvbGVzKGluU3VicGF0aHMpIHtcclxuXHJcblx0XHRcdHZhciBzaGFwZXMgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gaW5TdWJwYXRocy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dmFyIHRtcFBhdGggPSBpblN1YnBhdGhzW2ldO1xyXG5cclxuXHRcdFx0XHR2YXIgdG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcclxuXHRcdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcclxuXHJcblx0XHRcdFx0c2hhcGVzLnB1c2godG1wU2hhcGUpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHNoYXBlcztcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gaXNQb2ludEluc2lkZVBvbHlnb24oaW5QdCwgaW5Qb2x5Z29uKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9seUxlbiA9IGluUG9seWdvbi5sZW5ndGg7XHJcblxyXG5cdFx0XHQvLyBpblB0IG9uIHBvbHlnb24gY29udG91ciA9PiBpbW1lZGlhdGUgc3VjY2VzcyAgICBvclxyXG5cdFx0XHQvLyB0b2dnbGluZyBvZiBpbnNpZGUvb3V0c2lkZSBhdCBldmVyeSBzaW5nbGUhIGludGVyc2VjdGlvbiBwb2ludCBvZiBhbiBlZGdlXHJcblx0XHRcdC8vICB3aXRoIHRoZSBob3Jpem9udGFsIGxpbmUgdGhyb3VnaCBpblB0LCBsZWZ0IG9mIGluUHRcclxuXHRcdFx0Ly8gIG5vdCBjb3VudGluZyBsb3dlclkgZW5kcG9pbnRzIG9mIGVkZ2VzIGFuZCB3aG9sZSBlZGdlcyBvbiB0aGF0IGxpbmVcclxuXHRcdFx0dmFyIGluc2lkZSA9IGZhbHNlO1xyXG5cdFx0XHRmb3IgKHZhciBwID0gcG9seUxlbiAtIDEsIHEgPSAwOyBxIDwgcG9seUxlbjsgcCA9IHErKykge1xyXG5cclxuXHRcdFx0XHR2YXIgZWRnZUxvd1B0ID0gaW5Qb2x5Z29uW3BdO1xyXG5cdFx0XHRcdHZhciBlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uW3FdO1xyXG5cclxuXHRcdFx0XHR2YXIgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7XHJcblx0XHRcdFx0dmFyIGVkZ2VEeSA9IGVkZ2VIaWdoUHQueSAtIGVkZ2VMb3dQdC55O1xyXG5cclxuXHRcdFx0XHRpZiAoTWF0aC5hYnMoZWRnZUR5KSA+IE51bWJlci5FUFNJTE9OKSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXHJcblx0XHRcdFx0XHRpZiAoZWRnZUR5IDwgMCkge1xyXG5cclxuXHRcdFx0XHRcdFx0ZWRnZUxvd1B0ID0gaW5Qb2x5Z29uW3FdOyBlZGdlRHggPSAtIGVkZ2VEeDtcclxuXHRcdFx0XHRcdFx0ZWRnZUhpZ2hQdCA9IGluUG9seWdvbltwXTsgZWRnZUR5ID0gLSBlZGdlRHk7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKChpblB0LnkgPCBlZGdlTG93UHQueSkgfHwgKGluUHQueSA+IGVkZ2VIaWdoUHQueSkpIHsgY29udGludWU7IH1cclxuXHJcblx0XHRcdFx0XHRpZiAoaW5QdC55ID09PSBlZGdlTG93UHQueSkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKGluUHQueCA9PT0gZWRnZUxvd1B0LngpIHsgcmV0dXJuIHRydWU7IH1cdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cclxuXHRcdFx0XHRcdFx0Ly8gY29udGludWU7XHRcdFx0XHQvLyBubyBpbnRlcnNlY3Rpb24gb3IgZWRnZUxvd1B0ID0+IGRvZXNuJ3QgY291bnQgISEhXHJcblxyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBwZXJwRWRnZSA9IGVkZ2VEeSAqIChpblB0LnggLSBlZGdlTG93UHQueCkgLSBlZGdlRHggKiAoaW5QdC55IC0gZWRnZUxvd1B0LnkpO1xyXG5cdFx0XHRcdFx0XHRpZiAocGVycEVkZ2UgPT09IDApIHsgcmV0dXJuIHRydWU7IH1cdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cclxuXHRcdFx0XHRcdFx0aWYgKHBlcnBFZGdlIDwgMCkgeyBjb250aW51ZTsgfVxyXG5cdFx0XHRcdFx0XHRpbnNpZGUgPSAhaW5zaWRlO1x0XHQvLyB0cnVlIGludGVyc2VjdGlvbiBsZWZ0IG9mIGluUHRcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8gcGFyYWxsZWwgb3IgY29sbGluZWFyXHJcblx0XHRcdFx0XHRpZiAoaW5QdC55ICE9PSBlZGdlTG93UHQueSkgeyBjb250aW51ZTsgfVx0XHRcdC8vIHBhcmFsbGVsXHJcblx0XHRcdFx0XHQvLyBlZGdlIGxpZXMgb24gdGhlIHNhbWUgaG9yaXpvbnRhbCBsaW5lIGFzIGluUHRcclxuXHRcdFx0XHRcdGlmICgoKGVkZ2VIaWdoUHQueCA8PSBpblB0LngpICYmIChpblB0LnggPD0gZWRnZUxvd1B0LngpKSB8fFxyXG5cdFx0XHRcdFx0XHQoKGVkZ2VMb3dQdC54IDw9IGluUHQueCkgJiYgKGluUHQueCA8PSBlZGdlSGlnaFB0LngpKSkgeyByZXR1cm4gdHJ1ZTsgfVx0Ly8gaW5QdDogUG9pbnQgb24gY29udG91ciAhXHJcblx0XHRcdFx0XHQvLyBjb250aW51ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIGluc2lkZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGlzQ2xvY2tXaXNlID0gU2hhcGVVdGlscy5pc0Nsb2NrV2lzZTtcclxuXHJcblx0XHR2YXIgc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzO1xyXG5cdFx0aWYgKHN1YlBhdGhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gW107IH1cclxuXHJcblx0XHRpZiAobm9Ib2xlcyA9PT0gdHJ1ZSkgeyByZXR1cm4gdG9TaGFwZXNOb0hvbGVzKHN1YlBhdGhzKTsgfVxyXG5cclxuXHJcblx0XHR2YXIgc29saWQsIHRtcFBhdGgsIHRtcFNoYXBlLCBzaGFwZXMgPSBbXTtcclxuXHJcblx0XHRpZiAoc3ViUGF0aHMubGVuZ3RoID09PSAxKSB7XHJcblxyXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbMF07XHJcblx0XHRcdHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XHJcblx0XHRcdHRtcFNoYXBlLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xyXG5cdFx0XHRzaGFwZXMucHVzaCh0bXBTaGFwZSk7XHJcblx0XHRcdHJldHVybiBzaGFwZXM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBob2xlc0ZpcnN0ID0gIWlzQ2xvY2tXaXNlKHN1YlBhdGhzWzBdLmdldFBvaW50cygpKTtcclxuXHRcdGhvbGVzRmlyc3QgPSBpc0NDVyA/ICFob2xlc0ZpcnN0IDogaG9sZXNGaXJzdDtcclxuXHJcblx0XHQvLyBjb25zb2xlLmxvZyhcIkhvbGVzIGZpcnN0XCIsIGhvbGVzRmlyc3QpO1xyXG5cclxuXHRcdHZhciBiZXR0ZXJTaGFwZUhvbGVzID0gW107XHJcblx0XHR2YXIgbmV3U2hhcGVzID0gW107XHJcblx0XHR2YXIgbmV3U2hhcGVIb2xlcyA9IFtdO1xyXG5cdFx0dmFyIG1haW5JZHggPSAwO1xyXG5cdFx0dmFyIHRtcFBvaW50cztcclxuXHJcblx0XHRuZXdTaGFwZXNbbWFpbklkeF0gPSB1bmRlZmluZWQ7XHJcblx0XHRuZXdTaGFwZUhvbGVzW21haW5JZHhdID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzdWJQYXRocy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHRtcFBhdGggPSBzdWJQYXRoc1tpXTtcclxuXHRcdFx0dG1wUG9pbnRzID0gdG1wUGF0aC5nZXRQb2ludHMoKTtcclxuXHRcdFx0c29saWQgPSBpc0Nsb2NrV2lzZSh0bXBQb2ludHMpO1xyXG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gIXNvbGlkIDogc29saWQ7XHJcblxyXG5cdFx0XHRpZiAoc29saWQpIHtcclxuXHJcblx0XHRcdFx0aWYgKCghaG9sZXNGaXJzdCkgJiYgKG5ld1NoYXBlc1ttYWluSWR4XSkpIHsgbWFpbklkeCsrOyB9XHJcblxyXG5cdFx0XHRcdG5ld1NoYXBlc1ttYWluSWR4XSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xyXG5cdFx0XHRcdG5ld1NoYXBlc1ttYWluSWR4XS5zLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xyXG5cclxuXHRcdFx0XHRpZiAoaG9sZXNGaXJzdCkgeyBtYWluSWR4Kys7IH1cclxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzW21haW5JZHhdID0gW107XHJcblxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2N3JywgaSk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRuZXdTaGFwZUhvbGVzW21haW5JZHhdLnB1c2goeyBoOiB0bXBQYXRoLCBwOiB0bXBQb2ludHNbMF0gfSk7XHJcblxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2NjdycsIGkpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBvbmx5IEhvbGVzPyAtPiBwcm9iYWJseSBhbGwgU2hhcGVzIHdpdGggd3Jvbmcgb3JpZW50YXRpb25cclxuXHRcdGlmICghbmV3U2hhcGVzWzBdKSB7IHJldHVybiB0b1NoYXBlc05vSG9sZXMoc3ViUGF0aHMpOyB9XHJcblxyXG5cclxuXHRcdGlmIChuZXdTaGFwZXMubGVuZ3RoID4gMSkge1xyXG5cclxuXHRcdFx0dmFyIGFtYmlndW91cyA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgdG9DaGFuZ2UgPSBbXTtcclxuXHJcblx0XHRcdGZvciAodmFyIHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHgrKykge1xyXG5cclxuXHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzW3NJZHhdID0gW107XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IgKHZhciBzSWR4ID0gMCwgc0xlbiA9IG5ld1NoYXBlcy5sZW5ndGg7IHNJZHggPCBzTGVuOyBzSWR4KyspIHtcclxuXHJcblx0XHRcdFx0dmFyIHNobyA9IG5ld1NoYXBlSG9sZXNbc0lkeF07XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGhJZHggPSAwOyBoSWR4IDwgc2hvLmxlbmd0aDsgaElkeCsrKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGhvID0gc2hvW2hJZHhdO1xyXG5cdFx0XHRcdFx0dmFyIGhvbGVfdW5hc3NpZ25lZCA9IHRydWU7XHJcblxyXG5cdFx0XHRcdFx0Zm9yICh2YXIgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4KyspIHtcclxuXHJcblx0XHRcdFx0XHRcdGlmIChpc1BvaW50SW5zaWRlUG9seWdvbihoby5wLCBuZXdTaGFwZXNbczJJZHhdLnApKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmIChzSWR4ICE9PSBzMklkeCkgeyB0b0NoYW5nZS5wdXNoKHsgZnJvbXM6IHNJZHgsIHRvczogczJJZHgsIGhvbGU6IGhJZHggfSk7IH1cclxuXHRcdFx0XHRcdFx0XHRpZiAoaG9sZV91bmFzc2lnbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aG9sZV91bmFzc2lnbmVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzW3MySWR4XS5wdXNoKGhvKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRhbWJpZ3VvdXMgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGhvbGVfdW5hc3NpZ25lZCkge1xyXG5cclxuXHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1tzSWR4XS5wdXNoKGhvKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gY29uc29sZS5sb2coXCJhbWJpZ3VvdXM6IFwiLCBhbWJpZ3VvdXMpO1xyXG5cdFx0XHRpZiAodG9DaGFuZ2UubGVuZ3RoID4gMCkge1xyXG5cclxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcInRvIGNoYW5nZTogXCIsIHRvQ2hhbmdlKTtcclxuXHRcdFx0XHRpZiAoIWFtYmlndW91cykgeyBuZXdTaGFwZUhvbGVzID0gYmV0dGVyU2hhcGVIb2xlczsgfVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdG1wSG9sZXM7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gbmV3U2hhcGVzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdHRtcFNoYXBlID0gbmV3U2hhcGVzW2ldLnM7XHJcblx0XHRcdHNoYXBlcy5wdXNoKHRtcFNoYXBlKTtcclxuXHRcdFx0dG1wSG9sZXMgPSBuZXdTaGFwZUhvbGVzW2ldO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpsID0gdG1wSG9sZXMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHR0bXBTaGFwZS5ob2xlcy5wdXNoKHRtcEhvbGVzW2pdLmgpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvL2NvbnNvbGUubG9nKFwic2hhcGVcIiwgc2hhcGVzKTtcclxuXHJcblx0XHRyZXR1cm4gc2hhcGVzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuXHJcbmZ1bmN0aW9uIEZvbnQoZGF0YSkge1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnRm9udCc7XHJcblxyXG5cdHRoaXMuZGF0YSA9IGRhdGE7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKEZvbnQucHJvdG90eXBlLCB7XHJcblxyXG5cdGlzRm9udDogdHJ1ZSxcclxuXHJcblx0Z2VuZXJhdGVTaGFwZXM6IGZ1bmN0aW9uICh0ZXh0LCBzaXplKSB7XHJcblxyXG5cdFx0aWYgKHNpemUgPT09IHVuZGVmaW5lZCkgeyBzaXplID0gMTAwOyB9XHJcblxyXG5cdFx0dmFyIHNoYXBlcyA9IFtdO1xyXG5cdFx0dmFyIHBhdGhzID0gY3JlYXRlUGF0aHModGV4dCwgc2l6ZSwgdGhpcy5kYXRhKTtcclxuXHJcblx0XHRmb3IgKHZhciBwID0gMCwgcGwgPSBwYXRocy5sZW5ndGg7IHAgPCBwbDsgcCsrKSB7XHJcblxyXG5cdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShzaGFwZXMsIHBhdGhzW3BdLnRvU2hhcGVzKCkpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc2hhcGVzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGhzKHRleHQsIHNpemUsIGRhdGEpIHtcclxuXHJcblx0dmFyIGNoYXJzID0gQXJyYXkuZnJvbSA/IEFycmF5LmZyb20odGV4dCkgOiBTdHJpbmcodGV4dCkuc3BsaXQoJycpOyAvLyBzZWUgIzEzOTg4XHJcblx0dmFyIHNjYWxlID0gc2l6ZSAvIGRhdGEucmVzb2x1dGlvbjtcclxuXHR2YXIgbGluZV9oZWlnaHQgPSAoZGF0YS5ib3VuZGluZ0JveC55TWF4IC0gZGF0YS5ib3VuZGluZ0JveC55TWluICsgZGF0YS51bmRlcmxpbmVUaGlja25lc3MpICogc2NhbGU7XHJcblxyXG5cdHZhciBwYXRocyA9IFtdO1xyXG5cclxuXHR2YXIgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0dmFyIGNoYXIgPSBjaGFyc1tpXTtcclxuXHJcblx0XHRpZiAoY2hhciA9PT0gJ1xcbicpIHtcclxuXHJcblx0XHRcdG9mZnNldFggPSAwO1xyXG5cdFx0XHRvZmZzZXRZIC09IGxpbmVfaGVpZ2h0O1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR2YXIgcmV0ID0gY3JlYXRlUGF0aChjaGFyLCBzY2FsZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgZGF0YSk7XHJcblx0XHRcdG9mZnNldFggKz0gcmV0Lm9mZnNldFg7XHJcblx0XHRcdHBhdGhzLnB1c2gocmV0LnBhdGgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcGF0aHM7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVQYXRoKGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhKSB7XHJcblxyXG5cdHZhciBnbHlwaCA9IGRhdGEuZ2x5cGhzW2NoYXJdIHx8IGRhdGEuZ2x5cGhzWyc/J107XHJcblxyXG5cdGlmICghZ2x5cGgpIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5Gb250OiBjaGFyYWN0ZXIgXCInICsgY2hhciArICdcIiBkb2VzIG5vdCBleGlzdHMgaW4gZm9udCBmYW1pbHkgJyArIGRhdGEuZmFtaWx5TmFtZSArICcuJyk7XHJcblxyXG5cdFx0cmV0dXJuO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBwYXRoID0gbmV3IFNoYXBlUGF0aCgpO1xyXG5cclxuXHR2YXIgeCwgeSwgY3B4LCBjcHksIGNweDEsIGNweTEsIGNweDIsIGNweTI7XHJcblxyXG5cdGlmIChnbHlwaC5vKSB7XHJcblxyXG5cdFx0dmFyIG91dGxpbmUgPSBnbHlwaC5fY2FjaGVkT3V0bGluZSB8fCAoZ2x5cGguX2NhY2hlZE91dGxpbmUgPSBnbHlwaC5vLnNwbGl0KCcgJykpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gb3V0bGluZS5sZW5ndGg7IGkgPCBsOykge1xyXG5cclxuXHRcdFx0dmFyIGFjdGlvbiA9IG91dGxpbmVbaSsrXTtcclxuXHJcblx0XHRcdHN3aXRjaCAoYWN0aW9uKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ20nOiAvLyBtb3ZlVG9cclxuXHJcblx0XHRcdFx0XHR4ID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRYO1xyXG5cdFx0XHRcdFx0eSA9IG91dGxpbmVbaSsrXSAqIHNjYWxlICsgb2Zmc2V0WTtcclxuXHJcblx0XHRcdFx0XHRwYXRoLm1vdmVUbyh4LCB5KTtcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAnbCc6IC8vIGxpbmVUb1xyXG5cclxuXHRcdFx0XHRcdHggPSBvdXRsaW5lW2krK10gKiBzY2FsZSArIG9mZnNldFg7XHJcblx0XHRcdFx0XHR5ID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRZO1xyXG5cclxuXHRcdFx0XHRcdHBhdGgubGluZVRvKHgsIHkpO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlICdxJzogLy8gcXVhZHJhdGljQ3VydmVUb1xyXG5cclxuXHRcdFx0XHRcdGNweCA9IG91dGxpbmVbaSsrXSAqIHNjYWxlICsgb2Zmc2V0WDtcclxuXHRcdFx0XHRcdGNweSA9IG91dGxpbmVbaSsrXSAqIHNjYWxlICsgb2Zmc2V0WTtcclxuXHRcdFx0XHRcdGNweDEgPSBvdXRsaW5lW2krK10gKiBzY2FsZSArIG9mZnNldFg7XHJcblx0XHRcdFx0XHRjcHkxID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRZO1xyXG5cclxuXHRcdFx0XHRcdHBhdGgucXVhZHJhdGljQ3VydmVUbyhjcHgxLCBjcHkxLCBjcHgsIGNweSk7XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgJ2InOiAvLyBiZXppZXJDdXJ2ZVRvXHJcblxyXG5cdFx0XHRcdFx0Y3B4ID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRYO1xyXG5cdFx0XHRcdFx0Y3B5ID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRZO1xyXG5cdFx0XHRcdFx0Y3B4MSA9IG91dGxpbmVbaSsrXSAqIHNjYWxlICsgb2Zmc2V0WDtcclxuXHRcdFx0XHRcdGNweTEgPSBvdXRsaW5lW2krK10gKiBzY2FsZSArIG9mZnNldFk7XHJcblx0XHRcdFx0XHRjcHgyID0gb3V0bGluZVtpKytdICogc2NhbGUgKyBvZmZzZXRYO1xyXG5cdFx0XHRcdFx0Y3B5MiA9IG91dGxpbmVbaSsrXSAqIHNjYWxlICsgb2Zmc2V0WTtcclxuXHJcblx0XHRcdFx0XHRwYXRoLmJlemllckN1cnZlVG8oY3B4MSwgY3B5MSwgY3B4MiwgY3B5MiwgY3B4LCBjcHkpO1xyXG5cclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4geyBvZmZzZXRYOiBnbHlwaC5oYSAqIHNjYWxlLCBwYXRoOiBwYXRoIH07XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBGb250TG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5Gb250TG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMb2FkZXIucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogRm9udExvYWRlcixcclxuXHJcblx0bG9hZDogZnVuY3Rpb24gKHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yKSB7XHJcblxyXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIodGhpcy5tYW5hZ2VyKTtcclxuXHRcdGxvYWRlci5zZXRQYXRoKHRoaXMucGF0aCk7XHJcblx0XHRsb2FkZXIubG9hZCh1cmwsIGZ1bmN0aW9uICh0ZXh0KSB7XHJcblxyXG5cdFx0XHR2YXIganNvbjtcclxuXHJcblx0XHRcdHRyeSB7XHJcblxyXG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKHRleHQpO1xyXG5cclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkZvbnRMb2FkZXI6IHR5cGVmYWNlLmpzIHN1cHBvcnQgaXMgYmVpbmcgZGVwcmVjYXRlZC4gVXNlIHR5cGVmYWNlLmpzb24gaW5zdGVhZC4nKTtcclxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSh0ZXh0LnN1YnN0cmluZyg2NSwgdGV4dC5sZW5ndGggLSAyKSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgZm9udCA9IHNjb3BlLnBhcnNlKGpzb24pO1xyXG5cclxuXHRcdFx0aWYgKG9uTG9hZCkgeyBvbkxvYWQoZm9udCk7IH1cclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0fSxcclxuXHJcblx0cGFyc2U6IGZ1bmN0aW9uIChqc29uKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBGb250KGpzb24pO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbnZhciBfY29udGV4dDtcclxuXHJcbnZhciBBdWRpb0NvbnRleHQgPSB7XHJcblxyXG5cdGdldENvbnRleHQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAoX2NvbnRleHQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0X2NvbnRleHQgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIF9jb250ZXh0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRDb250ZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRfY29udGV4dCA9IHZhbHVlO1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgUmVlY2UgQWFyb24gTGVjcml2YWluIC8gaHR0cDovL3JlZWNlbm90ZXMuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEF1ZGlvTG9hZGVyKG1hbmFnZXIpIHtcclxuXHJcblx0TG9hZGVyLmNhbGwodGhpcywgbWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5BdWRpb0xvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTG9hZGVyLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEF1ZGlvTG9hZGVyLFxyXG5cclxuXHRsb2FkOiBmdW5jdGlvbiAodXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpIHtcclxuXHJcblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIodGhpcy5tYW5hZ2VyKTtcclxuXHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoJ2FycmF5YnVmZmVyJyk7XHJcblx0XHRsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xyXG5cdFx0bG9hZGVyLmxvYWQodXJsLCBmdW5jdGlvbiAoYnVmZmVyKSB7XHJcblxyXG5cdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2RcclxuXHRcdFx0Ly8gZGV0YWNoZXMgdGhlIGJ1ZmZlciB3aGVuIGNvbXBsZXRlLCBwcmV2ZW50aW5nIHJldXNlLlxyXG5cdFx0XHR2YXIgYnVmZmVyQ29weSA9IGJ1ZmZlci5zbGljZSgwKTtcclxuXHJcblx0XHRcdHZhciBjb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcclxuXHRcdFx0Y29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYnVmZmVyQ29weSwgZnVuY3Rpb24gKGF1ZGlvQnVmZmVyKSB7XHJcblxyXG5cdFx0XHRcdG9uTG9hZChhdWRpb0J1ZmZlcik7XHJcblxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICpcclxuICogUHJpbWFyeSByZWZlcmVuY2U6XHJcbiAqICAgaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmXHJcbiAqXHJcbiAqIFNlY29uZGFyeSByZWZlcmVuY2U6XHJcbiAqICAgaHR0cHM6Ly93d3cucHBzbG9hbi5vcmcvcHVibGljYXRpb25zL1N0dXBpZFNIMzYucGRmXHJcbiAqL1xyXG5cclxuLy8gMy1iYW5kIFNIIGRlZmluZWQgYnkgOSBjb2VmZmljaWVudHNcclxuXHJcbmZ1bmN0aW9uIFNwaGVyaWNhbEhhcm1vbmljczMoKSB7XHJcblxyXG5cdHRoaXMuY29lZmZpY2llbnRzID0gW107XHJcblxyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcblxyXG5cdFx0dGhpcy5jb2VmZmljaWVudHMucHVzaChuZXcgVmVjdG9yMygpKTtcclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihTcGhlcmljYWxIYXJtb25pY3MzLnByb3RvdHlwZSwge1xyXG5cclxuXHRpc1NwaGVyaWNhbEhhcm1vbmljczM6IHRydWUsXHJcblxyXG5cdHNldDogZnVuY3Rpb24gKGNvZWZmaWNpZW50cykge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1tpXS5jb3B5KGNvZWZmaWNpZW50c1tpXSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR6ZXJvOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA5OyBpKyspIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzW2ldLnNldCgwLCAwLCAwKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGdldCB0aGUgcmFkaWFuY2UgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXHJcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xyXG5cdGdldEF0OiBmdW5jdGlvbiAobm9ybWFsLCB0YXJnZXQpIHtcclxuXHJcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxyXG5cclxuXHRcdHZhciB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xyXG5cclxuXHRcdHZhciBjb2VmZiA9IHRoaXMuY29lZmZpY2llbnRzO1xyXG5cclxuXHRcdC8vIGJhbmQgMFxyXG5cdFx0dGFyZ2V0LmNvcHkoY29lZmZbMF0pLm11bHRpcGx5U2NhbGFyKDAuMjgyMDk1KTtcclxuXHJcblx0XHQvLyBiYW5kIDFcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZlsxXSwgMC40ODg2MDMgKiB5KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZlsyXSwgMC40ODg2MDMgKiB6KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZlszXSwgMC40ODg2MDMgKiB4KTtcclxuXHJcblx0XHQvLyBiYW5kIDJcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls0XSwgMS4wOTI1NDggKiAoeCAqIHkpKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls1XSwgMS4wOTI1NDggKiAoeSAqIHopKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls2XSwgMC4zMTUzOTIgKiAoMy4wICogeiAqIHogLSAxLjApKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls3XSwgMS4wOTI1NDggKiAoeCAqIHopKTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls4XSwgMC41NDYyNzQgKiAoeCAqIHggLSB5ICogeSkpO1xyXG5cclxuXHRcdHJldHVybiB0YXJnZXQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGdldCB0aGUgaXJyYWRpYW5jZSAocmFkaWFuY2UgY29udm9sdmVkIHdpdGggY29zaW5lIGxvYmUpIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIG5vcm1hbFxyXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcclxuXHQvLyBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcclxuXHRnZXRJcnJhZGlhbmNlQXQ6IGZ1bmN0aW9uIChub3JtYWwsIHRhcmdldCkge1xyXG5cclxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXHJcblxyXG5cdFx0dmFyIHggPSBub3JtYWwueCwgeSA9IG5vcm1hbC55LCB6ID0gbm9ybWFsLno7XHJcblxyXG5cdFx0dmFyIGNvZWZmID0gdGhpcy5jb2VmZmljaWVudHM7XHJcblxyXG5cdFx0Ly8gYmFuZCAwXHJcblx0XHR0YXJnZXQuY29weShjb2VmZlswXSkubXVsdGlwbHlTY2FsYXIoMC44ODYyMjcpOyAvLyDPgCAqIDAuMjgyMDk1XHJcblxyXG5cdFx0Ly8gYmFuZCAxXHJcblx0XHR0YXJnZXQuYWRkU2NhbGUoY29lZmZbMV0sIDIuMCAqIDAuNTExNjY0ICogeSk7IC8vICggMiAqIM+AIC8gMyApICogMC40ODg2MDNcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZlsyXSwgMi4wICogMC41MTE2NjQgKiB6KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZlszXSwgMi4wICogMC41MTE2NjQgKiB4KTtcclxuXHJcblx0XHQvLyBiYW5kIDJcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls0XSwgMi4wICogMC40MjkwNDMgKiB4ICogeSk7IC8vICggz4AgLyA0ICkgKiAxLjA5MjU0OFxyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlKGNvZWZmWzVdLCAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls2XSwgMC43NDMxMjUgKiB6ICogeiAtIDAuMjQ3NzA4KTsgLy8gKCDPgCAvIDQgKSAqIDAuMzE1MzkyICogM1xyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlKGNvZWZmWzddLCAyLjAgKiAwLjQyOTA0MyAqIHggKiB6KTtcclxuXHRcdHRhcmdldC5hZGRTY2FsZShjb2VmZls4XSwgMC40MjkwNDMgKiAoeCAqIHggLSB5ICogeSkpOyAvLyAoIM+AIC8gNCApICogMC41NDYyNzRcclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRhZGQ6IGZ1bmN0aW9uIChzaCkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcblxyXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1tpXS5hZGQoc2guY29lZmZpY2llbnRzW2ldKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cclxuXHRzY2FsZTogZnVuY3Rpb24gKHMpIHtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDk7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbaV0ubXVsdGlwbHlTY2FsYXIocyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRsZXJwOiBmdW5jdGlvbiAoc2gsIGFscGhhKSB7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA5OyBpKyspIHtcclxuXHJcblx0XHRcdHRoaXMuY29lZmZpY2llbnRzW2ldLmxlcnAoc2guY29lZmZpY2llbnRzW2ldLCBhbHBoYSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRlcXVhbHM6IGZ1bmN0aW9uIChzaCkge1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcblxyXG5cdFx0XHRpZiAoIXRoaXMuY29lZmZpY2llbnRzW2ldLmVxdWFscyhzaC5jb2VmZmljaWVudHNbaV0pKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzaCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnNldChzaC5jb2VmZmljaWVudHMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZyb21BcnJheTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHsgb2Zmc2V0ID0gMDsgfVxyXG5cclxuXHRcdHZhciBjb2VmZmljaWVudHMgPSB0aGlzLmNvZWZmaWNpZW50cztcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDk7IGkrKykge1xyXG5cclxuXHRcdFx0Y29lZmZpY2llbnRzW2ldLmZyb21BcnJheShhcnJheSwgb2Zmc2V0ICsgKGkgKiAzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR0b0FycmF5OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGlmIChhcnJheSA9PT0gdW5kZWZpbmVkKSB7IGFycmF5ID0gW107IH1cclxuXHRcdGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgeyBvZmZzZXQgPSAwOyB9XHJcblxyXG5cdFx0dmFyIGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgOTsgaSsrKSB7XHJcblxyXG5cdFx0XHRjb2VmZmljaWVudHNbaV0udG9BcnJheShhcnJheSwgb2Zmc2V0ICsgKGkgKiAzKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBhcnJheTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFNwaGVyaWNhbEhhcm1vbmljczMsIHtcclxuXHJcblx0Ly8gZXZhbHVhdGUgdGhlIGJhc2lzIGZ1bmN0aW9uc1xyXG5cdC8vIHNoQmFzaXMgaXMgYW4gQXJyYXlbIDkgXVxyXG5cdGdldEJhc2lzQXQ6IGZ1bmN0aW9uIChub3JtYWwsIHNoQmFzaXMpIHtcclxuXHJcblx0XHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aFxyXG5cclxuXHRcdHZhciB4ID0gbm9ybWFsLngsIHkgPSBub3JtYWwueSwgeiA9IG5vcm1hbC56O1xyXG5cclxuXHRcdC8vIGJhbmQgMFxyXG5cdFx0c2hCYXNpc1swXSA9IDAuMjgyMDk1O1xyXG5cclxuXHRcdC8vIGJhbmQgMVxyXG5cdFx0c2hCYXNpc1sxXSA9IDAuNDg4NjAzICogeTtcclxuXHRcdHNoQmFzaXNbMl0gPSAwLjQ4ODYwMyAqIHo7XHJcblx0XHRzaEJhc2lzWzNdID0gMC40ODg2MDMgKiB4O1xyXG5cclxuXHRcdC8vIGJhbmQgMlxyXG5cdFx0c2hCYXNpc1s0XSA9IDEuMDkyNTQ4ICogeCAqIHk7XHJcblx0XHRzaEJhc2lzWzVdID0gMS4wOTI1NDggKiB5ICogejtcclxuXHRcdHNoQmFzaXNbNl0gPSAwLjMxNTM5MiAqICgzICogeiAqIHogLSAxKTtcclxuXHRcdHNoQmFzaXNbN10gPSAxLjA5MjU0OCAqIHggKiB6O1xyXG5cdFx0c2hCYXNpc1s4XSA9IDAuNTQ2Mjc0ICogKHggKiB4IC0geSAqIHkpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICpcclxuICogQSBMaWdodFByb2JlIGlzIGEgc291cmNlIG9mIGluZGlyZWN0LWRpZmZ1c2UgbGlnaHRcclxuICovXHJcblxyXG5mdW5jdGlvbiBMaWdodFByb2JlKHNoLCBpbnRlbnNpdHkpIHtcclxuXHJcblx0TGlnaHQuY2FsbCh0aGlzLCB1bmRlZmluZWQsIGludGVuc2l0eSk7XHJcblxyXG5cdHRoaXMuc2ggPSAoc2ggIT09IHVuZGVmaW5lZCkgPyBzaCA6IG5ldyBTcGhlcmljYWxIYXJtb25pY3MzKCk7XHJcblxyXG59XHJcblxyXG5MaWdodFByb2JlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMaWdodC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBMaWdodFByb2JlLFxyXG5cclxuXHRpc0xpZ2h0UHJvYmU6IHRydWUsXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0dGhpcy5zaC5jb3B5KHNvdXJjZS5zaCk7XHJcblx0XHR0aGlzLmludGVuc2l0eSA9IHNvdXJjZS5pbnRlbnNpdHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRvSlNPTjogZnVuY3Rpb24gKG1ldGEpIHtcclxuXHJcblx0XHR2YXIgZGF0YSA9IExpZ2h0LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLCBtZXRhKTtcclxuXHJcblx0XHQvLyBkYXRhLnNoID0gdGhpcy5zaC50b0FycmF5KCk7IC8vIHRvZG9cclxuXHJcblx0XHRyZXR1cm4gZGF0YTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0UHJvYmUoc2t5Q29sb3IsIGdyb3VuZENvbG9yLCBpbnRlbnNpdHkpIHtcclxuXHJcblx0TGlnaHRQcm9iZS5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5KTtcclxuXHJcblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldChza3lDb2xvcik7XHJcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvcigpLnNldChncm91bmRDb2xvcik7XHJcblxyXG5cdHZhciBza3kgPSBuZXcgVmVjdG9yMyhjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iKTtcclxuXHR2YXIgZ3JvdW5kID0gbmV3IFZlY3RvcjMoY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYik7XHJcblxyXG5cdC8vIHdpdGhvdXQgZXh0cmEgZmFjdG9yIG9mIFBJIGluIHRoZSBzaGFkZXIsIHNob3VsZCA9IDEgLyBNYXRoLnNxcnQoIE1hdGguUEkgKTtcclxuXHR2YXIgYzAgPSBNYXRoLnNxcnQoTWF0aC5QSSk7XHJcblx0dmFyIGMxID0gYzAgKiBNYXRoLnNxcnQoMC43NSk7XHJcblxyXG5cdHRoaXMuc2guY29lZmZpY2llbnRzWzBdLmNvcHkoc2t5KS5hZGQoZ3JvdW5kKS5tdWx0aXBseVNjYWxhcihjMCk7XHJcblx0dGhpcy5zaC5jb2VmZmljaWVudHNbMV0uY29weShza3kpLnN1Yihncm91bmQpLm11bHRpcGx5U2NhbGFyKGMxKTtcclxuXHJcbn1cclxuXHJcbkhlbWlzcGhlcmVMaWdodFByb2JlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMaWdodFByb2JlLnByb3RvdHlwZSksIHtcclxuXHJcblx0Y29uc3RydWN0b3I6IEhlbWlzcGhlcmVMaWdodFByb2JlLFxyXG5cclxuXHRpc0hlbWlzcGhlcmVMaWdodFByb2JlOiB0cnVlLFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoc291cmNlKSB7IC8vIG1vZGlmeWluZyBjb2xvcnMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWRcclxuXHJcblx0XHRMaWdodFByb2JlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gTGlnaHRQcm9iZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0Ly8gZGF0YS5zaCA9IHRoaXMuc2gudG9BcnJheSgpOyAvLyB0b2RvXHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEFtYmllbnRMaWdodFByb2JlKGNvbG9yLCBpbnRlbnNpdHkpIHtcclxuXHJcblx0TGlnaHRQcm9iZS5jYWxsKHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5KTtcclxuXHJcblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldChjb2xvcik7XHJcblxyXG5cdC8vIHdpdGhvdXQgZXh0cmEgZmFjdG9yIG9mIFBJIGluIHRoZSBzaGFkZXIsIHdvdWxkIGJlIDIgLyBNYXRoLnNxcnQoIE1hdGguUEkgKTtcclxuXHR0aGlzLnNoLmNvZWZmaWNpZW50c1swXS5zZXQoY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYikubXVsdGlwbHlTY2FsYXIoMiAqIE1hdGguc3FydChNYXRoLlBJKSk7XHJcblxyXG59XHJcblxyXG5BbWJpZW50TGlnaHRQcm9iZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoTGlnaHRQcm9iZS5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBBbWJpZW50TGlnaHRQcm9iZSxcclxuXHJcblx0aXNBbWJpZW50TGlnaHRQcm9iZTogdHJ1ZSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkgeyAvLyBtb2RpZnlpbmcgY29sb3Igbm90IGN1cnJlbnRseSBzdXBwb3J0ZWRcclxuXHJcblx0XHRMaWdodFByb2JlLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dG9KU09OOiBmdW5jdGlvbiAobWV0YSkge1xyXG5cclxuXHRcdHZhciBkYXRhID0gTGlnaHRQcm9iZS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcywgbWV0YSk7XHJcblxyXG5cdFx0Ly8gZGF0YS5zaCA9IHRoaXMuc2gudG9BcnJheSgpOyAvLyB0b2RvXHJcblxyXG5cdFx0cmV0dXJuIGRhdGE7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxudmFyIF9leWVSaWdodCA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfZXllTGVmdCA9IG5ldyBNYXRyaXg0KCk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBTdGVyZW9DYW1lcmEoKSB7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdTdGVyZW9DYW1lcmEnO1xyXG5cclxuXHR0aGlzLmFzcGVjdCA9IDE7XHJcblxyXG5cdHRoaXMuZXllU2VwID0gMC4wNjQ7XHJcblxyXG5cdHRoaXMuY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xyXG5cdHRoaXMuY2FtZXJhTC5sYXllcnMuZW5hYmxlKDEpO1xyXG5cdHRoaXMuY2FtZXJhTC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuY2FtZXJhUiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xyXG5cdHRoaXMuY2FtZXJhUi5sYXllcnMuZW5hYmxlKDIpO1xyXG5cdHRoaXMuY2FtZXJhUi5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuX2NhY2hlID0ge1xyXG5cdFx0Zm9jdXM6IG51bGwsXHJcblx0XHRmb3Y6IG51bGwsXHJcblx0XHRhc3BlY3Q6IG51bGwsXHJcblx0XHRuZWFyOiBudWxsLFxyXG5cdFx0ZmFyOiBudWxsLFxyXG5cdFx0em9vbTogbnVsbCxcclxuXHRcdGV5ZVNlcDogbnVsbFxyXG5cdH07XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFN0ZXJlb0NhbWVyYS5wcm90b3R5cGUsIHtcclxuXHJcblx0dXBkYXRlOiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcblxyXG5cdFx0dmFyIGNhY2hlID0gdGhpcy5fY2FjaGU7XHJcblxyXG5cdFx0dmFyIG5lZWRzVXBkYXRlID0gY2FjaGUuZm9jdXMgIT09IGNhbWVyYS5mb2N1cyB8fCBjYWNoZS5mb3YgIT09IGNhbWVyYS5mb3YgfHxcclxuXHRcdFx0Y2FjaGUuYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3QgfHwgY2FjaGUubmVhciAhPT0gY2FtZXJhLm5lYXIgfHxcclxuXHRcdFx0Y2FjaGUuZmFyICE9PSBjYW1lcmEuZmFyIHx8IGNhY2hlLnpvb20gIT09IGNhbWVyYS56b29tIHx8IGNhY2hlLmV5ZVNlcCAhPT0gdGhpcy5leWVTZXA7XHJcblxyXG5cdFx0aWYgKG5lZWRzVXBkYXRlKSB7XHJcblxyXG5cdFx0XHRjYWNoZS5mb2N1cyA9IGNhbWVyYS5mb2N1cztcclxuXHRcdFx0Y2FjaGUuZm92ID0gY2FtZXJhLmZvdjtcclxuXHRcdFx0Y2FjaGUuYXNwZWN0ID0gY2FtZXJhLmFzcGVjdCAqIHRoaXMuYXNwZWN0O1xyXG5cdFx0XHRjYWNoZS5uZWFyID0gY2FtZXJhLm5lYXI7XHJcblx0XHRcdGNhY2hlLmZhciA9IGNhbWVyYS5mYXI7XHJcblx0XHRcdGNhY2hlLnpvb20gPSBjYW1lcmEuem9vbTtcclxuXHRcdFx0Y2FjaGUuZXllU2VwID0gdGhpcy5leWVTZXA7XHJcblxyXG5cdFx0XHQvLyBPZmYtYXhpcyBzdGVyZW9zY29waWMgZWZmZWN0IGJhc2VkIG9uXHJcblx0XHRcdC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9zdGVyZW9ncmFwaGljcy9zdGVyZW9yZW5kZXIvXHJcblxyXG5cdFx0XHR2YXIgcHJvamVjdGlvbk1hdHJpeCA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmNsb25lKCk7XHJcblx0XHRcdHZhciBleWVTZXBIYWxmID0gY2FjaGUuZXllU2VwIC8gMjtcclxuXHRcdFx0dmFyIGV5ZVNlcE9uUHJvamVjdGlvbiA9IGV5ZVNlcEhhbGYgKiBjYWNoZS5uZWFyIC8gY2FjaGUuZm9jdXM7XHJcblx0XHRcdHZhciB5bWF4ID0gKGNhY2hlLm5lYXIgKiBNYXRoLnRhbihfTWF0aC5ERUcyUkFEICogY2FjaGUuZm92ICogMC41KSkgLyBjYWNoZS56b29tO1xyXG5cdFx0XHR2YXIgeG1pbiwgeG1heDtcclxuXHJcblx0XHRcdC8vIHRyYW5zbGF0ZSB4T2Zmc2V0XHJcblxyXG5cdFx0XHRfZXllTGVmdC5lbGVtZW50c1sxMl0gPSAtIGV5ZVNlcEhhbGY7XHJcblx0XHRcdF9leWVSaWdodC5lbGVtZW50c1sxMl0gPSBleWVTZXBIYWxmO1xyXG5cclxuXHRcdFx0Ly8gZm9yIGxlZnQgZXllXHJcblxyXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xyXG5cdFx0XHR4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCArIGV5ZVNlcE9uUHJvamVjdGlvbjtcclxuXHJcblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbMF0gPSAyICogY2FjaGUubmVhciAvICh4bWF4IC0geG1pbik7XHJcblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbOF0gPSAoeG1heCArIHhtaW4pIC8gKHhtYXggLSB4bWluKTtcclxuXHJcblx0XHRcdHRoaXMuY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmNvcHkocHJvamVjdGlvbk1hdHJpeCk7XHJcblxyXG5cdFx0XHQvLyBmb3IgcmlnaHQgZXllXHJcblxyXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xyXG5cdFx0XHR4bWF4ID0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcclxuXHJcblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbMF0gPSAyICogY2FjaGUubmVhciAvICh4bWF4IC0geG1pbik7XHJcblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbOF0gPSAoeG1heCArIHhtaW4pIC8gKHhtYXggLSB4bWluKTtcclxuXHJcblx0XHRcdHRoaXMuY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkocHJvamVjdGlvbk1hdHJpeCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY2FtZXJhTC5tYXRyaXhXb3JsZC5jb3B5KGNhbWVyYS5tYXRyaXhXb3JsZCkubXVsdGlwbHkoX2V5ZUxlZnQpO1xyXG5cdFx0dGhpcy5jYW1lcmFSLm1hdHJpeFdvcmxkLmNvcHkoY2FtZXJhLm1hdHJpeFdvcmxkKS5tdWx0aXBseShfZXllUmlnaHQpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIENsb2NrKGF1dG9TdGFydCkge1xyXG5cclxuXHR0aGlzLmF1dG9TdGFydCA9IChhdXRvU3RhcnQgIT09IHVuZGVmaW5lZCkgPyBhdXRvU3RhcnQgOiB0cnVlO1xyXG5cclxuXHR0aGlzLnN0YXJ0VGltZSA9IDA7XHJcblx0dGhpcy5vbGRUaW1lID0gMDtcclxuXHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuXHJcblx0dGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKENsb2NrLnByb3RvdHlwZSwge1xyXG5cclxuXHRzdGFydDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMuc3RhcnRUaW1lID0gKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ3VuZGVmaW5lZCcgPyBEYXRlIDogcGVyZm9ybWFuY2UpLm5vdygpOyAvLyBzZWUgIzEwNzMyXHJcblxyXG5cdFx0dGhpcy5vbGRUaW1lID0gdGhpcy5zdGFydFRpbWU7XHJcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcclxuXHRcdHRoaXMucnVubmluZyA9IHRydWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN0b3A6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmdldEVsYXBzZWRUaW1lKCk7XHJcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEVsYXBzZWRUaW1lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZWxhcHNlZFRpbWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldERlbHRhOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGRpZmYgPSAwO1xyXG5cclxuXHRcdGlmICh0aGlzLmF1dG9TdGFydCAmJiAhdGhpcy5ydW5uaW5nKSB7XHJcblxyXG5cdFx0XHR0aGlzLnN0YXJ0KCk7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5ydW5uaW5nKSB7XHJcblxyXG5cdFx0XHR2YXIgbmV3VGltZSA9ICh0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlKS5ub3coKTtcclxuXHJcblx0XHRcdGRpZmYgPSAobmV3VGltZSAtIHRoaXMub2xkVGltZSkgLyAxMDAwO1xyXG5cdFx0XHR0aGlzLm9sZFRpbWUgPSBuZXdUaW1lO1xyXG5cclxuXHRcdFx0dGhpcy5lbGFwc2VkVGltZSArPSBkaWZmO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGlmZjtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG52YXIgX3Bvc2l0aW9uJDIgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3F1YXRlcm5pb24kMyA9IG5ldyBRdWF0ZXJuaW9uKCk7XHJcbnZhciBfc2NhbGUkMSA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfb3JpZW50YXRpb24gPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gQXVkaW9MaXN0ZW5lcigpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy50eXBlID0gJ0F1ZGlvTGlzdGVuZXInO1xyXG5cclxuXHR0aGlzLmNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpO1xyXG5cclxuXHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xyXG5cdHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XHJcblxyXG5cdHRoaXMuZmlsdGVyID0gbnVsbDtcclxuXHJcblx0dGhpcy50aW1lRGVsdGEgPSAwO1xyXG5cclxuXHQvLyBwcml2YXRlXHJcblxyXG5cdHRoaXMuX2Nsb2NrID0gbmV3IENsb2NrKCk7XHJcblxyXG59XHJcblxyXG5BdWRpb0xpc3RlbmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QzRC5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBBdWRpb0xpc3RlbmVyLFxyXG5cclxuXHRnZXRJbnB1dDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdhaW47XHJcblxyXG5cdH0sXHJcblxyXG5cdHJlbW92ZUZpbHRlcjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLmZpbHRlciAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QodGhpcy5maWx0ZXIpO1xyXG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XHJcblx0XHRcdHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XHJcblx0XHRcdHRoaXMuZmlsdGVyID0gbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEZpbHRlcjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmZpbHRlcjtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RmlsdGVyOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAodGhpcy5maWx0ZXIgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KHRoaXMuZmlsdGVyKTtcclxuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmdhaW4uZGlzY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmZpbHRlciA9IHZhbHVlO1xyXG5cdFx0dGhpcy5nYWluLmNvbm5lY3QodGhpcy5maWx0ZXIpO1xyXG5cdFx0dGhpcy5maWx0ZXIuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRNYXN0ZXJWb2x1bWU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5nYWluLmdhaW4udmFsdWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKHZhbHVlLCB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUsIDAuMDEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKGZvcmNlKSB7XHJcblxyXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcywgZm9yY2UpO1xyXG5cclxuXHRcdHZhciBsaXN0ZW5lciA9IHRoaXMuY29udGV4dC5saXN0ZW5lcjtcclxuXHRcdHZhciB1cCA9IHRoaXMudXA7XHJcblxyXG5cdFx0dGhpcy50aW1lRGVsdGEgPSB0aGlzLl9jbG9jay5nZXREZWx0YSgpO1xyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKF9wb3NpdGlvbiQyLCBfcXVhdGVybmlvbiQzLCBfc2NhbGUkMSk7XHJcblxyXG5cdFx0X29yaWVudGF0aW9uLnNldCgwLCAwLCAtIDEpLmFwcGx5UXVhdGVybmlvbihfcXVhdGVybmlvbiQzKTtcclxuXHJcblx0XHRpZiAobGlzdGVuZXIucG9zaXRpb25YKSB7XHJcblxyXG5cdFx0XHQvLyBjb2RlIHBhdGggZm9yIENocm9tZSAoc2VlICMxNDM5MylcclxuXHJcblx0XHRcdHZhciBlbmRUaW1lID0gdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lICsgdGhpcy50aW1lRGVsdGE7XHJcblxyXG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX3Bvc2l0aW9uJDIueCwgZW5kVGltZSk7XHJcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZShfcG9zaXRpb24kMi55LCBlbmRUaW1lKTtcclxuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKF9wb3NpdGlvbiQyLnosIGVuZFRpbWUpO1xyXG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZShfb3JpZW50YXRpb24ueCwgZW5kVGltZSk7XHJcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKF9vcmllbnRhdGlvbi55LCBlbmRUaW1lKTtcclxuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX29yaWVudGF0aW9uLnosIGVuZFRpbWUpO1xyXG5cdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodXAueCwgZW5kVGltZSk7XHJcblx0XHRcdGxpc3RlbmVyLnVwWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSh1cC55LCBlbmRUaW1lKTtcclxuXHRcdFx0bGlzdGVuZXIudXBaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKHVwLnosIGVuZFRpbWUpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRsaXN0ZW5lci5zZXRQb3NpdGlvbihfcG9zaXRpb24kMi54LCBfcG9zaXRpb24kMi55LCBfcG9zaXRpb24kMi56KTtcclxuXHRcdFx0bGlzdGVuZXIuc2V0T3JpZW50YXRpb24oX29yaWVudGF0aW9uLngsIF9vcmllbnRhdGlvbi55LCBfb3JpZW50YXRpb24ueiwgdXAueCwgdXAueSwgdXAueik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIFJlZWNlIEFhcm9uIExlY3JpdmFpbiAvIGh0dHA6Ly9yZWVjZW5vdGVzLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBBdWRpbyhsaXN0ZW5lcikge1xyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLnR5cGUgPSAnQXVkaW8nO1xyXG5cclxuXHR0aGlzLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcblx0dGhpcy5jb250ZXh0ID0gbGlzdGVuZXIuY29udGV4dDtcclxuXHJcblx0dGhpcy5nYWluID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuXHR0aGlzLmdhaW4uY29ubmVjdChsaXN0ZW5lci5nZXRJbnB1dCgpKTtcclxuXHJcblx0dGhpcy5hdXRvcGxheSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLmJ1ZmZlciA9IG51bGw7XHJcblx0dGhpcy5kZXR1bmUgPSAwO1xyXG5cdHRoaXMubG9vcCA9IGZhbHNlO1xyXG5cdHRoaXMuc3RhcnRUaW1lID0gMDtcclxuXHR0aGlzLm9mZnNldCA9IDA7XHJcblx0dGhpcy5kdXJhdGlvbiA9IHVuZGVmaW5lZDtcclxuXHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XHJcblx0dGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcclxuXHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IHRydWU7XHJcblx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcclxuXHJcblx0dGhpcy5maWx0ZXJzID0gW107XHJcblxyXG59XHJcblxyXG5BdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogQXVkaW8sXHJcblxyXG5cdGdldE91dHB1dDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdhaW47XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldE5vZGVTb3VyY2U6IGZ1bmN0aW9uIChhdWRpb05vZGUpIHtcclxuXHJcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2F1ZGlvTm9kZSc7XHJcblx0XHR0aGlzLnNvdXJjZSA9IGF1ZGlvTm9kZTtcclxuXHRcdHRoaXMuY29ubmVjdCgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRNZWRpYUVsZW1lbnRTb3VyY2U6IGZ1bmN0aW9uIChtZWRpYUVsZW1lbnQpIHtcclxuXHJcblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhTm9kZSc7XHJcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UobWVkaWFFbGVtZW50KTtcclxuXHRcdHRoaXMuY29ubmVjdCgpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRNZWRpYVN0cmVhbVNvdXJjZTogZnVuY3Rpb24gKG1lZGlhU3RyZWFtKSB7XHJcblxyXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcclxuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdtZWRpYVN0cmVhbU5vZGUnO1xyXG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UobWVkaWFTdHJlYW0pO1xyXG5cdFx0dGhpcy5jb25uZWN0KCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldEJ1ZmZlcjogZnVuY3Rpb24gKGF1ZGlvQnVmZmVyKSB7XHJcblxyXG5cdFx0dGhpcy5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdidWZmZXInO1xyXG5cclxuXHRcdGlmICh0aGlzLmF1dG9wbGF5KSB7IHRoaXMucGxheSgpOyB9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBsYXk6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodGhpcy5pc1BsYXlpbmcgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQXVkaW86IEF1ZGlvIGlzIGFscmVhZHkgcGxheWluZy4nKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBzb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcblxyXG5cdFx0c291cmNlLmJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xyXG5cdFx0c291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XHJcblx0XHRzb3VyY2Uub25lbmRlZCA9IHRoaXMub25FbmRlZC5iaW5kKHRoaXMpO1xyXG5cdFx0dGhpcy5zdGFydFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWU7XHJcblx0XHRzb3VyY2Uuc3RhcnQodGhpcy5zdGFydFRpbWUsIHRoaXMub2Zmc2V0LCB0aGlzLmR1cmF0aW9uKTtcclxuXHJcblx0XHR0aGlzLmlzUGxheWluZyA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcblxyXG5cdFx0dGhpcy5zZXREZXR1bmUodGhpcy5kZXR1bmUpO1xyXG5cdFx0dGhpcy5zZXRQbGF5YmFja1JhdGUodGhpcy5wbGF5YmFja1JhdGUpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmNvbm5lY3QoKTtcclxuXHJcblx0fSxcclxuXHJcblx0cGF1c2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRpZiAodGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xyXG5cdFx0XHR0aGlzLnNvdXJjZS5vbmVuZGVkID0gbnVsbDtcclxuXHRcdFx0dGhpcy5vZmZzZXQgKz0gKHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuc3RhcnRUaW1lKSAqIHRoaXMucGxheWJhY2tSYXRlO1xyXG5cdFx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c3RvcDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xyXG5cdFx0dGhpcy5zb3VyY2Uub25lbmRlZCA9IG51bGw7XHJcblx0XHR0aGlzLm9mZnNldCA9IDA7XHJcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb25uZWN0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuZmlsdGVycy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZmlsdGVyc1swXSk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dGhpcy5maWx0ZXJzW2kgLSAxXS5jb25uZWN0KHRoaXMuZmlsdGVyc1tpXSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmZpbHRlcnNbdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDFdLmNvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRkaXNjb25uZWN0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuZmlsdGVycy5sZW5ndGggPiAwKSB7XHJcblxyXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KHRoaXMuZmlsdGVyc1swXSk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdFx0dGhpcy5maWx0ZXJzW2kgLSAxXS5kaXNjb25uZWN0KHRoaXMuZmlsdGVyc1tpXSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmZpbHRlcnNbdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDFdLmRpc2Nvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRGaWx0ZXJzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVycztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RmlsdGVyczogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0aWYgKCF2YWx1ZSkgeyB2YWx1ZSA9IFtdOyB9XHJcblxyXG5cdFx0aWYgKHRoaXMuaXNQbGF5aW5nID09PSB0cnVlKSB7XHJcblxyXG5cdFx0XHR0aGlzLmRpc2Nvbm5lY3QoKTtcclxuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuY29ubmVjdCgpO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR0aGlzLmZpbHRlcnMgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldERldHVuZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0dGhpcy5kZXR1bmUgPSB2YWx1ZTtcclxuXHJcblx0XHRpZiAodGhpcy5zb3VyY2UuZGV0dW5lID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9IC8vIG9ubHkgc2V0IGRldHVuZSB3aGVuIGF2YWlsYWJsZVxyXG5cclxuXHRcdGlmICh0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2UuZGV0dW5lLnNldFRhcmdldEF0VGltZSh0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldERldHVuZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRldHVuZTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0RmlsdGVyOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RmlsdGVycygpWzBdO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGaWx0ZXI6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKGZpbHRlciA/IFtmaWx0ZXJdIDogW10pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdGlmICh0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wbGF5YmFja1JhdGUgPSB2YWx1ZTtcclxuXHJcblx0XHRpZiAodGhpcy5pc1BsYXlpbmcgPT09IHRydWUpIHtcclxuXHJcblx0XHRcdHRoaXMuc291cmNlLnBsYXliYWNrUmF0ZS5zZXRUYXJnZXRBdFRpbWUodGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wbGF5YmFja1JhdGU7XHJcblxyXG5cdH0sXHJcblxyXG5cdG9uRW5kZWQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRMb29wOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0aWYgKHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5sb29wO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRMb29wOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRpZiAodGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicpO1xyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubG9vcCA9IHZhbHVlO1xyXG5cclxuXHRcdGlmICh0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0dGhpcy5zb3VyY2UubG9vcCA9IHRoaXMubG9vcDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFZvbHVtZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0Vm9sdW1lOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHR0aGlzLmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUodmFsdWUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxudmFyIF9wb3NpdGlvbiQzID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF9xdWF0ZXJuaW9uJDQgPSBuZXcgUXVhdGVybmlvbigpO1xyXG52YXIgX3NjYWxlJDIgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX29yaWVudGF0aW9uJDEgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuZnVuY3Rpb24gUG9zaXRpb25hbEF1ZGlvKGxpc3RlbmVyKSB7XHJcblxyXG5cdEF1ZGlvLmNhbGwodGhpcywgbGlzdGVuZXIpO1xyXG5cclxuXHR0aGlzLnBhbm5lciA9IHRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTtcclxuXHR0aGlzLnBhbm5lci5wYW5uaW5nTW9kZWwgPSAnSFJURic7XHJcblx0dGhpcy5wYW5uZXIuY29ubmVjdCh0aGlzLmdhaW4pO1xyXG5cclxufVxyXG5cclxuUG9zaXRpb25hbEF1ZGlvLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShBdWRpby5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBQb3NpdGlvbmFsQXVkaW8sXHJcblxyXG5cdGdldE91dHB1dDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnBhbm5lcjtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0UmVmRGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucmVmRGlzdGFuY2U7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJlZkRpc3RhbmNlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRSb2xsb2ZmRmFjdG9yOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3I7XHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3IgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXREaXN0YW5jZU1vZGVsOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHR0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsID0gdmFsdWU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldE1heERpc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLm1heERpc3RhbmNlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRNYXhEaXN0YW5jZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0dGhpcy5wYW5uZXIubWF4RGlzdGFuY2UgPSB2YWx1ZTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RGlyZWN0aW9uYWxDb25lOiBmdW5jdGlvbiAoY29uZUlubmVyQW5nbGUsIGNvbmVPdXRlckFuZ2xlLCBjb25lT3V0ZXJHYWluKSB7XHJcblxyXG5cdFx0dGhpcy5wYW5uZXIuY29uZUlubmVyQW5nbGUgPSBjb25lSW5uZXJBbmdsZTtcclxuXHRcdHRoaXMucGFubmVyLmNvbmVPdXRlckFuZ2xlID0gY29uZU91dGVyQW5nbGU7XHJcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uIChmb3JjZSkge1xyXG5cclxuXHRcdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsIGZvcmNlKTtcclxuXHJcblx0XHRpZiAodGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IHRydWUgJiYgdGhpcy5pc1BsYXlpbmcgPT09IGZhbHNlKSB7IHJldHVybjsgfVxyXG5cclxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKF9wb3NpdGlvbiQzLCBfcXVhdGVybmlvbiQ0LCBfc2NhbGUkMik7XHJcblxyXG5cdFx0X29yaWVudGF0aW9uJDEuc2V0KDAsIDAsIDEpLmFwcGx5UXVhdGVybmlvbihfcXVhdGVybmlvbiQ0KTtcclxuXHJcblx0XHR2YXIgcGFubmVyID0gdGhpcy5wYW5uZXI7XHJcblxyXG5cdFx0aWYgKHBhbm5lci5wb3NpdGlvblgpIHtcclxuXHJcblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxyXG5cclxuXHRcdFx0dmFyIGVuZFRpbWUgPSB0aGlzLmNvbnRleHQuY3VycmVudFRpbWUgKyB0aGlzLmxpc3RlbmVyLnRpbWVEZWx0YTtcclxuXHJcblx0XHRcdHBhbm5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX3Bvc2l0aW9uJDMueCwgZW5kVGltZSk7XHJcblx0XHRcdHBhbm5lci5wb3NpdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX3Bvc2l0aW9uJDMueSwgZW5kVGltZSk7XHJcblx0XHRcdHBhbm5lci5wb3NpdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX3Bvc2l0aW9uJDMueiwgZW5kVGltZSk7XHJcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX29yaWVudGF0aW9uJDEueCwgZW5kVGltZSk7XHJcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvblkubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX29yaWVudGF0aW9uJDEueSwgZW5kVGltZSk7XHJcblx0XHRcdHBhbm5lci5vcmllbnRhdGlvbloubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoX29yaWVudGF0aW9uJDEueiwgZW5kVGltZSk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHBhbm5lci5zZXRQb3NpdGlvbihfcG9zaXRpb24kMy54LCBfcG9zaXRpb24kMy55LCBfcG9zaXRpb24kMy56KTtcclxuXHRcdFx0cGFubmVyLnNldE9yaWVudGF0aW9uKF9vcmllbnRhdGlvbiQxLngsIF9vcmllbnRhdGlvbiQxLnksIF9vcmllbnRhdGlvbiQxLnopO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBBdWRpb0FuYWx5c2VyKGF1ZGlvLCBmZnRTaXplKSB7XHJcblxyXG5cdHRoaXMuYW5hbHlzZXIgPSBhdWRpby5jb250ZXh0LmNyZWF0ZUFuYWx5c2VyKCk7XHJcblx0dGhpcy5hbmFseXNlci5mZnRTaXplID0gZmZ0U2l6ZSAhPT0gdW5kZWZpbmVkID8gZmZ0U2l6ZSA6IDIwNDg7XHJcblxyXG5cdHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQpO1xyXG5cclxuXHRhdWRpby5nZXRPdXRwdXQoKS5jb25uZWN0KHRoaXMuYW5hbHlzZXIpO1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihBdWRpb0FuYWx5c2VyLnByb3RvdHlwZSwge1xyXG5cclxuXHRnZXRGcmVxdWVuY3lEYXRhOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5hbmFseXNlci5nZXRCeXRlRnJlcXVlbmN5RGF0YSh0aGlzLmRhdGEpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLmRhdGE7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldEF2ZXJhZ2VGcmVxdWVuY3k6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgdmFsdWUgPSAwLCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YWx1ZSArPSBkYXRhW2ldO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdmFsdWUgLyBkYXRhLmxlbmd0aDtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQnVmZmVyZWQgc2NlbmUgZ3JhcGggcHJvcGVydHkgdGhhdCBhbGxvd3Mgd2VpZ2h0ZWQgYWNjdW11bGF0aW9uLlxyXG4gKlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xyXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cclxuICogQGF1dGhvciB0c2Nod1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFByb3BlcnR5TWl4ZXIoYmluZGluZywgdHlwZU5hbWUsIHZhbHVlU2l6ZSkge1xyXG5cclxuXHR0aGlzLmJpbmRpbmcgPSBiaW5kaW5nO1xyXG5cdHRoaXMudmFsdWVTaXplID0gdmFsdWVTaXplO1xyXG5cclxuXHR2YXIgYnVmZmVyVHlwZSA9IEZsb2F0NjRBcnJheSxcclxuXHRcdG1peEZ1bmN0aW9uO1xyXG5cclxuXHRzd2l0Y2ggKHR5cGVOYW1lKSB7XHJcblxyXG5cdFx0Y2FzZSAncXVhdGVybmlvbic6XHJcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2xlcnA7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ3N0cmluZyc6XHJcblx0XHRjYXNlICdib29sJzpcclxuXHRcdFx0YnVmZmVyVHlwZSA9IEFycmF5O1xyXG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NlbGVjdDtcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0ZGVmYXVsdDpcclxuXHRcdFx0bWl4RnVuY3Rpb24gPSB0aGlzLl9sZXJwO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMuYnVmZmVyID0gbmV3IGJ1ZmZlclR5cGUodmFsdWVTaXplICogNCk7XHJcblx0Ly8gbGF5b3V0OiBbIGluY29taW5nIHwgYWNjdTAgfCBhY2N1MSB8IG9yaWcgXVxyXG5cdC8vXHJcblx0Ly8gaW50ZXJwb2xhdG9ycyBjYW4gdXNlIC5idWZmZXIgYXMgdGhlaXIgLnJlc3VsdFxyXG5cdC8vIHRoZSBkYXRhIHRoZW4gZ29lcyB0byAnaW5jb21pbmcnXHJcblx0Ly9cclxuXHQvLyAnYWNjdTAnIGFuZCAnYWNjdTEnIGFyZSB1c2VkIGZyYW1lLWludGVybGVhdmVkIGZvclxyXG5cdC8vIHRoZSBjdW11bGF0aXZlIHJlc3VsdCBhbmQgYXJlIGNvbXBhcmVkIHRvIGRldGVjdFxyXG5cdC8vIGNoYW5nZXNcclxuXHQvL1xyXG5cdC8vICdvcmlnJyBzdG9yZXMgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBwcm9wZXJ0eVxyXG5cclxuXHR0aGlzLl9taXhCdWZmZXJSZWdpb24gPSBtaXhGdW5jdGlvbjtcclxuXHJcblx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcclxuXHJcblx0dGhpcy51c2VDb3VudCA9IDA7XHJcblx0dGhpcy5yZWZlcmVuY2VDb3VudCA9IDA7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFByb3BlcnR5TWl4ZXIucHJvdG90eXBlLCB7XHJcblxyXG5cdC8vIGFjY3VtdWxhdGUgZGF0YSBpbiB0aGUgJ2luY29taW5nJyByZWdpb24gaW50byAnYWNjdTxpPidcclxuXHRhY2N1bXVsYXRlOiBmdW5jdGlvbiAoYWNjdUluZGV4LCB3ZWlnaHQpIHtcclxuXHJcblx0XHQvLyBub3RlOiBoYXBwaWx5IGFjY3VtdWxhdGluZyBub3RoaW5nIHdoZW4gd2VpZ2h0ID0gMCwgdGhlIGNhbGxlciBrbm93c1xyXG5cdFx0Ly8gdGhlIHdlaWdodCBhbmQgc2hvdWxkbid0IGhhdmUgbWFkZSB0aGUgY2FsbCBpbiB0aGUgZmlyc3QgcGxhY2VcclxuXHJcblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxyXG5cdFx0XHRvZmZzZXQgPSBhY2N1SW5kZXggKiBzdHJpZGUgKyBzdHJpZGUsXHJcblxyXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gdGhpcy5jdW11bGF0aXZlV2VpZ2h0O1xyXG5cclxuXHRcdGlmIChjdXJyZW50V2VpZ2h0ID09PSAwKSB7XHJcblxyXG5cdFx0XHQvLyBhY2N1TiA6PSBpbmNvbWluZyAqIHdlaWdodFxyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKytpKSB7XHJcblxyXG5cdFx0XHRcdGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGJ1ZmZlcltpXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGN1cnJlbnRXZWlnaHQgPSB3ZWlnaHQ7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGFjY3VOIDo9IGFjY3VOICsgaW5jb21pbmcgKiB3ZWlnaHRcclxuXHJcblx0XHRcdGN1cnJlbnRXZWlnaHQgKz0gd2VpZ2h0O1xyXG5cdFx0XHR2YXIgbWl4ID0gd2VpZ2h0IC8gY3VycmVudFdlaWdodDtcclxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKGJ1ZmZlciwgb2Zmc2V0LCAwLCBtaXgsIHN0cmlkZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGFwcGx5IHRoZSBzdGF0ZSBvZiAnYWNjdTxpPicgdG8gdGhlIGJpbmRpbmcgd2hlbiBhY2N1cyBkaWZmZXJcclxuXHRhcHBseTogZnVuY3Rpb24gKGFjY3VJbmRleCkge1xyXG5cclxuXHRcdHZhciBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcclxuXHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIsXHJcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcclxuXHJcblx0XHRcdHdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodCxcclxuXHJcblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XHJcblxyXG5cdFx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcclxuXHJcblx0XHRpZiAod2VpZ2h0IDwgMSkge1xyXG5cclxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBvcmlnaW5hbCAqICggMSAtIGN1bXVsYXRpdmVXZWlnaHQgKVxyXG5cclxuXHRcdFx0dmFyIG9yaWdpbmFsVmFsdWVPZmZzZXQgPSBzdHJpZGUgKiAzO1xyXG5cclxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKFxyXG5cdFx0XHRcdGJ1ZmZlciwgb2Zmc2V0LCBvcmlnaW5hbFZhbHVlT2Zmc2V0LCAxIC0gd2VpZ2h0LCBzdHJpZGUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBpID0gc3RyaWRlLCBlID0gc3RyaWRlICsgc3RyaWRlOyBpICE9PSBlOyArK2kpIHtcclxuXHJcblx0XHRcdGlmIChidWZmZXJbaV0gIT09IGJ1ZmZlcltpICsgc3RyaWRlXSkge1xyXG5cclxuXHRcdFx0XHQvLyB2YWx1ZSBoYXMgY2hhbmdlZCAtPiB1cGRhdGUgc2NlbmUgZ3JhcGhcclxuXHJcblx0XHRcdFx0YmluZGluZy5zZXRWYWx1ZShidWZmZXIsIG9mZnNldCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZW1lbWJlciB0aGUgc3RhdGUgb2YgdGhlIGJvdW5kIHByb3BlcnR5IGFuZCBjb3B5IGl0IHRvIGJvdGggYWNjdXNcclxuXHRzYXZlT3JpZ2luYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBiaW5kaW5nID0gdGhpcy5iaW5kaW5nO1xyXG5cclxuXHRcdHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcixcclxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXHJcblxyXG5cdFx0XHRvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogMztcclxuXHJcblx0XHRiaW5kaW5nLmdldFZhbHVlKGJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCk7XHJcblxyXG5cdFx0Ly8gYWNjdVswLi4xXSA6PSBvcmlnIC0tIGluaXRpYWxseSBkZXRlY3QgY2hhbmdlcyBhZ2FpbnN0IHRoZSBvcmlnaW5hbFxyXG5cdFx0Zm9yICh2YXIgaSA9IHN0cmlkZSwgZSA9IG9yaWdpbmFsVmFsdWVPZmZzZXQ7IGkgIT09IGU7ICsraSkge1xyXG5cclxuXHRcdFx0YnVmZmVyW2ldID0gYnVmZmVyW29yaWdpbmFsVmFsdWVPZmZzZXQgKyAoaSAlIHN0cmlkZSldO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xyXG5cdHJlc3RvcmVPcmlnaW5hbFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XHJcblx0XHR0aGlzLmJpbmRpbmcuc2V0VmFsdWUodGhpcy5idWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHJcblx0Ly8gbWl4IGZ1bmN0aW9uc1xyXG5cclxuXHRfc2VsZWN0OiBmdW5jdGlvbiAoYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCwgc3RyaWRlKSB7XHJcblxyXG5cdFx0aWYgKHQgPj0gMC41KSB7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArK2kpIHtcclxuXHJcblx0XHRcdFx0YnVmZmVyW2RzdE9mZnNldCArIGldID0gYnVmZmVyW3NyY09mZnNldCArIGldO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0X3NsZXJwOiBmdW5jdGlvbiAoYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCkge1xyXG5cclxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KGJ1ZmZlciwgZHN0T2Zmc2V0LCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBzcmNPZmZzZXQsIHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRfbGVycDogZnVuY3Rpb24gKGJ1ZmZlciwgZHN0T2Zmc2V0LCBzcmNPZmZzZXQsIHQsIHN0cmlkZSkge1xyXG5cclxuXHRcdHZhciBzID0gMSAtIHQ7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKytpKSB7XHJcblxyXG5cdFx0XHR2YXIgaiA9IGRzdE9mZnNldCArIGk7XHJcblxyXG5cdFx0XHRidWZmZXJbal0gPSBidWZmZXJbal0gKiBzICsgYnVmZmVyW3NyY09mZnNldCArIGldICogdDtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEEgcmVmZXJlbmNlIHRvIGEgcmVhbCBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGguXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuLy8gQ2hhcmFjdGVycyBbXS46LyBhcmUgcmVzZXJ2ZWQgZm9yIHRyYWNrIGJpbmRpbmcgc3ludGF4LlxyXG52YXIgX1JFU0VSVkVEX0NIQVJTX1JFID0gJ1xcXFxbXFxcXF1cXFxcLjpcXFxcLyc7XHJcbnZhciBfcmVzZXJ2ZWRSZSA9IG5ldyBSZWdFeHAoJ1snICsgX1JFU0VSVkVEX0NIQVJTX1JFICsgJ10nLCAnZycpO1xyXG5cclxuLy8gQXR0ZW1wdHMgdG8gYWxsb3cgbm9kZSBuYW1lcyBmcm9tIGFueSBsYW5ndWFnZS4gRVM1J3MgYFxcd2AgcmVnZXhwIG1hdGNoZXNcclxuLy8gb25seSBsYXRpbiBjaGFyYWN0ZXJzLCBhbmQgdGhlIHVuaWNvZGUgXFxwe0x9IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBTb1xyXG4vLyBpbnN0ZWFkLCB3ZSBleGNsdWRlIHJlc2VydmVkIGNoYXJhY3RlcnMgYW5kIG1hdGNoIGV2ZXJ5dGhpbmcgZWxzZS5cclxudmFyIF93b3JkQ2hhciA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXSc7XHJcbnZhciBfd29yZENoYXJPckRvdCA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSgnXFxcXC4nLCAnJykgKyAnXSc7XHJcblxyXG4vLyBQYXJlbnQgZGlyZWN0b3JpZXMsIGRlbGltaXRlZCBieSAnLycgb3IgJzonLiBDdXJyZW50bHkgdW51c2VkLCBidXQgbXVzdFxyXG4vLyBiZSBtYXRjaGVkIHRvIHBhcnNlIHRoZSByZXN0IG9mIHRoZSB0cmFjayBuYW1lLlxyXG52YXIgX2RpcmVjdG9yeVJlID0gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCdXQycsIF93b3JkQ2hhcik7XHJcblxyXG4vLyBUYXJnZXQgbm9kZS4gTWF5IGNvbnRhaW4gd29yZCBjaGFyYWN0ZXJzIChhLXpBLVowLTlfKSBhbmQgJy4nIG9yICctJy5cclxudmFyIF9ub2RlUmUgPSAvKFdDT0QrKT8vLnNvdXJjZS5yZXBsYWNlKCdXQ09EJywgX3dvcmRDaGFyT3JEb3QpO1xyXG5cclxuLy8gT2JqZWN0IG9uIHRhcmdldCBub2RlLCBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZFxyXG4vLyBjaGFyYWN0ZXJzLiBBY2Nlc3NvciBtYXkgY29udGFpbiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBjbG9zaW5nIGJyYWNrZXQuXHJcbnZhciBfb2JqZWN0UmUgPSAvKD86XFwuKFdDKykoPzpcXFsoLispXFxdKT8pPy8uc291cmNlLnJlcGxhY2UoJ1dDJywgX3dvcmRDaGFyKTtcclxuXHJcbi8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heVxyXG4vLyBjb250YWluIGFueSBub24tYnJhY2tldCBjaGFyYWN0ZXJzLlxyXG52YXIgX3Byb3BlcnR5UmUgPSAvXFwuKFdDKykoPzpcXFsoLispXFxdKT8vLnNvdXJjZS5yZXBsYWNlKCdXQycsIF93b3JkQ2hhcik7XHJcblxyXG52YXIgX3RyYWNrUmUgPSBuZXcgUmVnRXhwKCcnXHJcblx0KyAnXidcclxuXHQrIF9kaXJlY3RvcnlSZVxyXG5cdCsgX25vZGVSZVxyXG5cdCsgX29iamVjdFJlXHJcblx0KyBfcHJvcGVydHlSZVxyXG5cdCsgJyQnXHJcbik7XHJcblxyXG52YXIgX3N1cHBvcnRlZE9iamVjdE5hbWVzID0gWydtYXRlcmlhbCcsICdtYXRlcmlhbHMnLCAnYm9uZXMnXTtcclxuXHJcbmZ1bmN0aW9uIENvbXBvc2l0ZSh0YXJnZXRHcm91cCwgcGF0aCwgb3B0aW9uYWxQYXJzZWRQYXRoKSB7XHJcblxyXG5cdHZhciBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZShwYXRoKTtcclxuXHJcblx0dGhpcy5fdGFyZ2V0R3JvdXAgPSB0YXJnZXRHcm91cDtcclxuXHR0aGlzLl9iaW5kaW5ncyA9IHRhcmdldEdyb3VwLnN1YnNjcmliZV8ocGF0aCwgcGFyc2VkUGF0aCk7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKENvbXBvc2l0ZS5wcm90b3R5cGUsIHtcclxuXHJcblx0Z2V0VmFsdWU6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0dGhpcy5iaW5kKCk7IC8vIGJpbmQgYWxsIGJpbmRpbmdcclxuXHJcblx0XHR2YXIgZmlyc3RWYWxpZEluZGV4ID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLFxyXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5fYmluZGluZ3NbZmlyc3RWYWxpZEluZGV4XTtcclxuXHJcblx0XHQvLyBhbmQgb25seSBjYWxsIC5nZXRWYWx1ZSBvbiB0aGUgZmlyc3RcclxuXHRcdGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHsgYmluZGluZy5nZXRWYWx1ZShhcnJheSwgb2Zmc2V0KTsgfVxyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRWYWx1ZTogZnVuY3Rpb24gKGFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcclxuXHJcblx0XHRmb3IgKHZhciBpID0gdGhpcy5fdGFyZ2V0R3JvdXAubkNhY2hlZE9iamVjdHNfLCBuID0gYmluZGluZ3MubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdGJpbmRpbmdzW2ldLnNldFZhbHVlKGFycmF5LCBvZmZzZXQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0YmluZDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0YmluZGluZ3NbaV0uYmluZCgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHRiaW5kaW5nc1tpXS51bmJpbmQoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuXHJcbmZ1bmN0aW9uIFByb3BlcnR5QmluZGluZyhyb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCkge1xyXG5cclxuXHR0aGlzLnBhdGggPSBwYXRoO1xyXG5cdHRoaXMucGFyc2VkUGF0aCA9IHBhcnNlZFBhdGggfHwgUHJvcGVydHlCaW5kaW5nLnBhcnNlVHJhY2tOYW1lKHBhdGgpO1xyXG5cclxuXHR0aGlzLm5vZGUgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUocm9vdE5vZGUsIHRoaXMucGFyc2VkUGF0aC5ub2RlTmFtZSkgfHwgcm9vdE5vZGU7XHJcblxyXG5cdHRoaXMucm9vdE5vZGUgPSByb290Tm9kZTtcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oUHJvcGVydHlCaW5kaW5nLCB7XHJcblxyXG5cdENvbXBvc2l0ZTogQ29tcG9zaXRlLFxyXG5cclxuXHRjcmVhdGU6IGZ1bmN0aW9uIChyb290LCBwYXRoLCBwYXJzZWRQYXRoKSB7XHJcblxyXG5cdFx0aWYgKCEocm9vdCAmJiByb290LmlzQW5pbWF0aW9uT2JqZWN0R3JvdXApKSB7XHJcblxyXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZyhyb290LCBwYXRoLCBwYXJzZWRQYXRoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0cmV0dXJuIG5ldyBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlKHJvb3QsIHBhdGgsIHBhcnNlZFBhdGgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogUmVwbGFjZXMgc3BhY2VzIHdpdGggdW5kZXJzY29yZXMgYW5kIHJlbW92ZXMgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycyBmcm9tXHJcblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9kZSBuYW1lIHRvIGJlIHNhbml0aXplZC5cclxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XHJcblx0ICovXHJcblx0c2FuaXRpemVOb2RlTmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuXHJcblx0XHRyZXR1cm4gbmFtZS5yZXBsYWNlKC9cXHMvZywgJ18nKS5yZXBsYWNlKF9yZXNlcnZlZFJlLCAnJyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHBhcnNlVHJhY2tOYW1lOiBmdW5jdGlvbiAodHJhY2tOYW1lKSB7XHJcblxyXG5cdFx0dmFyIG1hdGNoZXMgPSBfdHJhY2tSZS5leGVjKHRyYWNrTmFtZSk7XHJcblxyXG5cdFx0aWYgKCFtYXRjaGVzKSB7XHJcblxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Byb3BlcnR5QmluZGluZzogQ2Fubm90IHBhcnNlIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciByZXN1bHRzID0ge1xyXG5cdFx0XHQvLyBkaXJlY3RvcnlOYW1lOiBtYXRjaGVzWyAxIF0sIC8vICh0c2NodykgY3VycmVudGx5IHVudXNlZFxyXG5cdFx0XHRub2RlTmFtZTogbWF0Y2hlc1syXSxcclxuXHRcdFx0b2JqZWN0TmFtZTogbWF0Y2hlc1szXSxcclxuXHRcdFx0b2JqZWN0SW5kZXg6IG1hdGNoZXNbNF0sXHJcblx0XHRcdHByb3BlcnR5TmFtZTogbWF0Y2hlc1s1XSwgLy8gcmVxdWlyZWRcclxuXHRcdFx0cHJvcGVydHlJbmRleDogbWF0Y2hlc1s2XVxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgbGFzdERvdCA9IHJlc3VsdHMubm9kZU5hbWUgJiYgcmVzdWx0cy5ub2RlTmFtZS5sYXN0SW5kZXhPZignLicpO1xyXG5cclxuXHRcdGlmIChsYXN0RG90ICE9PSB1bmRlZmluZWQgJiYgbGFzdERvdCAhPT0gLSAxKSB7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKGxhc3REb3QgKyAxKTtcclxuXHJcblx0XHRcdC8vIE9iamVjdCBuYW1lcyBtdXN0IGJlIGNoZWNrZWQgYWdhaW5zdCBhIHdoaXRlbGlzdC4gT3RoZXJ3aXNlLCB0aGVyZVxyXG5cdFx0XHQvLyBpcyBubyB3YXkgdG8gcGFyc2UgJ2Zvby5iYXIuYmF6JzogJ2JheicgbXVzdCBiZSBhIHByb3BlcnR5LCBidXRcclxuXHRcdFx0Ly8gJ2JhcicgY291bGQgYmUgdGhlIG9iamVjdE5hbWUsIG9yIHBhcnQgb2YgYSBub2RlTmFtZSAod2hpY2ggY2FuXHJcblx0XHRcdC8vIGluY2x1ZGUgJy4nIGNoYXJhY3RlcnMpLlxyXG5cdFx0XHRpZiAoX3N1cHBvcnRlZE9iamVjdE5hbWVzLmluZGV4T2Yob2JqZWN0TmFtZSkgIT09IC0gMSkge1xyXG5cclxuXHRcdFx0XHRyZXN1bHRzLm5vZGVOYW1lID0gcmVzdWx0cy5ub2RlTmFtZS5zdWJzdHJpbmcoMCwgbGFzdERvdCk7XHJcblx0XHRcdFx0cmVzdWx0cy5vYmplY3ROYW1lID0gb2JqZWN0TmFtZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCkge1xyXG5cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdQcm9wZXJ0eUJpbmRpbmc6IGNhbiBub3QgcGFyc2UgcHJvcGVydHlOYW1lIGZyb20gdHJhY2tOYW1lOiAnICsgdHJhY2tOYW1lKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZpbmROb2RlOiBmdW5jdGlvbiAocm9vdCwgbm9kZU5hbWUpIHtcclxuXHJcblx0XHRpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSBcIlwiIHx8IG5vZGVOYW1lID09PSBcInJvb3RcIiB8fCBub2RlTmFtZSA9PT0gXCIuXCIgfHwgbm9kZU5hbWUgPT09IC0gMSB8fCBub2RlTmFtZSA9PT0gcm9vdC5uYW1lIHx8IG5vZGVOYW1lID09PSByb290LnV1aWQpIHtcclxuXHJcblx0XHRcdHJldHVybiByb290O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZWFyY2ggaW50byBza2VsZXRvbiBib25lcy5cclxuXHRcdGlmIChyb290LnNrZWxldG9uKSB7XHJcblxyXG5cdFx0XHR2YXIgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZShub2RlTmFtZSk7XHJcblxyXG5cdFx0XHRpZiAoYm9uZSAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBib25lO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZWFyY2ggaW50byBub2RlIHN1YnRyZWUuXHJcblx0XHRpZiAocm9vdC5jaGlsZHJlbikge1xyXG5cclxuXHRcdFx0dmFyIHNlYXJjaE5vZGVTdWJ0cmVlID0gZnVuY3Rpb24gKGNoaWxkcmVuKSB7XHJcblxyXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2hpbGROb2RlID0gY2hpbGRyZW5baV07XHJcblxyXG5cdFx0XHRcdFx0aWYgKGNoaWxkTm9kZS5uYW1lID09PSBub2RlTmFtZSB8fCBjaGlsZE5vZGUudXVpZCA9PT0gbm9kZU5hbWUpIHtcclxuXHJcblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZE5vZGU7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciByZXN1bHQgPSBzZWFyY2hOb2RlU3VidHJlZShjaGlsZE5vZGUuY2hpbGRyZW4pO1xyXG5cclxuXHRcdFx0XHRcdGlmIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdDsgfVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHZhciBzdWJUcmVlTm9kZSA9IHNlYXJjaE5vZGVTdWJ0cmVlKHJvb3QuY2hpbGRyZW4pO1xyXG5cclxuXHRcdFx0aWYgKHN1YlRyZWVOb2RlKSB7XHJcblxyXG5cdFx0XHRcdHJldHVybiBzdWJUcmVlTm9kZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmFzc2lnbihQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7IC8vIHByb3RvdHlwZSwgY29udGludWVkXHJcblxyXG5cdC8vIHRoZXNlIGFyZSB1c2VkIHRvIFwiYmluZFwiIGEgbm9uZXhpc3RlbnQgcHJvcGVydHlcclxuXHRfZ2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHsgfSxcclxuXHRfc2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHsgfSxcclxuXHJcblx0QmluZGluZ1R5cGU6IHtcclxuXHRcdERpcmVjdDogMCxcclxuXHRcdEVudGlyZUFycmF5OiAxLFxyXG5cdFx0QXJyYXlFbGVtZW50OiAyLFxyXG5cdFx0SGFzRnJvbVRvQXJyYXk6IDNcclxuXHR9LFxyXG5cclxuXHRWZXJzaW9uaW5nOiB7XHJcblx0XHROb25lOiAwLFxyXG5cdFx0TmVlZHNVcGRhdGU6IDEsXHJcblx0XHRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlOiAyXHJcblx0fSxcclxuXHJcblx0R2V0dGVyQnlCaW5kaW5nVHlwZTogW1xyXG5cclxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX2RpcmVjdChidWZmZXIsIG9mZnNldCkge1xyXG5cclxuXHRcdFx0YnVmZmVyW29mZnNldF0gPSB0aGlzLm5vZGVbdGhpcy5wcm9wZXJ0eU5hbWVdO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXkoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdHZhciBzb3VyY2UgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IHNvdXJjZS5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0XHRidWZmZXJbb2Zmc2V0KytdID0gc291cmNlW2ldO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfYXJyYXlFbGVtZW50KGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRidWZmZXJbb2Zmc2V0XSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVt0aGlzLnByb3BlcnR5SW5kZXhdO1xyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0VmFsdWVfdG9BcnJheShidWZmZXIsIG9mZnNldCkge1xyXG5cclxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LnRvQXJyYXkoYnVmZmVyLCBvZmZzZXQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XSxcclxuXHJcblx0U2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmc6IFtcclxuXHJcblx0XHRbXHJcblx0XHRcdC8vIERpcmVjdFxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0KGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0W3RoaXMucHJvcGVydHlOYW1lXSA9IGJ1ZmZlcltvZmZzZXRdO1xyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdF9zZXROZWVkc1VwZGF0ZShidWZmZXIsIG9mZnNldCkge1xyXG5cclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdFt0aGlzLnByb3BlcnR5TmFtZV0gPSBidWZmZXJbb2Zmc2V0XTtcclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZGlyZWN0X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbdGhpcy5wcm9wZXJ0eU5hbWVdID0gYnVmZmVyW29mZnNldF07XHJcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XSwgW1xyXG5cclxuXHRcdFx0Ly8gRW50aXJlQXJyYXlcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5KGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdFx0XHRkZXN0W2ldID0gYnVmZmVyW29mZnNldCsrXTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5X3NldE5lZWRzVXBkYXRlKGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdFx0XHRkZXN0W2ldID0gYnVmZmVyW29mZnNldCsrXTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZShidWZmZXIsIG9mZnNldCkge1xyXG5cclxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHRcdFx0ZGVzdFtpXSA9IGJ1ZmZlcltvZmZzZXQrK107XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XSwgW1xyXG5cclxuXHRcdFx0Ly8gQXJyYXlFbGVtZW50XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnQoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5W3RoaXMucHJvcGVydHlJbmRleF0gPSBidWZmZXJbb2Zmc2V0XTtcclxuXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5W3RoaXMucHJvcGVydHlJbmRleF0gPSBidWZmZXJbb2Zmc2V0XTtcclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlFbGVtZW50X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5W3RoaXMucHJvcGVydHlJbmRleF0gPSBidWZmZXJbb2Zmc2V0XTtcclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRdLCBbXHJcblxyXG5cdFx0XHQvLyBIYXNUb0Zyb21BcnJheVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5KGJ1ZmZlciwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoYnVmZmVyLCBvZmZzZXQpO1xyXG5cclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2Zyb21BcnJheV9zZXROZWVkc1VwZGF0ZShidWZmZXIsIG9mZnNldCkge1xyXG5cclxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KGJ1ZmZlciwgb2Zmc2V0KTtcclxuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoYnVmZmVyLCBvZmZzZXQpIHtcclxuXHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheShidWZmZXIsIG9mZnNldCk7XHJcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XVxyXG5cclxuXHRdLFxyXG5cclxuXHRnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVfdW5ib3VuZCh0YXJnZXRBcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0dGhpcy5iaW5kKCk7XHJcblx0XHR0aGlzLmdldFZhbHVlKHRhcmdldEFycmF5LCBvZmZzZXQpO1xyXG5cclxuXHRcdC8vIE5vdGU6IFRoaXMgY2xhc3MgdXNlcyBhIFN0YXRlIHBhdHRlcm4gb24gYSBwZXItbWV0aG9kIGJhc2lzOlxyXG5cdFx0Ly8gJ2JpbmQnIHNldHMgJ3RoaXMuZ2V0VmFsdWUnIC8gJ3NldFZhbHVlJyBhbmQgc2hhZG93cyB0aGVcclxuXHRcdC8vIHByb3RvdHlwZSB2ZXJzaW9uIG9mIHRoZXNlIG1ldGhvZHMgd2l0aCBvbmUgdGhhdCByZXByZXNlbnRzXHJcblx0XHQvLyB0aGUgYm91bmQgc3RhdGUuIFdoZW4gdGhlIHByb3BlcnR5IGlzIG5vdCBmb3VuZCwgdGhlIG1ldGhvZHNcclxuXHRcdC8vIGJlY29tZSBuby1vcHMuXHJcblxyXG5cdH0sXHJcblxyXG5cdHNldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZV91bmJvdW5kKHNvdXJjZUFycmF5LCBvZmZzZXQpIHtcclxuXHJcblx0XHR0aGlzLmJpbmQoKTtcclxuXHRcdHRoaXMuc2V0VmFsdWUoc291cmNlQXJyYXksIG9mZnNldCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGNyZWF0ZSBnZXR0ZXIgLyBzZXR0ZXIgcGFpciBmb3IgYSBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGhcclxuXHRiaW5kOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIHRhcmdldE9iamVjdCA9IHRoaXMubm9kZSxcclxuXHRcdFx0cGFyc2VkUGF0aCA9IHRoaXMucGFyc2VkUGF0aCxcclxuXHJcblx0XHRcdG9iamVjdE5hbWUgPSBwYXJzZWRQYXRoLm9iamVjdE5hbWUsXHJcblx0XHRcdHByb3BlcnR5TmFtZSA9IHBhcnNlZFBhdGgucHJvcGVydHlOYW1lLFxyXG5cdFx0XHRwcm9wZXJ0eUluZGV4ID0gcGFyc2VkUGF0aC5wcm9wZXJ0eUluZGV4O1xyXG5cclxuXHRcdGlmICghdGFyZ2V0T2JqZWN0KSB7XHJcblxyXG5cdFx0XHR0YXJnZXRPYmplY3QgPSBQcm9wZXJ0eUJpbmRpbmcuZmluZE5vZGUodGhpcy5yb290Tm9kZSwgcGFyc2VkUGF0aC5ub2RlTmFtZSkgfHwgdGhpcy5yb290Tm9kZTtcclxuXHJcblx0XHRcdHRoaXMubm9kZSA9IHRhcmdldE9iamVjdDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2V0IGZhaWwgc3RhdGUgc28gd2UgY2FuIGp1c3QgJ3JldHVybicgb24gZXJyb3JcclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmF2YWlsYWJsZTtcclxuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtcclxuXHJcblx0XHQvLyBlbnN1cmUgdGhlcmUgaXMgYSB2YWx1ZSBub2RlXHJcblx0XHRpZiAoIXRhcmdldE9iamVjdCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIG5vZGUgZm9yIHRyYWNrOiAnICsgdGhpcy5wYXRoICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJyk7XHJcblx0XHRcdHJldHVybjtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKG9iamVjdE5hbWUpIHtcclxuXHJcblx0XHRcdHZhciBvYmplY3RJbmRleCA9IHBhcnNlZFBhdGgub2JqZWN0SW5kZXg7XHJcblxyXG5cdFx0XHQvLyBzcGVjaWFsIGNhc2VzIHdlcmUgd2UgbmVlZCB0byByZWFjaCBkZWVwZXIgaW50byB0aGUgaGllcmFyY2h5IHRvIGdldCB0aGUgZmFjZSBtYXRlcmlhbHMuLi4uXHJcblx0XHRcdHN3aXRjaCAob2JqZWN0TmFtZSkge1xyXG5cclxuXHRcdFx0XHRjYXNlICdtYXRlcmlhbHMnOlxyXG5cclxuXHRcdFx0XHRcdGlmICghdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAoIXRhcmdldE9iamVjdC5tYXRlcmlhbC5tYXRlcmlhbHMpIHtcclxuXHJcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsLm1hdGVyaWFscyBhcyBub2RlLm1hdGVyaWFsIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbHMgYXJyYXkuJywgdGhpcyk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscztcclxuXHJcblx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0Y2FzZSAnYm9uZXMnOlxyXG5cclxuXHRcdFx0XHRcdGlmICghdGFyZ2V0T2JqZWN0LnNrZWxldG9uKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBib25lcyBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBza2VsZXRvbi4nLCB0aGlzKTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHQvLyBwb3RlbnRpYWwgZnV0dXJlIG9wdGltaXphdGlvbjogc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyXHJcblx0XHRcdFx0XHQvLyBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXHJcblxyXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0LnNrZWxldG9uLmJvbmVzO1xyXG5cclxuXHRcdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0T2JqZWN0Lmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0T2JqZWN0W2ldLm5hbWUgPT09IG9iamVjdEluZGV4KSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdG9iamVjdEluZGV4ID0gaTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRhcmdldE9iamVjdFtvYmplY3ROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBvYmplY3ROYW1lIG9mIG5vZGUgdW5kZWZpbmVkLicsIHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdFtvYmplY3ROYW1lXTtcclxuXHJcblx0XHRcdH1cclxuXHJcblxyXG5cdFx0XHRpZiAob2JqZWN0SW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRpZiAodGFyZ2V0T2JqZWN0W29iamVjdEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gYmluZCB0byBvYmplY3RJbmRleCBvZiBvYmplY3ROYW1lLCBidXQgaXMgdW5kZWZpbmVkLicsIHRoaXMsIHRhcmdldE9iamVjdCk7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0W29iamVjdEluZGV4XTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gcmVzb2x2ZSBwcm9wZXJ0eVxyXG5cdFx0dmFyIG5vZGVQcm9wZXJ0eSA9IHRhcmdldE9iamVjdFtwcm9wZXJ0eU5hbWVdO1xyXG5cclxuXHRcdGlmIChub2RlUHJvcGVydHkgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0dmFyIG5vZGVOYW1lID0gcGFyc2VkUGF0aC5ub2RlTmFtZTtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBwcm9wZXJ0eSBmb3IgdHJhY2s6ICcgKyBub2RlTmFtZSArXHJcblx0XHRcdFx0Jy4nICsgcHJvcGVydHlOYW1lICsgJyBidXQgaXQgd2FzblxcJ3QgZm91bmQuJywgdGFyZ2V0T2JqZWN0KTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBkZXRlcm1pbmUgdmVyc2lvbmluZyBzY2hlbWVcclxuXHRcdHZhciB2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5vbmU7XHJcblxyXG5cdFx0dGhpcy50YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3Q7XHJcblxyXG5cdFx0aWYgKHRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSAhPT0gdW5kZWZpbmVkKSB7IC8vIG1hdGVyaWFsXHJcblxyXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5lZWRzVXBkYXRlO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAodGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgIT09IHVuZGVmaW5lZCkgeyAvLyBub2RlIHRyYW5zZm9ybVxyXG5cclxuXHRcdFx0dmVyc2lvbmluZyA9IHRoaXMuVmVyc2lvbmluZy5NYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBkZXRlcm1pbmUgaG93IHRoZSBwcm9wZXJ0eSBnZXRzIGJvdW5kXHJcblx0XHR2YXIgYmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtcclxuXHJcblx0XHRpZiAocHJvcGVydHlJbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHQvLyBhY2Nlc3MgYSBzdWIgZWxlbWVudCBvZiB0aGUgcHJvcGVydHkgYXJyYXkgKG9ubHkgcHJpbWl0aXZlcyBhcmUgc3VwcG9ydGVkIHJpZ2h0IG5vdylcclxuXHJcblx0XHRcdGlmIChwcm9wZXJ0eU5hbWUgPT09IFwibW9ycGhUYXJnZXRJbmZsdWVuY2VzXCIpIHtcclxuXHJcblx0XHRcdFx0Ly8gcG90ZW50aWFsIG9wdGltaXphdGlvbiwgc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyLCBhbmQgY29udmVydCB0aGUgaW50ZWdlciBzdHJpbmcgdG8gYSB0cnVlIGludGVnZXIuXHJcblxyXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cclxuXHRcdFx0XHRpZiAoIXRhcmdldE9iamVjdC5nZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1vcnBoVGFyZ2V0SW5mbHVlbmNlcyBiZWNhdXNlIG5vZGUgZG9lcyBub3QgaGF2ZSBhIGdlb21ldHJ5LicsIHRoaXMpO1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0YXJnZXRPYmplY3QuZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSkge1xyXG5cclxuXHRcdFx0XHRcdGlmICghdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcykge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLicsIHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb25baV0ubmFtZSA9PT0gcHJvcGVydHlJbmRleCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRwcm9wZXJ0eUluZGV4ID0gaTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdGlmICghdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cykge1xyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzIGJlY2F1c2Ugbm9kZSBkb2VzIG5vdCBoYXZlIGEgZ2VvbWV0cnkubW9ycGhUYXJnZXRzLicsIHRoaXMpO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaFRhcmdldHNbaV0ubmFtZSA9PT0gcHJvcGVydHlJbmRleCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRwcm9wZXJ0eUluZGV4ID0gaTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7XHJcblxyXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XHJcblx0XHRcdHRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7XHJcblxyXG5cdFx0fSBlbHNlIGlmIChub2RlUHJvcGVydHkuZnJvbUFycmF5ICE9PSB1bmRlZmluZWQgJiYgbm9kZVByb3BlcnR5LnRvQXJyYXkgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Ly8gbXVzdCB1c2UgY29weSBmb3IgT2JqZWN0M0QuRXVsZXIvUXVhdGVybmlvblxyXG5cclxuXHRcdFx0YmluZGluZ1R5cGUgPSB0aGlzLkJpbmRpbmdUeXBlLkhhc0Zyb21Ub0FycmF5O1xyXG5cclxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5ID0gbm9kZVByb3BlcnR5O1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShub2RlUHJvcGVydHkpKSB7XHJcblxyXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRW50aXJlQXJyYXk7XHJcblxyXG5cdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkgPSBub2RlUHJvcGVydHk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZWxlY3QgZ2V0dGVyIC8gc2V0dGVyXHJcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5HZXR0ZXJCeUJpbmRpbmdUeXBlW2JpbmRpbmdUeXBlXTtcclxuXHRcdHRoaXMuc2V0VmFsdWUgPSB0aGlzLlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nW2JpbmRpbmdUeXBlXVt2ZXJzaW9uaW5nXTtcclxuXHJcblx0fSxcclxuXHJcblx0dW5iaW5kOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5ub2RlID0gbnVsbDtcclxuXHJcblx0XHQvLyBiYWNrIHRvIHRoZSBwcm90b3R5cGUgdmVyc2lvbiBvZiBnZXRWYWx1ZSAvIHNldFZhbHVlXHJcblx0XHQvLyBub3RlOiBhdm9pZGluZyB0byBtdXRhdGUgdGhlIHNoYXBlIG9mICd0aGlzJyB2aWEgJ2RlbGV0ZSdcclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLl9nZXRWYWx1ZV91bmJvdW5kO1xyXG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYm91bmQ7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLy8hXFwgREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlICFcclxuT2JqZWN0LmFzc2lnbihQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7XHJcblxyXG5cdC8vIGluaXRpYWwgc3RhdGUgb2YgdGhlc2UgbWV0aG9kcyB0aGF0IGNhbGxzICdiaW5kJ1xyXG5cdF9nZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLmdldFZhbHVlLFxyXG5cdF9zZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLnNldFZhbHVlLFxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICpcclxuICogQSBncm91cCBvZiBvYmplY3RzIHRoYXQgcmVjZWl2ZXMgYSBzaGFyZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gKlxyXG4gKiBVc2FnZTpcclxuICpcclxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcclxuICogICAgY29uc3RydWN0b3Igb3IgdGhlIC5jbGlwQWN0aW9uIG1ldGhvZCBvZiBBbmltYXRpb25NaXhlci5cclxuICpcclxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cclxuICpcclxuICogIC0gWW91IGNhbiBhbHNvIGFkZCBhbmQgcmVtb3ZlIG9iamVjdHMgbGF0ZXIgd2hlbiB0aGUgbWl4ZXJcclxuICogICAgaXMgcnVubmluZy5cclxuICpcclxuICogTm90ZTpcclxuICpcclxuICogICAgT2JqZWN0cyBvZiB0aGlzIGNsYXNzIGFwcGVhciBhcyBvbmUgb2JqZWN0IHRvIHRoZSBtaXhlcixcclxuICogICAgc28gY2FjaGUgY29udHJvbCBvZiB0aGUgaW5kaXZpZHVhbCBvYmplY3RzIG11c3QgYmUgZG9uZVxyXG4gKiAgICBvbiB0aGUgZ3JvdXAuXHJcbiAqXHJcbiAqIExpbWl0YXRpb246XHJcbiAqXHJcbiAqICAtIFRoZSBhbmltYXRlZCBwcm9wZXJ0aWVzIG11c3QgYmUgY29tcGF0aWJsZSBhbW9uZyB0aGVcclxuICogICAgYWxsIG9iamVjdHMgaW4gdGhlIGdyb3VwLlxyXG4gKlxyXG4gKiAgLSBBIHNpbmdsZSBwcm9wZXJ0eSBjYW4gZWl0aGVyIGJlIGNvbnRyb2xsZWQgdGhyb3VnaCBhXHJcbiAqICAgIHRhcmdldCBncm91cCBvciBkaXJlY3RseSwgYnV0IG5vdCBib3RoLlxyXG4gKlxyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uT2JqZWN0R3JvdXAoKSB7XHJcblxyXG5cdHRoaXMudXVpZCA9IF9NYXRoLmdlbmVyYXRlVVVJRCgpO1xyXG5cclxuXHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcclxuXHR0aGlzLl9vYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuXHJcblx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSAwOyAvLyB0aHJlc2hvbGRcclxuXHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcclxuXHJcblx0dmFyIGluZGljZXMgPSB7fTtcclxuXHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXHJcblxyXG5cdGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0aW5kaWNlc1thcmd1bWVudHNbaV0udXVpZF0gPSBpO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMuX3BhdGhzID0gW107IC8vIGluc2lkZTogc3RyaW5nXHJcblx0dGhpcy5fcGFyc2VkUGF0aHMgPSBbXTsgLy8gaW5zaWRlOiB7IHdlIGRvbid0IGNhcmUsIGhlcmUgfVxyXG5cdHRoaXMuX2JpbmRpbmdzID0gW107IC8vIGluc2lkZTogQXJyYXk8IFByb3BlcnR5QmluZGluZyA+XHJcblx0dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoID0ge307IC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcclxuXHJcblx0dmFyIHNjb3BlID0gdGhpcztcclxuXHJcblx0dGhpcy5zdGF0cyA9IHtcclxuXHJcblx0XHRvYmplY3RzOiB7XHJcblx0XHRcdGdldCB0b3RhbCgpIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcclxuXHJcblx0XHRcdH0sXHJcblx0XHRcdGdldCBpblVzZSgpIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHRoaXMudG90YWwgLSBzY29wZS5uQ2FjaGVkT2JqZWN0c187XHJcblxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihBbmltYXRpb25PYmplY3RHcm91cC5wcm90b3R5cGUsIHtcclxuXHJcblx0aXNBbmltYXRpb25PYmplY3RHcm91cDogdHJ1ZSxcclxuXHJcblx0YWRkOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxyXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxyXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxyXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcclxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcclxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoLFxyXG5cdFx0XHRrbm93bk9iamVjdCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0dmFyIG9iamVjdCA9IGFyZ3VtZW50c1tpXSxcclxuXHRcdFx0XHR1dWlkID0gb2JqZWN0LnV1aWQsXHJcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEW3V1aWRdO1xyXG5cclxuXHRcdFx0aWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0Ly8gdW5rbm93biBvYmplY3QgLT4gYWRkIGl0IHRvIHRoZSBBQ1RJVkUgcmVnaW9uXHJcblxyXG5cdFx0XHRcdGluZGV4ID0gbk9iamVjdHMrKztcclxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEW3V1aWRdID0gaW5kZXg7XHJcblx0XHRcdFx0b2JqZWN0cy5wdXNoKG9iamVjdCk7XHJcblxyXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsraikge1xyXG5cclxuXHRcdFx0XHRcdGJpbmRpbmdzW2pdLnB1c2gobmV3IFByb3BlcnR5QmluZGluZyhvYmplY3QsIHBhdGhzW2pdLCBwYXJzZWRQYXRoc1tqXSkpO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKGluZGV4IDwgbkNhY2hlZE9iamVjdHMpIHtcclxuXHJcblx0XHRcdFx0a25vd25PYmplY3QgPSBvYmplY3RzW2luZGV4XTtcclxuXHJcblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cclxuXHJcblx0XHRcdFx0dmFyIGZpcnN0QWN0aXZlSW5kZXggPSAtLW5DYWNoZWRPYmplY3RzLFxyXG5cdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbZmlyc3RBY3RpdmVJbmRleF07XHJcblxyXG5cdFx0XHRcdGluZGljZXNCeVVVSURbbGFzdENhY2hlZE9iamVjdC51dWlkXSA9IGluZGV4O1xyXG5cdFx0XHRcdG9iamVjdHNbaW5kZXhdID0gbGFzdENhY2hlZE9iamVjdDtcclxuXHJcblx0XHRcdFx0aW5kaWNlc0J5VVVJRFt1dWlkXSA9IGZpcnN0QWN0aXZlSW5kZXg7XHJcblx0XHRcdFx0b2JqZWN0c1tmaXJzdEFjdGl2ZUluZGV4XSA9IG9iamVjdDtcclxuXHJcblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKytqKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzW2pdLFxyXG5cdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoW2ZpcnN0QWN0aXZlSW5kZXhdLFxyXG5cdFx0XHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NGb3JQYXRoW2luZGV4XTtcclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbaW5kZXhdID0gbGFzdENhY2hlZDtcclxuXHJcblx0XHRcdFx0XHRpZiAoYmluZGluZyA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBzaW5jZSB3ZSBkbyBub3QgYm90aGVyIHRvIGNyZWF0ZSBuZXcgYmluZGluZ3NcclxuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcclxuXHRcdFx0XHRcdFx0Ly8gb3IgbWF5IG5vdCBleGlzdFxyXG5cclxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcob2JqZWN0LCBwYXRoc1tqXSwgcGFyc2VkUGF0aHNbal0pO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbZmlyc3RBY3RpdmVJbmRleF0gPSBiaW5kaW5nO1xyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKG9iamVjdHNbaW5kZXhdICE9PSBrbm93bk9iamVjdCkge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5BbmltYXRpb25PYmplY3RHcm91cDogRGlmZmVyZW50IG9iamVjdHMgd2l0aCB0aGUgc2FtZSBVVUlEICcgK1xyXG5cdFx0XHRcdFx0J2RldGVjdGVkLiBDbGVhbiB0aGUgY2FjaGVzIG9yIHJlY3JlYXRlIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgd2hlbiByZWxvYWRpbmcgc2NlbmVzLicpO1xyXG5cclxuXHRcdFx0fSAvLyBlbHNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSB3aGVyZSB3ZSB3YW50IGl0IHRvIGJlXHJcblxyXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXHJcblxyXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcclxuXHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxyXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxyXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzW2ldLFxyXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcclxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbdXVpZF07XHJcblxyXG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+PSBuQ2FjaGVkT2JqZWN0cykge1xyXG5cclxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCBpbnRvIHRoZSBDQUNIRUQgcmVnaW9uXHJcblxyXG5cdFx0XHRcdHZhciBsYXN0Q2FjaGVkSW5kZXggPSBuQ2FjaGVkT2JqZWN0cysrLFxyXG5cdFx0XHRcdFx0Zmlyc3RBY3RpdmVPYmplY3QgPSBvYmplY3RzW2xhc3RDYWNoZWRJbmRleF07XHJcblxyXG5cdFx0XHRcdGluZGljZXNCeVVVSURbZmlyc3RBY3RpdmVPYmplY3QudXVpZF0gPSBpbmRleDtcclxuXHRcdFx0XHRvYmplY3RzW2luZGV4XSA9IGZpcnN0QWN0aXZlT2JqZWN0O1xyXG5cclxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEW3V1aWRdID0gbGFzdENhY2hlZEluZGV4O1xyXG5cdFx0XHRcdG9iamVjdHNbbGFzdENhY2hlZEluZGV4XSA9IG9iamVjdDtcclxuXHJcblx0XHRcdFx0Ly8gYWNjb3VudGluZyBpcyBkb25lLCBub3cgZG8gdGhlIHNhbWUgZm9yIGFsbCBiaW5kaW5nc1xyXG5cclxuXHRcdFx0XHRmb3IgKHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKytqKSB7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGJpbmRpbmdzRm9yUGF0aCA9IGJpbmRpbmdzW2pdLFxyXG5cdFx0XHRcdFx0XHRmaXJzdEFjdGl2ZSA9IGJpbmRpbmdzRm9yUGF0aFtsYXN0Q2FjaGVkSW5kZXhdLFxyXG5cdFx0XHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NGb3JQYXRoW2luZGV4XTtcclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbaW5kZXhdID0gZmlyc3RBY3RpdmU7XHJcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbbGFzdENhY2hlZEluZGV4XSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9IC8vIGZvciBhcmd1bWVudHNcclxuXHJcblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZW1vdmUgJiBmb3JnZXRcclxuXHR1bmNhY2hlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxyXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxyXG5cdFx0XHRuQ2FjaGVkT2JqZWN0cyA9IHRoaXMubkNhY2hlZE9iamVjdHNfLFxyXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzW2ldLFxyXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcclxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbdXVpZF07XHJcblxyXG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRkZWxldGUgaW5kaWNlc0J5VVVJRFt1dWlkXTtcclxuXHJcblx0XHRcdFx0aWYgKGluZGV4IDwgbkNhY2hlZE9iamVjdHMpIHtcclxuXHJcblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgY2FjaGVkLCBzaHJpbmsgdGhlIENBQ0hFRCByZWdpb25cclxuXHJcblx0XHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tbkNhY2hlZE9iamVjdHMsXHJcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzW2ZpcnN0QWN0aXZlSW5kZXhdLFxyXG5cdFx0XHRcdFx0XHRsYXN0SW5kZXggPSAtLW5PYmplY3RzLFxyXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1tsYXN0SW5kZXhdO1xyXG5cclxuXHRcdFx0XHRcdC8vIGxhc3QgY2FjaGVkIG9iamVjdCB0YWtlcyB0aGlzIG9iamVjdCdzIHBsYWNlXHJcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEW2xhc3RDYWNoZWRPYmplY3QudXVpZF0gPSBpbmRleDtcclxuXHRcdFx0XHRcdG9iamVjdHNbaW5kZXhdID0gbGFzdENhY2hlZE9iamVjdDtcclxuXHJcblx0XHRcdFx0XHQvLyBsYXN0IG9iamVjdCBnb2VzIHRvIHRoZSBhY3RpdmF0ZWQgc2xvdCBhbmQgcG9wXHJcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEW2xhc3RPYmplY3QudXVpZF0gPSBmaXJzdEFjdGl2ZUluZGV4O1xyXG5cdFx0XHRcdFx0b2JqZWN0c1tmaXJzdEFjdGl2ZUluZGV4XSA9IGxhc3RPYmplY3Q7XHJcblx0XHRcdFx0XHRvYmplY3RzLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKytqKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3Nbal0sXHJcblx0XHRcdFx0XHRcdFx0bGFzdENhY2hlZCA9IGJpbmRpbmdzRm9yUGF0aFtmaXJzdEFjdGl2ZUluZGV4XSxcclxuXHRcdFx0XHRcdFx0XHRsYXN0ID0gYmluZGluZ3NGb3JQYXRoW2xhc3RJbmRleF07XHJcblxyXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbaW5kZXhdID0gbGFzdENhY2hlZDtcclxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoW2ZpcnN0QWN0aXZlSW5kZXhdID0gbGFzdDtcclxuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wXHJcblxyXG5cdFx0XHRcdFx0dmFyIGxhc3RJbmRleCA9IC0tbk9iamVjdHMsXHJcblx0XHRcdFx0XHRcdGxhc3RPYmplY3QgPSBvYmplY3RzW2xhc3RJbmRleF07XHJcblxyXG5cdFx0XHRcdFx0aW5kaWNlc0J5VVVJRFtsYXN0T2JqZWN0LnV1aWRdID0gaW5kZXg7XHJcblx0XHRcdFx0XHRvYmplY3RzW2luZGV4XSA9IGxhc3RPYmplY3Q7XHJcblx0XHRcdFx0XHRvYmplY3RzLnBvcCgpO1xyXG5cclxuXHRcdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcclxuXHJcblx0XHRcdFx0XHRmb3IgKHZhciBqID0gMCwgbSA9IG5CaW5kaW5nczsgaiAhPT0gbTsgKytqKSB7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3Nbal07XHJcblxyXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbaW5kZXhdID0gYmluZGluZ3NGb3JQYXRoW2xhc3RJbmRleF07XHJcblx0XHRcdFx0XHRcdGJpbmRpbmdzRm9yUGF0aC5wb3AoKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0gLy8gY2FjaGVkIG9yIGFjdGl2ZVxyXG5cclxuXHRcdFx0fSAvLyBpZiBvYmplY3QgaXMga25vd25cclxuXHJcblx0XHR9IC8vIGZvciBhcmd1bWVudHNcclxuXHJcblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBJbnRlcm5hbCBpbnRlcmZhY2UgdXNlZCBieSBiZWZyaWVuZGVkIFByb3BlcnR5QmluZGluZy5Db21wb3NpdGU6XHJcblxyXG5cdHN1YnNjcmliZV86IGZ1bmN0aW9uIChwYXRoLCBwYXJzZWRQYXRoKSB7XHJcblxyXG5cdFx0Ly8gcmV0dXJucyBhbiBhcnJheSBvZiBiaW5kaW5ncyBmb3IgdGhlIGdpdmVuIHBhdGggdGhhdCBpcyBjaGFuZ2VkXHJcblx0XHQvLyBhY2NvcmRpbmcgdG8gdGhlIGNvbnRhaW5lZCBvYmplY3RzIGluIHRoZSBncm91cFxyXG5cclxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxyXG5cdFx0XHRpbmRleCA9IGluZGljZXNCeVBhdGhbcGF0aF0sXHJcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XHJcblxyXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHsgcmV0dXJuIGJpbmRpbmdzW2luZGV4XTsgfVxyXG5cclxuXHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxyXG5cdFx0XHRwYXJzZWRQYXRocyA9IHRoaXMuX3BhcnNlZFBhdGhzLFxyXG5cdFx0XHRvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcclxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcclxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcclxuXHRcdFx0YmluZGluZ3NGb3JQYXRoID0gbmV3IEFycmF5KG5PYmplY3RzKTtcclxuXHJcblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcclxuXHJcblx0XHRpbmRpY2VzQnlQYXRoW3BhdGhdID0gaW5kZXg7XHJcblxyXG5cdFx0cGF0aHMucHVzaChwYXRoKTtcclxuXHRcdHBhcnNlZFBhdGhzLnB1c2gocGFyc2VkUGF0aCk7XHJcblx0XHRiaW5kaW5ncy5wdXNoKGJpbmRpbmdzRm9yUGF0aCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IG5DYWNoZWRPYmplY3RzLCBuID0gb2JqZWN0cy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0dmFyIG9iamVjdCA9IG9iamVjdHNbaV07XHJcblx0XHRcdGJpbmRpbmdzRm9yUGF0aFtpXSA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcob2JqZWN0LCBwYXRoLCBwYXJzZWRQYXRoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGJpbmRpbmdzRm9yUGF0aDtcclxuXHJcblx0fSxcclxuXHJcblx0dW5zdWJzY3JpYmVfOiBmdW5jdGlvbiAocGF0aCkge1xyXG5cclxuXHRcdC8vIHRlbGxzIHRoZSBncm91cCB0byBmb3JnZXQgYWJvdXQgYSBwcm9wZXJ0eSBwYXRoIGFuZCBubyBsb25nZXJcclxuXHRcdC8vIHVwZGF0ZSB0aGUgYXJyYXkgcHJldmlvdXNseSBvYnRhaW5lZCB3aXRoICdzdWJzY3JpYmVfJ1xyXG5cclxuXHRcdHZhciBpbmRpY2VzQnlQYXRoID0gdGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoLFxyXG5cdFx0XHRpbmRleCA9IGluZGljZXNCeVBhdGhbcGF0aF07XHJcblxyXG5cdFx0aWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxyXG5cdFx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXHJcblx0XHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0XHRsYXN0QmluZGluZ3NJbmRleCA9IGJpbmRpbmdzLmxlbmd0aCAtIDEsXHJcblx0XHRcdFx0bGFzdEJpbmRpbmdzID0gYmluZGluZ3NbbGFzdEJpbmRpbmdzSW5kZXhdLFxyXG5cdFx0XHRcdGxhc3RCaW5kaW5nc1BhdGggPSBwYXRoW2xhc3RCaW5kaW5nc0luZGV4XTtcclxuXHJcblx0XHRcdGluZGljZXNCeVBhdGhbbGFzdEJpbmRpbmdzUGF0aF0gPSBpbmRleDtcclxuXHJcblx0XHRcdGJpbmRpbmdzW2luZGV4XSA9IGxhc3RCaW5kaW5ncztcclxuXHRcdFx0YmluZGluZ3MucG9wKCk7XHJcblxyXG5cdFx0XHRwYXJzZWRQYXRoc1tpbmRleF0gPSBwYXJzZWRQYXRoc1tsYXN0QmluZGluZ3NJbmRleF07XHJcblx0XHRcdHBhcnNlZFBhdGhzLnBvcCgpO1xyXG5cclxuXHRcdFx0cGF0aHNbaW5kZXhdID0gcGF0aHNbbGFzdEJpbmRpbmdzSW5kZXhdO1xyXG5cdFx0XHRwYXRocy5wb3AoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEFjdGlvbiBwcm92aWRlZCBieSBBbmltYXRpb25NaXhlciBmb3Igc2NoZWR1bGluZyBjbGlwIHBsYXliYWNrIG9uIHNwZWNpZmljXHJcbiAqIG9iamVjdHMuXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uQWN0aW9uKG1peGVyLCBjbGlwLCBsb2NhbFJvb3QpIHtcclxuXHJcblx0dGhpcy5fbWl4ZXIgPSBtaXhlcjtcclxuXHR0aGlzLl9jbGlwID0gY2xpcDtcclxuXHR0aGlzLl9sb2NhbFJvb3QgPSBsb2NhbFJvb3QgfHwgbnVsbDtcclxuXHJcblx0dmFyIHRyYWNrcyA9IGNsaXAudHJhY2tzLFxyXG5cdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXHJcblx0XHRpbnRlcnBvbGFudHMgPSBuZXcgQXJyYXkoblRyYWNrcyk7XHJcblxyXG5cdHZhciBpbnRlcnBvbGFudFNldHRpbmdzID0ge1xyXG5cdFx0ZW5kaW5nU3RhcnQ6IFplcm9DdXJ2YXR1cmVFbmRpbmcsXHJcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcclxuXHR9O1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKytpKSB7XHJcblxyXG5cdFx0dmFyIGludGVycG9sYW50ID0gdHJhY2tzW2ldLmNyZWF0ZUludGVycG9sYW50KG51bGwpO1xyXG5cdFx0aW50ZXJwb2xhbnRzW2ldID0gaW50ZXJwb2xhbnQ7XHJcblx0XHRpbnRlcnBvbGFudC5zZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncyA9IGludGVycG9sYW50U2V0dGluZ3M7XHJcblxyXG5cdHRoaXMuX2ludGVycG9sYW50cyA9IGludGVycG9sYW50czsgLy8gYm91bmQgYnkgdGhlIG1peGVyXHJcblxyXG5cdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXHJcblx0dGhpcy5fcHJvcGVydHlCaW5kaW5ncyA9IG5ldyBBcnJheShuVHJhY2tzKTtcclxuXHJcblx0dGhpcy5fY2FjaGVJbmRleCA9IG51bGw7IC8vIGZvciB0aGUgbWVtb3J5IG1hbmFnZXJcclxuXHR0aGlzLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxyXG5cclxuXHR0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCA9IG51bGw7XHJcblx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xyXG5cclxuXHR0aGlzLmxvb3AgPSBMb29wUmVwZWF0O1xyXG5cdHRoaXMuX2xvb3BDb3VudCA9IC0gMTtcclxuXHJcblx0Ly8gZ2xvYmFsIG1peGVyIHRpbWUgd2hlbiB0aGUgYWN0aW9uIGlzIHRvIGJlIHN0YXJ0ZWRcclxuXHQvLyBpdCdzIHNldCBiYWNrIHRvICdudWxsJyB1cG9uIHN0YXJ0IG9mIHRoZSBhY3Rpb25cclxuXHR0aGlzLl9zdGFydFRpbWUgPSBudWxsO1xyXG5cclxuXHQvLyBzY2FsZWQgbG9jYWwgdGltZSBvZiB0aGUgYWN0aW9uXHJcblx0Ly8gZ2V0cyBjbGFtcGVkIG9yIHdyYXBwZWQgdG8gMC4uY2xpcC5kdXJhdGlvbiBhY2NvcmRpbmcgdG8gbG9vcFxyXG5cdHRoaXMudGltZSA9IDA7XHJcblxyXG5cdHRoaXMudGltZVNjYWxlID0gMTtcclxuXHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSAxO1xyXG5cclxuXHR0aGlzLndlaWdodCA9IDE7XHJcblx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gMTtcclxuXHJcblx0dGhpcy5yZXBldGl0aW9ucyA9IEluZmluaXR5OyAvLyBuby4gb2YgcmVwZXRpdGlvbnMgd2hlbiBsb29waW5nXHJcblxyXG5cdHRoaXMucGF1c2VkID0gZmFsc2U7IC8vIHRydWUgLT4gemVybyBlZmZlY3RpdmUgdGltZSBzY2FsZVxyXG5cdHRoaXMuZW5hYmxlZCA9IHRydWU7IC8vIGZhbHNlIC0+IHplcm8gZWZmZWN0aXZlIHdlaWdodFxyXG5cclxuXHR0aGlzLmNsYW1wV2hlbkZpbmlzaGVkID0gZmFsc2U7Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xyXG5cclxuXHR0aGlzLnplcm9TbG9wZUF0U3RhcnQgPSB0cnVlOy8vIGZvciBzbW9vdGggaW50ZXJwb2xhdGlvbiB3L28gc2VwYXJhdGVcclxuXHR0aGlzLnplcm9TbG9wZUF0RW5kID0gdHJ1ZTsvLyBjbGlwcyBmb3Igc3RhcnQsIGxvb3AgYW5kIGVuZFxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihBbmltYXRpb25BY3Rpb24ucHJvdG90eXBlLCB7XHJcblxyXG5cdC8vIFN0YXRlICYgU2NoZWR1bGluZ1xyXG5cclxuXHRwbGF5OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5fbWl4ZXIuX2FjdGl2YXRlQWN0aW9uKHRoaXMpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0dGhpcy5fbWl4ZXIuX2RlYWN0aXZhdGVBY3Rpb24odGhpcyk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMucmVzZXQoKTtcclxuXHJcblx0fSxcclxuXHJcblx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLnRpbWUgPSAwOyAvLyByZXN0YXJ0IGNsaXBcclxuXHRcdHRoaXMuX2xvb3BDb3VudCA9IC0gMTsvLyBmb3JnZXQgcHJldmlvdXMgbG9vcHNcclxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7Ly8gZm9yZ2V0IHNjaGVkdWxpbmdcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCkuc3RvcFdhcnBpbmcoKTtcclxuXHJcblx0fSxcclxuXHJcblx0aXNSdW5uaW5nOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZW5hYmxlZCAmJiAhdGhpcy5wYXVzZWQgJiYgdGhpcy50aW1lU2NhbGUgIT09IDAgJiZcclxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID09PSBudWxsICYmIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbih0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gcmV0dXJuIHRydWUgd2hlbiBwbGF5IGhhcyBiZWVuIGNhbGxlZFxyXG5cdGlzU2NoZWR1bGVkOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbih0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0c3RhcnRBdDogZnVuY3Rpb24gKHRpbWUpIHtcclxuXHJcblx0XHR0aGlzLl9zdGFydFRpbWUgPSB0aW1lO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRMb29wOiBmdW5jdGlvbiAobW9kZSwgcmVwZXRpdGlvbnMpIHtcclxuXHJcblx0XHR0aGlzLmxvb3AgPSBtb2RlO1xyXG5cdFx0dGhpcy5yZXBldGl0aW9ucyA9IHJlcGV0aXRpb25zO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBXZWlnaHRcclxuXHJcblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcclxuXHQvLyBhbHRob3VnaCAuZW5hYmxlZCA9IGZhbHNlIHlpZWxkcyBhbiBlZmZlY3RpdmUgd2VpZ2h0IG9mIHplcm8sIHRoaXNcclxuXHQvLyBtZXRob2QgZG9lcyAqbm90KiBjaGFuZ2UgLmVuYWJsZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXHJcblx0c2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAod2VpZ2h0KSB7XHJcblxyXG5cdFx0dGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcblxyXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxyXG5cdFx0dGhpcy5fZWZmZWN0aXZlV2VpZ2h0ID0gdGhpcy5lbmFibGVkID8gd2VpZ2h0IDogMDtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIHJldHVybiB0aGUgd2VpZ2h0IGNvbnNpZGVyaW5nIGZhZGluZyBhbmQgLmVuYWJsZWRcclxuXHRnZXRFZmZlY3RpdmVXZWlnaHQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRmYWRlSW46IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyhkdXJhdGlvbiwgMCwgMSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGZhZGVPdXQ6IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyhkdXJhdGlvbiwgMSwgMCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNyb3NzRmFkZUZyb206IGZ1bmN0aW9uIChmYWRlT3V0QWN0aW9uLCBkdXJhdGlvbiwgd2FycCkge1xyXG5cclxuXHRcdGZhZGVPdXRBY3Rpb24uZmFkZU91dChkdXJhdGlvbik7XHJcblx0XHR0aGlzLmZhZGVJbihkdXJhdGlvbik7XHJcblxyXG5cdFx0aWYgKHdhcnApIHtcclxuXHJcblx0XHRcdHZhciBmYWRlSW5EdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb24sXHJcblx0XHRcdFx0ZmFkZU91dER1cmF0aW9uID0gZmFkZU91dEFjdGlvbi5fY2xpcC5kdXJhdGlvbixcclxuXHJcblx0XHRcdFx0c3RhcnRFbmRSYXRpbyA9IGZhZGVPdXREdXJhdGlvbiAvIGZhZGVJbkR1cmF0aW9uLFxyXG5cdFx0XHRcdGVuZFN0YXJ0UmF0aW8gPSBmYWRlSW5EdXJhdGlvbiAvIGZhZGVPdXREdXJhdGlvbjtcclxuXHJcblx0XHRcdGZhZGVPdXRBY3Rpb24ud2FycCgxLjAsIHN0YXJ0RW5kUmF0aW8sIGR1cmF0aW9uKTtcclxuXHRcdFx0dGhpcy53YXJwKGVuZFN0YXJ0UmF0aW8sIDEuMCwgZHVyYXRpb24pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y3Jvc3NGYWRlVG86IGZ1bmN0aW9uIChmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwKSB7XHJcblxyXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKHRoaXMsIGR1cmF0aW9uLCB3YXJwKTtcclxuXHJcblx0fSxcclxuXHJcblx0c3RvcEZhZGluZzogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB3ZWlnaHRJbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xyXG5cclxuXHRcdGlmICh3ZWlnaHRJbnRlcnBvbGFudCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xyXG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQod2VpZ2h0SW50ZXJwb2xhbnQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gVGltZSBTY2FsZSBDb250cm9sXHJcblxyXG5cdC8vIHNldCB0aGUgdGltZSBzY2FsZSBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIHdhcnBpbmdcclxuXHQvLyBhbHRob3VnaCAucGF1c2VkID0gdHJ1ZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHRpbWUgc2NhbGUgb2YgemVybywgdGhpc1xyXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAucGF1c2VkLCBiZWNhdXNlIGl0IHdvdWxkIGJlIGNvbmZ1c2luZ1xyXG5cdHNldEVmZmVjdGl2ZVRpbWVTY2FsZTogZnVuY3Rpb24gKHRpbWVTY2FsZSkge1xyXG5cclxuXHRcdHRoaXMudGltZVNjYWxlID0gdGltZVNjYWxlO1xyXG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gdGhpcy5wYXVzZWQgPyAwIDogdGltZVNjYWxlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIHJldHVybiB0aGUgdGltZSBzY2FsZSBjb25zaWRlcmluZyB3YXJwaW5nIGFuZCAucGF1c2VkXHJcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RHVyYXRpb246IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG5cclxuXHRcdHRoaXMudGltZVNjYWxlID0gdGhpcy5fY2xpcC5kdXJhdGlvbiAvIGR1cmF0aW9uO1xyXG5cclxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdHN5bmNXaXRoOiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcblxyXG5cdFx0dGhpcy50aW1lID0gYWN0aW9uLnRpbWU7XHJcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc3RvcFdhcnBpbmcoKTtcclxuXHJcblx0fSxcclxuXHJcblx0aGFsdDogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMud2FycCh0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUsIDAsIGR1cmF0aW9uKTtcclxuXHJcblx0fSxcclxuXHJcblx0d2FycDogZnVuY3Rpb24gKHN0YXJ0VGltZVNjYWxlLCBlbmRUaW1lU2NhbGUsIGR1cmF0aW9uKSB7XHJcblxyXG5cdFx0dmFyIG1peGVyID0gdGhpcy5fbWl4ZXIsIG5vdyA9IG1peGVyLnRpbWUsXHJcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsXHJcblxyXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcclxuXHJcblx0XHRpZiAoaW50ZXJwb2xhbnQgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdGludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTtcclxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHRpbWVzID0gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zLFxyXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XHJcblxyXG5cdFx0dGltZXNbMF0gPSBub3c7XHJcblx0XHR0aW1lc1sxXSA9IG5vdyArIGR1cmF0aW9uO1xyXG5cclxuXHRcdHZhbHVlc1swXSA9IHN0YXJ0VGltZVNjYWxlIC8gdGltZVNjYWxlO1xyXG5cdFx0dmFsdWVzWzFdID0gZW5kVGltZVNjYWxlIC8gdGltZVNjYWxlO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzdG9wV2FycGluZzogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xyXG5cclxuXHRcdGlmICh0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xyXG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQodGltZVNjYWxlSW50ZXJwb2xhbnQpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gT2JqZWN0IEFjY2Vzc29yc1xyXG5cclxuXHRnZXRNaXhlcjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0Q2xpcDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xyXG5cclxuXHR9LFxyXG5cclxuXHRnZXRSb290OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gSW50ZXJuYVxyXG5cclxuXHRfdXBkYXRlOiBmdW5jdGlvbiAodGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXgpIHtcclxuXHJcblx0XHQvLyBjYWxsZWQgYnkgdGhlIG1peGVyXHJcblxyXG5cdFx0aWYgKCF0aGlzLmVuYWJsZWQpIHtcclxuXHJcblx0XHRcdC8vIGNhbGwgLl91cGRhdGVXZWlnaHQoKSB0byB1cGRhdGUgLl9lZmZlY3RpdmVXZWlnaHRcclxuXHJcblx0XHRcdHRoaXMuX3VwZGF0ZVdlaWdodCh0aW1lKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc3RhcnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lO1xyXG5cclxuXHRcdGlmIChzdGFydFRpbWUgIT09IG51bGwpIHtcclxuXHJcblx0XHRcdC8vIGNoZWNrIGZvciBzY2hlZHVsZWQgc3RhcnQgb2YgYWN0aW9uXHJcblxyXG5cdFx0XHR2YXIgdGltZVJ1bm5pbmcgPSAodGltZSAtIHN0YXJ0VGltZSkgKiB0aW1lRGlyZWN0aW9uO1xyXG5cdFx0XHRpZiAodGltZVJ1bm5pbmcgPCAwIHx8IHRpbWVEaXJlY3Rpb24gPT09IDApIHtcclxuXHJcblx0XHRcdFx0cmV0dXJuOyAvLyB5ZXQgdG8gY29tZSAvIGRvbid0IGRlY2lkZSB3aGVuIGRlbHRhID0gMFxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gc3RhcnRcclxuXHJcblx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7IC8vIHVuc2NoZWR1bGVcclxuXHRcdFx0ZGVsdGFUaW1lID0gdGltZURpcmVjdGlvbiAqIHRpbWVSdW5uaW5nO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyBhcHBseSB0aW1lIHNjYWxlIGFuZCBhZHZhbmNlIHRpbWVcclxuXHJcblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKHRpbWUpO1xyXG5cdFx0dmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZShkZWx0YVRpbWUpO1xyXG5cclxuXHRcdC8vIG5vdGU6IF91cGRhdGVUaW1lIG1heSBkaXNhYmxlIHRoZSBhY3Rpb24gcmVzdWx0aW5nIGluXHJcblx0XHQvLyBhbiBlZmZlY3RpdmUgd2VpZ2h0IG9mIDBcclxuXHJcblx0XHR2YXIgd2VpZ2h0ID0gdGhpcy5fdXBkYXRlV2VpZ2h0KHRpbWUpO1xyXG5cclxuXHRcdGlmICh3ZWlnaHQgPiAwKSB7XHJcblxyXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xyXG5cdFx0XHR2YXIgcHJvcGVydHlNaXhlcnMgPSB0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIG0gPSBpbnRlcnBvbGFudHMubGVuZ3RoOyBqICE9PSBtOyArK2opIHtcclxuXHJcblx0XHRcdFx0aW50ZXJwb2xhbnRzW2pdLmV2YWx1YXRlKGNsaXBUaW1lKTtcclxuXHRcdFx0XHRwcm9wZXJ0eU1peGVyc1tqXS5hY2N1bXVsYXRlKGFjY3VJbmRleCwgd2VpZ2h0KTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdH0sXHJcblxyXG5cdF91cGRhdGVXZWlnaHQ6IGZ1bmN0aW9uICh0aW1lKSB7XHJcblxyXG5cdFx0dmFyIHdlaWdodCA9IDA7XHJcblxyXG5cdFx0aWYgKHRoaXMuZW5hYmxlZCkge1xyXG5cclxuXHRcdFx0d2VpZ2h0ID0gdGhpcy53ZWlnaHQ7XHJcblx0XHRcdHZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xyXG5cclxuXHRcdFx0aWYgKGludGVycG9sYW50ICE9PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdHZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUodGltZSlbMF07XHJcblxyXG5cdFx0XHRcdHdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlO1xyXG5cclxuXHRcdFx0XHRpZiAodGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sxXSkge1xyXG5cclxuXHRcdFx0XHRcdHRoaXMuc3RvcEZhZGluZygpO1xyXG5cclxuXHRcdFx0XHRcdGlmIChpbnRlcnBvbGFudFZhbHVlID09PSAwKSB7XHJcblxyXG5cdFx0XHRcdFx0XHQvLyBmYWRlZCBvdXQsIGRpc2FibGVcclxuXHRcdFx0XHRcdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHdlaWdodDtcclxuXHRcdHJldHVybiB3ZWlnaHQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdF91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICh0aW1lKSB7XHJcblxyXG5cdFx0dmFyIHRpbWVTY2FsZSA9IDA7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnBhdXNlZCkge1xyXG5cclxuXHRcdFx0dGltZVNjYWxlID0gdGhpcy50aW1lU2NhbGU7XHJcblxyXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnQgPSB0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudDtcclxuXHJcblx0XHRcdGlmIChpbnRlcnBvbGFudCAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0XHR2YXIgaW50ZXJwb2xhbnRWYWx1ZSA9IGludGVycG9sYW50LmV2YWx1YXRlKHRpbWUpWzBdO1xyXG5cclxuXHRcdFx0XHR0aW1lU2NhbGUgKj0gaW50ZXJwb2xhbnRWYWx1ZTtcclxuXHJcblx0XHRcdFx0aWYgKHRpbWUgPiBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnNbMV0pIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKHRpbWVTY2FsZSA9PT0gMCkge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXHJcblx0XHRcdFx0XHRcdHRoaXMucGF1c2VkID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0Ly8gd2FycCBkb25lIC0gYXBwbHkgZmluYWwgdGltZSBzY2FsZVxyXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlID0gdGltZVNjYWxlO1xyXG5cdFx0cmV0dXJuIHRpbWVTY2FsZTtcclxuXHJcblx0fSxcclxuXHJcblx0X3VwZGF0ZVRpbWU6IGZ1bmN0aW9uIChkZWx0YVRpbWUpIHtcclxuXHJcblx0XHR2YXIgdGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcclxuXHRcdHZhciBkdXJhdGlvbiA9IHRoaXMuX2NsaXAuZHVyYXRpb247XHJcblx0XHR2YXIgbG9vcCA9IHRoaXMubG9vcDtcclxuXHRcdHZhciBsb29wQ291bnQgPSB0aGlzLl9sb29wQ291bnQ7XHJcblxyXG5cdFx0dmFyIHBpbmdQb25nID0gKGxvb3AgPT09IExvb3BQaW5nUG9uZyk7XHJcblxyXG5cdFx0aWYgKGRlbHRhVGltZSA9PT0gMCkge1xyXG5cclxuXHRcdFx0aWYgKGxvb3BDb3VudCA9PT0gLSAxKSB7IHJldHVybiB0aW1lOyB9XHJcblxyXG5cdFx0XHRyZXR1cm4gKHBpbmdQb25nICYmIChsb29wQ291bnQgJiAxKSA9PT0gMSkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAobG9vcCA9PT0gTG9vcE9uY2UpIHtcclxuXHJcblx0XHRcdGlmIChsb29wQ291bnQgPT09IC0gMSkge1xyXG5cclxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcclxuXHJcblx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gMDtcclxuXHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKHRydWUsIHRydWUsIGZhbHNlKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhhbmRsZV9zdG9wOiB7XHJcblxyXG5cdFx0XHRcdGlmICh0aW1lID49IGR1cmF0aW9uKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZSA9IGR1cmF0aW9uO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKHRpbWUgPCAwKSB7XHJcblxyXG5cdFx0XHRcdFx0dGltZSA9IDA7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcclxuXHJcblx0XHRcdFx0XHRicmVhayBoYW5kbGVfc3RvcDtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAodGhpcy5jbGFtcFdoZW5GaW5pc2hlZCkgeyB0aGlzLnBhdXNlZCA9IHRydWU7IH1cclxuXHRcdFx0XHRlbHNlIHsgdGhpcy5lbmFibGVkID0gZmFsc2U7IH1cclxuXHJcblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcclxuXHJcblx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdFx0XHR0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsXHJcblx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA8IDAgPyAtIDEgOiAxXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSBlbHNlIHsgLy8gcmVwZXRpdGl2ZSBSZXBlYXQgb3IgUGluZ1BvbmdcclxuXHJcblx0XHRcdGlmIChsb29wQ291bnQgPT09IC0gMSkge1xyXG5cclxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcclxuXHJcblx0XHRcdFx0aWYgKGRlbHRhVGltZSA+PSAwKSB7XHJcblxyXG5cdFx0XHRcdFx0bG9vcENvdW50ID0gMDtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKHRydWUsIHRoaXMucmVwZXRpdGlvbnMgPT09IDAsIHBpbmdQb25nKTtcclxuXHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdFx0XHQvLyB3aGVuIGxvb3BpbmcgaW4gcmV2ZXJzZSBkaXJlY3Rpb24sIHRoZSBpbml0aWFsXHJcblx0XHRcdFx0XHQvLyB0cmFuc2l0aW9uIHRocm91Z2ggemVybyBjb3VudHMgYXMgYSByZXBldGl0aW9uLFxyXG5cdFx0XHRcdFx0Ly8gc28gbGVhdmUgbG9vcENvdW50IGF0IC0xXHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyh0aGlzLnJlcGV0aXRpb25zID09PSAwLCB0cnVlLCBwaW5nUG9uZyk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICh0aW1lID49IGR1cmF0aW9uIHx8IHRpbWUgPCAwKSB7XHJcblxyXG5cdFx0XHRcdC8vIHdyYXAgYXJvdW5kXHJcblxyXG5cdFx0XHRcdHZhciBsb29wRGVsdGEgPSBNYXRoLmZsb29yKHRpbWUgLyBkdXJhdGlvbik7IC8vIHNpZ25lZFxyXG5cdFx0XHRcdHRpbWUgLT0gZHVyYXRpb24gKiBsb29wRGVsdGE7XHJcblxyXG5cdFx0XHRcdGxvb3BDb3VudCArPSBNYXRoLmFicyhsb29wRGVsdGEpO1xyXG5cclxuXHRcdFx0XHR2YXIgcGVuZGluZyA9IHRoaXMucmVwZXRpdGlvbnMgLSBsb29wQ291bnQ7XHJcblxyXG5cdFx0XHRcdGlmIChwZW5kaW5nIDw9IDApIHtcclxuXHJcblx0XHRcdFx0XHQvLyBoYXZlIHRvIHN0b3AgKHN3aXRjaCBzdGF0ZSwgY2xhbXAgdGltZSwgZmlyZSBldmVudClcclxuXHJcblx0XHRcdFx0XHRpZiAodGhpcy5jbGFtcFdoZW5GaW5pc2hlZCkgeyB0aGlzLnBhdXNlZCA9IHRydWU7IH1cclxuXHRcdFx0XHRcdGVsc2UgeyB0aGlzLmVuYWJsZWQgPSBmYWxzZTsgfVxyXG5cclxuXHRcdFx0XHRcdHRpbWUgPSBkZWx0YVRpbWUgPiAwID8gZHVyYXRpb24gOiAwO1xyXG5cclxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6ICdmaW5pc2hlZCcsIGFjdGlvbjogdGhpcyxcclxuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBkZWx0YVRpbWUgPiAwID8gMSA6IC0gMVxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdFx0Ly8ga2VlcCBydW5uaW5nXHJcblxyXG5cdFx0XHRcdFx0aWYgKHBlbmRpbmcgPT09IDEpIHtcclxuXHJcblx0XHRcdFx0XHRcdC8vIGVudGVyaW5nIHRoZSBsYXN0IHJvdW5kXHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgYXRTdGFydCA9IGRlbHRhVGltZSA8IDA7XHJcblx0XHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoYXRTdGFydCwgIWF0U3RhcnQsIHBpbmdQb25nKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyhmYWxzZSwgZmFsc2UsIHBpbmdQb25nKTtcclxuXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gbG9vcENvdW50O1xyXG5cclxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6ICdsb29wJywgYWN0aW9uOiB0aGlzLCBsb29wRGVsdGE6IGxvb3BEZWx0YVxyXG5cdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAocGluZ1BvbmcgJiYgKGxvb3BDb3VudCAmIDEpID09PSAxKSB7XHJcblxyXG5cdFx0XHRcdC8vIGludmVydCB0aW1lIGZvciB0aGUgXCJwb25nIHJvdW5kXCJcclxuXHJcblx0XHRcdFx0cmV0dXJuIGR1cmF0aW9uIC0gdGltZTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRpbWU7XHJcblxyXG5cdH0sXHJcblxyXG5cdF9zZXRFbmRpbmdzOiBmdW5jdGlvbiAoYXRTdGFydCwgYXRFbmQsIHBpbmdQb25nKSB7XHJcblxyXG5cdFx0dmFyIHNldHRpbmdzID0gdGhpcy5faW50ZXJwb2xhbnRTZXR0aW5ncztcclxuXHJcblx0XHRpZiAocGluZ1BvbmcpIHtcclxuXHJcblx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gWmVyb1Nsb3BlRW5kaW5nO1xyXG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSBaZXJvU2xvcGVFbmRpbmc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdC8vIGFzc3VtaW5nIGZvciBMb29wT25jZSBhdFN0YXJ0ID09IGF0RW5kID09IHRydWVcclxuXHJcblx0XHRcdGlmIChhdFN0YXJ0KSB7XHJcblxyXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gdGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gV3JhcEFyb3VuZEVuZGluZztcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChhdEVuZCkge1xyXG5cclxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSB0aGlzLnplcm9TbG9wZUF0RW5kID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCA9IFdyYXBBcm91bmRFbmRpbmc7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRfc2NoZWR1bGVGYWRpbmc6IGZ1bmN0aW9uIChkdXJhdGlvbiwgd2VpZ2h0Tm93LCB3ZWlnaHRUaGVuKSB7XHJcblxyXG5cdFx0dmFyIG1peGVyID0gdGhpcy5fbWl4ZXIsIG5vdyA9IG1peGVyLnRpbWUsXHJcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0aWYgKGludGVycG9sYW50ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRpbnRlcnBvbGFudCA9IG1peGVyLl9sZW5kQ29udHJvbEludGVycG9sYW50KCk7XHJcblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcclxuXHRcdFx0dmFsdWVzID0gaW50ZXJwb2xhbnQuc2FtcGxlVmFsdWVzO1xyXG5cclxuXHRcdHRpbWVzWzBdID0gbm93O1xyXG5cdFx0dmFsdWVzWzBdID0gd2VpZ2h0Tm93O1xyXG5cdFx0dGltZXNbMV0gPSBub3cgKyBkdXJhdGlvbjtcclxuXHRcdHZhbHVlc1sxXSA9IHdlaWdodFRoZW47XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqXHJcbiAqIFBsYXllciBmb3IgQW5pbWF0aW9uQ2xpcHMuXHJcbiAqXHJcbiAqXHJcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xyXG4gKiBAYXV0aG9yIHRzY2h3XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uTWl4ZXIocm9vdCkge1xyXG5cclxuXHR0aGlzLl9yb290ID0gcm9vdDtcclxuXHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xyXG5cdHRoaXMuX2FjY3VJbmRleCA9IDA7XHJcblxyXG5cdHRoaXMudGltZSA9IDA7XHJcblxyXG5cdHRoaXMudGltZVNjYWxlID0gMS4wO1xyXG5cclxufVxyXG5cclxuQW5pbWF0aW9uTWl4ZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUpLCB7XHJcblxyXG5cdGNvbnN0cnVjdG9yOiBBbmltYXRpb25NaXhlcixcclxuXHJcblx0X2JpbmRBY3Rpb246IGZ1bmN0aW9uIChhY3Rpb24sIHByb3RvdHlwZUFjdGlvbikge1xyXG5cclxuXHRcdHZhciByb290ID0gYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCxcclxuXHRcdFx0dHJhY2tzID0gYWN0aW9uLl9jbGlwLnRyYWNrcyxcclxuXHRcdFx0blRyYWNrcyA9IHRyYWNrcy5sZW5ndGgsXHJcblx0XHRcdGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzLFxyXG5cdFx0XHRpbnRlcnBvbGFudHMgPSBhY3Rpb24uX2ludGVycG9sYW50cyxcclxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXHJcblx0XHRcdGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxyXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290W3Jvb3RVdWlkXTtcclxuXHJcblx0XHRpZiAoYmluZGluZ3NCeU5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0YmluZGluZ3NCeU5hbWUgPSB7fTtcclxuXHRcdFx0YmluZGluZ3NCeVJvb3Rbcm9vdFV1aWRdID0gYmluZGluZ3NCeU5hbWU7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpICE9PSBuVHJhY2tzOyArK2kpIHtcclxuXHJcblx0XHRcdHZhciB0cmFjayA9IHRyYWNrc1tpXSxcclxuXHRcdFx0XHR0cmFja05hbWUgPSB0cmFjay5uYW1lLFxyXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVt0cmFja05hbWVdO1xyXG5cclxuXHRcdFx0aWYgKGJpbmRpbmcgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRiaW5kaW5nc1tpXSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0XHRiaW5kaW5nID0gYmluZGluZ3NbaV07XHJcblxyXG5cdFx0XHRcdGlmIChiaW5kaW5nICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdFx0XHQvLyBleGlzdGluZyBiaW5kaW5nLCBtYWtlIHN1cmUgdGhlIGNhY2hlIGtub3dzXHJcblxyXG5cdFx0XHRcdFx0aWYgKGJpbmRpbmcuX2NhY2hlSW5kZXggPT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0XHRcdCsrYmluZGluZy5yZWZlcmVuY2VDb3VudDtcclxuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKGJpbmRpbmcsIHJvb3RVdWlkLCB0cmFja05hbWUpO1xyXG5cclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRjb250aW51ZTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgcGF0aCA9IHByb3RvdHlwZUFjdGlvbiAmJiBwcm90b3R5cGVBY3Rpb24uXHJcblx0XHRcdFx0XHRfcHJvcGVydHlCaW5kaW5nc1tpXS5iaW5kaW5nLnBhcnNlZFBhdGg7XHJcblxyXG5cdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlNaXhlcihcclxuXHRcdFx0XHRcdFByb3BlcnR5QmluZGluZy5jcmVhdGUocm9vdCwgdHJhY2tOYW1lLCBwYXRoKSxcclxuXHRcdFx0XHRcdHRyYWNrLlZhbHVlVHlwZU5hbWUsIHRyYWNrLmdldFZhbHVlU2l6ZSgpKTtcclxuXHJcblx0XHRcdFx0KytiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xyXG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyhiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lKTtcclxuXHJcblx0XHRcdFx0YmluZGluZ3NbaV0gPSBiaW5kaW5nO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aW50ZXJwb2xhbnRzW2ldLnJlc3VsdEJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0X2FjdGl2YXRlQWN0aW9uOiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9pc0FjdGl2ZUFjdGlvbihhY3Rpb24pKSB7XHJcblxyXG5cdFx0XHRpZiAoYWN0aW9uLl9jYWNoZUluZGV4ID09PSBudWxsKSB7XHJcblxyXG5cdFx0XHRcdC8vIHRoaXMgYWN0aW9uIGhhcyBiZWVuIGZvcmdvdHRlbiBieSB0aGUgY2FjaGUsIGJ1dCB0aGUgdXNlclxyXG5cdFx0XHRcdC8vIGFwcGVhcnMgdG8gYmUgc3RpbGwgdXNpbmcgaXQgLT4gcmViaW5kXHJcblxyXG5cdFx0XHRcdHZhciByb290VXVpZCA9IChhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290KS51dWlkLFxyXG5cdFx0XHRcdFx0Y2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcclxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFtjbGlwVXVpZF07XHJcblxyXG5cdFx0XHRcdHRoaXMuX2JpbmRBY3Rpb24oYWN0aW9uLFxyXG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAgJiYgYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWzBdKTtcclxuXHJcblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oYWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cclxuXHRcdFx0Ly8gaW5jcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbaV07XHJcblxyXG5cdFx0XHRcdGlmIChiaW5kaW5nLnVzZUNvdW50KysgPT09IDApIHtcclxuXHJcblx0XHRcdFx0XHR0aGlzLl9sZW5kQmluZGluZyhiaW5kaW5nKTtcclxuXHRcdFx0XHRcdGJpbmRpbmcuc2F2ZU9yaWdpbmFsU3RhdGUoKTtcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fbGVuZEFjdGlvbihhY3Rpb24pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0X2RlYWN0aXZhdGVBY3Rpb246IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuXHJcblx0XHRpZiAodGhpcy5faXNBY3RpdmVBY3Rpb24oYWN0aW9uKSkge1xyXG5cclxuXHRcdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cclxuXHRcdFx0Ly8gZGVjcmVtZW50IHJlZmVyZW5jZSBjb3VudHMgLyBzb3J0IG91dCBzdGF0ZVxyXG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKytpKSB7XHJcblxyXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbaV07XHJcblxyXG5cdFx0XHRcdGlmICgtLWJpbmRpbmcudXNlQ291bnQgPT09IDApIHtcclxuXHJcblx0XHRcdFx0XHRiaW5kaW5nLnJlc3RvcmVPcmlnaW5hbFN0YXRlKCk7XHJcblx0XHRcdFx0XHR0aGlzLl90YWtlQmFja0JpbmRpbmcoYmluZGluZyk7XHJcblxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3Rha2VCYWNrQWN0aW9uKGFjdGlvbik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBNZW1vcnkgbWFuYWdlclxyXG5cclxuXHRfaW5pdE1lbW9yeU1hbmFnZXI6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR0aGlzLl9hY3Rpb25zID0gW107IC8vICduQWN0aXZlQWN0aW9ucycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xyXG5cdFx0dGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwO1xyXG5cclxuXHRcdHRoaXMuX2FjdGlvbnNCeUNsaXAgPSB7fTtcclxuXHRcdC8vIGluc2lkZTpcclxuXHRcdC8vIHtcclxuXHRcdC8vIFx0a25vd25BY3Rpb25zOiBBcnJheTwgQW5pbWF0aW9uQWN0aW9uID4gLSB1c2VkIGFzIHByb3RvdHlwZXNcclxuXHRcdC8vIFx0YWN0aW9uQnlSb290OiBBbmltYXRpb25BY3Rpb24gLSBsb29rdXBcclxuXHRcdC8vIH1cclxuXHJcblxyXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xyXG5cdFx0dGhpcy5fbkFjdGl2ZUJpbmRpbmdzID0gMDtcclxuXHJcblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxyXG5cclxuXHJcblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxyXG5cdFx0dGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMgPSAwO1xyXG5cclxuXHRcdHZhciBzY29wZSA9IHRoaXM7XHJcblxyXG5cdFx0dGhpcy5zdGF0cyA9IHtcclxuXHJcblx0XHRcdGFjdGlvbnM6IHtcclxuXHRcdFx0XHRnZXQgdG90YWwoKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9hY3Rpb25zLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQWN0aW9ucztcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRiaW5kaW5nczoge1xyXG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XHJcblxyXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQmluZGluZ3M7XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0Y29udHJvbEludGVycG9sYW50czoge1xyXG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX2NvbnRyb2xJbnRlcnBvbGFudHMubGVuZ3RoO1xyXG5cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGdldCBpblVzZSgpIHtcclxuXHJcblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzO1xyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHR9O1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHNcclxuXHJcblx0X2lzQWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcblxyXG5cdFx0dmFyIGluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xyXG5cdFx0cmV0dXJuIGluZGV4ICE9PSBudWxsICYmIGluZGV4IDwgdGhpcy5fbkFjdGl2ZUFjdGlvbnM7XHJcblxyXG5cdH0sXHJcblxyXG5cdF9hZGRJbmFjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkKSB7XHJcblxyXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxyXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcclxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zQnlDbGlwW2NsaXBVdWlkXTtcclxuXHJcblx0XHRpZiAoYWN0aW9uc0ZvckNsaXAgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB7XHJcblxyXG5cdFx0XHRcdGtub3duQWN0aW9uczogW2FjdGlvbl0sXHJcblx0XHRcdFx0YWN0aW9uQnlSb290OiB7fVxyXG5cclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IDA7XHJcblxyXG5cdFx0XHRhY3Rpb25zQnlDbGlwW2NsaXBVdWlkXSA9IGFjdGlvbnNGb3JDbGlwO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHR2YXIga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xyXG5cclxuXHRcdFx0YWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0ga25vd25BY3Rpb25zLmxlbmd0aDtcclxuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goYWN0aW9uKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XHJcblx0XHRhY3Rpb25zLnB1c2goYWN0aW9uKTtcclxuXHJcblx0XHRhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3Rbcm9vdFV1aWRdID0gYWN0aW9uO1xyXG5cclxuXHR9LFxyXG5cclxuXHRfcmVtb3ZlSW5hY3RpdmVBY3Rpb246IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuXHJcblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXHJcblx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbYWN0aW9ucy5sZW5ndGggLSAxXSxcclxuXHRcdFx0Y2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleDtcclxuXHJcblx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xyXG5cdFx0YWN0aW9uc1tjYWNoZUluZGV4XSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcclxuXHRcdGFjdGlvbnMucG9wKCk7XHJcblxyXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcclxuXHJcblxyXG5cdFx0dmFyIGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXHJcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbY2xpcFV1aWRdLFxyXG5cdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zLFxyXG5cclxuXHRcdFx0bGFzdEtub3duQWN0aW9uID1cclxuXHRcdFx0XHRrbm93bkFjdGlvbnNGb3JDbGlwW2tub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoIC0gMV0sXHJcblxyXG5cdFx0XHRieUNsaXBDYWNoZUluZGV4ID0gYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4O1xyXG5cclxuXHRcdGxhc3RLbm93bkFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IGJ5Q2xpcENhY2hlSW5kZXg7XHJcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwW2J5Q2xpcENhY2hlSW5kZXhdID0gbGFzdEtub3duQWN0aW9uO1xyXG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcC5wb3AoKTtcclxuXHJcblx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xyXG5cclxuXHJcblx0XHR2YXIgYWN0aW9uQnlSb290ID0gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290LFxyXG5cdFx0XHRyb290VXVpZCA9IChhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290KS51dWlkO1xyXG5cclxuXHRcdGRlbGV0ZSBhY3Rpb25CeVJvb3Rbcm9vdFV1aWRdO1xyXG5cclxuXHRcdGlmIChrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCkge1xyXG5cclxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbY2xpcFV1aWRdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKGFjdGlvbik7XHJcblxyXG5cdH0sXHJcblxyXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uOiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcblxyXG5cdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsraSkge1xyXG5cclxuXHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1tpXTtcclxuXHJcblx0XHRcdGlmICgtLWJpbmRpbmcucmVmZXJlbmNlQ291bnQgPT09IDApIHtcclxuXHJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKGJpbmRpbmcpO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0X2xlbmRBY3Rpb246IGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuXHJcblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cclxuXHRcdC8vIFsgIGFjdGl2ZSBhY3Rpb25zID58IGluYWN0aXZlIGFjdGlvbnMgXVxyXG5cdFx0Ly8gICAgICAgICAgICAgICAgIHMgICAgICAgIGFcclxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cclxuXHRcdC8vICAgICAgICAgICAgICAgICBhICAgICAgICBzXHJcblxyXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxyXG5cdFx0XHRwcmV2SW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXgsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucysrLFxyXG5cclxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbbGFzdEFjdGl2ZUluZGV4XTtcclxuXHJcblx0XHRhY3Rpb24uX2NhY2hlSW5kZXggPSBsYXN0QWN0aXZlSW5kZXg7XHJcblx0XHRhY3Rpb25zW2xhc3RBY3RpdmVJbmRleF0gPSBhY3Rpb247XHJcblxyXG5cdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcclxuXHRcdGFjdGlvbnNbcHJldkluZGV4XSA9IGZpcnN0SW5hY3RpdmVBY3Rpb247XHJcblxyXG5cdH0sXHJcblxyXG5cdF90YWtlQmFja0FjdGlvbjogZnVuY3Rpb24gKGFjdGlvbikge1xyXG5cclxuXHRcdC8vIFsgIGFjdGl2ZSBhY3Rpb25zICB8IGluYWN0aXZlIGFjdGlvbnMgXVxyXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXHJcblx0XHQvLyAgICAgICAgYSAgICAgICAgc1xyXG5cdFx0Ly8gICAgICAgICA8LXN3YXAtPlxyXG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcclxuXHJcblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXHJcblx0XHRcdHByZXZJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlQWN0aW9uID0gYWN0aW9uc1tmaXJzdEluYWN0aXZlSW5kZXhdO1xyXG5cclxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcclxuXHRcdGFjdGlvbnNbZmlyc3RJbmFjdGl2ZUluZGV4XSA9IGFjdGlvbjtcclxuXHJcblx0XHRsYXN0QWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gcHJldkluZGV4O1xyXG5cdFx0YWN0aW9uc1twcmV2SW5kZXhdID0gbGFzdEFjdGl2ZUFjdGlvbjtcclxuXHJcblx0fSxcclxuXHJcblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xyXG5cclxuXHRfYWRkSW5hY3RpdmVCaW5kaW5nOiBmdW5jdGlvbiAoYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSkge1xyXG5cclxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcclxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290W3Jvb3RVdWlkXSxcclxuXHJcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XHJcblxyXG5cdFx0aWYgKGJpbmRpbmdCeU5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IHt9O1xyXG5cdFx0XHRiaW5kaW5nc0J5Um9vdFtyb290VXVpZF0gPSBiaW5kaW5nQnlOYW1lO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRiaW5kaW5nQnlOYW1lW3RyYWNrTmFtZV0gPSBiaW5kaW5nO1xyXG5cclxuXHRcdGJpbmRpbmcuX2NhY2hlSW5kZXggPSBiaW5kaW5ncy5sZW5ndGg7XHJcblx0XHRiaW5kaW5ncy5wdXNoKGJpbmRpbmcpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nOiBmdW5jdGlvbiAoYmluZGluZykge1xyXG5cclxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxyXG5cdFx0XHRwcm9wQmluZGluZyA9IGJpbmRpbmcuYmluZGluZyxcclxuXHRcdFx0cm9vdFV1aWQgPSBwcm9wQmluZGluZy5yb290Tm9kZS51dWlkLFxyXG5cdFx0XHR0cmFja05hbWUgPSBwcm9wQmluZGluZy5wYXRoLFxyXG5cdFx0XHRiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcclxuXHRcdFx0YmluZGluZ0J5TmFtZSA9IGJpbmRpbmdzQnlSb290W3Jvb3RVdWlkXSxcclxuXHJcblx0XHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1tiaW5kaW5ncy5sZW5ndGggLSAxXSxcclxuXHRcdFx0Y2FjaGVJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXg7XHJcblxyXG5cdFx0bGFzdEluYWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IGNhY2hlSW5kZXg7XHJcblx0XHRiaW5kaW5nc1tjYWNoZUluZGV4XSA9IGxhc3RJbmFjdGl2ZUJpbmRpbmc7XHJcblx0XHRiaW5kaW5ncy5wb3AoKTtcclxuXHJcblx0XHRkZWxldGUgYmluZGluZ0J5TmFtZVt0cmFja05hbWVdO1xyXG5cclxuXHRcdGlmIChPYmplY3Qua2V5cyhiaW5kaW5nQnlOYW1lKS5sZW5ndGggPT09IDApIHtcclxuXHJcblx0XHRcdGRlbGV0ZSBiaW5kaW5nc0J5Um9vdFtyb290VXVpZF07XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRfbGVuZEJpbmRpbmc6IGZ1bmN0aW9uIChiaW5kaW5nKSB7XHJcblxyXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXHJcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MrKyxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbbGFzdEFjdGl2ZUluZGV4XTtcclxuXHJcblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xyXG5cdFx0YmluZGluZ3NbbGFzdEFjdGl2ZUluZGV4XSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XHJcblx0XHRiaW5kaW5nc1twcmV2SW5kZXhdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XHJcblxyXG5cdH0sXHJcblxyXG5cdF90YWtlQmFja0JpbmRpbmc6IGZ1bmN0aW9uIChiaW5kaW5nKSB7XHJcblxyXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXHJcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXHJcblxyXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLXRoaXMuX25BY3RpdmVCaW5kaW5ncyxcclxuXHJcblx0XHRcdGxhc3RBY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbZmlyc3RJbmFjdGl2ZUluZGV4XTtcclxuXHJcblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xyXG5cdFx0YmluZGluZ3NbZmlyc3RJbmFjdGl2ZUluZGV4XSA9IGJpbmRpbmc7XHJcblxyXG5cdFx0bGFzdEFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XHJcblx0XHRiaW5kaW5nc1twcmV2SW5kZXhdID0gbGFzdEFjdGl2ZUJpbmRpbmc7XHJcblxyXG5cdH0sXHJcblxyXG5cclxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBvZiBJbnRlcnBvbGFudHMgZm9yIHdlaWdodCBhbmQgdGltZSBzY2FsZVxyXG5cclxuXHRfbGVuZENvbnRyb2xJbnRlcnBvbGFudDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxyXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cysrLFxyXG5cdFx0XHRpbnRlcnBvbGFudCA9IGludGVycG9sYW50c1tsYXN0QWN0aXZlSW5kZXhdO1xyXG5cclxuXHRcdGlmIChpbnRlcnBvbGFudCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRpbnRlcnBvbGFudCA9IG5ldyBMaW5lYXJJbnRlcnBvbGFudChcclxuXHRcdFx0XHRuZXcgRmxvYXQzMkFycmF5KDIpLCBuZXcgRmxvYXQzMkFycmF5KDIpLFxyXG5cdFx0XHRcdDEsIHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIpO1xyXG5cclxuXHRcdFx0aW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xyXG5cdFx0XHRpbnRlcnBvbGFudHNbbGFzdEFjdGl2ZUluZGV4XSA9IGludGVycG9sYW50O1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaW50ZXJwb2xhbnQ7XHJcblxyXG5cdH0sXHJcblxyXG5cdF90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudDogZnVuY3Rpb24gKGludGVycG9sYW50KSB7XHJcblxyXG5cdFx0dmFyIGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXHJcblx0XHRcdHByZXZJbmRleCA9IGludGVycG9sYW50Ll9fY2FjaGVJbmRleCxcclxuXHJcblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tdGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMsXHJcblxyXG5cdFx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudHNbZmlyc3RJbmFjdGl2ZUluZGV4XTtcclxuXHJcblx0XHRpbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBmaXJzdEluYWN0aXZlSW5kZXg7XHJcblx0XHRpbnRlcnBvbGFudHNbZmlyc3RJbmFjdGl2ZUluZGV4XSA9IGludGVycG9sYW50O1xyXG5cclxuXHRcdGxhc3RBY3RpdmVJbnRlcnBvbGFudC5fX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XHJcblx0XHRpbnRlcnBvbGFudHNbcHJldkluZGV4XSA9IGxhc3RBY3RpdmVJbnRlcnBvbGFudDtcclxuXHJcblx0fSxcclxuXHJcblx0X2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXI6IG5ldyBGbG9hdDMyQXJyYXkoMSksXHJcblxyXG5cdC8vIHJldHVybiBhbiBhY3Rpb24gZm9yIGEgY2xpcCBvcHRpb25hbGx5IHVzaW5nIGEgY3VzdG9tIHJvb3QgdGFyZ2V0XHJcblx0Ly8gb2JqZWN0ICh0aGlzIG1ldGhvZCBhbGxvY2F0ZXMgYSBsb3Qgb2YgZHluYW1pYyBtZW1vcnkgaW4gY2FzZSBhXHJcblx0Ly8gcHJldmlvdXNseSB1bmtub3duIGNsaXAvcm9vdCBjb21iaW5hdGlvbiBpcyBzcGVjaWZpZWQpXHJcblx0Y2xpcEFjdGlvbjogZnVuY3Rpb24gKGNsaXAsIG9wdGlvbmFsUm9vdCkge1xyXG5cclxuXHRcdHZhciByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXHJcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxyXG5cclxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XHJcblx0XHRcdFx0QW5pbWF0aW9uQ2xpcC5maW5kQnlOYW1lKHJvb3QsIGNsaXApIDogY2xpcCxcclxuXHJcblx0XHRcdGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsXHJcblxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbY2xpcFV1aWRdLFxyXG5cdFx0XHRwcm90b3R5cGVBY3Rpb24gPSBudWxsO1xyXG5cclxuXHRcdGlmIChhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHR2YXIgZXhpc3RpbmdBY3Rpb24gPVxyXG5cdFx0XHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFtyb290VXVpZF07XHJcblxyXG5cdFx0XHRpZiAoZXhpc3RpbmdBY3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdBY3Rpb247XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyB3ZSBrbm93IHRoZSBjbGlwLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHBhcnNlIGFsbFxyXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcclxuXHRcdFx0cHJvdG90eXBlQWN0aW9uID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zWzBdO1xyXG5cclxuXHRcdFx0Ly8gYWxzbywgdGFrZSB0aGUgY2xpcCBmcm9tIHRoZSBwcm90b3R5cGUgYWN0aW9uXHJcblx0XHRcdGlmIChjbGlwT2JqZWN0ID09PSBudWxsKSB7IGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7IH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gY2xpcCBtdXN0IGJlIGtub3duIHdoZW4gc3BlY2lmaWVkIHZpYSBzdHJpbmdcclxuXHRcdGlmIChjbGlwT2JqZWN0ID09PSBudWxsKSB7IHJldHVybiBudWxsOyB9XHJcblxyXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcclxuXHRcdHZhciBuZXdBY3Rpb24gPSBuZXcgQW5pbWF0aW9uQWN0aW9uKHRoaXMsIGNsaXBPYmplY3QsIG9wdGlvbmFsUm9vdCk7XHJcblxyXG5cdFx0dGhpcy5fYmluZEFjdGlvbihuZXdBY3Rpb24sIHByb3RvdHlwZUFjdGlvbik7XHJcblxyXG5cdFx0Ly8gYW5kIG1ha2UgdGhlIGFjdGlvbiBrbm93biB0byB0aGUgbWVtb3J5IG1hbmFnZXJcclxuXHRcdHRoaXMuX2FkZEluYWN0aXZlQWN0aW9uKG5ld0FjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkKTtcclxuXHJcblx0XHRyZXR1cm4gbmV3QWN0aW9uO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBnZXQgYW4gZXhpc3RpbmcgYWN0aW9uXHJcblx0ZXhpc3RpbmdBY3Rpb246IGZ1bmN0aW9uIChjbGlwLCBvcHRpb25hbFJvb3QpIHtcclxuXHJcblx0XHR2YXIgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxyXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcclxuXHJcblx0XHRcdGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgP1xyXG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZShyb290LCBjbGlwKSA6IGNsaXAsXHJcblxyXG5cdFx0XHRjbGlwVXVpZCA9IGNsaXBPYmplY3QgPyBjbGlwT2JqZWN0LnV1aWQgOiBjbGlwLFxyXG5cclxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwW2NsaXBVdWlkXTtcclxuXHJcblx0XHRpZiAoYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFtyb290VXVpZF0gfHwgbnVsbDtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGRlYWN0aXZhdGVzIGFsbCBwcmV2aW91c2x5IHNjaGVkdWxlZCBhY3Rpb25zXHJcblx0c3RvcEFsbEFjdGlvbjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0bkFjdGlvbnMgPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyxcclxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xyXG5cclxuXHRcdHRoaXMuX25BY3RpdmVBY3Rpb25zID0gMDtcclxuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArK2kpIHtcclxuXHJcblx0XHRcdGFjdGlvbnNbaV0ucmVzZXQoKTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IG5CaW5kaW5nczsgKytpKSB7XHJcblxyXG5cdFx0XHRiaW5kaW5nc1tpXS51c2VDb3VudCA9IDA7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyBhZHZhbmNlIHRoZSB0aW1lIGFuZCB1cGRhdGUgYXBwbHkgdGhlIGFuaW1hdGlvblxyXG5cdHVwZGF0ZTogZnVuY3Rpb24gKGRlbHRhVGltZSkge1xyXG5cclxuXHRcdGRlbHRhVGltZSAqPSB0aGlzLnRpbWVTY2FsZTtcclxuXHJcblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXHJcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXHJcblxyXG5cdFx0XHR0aW1lID0gdGhpcy50aW1lICs9IGRlbHRhVGltZSxcclxuXHRcdFx0dGltZURpcmVjdGlvbiA9IE1hdGguc2lnbihkZWx0YVRpbWUpLFxyXG5cclxuXHRcdFx0YWNjdUluZGV4ID0gdGhpcy5fYWNjdUluZGV4IF49IDE7XHJcblxyXG5cdFx0Ly8gcnVuIGFjdGl2ZSBhY3Rpb25zXHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArK2kpIHtcclxuXHJcblx0XHRcdHZhciBhY3Rpb24gPSBhY3Rpb25zW2ldO1xyXG5cclxuXHRcdFx0YWN0aW9uLl91cGRhdGUodGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXgpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHQvLyB1cGRhdGUgc2NlbmUgZ3JhcGhcclxuXHJcblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcclxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpICE9PSBuQmluZGluZ3M7ICsraSkge1xyXG5cclxuXHRcdFx0YmluZGluZ3NbaV0uYXBwbHkoYWNjdUluZGV4KTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIEFsbG93cyB5b3UgdG8gc2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gYW4gYW5pbWF0aW9uLlxyXG5cdHNldFRpbWU6IGZ1bmN0aW9uICh0aW1lSW5TZWNvbmRzKSB7XHJcblxyXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIEFuaW1hdGlvbk1peGVyIG9iamVjdDtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fYWN0aW9ucy5sZW5ndGg7IGkrKykge1xyXG5cclxuXHRcdFx0dGhpcy5fYWN0aW9uc1tpXS50aW1lID0gMDsgLy8gWmVybyBvdXQgdGltZSBhdHRyaWJ1dGUgZm9yIGFsbCBhc3NvY2lhdGVkIEFuaW1hdGlvbkFjdGlvbiBvYmplY3RzLlxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy51cGRhdGUodGltZUluU2Vjb25kcyk7IC8vIFVwZGF0ZSB1c2VkIHRvIHNldCBleGFjdCB0aW1lLiBSZXR1cm5zIFwidGhpc1wiIEFuaW1hdGlvbk1peGVyIG9iamVjdC5cclxuXHJcblx0fSxcclxuXHJcblx0Ly8gcmV0dXJuIHRoaXMgbWl4ZXIncyByb290IHRhcmdldCBvYmplY3RcclxuXHRnZXRSb290OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX3Jvb3Q7XHJcblxyXG5cdH0sXHJcblxyXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcFxyXG5cdHVuY2FjaGVDbGlwOiBmdW5jdGlvbiAoY2xpcCkge1xyXG5cclxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcclxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXHJcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwLFxyXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbY2xpcFV1aWRdO1xyXG5cclxuXHRcdGlmIChhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHQvLyBub3RlOiBqdXN0IGNhbGxpbmcgX3JlbW92ZUluYWN0aXZlQWN0aW9uIHdvdWxkIG1lc3MgdXAgdGhlXHJcblx0XHRcdC8vIGl0ZXJhdGlvbiBzdGF0ZSBhbmQgYWxzbyByZXF1aXJlIHVwZGF0aW5nIHRoZSBzdGF0ZSB3ZSBjYW5cclxuXHRcdFx0Ly8ganVzdCB0aHJvdyBhd2F5XHJcblxyXG5cdFx0XHR2YXIgYWN0aW9uc1RvUmVtb3ZlID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIG4gPSBhY3Rpb25zVG9SZW1vdmUubGVuZ3RoOyBpICE9PSBuOyArK2kpIHtcclxuXHJcblx0XHRcdFx0dmFyIGFjdGlvbiA9IGFjdGlvbnNUb1JlbW92ZVtpXTtcclxuXHJcblx0XHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbihhY3Rpb24pO1xyXG5cclxuXHRcdFx0XHR2YXIgY2FjaGVJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcclxuXHRcdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbYWN0aW9ucy5sZW5ndGggLSAxXTtcclxuXHJcblx0XHRcdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcclxuXHRcdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBudWxsO1xyXG5cclxuXHRcdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xyXG5cdFx0XHRcdGFjdGlvbnNbY2FjaGVJbmRleF0gPSBsYXN0SW5hY3RpdmVBY3Rpb247XHJcblx0XHRcdFx0YWN0aW9ucy5wb3AoKTtcclxuXHJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbihhY3Rpb24pO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbY2xpcFV1aWRdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fSxcclxuXHJcblx0Ly8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3RcclxuXHR1bmNhY2hlUm9vdDogZnVuY3Rpb24gKHJvb3QpIHtcclxuXHJcblx0XHR2YXIgcm9vdFV1aWQgPSByb290LnV1aWQsXHJcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwO1xyXG5cclxuXHRcdGZvciAodmFyIGNsaXBVdWlkIGluIGFjdGlvbnNCeUNsaXApIHtcclxuXHJcblx0XHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwW2NsaXBVdWlkXS5hY3Rpb25CeVJvb3QsXHJcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290W3Jvb3RVdWlkXTtcclxuXHJcblx0XHRcdGlmIChhY3Rpb24gIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKGFjdGlvbik7XHJcblx0XHRcdFx0dGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oYWN0aW9uKTtcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGJpbmRpbmdzQnlSb290ID0gdGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lLFxyXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3Rbcm9vdFV1aWRdO1xyXG5cclxuXHRcdGlmIChiaW5kaW5nQnlOYW1lICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGZvciAodmFyIHRyYWNrTmFtZSBpbiBiaW5kaW5nQnlOYW1lKSB7XHJcblxyXG5cdFx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ0J5TmFtZVt0cmFja05hbWVdO1xyXG5cdFx0XHRcdGJpbmRpbmcucmVzdG9yZU9yaWdpbmFsU3RhdGUoKTtcclxuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoYmluZGluZyk7XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZW1vdmUgYSB0YXJnZXRlZCBjbGlwIGZyb20gdGhlIGNhY2hlXHJcblx0dW5jYWNoZUFjdGlvbjogZnVuY3Rpb24gKGNsaXAsIG9wdGlvbmFsUm9vdCkge1xyXG5cclxuXHRcdHZhciBhY3Rpb24gPSB0aGlzLmV4aXN0aW5nQWN0aW9uKGNsaXAsIG9wdGlvbmFsUm9vdCk7XHJcblxyXG5cdFx0aWYgKGFjdGlvbiAhPT0gbnVsbCkge1xyXG5cclxuXHRcdFx0dGhpcy5fZGVhY3RpdmF0ZUFjdGlvbihhY3Rpb24pO1xyXG5cdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbihhY3Rpb24pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBVbmlmb3JtKHZhbHVlKSB7XHJcblxyXG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Vbmlmb3JtOiBUeXBlIHBhcmFtZXRlciBpcyBubyBsb25nZXIgbmVlZGVkLicpO1xyXG5cdFx0dmFsdWUgPSBhcmd1bWVudHNbMV07XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy52YWx1ZSA9IHZhbHVlO1xyXG5cclxufVxyXG5cclxuVW5pZm9ybS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHJldHVybiBuZXcgVW5pZm9ybSh0aGlzLnZhbHVlLmNsb25lID09PSB1bmRlZmluZWQgPyB0aGlzLnZhbHVlIDogdGhpcy52YWx1ZS5jbG9uZSgpKTtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIoYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSkge1xyXG5cclxuXHRJbnRlcmxlYXZlZEJ1ZmZlci5jYWxsKHRoaXMsIGFycmF5LCBzdHJpZGUpO1xyXG5cclxuXHR0aGlzLm1lc2hQZXJBdHRyaWJ1dGUgPSBtZXNoUGVyQXR0cmlidXRlIHx8IDE7XHJcblxyXG59XHJcblxyXG5JbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIsXHJcblxyXG5cdGlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI6IHRydWUsXHJcblxyXG5cdGNvcHk6IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0XHRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gc291cmNlLm1lc2hQZXJBdHRyaWJ1dGU7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXHJcbiAqIEBhdXRob3Igc3RlcGhvbWkgLyBodHRwOi8vc3RlcGhhbmVnaW5pZXIuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFJheWNhc3RlcihvcmlnaW4sIGRpcmVjdGlvbiwgbmVhciwgZmFyKSB7XHJcblxyXG5cdHRoaXMucmF5ID0gbmV3IFJheShvcmlnaW4sIGRpcmVjdGlvbik7XHJcblx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcclxuXHJcblx0dGhpcy5uZWFyID0gbmVhciB8fCAwO1xyXG5cdHRoaXMuZmFyID0gZmFyIHx8IEluZmluaXR5O1xyXG5cdHRoaXMuY2FtZXJhID0gbnVsbDtcclxuXHJcblx0dGhpcy5wYXJhbXMgPSB7XHJcblx0XHRNZXNoOiB7fSxcclxuXHRcdExpbmU6IHt9LFxyXG5cdFx0TE9EOiB7fSxcclxuXHRcdFBvaW50czogeyB0aHJlc2hvbGQ6IDEgfSxcclxuXHRcdFNwcml0ZToge31cclxuXHR9O1xyXG5cclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLnBhcmFtcywge1xyXG5cdFx0UG9pbnRDbG91ZDoge1xyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5SYXljYXN0ZXI6IHBhcmFtcy5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gcGFyYW1zLlBvaW50cy4nKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5Qb2ludHM7XHJcblxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBhc2NTb3J0KGEsIGIpIHtcclxuXHJcblx0cmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJzZWN0T2JqZWN0KG9iamVjdCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUpIHtcclxuXHJcblx0aWYgKG9iamVjdC52aXNpYmxlID09PSBmYWxzZSkgeyByZXR1cm47IH1cclxuXHJcblx0b2JqZWN0LnJheWNhc3QocmF5Y2FzdGVyLCBpbnRlcnNlY3RzKTtcclxuXHJcblx0aWYgKHJlY3Vyc2l2ZSA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0T2JqZWN0KGNoaWxkcmVuW2ldLCByYXljYXN0ZXIsIGludGVyc2VjdHMsIHRydWUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihSYXljYXN0ZXIucHJvdG90eXBlLCB7XHJcblxyXG5cdGxpbmVQcmVjaXNpb246IDEsXHJcblxyXG5cdHNldDogZnVuY3Rpb24gKG9yaWdpbiwgZGlyZWN0aW9uKSB7XHJcblxyXG5cdFx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcclxuXHJcblx0XHR0aGlzLnJheS5zZXQob3JpZ2luLCBkaXJlY3Rpb24pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ2FtZXJhOiBmdW5jdGlvbiAoY29vcmRzLCBjYW1lcmEpIHtcclxuXHJcblx0XHRpZiAoKGNhbWVyYSAmJiBjYW1lcmEuaXNQZXJzcGVjdGl2ZUNhbWVyYSkpIHtcclxuXHJcblx0XHRcdHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oY2FtZXJhLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldChjb29yZHMueCwgY29vcmRzLnksIDAuNSkudW5wcm9qZWN0KGNhbWVyYSkuc3ViKHRoaXMucmF5Lm9yaWdpbikubm9ybWFsaXplKCk7XHJcblx0XHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoKGNhbWVyYSAmJiBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEpKSB7XHJcblxyXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KGNvb3Jkcy54LCBjb29yZHMueSwgKGNhbWVyYS5uZWFyICsgY2FtZXJhLmZhcikgLyAoY2FtZXJhLm5lYXIgLSBjYW1lcmEuZmFyKSkudW5wcm9qZWN0KGNhbWVyYSk7IC8vIHNldCBvcmlnaW4gaW4gcGxhbmUgb2YgY2FtZXJhXHJcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoMCwgMCwgLSAxKS50cmFuc2Zvcm1EaXJlY3Rpb24oY2FtZXJhLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0dGhpcy5jYW1lcmEgPSBjYW1lcmE7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlJheWNhc3RlcjogVW5zdXBwb3J0ZWQgY2FtZXJhIHR5cGUuJyk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QsIHJlY3Vyc2l2ZSwgb3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0XHR2YXIgaW50ZXJzZWN0cyA9IG9wdGlvbmFsVGFyZ2V0IHx8IFtdO1xyXG5cclxuXHRcdGludGVyc2VjdE9iamVjdChvYmplY3QsIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSk7XHJcblxyXG5cdFx0aW50ZXJzZWN0cy5zb3J0KGFzY1NvcnQpO1xyXG5cclxuXHRcdHJldHVybiBpbnRlcnNlY3RzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RPYmplY3RzOiBmdW5jdGlvbiAob2JqZWN0cywgcmVjdXJzaXZlLCBvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHRcdHZhciBpbnRlcnNlY3RzID0gb3B0aW9uYWxUYXJnZXQgfHwgW107XHJcblxyXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqZWN0cykgPT09IGZhbHNlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzOiBvYmplY3RzIGlzIG5vdCBhbiBBcnJheS4nKTtcclxuXHRcdFx0cmV0dXJuIGludGVyc2VjdHM7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdGludGVyc2VjdE9iamVjdChvYmplY3RzW2ldLCB0aGlzLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpbnRlcnNlY3RzLnNvcnQoYXNjU29ydCk7XHJcblxyXG5cdFx0cmV0dXJuIGludGVyc2VjdHM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqXHJcbiAqIFJlZjogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BoZXJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXHJcbiAqXHJcbiAqIFRoZSBwb2xhciBhbmdsZSAocGhpKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB5LWF4aXMuIFRoZSBwb3NpdGl2ZSB5LWF4aXMgaXMgdXAuXHJcbiAqIFRoZSBhemltdXRoYWwgYW5nbGUgKHRoZXRhKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXouXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gU3BoZXJpY2FsKHJhZGl1cywgcGhpLCB0aGV0YSkge1xyXG5cclxuXHR0aGlzLnJhZGl1cyA9IChyYWRpdXMgIT09IHVuZGVmaW5lZCkgPyByYWRpdXMgOiAxLjA7XHJcblx0dGhpcy5waGkgPSAocGhpICE9PSB1bmRlZmluZWQpID8gcGhpIDogMDsgLy8gcG9sYXIgYW5nbGVcclxuXHR0aGlzLnRoZXRhID0gKHRoZXRhICE9PSB1bmRlZmluZWQpID8gdGhldGEgOiAwOyAvLyBhemltdXRoYWwgYW5nbGVcclxuXHJcblx0cmV0dXJuIHRoaXM7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKFNwaGVyaWNhbC5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAocmFkaXVzLCBwaGksIHRoZXRhKSB7XHJcblxyXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XHJcblx0XHR0aGlzLnBoaSA9IHBoaTtcclxuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAob3RoZXIpIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IG90aGVyLnJhZGl1cztcclxuXHRcdHRoaXMucGhpID0gb3RoZXIucGhpO1xyXG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlIEVQUyBhbmQgUEktRVBTXHJcblx0bWFrZVNhZmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgRVBTID0gMC4wMDAwMDE7XHJcblx0XHR0aGlzLnBoaSA9IE1hdGgubWF4KEVQUywgTWF0aC5taW4oTWF0aC5QSSAtIEVQUywgdGhpcy5waGkpKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVZlY3RvcjM6IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyh2LngsIHYueSwgdi56KTtcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKHgsIHksIHopIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG5cclxuXHRcdGlmICh0aGlzLnJhZGl1cyA9PT0gMCkge1xyXG5cclxuXHRcdFx0dGhpcy50aGV0YSA9IDA7XHJcblx0XHRcdHRoaXMucGhpID0gMDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoeCwgeik7XHJcblx0XHRcdHRoaXMucGhpID0gTWF0aC5hY29zKF9NYXRoLmNsYW1wKHkgLyB0aGlzLnJhZGl1cywgLSAxLCAxKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKlxyXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N5bGluZHJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXHJcbiAqXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gQ3lsaW5kcmljYWwocmFkaXVzLCB0aGV0YSwgeSkge1xyXG5cclxuXHR0aGlzLnJhZGl1cyA9IChyYWRpdXMgIT09IHVuZGVmaW5lZCkgPyByYWRpdXMgOiAxLjA7IC8vIGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiB0byBhIHBvaW50IGluIHRoZSB4LXogcGxhbmVcclxuXHR0aGlzLnRoZXRhID0gKHRoZXRhICE9PSB1bmRlZmluZWQpID8gdGhldGEgOiAwOyAvLyBjb3VudGVyY2xvY2t3aXNlIGFuZ2xlIGluIHRoZSB4LXogcGxhbmUgbWVhc3VyZWQgaW4gcmFkaWFucyBmcm9tIHRoZSBwb3NpdGl2ZSB6LWF4aXNcclxuXHR0aGlzLnkgPSAoeSAhPT0gdW5kZWZpbmVkKSA/IHkgOiAwOyAvLyBoZWlnaHQgYWJvdmUgdGhlIHgteiBwbGFuZVxyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24oQ3lsaW5kcmljYWwucHJvdG90eXBlLCB7XHJcblxyXG5cdHNldDogZnVuY3Rpb24gKHJhZGl1cywgdGhldGEsIHkpIHtcclxuXHJcblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcclxuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcclxuXHRcdHRoaXMueSA9IHk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKG90aGVyKSB7XHJcblxyXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XHJcblx0XHR0aGlzLnRoZXRhID0gb3RoZXIudGhldGE7XHJcblx0XHR0aGlzLnkgPSBvdGhlci55O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tQ2FydGVzaWFuQ29vcmRzKHYueCwgdi55LCB2LnopO1xyXG5cclxuXHR9LFxyXG5cclxuXHRzZXRGcm9tQ2FydGVzaWFuQ29vcmRzOiBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG5cclxuXHRcdHRoaXMucmFkaXVzID0gTWF0aC5zcXJ0KHggKiB4ICsgeiAqIHopO1xyXG5cdFx0dGhpcy50aGV0YSA9IE1hdGguYXRhbjIoeCwgeik7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxudmFyIF92ZWN0b3IkNiA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5mdW5jdGlvbiBCb3gyKG1pbiwgbWF4KSB7XHJcblxyXG5cdHRoaXMubWluID0gKG1pbiAhPT0gdW5kZWZpbmVkKSA/IG1pbiA6IG5ldyBWZWN0b3IyKCsgSW5maW5pdHksICsgSW5maW5pdHkpO1xyXG5cdHRoaXMubWF4ID0gKG1heCAhPT0gdW5kZWZpbmVkKSA/IG1heCA6IG5ldyBWZWN0b3IyKC0gSW5maW5pdHksIC0gSW5maW5pdHkpO1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihCb3gyLnByb3RvdHlwZSwge1xyXG5cclxuXHRzZXQ6IGZ1bmN0aW9uIChtaW4sIG1heCkge1xyXG5cclxuXHRcdHRoaXMubWluLmNvcHkobWluKTtcclxuXHRcdHRoaXMubWF4LmNvcHkobWF4KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKHBvaW50cykge1xyXG5cclxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuXHJcblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludChwb2ludHNbaV0pO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uIChjZW50ZXIsIHNpemUpIHtcclxuXHJcblx0XHR2YXIgaGFsZlNpemUgPSBfdmVjdG9yJDYuY29weShzaXplKS5tdWx0aXBseVNjYWxhcigwLjUpO1xyXG5cdFx0dGhpcy5taW4uY29weShjZW50ZXIpLnN1YihoYWxmU2l6ZSk7XHJcblx0XHR0aGlzLm1heC5jb3B5KGNlbnRlcikuYWRkKGhhbGZTaXplKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb3B5OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0dGhpcy5taW4uY29weShib3gubWluKTtcclxuXHRcdHRoaXMubWF4LmNvcHkoYm94Lm1heCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdG1ha2VFbXB0eTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdHRoaXMubWluLnggPSB0aGlzLm1pbi55ID0gKyBJbmZpbml0eTtcclxuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gLSBJbmZpbml0eTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0aXNFbXB0eTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXHJcblxyXG5cdFx0cmV0dXJuICh0aGlzLm1heC54IDwgdGhpcy5taW4ueCkgfHwgKHRoaXMubWF4LnkgPCB0aGlzLm1pbi55KTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDI6IC5nZXRDZW50ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoMCwgMCkgOiB0YXJnZXQuYWRkVmVjdG9ycyh0aGlzLm1pbiwgdGhpcy5tYXgpLm11bHRpcGx5U2NhbGFyKDAuNSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldFNpemU6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MjogLmdldFNpemUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoMCwgMCkgOiB0YXJnZXQuc3ViVmVjdG9ycyh0aGlzLm1heCwgdGhpcy5taW4pO1xyXG5cclxuXHR9LFxyXG5cclxuXHRleHBhbmRCeVBvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5taW4ocG9pbnQpO1xyXG5cdFx0dGhpcy5tYXgubWF4KHBvaW50KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0ZXhwYW5kQnlWZWN0b3I6IGZ1bmN0aW9uICh2ZWN0b3IpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5zdWIodmVjdG9yKTtcclxuXHRcdHRoaXMubWF4LmFkZCh2ZWN0b3IpO1xyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cclxuXHR9LFxyXG5cclxuXHRleHBhbmRCeVNjYWxhcjogZnVuY3Rpb24gKHNjYWxhcikge1xyXG5cclxuXHRcdHRoaXMubWluLmFkZFNjYWxhcigtIHNjYWxhcik7XHJcblx0XHR0aGlzLm1heC5hZGRTY2FsYXIoc2NhbGFyKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKHBvaW50KSB7XHJcblxyXG5cdFx0cmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8XHJcblx0XHRcdHBvaW50LnkgPCB0aGlzLm1pbi55IHx8IHBvaW50LnkgPiB0aGlzLm1heC55ID8gZmFsc2UgOiB0cnVlO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjb250YWluc0JveDogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxyXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueTtcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0UGFyYW1ldGVyOiBmdW5jdGlvbiAocG9pbnQsIHRhcmdldCkge1xyXG5cclxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XHJcblx0XHQvLyBoYXMgYSBzaXplIGRpbWVuc2lvbiBvZiAwLlxyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Cb3gyOiAuZ2V0UGFyYW1ldGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LnNldChcclxuXHRcdFx0KHBvaW50LnggLSB0aGlzLm1pbi54KSAvICh0aGlzLm1heC54IC0gdGhpcy5taW4ueCksXHJcblx0XHRcdChwb2ludC55IC0gdGhpcy5taW4ueSkgLyAodGhpcy5tYXgueSAtIHRoaXMubWluLnkpXHJcblx0XHQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRpbnRlcnNlY3RzQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0Ly8gdXNpbmcgNCBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnNcclxuXHJcblx0XHRyZXR1cm4gYm94Lm1heC54IDwgdGhpcy5taW4ueCB8fCBib3gubWluLnggPiB0aGlzLm1heC54IHx8XHJcblx0XHRcdGJveC5tYXgueSA8IHRoaXMubWluLnkgfHwgYm94Lm1pbi55ID4gdGhpcy5tYXgueSA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKHBvaW50LCB0YXJnZXQpIHtcclxuXHJcblx0XHRpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MjogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuY29weShwb2ludCkuY2xhbXAodGhpcy5taW4sIHRoaXMubWF4KTtcclxuXHJcblx0fSxcclxuXHJcblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcclxuXHJcblx0XHR2YXIgY2xhbXBlZFBvaW50ID0gX3ZlY3RvciQ2LmNvcHkocG9pbnQpLmNsYW1wKHRoaXMubWluLCB0aGlzLm1heCk7XHJcblx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1Yihwb2ludCkubGVuZ3RoKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdHRoaXMubWluLm1heChib3gubWluKTtcclxuXHRcdHRoaXMubWF4Lm1pbihib3gubWF4KTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0dW5pb246IGZ1bmN0aW9uIChib3gpIHtcclxuXHJcblx0XHR0aGlzLm1pbi5taW4oYm94Lm1pbik7XHJcblx0XHR0aGlzLm1heC5tYXgoYm94Lm1heCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKG9mZnNldCkge1xyXG5cclxuXHRcdHRoaXMubWluLmFkZChvZmZzZXQpO1xyXG5cdFx0dGhpcy5tYXguYWRkKG9mZnNldCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdHJldHVybiBib3gubWluLmVxdWFscyh0aGlzLm1pbikgJiYgYm94Lm1heC5lcXVhbHModGhpcy5tYXgpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXHJcbiAqL1xyXG5cclxudmFyIF9zdGFydFAgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3N0YXJ0RW5kID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIExpbmUzKHN0YXJ0LCBlbmQpIHtcclxuXHJcblx0dGhpcy5zdGFydCA9IChzdGFydCAhPT0gdW5kZWZpbmVkKSA/IHN0YXJ0IDogbmV3IFZlY3RvcjMoKTtcclxuXHR0aGlzLmVuZCA9IChlbmQgIT09IHVuZGVmaW5lZCkgPyBlbmQgOiBuZXcgVmVjdG9yMygpO1xyXG5cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbihMaW5lMy5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0OiBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xyXG5cclxuXHRcdHRoaXMuc3RhcnQuY29weShzdGFydCk7XHJcblx0XHR0aGlzLmVuZC5jb3B5KGVuZCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSh0aGlzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKGxpbmUpIHtcclxuXHJcblx0XHR0aGlzLnN0YXJ0LmNvcHkobGluZS5zdGFydCk7XHJcblx0XHR0aGlzLmVuZC5jb3B5KGxpbmUuZW5kKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Z2V0Q2VudGVyOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpbmUzOiAuZ2V0Q2VudGVyKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcpO1xyXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGFyZ2V0LmFkZFZlY3RvcnModGhpcy5zdGFydCwgdGhpcy5lbmQpLm11bHRpcGx5U2NhbGFyKDAuNSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRlbHRhOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpbmUzOiAuZGVsdGEoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyh0aGlzLmVuZCwgdGhpcy5zdGFydCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlU3E6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zdGFydC5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmVuZCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRpc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUbyh0aGlzLmVuZCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGF0OiBmdW5jdGlvbiAodCwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpbmUzOiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmRlbHRhKHRhcmdldCkubXVsdGlwbHlTY2FsYXIodCkuYWRkKHRoaXMuc3RhcnQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyOiBmdW5jdGlvbiAocG9pbnQsIGNsYW1wVG9MaW5lKSB7XHJcblxyXG5cdFx0X3N0YXJ0UC5zdWJWZWN0b3JzKHBvaW50LCB0aGlzLnN0YXJ0KTtcclxuXHRcdF9zdGFydEVuZC5zdWJWZWN0b3JzKHRoaXMuZW5kLCB0aGlzLnN0YXJ0KTtcclxuXHJcblx0XHR2YXIgc3RhcnRFbmQyID0gX3N0YXJ0RW5kLmRvdChfc3RhcnRFbmQpO1xyXG5cdFx0dmFyIHN0YXJ0RW5kX3N0YXJ0UCA9IF9zdGFydEVuZC5kb3QoX3N0YXJ0UCk7XHJcblxyXG5cdFx0dmFyIHQgPSBzdGFydEVuZF9zdGFydFAgLyBzdGFydEVuZDI7XHJcblxyXG5cdFx0aWYgKGNsYW1wVG9MaW5lKSB7XHJcblxyXG5cdFx0XHR0ID0gX01hdGguY2xhbXAodCwgMCwgMSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0O1xyXG5cclxuXHR9LFxyXG5cclxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAocG9pbnQsIGNsYW1wVG9MaW5lLCB0YXJnZXQpIHtcclxuXHJcblx0XHR2YXIgdCA9IHRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcihwb2ludCwgY2xhbXBUb0xpbmUpO1xyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5MaW5lMzogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyk7XHJcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLmRlbHRhKHRhcmdldCkubXVsdGlwbHlTY2FsYXIodCkuYWRkKHRoaXMuc3RhcnQpO1xyXG5cclxuXHR9LFxyXG5cclxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuXHJcblx0XHR0aGlzLnN0YXJ0LmFwcGx5TWF0cml4NChtYXRyaXgpO1xyXG5cdFx0dGhpcy5lbmQuYXBwbHlNYXRyaXg0KG1hdHJpeCk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH0sXHJcblxyXG5cdGVxdWFsczogZnVuY3Rpb24gKGxpbmUpIHtcclxuXHJcblx0XHRyZXR1cm4gbGluZS5zdGFydC5lcXVhbHModGhpcy5zdGFydCkgJiYgbGluZS5lbmQuZXF1YWxzKHRoaXMuZW5kKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBJbW1lZGlhdGVSZW5kZXJPYmplY3QobWF0ZXJpYWwpIHtcclxuXHJcblx0T2JqZWN0M0QuY2FsbCh0aGlzKTtcclxuXHJcblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xyXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCAvKiByZW5kZXJDYWxsYmFjayAqLykgeyB9O1xyXG5cclxufVxyXG5cclxuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKTtcclxuSW1tZWRpYXRlUmVuZGVyT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEltbWVkaWF0ZVJlbmRlck9iamVjdDtcclxuXHJcbkltbWVkaWF0ZVJlbmRlck9iamVjdC5wcm90b3R5cGUuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgPSB0cnVlO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKi9cclxuXHJcbnZhciBfdjEkNSA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfdjIkMyA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfbm9ybWFsTWF0cml4JDEgPSBuZXcgTWF0cml4MygpO1xyXG52YXIgX2tleXMgPSBbJ2EnLCAnYicsICdjJ107XHJcblxyXG5mdW5jdGlvbiBWZXJ0ZXhOb3JtYWxzSGVscGVyKG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGgpIHtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblxyXG5cdHRoaXMuc2l6ZSA9IChzaXplICE9PSB1bmRlZmluZWQpID8gc2l6ZSA6IDE7XHJcblxyXG5cdHZhciBjb2xvciA9IChoZXggIT09IHVuZGVmaW5lZCkgPyBoZXggOiAweGZmMDAwMDtcclxuXHJcblx0dmFyIHdpZHRoID0gKGxpbmV3aWR0aCAhPT0gdW5kZWZpbmVkKSA/IGxpbmV3aWR0aCA6IDE7XHJcblxyXG5cdC8vXHJcblxyXG5cdHZhciBuTm9ybWFscyA9IDA7XHJcblxyXG5cdHZhciBvYmpHZW9tZXRyeSA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5O1xyXG5cclxuXHRpZiAob2JqR2VvbWV0cnkgJiYgb2JqR2VvbWV0cnkuaXNHZW9tZXRyeSkge1xyXG5cclxuXHRcdG5Ob3JtYWxzID0gb2JqR2VvbWV0cnkuZmFjZXMubGVuZ3RoICogMztcclxuXHJcblx0fSBlbHNlIGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbC5jb3VudDtcclxuXHJcblx0fVxyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHJcblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKG5Ob3JtYWxzICogMiAqIDMsIDMpO1xyXG5cclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgcG9zaXRpb25zKTtcclxuXHJcblx0TGluZVNlZ21lbnRzLmNhbGwodGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiBjb2xvciwgbGluZXdpZHRoOiB3aWR0aCB9KSk7XHJcblxyXG5cdC8vXHJcblxyXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxufVxyXG5cclxuVmVydGV4Tm9ybWFsc0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xyXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZlcnRleE5vcm1hbHNIZWxwZXI7XHJcblxyXG5WZXJ0ZXhOb3JtYWxzSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuXHRfbm9ybWFsTWF0cml4JDEuZ2V0Tm9ybWFsTWF0cml4KHRoaXMub2JqZWN0Lm1hdHJpeFdvcmxkKTtcclxuXHJcblx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5vYmplY3QubWF0cml4V29ybGQ7XHJcblxyXG5cdHZhciBwb3NpdGlvbiA9IHRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcclxuXHJcblx0Ly9cclxuXHJcblx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIHZlcnRpY2VzID0gb2JqR2VvbWV0cnkudmVydGljZXM7XHJcblxyXG5cdFx0dmFyIGZhY2VzID0gb2JqR2VvbWV0cnkuZmFjZXM7XHJcblxyXG5cdFx0dmFyIGlkeCA9IDA7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHRcdHZhciBmYWNlID0gZmFjZXNbaV07XHJcblxyXG5cdFx0XHRmb3IgKHZhciBqID0gMCwgamwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0XHR2YXIgdmVydGV4ID0gdmVydGljZXNbZmFjZVtfa2V5c1tqXV1dO1xyXG5cclxuXHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzW2pdO1xyXG5cclxuXHRcdFx0XHRfdjEkNS5jb3B5KHZlcnRleCkuYXBwbHlNYXRyaXg0KG1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdFx0X3YyJDMuY29weShub3JtYWwpLmFwcGx5TWF0cml4Myhfbm9ybWFsTWF0cml4JDEpLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuc2l6ZSkuYWRkKF92MSQ1KTtcclxuXHJcblx0XHRcdFx0cG9zaXRpb24uc2V0WFlaKGlkeCwgX3YxJDUueCwgX3YxJDUueSwgX3YxJDUueik7XHJcblxyXG5cdFx0XHRcdGlkeCA9IGlkeCArIDE7XHJcblxyXG5cdFx0XHRcdHBvc2l0aW9uLnNldFhZWihpZHgsIF92MiQzLngsIF92MiQzLnksIF92MiQzLnopO1xyXG5cclxuXHRcdFx0XHRpZHggPSBpZHggKyAxO1xyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0fSBlbHNlIGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KSB7XHJcblxyXG5cdFx0dmFyIG9ialBvcyA9IG9iakdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XHJcblxyXG5cdFx0dmFyIG9iak5vcm0gPSBvYmpHZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbDtcclxuXHJcblx0XHR2YXIgaWR4ID0gMDtcclxuXHJcblx0XHQvLyBmb3Igc2ltcGxpY2l0eSwgaWdub3JlIGluZGV4IGFuZCBkcmF3Y2FsbHMsIGFuZCByZW5kZXIgZXZlcnkgbm9ybWFsXHJcblxyXG5cdFx0Zm9yICh2YXIgaiA9IDAsIGpsID0gb2JqUG9zLmNvdW50OyBqIDwgamw7IGorKykge1xyXG5cclxuXHRcdFx0X3YxJDUuc2V0KG9ialBvcy5nZXRYKGopLCBvYmpQb3MuZ2V0WShqKSwgb2JqUG9zLmdldFooaikpLmFwcGx5TWF0cml4NChtYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0XHRfdjIkMy5zZXQob2JqTm9ybS5nZXRYKGopLCBvYmpOb3JtLmdldFkoaiksIG9iak5vcm0uZ2V0WihqKSk7XHJcblxyXG5cdFx0XHRfdjIkMy5hcHBseU1hdHJpeDMoX25vcm1hbE1hdHJpeCQxKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLnNpemUpLmFkZChfdjEkNSk7XHJcblxyXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjEkNS54LCBfdjEkNS55LCBfdjEkNS56KTtcclxuXHJcblx0XHRcdGlkeCA9IGlkeCArIDE7XHJcblxyXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjIkMy54LCBfdjIkMy55LCBfdjIkMy56KTtcclxuXHJcblx0XHRcdGlkeCA9IGlkeCArIDE7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqL1xyXG5cclxudmFyIF92ZWN0b3IkNyA9IG5ldyBWZWN0b3IzKCk7XHJcblxyXG5mdW5jdGlvbiBTcG90TGlnaHRIZWxwZXIobGlnaHQsIGNvbG9yKSB7XHJcblxyXG5cdE9iamVjdDNELmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcclxuXHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XHJcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdHZhciBwb3NpdGlvbnMgPSBbXHJcblx0XHQwLCAwLCAwLCAwLCAwLCAxLFxyXG5cdFx0MCwgMCwgMCwgMSwgMCwgMSxcclxuXHRcdDAsIDAsIDAsIC0gMSwgMCwgMSxcclxuXHRcdDAsIDAsIDAsIDAsIDEsIDEsXHJcblx0XHQwLCAwLCAwLCAwLCAtIDEsIDFcclxuXHRdO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDEsIGwgPSAzMjsgaSA8IGw7IGkrKywgaisrKSB7XHJcblxyXG5cdFx0dmFyIHAxID0gKGkgLyBsKSAqIE1hdGguUEkgKiAyO1xyXG5cdFx0dmFyIHAyID0gKGogLyBsKSAqIE1hdGguUEkgKiAyO1xyXG5cclxuXHRcdHBvc2l0aW9ucy5wdXNoKFxyXG5cdFx0XHRNYXRoLmNvcyhwMSksIE1hdGguc2luKHAxKSwgMSxcclxuXHRcdFx0TWF0aC5jb3MocDIpLCBNYXRoLnNpbihwMiksIDFcclxuXHRcdCk7XHJcblxyXG5cdH1cclxuXHJcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpO1xyXG5cclxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBmb2c6IGZhbHNlIH0pO1xyXG5cclxuXHR0aGlzLmNvbmUgPSBuZXcgTGluZVNlZ21lbnRzKGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblx0dGhpcy5hZGQodGhpcy5jb25lKTtcclxuXHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHJcbn1cclxuXHJcblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSk7XHJcblNwb3RMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTcG90TGlnaHRIZWxwZXI7XHJcblxyXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuY29uZS5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcbn07XHJcblxyXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHR2YXIgY29uZUxlbmd0aCA9IHRoaXMubGlnaHQuZGlzdGFuY2UgPyB0aGlzLmxpZ2h0LmRpc3RhbmNlIDogMTAwMDtcclxuXHR2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKHRoaXMubGlnaHQuYW5nbGUpO1xyXG5cclxuXHR0aGlzLmNvbmUuc2NhbGUuc2V0KGNvbmVXaWR0aCwgY29uZVdpZHRoLCBjb25lTGVuZ3RoKTtcclxuXHJcblx0X3ZlY3RvciQ3LnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdHRoaXMuY29uZS5sb29rQXQoX3ZlY3RvciQ3KTtcclxuXHJcblx0aWYgKHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQodGhpcy5jb2xvcik7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcik7XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBTZWFuIEdyaWZmaW4gLyBodHRwOi8vdHdpdHRlci5jb20vc2dyaWZcclxuICogQGF1dGhvciBNaWNoYWVsIEd1ZXJyZXJvIC8gaHR0cDovL3JlYWxpdHltZWx0ZG93bi5jb21cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqL1xyXG5cclxudmFyIF92ZWN0b3IkOCA9IG5ldyBWZWN0b3IzKCk7XHJcbnZhciBfYm9uZU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XHJcbnZhciBfbWF0cml4V29ybGRJbnYgPSBuZXcgTWF0cml4NCgpO1xyXG5cclxuZnVuY3Rpb24gZ2V0Qm9uZUxpc3Qob2JqZWN0KSB7XHJcblxyXG5cdHZhciBib25lTGlzdCA9IFtdO1xyXG5cclxuXHRpZiAob2JqZWN0ICYmIG9iamVjdC5pc0JvbmUpIHtcclxuXHJcblx0XHRib25lTGlzdC5wdXNoKG9iamVjdCk7XHJcblxyXG5cdH1cclxuXHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHRib25lTGlzdC5wdXNoLmFwcGx5KGJvbmVMaXN0LCBnZXRCb25lTGlzdChvYmplY3QuY2hpbGRyZW5baV0pKTtcclxuXHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYm9uZUxpc3Q7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBTa2VsZXRvbkhlbHBlcihvYmplY3QpIHtcclxuXHJcblx0dmFyIGJvbmVzID0gZ2V0Qm9uZUxpc3Qob2JqZWN0KTtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cdHZhciBjb2xvcnMgPSBbXTtcclxuXHJcblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigwLCAwLCAxKTtcclxuXHR2YXIgY29sb3IyID0gbmV3IENvbG9yKDAsIDEsIDApO1xyXG5cclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSsrKSB7XHJcblxyXG5cdFx0dmFyIGJvbmUgPSBib25lc1tpXTtcclxuXHJcblx0XHRpZiAoYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lKSB7XHJcblxyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKDAsIDAsIDApO1xyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKDAsIDAsIDApO1xyXG5cdFx0XHRjb2xvcnMucHVzaChjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iKTtcclxuXHRcdFx0Y29sb3JzLnB1c2goY29sb3IyLnIsIGNvbG9yMi5nLCBjb2xvcjIuYik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKTtcclxuXHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0cmFuc3BhcmVudDogdHJ1ZSB9KTtcclxuXHJcblx0TGluZVNlZ21lbnRzLmNhbGwodGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcblx0dGhpcy5yb290ID0gb2JqZWN0O1xyXG5cdHRoaXMuYm9uZXMgPSBib25lcztcclxuXHJcblx0dGhpcy5tYXRyaXggPSBvYmplY3QubWF0cml4V29ybGQ7XHJcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG59XHJcblxyXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xyXG5Ta2VsZXRvbkhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTa2VsZXRvbkhlbHBlcjtcclxuXHJcblNrZWxldG9uSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uIChmb3JjZSkge1xyXG5cclxuXHR2YXIgYm9uZXMgPSB0aGlzLmJvbmVzO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSB0aGlzLmdlb21ldHJ5O1xyXG5cdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSgncG9zaXRpb24nKTtcclxuXHJcblx0X21hdHJpeFdvcmxkSW52LmdldEludmVyc2UodGhpcy5yb290Lm1hdHJpeFdvcmxkKTtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYm9uZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcblx0XHR2YXIgYm9uZSA9IGJvbmVzW2ldO1xyXG5cclxuXHRcdGlmIChib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUpIHtcclxuXHJcblx0XHRcdF9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoX21hdHJpeFdvcmxkSW52LCBib25lLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0X3ZlY3RvciQ4LnNldEZyb21NYXRyaXhQb3NpdGlvbihfYm9uZU1hdHJpeCk7XHJcblx0XHRcdHBvc2l0aW9uLnNldFhZWihqLCBfdmVjdG9yJDgueCwgX3ZlY3RvciQ4LnksIF92ZWN0b3IkOC56KTtcclxuXHJcblx0XHRcdF9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoX21hdHJpeFdvcmxkSW52LCBib25lLnBhcmVudC5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdF92ZWN0b3IkOC5zZXRGcm9tTWF0cml4UG9zaXRpb24oX2JvbmVNYXRyaXgpO1xyXG5cdFx0XHRwb3NpdGlvbi5zZXRYWVooaiArIDEsIF92ZWN0b3IkOC54LCBfdmVjdG9yJDgueSwgX3ZlY3RvciQ4LnopO1xyXG5cclxuXHRcdFx0aiArPSAyO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJykubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLCBmb3JjZSk7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUG9pbnRMaWdodEhlbHBlcihsaWdodCwgc3BoZXJlU2l6ZSwgY29sb3IpIHtcclxuXHJcblx0dGhpcy5saWdodCA9IGxpZ2h0O1xyXG5cdHRoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcblx0dGhpcy5jb2xvciA9IGNvbG9yO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoc3BoZXJlU2l6ZSwgNCwgMik7XHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlIH0pO1xyXG5cclxuXHRNZXNoLmNhbGwodGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsKTtcclxuXHJcblx0dGhpcy5tYXRyaXggPSB0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkO1xyXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHJcblx0LypcclxuXHR2YXIgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCAxLCAyICk7XHJcblx0dmFyIGRpc3RhbmNlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGhleENvbG9yLCBmb2c6IGZhbHNlLCB3aXJlZnJhbWU6IHRydWUsIG9wYWNpdHk6IDAuMSwgdHJhbnNwYXJlbnQ6IHRydWUgfSApO1xyXG5cclxuXHR0aGlzLmxpZ2h0U3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGJ1bGJHZW9tZXRyeSwgYnVsYk1hdGVyaWFsICk7XHJcblx0dGhpcy5saWdodERpc3RhbmNlID0gbmV3IFRIUkVFLk1lc2goIGRpc3RhbmNlR2VvbWV0cnksIGRpc3RhbmNlTWF0ZXJpYWwgKTtcclxuXHJcblx0dmFyIGQgPSBsaWdodC5kaXN0YW5jZTtcclxuXHJcblx0aWYgKCBkID09PSAwLjAgKSB7XHJcblxyXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2Uuc2NhbGUuc2V0KCBkLCBkLCBkICk7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5hZGQoIHRoaXMubGlnaHREaXN0YW5jZSApO1xyXG5cdCovXHJcblxyXG59XHJcblxyXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTWVzaC5wcm90b3R5cGUpO1xyXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50TGlnaHRIZWxwZXI7XHJcblxyXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHR0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcbn07XHJcblxyXG5Qb2ludExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdGlmICh0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLmNvcHkodGhpcy5saWdodC5jb2xvcik7XHJcblxyXG5cdH1cclxuXHJcblx0LypcclxuXHR2YXIgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XHJcblxyXG5cdGlmICggZCA9PT0gMC4wICkge1xyXG5cclxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnZpc2libGUgPSB0cnVlO1xyXG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xyXG5cclxuXHR9XHJcblx0Ki9cclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKlxyXG4gKiAgVGhpcyBoZWxwZXIgbXVzdCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIHRoZSBsaWdodFxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFJlY3RBcmVhTGlnaHRIZWxwZXIobGlnaHQsIGNvbG9yKSB7XHJcblxyXG5cdHRoaXMudHlwZSA9ICdSZWN0QXJlYUxpZ2h0SGVscGVyJztcclxuXHJcblx0dGhpcy5saWdodCA9IGxpZ2h0O1xyXG5cclxuXHR0aGlzLmNvbG9yID0gY29sb3I7IC8vIG9wdGlvbmFsIGhhcmR3aXJlZCBjb2xvciBmb3IgdGhlIGhlbHBlclxyXG5cclxuXHR2YXIgcG9zaXRpb25zID0gWzEsIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIC0gMSwgMCwgMSwgMSwgMF07XHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcclxuXHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcclxuXHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgZm9nOiBmYWxzZSB9KTtcclxuXHJcblx0TGluZS5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG5cdC8vXHJcblxyXG5cdHZhciBwb3NpdGlvbnMyID0gWzEsIDEsIDAsIC0gMSwgMSwgMCwgLSAxLCAtIDEsIDAsIDEsIDEsIDAsIC0gMSwgLSAxLCAwLCAxLCAtIDEsIDBdO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0Z2VvbWV0cnkyLmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMyLCAzKSk7XHJcblx0Z2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHR0aGlzLmFkZChuZXcgTWVzaChnZW9tZXRyeTIsIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IHNpZGU6IEJhY2tTaWRlLCBmb2c6IGZhbHNlIH0pKSk7XHJcblxyXG5cdHRoaXMudXBkYXRlKCk7XHJcblxyXG59XHJcblxyXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZS5wcm90b3R5cGUpO1xyXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY3RBcmVhTGlnaHRIZWxwZXI7XHJcblxyXG5SZWN0QXJlYUxpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuc2NhbGUuc2V0KDAuNSAqIHRoaXMubGlnaHQud2lkdGgsIDAuNSAqIHRoaXMubGlnaHQuaGVpZ2h0LCAxKTtcclxuXHJcblx0aWYgKHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpO1xyXG5cdFx0dGhpcy5jaGlsZHJlblswXS5tYXRlcmlhbC5jb2xvci5zZXQodGhpcy5jb2xvcik7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLm11bHRpcGx5U2NhbGFyKHRoaXMubGlnaHQuaW50ZW5zaXR5KTtcclxuXHJcblx0XHQvLyBwcmV2ZW50IGh1ZSBzaGlmdFxyXG5cdFx0dmFyIGMgPSB0aGlzLm1hdGVyaWFsLmNvbG9yO1xyXG5cdFx0dmFyIG1heCA9IE1hdGgubWF4KGMuciwgYy5nLCBjLmIpO1xyXG5cdFx0aWYgKG1heCA+IDEpIHsgYy5tdWx0aXBseVNjYWxhcigxIC8gbWF4KTsgfVxyXG5cclxuXHRcdHRoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLm1hdGVyaWFsLmNvbG9yKTtcclxuXHJcblx0fVxyXG5cclxufTtcclxuXHJcblJlY3RBcmVhTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cdHRoaXMuY2hpbGRyZW5bMF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdHRoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbnZhciBfdmVjdG9yJDkgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2NvbG9yMSA9IG5ldyBDb2xvcigpO1xyXG52YXIgX2NvbG9yMiA9IG5ldyBDb2xvcigpO1xyXG5cclxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0SGVscGVyKGxpZ2h0LCBzaXplLCBjb2xvcikge1xyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHR0aGlzLmxpZ2h0ID0gbGlnaHQ7XHJcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuXHR0aGlzLm1hdHJpeCA9IGxpZ2h0Lm1hdHJpeFdvcmxkO1xyXG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHR0aGlzLmNvbG9yID0gY29sb3I7XHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkoc2l6ZSk7XHJcblx0Z2VvbWV0cnkucm90YXRlWShNYXRoLlBJICogMC41KTtcclxuXHJcblx0dGhpcy5tYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSB9KTtcclxuXHRpZiAodGhpcy5jb2xvciA9PT0gdW5kZWZpbmVkKSB7IHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gVmVydGV4Q29sb3JzOyB9XHJcblxyXG5cdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSgncG9zaXRpb24nKTtcclxuXHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbi5jb3VudCAqIDMpO1xyXG5cclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKTtcclxuXHJcblx0dGhpcy5hZGQobmV3IE1lc2goZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwpKTtcclxuXHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHJcbn1cclxuXHJcbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSk7XHJcbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIZW1pc3BoZXJlTGlnaHRIZWxwZXI7XHJcblxyXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuY2hpbGRyZW5bMF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdHRoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxufTtcclxuXHJcbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgbWVzaCA9IHRoaXMuY2hpbGRyZW5bMF07XHJcblxyXG5cdGlmICh0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR2YXIgY29sb3JzID0gbWVzaC5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ2NvbG9yJyk7XHJcblxyXG5cdFx0X2NvbG9yMS5jb3B5KHRoaXMubGlnaHQuY29sb3IpO1xyXG5cdFx0X2NvbG9yMi5jb3B5KHRoaXMubGlnaHQuZ3JvdW5kQ29sb3IpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gY29sb3JzLmNvdW50OyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgY29sb3IgPSAoaSA8IChsIC8gMikpID8gX2NvbG9yMSA6IF9jb2xvcjI7XHJcblxyXG5cdFx0XHRjb2xvcnMuc2V0WFlaKGksIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR9XHJcblxyXG5cdG1lc2gubG9va0F0KF92ZWN0b3IkOS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC5tYXRyaXhXb3JsZCkubmVnYXRlKCkpO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICovXHJcblxyXG5mdW5jdGlvbiBMaWdodFByb2JlSGVscGVyKGxpZ2h0UHJvYmUsIHNpemUpIHtcclxuXHJcblx0dGhpcy5saWdodFByb2JlID0gbGlnaHRQcm9iZTtcclxuXHJcblx0dGhpcy5zaXplID0gc2l6ZTtcclxuXHJcblx0dmFyIGRlZmluZXMgPSB7fTtcclxuXHRkZWZpbmVzWydHQU1NQV9PVVRQVVQnXSA9IFwiXCI7XHJcblxyXG5cdC8vIG1hdGVyaWFsXHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IFNoYWRlck1hdGVyaWFsKHtcclxuXHJcblx0XHRkZWZpbmVzOiBkZWZpbmVzLFxyXG5cclxuXHRcdHVuaWZvcm1zOiB7XHJcblxyXG5cdFx0XHRzaDogeyB2YWx1ZTogdGhpcy5saWdodFByb2JlLnNoLmNvZWZmaWNpZW50cyB9LCAvLyBieSByZWZlcmVuY2VcclxuXHJcblx0XHRcdGludGVuc2l0eTogeyB2YWx1ZTogdGhpcy5saWdodFByb2JlLmludGVuc2l0eSB9XHJcblxyXG5cdFx0fSxcclxuXHJcblx0XHR2ZXJ0ZXhTaGFkZXI6IFtcclxuXHJcblx0XHRcdCd2YXJ5aW5nIHZlYzMgdk5vcm1hbDsnLFxyXG5cclxuXHRcdFx0J3ZvaWQgbWFpbigpIHsnLFxyXG5cclxuXHRcdFx0J1x0dk5vcm1hbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogbm9ybWFsICk7JyxcclxuXHJcblx0XHRcdCdcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsnLFxyXG5cclxuXHRcdFx0J30nXS5qb2luKCdcXG4nKSxcclxuXHJcblx0XHRmcmFnbWVudFNoYWRlcjogW1xyXG5cclxuXHRcdFx0JyNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NicsXHJcblxyXG5cdFx0XHQndmVjMyBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIG5vcm1hbCwgaW4gbWF0NCBtYXRyaXggKSB7JyxcclxuXHJcblx0XHRcdCdcdC8vIG1hdHJpeCBpcyBhc3N1bWVkIHRvIGJlIG9ydGhvZ29uYWwnLFxyXG5cclxuXHRcdFx0J1x0cmV0dXJuIG5vcm1hbGl6ZSggKCB2ZWM0KCBub3JtYWwsIDAuMCApICogbWF0cml4ICkueHl6ICk7JyxcclxuXHJcblx0XHRcdCd9JyxcclxuXHJcblx0XHRcdCd2ZWMzIGxpbmVhclRvT3V0cHV0KCBpbiB2ZWMzIGEgKSB7JyxcclxuXHJcblx0XHRcdCdcdCNpZmRlZiBHQU1NQV9PVVRQVVQnLFxyXG5cclxuXHRcdFx0J1x0XHRyZXR1cm4gcG93KCBhLCB2ZWMzKCAxLjAgLyBmbG9hdCggR0FNTUFfRkFDVE9SICkgKSApOycsXHJcblxyXG5cdFx0XHQnXHQjZWxzZScsXHJcblxyXG5cdFx0XHQnXHRcdHJldHVybiBhOycsXHJcblxyXG5cdFx0XHQnXHQjZW5kaWYnLFxyXG5cclxuXHRcdFx0J30nLFxyXG5cclxuXHRcdFx0Jy8vIHNvdXJjZTogaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmJyxcclxuXHRcdFx0J3ZlYzMgc2hHZXRJcnJhZGlhbmNlQXQoIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIHNoQ29lZmZpY2llbnRzWyA5IF0gKSB7JyxcclxuXHJcblx0XHRcdCdcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGgnLFxyXG5cclxuXHRcdFx0J1x0ZmxvYXQgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejsnLFxyXG5cclxuXHRcdFx0J1x0Ly8gYmFuZCAwJyxcclxuXHRcdFx0J1x0dmVjMyByZXN1bHQgPSBzaENvZWZmaWNpZW50c1sgMCBdICogMC44ODYyMjc7JyxcclxuXHJcblx0XHRcdCdcdC8vIGJhbmQgMScsXHJcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMSBdICogMi4wICogMC41MTE2NjQgKiB5OycsXHJcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMiBdICogMi4wICogMC41MTE2NjQgKiB6OycsXHJcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgMyBdICogMi4wICogMC41MTE2NjQgKiB4OycsXHJcblxyXG5cdFx0XHQnXHQvLyBiYW5kIDInLFxyXG5cdFx0XHQnXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7JyxcclxuXHRcdFx0J1x0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA1IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6OycsXHJcblx0XHRcdCdcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTsnLFxyXG5cdFx0XHQnXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7JyxcclxuXHRcdFx0J1x0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA4IF0gKiAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApOycsXHJcblxyXG5cdFx0XHQnXHRyZXR1cm4gcmVzdWx0OycsXHJcblxyXG5cdFx0XHQnfScsXHJcblxyXG5cdFx0XHQndW5pZm9ybSB2ZWMzIHNoWyA5IF07IC8vIHNoIGNvZWZmaWNpZW50cycsXHJcblxyXG5cdFx0XHQndW5pZm9ybSBmbG9hdCBpbnRlbnNpdHk7IC8vIGxpZ2h0IHByb2JlIGludGVuc2l0eScsXHJcblxyXG5cdFx0XHQndmFyeWluZyB2ZWMzIHZOb3JtYWw7JyxcclxuXHJcblx0XHRcdCd2b2lkIG1haW4oKSB7JyxcclxuXHJcblx0XHRcdCdcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCB2Tm9ybWFsICk7JyxcclxuXHJcblx0XHRcdCdcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTsnLFxyXG5cclxuXHRcdFx0J1x0dmVjMyBpcnJhZGlhbmNlID0gc2hHZXRJcnJhZGlhbmNlQXQoIHdvcmxkTm9ybWFsLCBzaCApOycsXHJcblxyXG5cdFx0XHQnXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSBSRUNJUFJPQ0FMX1BJICogaXJyYWRpYW5jZSAqIGludGVuc2l0eTsnLFxyXG5cclxuXHRcdFx0J1x0b3V0Z29pbmdMaWdodCA9IGxpbmVhclRvT3V0cHV0KCBvdXRnb2luZ0xpZ2h0ICk7JyxcclxuXHJcblx0XHRcdCdcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIDEuMCApOycsXHJcblxyXG5cdFx0XHQnfSdcclxuXHJcblx0XHRdLmpvaW4oJ1xcbicpXHJcblxyXG5cdH0pO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoMSwgMzIsIDE2KTtcclxuXHJcblx0TWVzaC5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG5cdHRoaXMub25CZWZvcmVSZW5kZXIoKTtcclxuXHJcbn1cclxuXHJcbkxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNZXNoLnByb3RvdHlwZSk7XHJcbkxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGlnaHRQcm9iZUhlbHBlcjtcclxuXHJcbkxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cclxufTtcclxuXHJcbkxpZ2h0UHJvYmVIZWxwZXIucHJvdG90eXBlLm9uQmVmb3JlUmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR0aGlzLnBvc2l0aW9uLmNvcHkodGhpcy5saWdodFByb2JlLnBvc2l0aW9uKTtcclxuXHJcblx0dGhpcy5zY2FsZS5zZXQoMSwgMSwgMSkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKTtcclxuXHJcblx0dGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5pbnRlbnNpdHkudmFsdWUgPSB0aGlzLmxpZ2h0UHJvYmUuaW50ZW5zaXR5O1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEdyaWRIZWxwZXIoc2l6ZSwgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMikge1xyXG5cclxuXHRzaXplID0gc2l6ZSB8fCAxMDtcclxuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTA7XHJcblx0Y29sb3IxID0gbmV3IENvbG9yKGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQpO1xyXG5cdGNvbG9yMiA9IG5ldyBDb2xvcihjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4KTtcclxuXHJcblx0dmFyIGNlbnRlciA9IGRpdmlzaW9ucyAvIDI7XHJcblx0dmFyIHN0ZXAgPSBzaXplIC8gZGl2aXNpb25zO1xyXG5cdHZhciBoYWxmU2l6ZSA9IHNpemUgLyAyO1xyXG5cclxuXHR2YXIgdmVydGljZXMgPSBbXSwgY29sb3JzID0gW107XHJcblxyXG5cdGZvciAodmFyIGkgPSAwLCBqID0gMCwgayA9IC0gaGFsZlNpemU7IGkgPD0gZGl2aXNpb25zOyBpKyssIGsgKz0gc3RlcCkge1xyXG5cclxuXHRcdHZlcnRpY2VzLnB1c2goLSBoYWxmU2l6ZSwgMCwgaywgaGFsZlNpemUsIDAsIGspO1xyXG5cdFx0dmVydGljZXMucHVzaChrLCAwLCAtIGhhbGZTaXplLCBrLCAwLCBoYWxmU2l6ZSk7XHJcblxyXG5cdFx0dmFyIGNvbG9yID0gaSA9PT0gY2VudGVyID8gY29sb3IxIDogY29sb3IyO1xyXG5cclxuXHRcdGNvbG9yLnRvQXJyYXkoY29sb3JzLCBqKTsgaiArPSAzO1xyXG5cdFx0Y29sb3IudG9BcnJheShjb2xvcnMsIGopOyBqICs9IDM7XHJcblx0XHRjb2xvci50b0FycmF5KGNvbG9ycywgaik7IGogKz0gMztcclxuXHRcdGNvbG9yLnRvQXJyYXkoY29sb3JzLCBqKTsgaiArPSAzO1xyXG5cclxuXHR9XHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKTtcclxuXHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSk7XHJcblxyXG5cdExpbmVTZWdtZW50cy5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG59XHJcblxyXG5HcmlkSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShMaW5lU2VnbWVudHMucHJvdG90eXBlKSwge1xyXG5cclxuXHRjb25zdHJ1Y3RvcjogR3JpZEhlbHBlcixcclxuXHJcblx0Y29weTogZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRcdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSk7XHJcblxyXG5cdFx0dGhpcy5nZW9tZXRyeS5jb3B5KHNvdXJjZS5nZW9tZXRyeSk7XHJcblx0XHR0aGlzLm1hdGVyaWFsLmNvcHkoc291cmNlLm1hdGVyaWFsKTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fSxcclxuXHJcblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqIEBhdXRob3IgSGVjdGF0ZSAvIGh0dHA6Ly93d3cuZ2l0aHViLmNvbS9IZWN0YXRlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gUG9sYXJHcmlkSGVscGVyKHJhZGl1cywgcmFkaWFscywgY2lyY2xlcywgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMikge1xyXG5cclxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTA7XHJcblx0cmFkaWFscyA9IHJhZGlhbHMgfHwgMTY7XHJcblx0Y2lyY2xlcyA9IGNpcmNsZXMgfHwgODtcclxuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgNjQ7XHJcblx0Y29sb3IxID0gbmV3IENvbG9yKGNvbG9yMSAhPT0gdW5kZWZpbmVkID8gY29sb3IxIDogMHg0NDQ0NDQpO1xyXG5cdGNvbG9yMiA9IG5ldyBDb2xvcihjb2xvcjIgIT09IHVuZGVmaW5lZCA/IGNvbG9yMiA6IDB4ODg4ODg4KTtcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gW107XHJcblx0dmFyIGNvbG9ycyA9IFtdO1xyXG5cclxuXHR2YXIgeCwgejtcclxuXHR2YXIgdiwgaSwgaiwgciwgY29sb3I7XHJcblxyXG5cdC8vIGNyZWF0ZSB0aGUgcmFkaWFsc1xyXG5cclxuXHRmb3IgKGkgPSAwOyBpIDw9IHJhZGlhbHM7IGkrKykge1xyXG5cclxuXHRcdHYgPSAoaSAvIHJhZGlhbHMpICogKE1hdGguUEkgKiAyKTtcclxuXHJcblx0XHR4ID0gTWF0aC5zaW4odikgKiByYWRpdXM7XHJcblx0XHR6ID0gTWF0aC5jb3ModikgKiByYWRpdXM7XHJcblxyXG5cdFx0dmVydGljZXMucHVzaCgwLCAwLCAwKTtcclxuXHRcdHZlcnRpY2VzLnB1c2goeCwgMCwgeik7XHJcblxyXG5cdFx0Y29sb3IgPSAoaSAmIDEpID8gY29sb3IxIDogY29sb3IyO1xyXG5cclxuXHRcdGNvbG9ycy5wdXNoKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xyXG5cdFx0Y29sb3JzLnB1c2goY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XHJcblxyXG5cdH1cclxuXHJcblx0Ly8gY3JlYXRlIHRoZSBjaXJjbGVzXHJcblxyXG5cdGZvciAoaSA9IDA7IGkgPD0gY2lyY2xlczsgaSsrKSB7XHJcblxyXG5cdFx0Y29sb3IgPSAoaSAmIDEpID8gY29sb3IxIDogY29sb3IyO1xyXG5cclxuXHRcdHIgPSByYWRpdXMgLSAocmFkaXVzIC8gY2lyY2xlcyAqIGkpO1xyXG5cclxuXHRcdGZvciAoaiA9IDA7IGogPCBkaXZpc2lvbnM7IGorKykge1xyXG5cclxuXHRcdFx0Ly8gZmlyc3QgdmVydGV4XHJcblxyXG5cdFx0XHR2ID0gKGogLyBkaXZpc2lvbnMpICogKE1hdGguUEkgKiAyKTtcclxuXHJcblx0XHRcdHggPSBNYXRoLnNpbih2KSAqIHI7XHJcblx0XHRcdHogPSBNYXRoLmNvcyh2KSAqIHI7XHJcblxyXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKHgsIDAsIHopO1xyXG5cdFx0XHRjb2xvcnMucHVzaChjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcclxuXHJcblx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcclxuXHJcblx0XHRcdHYgPSAoKGogKyAxKSAvIGRpdmlzaW9ucykgKiAoTWF0aC5QSSAqIDIpO1xyXG5cclxuXHRcdFx0eCA9IE1hdGguc2luKHYpICogcjtcclxuXHRcdFx0eiA9IE1hdGguY29zKHYpICogcjtcclxuXHJcblx0XHRcdHZlcnRpY2VzLnB1c2goeCwgMCwgeik7XHJcblx0XHRcdGNvbG9ycy5wdXNoKGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIpO1xyXG5cclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoY29sb3JzLCAzKSk7XHJcblxyXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCh7IHZlcnRleENvbG9yczogVmVydGV4Q29sb3JzIH0pO1xyXG5cclxuXHRMaW5lU2VnbWVudHMuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxufVxyXG5cclxuUG9sYXJHcmlkSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7XHJcblBvbGFyR3JpZEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb2xhckdyaWRIZWxwZXI7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFBvc2l0aW9uYWxBdWRpb0hlbHBlcihhdWRpbywgcmFuZ2UsIGRpdmlzaW9uc0lubmVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUpIHtcclxuXHJcblx0dGhpcy5hdWRpbyA9IGF1ZGlvO1xyXG5cdHRoaXMucmFuZ2UgPSByYW5nZSB8fCAxO1xyXG5cdHRoaXMuZGl2aXNpb25zSW5uZXJBbmdsZSA9IGRpdmlzaW9uc0lubmVyQW5nbGUgfHwgMTY7XHJcblx0dGhpcy5kaXZpc2lvbnNPdXRlckFuZ2xlID0gZGl2aXNpb25zT3V0ZXJBbmdsZSB8fCAyO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHR2YXIgZGl2aXNpb25zID0gdGhpcy5kaXZpc2lvbnNJbm5lckFuZ2xlICsgdGhpcy5kaXZpc2lvbnNPdXRlckFuZ2xlICogMjtcclxuXHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSgoZGl2aXNpb25zICogMyArIDMpICogMyk7XHJcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblxyXG5cdHZhciBtYXRlcmlhbElubmVyQW5nbGUgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHgwMGZmMDAgfSk7XHJcblx0dmFyIG1hdGVyaWFsT3V0ZXJBbmdsZSA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweGZmZmYwMCB9KTtcclxuXHJcblx0TGluZS5jYWxsKHRoaXMsIGdlb21ldHJ5LCBbbWF0ZXJpYWxPdXRlckFuZ2xlLCBtYXRlcmlhbElubmVyQW5nbGVdKTtcclxuXHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHJcbn1cclxuXHJcblBvc2l0aW9uYWxBdWRpb0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmUucHJvdG90eXBlKTtcclxuUG9zaXRpb25hbEF1ZGlvSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvc2l0aW9uYWxBdWRpb0hlbHBlcjtcclxuXHJcblBvc2l0aW9uYWxBdWRpb0hlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHR2YXIgYXVkaW8gPSB0aGlzLmF1ZGlvO1xyXG5cdHZhciByYW5nZSA9IHRoaXMucmFuZ2U7XHJcblx0dmFyIGRpdmlzaW9uc0lubmVyQW5nbGUgPSB0aGlzLmRpdmlzaW9uc0lubmVyQW5nbGU7XHJcblx0dmFyIGRpdmlzaW9uc091dGVyQW5nbGUgPSB0aGlzLmRpdmlzaW9uc091dGVyQW5nbGU7XHJcblxyXG5cdHZhciBjb25lSW5uZXJBbmdsZSA9IF9NYXRoLmRlZ1RvUmFkKGF1ZGlvLnBhbm5lci5jb25lSW5uZXJBbmdsZSk7XHJcblx0dmFyIGNvbmVPdXRlckFuZ2xlID0gX01hdGguZGVnVG9SYWQoYXVkaW8ucGFubmVyLmNvbmVPdXRlckFuZ2xlKTtcclxuXHJcblx0dmFyIGhhbGZDb25lSW5uZXJBbmdsZSA9IGNvbmVJbm5lckFuZ2xlIC8gMjtcclxuXHR2YXIgaGFsZkNvbmVPdXRlckFuZ2xlID0gY29uZU91dGVyQW5nbGUgLyAyO1xyXG5cclxuXHR2YXIgc3RhcnQgPSAwO1xyXG5cdHZhciBjb3VudCA9IDA7XHJcblx0dmFyIGksIHN0cmlkZTtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHR2YXIgcG9zaXRpb25BdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHRnZW9tZXRyeS5jbGVhckdyb3VwcygpO1xyXG5cclxuXHQvL1xyXG5cclxuXHRmdW5jdGlvbiBnZW5lcmF0ZVNlZ21lbnQoZnJvbSwgdG8sIGRpdmlzaW9ucywgbWF0ZXJpYWxJbmRleCkge1xyXG5cclxuXHRcdHZhciBzdGVwID0gKHRvIC0gZnJvbSkgLyBkaXZpc2lvbnM7XHJcblxyXG5cdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKHN0YXJ0LCAwLCAwLCAwKTtcclxuXHRcdGNvdW50Kys7XHJcblxyXG5cdFx0Zm9yIChpID0gZnJvbTsgaSA8IHRvOyBpICs9IHN0ZXApIHtcclxuXHJcblx0XHRcdHN0cmlkZSA9IHN0YXJ0ICsgY291bnQ7XHJcblxyXG5cdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5zZXRYWVooc3RyaWRlLCBNYXRoLnNpbihpKSAqIHJhbmdlLCAwLCBNYXRoLmNvcyhpKSAqIHJhbmdlKTtcclxuXHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKHN0cmlkZSArIDEsIE1hdGguc2luKE1hdGgubWluKGkgKyBzdGVwLCB0bykpICogcmFuZ2UsIDAsIE1hdGguY29zKE1hdGgubWluKGkgKyBzdGVwLCB0bykpICogcmFuZ2UpO1xyXG5cdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5zZXRYWVooc3RyaWRlICsgMiwgMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRjb3VudCArPSAzO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRnZW9tZXRyeS5hZGRHcm91cChzdGFydCwgY291bnQsIG1hdGVyaWFsSW5kZXgpO1xyXG5cclxuXHRcdHN0YXJ0ICs9IGNvdW50O1xyXG5cdFx0Y291bnQgPSAwO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vXHJcblxyXG5cdGdlbmVyYXRlU2VnbWVudCgtIGhhbGZDb25lT3V0ZXJBbmdsZSwgLSBoYWxmQ29uZUlubmVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUsIDApO1xyXG5cdGdlbmVyYXRlU2VnbWVudCgtIGhhbGZDb25lSW5uZXJBbmdsZSwgaGFsZkNvbmVJbm5lckFuZ2xlLCBkaXZpc2lvbnNJbm5lckFuZ2xlLCAxKTtcclxuXHRnZW5lcmF0ZVNlZ21lbnQoaGFsZkNvbmVJbm5lckFuZ2xlLCBoYWxmQ29uZU91dGVyQW5nbGUsIGRpdmlzaW9uc091dGVyQW5nbGUsIDApO1xyXG5cclxuXHQvL1xyXG5cclxuXHRwb3NpdGlvbkF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdGlmIChjb25lSW5uZXJBbmdsZSA9PT0gY29uZU91dGVyQW5nbGUpIHsgdGhpcy5tYXRlcmlhbFswXS52aXNpYmxlID0gZmFsc2U7IH1cclxuXHJcbn07XHJcblxyXG5Qb3NpdGlvbmFsQXVkaW9IZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdHRoaXMubWF0ZXJpYWxbMF0uZGlzcG9zZSgpO1xyXG5cdHRoaXMubWF0ZXJpYWxbMV0uZGlzcG9zZSgpO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICovXHJcblxyXG52YXIgX3YxJDYgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX3YyJDQgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX25vcm1hbE1hdHJpeCQyID0gbmV3IE1hdHJpeDMoKTtcclxuXHJcbmZ1bmN0aW9uIEZhY2VOb3JtYWxzSGVscGVyKG9iamVjdCwgc2l6ZSwgaGV4LCBsaW5ld2lkdGgpIHtcclxuXHJcblx0Ly8gRmFjZU5vcm1hbHNIZWxwZXIgb25seSBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeVxyXG5cclxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcclxuXHJcblx0dGhpcy5zaXplID0gKHNpemUgIT09IHVuZGVmaW5lZCkgPyBzaXplIDogMTtcclxuXHJcblx0dmFyIGNvbG9yID0gKGhleCAhPT0gdW5kZWZpbmVkKSA/IGhleCA6IDB4ZmZmZjAwO1xyXG5cclxuXHR2YXIgd2lkdGggPSAobGluZXdpZHRoICE9PSB1bmRlZmluZWQpID8gbGluZXdpZHRoIDogMTtcclxuXHJcblx0Ly9cclxuXHJcblx0dmFyIG5Ob3JtYWxzID0gMDtcclxuXHJcblx0dmFyIG9iakdlb21ldHJ5ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnk7XHJcblxyXG5cdGlmIChvYmpHZW9tZXRyeSAmJiBvYmpHZW9tZXRyeS5pc0dlb21ldHJ5KSB7XHJcblxyXG5cdFx0bk5vcm1hbHMgPSBvYmpHZW9tZXRyeS5mYWNlcy5sZW5ndGg7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5GYWNlTm9ybWFsc0hlbHBlcjogb25seSBUSFJFRS5HZW9tZXRyeSBpcyBzdXBwb3J0ZWQuIFVzZSBUSFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLCBpbnN0ZWFkLicpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8vXHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUobk5vcm1hbHMgKiAyICogMywgMyk7XHJcblxyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBwb3NpdGlvbnMpO1xyXG5cclxuXHRMaW5lU2VnbWVudHMuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yLCBsaW5ld2lkdGg6IHdpZHRoIH0pKTtcclxuXHJcblx0Ly9cclxuXHJcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy51cGRhdGUoKTtcclxuXHJcbn1cclxuXHJcbkZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7XHJcbkZhY2VOb3JtYWxzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZhY2VOb3JtYWxzSGVscGVyO1xyXG5cclxuRmFjZU5vcm1hbHNIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dGhpcy5vYmplY3QudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblxyXG5cdF9ub3JtYWxNYXRyaXgkMi5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO1xyXG5cclxuXHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm9iamVjdC5tYXRyaXhXb3JsZDtcclxuXHJcblx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cclxuXHQvL1xyXG5cclxuXHR2YXIgb2JqR2VvbWV0cnkgPSB0aGlzLm9iamVjdC5nZW9tZXRyeTtcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gb2JqR2VvbWV0cnkudmVydGljZXM7XHJcblxyXG5cdHZhciBmYWNlcyA9IG9iakdlb21ldHJ5LmZhY2VzO1xyXG5cclxuXHR2YXIgaWR4ID0gMDtcclxuXHJcblx0Zm9yICh2YXIgaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHJcblx0XHR2YXIgZmFjZSA9IGZhY2VzW2ldO1xyXG5cclxuXHRcdHZhciBub3JtYWwgPSBmYWNlLm5vcm1hbDtcclxuXHJcblx0XHRfdjEkNi5jb3B5KHZlcnRpY2VzW2ZhY2UuYV0pXHJcblx0XHRcdC5hZGQodmVydGljZXNbZmFjZS5iXSlcclxuXHRcdFx0LmFkZCh2ZXJ0aWNlc1tmYWNlLmNdKVxyXG5cdFx0XHQuZGl2aWRlU2NhbGFyKDMpXHJcblx0XHRcdC5hcHBseU1hdHJpeDQobWF0cml4V29ybGQpO1xyXG5cclxuXHRcdF92MiQ0LmNvcHkobm9ybWFsKS5hcHBseU1hdHJpeDMoX25vcm1hbE1hdHJpeCQyKS5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcih0aGlzLnNpemUpLmFkZChfdjEkNik7XHJcblxyXG5cdFx0cG9zaXRpb24uc2V0WFlaKGlkeCwgX3YxJDYueCwgX3YxJDYueSwgX3YxJDYueik7XHJcblxyXG5cdFx0aWR4ID0gaWR4ICsgMTtcclxuXHJcblx0XHRwb3NpdGlvbi5zZXRYWVooaWR4LCBfdjIkNC54LCBfdjIkNC55LCBfdjIkNC56KTtcclxuXHJcblx0XHRpZHggPSBpZHggKyAxO1xyXG5cclxuXHR9XHJcblxyXG5cdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqL1xyXG5cclxudmFyIF92MSQ3ID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MiQ1ID0gbmV3IFZlY3RvcjMoKTtcclxudmFyIF92MyQxID0gbmV3IFZlY3RvcjMoKTtcclxuXHJcbmZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHRIZWxwZXIobGlnaHQsIHNpemUsIGNvbG9yKSB7XHJcblxyXG5cdE9iamVjdDNELmNhbGwodGhpcyk7XHJcblxyXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcclxuXHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XHJcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcclxuXHJcblx0aWYgKHNpemUgPT09IHVuZGVmaW5lZCkgeyBzaXplID0gMTsgfVxyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoW1xyXG5cdFx0LSBzaXplLCBzaXplLCAwLFxyXG5cdFx0c2l6ZSwgc2l6ZSwgMCxcclxuXHRcdHNpemUsIC0gc2l6ZSwgMCxcclxuXHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxyXG5cdFx0LSBzaXplLCBzaXplLCAwXHJcblx0XSwgMykpO1xyXG5cclxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBmb2c6IGZhbHNlIH0pO1xyXG5cclxuXHR0aGlzLmxpZ2h0UGxhbmUgPSBuZXcgTGluZShnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cdHRoaXMuYWRkKHRoaXMubGlnaHRQbGFuZSk7XHJcblxyXG5cdGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0Z2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKFswLCAwLCAwLCAwLCAwLCAxXSwgMykpO1xyXG5cclxuXHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZShnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cdHRoaXMuYWRkKHRoaXMudGFyZ2V0TGluZSk7XHJcblxyXG5cdHRoaXMudXBkYXRlKCk7XHJcblxyXG59XHJcblxyXG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0M0QucHJvdG90eXBlKTtcclxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEaXJlY3Rpb25hbExpZ2h0SGVscGVyO1xyXG5cclxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuZGlzcG9zZSgpO1xyXG5cdHRoaXMudGFyZ2V0TGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcclxuXHJcbn07XHJcblxyXG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdF92MSQ3LnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKTtcclxuXHRfdjIkNS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC50YXJnZXQubWF0cml4V29ybGQpO1xyXG5cdF92MyQxLnN1YlZlY3RvcnMoX3YyJDUsIF92MSQ3KTtcclxuXHJcblx0dGhpcy5saWdodFBsYW5lLmxvb2tBdChfdjIkNSk7XHJcblxyXG5cdGlmICh0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpO1xyXG5cdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKTtcclxuXHJcblx0fSBlbHNlIHtcclxuXHJcblx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKTtcclxuXHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpO1xyXG5cclxuXHR9XHJcblxyXG5cdHRoaXMudGFyZ2V0TGluZS5sb29rQXQoX3YyJDUpO1xyXG5cdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gX3YzJDEubGVuZ3RoKCk7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXHJcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XHJcbiAqXHJcbiAqXHQtIHNob3dzIGZydXN0dW0sIGxpbmUgb2Ygc2lnaHQgYW5kIHVwIG9mIHRoZSBjYW1lcmFcclxuICpcdC0gc3VpdGFibGUgZm9yIGZhc3QgdXBkYXRlc1xyXG4gKiBcdC0gYmFzZWQgb24gZnJ1c3R1bSB2aXN1YWxpemF0aW9uIGluIGxpZ2h0Z2wuanMgc2hhZG93bWFwIGV4YW1wbGVcclxuICpcdFx0aHR0cDovL2V2YW53LmdpdGh1Yi5jb20vbGlnaHRnbC5qcy90ZXN0cy9zaGFkb3dtYXAuaHRtbFxyXG4gKi9cclxuXHJcbnZhciBfdmVjdG9yJGEgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2NhbWVyYSA9IG5ldyBDYW1lcmEoKTtcclxuXHJcbmZ1bmN0aW9uIENhbWVyYUhlbHBlcihjYW1lcmEpIHtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IDB4ZmZmZmZmLCB2ZXJ0ZXhDb2xvcnM6IEZhY2VDb2xvcnMgfSk7XHJcblxyXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xyXG5cdHZhciBjb2xvcnMgPSBbXTtcclxuXHJcblx0dmFyIHBvaW50TWFwID0ge307XHJcblxyXG5cdC8vIGNvbG9yc1xyXG5cclxuXHR2YXIgY29sb3JGcnVzdHVtID0gbmV3IENvbG9yKDB4ZmZhYTAwKTtcclxuXHR2YXIgY29sb3JDb25lID0gbmV3IENvbG9yKDB4ZmYwMDAwKTtcclxuXHR2YXIgY29sb3JVcCA9IG5ldyBDb2xvcigweDAwYWFmZik7XHJcblx0dmFyIGNvbG9yVGFyZ2V0ID0gbmV3IENvbG9yKDB4ZmZmZmZmKTtcclxuXHR2YXIgY29sb3JDcm9zcyA9IG5ldyBDb2xvcigweDMzMzMzMyk7XHJcblxyXG5cdC8vIG5lYXJcclxuXHJcblx0YWRkTGluZSgnbjEnLCAnbjInLCBjb2xvckZydXN0dW0pO1xyXG5cdGFkZExpbmUoJ24yJywgJ240JywgY29sb3JGcnVzdHVtKTtcclxuXHRhZGRMaW5lKCduNCcsICduMycsIGNvbG9yRnJ1c3R1bSk7XHJcblx0YWRkTGluZSgnbjMnLCAnbjEnLCBjb2xvckZydXN0dW0pO1xyXG5cclxuXHQvLyBmYXJcclxuXHJcblx0YWRkTGluZSgnZjEnLCAnZjInLCBjb2xvckZydXN0dW0pO1xyXG5cdGFkZExpbmUoJ2YyJywgJ2Y0JywgY29sb3JGcnVzdHVtKTtcclxuXHRhZGRMaW5lKCdmNCcsICdmMycsIGNvbG9yRnJ1c3R1bSk7XHJcblx0YWRkTGluZSgnZjMnLCAnZjEnLCBjb2xvckZydXN0dW0pO1xyXG5cclxuXHQvLyBzaWRlc1xyXG5cclxuXHRhZGRMaW5lKCduMScsICdmMScsIGNvbG9yRnJ1c3R1bSk7XHJcblx0YWRkTGluZSgnbjInLCAnZjInLCBjb2xvckZydXN0dW0pO1xyXG5cdGFkZExpbmUoJ24zJywgJ2YzJywgY29sb3JGcnVzdHVtKTtcclxuXHRhZGRMaW5lKCduNCcsICdmNCcsIGNvbG9yRnJ1c3R1bSk7XHJcblxyXG5cdC8vIGNvbmVcclxuXHJcblx0YWRkTGluZSgncCcsICduMScsIGNvbG9yQ29uZSk7XHJcblx0YWRkTGluZSgncCcsICduMicsIGNvbG9yQ29uZSk7XHJcblx0YWRkTGluZSgncCcsICduMycsIGNvbG9yQ29uZSk7XHJcblx0YWRkTGluZSgncCcsICduNCcsIGNvbG9yQ29uZSk7XHJcblxyXG5cdC8vIHVwXHJcblxyXG5cdGFkZExpbmUoJ3UxJywgJ3UyJywgY29sb3JVcCk7XHJcblx0YWRkTGluZSgndTInLCAndTMnLCBjb2xvclVwKTtcclxuXHRhZGRMaW5lKCd1MycsICd1MScsIGNvbG9yVXApO1xyXG5cclxuXHQvLyB0YXJnZXRcclxuXHJcblx0YWRkTGluZSgnYycsICd0JywgY29sb3JUYXJnZXQpO1xyXG5cdGFkZExpbmUoJ3AnLCAnYycsIGNvbG9yQ3Jvc3MpO1xyXG5cclxuXHQvLyBjcm9zc1xyXG5cclxuXHRhZGRMaW5lKCdjbjEnLCAnY24yJywgY29sb3JDcm9zcyk7XHJcblx0YWRkTGluZSgnY24zJywgJ2NuNCcsIGNvbG9yQ3Jvc3MpO1xyXG5cclxuXHRhZGRMaW5lKCdjZjEnLCAnY2YyJywgY29sb3JDcm9zcyk7XHJcblx0YWRkTGluZSgnY2YzJywgJ2NmNCcsIGNvbG9yQ3Jvc3MpO1xyXG5cclxuXHRmdW5jdGlvbiBhZGRMaW5lKGEsIGIsIGNvbG9yKSB7XHJcblxyXG5cdFx0YWRkUG9pbnQoYSwgY29sb3IpO1xyXG5cdFx0YWRkUG9pbnQoYiwgY29sb3IpO1xyXG5cclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGFkZFBvaW50KGlkLCBjb2xvcikge1xyXG5cclxuXHRcdHZlcnRpY2VzLnB1c2goMCwgMCwgMCk7XHJcblx0XHRjb2xvcnMucHVzaChjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iKTtcclxuXHJcblx0XHRpZiAocG9pbnRNYXBbaWRdID09PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRcdHBvaW50TWFwW2lkXSA9IFtdO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRwb2ludE1hcFtpZF0ucHVzaCgodmVydGljZXMubGVuZ3RoIC8gMykgLSAxKTtcclxuXHJcblx0fVxyXG5cclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUodmVydGljZXMsIDMpKTtcclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoY29sb3JzLCAzKSk7XHJcblxyXG5cdExpbmVTZWdtZW50cy5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG5cdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xyXG5cdGlmICh0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KSB7IHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTsgfVxyXG5cclxuXHR0aGlzLm1hdHJpeCA9IGNhbWVyYS5tYXRyaXhXb3JsZDtcclxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0dGhpcy5wb2ludE1hcCA9IHBvaW50TWFwO1xyXG5cclxuXHR0aGlzLnVwZGF0ZSgpO1xyXG5cclxufVxyXG5cclxuQ2FtZXJhSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7XHJcbkNhbWVyYUhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDYW1lcmFIZWxwZXI7XHJcblxyXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcclxuXHR2YXIgcG9pbnRNYXAgPSB0aGlzLnBvaW50TWFwO1xyXG5cclxuXHR2YXIgdyA9IDEsIGggPSAxO1xyXG5cclxuXHQvLyB3ZSBuZWVkIGp1c3QgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4IGludmVyc2VcclxuXHQvLyB3b3JsZCBtYXRyaXggbXVzdCBiZSBpZGVudGl0eVxyXG5cclxuXHRfY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlLmNvcHkodGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UpO1xyXG5cclxuXHQvLyBjZW50ZXIgLyB0YXJnZXRcclxuXHJcblx0c2V0UG9pbnQoJ2MnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ3QnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIDEpO1xyXG5cclxuXHQvLyBuZWFyXHJcblxyXG5cdHNldFBvaW50KCduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ24zJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAtIDEpO1xyXG5cclxuXHQvLyBmYXJcclxuXHJcblx0c2V0UG9pbnQoJ2YxJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIC0gaCwgMSk7XHJcblx0c2V0UG9pbnQoJ2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIDEpO1xyXG5cdHNldFBvaW50KCdmMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAxKTtcclxuXHRzZXRQb2ludCgnZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIGgsIDEpO1xyXG5cclxuXHQvLyB1cFxyXG5cclxuXHRzZXRQb2ludCgndTEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcgKiAwLjcsIGggKiAxLjEsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ3UyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ3UzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoICogMiwgLSAxKTtcclxuXHJcblx0Ly8gY3Jvc3NcclxuXHJcblx0c2V0UG9pbnQoJ2NmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAxKTtcclxuXHRzZXRQb2ludCgnY2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAxKTtcclxuXHRzZXRQb2ludCgnY2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAtIGgsIDEpO1xyXG5cdHNldFBvaW50KCdjZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIDEpO1xyXG5cclxuXHRzZXRQb2ludCgnY24xJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIDAsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ2NuMicsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgdywgMCwgLSAxKTtcclxuXHRzZXRQb2ludCgnY24zJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAtIGgsIC0gMSk7XHJcblx0c2V0UG9pbnQoJ2NuNCcsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgaCwgLSAxKTtcclxuXHJcblx0Z2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBzZXRQb2ludChwb2ludCwgcG9pbnRNYXAsIGdlb21ldHJ5LCBjYW1lcmEsIHgsIHksIHopIHtcclxuXHJcblx0X3ZlY3RvciRhLnNldCh4LCB5LCB6KS51bnByb2plY3QoY2FtZXJhKTtcclxuXHJcblx0dmFyIHBvaW50cyA9IHBvaW50TWFwW3BvaW50XTtcclxuXHJcblx0aWYgKHBvaW50cyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKCdwb3NpdGlvbicpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cclxuXHRcdFx0cG9zaXRpb24uc2V0WFlaKHBvaW50c1tpXSwgX3ZlY3RvciRhLngsIF92ZWN0b3IkYS55LCBfdmVjdG9yJGEueik7XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xyXG4gKi9cclxuXHJcbnZhciBfYm94JDIgPSBuZXcgQm94MygpO1xyXG5cclxuZnVuY3Rpb24gQm94SGVscGVyKG9iamVjdCwgY29sb3IpIHtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XHJcblxyXG5cdGlmIChjb2xvciA9PT0gdW5kZWZpbmVkKSB7IGNvbG9yID0gMHhmZmZmMDA7IH1cclxuXHJcblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDddKTtcclxuXHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSg4ICogMyk7XHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdGdlb21ldHJ5LnNldEluZGV4KG5ldyBCdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgMSkpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpO1xyXG5cclxuXHRMaW5lU2VnbWVudHMuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yIH0pKTtcclxuXHJcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdHRoaXMudXBkYXRlKCk7XHJcblxyXG59XHJcblxyXG5Cb3hIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShMaW5lU2VnbWVudHMucHJvdG90eXBlKTtcclxuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEhlbHBlcjtcclxuXHJcbkJveEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG5cclxuXHRpZiAob2JqZWN0ICE9PSB1bmRlZmluZWQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveEhlbHBlcjogLnVwZGF0ZSgpIGhhcyBubyBsb25nZXIgYXJndW1lbnRzLicpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmICh0aGlzLm9iamVjdCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0X2JveCQyLnNldEZyb21PYmplY3QodGhpcy5vYmplY3QpO1xyXG5cclxuXHR9XHJcblxyXG5cdGlmIChfYm94JDIuaXNFbXB0eSgpKSB7IHJldHVybjsgfVxyXG5cclxuXHR2YXIgbWluID0gX2JveCQyLm1pbjtcclxuXHR2YXIgbWF4ID0gX2JveCQyLm1heDtcclxuXHJcblx0LypcclxuXHRcdDVfX19fNFxyXG5cdDEvX19fMC98XHJcblx0fCA2X198XzdcclxuXHQyL19fXzMvXHJcblxyXG5cdDA6IG1heC54LCBtYXgueSwgbWF4LnpcclxuXHQxOiBtaW4ueCwgbWF4LnksIG1heC56XHJcblx0MjogbWluLngsIG1pbi55LCBtYXguelxyXG5cdDM6IG1heC54LCBtaW4ueSwgbWF4LnpcclxuXHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XHJcblx0NTogbWluLngsIG1heC55LCBtaW4uelxyXG5cdDY6IG1pbi54LCBtaW4ueSwgbWluLnpcclxuXHQ3OiBtYXgueCwgbWluLnksIG1pbi56XHJcblx0Ki9cclxuXHJcblx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xyXG5cdHZhciBhcnJheSA9IHBvc2l0aW9uLmFycmF5O1xyXG5cclxuXHRhcnJheVswXSA9IG1heC54OyBhcnJheVsxXSA9IG1heC55OyBhcnJheVsyXSA9IG1heC56O1xyXG5cdGFycmF5WzNdID0gbWluLng7IGFycmF5WzRdID0gbWF4Lnk7IGFycmF5WzVdID0gbWF4Lno7XHJcblx0YXJyYXlbNl0gPSBtaW4ueDsgYXJyYXlbN10gPSBtaW4ueTsgYXJyYXlbOF0gPSBtYXguejtcclxuXHRhcnJheVs5XSA9IG1heC54OyBhcnJheVsxMF0gPSBtaW4ueTsgYXJyYXlbMTFdID0gbWF4Lno7XHJcblx0YXJyYXlbMTJdID0gbWF4Lng7IGFycmF5WzEzXSA9IG1heC55OyBhcnJheVsxNF0gPSBtaW4uejtcclxuXHRhcnJheVsxNV0gPSBtaW4ueDsgYXJyYXlbMTZdID0gbWF4Lnk7IGFycmF5WzE3XSA9IG1pbi56O1xyXG5cdGFycmF5WzE4XSA9IG1pbi54OyBhcnJheVsxOV0gPSBtaW4ueTsgYXJyYXlbMjBdID0gbWluLno7XHJcblx0YXJyYXlbMjFdID0gbWF4Lng7IGFycmF5WzIyXSA9IG1pbi55OyBhcnJheVsyM10gPSBtaW4uejtcclxuXHJcblx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxuXHJcbn07XHJcblxyXG5Cb3hIZWxwZXIucHJvdG90eXBlLnNldEZyb21PYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcblxyXG5cdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG5cdHRoaXMudXBkYXRlKCk7XHJcblxyXG5cdHJldHVybiB0aGlzO1xyXG5cclxufTtcclxuXHJcbkJveEhlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcclxuXHJcblx0TGluZVNlZ21lbnRzLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcywgc291cmNlKTtcclxuXHJcblx0dGhpcy5vYmplY3QgPSBzb3VyY2Uub2JqZWN0O1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5Cb3hIZWxwZXIucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KHRoaXMpO1xyXG5cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcclxuICovXHJcblxyXG5mdW5jdGlvbiBCb3gzSGVscGVyKGJveCwgY29sb3IpIHtcclxuXHJcblx0dGhpcy50eXBlID0gJ0JveDNIZWxwZXInO1xyXG5cclxuXHR0aGlzLmJveCA9IGJveDtcclxuXHJcblx0Y29sb3IgPSBjb2xvciB8fCAweGZmZmYwMDtcclxuXHJcblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoWzAsIDEsIDEsIDIsIDIsIDMsIDMsIDAsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDQsIDAsIDQsIDEsIDUsIDIsIDYsIDMsIDddKTtcclxuXHJcblx0dmFyIHBvc2l0aW9ucyA9IFsxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSwgLSAxLCAtIDEsIDEsIC0gMSwgLSAxXTtcclxuXHJcblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdGdlb21ldHJ5LnNldEluZGV4KG5ldyBCdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgMSkpO1xyXG5cclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblxyXG5cdExpbmVTZWdtZW50cy5jYWxsKHRoaXMsIGdlb21ldHJ5LCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogY29sb3IgfSkpO1xyXG5cclxuXHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG5cclxufVxyXG5cclxuQm94M0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKExpbmVTZWdtZW50cy5wcm90b3R5cGUpO1xyXG5Cb3gzSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveDNIZWxwZXI7XHJcblxyXG5Cb3gzSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uIChmb3JjZSkge1xyXG5cclxuXHR2YXIgYm94ID0gdGhpcy5ib3g7XHJcblxyXG5cdGlmIChib3guaXNFbXB0eSgpKSB7IHJldHVybjsgfVxyXG5cclxuXHRib3guZ2V0Q2VudGVyKHRoaXMucG9zaXRpb24pO1xyXG5cclxuXHRib3guZ2V0U2l6ZSh0aGlzLnNjYWxlKTtcclxuXHJcblx0dGhpcy5zY2FsZS5tdWx0aXBseVNjYWxhcigwLjUpO1xyXG5cclxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLCBmb3JjZSk7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIFBsYW5lSGVscGVyKHBsYW5lLCBzaXplLCBoZXgpIHtcclxuXHJcblx0dGhpcy50eXBlID0gJ1BsYW5lSGVscGVyJztcclxuXHJcblx0dGhpcy5wbGFuZSA9IHBsYW5lO1xyXG5cclxuXHR0aGlzLnNpemUgPSAoc2l6ZSA9PT0gdW5kZWZpbmVkKSA/IDEgOiBzaXplO1xyXG5cclxuXHR2YXIgY29sb3IgPSAoaGV4ICE9PSB1bmRlZmluZWQpID8gaGV4IDogMHhmZmZmMDA7XHJcblxyXG5cdHZhciBwb3NpdGlvbnMgPSBbMSwgLSAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAxLCAxLCAtIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDEsIDAsIDAsIDBdO1xyXG5cclxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblx0Z2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdExpbmUuY2FsbCh0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yIH0pKTtcclxuXHJcblx0Ly9cclxuXHJcblx0dmFyIHBvc2l0aW9uczIgPSBbMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIC0gMSwgMV07XHJcblxyXG5cdHZhciBnZW9tZXRyeTIgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRnZW9tZXRyeTIuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uczIsIDMpKTtcclxuXHRnZW9tZXRyeTIuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcblxyXG5cdHRoaXMuYWRkKG5ldyBNZXNoKGdlb21ldHJ5MiwgbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSB9KSkpO1xyXG5cclxufVxyXG5cclxuUGxhbmVIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShMaW5lLnByb3RvdHlwZSk7XHJcblBsYW5lSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBsYW5lSGVscGVyO1xyXG5cclxuUGxhbmVIZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKGZvcmNlKSB7XHJcblxyXG5cdHZhciBzY2FsZSA9IC0gdGhpcy5wbGFuZS5jb25zdGFudDtcclxuXHJcblx0aWYgKE1hdGguYWJzKHNjYWxlKSA8IDFlLTgpIHsgc2NhbGUgPSAxZS04OyB9IC8vIHNpZ24gZG9lcyBub3QgbWF0dGVyXHJcblxyXG5cdHRoaXMuc2NhbGUuc2V0KDAuNSAqIHRoaXMuc2l6ZSwgMC41ICogdGhpcy5zaXplLCBzY2FsZSk7XHJcblxyXG5cdHRoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuc2lkZSA9IChzY2FsZSA8IDApID8gQmFja1NpZGUgOiBGcm9udFNpZGU7IC8vIHJlbmRlcmVyIGZsaXBzIHNpZGUgd2hlbiBkZXRlcm1pbmFudCA8IDA7IGZsaXBwaW5nIG5vdCB3YW50ZWQgaGVyZVxyXG5cclxuXHR0aGlzLmxvb2tBdCh0aGlzLnBsYW5lLm5vcm1hbCk7XHJcblxyXG5cdE9iamVjdDNELnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsIGZvcmNlKTtcclxuXHJcbn07XHJcblxyXG4vKipcclxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XHJcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly9naXRodWIuY29tL3p6ODVcclxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xyXG4gKlxyXG4gKiBDcmVhdGVzIGFuIGFycm93IGZvciB2aXN1YWxpemluZyBkaXJlY3Rpb25zXHJcbiAqXHJcbiAqIFBhcmFtZXRlcnM6XHJcbiAqICBkaXIgLSBWZWN0b3IzXHJcbiAqICBvcmlnaW4gLSBWZWN0b3IzXHJcbiAqICBsZW5ndGggLSBOdW1iZXJcclxuICogIGNvbG9yIC0gY29sb3IgaW4gaGV4IHZhbHVlXHJcbiAqICBoZWFkTGVuZ3RoIC0gTnVtYmVyXHJcbiAqICBoZWFkV2lkdGggLSBOdW1iZXJcclxuICovXHJcblxyXG52YXIgX2F4aXMgPSBuZXcgVmVjdG9yMygpO1xyXG52YXIgX2xpbmVHZW9tZXRyeSwgX2NvbmVHZW9tZXRyeTtcclxuXHJcbmZ1bmN0aW9uIEFycm93SGVscGVyKGRpciwgb3JpZ2luLCBsZW5ndGgsIGNvbG9yLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGgpIHtcclxuXHJcblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxyXG5cclxuXHRPYmplY3QzRC5jYWxsKHRoaXMpO1xyXG5cclxuXHRpZiAoZGlyID09PSB1bmRlZmluZWQpIHsgZGlyID0gbmV3IFZlY3RvcjMoMCwgMCwgMSk7IH1cclxuXHRpZiAob3JpZ2luID09PSB1bmRlZmluZWQpIHsgb3JpZ2luID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7IH1cclxuXHRpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsgbGVuZ3RoID0gMTsgfVxyXG5cdGlmIChjb2xvciA9PT0gdW5kZWZpbmVkKSB7IGNvbG9yID0gMHhmZmZmMDA7IH1cclxuXHRpZiAoaGVhZExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7IGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7IH1cclxuXHRpZiAoaGVhZFdpZHRoID09PSB1bmRlZmluZWQpIHsgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDsgfVxyXG5cclxuXHRpZiAoX2xpbmVHZW9tZXRyeSA9PT0gdW5kZWZpbmVkKSB7XHJcblxyXG5cdFx0X2xpbmVHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0X2xpbmVHZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoWzAsIDAsIDAsIDAsIDEsIDBdLCAzKSk7XHJcblxyXG5cdFx0X2NvbmVHZW9tZXRyeSA9IG5ldyBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5KDAsIDAuNSwgMSwgNSwgMSk7XHJcblx0XHRfY29uZUdlb21ldHJ5LnRyYW5zbGF0ZSgwLCAtIDAuNSwgMCk7XHJcblxyXG5cdH1cclxuXHJcblx0dGhpcy5wb3NpdGlvbi5jb3B5KG9yaWdpbik7XHJcblxyXG5cdHRoaXMubGluZSA9IG5ldyBMaW5lKF9saW5lR2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiBjb2xvciB9KSk7XHJcblx0dGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuXHR0aGlzLmFkZCh0aGlzLmxpbmUpO1xyXG5cclxuXHR0aGlzLmNvbmUgPSBuZXcgTWVzaChfY29uZUdlb21ldHJ5LCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogY29sb3IgfSkpO1xyXG5cdHRoaXMuY29uZS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcblx0dGhpcy5hZGQodGhpcy5jb25lKTtcclxuXHJcblx0dGhpcy5zZXREaXJlY3Rpb24oZGlyKTtcclxuXHR0aGlzLnNldExlbmd0aChsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCk7XHJcblxyXG59XHJcblxyXG5BcnJvd0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE9iamVjdDNELnByb3RvdHlwZSk7XHJcbkFycm93SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFycm93SGVscGVyO1xyXG5cclxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldERpcmVjdGlvbiA9IGZ1bmN0aW9uIChkaXIpIHtcclxuXHJcblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxyXG5cclxuXHRpZiAoZGlyLnkgPiAwLjk5OTk5KSB7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCgwLCAwLCAwLCAxKTtcclxuXHJcblx0fSBlbHNlIGlmIChkaXIueSA8IC0gMC45OTk5OSkge1xyXG5cclxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXQoMSwgMCwgMCwgMCk7XHJcblxyXG5cdH0gZWxzZSB7XHJcblxyXG5cdFx0X2F4aXMuc2V0KGRpci56LCAwLCAtIGRpci54KS5ub3JtYWxpemUoKTtcclxuXHJcblx0XHR2YXIgcmFkaWFucyA9IE1hdGguYWNvcyhkaXIueSk7XHJcblxyXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoX2F4aXMsIHJhZGlhbnMpO1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uIChsZW5ndGgsIGhlYWRMZW5ndGgsIGhlYWRXaWR0aCkge1xyXG5cclxuXHRpZiAoaGVhZExlbmd0aCA9PT0gdW5kZWZpbmVkKSB7IGhlYWRMZW5ndGggPSAwLjIgKiBsZW5ndGg7IH1cclxuXHRpZiAoaGVhZFdpZHRoID09PSB1bmRlZmluZWQpIHsgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDsgfVxyXG5cclxuXHR0aGlzLmxpbmUuc2NhbGUuc2V0KDEsIE1hdGgubWF4KDAuMDAwMSwgbGVuZ3RoIC0gaGVhZExlbmd0aCksIDEpOyAvLyBzZWUgIzE3NDU4XHJcblx0dGhpcy5saW5lLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHR0aGlzLmNvbmUuc2NhbGUuc2V0KGhlYWRXaWR0aCwgaGVhZExlbmd0aCwgaGVhZFdpZHRoKTtcclxuXHR0aGlzLmNvbmUucG9zaXRpb24ueSA9IGxlbmd0aDtcclxuXHR0aGlzLmNvbmUudXBkYXRlTWF0cml4KCk7XHJcblxyXG59O1xyXG5cclxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yID0gZnVuY3Rpb24gKGNvbG9yKSB7XHJcblxyXG5cdHRoaXMubGluZS5tYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpO1xyXG5cdHRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5zZXQoY29sb3IpO1xyXG5cclxufTtcclxuXHJcbkFycm93SGVscGVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKHNvdXJjZSkge1xyXG5cclxuXHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsIHNvdXJjZSwgZmFsc2UpO1xyXG5cclxuXHR0aGlzLmxpbmUuY29weShzb3VyY2UubGluZSk7XHJcblx0dGhpcy5jb25lLmNvcHkoc291cmNlLmNvbmUpO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkodGhpcyk7XHJcblxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3Igc3JvdWNoZXJheSAvIGh0dHA6Ly9zcm91Y2hlcmF5Lm9yZy9cclxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cclxuICovXHJcblxyXG5mdW5jdGlvbiBBeGVzSGVscGVyKHNpemUpIHtcclxuXHJcblx0c2l6ZSA9IHNpemUgfHwgMTtcclxuXHJcblx0dmFyIHZlcnRpY2VzID0gW1xyXG5cdFx0MCwgMCwgMCwgc2l6ZSwgMCwgMCxcclxuXHRcdDAsIDAsIDAsIDAsIHNpemUsIDAsXHJcblx0XHQwLCAwLCAwLCAwLCAwLCBzaXplXHJcblx0XTtcclxuXHJcblx0dmFyIGNvbG9ycyA9IFtcclxuXHRcdDEsIDAsIDAsIDEsIDAuNiwgMCxcclxuXHRcdDAsIDEsIDAsIDAuNiwgMSwgMCxcclxuXHRcdDAsIDAsIDEsIDAsIDAuNiwgMVxyXG5cdF07XHJcblxyXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh2ZXJ0aWNlcywgMykpO1xyXG5cdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDMpKTtcclxuXHJcblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgdmVydGV4Q29sb3JzOiBWZXJ0ZXhDb2xvcnMgfSk7XHJcblxyXG5cdExpbmVTZWdtZW50cy5jYWxsKHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCk7XHJcblxyXG59XHJcblxyXG5BeGVzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTGluZVNlZ21lbnRzLnByb3RvdHlwZSk7XHJcbkF4ZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXhlc0hlbHBlcjtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEZhY2U0KGEsIGIsIGMsIGQsIG5vcm1hbCwgY29sb3IsIG1hdGVyaWFsSW5kZXgpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5GYWNlNCBoYXMgYmVlbiByZW1vdmVkLiBBIFRIUkVFLkZhY2UzIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgRmFjZTMoYSwgYiwgYywgbm9ybWFsLCBjb2xvciwgbWF0ZXJpYWxJbmRleCk7XHJcblxyXG59XHJcblxyXG52YXIgTGluZVN0cmlwID0gMDtcclxuXHJcbnZhciBMaW5lUGllY2VzID0gMTtcclxuXHJcbmZ1bmN0aW9uIE1lc2hGYWNlTWF0ZXJpYWwobWF0ZXJpYWxzKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuTWVzaEZhY2VNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nKTtcclxuXHRyZXR1cm4gbWF0ZXJpYWxzO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gTXVsdGlNYXRlcmlhbChtYXRlcmlhbHMpIHtcclxuXHJcblx0aWYgKG1hdGVyaWFscyA9PT0gdW5kZWZpbmVkKSB7IG1hdGVyaWFscyA9IFtdOyB9XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuTXVsdGlNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nKTtcclxuXHRtYXRlcmlhbHMuaXNNdWx0aU1hdGVyaWFsID0gdHJ1ZTtcclxuXHRtYXRlcmlhbHMubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xyXG5cdG1hdGVyaWFscy5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRyZXR1cm4gbWF0ZXJpYWxzLnNsaWNlKCk7XHJcblxyXG5cdH07XHJcblx0cmV0dXJuIG1hdGVyaWFscztcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFBvaW50Q2xvdWQoZ2VvbWV0cnksIG1hdGVyaWFsKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nKTtcclxuXHRyZXR1cm4gbmV3IFBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUGFydGljbGUobWF0ZXJpYWwpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5QYXJ0aWNsZSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlNwcml0ZS4nKTtcclxuXHRyZXR1cm4gbmV3IFNwcml0ZShtYXRlcmlhbCk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbShnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5QYXJ0aWNsZVN5c3RlbSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy4nKTtcclxuXHRyZXR1cm4gbmV3IFBvaW50cyhnZW9tZXRyeSwgbWF0ZXJpYWwpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUG9pbnRDbG91ZE1hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nKTtcclxuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUGFydGljbGVCYXNpY01hdGVyaWFsKHBhcmFtZXRlcnMpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nKTtcclxuXHRyZXR1cm4gbmV3IFBvaW50c01hdGVyaWFsKHBhcmFtZXRlcnMpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gUGFydGljbGVTeXN0ZW1NYXRlcmlhbChwYXJhbWV0ZXJzKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuUGFydGljbGVTeXN0ZW1NYXRlcmlhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50c01hdGVyaWFsLicpO1xyXG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwocGFyYW1ldGVycyk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBWZXJ0ZXgoeCwgeSwgeikge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlcnRleCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuVmVjdG9yMyBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgVmVjdG9yMyh4LCB5LCB6KTtcclxuXHJcbn1cclxuXHJcbi8vXHJcblxyXG5mdW5jdGlvbiBEeW5hbWljQnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkR5bmFtaWNCdWZmZXJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoKS5zZXREeW5hbWljKCB0cnVlICkgaW5zdGVhZC4nKTtcclxuXHRyZXR1cm4gbmV3IEJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpLnNldER5bmFtaWModHJ1ZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBJbnQ4QXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nKTtcclxuXHRyZXR1cm4gbmV3IEludDhCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVpbnQ4QXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlVpbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDhCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgVWludDhCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5VaW50OENsYW1wZWRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBJbnQxNkF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nKTtcclxuXHRyZXR1cm4gbmV3IEludDE2QnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBVaW50MTZBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuVWludDE2QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC4nKTtcclxuXHRyZXR1cm4gbmV3IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gSW50MzJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIG5ldyBJbnQzMkJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gVWludDMyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlVpbnQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIG5ldyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIEZsb2F0MzJBdHRyaWJ1dGUoYXJyYXksIGl0ZW1TaXplKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuRmxvYXQzMkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gRmxvYXQ2NEF0dHJpYnV0ZShhcnJheSwgaXRlbVNpemUpIHtcclxuXHJcblx0Y29uc29sZS53YXJuKCdUSFJFRS5GbG9hdDY0QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIG5ldyBGbG9hdDY0QnVmZmVyQXR0cmlidXRlKGFycmF5LCBpdGVtU2l6ZSk7XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuQ3VydmUuY3JlYXRlID0gZnVuY3Rpb24gKGNvbnN0cnVjdCwgZ2V0UG9pbnQpIHtcclxuXHJcblx0Y29uc29sZS5sb2coJ1RIUkVFLkN1cnZlLmNyZWF0ZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQnKTtcclxuXHJcblx0Y29uc3RydWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ3VydmUucHJvdG90eXBlKTtcclxuXHRjb25zdHJ1Y3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0O1xyXG5cdGNvbnN0cnVjdC5wcm90b3R5cGUuZ2V0UG9pbnQgPSBnZXRQb2ludDtcclxuXHJcblx0cmV0dXJuIGNvbnN0cnVjdDtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmFzc2lnbihDdXJ2ZVBhdGgucHJvdG90eXBlLCB7XHJcblxyXG5cdGNyZWF0ZVBvaW50c0dlb21ldHJ5OiBmdW5jdGlvbiAoZGl2aXNpb25zKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdC8vIGdlbmVyYXRlIGdlb21ldHJ5IGZyb20gcGF0aCBwb2ludHMgKGZvciBMaW5lIG9yIFBvaW50cyBvYmplY3RzKVxyXG5cclxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFBvaW50cyhkaXZpc2lvbnMpO1xyXG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkocHRzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y3JlYXRlU3BhY2VkUG9pbnRzR2VvbWV0cnk6IGZ1bmN0aW9uIChkaXZpc2lvbnMpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyk7XHJcblxyXG5cdFx0Ly8gZ2VuZXJhdGUgZ2VvbWV0cnkgZnJvbSBlcXVpZGlzdGFudCBzYW1wbGluZyBhbG9uZyB0aGUgcGF0aFxyXG5cclxuXHRcdHZhciBwdHMgPSB0aGlzLmdldFNwYWNlZFBvaW50cyhkaXZpc2lvbnMpO1xyXG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlR2VvbWV0cnkocHRzKTtcclxuXHJcblx0fSxcclxuXHJcblx0Y3JlYXRlR2VvbWV0cnk6IGZ1bmN0aW9uIChwb2ludHMpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyk7XHJcblxyXG5cdFx0dmFyIGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgcG9pbnQgPSBwb2ludHNbaV07XHJcblx0XHRcdGdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFZlY3RvcjMocG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwKSk7XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBnZW9tZXRyeTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmFzc2lnbihQYXRoLnByb3RvdHlwZSwge1xyXG5cclxuXHRmcm9tUG9pbnRzOiBmdW5jdGlvbiAocG9pbnRzKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5QYXRoOiAuZnJvbVBvaW50cygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qb2ludHMoKS4nKTtcclxuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyhwb2ludHMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8vXHJcblxyXG5mdW5jdGlvbiBDbG9zZWRTcGxpbmVDdXJ2ZTMocG9pbnRzKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuQ2xvc2VkU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyk7XHJcblxyXG5cdENhdG11bGxSb21DdXJ2ZTMuY2FsbCh0aGlzLCBwb2ludHMpO1xyXG5cdHRoaXMudHlwZSA9ICdjYXRtdWxscm9tJztcclxuXHR0aGlzLmNsb3NlZCA9IHRydWU7XHJcblxyXG59XHJcblxyXG5DbG9zZWRTcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSk7XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gU3BsaW5lQ3VydmUzKHBvaW50cykge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicpO1xyXG5cclxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwodGhpcywgcG9pbnRzKTtcclxuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XHJcblxyXG59XHJcblxyXG5TcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSk7XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gU3BsaW5lKHBvaW50cykge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicpO1xyXG5cclxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwodGhpcywgcG9pbnRzKTtcclxuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XHJcblxyXG59XHJcblxyXG5TcGxpbmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFNwbGluZS5wcm90b3R5cGUsIHtcclxuXHJcblx0aW5pdEZyb21BcnJheTogZnVuY3Rpb24gKCAvKiBhICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU3BsaW5lOiAuaW5pdEZyb21BcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0Z2V0Q29udHJvbFBvaW50c0FycmF5OiBmdW5jdGlvbiAoIC8qIG9wdGlvbmFsVGFyZ2V0ICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU3BsaW5lOiAuZ2V0Q29udHJvbFBvaW50c0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg6IGZ1bmN0aW9uICggLyogc2FtcGxpbmdDb2VmICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU3BsaW5lOiAucmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoKCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gQXhpc0hlbHBlcihzaXplKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuQXhpc0hlbHBlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkF4ZXNIZWxwZXIuJyk7XHJcblx0cmV0dXJuIG5ldyBBeGVzSGVscGVyKHNpemUpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gQm91bmRpbmdCb3hIZWxwZXIob2JqZWN0LCBjb2xvcikge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkJvdW5kaW5nQm94SGVscGVyIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIENyZWF0aW5nIGEgVEhSRUUuQm94SGVscGVyIGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIG5ldyBCb3hIZWxwZXIob2JqZWN0LCBjb2xvcik7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBFZGdlc0hlbHBlcihvYmplY3QsIGhleCkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkVkZ2VzSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5FZGdlc0dlb21ldHJ5IGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIG5ldyBMaW5lU2VnbWVudHMobmV3IEVkZ2VzR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5KSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKHsgY29sb3I6IGhleCAhPT0gdW5kZWZpbmVkID8gaGV4IDogMHhmZmZmZmYgfSkpO1xyXG5cclxufVxyXG5cclxuR3JpZEhlbHBlci5wcm90b3R5cGUuc2V0Q29sb3JzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRjb25zb2xlLmVycm9yKCdUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuJyk7XHJcblxyXG59O1xyXG5cclxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0Y29uc29sZS5lcnJvcignVEhSRUUuU2tlbGV0b25IZWxwZXI6IHVwZGF0ZSgpIG5vIGxvbmdlciBuZWVkcyB0byBiZSBjYWxsZWQuJyk7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gV2lyZWZyYW1lSGVscGVyKG9iamVjdCwgaGV4KSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuV2lyZWZyYW1lSGVscGVyIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5XaXJlZnJhbWVHZW9tZXRyeSBpbnN0ZWFkLicpO1xyXG5cdHJldHVybiBuZXcgTGluZVNlZ21lbnRzKG5ldyBXaXJlZnJhbWVHZW9tZXRyeShvYmplY3QuZ2VvbWV0cnkpLCBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9KSk7XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmFzc2lnbihMb2FkZXIucHJvdG90eXBlLCB7XHJcblxyXG5cdGV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAodXJsKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Mb2FkZXI6IC5leHRyYWN0VXJsQmFzZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSgpIGluc3RlYWQuJyk7XHJcblx0XHRyZXR1cm4gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UodXJsKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5Mb2FkZXIuSGFuZGxlcnMgPSB7XHJcblxyXG5cdGFkZDogZnVuY3Rpb24gKCAvKiByZWdleCwgbG9hZGVyICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTG9hZGVyOiBIYW5kbGVycy5hZGQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgTG9hZGluZ01hbmFnZXIuYWRkSGFuZGxlcigpIGluc3RlYWQuJyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGdldDogZnVuY3Rpb24gKCAvKiBmaWxlICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTG9hZGVyOiBIYW5kbGVycy5nZXQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgTG9hZGluZ01hbmFnZXIuZ2V0SGFuZGxlcigpIGluc3RlYWQuJyk7XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBYSFJMb2FkZXIobWFuYWdlcikge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlhIUkxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkZpbGVMb2FkZXIuJyk7XHJcblx0cmV0dXJuIG5ldyBGaWxlTG9hZGVyKG1hbmFnZXIpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gQmluYXJ5VGV4dHVyZUxvYWRlcihtYW5hZ2VyKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicpO1xyXG5cdHJldHVybiBuZXcgRGF0YVRleHR1cmVMb2FkZXIobWFuYWdlcik7XHJcblxyXG59XHJcblxyXG5PYmplY3QuYXNzaWduKE9iamVjdExvYWRlci5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiAuc2V0VGV4dHVyZVBhdGgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRSZXNvdXJjZVBhdGgoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLnNldFJlc291cmNlUGF0aCh2YWx1ZSk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLy9cclxuXHJcbk9iamVjdC5hc3NpZ24oQm94Mi5wcm90b3R5cGUsIHtcclxuXHJcblx0Y2VudGVyOiBmdW5jdGlvbiAob3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDI6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldENlbnRlcihvcHRpb25hbFRhcmdldCk7XHJcblxyXG5cdH0sXHJcblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDI6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcclxuXHJcblx0fSxcclxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MjogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveChib3gpO1xyXG5cclxuXHR9LFxyXG5cdHNpemU6IGZ1bmN0aW9uIChvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MjogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRTaXplKG9wdGlvbmFsVGFyZ2V0KTtcclxuXHJcblx0fVxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oQm94My5wcm90b3R5cGUsIHtcclxuXHJcblx0Y2VudGVyOiBmdW5jdGlvbiAob3B0aW9uYWxUYXJnZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldENlbnRlcihvcHRpb25hbFRhcmdldCk7XHJcblxyXG5cdH0sXHJcblx0ZW1wdHk6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJveDM6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcclxuXHJcblx0fSxcclxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKGJveCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQm94MzogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveChib3gpO1xyXG5cclxuXHR9LFxyXG5cdGlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoc3BoZXJlKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKHNwaGVyZSk7XHJcblxyXG5cdH0sXHJcblx0c2l6ZTogZnVuY3Rpb24gKG9wdGlvbmFsVGFyZ2V0KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldFNpemUob3B0aW9uYWxUYXJnZXQpO1xyXG5cclxuXHR9XHJcbn0pO1xyXG5cclxuTGluZTMucHJvdG90eXBlLmNlbnRlciA9IGZ1bmN0aW9uIChvcHRpb25hbFRhcmdldCkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyk7XHJcblx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKG9wdGlvbmFsVGFyZ2V0KTtcclxuXHJcbn07XHJcblxyXG5PYmplY3QuYXNzaWduKF9NYXRoLCB7XHJcblxyXG5cdHJhbmRvbTE2OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5NYXRoOiAucmFuZG9tMTYoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgTWF0aC5yYW5kb20oKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIE1hdGgucmFuZG9tKCk7XHJcblxyXG5cdH0sXHJcblxyXG5cdG5lYXJlc3RQb3dlck9mVHdvOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGg6IC5uZWFyZXN0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZsb29yUG93ZXJPZlR3bygpLicpO1xyXG5cdFx0cmV0dXJuIF9NYXRoLmZsb29yUG93ZXJPZlR3byh2YWx1ZSk7XHJcblxyXG5cdH0sXHJcblxyXG5cdG5leHRQb3dlck9mVHdvOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGg6IC5uZXh0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNlaWxQb3dlck9mVHdvKCkuJyk7XHJcblx0XHRyZXR1cm4gX01hdGguY2VpbFBvd2VyT2ZUd28odmFsdWUpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oTWF0cml4My5wcm90b3R5cGUsIHtcclxuXHJcblx0ZmxhdHRlblRvQXJyYXlPZmZzZXQ6IGZ1bmN0aW9uIChhcnJheSwgb2Zmc2V0KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4MzogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIik7XHJcblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KGFycmF5LCBvZmZzZXQpO1xyXG5cclxuXHR9LFxyXG5cdG11bHRpcGx5VmVjdG9yMzogZnVuY3Rpb24gKHZlY3Rvcikge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXgzKCBtYXRyaXggKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDModGhpcyk7XHJcblxyXG5cdH0sXHJcblx0bXVsdGlwbHlWZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLykge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0YXBwbHlUb0J1ZmZlcjogZnVuY3Rpb24gKGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8pIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDM6IC5hcHBseVRvQnVmZmVyKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZShidWZmZXIpO1xyXG5cclxuXHR9LFxyXG5cdGFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4MzogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oTWF0cml4NC5wcm90b3R5cGUsIHtcclxuXHJcblx0ZXh0cmFjdFBvc2l0aW9uOiBmdW5jdGlvbiAobSkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuY29weVBvc2l0aW9uKG0pO1xyXG5cclxuXHR9LFxyXG5cdGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OiBmdW5jdGlvbiAoYXJyYXksIG9mZnNldCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIpO1xyXG5cdFx0cmV0dXJuIHRoaXMudG9BcnJheShhcnJheSwgb2Zmc2V0KTtcclxuXHJcblx0fSxcclxuXHRnZXRQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuTWF0cml4NDogLmdldFBvc2l0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCkuc2V0RnJvbU1hdHJpeENvbHVtbih0aGlzLCAzKTtcclxuXHJcblx0fSxcclxuXHRzZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAocSkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuTWF0cml4NDogLnNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbigpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24ocSk7XHJcblxyXG5cdH0sXHJcblx0bXVsdGlwbHlUb0FycmF5OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlUb0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRtdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICh2ZWN0b3IpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nKTtcclxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KHRoaXMpO1xyXG5cclxuXHR9LFxyXG5cdG11bHRpcGx5VmVjdG9yNDogZnVuY3Rpb24gKHZlY3Rvcikge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yNCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQodGhpcyk7XHJcblxyXG5cdH0sXHJcblx0bXVsdGlwbHlWZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLykge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0cm90YXRlQXhpczogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFZlY3RvcjMudHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXggKSBpbnN0ZWFkLicpO1xyXG5cdFx0di50cmFuc2Zvcm1EaXJlY3Rpb24odGhpcyk7XHJcblxyXG5cdH0sXHJcblx0Y3Jvc3NWZWN0b3I6IGZ1bmN0aW9uICh2ZWN0b3IpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5jcm9zc1ZlY3RvcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQodGhpcyk7XHJcblxyXG5cdH0sXHJcblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4NDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVYKCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4NDogLnJvdGF0ZVkoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdHJvdGF0ZVo6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5NYXRyaXg0OiAucm90YXRlWigpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0cm90YXRlQnlBeGlzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4NDogLnJvdGF0ZUJ5QXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0YXBwbHlUb0J1ZmZlcjogZnVuY3Rpb24gKGJ1ZmZlciAvKiwgb2Zmc2V0LCBsZW5ndGggKi8pIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5hcHBseVRvQnVmZmVyKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG1hdHJpeC5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZShidWZmZXIpO1xyXG5cclxuXHR9LFxyXG5cdGFwcGx5VG9WZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYXJyYXksIG9mZnNldCwgbGVuZ3RoICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuTWF0cml4NDogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdG1ha2VGcnVzdHVtOiBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlRnJ1c3R1bSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIGluc3RlYWQuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5tYWtlUGVyc3BlY3RpdmUobGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcblBsYW5lLnByb3RvdHlwZS5pc0ludGVyc2VjdGlvbkxpbmUgPSBmdW5jdGlvbiAobGluZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLlBsYW5lOiAuaXNJbnRlcnNlY3Rpb25MaW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0xpbmUoKS4nKTtcclxuXHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzTGluZShsaW5lKTtcclxuXHJcbn07XHJcblxyXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5tdWx0aXBseVZlY3RvcjMgPSBmdW5jdGlvbiAodmVjdG9yKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBpcyBub3cgdmVjdG9yLmFwcGx5UXVhdGVybmlvbiggcXVhdGVybmlvbiApIGluc3RlYWQuJyk7XHJcblx0cmV0dXJuIHZlY3Rvci5hcHBseVF1YXRlcm5pb24odGhpcyk7XHJcblxyXG59O1xyXG5cclxuT2JqZWN0LmFzc2lnbihSYXkucHJvdG90eXBlLCB7XHJcblxyXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoYm94KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goYm94KTtcclxuXHJcblx0fSxcclxuXHRpc0ludGVyc2VjdGlvblBsYW5lOiBmdW5jdGlvbiAocGxhbmUpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uUGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzUGxhbmUoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNQbGFuZShwbGFuZSk7XHJcblxyXG5cdH0sXHJcblx0aXNJbnRlcnNlY3Rpb25TcGhlcmU6IGZ1bmN0aW9uIChzcGhlcmUpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uU3BoZXJlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1NwaGVyZSgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShzcGhlcmUpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oVHJpYW5nbGUucHJvdG90eXBlLCB7XHJcblxyXG5cdGFyZWE6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAuYXJlYSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEFyZWEoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldEFyZWEoKTtcclxuXHJcblx0fSxcclxuXHRiYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uIChwb2ludCwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5UcmlhbmdsZTogLmJhcnljb29yZEZyb21Qb2ludCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldEJhcnljb29yZCgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0QmFyeWNvb3JkKHBvaW50LCB0YXJnZXQpO1xyXG5cclxuXHR9LFxyXG5cdG1pZHBvaW50OiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5UcmlhbmdsZTogLm1pZHBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0TWlkcG9pbnQoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldE1pZHBvaW50KHRhcmdldCk7XHJcblxyXG5cdH0sXHJcblx0bm9ybWFsOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5UcmlhbmdsZTogLm5vcm1hbCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE5vcm1hbCgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0Tm9ybWFsKHRhcmdldCk7XHJcblxyXG5cdH0sXHJcblx0cGxhbmU6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAucGxhbmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRQbGFuZSgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2V0UGxhbmUodGFyZ2V0KTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFRyaWFuZ2xlLCB7XHJcblxyXG5cdGJhcnljb29yZEZyb21Qb2ludDogZnVuY3Rpb24gKHBvaW50LCBhLCBiLCBjLCB0YXJnZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyk7XHJcblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0QmFyeWNvb3JkKHBvaW50LCBhLCBiLCBjLCB0YXJnZXQpO1xyXG5cclxuXHR9LFxyXG5cdG5vcm1hbDogZnVuY3Rpb24gKGEsIGIsIGMsIHRhcmdldCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuVHJpYW5nbGU6IC5ub3JtYWwoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXROb3JtYWwoKS4nKTtcclxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoYSwgYiwgYywgdGFyZ2V0KTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFNoYXBlLnByb3RvdHlwZSwge1xyXG5cclxuXHRleHRyYWN0QWxsUG9pbnRzOiBmdW5jdGlvbiAoZGl2aXNpb25zKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5TaGFwZTogLmV4dHJhY3RBbGxQb2ludHMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmV4dHJhY3RQb2ludHMoKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyhkaXZpc2lvbnMpO1xyXG5cclxuXHR9LFxyXG5cdGV4dHJ1ZGU6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5TaGFwZTogLmV4dHJ1ZGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXh0cnVkZUdlb21ldHJ5KCkgaW5zdGVhZC4nKTtcclxuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KHRoaXMsIG9wdGlvbnMpO1xyXG5cclxuXHR9LFxyXG5cdG1ha2VHZW9tZXRyeTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlNoYXBlOiAubWFrZUdlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFNoYXBlR2VvbWV0cnkoKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KHRoaXMsIG9wdGlvbnMpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oVmVjdG9yMi5wcm90b3R5cGUsIHtcclxuXHJcblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yMjogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5mcm9tQnVmZmVyQXR0cmlidXRlKGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCk7XHJcblxyXG5cdH0sXHJcblx0ZGlzdGFuY2VUb01hbmhhdHRhbjogZnVuY3Rpb24gKHYpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjI6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuRGlzdGFuY2VUbyh2KTtcclxuXHJcblx0fSxcclxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oVmVjdG9yMy5wcm90b3R5cGUsIHtcclxuXHJcblx0c2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC4nKTtcclxuXHJcblx0fSxcclxuXHRzZXRFdWxlckZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVF1YXRlcm5pb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVF1YXRlcm5pb24oKSBpbnN0ZWFkLicpO1xyXG5cclxuXHR9LFxyXG5cdGdldFBvc2l0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKG0pIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjM6IC5nZXRQb3NpdGlvbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4UG9zaXRpb24oKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhQb3NpdGlvbihtKTtcclxuXHJcblx0fSxcclxuXHRnZXRTY2FsZUZyb21NYXRyaXg6IGZ1bmN0aW9uIChtKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3IzOiAuZ2V0U2NhbGVGcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFNjYWxlKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUobSk7XHJcblxyXG5cdH0sXHJcblx0Z2V0Q29sdW1uRnJvbU1hdHJpeDogZnVuY3Rpb24gKGluZGV4LCBtYXRyaXgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjM6IC5nZXRDb2x1bW5Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeENvbHVtbigpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbihtYXRyaXgsIGluZGV4KTtcclxuXHJcblx0fSxcclxuXHRhcHBseVByb2plY3Rpb246IGZ1bmN0aW9uIChtKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3IzOiAuYXBwbHlQcm9qZWN0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5hcHBseU1hdHJpeDQoIG0gKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KG0pO1xyXG5cclxuXHR9LFxyXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjM6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpO1xyXG5cclxuXHR9LFxyXG5cdGRpc3RhbmNlVG9NYW5oYXR0YW46IGZ1bmN0aW9uICh2KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3IzOiAuZGlzdGFuY2VUb01hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkRpc3RhbmNlVG8oKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8odik7XHJcblxyXG5cdH0sXHJcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5tYW5oYXR0YW5MZW5ndGgoKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuYXNzaWduKFZlY3RvcjQucHJvdG90eXBlLCB7XHJcblxyXG5cdGZyb21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlZlY3RvcjQ6IC5mcm9tQXR0cmlidXRlKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQpO1xyXG5cclxuXHR9LFxyXG5cdGxlbmd0aE1hbmhhdHRhbjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuVmVjdG9yNDogLmxlbmd0aE1hbmhhdHRhbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1hbmhhdHRhbkxlbmd0aCgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuLy9cclxuXHJcbk9iamVjdC5hc3NpZ24oR2VvbWV0cnkucHJvdG90eXBlLCB7XHJcblxyXG5cdGNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkdlb21ldHJ5OiAuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTGluZS5jb21wdXRlTGluZURpc3RhbmNlcygpIGluc3RlYWQuJyk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmFzc2lnbihPYmplY3QzRC5wcm90b3R5cGUsIHtcclxuXHJcblx0Z2V0Q2hpbGRCeU5hbWU6IGZ1bmN0aW9uIChuYW1lKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3QzRDogLmdldENoaWxkQnlOYW1lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0T2JqZWN0QnlOYW1lKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUobmFtZSk7XHJcblxyXG5cdH0sXHJcblx0cmVuZGVyRGVwdGg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdDNEOiAucmVuZGVyRGVwdGggaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5yZW5kZXJPcmRlciwgaW5zdGVhZC4nKTtcclxuXHJcblx0fSxcclxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uIChkaXN0YW5jZSwgYXhpcykge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0M0Q6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSBpbnN0ZWFkLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGF4aXMsIGRpc3RhbmNlKTtcclxuXHJcblx0fSxcclxuXHRnZXRXb3JsZFJvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nKTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhPYmplY3QzRC5wcm90b3R5cGUsIHtcclxuXHJcblx0ZXVsZXJPcmRlcjoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdDNEOiAuZXVsZXJPcmRlciBpcyBub3cgLnJvdGF0aW9uLm9yZGVyLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGlvbi5vcmRlcjtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuJyk7XHJcblx0XHRcdHRoaXMucm90YXRpb24ub3JkZXIgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHR1c2VRdWF0ZXJuaW9uOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyk7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5PYmplY3QzRDogLnVzZVF1YXRlcm5pb24gaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIGxpYnJhcnkgbm93IHVzZXMgcXVhdGVybmlvbnMgYnkgZGVmYXVsdC4nKTtcclxuXHJcblx0XHR9XHJcblx0fVxyXG5cclxufSk7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhMT0QucHJvdG90eXBlLCB7XHJcblxyXG5cdG9iamVjdHM6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5MT0Q6IC5vYmplY3RzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmxldmVscy4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMubGV2ZWxzO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTa2VsZXRvbi5wcm90b3R5cGUsICd1c2VWZXJ0ZXhUZXh0dXJlJywge1xyXG5cclxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlNrZWxldG9uOiB1c2VWZXJ0ZXhUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0c2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcblNraW5uZWRNZXNoLnByb3RvdHlwZS5pbml0Qm9uZXMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlNraW5uZWRNZXNoOiBpbml0Qm9uZXMoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxufTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdXJ2ZS5wcm90b3R5cGUsICdfX2FyY0xlbmd0aERpdmlzaW9ucycsIHtcclxuXHJcblx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xyXG5cclxuXHR9LFxyXG5cdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLicpO1xyXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSB2YWx1ZTtcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuUGVyc3BlY3RpdmVDYW1lcmEucHJvdG90eXBlLnNldExlbnMgPSBmdW5jdGlvbiAoZm9jYWxMZW5ndGgsIGZpbG1HYXVnZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oXCJUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5zZXRMZW5zIGlzIGRlcHJlY2F0ZWQuIFwiICtcclxuXHRcdFwiVXNlIC5zZXRGb2NhbExlbmd0aCBhbmQgLmZpbG1HYXVnZSBmb3IgYSBwaG90b2dyYXBoaWMgc2V0dXAuXCIpO1xyXG5cclxuXHRpZiAoZmlsbUdhdWdlICE9PSB1bmRlZmluZWQpIHsgdGhpcy5maWxtR2F1Z2UgPSBmaWxtR2F1Z2U7IH1cclxuXHR0aGlzLnNldEZvY2FsTGVuZ3RoKGZvY2FsTGVuZ3RoKTtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTGlnaHQucHJvdG90eXBlLCB7XHJcblx0b25seVNoYWRvdzoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpZ2h0OiAub25seVNoYWRvdyBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0NhbWVyYUZvdjoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZvdiA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0NhbWVyYUxlZnQ6IHtcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTGVmdCBpcyBub3cgLnNoYWRvdy5jYW1lcmEubGVmdC4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dDYW1lcmFSaWdodDoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFSaWdodCBpcyBub3cgLnNoYWRvdy5jYW1lcmEucmlnaHQuJyk7XHJcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5yaWdodCA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0NhbWVyYVRvcDoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnRvcCA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0NhbWVyYUJvdHRvbToge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFCb3R0b20gaXMgbm93IC5zaGFkb3cuY2FtZXJhLmJvdHRvbS4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0NhbWVyYU5lYXI6IHtcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTmVhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEubmVhci4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXIgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dDYW1lcmFGYXI6IHtcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuJyk7XHJcblx0XHRcdHRoaXMuc2hhZG93LmNhbWVyYS5mYXIgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dDYW1lcmFWaXNpYmxlOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFWaXNpYmxlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuQ2FtZXJhSGVscGVyKCBsaWdodC5zaGFkb3cuY2FtZXJhICkgaW5zdGVhZC4nKTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dCaWFzOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5MaWdodDogLnNoYWRvd0JpYXMgaXMgbm93IC5zaGFkb3cuYmlhcy4nKTtcclxuXHRcdFx0dGhpcy5zaGFkb3cuYmlhcyA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd0RhcmtuZXNzOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTGlnaHQ6IC5zaGFkb3dEYXJrbmVzcyBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHNoYWRvd01hcFdpZHRoOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5MaWdodDogLnNoYWRvd01hcFdpZHRoIGlzIG5vdyAuc2hhZG93Lm1hcFNpemUud2lkdGguJyk7XHJcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUud2lkdGggPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dNYXBIZWlnaHQ6IHtcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkxpZ2h0OiAuc2hhZG93TWFwSGVpZ2h0IGlzIG5vdyAuc2hhZG93Lm1hcFNpemUuaGVpZ2h0LicpO1xyXG5cdFx0XHR0aGlzLnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcbn0pO1xyXG5cclxuLy9cclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcclxuXHJcblx0bGVuZ3RoOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RoO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xyXG5cclxuXHRjb3B5SW5kaWNlc0FycmF5OiBmdW5jdGlvbiAoIC8qIGluZGljZXMgKi8pIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5jb3B5SW5kaWNlc0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRzZXRBcnJheTogZnVuY3Rpb24gKGFycmF5KSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IC5zZXRBcnJheSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgQnVmZmVyR2VvbWV0cnkgLnNldEF0dHJpYnV0ZSB0byByZXBsYWNlL3Jlc2l6ZSBhdHRyaWJ1dGUgYnVmZmVycycpO1xyXG5cclxuXHRcdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gdGhpcy5pdGVtU2l6ZSA6IDA7XHJcblx0XHR0aGlzLmFycmF5ID0gYXJyYXk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmFzc2lnbihCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcclxuXHJcblx0YWRkSW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRJbmRleCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEluZGV4KCkuJyk7XHJcblx0XHR0aGlzLnNldEluZGV4KGluZGV4KTtcclxuXHJcblx0fSxcclxuXHRhZGREcmF3Q2FsbDogZnVuY3Rpb24gKHN0YXJ0LCBjb3VudCwgaW5kZXhPZmZzZXQpIHtcclxuXHJcblx0XHRpZiAoaW5kZXhPZmZzZXQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIGluZGV4T2Zmc2V0LicpO1xyXG5cclxuXHRcdH1cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGREcmF3Q2FsbCgpIGlzIG5vdyAuYWRkR3JvdXAoKS4nKTtcclxuXHRcdHRoaXMuYWRkR3JvdXAoc3RhcnQsIGNvdW50KTtcclxuXHJcblx0fSxcclxuXHRjbGVhckRyYXdDYWxsczogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jbGVhckRyYXdDYWxscygpIGlzIG5vdyAuY2xlYXJHcm91cHMoKS4nKTtcclxuXHRcdHRoaXMuY2xlYXJHcm91cHMoKTtcclxuXHJcblx0fSxcclxuXHRjb21wdXRlVGFuZ2VudHM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRjb21wdXRlT2Zmc2V0czogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlT2Zmc2V0cygpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XHJcblxyXG5cdGRyYXdjYWxsczoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmRyYXdjYWxscyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLmdyb3VwcztcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRvZmZzZXRzOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZ3JvdXBzO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5hc3NpZ24oSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLCB7XHJcblxyXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoYXJyYXkpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkludGVybGVhdmVkQnVmZmVyOiAuc2V0QXJyYXkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIEJ1ZmZlckdlb21ldHJ5IC5zZXRBdHRyaWJ1dGUgdG8gcmVwbGFjZS9yZXNpemUgYXR0cmlidXRlIGJ1ZmZlcnMnKTtcclxuXHJcblx0XHR0aGlzLmNvdW50ID0gYXJyYXkgIT09IHVuZGVmaW5lZCA/IGFycmF5Lmxlbmd0aCAvIHRoaXMuc3RyaWRlIDogMDtcclxuXHRcdHRoaXMuYXJyYXkgPSBhcnJheTtcclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmFzc2lnbihFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XHJcblxyXG5cdGdldEFycmF5czogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogLmdldEFycmF5cygpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZFNoYXBlTGlzdDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogLmFkZFNoYXBlTGlzdCgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGFkZFNoYXBlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGUoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8vXHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhVbmlmb3JtLnByb3RvdHlwZSwge1xyXG5cclxuXHRkeW5hbWljOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuVW5pZm9ybTogLmR5bmFtaWMgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyk7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0b25VcGRhdGU6IHtcclxuXHRcdHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlVuaWZvcm06IC5vblVwZGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBvYmplY3Qub25CZWZvcmVSZW5kZXIoKSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcztcclxuXHJcblx0XHR9XHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTWF0ZXJpYWwucHJvdG90eXBlLCB7XHJcblxyXG5cdHdyYXBBcm91bmQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGVyaWFsOiAud3JhcEFyb3VuZCBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRvdmVyZHJhdzoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0d3JhcFJHQjoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLk1hdGVyaWFsOiAud3JhcFJHQiBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKCk7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHNoYWRpbmc6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcignVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nKTtcclxuXHRcdFx0dGhpcy5mbGF0U2hhZGluZyA9ICh2YWx1ZSA9PT0gRmxhdFNoYWRpbmcpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRzdGVuY2lsTWFzazoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc3RlbmNpbE1hc2sgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5zdGVuY2lsRnVuY01hc2sgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc3RlbmNpbEZ1bmNNYXNrO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnN0ZW5jaWxNYXNrIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc3RlbmNpbEZ1bmNNYXNrIGluc3RlYWQuJyk7XHJcblx0XHRcdHRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTWVzaFBob25nTWF0ZXJpYWwucHJvdG90eXBlLCB7XHJcblxyXG5cdG1ldGFsOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZCcpO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFNoYWRlck1hdGVyaWFsLnByb3RvdHlwZSwge1xyXG5cclxuXHRkZXJpdmF0aXZlczoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLlNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXM7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLiBTaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicpO1xyXG5cdFx0XHR0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmFzc2lnbihXZWJHTFJlbmRlcmVyLnByb3RvdHlwZSwge1xyXG5cclxuXHRjbGVhclRhcmdldDogZnVuY3Rpb24gKHJlbmRlclRhcmdldCwgY29sb3IsIGRlcHRoLCBzdGVuY2lsKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY2xlYXJUYXJnZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNldFJlbmRlclRhcmdldCgpIGFuZCAuY2xlYXIoKSBpbnN0ZWFkLicpO1xyXG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KTtcclxuXHRcdHRoaXMuY2xlYXIoY29sb3IsIGRlcHRoLCBzdGVuY2lsKTtcclxuXHJcblx0fSxcclxuXHRhbmltYXRlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5hbmltYXRlKCkgaXMgbm93IC5zZXRBbmltYXRpb25Mb29wKCkuJyk7XHJcblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AoY2FsbGJhY2spO1xyXG5cclxuXHR9LFxyXG5cdGdldEN1cnJlbnRSZW5kZXJUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmdldFJlbmRlclRhcmdldCgpO1xyXG5cclxuXHR9LFxyXG5cdGdldE1heEFuaXNvdHJvcHk6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRNYXhBbmlzb3Ryb3B5KCkgaXMgbm93IC5jYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTtcclxuXHJcblx0fSxcclxuXHRnZXRQcmVjaXNpb246IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMucHJlY2lzaW9uO1xyXG5cclxuXHR9LFxyXG5cdHJlc2V0R0xTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLnN0YXRlLnJlc2V0KCk7XHJcblxyXG5cdH0sXHJcblx0c3VwcG9ydHNGbG9hdFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfZmxvYXRcXCcgKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCdPRVNfdGV4dHVyZV9mbG9hdCcpO1xyXG5cclxuXHR9LFxyXG5cdHN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnT0VTX3RleHR1cmVfaGFsZl9mbG9hdFxcJyApLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKTtcclxuXHJcblx0fSxcclxuXHRzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcXCcgKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnKTtcclxuXHJcblx0fSxcclxuXHRzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQzogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVTM1RDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcXCcgKS4nKTtcclxuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycpO1xyXG5cclxuXHR9LFxyXG5cdHN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQzogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1xcJyApLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycpO1xyXG5cclxuXHR9LFxyXG5cdHN1cHBvcnRzQmxlbmRNaW5NYXg6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0JsZW5kTWluTWF4KCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnRVhUX2JsZW5kX21pbm1heFxcJyApLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoJ0VYVF9ibGVuZF9taW5tYXgnKTtcclxuXHJcblx0fSxcclxuXHRzdXBwb3J0c1ZlcnRleFRleHR1cmVzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcygpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzLicpO1xyXG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xyXG5cclxuXHR9LFxyXG5cdHN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXFwnICkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCgnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xyXG5cclxuXHR9LFxyXG5cdGVuYWJsZVNjaXNzb3JUZXN0OiBmdW5jdGlvbiAoYm9vbGVhbikge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLmVuYWJsZVNjaXNzb3JUZXN0KCkgaXMgbm93IC5zZXRTY2lzc29yVGVzdCgpLicpO1xyXG5cdFx0dGhpcy5zZXRTY2lzc29yVGVzdChib29sZWFuKTtcclxuXHJcblx0fSxcclxuXHRpbml0TWF0ZXJpYWw6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5pbml0TWF0ZXJpYWwoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdGFkZFByZVBsdWdpbjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFByZVBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0YWRkUG9zdFBsdWdpbjogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdHVwZGF0ZVNoYWRvd01hcDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnVwZGF0ZVNoYWRvd01hcCgpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0c2V0RmFjZUN1bGxpbmc6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRGYWNlQ3VsbGluZygpIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdH0sXHJcblx0YWxsb2NUZXh0dXJlVW5pdDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFsbG9jVGV4dHVyZVVuaXQoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdHNldFRleHR1cmU6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0fSxcclxuXHRzZXRUZXh0dXJlMkQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zZXRUZXh0dXJlMkQoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdHNldFRleHR1cmVDdWJlOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZUN1YmUoKSBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxuXHR9LFxyXG5cdGdldEFjdGl2ZU1pcE1hcExldmVsOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0QWN0aXZlTWlwTWFwTGV2ZWwoKSBpcyBub3cgLmdldEFjdGl2ZU1pcG1hcExldmVsKCkuJyk7XHJcblx0XHRyZXR1cm4gdGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xyXG5cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFdlYkdMUmVuZGVyZXIucHJvdG90eXBlLCB7XHJcblxyXG5cdHNoYWRvd01hcEVuYWJsZWQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0cmV0dXJuIHRoaXMuc2hhZG93TWFwLmVuYWJsZWQ7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuJyk7XHJcblx0XHRcdHRoaXMuc2hhZG93TWFwLmVuYWJsZWQgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRzaGFkb3dNYXBUeXBlOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC50eXBlO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwVHlwZSBpcyBub3cgLnNoYWRvd01hcC50eXBlLicpO1xyXG5cdFx0XHR0aGlzLnNoYWRvd01hcC50eXBlID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0c2hhZG93TWFwQ3VsbEZhY2U6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nKTtcclxuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdGNvbnRleHQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY29udGV4dCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmdldENvbnRleHQoKSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRDb250ZXh0KCk7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn0pO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV2ViR0xTaGFkb3dNYXAucHJvdG90eXBlLCB7XHJcblxyXG5cdGN1bGxGYWNlOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogY3VsbEZhY2UgKi8pIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlclJldmVyc2VTaWRlZDoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyUmV2ZXJzZVNpZGVkIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyk7XHJcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLnJlbmRlclJldmVyc2VTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHJlbmRlclNpbmdsZVNpZGVkOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicpO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8vXHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhXZWJHTFJlbmRlclRhcmdldEN1YmUucHJvdG90eXBlLCB7XHJcblxyXG5cdGFjdGl2ZUN1YmVGYWNlOiB7XHJcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8pIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXRDdWJlOiAuYWN0aXZlQ3ViZUZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gSXQgaXMgbm93IHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIFdlYkdMUmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCkuJyk7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0YWN0aXZlTWlwTWFwTGV2ZWw6IHtcclxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLykge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmU6IC5hY3RpdmVNaXBNYXBMZXZlbCBoYXMgYmVlbiByZW1vdmVkLiBJdCBpcyBub3cgdGhlIHRoaXJkIHBhcmFtZXRlciBvZiBXZWJHTFJlbmRlcmVyLnNldFJlbmRlclRhcmdldCgpLicpO1xyXG5cclxuXHRcdH1cclxuXHR9XHJcblxyXG59KTtcclxuXHJcbi8vXHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUsIHtcclxuXHJcblx0d3JhcFM6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwUztcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuJyk7XHJcblx0XHRcdHRoaXMudGV4dHVyZS53cmFwUyA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdHdyYXBUOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUud3JhcFQ7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAud3JhcFQgaXMgbm93IC50ZXh0dXJlLndyYXBULicpO1xyXG5cdFx0XHR0aGlzLnRleHR1cmUud3JhcFQgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRtYWdGaWx0ZXI6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1hZ0ZpbHRlciBpcyBub3cgLnRleHR1cmUubWFnRmlsdGVyLicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcjtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nKTtcclxuXHRcdFx0dGhpcy50ZXh0dXJlLm1hZ0ZpbHRlciA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdG1pbkZpbHRlcjoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLicpO1xyXG5cdFx0XHR0aGlzLnRleHR1cmUubWluRmlsdGVyID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0YW5pc290cm9weToge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5O1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmFuaXNvdHJvcHkgaXMgbm93IC50ZXh0dXJlLmFuaXNvdHJvcHkuJyk7XHJcblx0XHRcdHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5ID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0b2Zmc2V0OiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5vZmZzZXQgaXMgbm93IC50ZXh0dXJlLm9mZnNldC4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5vZmZzZXQ7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyk7XHJcblx0XHRcdHRoaXMudGV4dHVyZS5vZmZzZXQgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fSxcclxuXHRyZXBlYXQ6IHtcclxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicpO1xyXG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdDtcclxuXHJcblx0XHR9LFxyXG5cdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC4nKTtcclxuXHRcdFx0dGhpcy50ZXh0dXJlLnJlcGVhdCA9IHZhbHVlO1xyXG5cclxuXHRcdH1cclxuXHR9LFxyXG5cdGZvcm1hdDoge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuJyk7XHJcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUuZm9ybWF0O1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLmZvcm1hdCBpcyBub3cgLnRleHR1cmUuZm9ybWF0LicpO1xyXG5cdFx0XHR0aGlzLnRleHR1cmUuZm9ybWF0ID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0dHlwZToge1xyXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAudHlwZSBpcyBub3cgLnRleHR1cmUudHlwZS4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS50eXBlO1xyXG5cclxuXHRcdH0sXHJcblx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cclxuXHRcdFx0Y29uc29sZS53YXJuKCdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyk7XHJcblx0XHRcdHRoaXMudGV4dHVyZS50eXBlID0gdmFsdWU7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0Z2VuZXJhdGVNaXBtYXBzOiB7XHJcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdGNvbnNvbGUud2FybignVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XHJcblxyXG5cdFx0fSxcclxuXHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuJyk7XHJcblx0XHRcdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSB2YWx1ZTtcclxuXHJcblx0XHR9XHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoV2ViVlJNYW5hZ2VyLnByb3RvdHlwZSwge1xyXG5cclxuXHRzdGFuZGluZzoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYlZSTWFuYWdlcjogLnN0YW5kaW5nIGhhcyBiZWVuIHJlbW92ZWQuJyk7XHJcblxyXG5cdFx0fVxyXG5cdH0sXHJcblx0dXNlckhlaWdodDoge1xyXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIHZhbHVlICovKSB7XHJcblxyXG5cdFx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLldlYlZSTWFuYWdlcjogLnVzZXJIZWlnaHQgaGFzIGJlZW4gcmVtb3ZlZC4nKTtcclxuXHJcblx0XHR9XHJcblx0fVxyXG5cclxufSk7XHJcblxyXG4vL1xyXG5cclxuQXVkaW8ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoZmlsZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nKTtcclxuXHR2YXIgc2NvcGUgPSB0aGlzO1xyXG5cdHZhciBhdWRpb0xvYWRlciA9IG5ldyBBdWRpb0xvYWRlcigpO1xyXG5cdGF1ZGlvTG9hZGVyLmxvYWQoZmlsZSwgZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG5cclxuXHRcdHNjb3BlLnNldEJ1ZmZlcihidWZmZXIpO1xyXG5cclxuXHR9KTtcclxuXHRyZXR1cm4gdGhpcztcclxuXHJcbn07XHJcblxyXG5BdWRpb0FuYWx5c2VyLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkF1ZGlvQW5hbHlzZXI6IC5nZXREYXRhKCkgaXMgbm93IC5nZXRGcmVxdWVuY3lEYXRhKCkuJyk7XHJcblx0cmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpO1xyXG5cclxufTtcclxuXHJcbi8vXHJcblxyXG5DdWJlQ2FtZXJhLnByb3RvdHlwZS51cGRhdGVDdWJlTWFwID0gZnVuY3Rpb24gKHJlbmRlcmVyLCBzY2VuZSkge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkN1YmVDYW1lcmE6IC51cGRhdGVDdWJlTWFwKCkgaXMgbm93IC51cGRhdGUoKS4nKTtcclxuXHRyZXR1cm4gdGhpcy51cGRhdGUocmVuZGVyZXIsIHNjZW5lKTtcclxuXHJcbn07XHJcblxyXG4vL1xyXG5cclxudmFyIEdlb21ldHJ5VXRpbHMgPSB7XHJcblxyXG5cdG1lcmdlOiBmdW5jdGlvbiAoZ2VvbWV0cnkxLCBnZW9tZXRyeTIsIG1hdGVyaWFsSW5kZXhPZmZzZXQpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC4nKTtcclxuXHRcdHZhciBtYXRyaXg7XHJcblxyXG5cdFx0aWYgKGdlb21ldHJ5Mi5pc01lc2gpIHtcclxuXHJcblx0XHRcdGdlb21ldHJ5Mi5tYXRyaXhBdXRvVXBkYXRlICYmIGdlb21ldHJ5Mi51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHRcdG1hdHJpeCA9IGdlb21ldHJ5Mi5tYXRyaXg7XHJcblx0XHRcdGdlb21ldHJ5MiA9IGdlb21ldHJ5Mi5nZW9tZXRyeTtcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Z2VvbWV0cnkxLm1lcmdlKGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0KTtcclxuXHJcblx0fSxcclxuXHJcblx0Y2VudGVyOiBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuXHJcblx0XHRjb25zb2xlLndhcm4oJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5jZW50ZXIoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5LmNlbnRlcigpIGluc3RlYWQuJyk7XHJcblx0XHRyZXR1cm4gZ2VvbWV0cnkuY2VudGVyKCk7XHJcblxyXG5cdH1cclxuXHJcbn07XHJcblxyXG5JbWFnZVV0aWxzLmNyb3NzT3JpZ2luID0gdW5kZWZpbmVkO1xyXG5cclxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uICh1cmwsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvcikge1xyXG5cclxuXHRjb25zb2xlLndhcm4oJ1RIUkVFLkltYWdlVXRpbHMubG9hZFRleHR1cmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLlRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicpO1xyXG5cclxuXHR2YXIgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcclxuXHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7XHJcblxyXG5cdHZhciB0ZXh0dXJlID0gbG9hZGVyLmxvYWQodXJsLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvcik7XHJcblxyXG5cdGlmIChtYXBwaW5nKSB7IHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7IH1cclxuXHJcblx0cmV0dXJuIHRleHR1cmU7XHJcblxyXG59O1xyXG5cclxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAodXJscywgbWFwcGluZywgb25Mb2FkLCBvbkVycm9yKSB7XHJcblxyXG5cdGNvbnNvbGUud2FybignVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC4nKTtcclxuXHJcblx0dmFyIGxvYWRlciA9IG5ldyBDdWJlVGV4dHVyZUxvYWRlcigpO1xyXG5cdGxvYWRlci5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtcclxuXHJcblx0dmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCh1cmxzLCBvbkxvYWQsIHVuZGVmaW5lZCwgb25FcnJvcik7XHJcblxyXG5cdGlmIChtYXBwaW5nKSB7IHRleHR1cmUubWFwcGluZyA9IG1hcHBpbmc7IH1cclxuXHJcblx0cmV0dXJuIHRleHR1cmU7XHJcblxyXG59O1xyXG5cclxuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nKTtcclxuXHJcbn07XHJcblxyXG5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuRERTTG9hZGVyIGluc3RlYWQuJyk7XHJcblxyXG59O1xyXG5cclxuLy9cclxuXHJcbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKCkge1xyXG5cclxuXHRjb25zb2xlLmVycm9yKCdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiByZW1vdmVkJyk7XHJcblxyXG59XHJcblxyXG4vL1xyXG5cclxuZnVuY3Rpb24gSlNPTkxvYWRlcigpIHtcclxuXHJcblx0Y29uc29sZS5lcnJvcignVEhSRUUuSlNPTkxvYWRlciBoYXMgYmVlbiByZW1vdmVkLicpO1xyXG5cclxufVxyXG5cclxuLy9cclxuXHJcbnZhciBTY2VuZVV0aWxzID0ge1xyXG5cclxuXHRjcmVhdGVNdWx0aU1hdGVyaWFsT2JqZWN0OiBmdW5jdGlvbiAoIC8qIGdlb21ldHJ5LCBtYXRlcmlhbHMgKi8pIHtcclxuXHJcblx0XHRjb25zb2xlLmVycm9yKCdUSFJFRS5TY2VuZVV0aWxzIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy91dGlscy9TY2VuZVV0aWxzLmpzJyk7XHJcblxyXG5cdH0sXHJcblxyXG5cdGRldGFjaDogZnVuY3Rpb24gKCAvKiBjaGlsZCwgcGFyZW50LCBzY2VuZSAqLykge1xyXG5cclxuXHRcdGNvbnNvbGUuZXJyb3IoJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzL3V0aWxzL1NjZW5lVXRpbHMuanMnKTtcclxuXHJcblx0fSxcclxuXHJcblx0YXR0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBzY2VuZSwgcGFyZW50ICovKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcignVEhSRUUuU2NlbmVVdGlscyBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvdXRpbHMvU2NlbmVVdGlscy5qcycpO1xyXG5cclxuXHR9XHJcblxyXG59O1xyXG5cclxuLy9cclxuXHJcbmZ1bmN0aW9uIExlbnNGbGFyZSgpIHtcclxuXHJcblx0Y29uc29sZS5lcnJvcignVEhSRUUuTGVuc0ZsYXJlIGhhcyBiZWVuIG1vdmVkIHRvIC9leGFtcGxlcy9qcy9vYmplY3RzL0xlbnNmbGFyZS5qcycpO1xyXG5cclxufVxyXG5cclxuaWYgKHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnKSB7XHJcblxyXG5cdC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcblx0X19USFJFRV9ERVZUT09MU19fLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdyZWdpc3RlcicsIHtcclxuXHRcdGRldGFpbDoge1xyXG5cdFx0XHRyZXZpc2lvbjogUkVWSVNJT04sXHJcblx0XHR9XHJcblx0fSkpO1xyXG5cdC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cclxuXHJcbn1cclxuXHJcblRIUkVFLkFDRVNGaWxtaWNUb25lTWFwcGluZyA9IEFDRVNGaWxtaWNUb25lTWFwcGluZztcclxuVEhSRUUuQWRkRXF1YXRpb24gPSBBZGRFcXVhdGlvbjtcclxuVEhSRUUuQWRkT3BlcmF0aW9uID0gQWRkT3BlcmF0aW9uO1xyXG5USFJFRS5BZGRpdGl2ZUJsZW5kaW5nID0gQWRkaXRpdmVCbGVuZGluZztcclxuVEhSRUUuQWxwaGFGb3JtYXQgPSBBbHBoYUZvcm1hdDtcclxuVEhSRUUuQWx3YXlzRGVwdGggPSBBbHdheXNEZXB0aDtcclxuVEhSRUUuQWx3YXlzU3RlbmNpbEZ1bmMgPSBBbHdheXNTdGVuY2lsRnVuYztcclxuVEhSRUUuQW1iaWVudExpZ2h0ID0gQW1iaWVudExpZ2h0O1xyXG5USFJFRS5BbWJpZW50TGlnaHRQcm9iZSA9IEFtYmllbnRMaWdodFByb2JlO1xyXG5USFJFRS5BbmltYXRpb25DbGlwID0gQW5pbWF0aW9uQ2xpcDtcclxuVEhSRUUuQW5pbWF0aW9uTG9hZGVyID0gQW5pbWF0aW9uTG9hZGVyO1xyXG5USFJFRS5BbmltYXRpb25NaXhlciA9IEFuaW1hdGlvbk1peGVyO1xyXG5USFJFRS5BbmltYXRpb25PYmplY3RHcm91cCA9IEFuaW1hdGlvbk9iamVjdEdyb3VwO1xyXG5USFJFRS5BbmltYXRpb25VdGlscyA9IEFuaW1hdGlvblV0aWxzO1xyXG5USFJFRS5BcmNDdXJ2ZSA9IEFyY0N1cnZlO1xyXG5USFJFRS5BcnJheUNhbWVyYSA9IEFycmF5Q2FtZXJhO1xyXG5USFJFRS5BcnJvd0hlbHBlciA9IEFycm93SGVscGVyO1xyXG5USFJFRS5BdWRpbyA9IEF1ZGlvO1xyXG5USFJFRS5BdWRpb0FuYWx5c2VyID0gQXVkaW9BbmFseXNlcjtcclxuVEhSRUUuQXVkaW9Db250ZXh0ID0gQXVkaW9Db250ZXh0O1xyXG5USFJFRS5BdWRpb0xpc3RlbmVyID0gQXVkaW9MaXN0ZW5lcjtcclxuVEhSRUUuQXVkaW9Mb2FkZXIgPSBBdWRpb0xvYWRlcjtcclxuVEhSRUUuQXhlc0hlbHBlciA9IEF4ZXNIZWxwZXI7XHJcblRIUkVFLkF4aXNIZWxwZXIgPSBBeGlzSGVscGVyO1xyXG5USFJFRS5CYWNrU2lkZSA9IEJhY2tTaWRlO1xyXG5USFJFRS5CYXNpY0RlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nO1xyXG5USFJFRS5CYXNpY1NoYWRvd01hcCA9IEJhc2ljU2hhZG93TWFwO1xyXG5USFJFRS5CaW5hcnlUZXh0dXJlTG9hZGVyID0gQmluYXJ5VGV4dHVyZUxvYWRlcjtcclxuVEhSRUUuQm9uZSA9IEJvbmU7XHJcblRIUkVFLkJvb2xlYW5LZXlmcmFtZVRyYWNrID0gQm9vbGVhbktleWZyYW1lVHJhY2s7XHJcblRIUkVFLkJvdW5kaW5nQm94SGVscGVyID0gQm91bmRpbmdCb3hIZWxwZXI7XHJcblRIUkVFLkJveDIgPSBCb3gyO1xyXG5USFJFRS5Cb3gzID0gQm94MztcclxuVEhSRUUuQm94M0hlbHBlciA9IEJveDNIZWxwZXI7XHJcblRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5ID0gQm94QnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLkJveEdlb21ldHJ5ID0gQm94R2VvbWV0cnk7XHJcblRIUkVFLkJveEhlbHBlciA9IEJveEhlbHBlcjtcclxuVEhSRUUuQnVmZmVyQXR0cmlidXRlID0gQnVmZmVyQXR0cmlidXRlO1xyXG5USFJFRS5CdWZmZXJHZW9tZXRyeSA9IEJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5CdWZmZXJHZW9tZXRyeUxvYWRlciA9IEJ1ZmZlckdlb21ldHJ5TG9hZGVyO1xyXG5USFJFRS5CeXRlVHlwZSA9IEJ5dGVUeXBlO1xyXG5USFJFRS5DYWNoZSA9IENhY2hlO1xyXG5USFJFRS5DYW1lcmEgPSBDYW1lcmE7XHJcblRIUkVFLkNhbWVyYUhlbHBlciA9IENhbWVyYUhlbHBlcjtcclxuVEhSRUUuQ2FudmFzUmVuZGVyZXIgPSBDYW52YXNSZW5kZXJlcjtcclxuVEhSRUUuQ2FudmFzVGV4dHVyZSA9IENhbnZhc1RleHR1cmU7XHJcblRIUkVFLkNhdG11bGxSb21DdXJ2ZTMgPSBDYXRtdWxsUm9tQ3VydmUzO1xyXG5USFJFRS5DaW5lb25Ub25lTWFwcGluZyA9IENpbmVvblRvbmVNYXBwaW5nO1xyXG5USFJFRS5DaXJjbGVCdWZmZXJHZW9tZXRyeSA9IENpcmNsZUJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5DaXJjbGVHZW9tZXRyeSA9IENpcmNsZUdlb21ldHJ5O1xyXG5USFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcclxuVEhSRUUuQ2xvY2sgPSBDbG9jaztcclxuVEhSRUUuQ2xvc2VkU3BsaW5lQ3VydmUzID0gQ2xvc2VkU3BsaW5lQ3VydmUzO1xyXG5USFJFRS5Db2xvciA9IENvbG9yO1xyXG5USFJFRS5Db2xvcktleWZyYW1lVHJhY2sgPSBDb2xvcktleWZyYW1lVHJhY2s7XHJcblRIUkVFLkNvbXByZXNzZWRUZXh0dXJlID0gQ29tcHJlc3NlZFRleHR1cmU7XHJcblRIUkVFLkNvbXByZXNzZWRUZXh0dXJlTG9hZGVyID0gQ29tcHJlc3NlZFRleHR1cmVMb2FkZXI7XHJcblRIUkVFLkNvbmVCdWZmZXJHZW9tZXRyeSA9IENvbmVCdWZmZXJHZW9tZXRyeTtcclxuVEhSRUUuQ29uZUdlb21ldHJ5ID0gQ29uZUdlb21ldHJ5O1xyXG5USFJFRS5DdWJlQ2FtZXJhID0gQ3ViZUNhbWVyYTtcclxuVEhSRUUuQ3ViZUdlb21ldHJ5ID0gQm94R2VvbWV0cnk7XHJcblRIUkVFLkN1YmVSZWZsZWN0aW9uTWFwcGluZyA9IEN1YmVSZWZsZWN0aW9uTWFwcGluZztcclxuVEhSRUUuQ3ViZVJlZnJhY3Rpb25NYXBwaW5nID0gQ3ViZVJlZnJhY3Rpb25NYXBwaW5nO1xyXG5USFJFRS5DdWJlVGV4dHVyZSA9IEN1YmVUZXh0dXJlO1xyXG5USFJFRS5DdWJlVGV4dHVyZUxvYWRlciA9IEN1YmVUZXh0dXJlTG9hZGVyO1xyXG5USFJFRS5DdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nO1xyXG5USFJFRS5DdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nO1xyXG5USFJFRS5DdWJpY0JlemllckN1cnZlID0gQ3ViaWNCZXppZXJDdXJ2ZTtcclxuVEhSRUUuQ3ViaWNCZXppZXJDdXJ2ZTMgPSBDdWJpY0JlemllckN1cnZlMztcclxuVEhSRUUuQ3ViaWNJbnRlcnBvbGFudCA9IEN1YmljSW50ZXJwb2xhbnQ7XHJcblRIUkVFLkN1bGxGYWNlQmFjayA9IEN1bGxGYWNlQmFjaztcclxuVEhSRUUuQ3VsbEZhY2VGcm9udCA9IEN1bGxGYWNlRnJvbnQ7XHJcblRIUkVFLkN1bGxGYWNlRnJvbnRCYWNrID0gQ3VsbEZhY2VGcm9udEJhY2s7XHJcblRIUkVFLkN1bGxGYWNlTm9uZSA9IEN1bGxGYWNlTm9uZTtcclxuVEhSRUUuQ3VydmUgPSBDdXJ2ZTtcclxuVEhSRUUuQ3VydmVQYXRoID0gQ3VydmVQYXRoO1xyXG5USFJFRS5DdXN0b21CbGVuZGluZyA9IEN1c3RvbUJsZW5kaW5nO1xyXG5USFJFRS5DeWxpbmRlckJ1ZmZlckdlb21ldHJ5ID0gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeTtcclxuVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSA9IEN5bGluZGVyR2VvbWV0cnk7XHJcblRIUkVFLkN5bGluZHJpY2FsID0gQ3lsaW5kcmljYWw7XHJcblRIUkVFLkRhdGFUZXh0dXJlID0gRGF0YVRleHR1cmU7XHJcblRIUkVFLkRhdGFUZXh0dXJlMkRBcnJheSA9IERhdGFUZXh0dXJlMkRBcnJheTtcclxuVEhSRUUuRGF0YVRleHR1cmUzRCA9IERhdGFUZXh0dXJlM0Q7XHJcblRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyID0gRGF0YVRleHR1cmVMb2FkZXI7XHJcblRIUkVFLkRlY3JlbWVudFN0ZW5jaWxPcCA9IERlY3JlbWVudFN0ZW5jaWxPcDtcclxuVEhSRUUuRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCA9IERlY3JlbWVudFdyYXBTdGVuY2lsT3A7XHJcblRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlciA9IERlZmF1bHRMb2FkaW5nTWFuYWdlcjtcclxuVEhSRUUuRGVwdGhGb3JtYXQgPSBEZXB0aEZvcm1hdDtcclxuVEhSRUUuRGVwdGhTdGVuY2lsRm9ybWF0ID0gRGVwdGhTdGVuY2lsRm9ybWF0O1xyXG5USFJFRS5EZXB0aFRleHR1cmUgPSBEZXB0aFRleHR1cmU7XHJcblRIUkVFLkRpcmVjdGlvbmFsTGlnaHQgPSBEaXJlY3Rpb25hbExpZ2h0O1xyXG5USFJFRS5EaXJlY3Rpb25hbExpZ2h0SGVscGVyID0gRGlyZWN0aW9uYWxMaWdodEhlbHBlcjtcclxuVEhSRUUuRGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IERpcmVjdGlvbmFsTGlnaHRTaGFkb3c7XHJcblRIUkVFLkRpc2NyZXRlSW50ZXJwb2xhbnQgPSBEaXNjcmV0ZUludGVycG9sYW50O1xyXG5USFJFRS5Eb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSA9IERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5Eb2RlY2FoZWRyb25HZW9tZXRyeSA9IERvZGVjYWhlZHJvbkdlb21ldHJ5O1xyXG5USFJFRS5Eb3VibGVTaWRlID0gRG91YmxlU2lkZTtcclxuVEhSRUUuRHN0QWxwaGFGYWN0b3IgPSBEc3RBbHBoYUZhY3RvcjtcclxuVEhSRUUuRHN0Q29sb3JGYWN0b3IgPSBEc3RDb2xvckZhY3RvcjtcclxuVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSA9IER5bmFtaWNCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLkVkZ2VzR2VvbWV0cnkgPSBFZGdlc0dlb21ldHJ5O1xyXG5USFJFRS5FZGdlc0hlbHBlciA9IEVkZ2VzSGVscGVyO1xyXG5USFJFRS5FbGxpcHNlQ3VydmUgPSBFbGxpcHNlQ3VydmU7XHJcblRIUkVFLkVxdWFsRGVwdGggPSBFcXVhbERlcHRoO1xyXG5USFJFRS5FcXVhbFN0ZW5jaWxGdW5jID0gRXF1YWxTdGVuY2lsRnVuYztcclxuVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcgPSBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZztcclxuVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcgPSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZztcclxuVEhSRUUuRXVsZXIgPSBFdWxlcjtcclxuVEhSRUUuRXZlbnREaXNwYXRjaGVyID0gRXZlbnREaXNwYXRjaGVyO1xyXG5USFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnkgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLkV4dHJ1ZGVHZW9tZXRyeSA9IEV4dHJ1ZGVHZW9tZXRyeTtcclxuVEhSRUUuRmFjZTMgPSBGYWNlMztcclxuVEhSRUUuRmFjZTQgPSBGYWNlNDtcclxuVEhSRUUuRmFjZUNvbG9ycyA9IEZhY2VDb2xvcnM7XHJcblRIUkVFLkZhY2VOb3JtYWxzSGVscGVyID0gRmFjZU5vcm1hbHNIZWxwZXI7XHJcblRIUkVFLkZpbGVMb2FkZXIgPSBGaWxlTG9hZGVyO1xyXG5USFJFRS5GbGF0U2hhZGluZyA9IEZsYXRTaGFkaW5nO1xyXG5USFJFRS5GbG9hdDMyQXR0cmlidXRlID0gRmxvYXQzMkF0dHJpYnV0ZTtcclxuVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSA9IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLkZsb2F0NjRBdHRyaWJ1dGUgPSBGbG9hdDY0QXR0cmlidXRlO1xyXG5USFJFRS5GbG9hdDY0QnVmZmVyQXR0cmlidXRlID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTtcclxuVEhSRUUuRmxvYXRUeXBlID0gRmxvYXRUeXBlO1xyXG5USFJFRS5Gb2cgPSBGb2c7XHJcblRIUkVFLkZvZ0V4cDIgPSBGb2dFeHAyO1xyXG5USFJFRS5Gb250ID0gRm9udDtcclxuVEhSRUUuRm9udExvYWRlciA9IEZvbnRMb2FkZXI7XHJcblRIUkVFLkZyb250RmFjZURpcmVjdGlvbkNDVyA9IEZyb250RmFjZURpcmVjdGlvbkNDVztcclxuVEhSRUUuRnJvbnRGYWNlRGlyZWN0aW9uQ1cgPSBGcm9udEZhY2VEaXJlY3Rpb25DVztcclxuVEhSRUUuRnJvbnRTaWRlID0gRnJvbnRTaWRlO1xyXG5USFJFRS5GcnVzdHVtID0gRnJ1c3R1bTtcclxuVEhSRUUuR2FtbWFFbmNvZGluZyA9IEdhbW1hRW5jb2Rpbmc7XHJcblRIUkVFLkdlb21ldHJ5ID0gR2VvbWV0cnk7XHJcblRIUkVFLkdlb21ldHJ5VXRpbHMgPSBHZW9tZXRyeVV0aWxzO1xyXG5USFJFRS5HcmVhdGVyRGVwdGggPSBHcmVhdGVyRGVwdGg7XHJcblRIUkVFLkdyZWF0ZXJFcXVhbERlcHRoID0gR3JlYXRlckVxdWFsRGVwdGg7XHJcblRIUkVFLkdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jID0gR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmM7XHJcblRIUkVFLkdyZWF0ZXJTdGVuY2lsRnVuYyA9IEdyZWF0ZXJTdGVuY2lsRnVuYztcclxuVEhSRUUuR3JpZEhlbHBlciA9IEdyaWRIZWxwZXI7XHJcblRIUkVFLkdyb3VwID0gR3JvdXA7XHJcblRIUkVFLkhhbGZGbG9hdFR5cGUgPSBIYWxmRmxvYXRUeXBlO1xyXG5USFJFRS5IZW1pc3BoZXJlTGlnaHQgPSBIZW1pc3BoZXJlTGlnaHQ7XHJcblRIUkVFLkhlbWlzcGhlcmVMaWdodEhlbHBlciA9IEhlbWlzcGhlcmVMaWdodEhlbHBlcjtcclxuVEhSRUUuSGVtaXNwaGVyZUxpZ2h0UHJvYmUgPSBIZW1pc3BoZXJlTGlnaHRQcm9iZTtcclxuVEhSRUUuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSA9IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLkljb3NhaGVkcm9uR2VvbWV0cnkgPSBJY29zYWhlZHJvbkdlb21ldHJ5O1xyXG5USFJFRS5JbWFnZUJpdG1hcExvYWRlciA9IEltYWdlQml0bWFwTG9hZGVyO1xyXG5USFJFRS5JbWFnZUxvYWRlciA9IEltYWdlTG9hZGVyO1xyXG5USFJFRS5JbWFnZVV0aWxzID0gSW1hZ2VVdGlscztcclxuVEhSRUUuSW1tZWRpYXRlUmVuZGVyT2JqZWN0ID0gSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1xyXG5USFJFRS5JbmNyZW1lbnRTdGVuY2lsT3AgPSBJbmNyZW1lbnRTdGVuY2lsT3A7XHJcblRIUkVFLkluY3JlbWVudFdyYXBTdGVuY2lsT3AgPSBJbmNyZW1lbnRXcmFwU3RlbmNpbE9wO1xyXG5USFJFRS5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyID0gSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI7XHJcblRIUkVFLkluc3RhbmNlZE1lc2ggPSBJbnN0YW5jZWRNZXNoO1xyXG5USFJFRS5JbnQxNkF0dHJpYnV0ZSA9IEludDE2QXR0cmlidXRlO1xyXG5USFJFRS5JbnQxNkJ1ZmZlckF0dHJpYnV0ZSA9IEludDE2QnVmZmVyQXR0cmlidXRlO1xyXG5USFJFRS5JbnQzMkF0dHJpYnV0ZSA9IEludDMyQXR0cmlidXRlO1xyXG5USFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSA9IEludDMyQnVmZmVyQXR0cmlidXRlO1xyXG5USFJFRS5JbnQ4QXR0cmlidXRlID0gSW50OEF0dHJpYnV0ZTtcclxuVEhSRUUuSW50OEJ1ZmZlckF0dHJpYnV0ZSA9IEludDhCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLkludFR5cGUgPSBJbnRUeXBlO1xyXG5USFJFRS5JbnRlcmxlYXZlZEJ1ZmZlciA9IEludGVybGVhdmVkQnVmZmVyO1xyXG5USFJFRS5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSA9IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlO1xyXG5USFJFRS5JbnRlcnBvbGFudCA9IEludGVycG9sYW50O1xyXG5USFJFRS5JbnRlcnBvbGF0ZURpc2NyZXRlID0gSW50ZXJwb2xhdGVEaXNjcmV0ZTtcclxuVEhSRUUuSW50ZXJwb2xhdGVMaW5lYXIgPSBJbnRlcnBvbGF0ZUxpbmVhcjtcclxuVEhSRUUuSW50ZXJwb2xhdGVTbW9vdGggPSBJbnRlcnBvbGF0ZVNtb290aDtcclxuVEhSRUUuSW52ZXJ0U3RlbmNpbE9wID0gSW52ZXJ0U3RlbmNpbE9wO1xyXG5USFJFRS5KU09OTG9hZGVyID0gSlNPTkxvYWRlcjtcclxuVEhSRUUuS2VlcFN0ZW5jaWxPcCA9IEtlZXBTdGVuY2lsT3A7XHJcblRIUkVFLktleWZyYW1lVHJhY2sgPSBLZXlmcmFtZVRyYWNrO1xyXG5USFJFRS5MT0QgPSBMT0Q7XHJcblRIUkVFLkxhdGhlQnVmZmVyR2VvbWV0cnkgPSBMYXRoZUJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5MYXRoZUdlb21ldHJ5ID0gTGF0aGVHZW9tZXRyeTtcclxuVEhSRUUuTGF5ZXJzID0gTGF5ZXJzO1xyXG5USFJFRS5MZW5zRmxhcmUgPSBMZW5zRmxhcmU7XHJcblRIUkVFLkxlc3NEZXB0aCA9IExlc3NEZXB0aDtcclxuVEhSRUUuTGVzc0VxdWFsRGVwdGggPSBMZXNzRXF1YWxEZXB0aDtcclxuVEhSRUUuTGVzc0VxdWFsU3RlbmNpbEZ1bmMgPSBMZXNzRXF1YWxTdGVuY2lsRnVuYztcclxuVEhSRUUuTGVzc1N0ZW5jaWxGdW5jID0gTGVzc1N0ZW5jaWxGdW5jO1xyXG5USFJFRS5MaWdodCA9IExpZ2h0O1xyXG5USFJFRS5MaWdodFByb2JlID0gTGlnaHRQcm9iZTtcclxuVEhSRUUuTGlnaHRQcm9iZUhlbHBlciA9IExpZ2h0UHJvYmVIZWxwZXI7XHJcblRIUkVFLkxpZ2h0U2hhZG93ID0gTGlnaHRTaGFkb3c7XHJcblRIUkVFLkxpbmUgPSBMaW5lO1xyXG5USFJFRS5MaW5lMyA9IExpbmUzO1xyXG5USFJFRS5MaW5lQmFzaWNNYXRlcmlhbCA9IExpbmVCYXNpY01hdGVyaWFsO1xyXG5USFJFRS5MaW5lQ3VydmUgPSBMaW5lQ3VydmU7XHJcblRIUkVFLkxpbmVDdXJ2ZTMgPSBMaW5lQ3VydmUzO1xyXG5USFJFRS5MaW5lRGFzaGVkTWF0ZXJpYWwgPSBMaW5lRGFzaGVkTWF0ZXJpYWw7XHJcblRIUkVFLkxpbmVMb29wID0gTGluZUxvb3A7XHJcblRIUkVFLkxpbmVQaWVjZXMgPSBMaW5lUGllY2VzO1xyXG5USFJFRS5MaW5lU2VnbWVudHMgPSBMaW5lU2VnbWVudHM7XHJcblRIUkVFLkxpbmVTdHJpcCA9IExpbmVTdHJpcDtcclxuVEhSRUUuTGluZWFyRW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcclxuVEhSRUUuTGluZWFyRmlsdGVyID0gTGluZWFyRmlsdGVyO1xyXG5USFJFRS5MaW5lYXJJbnRlcnBvbGFudCA9IExpbmVhckludGVycG9sYW50O1xyXG5USFJFRS5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXIgPSBMaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI7XHJcblRIUkVFLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyO1xyXG5USFJFRS5MaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgPSBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XHJcblRIUkVFLkxpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyO1xyXG5USFJFRS5MaW5lYXJUb25lTWFwcGluZyA9IExpbmVhclRvbmVNYXBwaW5nO1xyXG5USFJFRS5Mb2FkZXIgPSBMb2FkZXI7XHJcblRIUkVFLkxvYWRlclV0aWxzID0gTG9hZGVyVXRpbHM7XHJcblRIUkVFLkxvYWRpbmdNYW5hZ2VyID0gTG9hZGluZ01hbmFnZXI7XHJcblRIUkVFLkxvZ0x1dkVuY29kaW5nID0gTG9nTHV2RW5jb2Rpbmc7XHJcblRIUkVFLkxvb3BPbmNlID0gTG9vcE9uY2U7XHJcblRIUkVFLkxvb3BQaW5nUG9uZyA9IExvb3BQaW5nUG9uZztcclxuVEhSRUUuTG9vcFJlcGVhdCA9IExvb3BSZXBlYXQ7XHJcblRIUkVFLkx1bWluYW5jZUFscGhhRm9ybWF0ID0gTHVtaW5hbmNlQWxwaGFGb3JtYXQ7XHJcblRIUkVFLkx1bWluYW5jZUZvcm1hdCA9IEx1bWluYW5jZUZvcm1hdDtcclxuVEhSRUUuTU9VU0UgPSBNT1VTRTtcclxuVEhSRUUuTWF0ZXJpYWwgPSBNYXRlcmlhbDtcclxuVEhSRUUuTWF0ZXJpYWxMb2FkZXIgPSBNYXRlcmlhbExvYWRlcjtcclxuVEhSRUUuTWF0aCA9IF9NYXRoO1xyXG5USFJFRS5NYXRyaXgzID0gTWF0cml4MztcclxuVEhSRUUuTWF0cml4NCA9IE1hdHJpeDQ7XHJcblRIUkVFLk1heEVxdWF0aW9uID0gTWF4RXF1YXRpb247XHJcblRIUkVFLk1lc2ggPSBNZXNoO1xyXG5USFJFRS5NZXNoQmFzaWNNYXRlcmlhbCA9IE1lc2hCYXNpY01hdGVyaWFsO1xyXG5USFJFRS5NZXNoRGVwdGhNYXRlcmlhbCA9IE1lc2hEZXB0aE1hdGVyaWFsO1xyXG5USFJFRS5NZXNoRGlzdGFuY2VNYXRlcmlhbCA9IE1lc2hEaXN0YW5jZU1hdGVyaWFsO1xyXG5USFJFRS5NZXNoRmFjZU1hdGVyaWFsID0gTWVzaEZhY2VNYXRlcmlhbDtcclxuVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7XHJcblRIUkVFLk1lc2hNYXRjYXBNYXRlcmlhbCA9IE1lc2hNYXRjYXBNYXRlcmlhbDtcclxuVEhSRUUuTWVzaE5vcm1hbE1hdGVyaWFsID0gTWVzaE5vcm1hbE1hdGVyaWFsO1xyXG5USFJFRS5NZXNoUGhvbmdNYXRlcmlhbCA9IE1lc2hQaG9uZ01hdGVyaWFsO1xyXG5USFJFRS5NZXNoUGh5c2ljYWxNYXRlcmlhbCA9IE1lc2hQaHlzaWNhbE1hdGVyaWFsO1xyXG5USFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCA9IE1lc2hTdGFuZGFyZE1hdGVyaWFsO1xyXG5USFJFRS5NZXNoVG9vbk1hdGVyaWFsID0gTWVzaFRvb25NYXRlcmlhbDtcclxuVEhSRUUuTWluRXF1YXRpb24gPSBNaW5FcXVhdGlvbjtcclxuVEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc7XHJcblRIUkVFLk1peE9wZXJhdGlvbiA9IE1peE9wZXJhdGlvbjtcclxuVEhSRUUuTXVsdGlNYXRlcmlhbCA9IE11bHRpTWF0ZXJpYWw7XHJcblRIUkVFLk11bHRpcGx5QmxlbmRpbmcgPSBNdWx0aXBseUJsZW5kaW5nO1xyXG5USFJFRS5NdWx0aXBseU9wZXJhdGlvbiA9IE11bHRpcGx5T3BlcmF0aW9uO1xyXG5USFJFRS5OZWFyZXN0RmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcclxuVEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlciA9IE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI7XHJcblRIUkVFLk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXI7XHJcblRIUkVFLk5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgPSBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyO1xyXG5USFJFRS5OZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciA9IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyO1xyXG5USFJFRS5OZXZlckRlcHRoID0gTmV2ZXJEZXB0aDtcclxuVEhSRUUuTmV2ZXJTdGVuY2lsRnVuYyA9IE5ldmVyU3RlbmNpbEZ1bmM7XHJcblRIUkVFLk5vQmxlbmRpbmcgPSBOb0JsZW5kaW5nO1xyXG5USFJFRS5Ob0NvbG9ycyA9IE5vQ29sb3JzO1xyXG5USFJFRS5Ob1RvbmVNYXBwaW5nID0gTm9Ub25lTWFwcGluZztcclxuVEhSRUUuTm9ybWFsQmxlbmRpbmcgPSBOb3JtYWxCbGVuZGluZztcclxuVEhSRUUuTm90RXF1YWxEZXB0aCA9IE5vdEVxdWFsRGVwdGg7XHJcblRIUkVFLk5vdEVxdWFsU3RlbmNpbEZ1bmMgPSBOb3RFcXVhbFN0ZW5jaWxGdW5jO1xyXG5USFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrID0gTnVtYmVyS2V5ZnJhbWVUcmFjaztcclxuVEhSRUUuT2JqZWN0M0QgPSBPYmplY3QzRDtcclxuVEhSRUUuT2JqZWN0TG9hZGVyID0gT2JqZWN0TG9hZGVyO1xyXG5USFJFRS5PYmplY3RTcGFjZU5vcm1hbE1hcCA9IE9iamVjdFNwYWNlTm9ybWFsTWFwO1xyXG5USFJFRS5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkgPSBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLk9jdGFoZWRyb25HZW9tZXRyeSA9IE9jdGFoZWRyb25HZW9tZXRyeTtcclxuVEhSRUUuT25lRmFjdG9yID0gT25lRmFjdG9yO1xyXG5USFJFRS5PbmVNaW51c0RzdEFscGhhRmFjdG9yID0gT25lTWludXNEc3RBbHBoYUZhY3RvcjtcclxuVEhSRUUuT25lTWludXNEc3RDb2xvckZhY3RvciA9IE9uZU1pbnVzRHN0Q29sb3JGYWN0b3I7XHJcblRIUkVFLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSBPbmVNaW51c1NyY0FscGhhRmFjdG9yO1xyXG5USFJFRS5PbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gT25lTWludXNTcmNDb2xvckZhY3RvcjtcclxuVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhID0gT3J0aG9ncmFwaGljQ2FtZXJhO1xyXG5USFJFRS5QQ0ZTaGFkb3dNYXAgPSBQQ0ZTaGFkb3dNYXA7XHJcblRIUkVFLlBDRlNvZnRTaGFkb3dNYXAgPSBQQ0ZTb2Z0U2hhZG93TWFwO1xyXG5USFJFRS5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkgPSBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLlBhcmFtZXRyaWNHZW9tZXRyeSA9IFBhcmFtZXRyaWNHZW9tZXRyeTtcclxuVEhSRUUuUGFydGljbGUgPSBQYXJ0aWNsZTtcclxuVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsID0gUGFydGljbGVCYXNpY01hdGVyaWFsO1xyXG5USFJFRS5QYXJ0aWNsZVN5c3RlbSA9IFBhcnRpY2xlU3lzdGVtO1xyXG5USFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsID0gUGFydGljbGVTeXN0ZW1NYXRlcmlhbDtcclxuVEhSRUUuUGF0aCA9IFBhdGg7XHJcblRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhID0gUGVyc3BlY3RpdmVDYW1lcmE7XHJcblRIUkVFLlBsYW5lID0gUGxhbmU7XHJcblRIUkVFLlBsYW5lQnVmZmVyR2VvbWV0cnkgPSBQbGFuZUJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5QbGFuZUdlb21ldHJ5ID0gUGxhbmVHZW9tZXRyeTtcclxuVEhSRUUuUGxhbmVIZWxwZXIgPSBQbGFuZUhlbHBlcjtcclxuVEhSRUUuUG9pbnRDbG91ZCA9IFBvaW50Q2xvdWQ7XHJcblRIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCA9IFBvaW50Q2xvdWRNYXRlcmlhbDtcclxuVEhSRUUuUG9pbnRMaWdodCA9IFBvaW50TGlnaHQ7XHJcblRIUkVFLlBvaW50TGlnaHRIZWxwZXIgPSBQb2ludExpZ2h0SGVscGVyO1xyXG5USFJFRS5Qb2ludHMgPSBQb2ludHM7XHJcblRIUkVFLlBvaW50c01hdGVyaWFsID0gUG9pbnRzTWF0ZXJpYWw7XHJcblRIUkVFLlBvbGFyR3JpZEhlbHBlciA9IFBvbGFyR3JpZEhlbHBlcjtcclxuVEhSRUUuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5ID0gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5Qb2x5aGVkcm9uR2VvbWV0cnkgPSBQb2x5aGVkcm9uR2VvbWV0cnk7XHJcblRIUkVFLlBvc2l0aW9uYWxBdWRpbyA9IFBvc2l0aW9uYWxBdWRpbztcclxuVEhSRUUuUG9zaXRpb25hbEF1ZGlvSGVscGVyID0gUG9zaXRpb25hbEF1ZGlvSGVscGVyO1xyXG5USFJFRS5Qcm9wZXJ0eUJpbmRpbmcgPSBQcm9wZXJ0eUJpbmRpbmc7XHJcblRIUkVFLlByb3BlcnR5TWl4ZXIgPSBQcm9wZXJ0eU1peGVyO1xyXG5USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZSA9IFF1YWRyYXRpY0JlemllckN1cnZlO1xyXG5USFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM7XHJcblRIUkVFLlF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uO1xyXG5USFJFRS5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayA9IFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrO1xyXG5USFJFRS5RdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQgPSBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQ7XHJcblRIUkVFLlJFVklTSU9OID0gUkVWSVNJT047XHJcblRIUkVFLlJHQkFEZXB0aFBhY2tpbmcgPSBSR0JBRGVwdGhQYWNraW5nO1xyXG5USFJFRS5SR0JBRm9ybWF0ID0gUkdCQUZvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCA9IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQ7XHJcblRIUkVFLlJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IFJHQkFfQVNUQ18xMHg1X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzEweDZfRm9ybWF0ID0gUkdCQV9BU1RDXzEweDZfRm9ybWF0O1xyXG5USFJFRS5SR0JBX0FTVENfMTB4OF9Gb3JtYXQgPSBSR0JBX0FTVENfMTB4OF9Gb3JtYXQ7XHJcblRIUkVFLlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgPSBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0O1xyXG5USFJFRS5SR0JBX0FTVENfMTJ4MTJfRm9ybWF0ID0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSBSR0JBX0FTVENfNHg0X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzV4NF9Gb3JtYXQgPSBSR0JBX0FTVENfNXg0X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzV4NV9Gb3JtYXQgPSBSR0JBX0FTVENfNXg1X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSBSR0JBX0FTVENfNng1X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzZ4Nl9Gb3JtYXQgPSBSR0JBX0FTVENfNng2X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzh4NV9Gb3JtYXQgPSBSR0JBX0FTVENfOHg1X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSBSR0JBX0FTVENfOHg2X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9BU1RDXzh4OF9Gb3JtYXQgPSBSR0JBX0FTVENfOHg4X0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ID0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0O1xyXG5USFJFRS5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ7XHJcblRIUkVFLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCA9IFJHQkFfUzNUQ19EWFQxX0Zvcm1hdDtcclxuVEhSRUUuUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gUkdCQV9TM1RDX0RYVDNfRm9ybWF0O1xyXG5USFJFRS5SR0JBX1MzVENfRFhUNV9Gb3JtYXQgPSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQ7XHJcblRIUkVFLlJHQkRFbmNvZGluZyA9IFJHQkRFbmNvZGluZztcclxuVEhSRUUuUkdCRUVuY29kaW5nID0gUkdCRUVuY29kaW5nO1xyXG5USFJFRS5SR0JFRm9ybWF0ID0gUkdCRUZvcm1hdDtcclxuVEhSRUUuUkdCRm9ybWF0ID0gUkdCRm9ybWF0O1xyXG5USFJFRS5SR0JNMTZFbmNvZGluZyA9IFJHQk0xNkVuY29kaW5nO1xyXG5USFJFRS5SR0JNN0VuY29kaW5nID0gUkdCTTdFbmNvZGluZztcclxuVEhSRUUuUkdCX0VUQzFfRm9ybWF0ID0gUkdCX0VUQzFfRm9ybWF0O1xyXG5USFJFRS5SR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0O1xyXG5USFJFRS5SR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0O1xyXG5USFJFRS5SR0JfUzNUQ19EWFQxX0Zvcm1hdCA9IFJHQl9TM1RDX0RYVDFfRm9ybWF0O1xyXG5USFJFRS5SYXdTaGFkZXJNYXRlcmlhbCA9IFJhd1NoYWRlck1hdGVyaWFsO1xyXG5USFJFRS5SYXkgPSBSYXk7XHJcblRIUkVFLlJheWNhc3RlciA9IFJheWNhc3RlcjtcclxuVEhSRUUuUmVjdEFyZWFMaWdodCA9IFJlY3RBcmVhTGlnaHQ7XHJcblRIUkVFLlJlY3RBcmVhTGlnaHRIZWxwZXIgPSBSZWN0QXJlYUxpZ2h0SGVscGVyO1xyXG5USFJFRS5SZWRGb3JtYXQgPSBSZWRGb3JtYXQ7XHJcblRIUkVFLlJlaW5oYXJkVG9uZU1hcHBpbmcgPSBSZWluaGFyZFRvbmVNYXBwaW5nO1xyXG5USFJFRS5SZXBlYXRXcmFwcGluZyA9IFJlcGVhdFdyYXBwaW5nO1xyXG5USFJFRS5SZXBsYWNlU3RlbmNpbE9wID0gUmVwbGFjZVN0ZW5jaWxPcDtcclxuVEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24gPSBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbjtcclxuVEhSRUUuUmluZ0J1ZmZlckdlb21ldHJ5ID0gUmluZ0J1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5SaW5nR2VvbWV0cnkgPSBSaW5nR2VvbWV0cnk7XHJcblRIUkVFLlNjZW5lID0gU2NlbmU7XHJcblRIUkVFLlNjZW5lVXRpbHMgPSBTY2VuZVV0aWxzO1xyXG5USFJFRS5TaGFkZXJDaHVuayA9IFNoYWRlckNodW5rO1xyXG5USFJFRS5TaGFkZXJMaWIgPSBTaGFkZXJMaWI7XHJcblRIUkVFLlNoYWRlck1hdGVyaWFsID0gU2hhZGVyTWF0ZXJpYWw7XHJcblRIUkVFLlNoYWRvd01hdGVyaWFsID0gU2hhZG93TWF0ZXJpYWw7XHJcblRIUkVFLlNoYXBlID0gU2hhcGU7XHJcblRIUkVFLlNoYXBlQnVmZmVyR2VvbWV0cnkgPSBTaGFwZUJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5TaGFwZUdlb21ldHJ5ID0gU2hhcGVHZW9tZXRyeTtcclxuVEhSRUUuU2hhcGVQYXRoID0gU2hhcGVQYXRoO1xyXG5USFJFRS5TaGFwZVV0aWxzID0gU2hhcGVVdGlscztcclxuVEhSRUUuU2hvcnRUeXBlID0gU2hvcnRUeXBlO1xyXG5USFJFRS5Ta2VsZXRvbiA9IFNrZWxldG9uO1xyXG5USFJFRS5Ta2VsZXRvbkhlbHBlciA9IFNrZWxldG9uSGVscGVyO1xyXG5USFJFRS5Ta2lubmVkTWVzaCA9IFNraW5uZWRNZXNoO1xyXG5USFJFRS5TbW9vdGhTaGFkaW5nID0gU21vb3RoU2hhZGluZztcclxuVEhSRUUuU3BoZXJlID0gU3BoZXJlO1xyXG5USFJFRS5TcGhlcmVCdWZmZXJHZW9tZXRyeSA9IFNwaGVyZUJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5TcGhlcmVHZW9tZXRyeSA9IFNwaGVyZUdlb21ldHJ5O1xyXG5USFJFRS5TcGhlcmljYWwgPSBTcGhlcmljYWw7XHJcblRIUkVFLlNwaGVyaWNhbEhhcm1vbmljczMgPSBTcGhlcmljYWxIYXJtb25pY3MzO1xyXG5USFJFRS5TcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyA9IFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nO1xyXG5USFJFRS5TcGxpbmUgPSBTcGxpbmU7XHJcblRIUkVFLlNwbGluZUN1cnZlID0gU3BsaW5lQ3VydmU7XHJcblRIUkVFLlNwbGluZUN1cnZlMyA9IFNwbGluZUN1cnZlMztcclxuVEhSRUUuU3BvdExpZ2h0ID0gU3BvdExpZ2h0O1xyXG5USFJFRS5TcG90TGlnaHRIZWxwZXIgPSBTcG90TGlnaHRIZWxwZXI7XHJcblRIUkVFLlNwb3RMaWdodFNoYWRvdyA9IFNwb3RMaWdodFNoYWRvdztcclxuVEhSRUUuU3ByaXRlID0gU3ByaXRlO1xyXG5USFJFRS5TcHJpdGVNYXRlcmlhbCA9IFNwcml0ZU1hdGVyaWFsO1xyXG5USFJFRS5TcmNBbHBoYUZhY3RvciA9IFNyY0FscGhhRmFjdG9yO1xyXG5USFJFRS5TcmNBbHBoYVNhdHVyYXRlRmFjdG9yID0gU3JjQWxwaGFTYXR1cmF0ZUZhY3RvcjtcclxuVEhSRUUuU3JjQ29sb3JGYWN0b3IgPSBTcmNDb2xvckZhY3RvcjtcclxuVEhSRUUuU3RlcmVvQ2FtZXJhID0gU3RlcmVvQ2FtZXJhO1xyXG5USFJFRS5TdHJpbmdLZXlmcmFtZVRyYWNrID0gU3RyaW5nS2V5ZnJhbWVUcmFjaztcclxuVEhSRUUuU3VidHJhY3RFcXVhdGlvbiA9IFN1YnRyYWN0RXF1YXRpb247XHJcblRIUkVFLlN1YnRyYWN0aXZlQmxlbmRpbmcgPSBTdWJ0cmFjdGl2ZUJsZW5kaW5nO1xyXG5USFJFRS5UT1VDSCA9IFRPVUNIO1xyXG5USFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XHJcblRIUkVFLlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkgPSBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5UZXRyYWhlZHJvbkdlb21ldHJ5ID0gVGV0cmFoZWRyb25HZW9tZXRyeTtcclxuVEhSRUUuVGV4dEJ1ZmZlckdlb21ldHJ5ID0gVGV4dEJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5UZXh0R2VvbWV0cnkgPSBUZXh0R2VvbWV0cnk7XHJcblRIUkVFLlRleHR1cmUgPSBUZXh0dXJlO1xyXG5USFJFRS5UZXh0dXJlTG9hZGVyID0gVGV4dHVyZUxvYWRlcjtcclxuVEhSRUUuVG9ydXNCdWZmZXJHZW9tZXRyeSA9IFRvcnVzQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLlRvcnVzR2VvbWV0cnkgPSBUb3J1c0dlb21ldHJ5O1xyXG5USFJFRS5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeSA9IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5O1xyXG5USFJFRS5Ub3J1c0tub3RHZW9tZXRyeSA9IFRvcnVzS25vdEdlb21ldHJ5O1xyXG5USFJFRS5UcmlhbmdsZSA9IFRyaWFuZ2xlO1xyXG5USFJFRS5UcmlhbmdsZUZhbkRyYXdNb2RlID0gVHJpYW5nbGVGYW5EcmF3TW9kZTtcclxuVEhSRUUuVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gVHJpYW5nbGVTdHJpcERyYXdNb2RlO1xyXG5USFJFRS5UcmlhbmdsZXNEcmF3TW9kZSA9IFRyaWFuZ2xlc0RyYXdNb2RlO1xyXG5USFJFRS5UdWJlQnVmZmVyR2VvbWV0cnkgPSBUdWJlQnVmZmVyR2VvbWV0cnk7XHJcblRIUkVFLlR1YmVHZW9tZXRyeSA9IFR1YmVHZW9tZXRyeTtcclxuVEhSRUUuVVZNYXBwaW5nID0gVVZNYXBwaW5nO1xyXG5USFJFRS5VaW50MTZBdHRyaWJ1dGUgPSBVaW50MTZBdHRyaWJ1dGU7XHJcblRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSA9IFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcclxuVEhSRUUuVWludDMyQXR0cmlidXRlID0gVWludDMyQXR0cmlidXRlO1xyXG5USFJFRS5VaW50MzJCdWZmZXJBdHRyaWJ1dGUgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLlVpbnQ4QXR0cmlidXRlID0gVWludDhBdHRyaWJ1dGU7XHJcblRIUkVFLlVpbnQ4QnVmZmVyQXR0cmlidXRlID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7XHJcblRIUkVFLlVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZSA9IFVpbnQ4Q2xhbXBlZEF0dHJpYnV0ZTtcclxuVEhSRUUuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlID0gVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlO1xyXG5USFJFRS5VbmNoYXJ0ZWQyVG9uZU1hcHBpbmcgPSBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmc7XHJcblRIUkVFLlVuaWZvcm0gPSBVbmlmb3JtO1xyXG5USFJFRS5Vbmlmb3Jtc0xpYiA9IFVuaWZvcm1zTGliO1xyXG5USFJFRS5Vbmlmb3Jtc1V0aWxzID0gVW5pZm9ybXNVdGlscztcclxuVEhSRUUuVW5zaWduZWRCeXRlVHlwZSA9IFVuc2lnbmVkQnl0ZVR5cGU7XHJcblRIUkVFLlVuc2lnbmVkSW50MjQ4VHlwZSA9IFVuc2lnbmVkSW50MjQ4VHlwZTtcclxuVEhSRUUuVW5zaWduZWRJbnRUeXBlID0gVW5zaWduZWRJbnRUeXBlO1xyXG5USFJFRS5VbnNpZ25lZFNob3J0NDQ0NFR5cGUgPSBVbnNpZ25lZFNob3J0NDQ0NFR5cGU7XHJcblRIUkVFLlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSA9IFVuc2lnbmVkU2hvcnQ1NTUxVHlwZTtcclxuVEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGUgPSBVbnNpZ25lZFNob3J0NTY1VHlwZTtcclxuVEhSRUUuVW5zaWduZWRTaG9ydFR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcclxuVEhSRUUuVlNNU2hhZG93TWFwID0gVlNNU2hhZG93TWFwO1xyXG5USFJFRS5WZWN0b3IyID0gVmVjdG9yMjtcclxuVEhSRUUuVmVjdG9yMyA9IFZlY3RvcjM7XHJcblRIUkVFLlZlY3RvcjQgPSBWZWN0b3I0O1xyXG5USFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrID0gVmVjdG9yS2V5ZnJhbWVUcmFjaztcclxuVEhSRUUuVmVydGV4ID0gVmVydGV4O1xyXG5USFJFRS5WZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7XHJcblRIUkVFLlZlcnRleE5vcm1hbHNIZWxwZXIgPSBWZXJ0ZXhOb3JtYWxzSGVscGVyO1xyXG5USFJFRS5WaWRlb1RleHR1cmUgPSBWaWRlb1RleHR1cmU7XHJcblRIUkVFLldlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPSBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0O1xyXG5USFJFRS5XZWJHTFJlbmRlclRhcmdldCA9IFdlYkdMUmVuZGVyVGFyZ2V0O1xyXG5USFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUgPSBXZWJHTFJlbmRlclRhcmdldEN1YmU7XHJcblRIUkVFLldlYkdMUmVuZGVyZXIgPSBXZWJHTFJlbmRlcmVyO1xyXG5USFJFRS5XZWJHTFV0aWxzID0gV2ViR0xVdGlscztcclxuVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkgPSBXaXJlZnJhbWVHZW9tZXRyeTtcclxuVEhSRUUuV2lyZWZyYW1lSGVscGVyID0gV2lyZWZyYW1lSGVscGVyO1xyXG5USFJFRS5XcmFwQXJvdW5kRW5kaW5nID0gV3JhcEFyb3VuZEVuZGluZztcclxuVEhSRUUuWEhSTG9hZGVyID0gWEhSTG9hZGVyO1xyXG5USFJFRS5aZXJvQ3VydmF0dXJlRW5kaW5nID0gWmVyb0N1cnZhdHVyZUVuZGluZztcclxuVEhSRUUuWmVyb0ZhY3RvciA9IFplcm9GYWN0b3I7XHJcblRIUkVFLlplcm9TbG9wZUVuZGluZyA9IFplcm9TbG9wZUVuZGluZztcclxuVEhSRUUuWmVyb1N0ZW5jaWxPcCA9IFplcm9TdGVuY2lsT3A7XHJcblRIUkVFLnNSR0JFbmNvZGluZyA9IHNSR0JFbmNvZGluZztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRIUkVFXHJcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCBDaGFvcyBmcm9tICdAL2Jhc2UvY2hhb3MnXG5cbi8vIOiOt+WPluaXtumXtFxuZXhwb3J0IGNvbnN0IGdldFRpbWVzdGFtcCA9ICgpID0+ICh0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlKS5ub3coKVxuXG4vLyDluKflh73mlbBcbmV4cG9ydCBjb25zdCByYWYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKVxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBjYWxsYmFjaygpXG4gIH0sIGZwcylcbn1cblxuLy8g5rex5ou36LSdXG5leHBvcnQgY29uc3QgY2xvbmVEZWVwID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gZGF0YVxuICBpZiAoZGF0YS5jb25zdHJ1Y3RvciA9PT0gRGF0ZSkgcmV0dXJuIG5ldyBEYXRlKGRhdGEpXG4gIGNvbnN0IGNsb25lID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IFtdIDoge31cbiAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcbiAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBpZiAodHlwZW9mIGRhdGFba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY2xvbmVba2V5XSA9IGNsb25lRGVlcChkYXRhW2tleV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZVtrZXldID0gZGF0YVtrZXldXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q2FtZXJhRGlyZWN0aW9uID0gZnVuY3Rpb24gKGNhbWVyYSwgeCwgeikge1xuICAvLyDojrflj5bmkYTlg4/mnLrnmoTlsY/luZXkuIvmipXlvbHmlrnlkJFcbiAgY29uc3QgcmlnaHQgPSBuZXcgVEhSRUUuVmVjdG9yMygxLCAwLCAwKVxuICBjb25zdCB1cCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDEpXG4gIGNvbnN0IHdvcmxkWERpcmVjdGlvbiA9IHJpZ2h0LnRyYW5zZm9ybURpcmVjdGlvbihjYW1lcmEubWF0cml4V29ybGQpXG4gIGNvbnN0IGdyb3VuZFhEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyh3b3JsZFhEaXJlY3Rpb24ueCwgMCwgd29ybGRYRGlyZWN0aW9uLnopLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHgpXG4gIGNvbnN0IHdvcmxkWURpcmVjdGlvbiA9IHVwLnRyYW5zZm9ybURpcmVjdGlvbihjYW1lcmEubWF0cml4V29ybGQpXG4gIGNvbnN0IGdyb3VuZFlEaXJlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyh3b3JsZFlEaXJlY3Rpb24ueCwgMCwgd29ybGRZRGlyZWN0aW9uLnopLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHopXG4gIGNvbnN0IGRpcmVjdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKGdyb3VuZFhEaXJlY3Rpb24ueCArIGdyb3VuZFlEaXJlY3Rpb24ueCwgMCwgZ3JvdW5kWERpcmVjdGlvbi56ICsgZ3JvdW5kWURpcmVjdGlvbi56KVxuICByZXR1cm4gZGlyZWN0aW9uXG59XG5cbmV4cG9ydCBjb25zdCBnZXRQbFNjcmVlblRvT2JqZWN0ID0gZnVuY3Rpb24gKHgsIHksIHgxLCB5MSkge1xuICBsZXQgdjEgPSBnZXRQb2ludFRvV29ybGQoeCwgeSlcbiAgbGV0IHYyID0gZ2V0UG9pbnRUb1dvcmxkKHgxLCB5MSlcbiAgcmV0dXJuIHYyLnN1Yih2MSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFBvaW50VG9Xb3JsZCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIGlmICghQ2hhb3MucGxhbmUpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEwMDAwLCAxMDAwMClcbiAgICBnZW9tZXRyeS5yb3RhdGVYKC1NYXRoLlBJIC8gMilcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IHRyYW5zcGFyZW50OiB0cnVlLCBvcGFjaXR5OiAwLCBkZXB0aFdyaXRlOiBmYWxzZSwgfSlcbiAgICBDaGFvcy5wbGFuZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbClcbiAgICBDaGFvcy5zY2VuZS5hZGQoQ2hhb3MucGxhbmUpXG4gIH1cbiAgbGV0IHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKVxuICBDaGFvcy5tb3VzZS54ID0gKHggLyBDaGFvcy53aWR0aCkgKiAyIC0gMVxuICBDaGFvcy5tb3VzZS55ID0gLSAoeSAvIENoYW9zLmhlaWdodCkgKiAyICsgMVxuICBDaGFvcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYShDaGFvcy5tb3VzZSwgQ2hhb3MuY2FtZXJhKVxuICBjb25zdCBpbm8xID0gQ2hhb3MucmF5Y2FzdGVyLmludGVyc2VjdE9iamVjdHMoW0NoYW9zLnBsYW5lXSlcbiAgaWYgKGlubzEubGVuZ3RoKSB7XG4gICAgdjEuY29weShpbm8xWzBdLnBvaW50KVxuICB9XG4gIHJldHVybiB2MVxufVxuXG4vLyDojrflj5YzZOWvueixoeWcqOWxj+W5leS9jee9rlxuZXhwb3J0IGZ1bmN0aW9uIG9ialRvU2NyZWVuUG9zaXRpb24ob2JqLCBjYW1lcmEpIHtcbiAgdmFyIHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gIHZhciB3aWR0aEhhbGYgPSAwLjUgKiBDaGFvcy53aWR0aDsgIC8v5q2k5aSE5bqU5L2/55So55S75biD6ZW/5ZKM5a69XG4gIHZhciBoZWlnaHRIYWxmID0gMC41ICogQ2hhb3MuaGVpZ2h0O1xuXG4gIG9iai51cGRhdGVNYXRyaXhXb3JsZCgpOyAvLyDlh73mlbB1cGRhdGVNYXRyaXgoKeWSjHVwZGF0ZU1hdHJpeFdvcmxkKGZvcmNlKeWwhuagueaNrnBvc2l0aW9u77yMcm90YXRpb27miJZxdWF0ZXJuaW9u77yMc2NhbGXlj4LmlbDmm7TmlrBtYXRyaXjlkoxtYXRyaXhXb3JsZOOAgnVwZGF0ZU1hdHJpeFdvcmxk6L+Y5Lya5pu05paw5omA5pyJ5ZCO5Luj5YWD57Sg55qEbWF0cml4V29ybGTvvIzlpoLmnpxmb3JjZeWAvOS4uuecn+WImeiwg+eUqOiAheacrOi6q+eahG1hdHJpeFdvcmxkTmVlZHNVcGRhdGXlgLzkuLrnnJ/jgIJcblxuICAvL2dldFBvc2l0aW9uRnJvbU1hdHJpeCgp5pa55rOV5bey57uP5Yig6ZmkLOS9v+eUqHNldEZyb21NYXRyaXhQb3NpdGlvbigp5pu/5o2iLCBzZXRGcm9tTWF0cml4UG9zaXRpb27mlrnms5XlsIbov5Tlm57ku47nn6npmLXkuK3nmoTlhYPntKDlvpfliLDnmoTmlrDnmoTlkJHph4/lgLznmoTlkJHph49cbiAgdmVjdG9yLnNldEZyb21NYXRyaXhQb3NpdGlvbihvYmoubWF0cml4V29ybGQpO1xuXG4gIC8vcHJvamVjdE9uVmVjdG9y5pa55rOV5Zyo5bCG5b2T5YmN5LiJ57u05ZCR6YePKHgseSx6KeaKleW9seS4gOS4quWQkemHj+WIsOWPpuS4gOS4quWQkemHjyzlj4LmlbB2ZWN0b3IoeCx5LHopLiBcbiAgdmVjdG9yLnByb2plY3QoY2FtZXJhKTtcblxuICB2ZWN0b3IueCA9ICh2ZWN0b3IueCAqIHdpZHRoSGFsZikgKyB3aWR0aEhhbGY7XG4gIHZlY3Rvci55ID0gLSh2ZWN0b3IueSAqIGhlaWdodEhhbGYpICsgaGVpZ2h0SGFsZjtcblxuICByZXR1cm4ge1xuICAgIHg6IHZlY3Rvci54LFxuICAgIHk6IHZlY3Rvci55XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb2ludFRvU2NyZWVuUG9zaXRpb24oY29udGFpbmVyLCB3b3JsZFBvaW50LCBjYW1lcmEpIHtcbiAgdmFyIHAgPSBuZXcgVEhSRUUuVmVjdG9yNCgpXG4gIHAueCA9IHdvcmxkUG9pbnQueFxuICBwLnkgPSB3b3JsZFBvaW50LnlcbiAgcC56ID0gd29ybGRQb2ludC56XG4gIHAuYXBwbHlNYXRyaXg0KGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpIC8v6YCG55+p6Zi1XG4gIHAuYXBwbHlNYXRyaXg0KGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KSAvL+aKleW9seefqemYtVxuXG4gIHZhciByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAgLy/ov5Tlm57lsZ7mgKfigJTigJRsZWZ044CBdG9w44CBcmlnaHTlkoxib3R0b23vvIzljZXkvY3kuLrlg4/ntKDjgILpmaTkuoYgd2lkdGgg5ZKMIGhlaWdodCDlpJbnmoTlsZ7mgKfpg73mmK/nm7jlr7nkuo7op4blj6PnmoTlt6bkuIrop5LkvY3nva7ogIzoqIDnmoTjgIJcbiAgcG9pbnQgPSBuZXcgVEhSRUUuVmVjdG9yMyhcbiAgICAoKHAueCArIDAuNSkgLyByZWN0LndpZHRoKSAqIDIgLSAxLFxuICAgIC0oKHAueSArIDAuNSkgLyByZWN0LmhlaWdodCkgKiAyICsgMSwgMSk7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLmZsb29yKHBvaW50LngpICsgMC41LFxuICAgIHk6IE1hdGguZmxvb3IocG9pbnQueSkgKyAwLjVcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGxlcnBDb2xvcnMgPSBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIsIGFscGhhKSB7XG4gIGNvbnN0IGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKDB4ZmZmZmZmKVxuICBjb2xvci5yID0gY29sb3IxLnIgKyAoY29sb3IyLnIgLSBjb2xvcjEucikgKiBhbHBoYVxuICBjb2xvci5nID0gY29sb3IxLmcgKyAoY29sb3IyLmcgLSBjb2xvcjEuZykgKiBhbHBoYVxuICBjb2xvci5iID0gY29sb3IxLmIgKyAoY29sb3IyLmIgLSBjb2xvcjEuYikgKiBhbHBoYVxuICByZXR1cm4gY29sb3Jcbn1cblxuZXhwb3J0IGNvbnN0IGdldFZlY3RJbnQgPSBmdW5jdGlvbih2KSB7XG4gIHYueCA9IE1hdGguZmxvb3Iodi54ICogMTAwKSAvIDEwMFxuICB2LnkgPSBNYXRoLmZsb29yKHYueSAqIDEwMCkgLyAxMDBcbiAgdi56ID0gTWF0aC5mbG9vcih2LnogKiAxMDApIC8gMTAwXG4gIHJldHVybiB2XG59XG5cbmV4cG9ydCBjb25zdCBnZXRWZWN0SW5kZXggPSBmdW5jdGlvbiAodikge1xuICBjb25zdCBfdiA9IE1hdGguZmxvb3IodiAvIENoYW9zLmdyaWRTaXplKVxuICByZXR1cm4gTWF0aC5mbG9vcihfdiAqIDEwMCkgLyAxMDAgXG59IiwiaW1wb3J0IHsgcmFmIH0gZnJvbSAnLi91dGlscydcblxuLy8g5ZCE57G757yT5Yqo566X5rOV77yM5pWI5p6c5ryU56S65Y+C6KeB77yaaHR0cDovL3d3dy56aGFuZ3hpbnh1LmNvbS9zdHVkeS8yMDE2MTIvaG93LXRvLXVzZS10d2Vlbi1qcy5odG1sXG5jb25zdCBhbmltYXRpb25JZHMgPSB7fVxubGV0IGlkID0gMFxuXG5leHBvcnQgY29uc3QgYW5pbWF0aW9uID0gZnVuY3Rpb24gKGZyb20sIHRvLCBkdXJhdGlvbiwgZWFzaW5nLCBjYikge1xuICB2YXIgc3RhcnQgPSAwXG4gIHZhciBkdXJpbmcgPSBNYXRoLmNlaWwoZHVyYXRpb24gLyAxNylcbiAgdmFyIGFycktleVR3ZWVuID0gZWFzaW5nLnNwbGl0KCcuJylcbiAgdmFyIGZuR2V0VmFsdWVcbiAgaWYgKGFycktleVR3ZWVuLmxlbmd0aCA9PSAxKSB7XG4gICAgZm5HZXRWYWx1ZSA9IFR3ZWVuW2FycktleVR3ZWVuWzBdXVxuICB9IGVsc2UgaWYgKGFycktleVR3ZWVuLmxlbmd0aCA9PSAyKSB7XG4gICAgZm5HZXRWYWx1ZSA9IFR3ZWVuW2FycktleVR3ZWVuWzBdXSAmJiBUd2VlblthcnJLZXlUd2VlblswXV1bYXJyS2V5VHdlZW5bMV1dXG4gIH1cbiAgY29uc3Qgc3RlcCA9IGZ1bmN0aW9uIChfaWQpIHtcbiAgICB2YXIgdmFsdWUgPSBmbkdldFZhbHVlKHN0YXJ0LCBmcm9tLCB0byAtIGZyb20sIGR1cmluZylcbiAgICBzdGFydCsrO1xuICAgIGlmICghYW5pbWF0aW9uSWRzW19pZF0pIHJldHVybiBmYWxzZVxuICAgIGlmIChzdGFydCA8PSBkdXJpbmcpIHtcbiAgICAgIGNiKHZhbHVlKVxuICAgICAgcmFmKCgpID0+IHN0ZXAoX2lkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgY2IodG8sIHRydWUpXG4gICAgfVxuICB9XG4gIGlkKytcbiAgYW5pbWF0aW9uSWRzW2lkXSA9IHRydWVcbiAgc3RlcChpZClcbiAgcmV0dXJuIGlkXG59XG5cbmV4cG9ydCBjb25zdCBjbGVhckFuaW1hdGlvbiA9IGZ1bmN0aW9uIChpZCkge1xuICBpZiAoYW5pbWF0aW9uSWRzW2lkXSkge1xuICAgIGRlbGV0ZSBhbmltYXRpb25JZHNbaWRdXG4gIH1cbn1cblxuLypcbiAqIFR3ZWVuLmpzXG4gKiB0OiBjdXJyZW50IHRpbWXvvIjlvZPliY3ml7bpl7TvvInvvJtcbiAqIGI6IGJlZ2lubmluZyB2YWx1Ze+8iOWIneWni+WAvO+8ie+8m1xuICogYzogY2hhbmdlIGluIHZhbHVl77yI5Y+Y5YyW6YeP77yJ77ybXG4gKiBkOiBkdXJhdGlvbu+8iOaMgee7reaXtumXtO+8ieOAglxuICogeW91IGNhbiB2aXNpdCAnaHR0cHM6Ly93d3cuemhhbmd4aW54dS5jb20vc3R1ZHkvMjAxNjEyL2hvdy10by11c2UtdHdlZW4tanMuaHRtbCcgdG8gZ2V0IGVmZmVjdFxuKi9cbnZhciBUd2VlbiA9IHtcbiAgTGluZWFyOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogdCAvIGQgKyBiO1xuICB9LFxuICBRdWFkOiB7XG4gICAgZWFzZUluOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKyBiO1xuICAgIH0sXG4gICAgZWFzZU91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiAtYyAqICh0IC89IGQpICogKHQgLSAyKSArIGI7XG4gICAgfSxcbiAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKyBiO1xuICAgICAgcmV0dXJuIC1jIC8gMiAqICgoLS10KSAqICh0IC0gMikgLSAxKSArIGI7XG4gICAgfVxuICB9LFxuICBDdWJpYzoge1xuICAgIGVhc2VJbjogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGI7XG4gICAgfSxcbiAgICBlYXNlT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGI7XG4gICAgfSxcbiAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICsgYjtcbiAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICsgMikgKyBiO1xuICAgIH1cbiAgfSxcbiAgUXVhcnQ6IHtcbiAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICsgYjtcbiAgICB9LFxuICAgIGVhc2VPdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gLWMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiO1xuICAgIH0sXG4gICAgZWFzZUluT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgICAgcmV0dXJuIC1jIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpICsgYjtcbiAgICB9XG4gIH0sXG4gIFF1aW50OiB7XG4gICAgZWFzZUluOiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgIH0sXG4gICAgZWFzZU91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxKSArIGI7XG4gICAgfSxcbiAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICBpZiAoKHQgLz0gZCAvIDIpIDwgMSkgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpICsgYjtcbiAgICB9XG4gIH0sXG4gIFNpbmU6IHtcbiAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gLWMgKiBNYXRoLmNvcyh0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYyArIGI7XG4gICAgfSxcbiAgICBlYXNlT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiBNYXRoLnNpbih0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYjtcbiAgICB9LFxuICAgIGVhc2VJbk91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiAtYyAvIDIgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQgLyBkKSAtIDEpICsgYjtcbiAgICB9XG4gIH0sXG4gIEV4cG86IHtcbiAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gKHQgPT0gMCkgPyBiIDogYyAqIE1hdGgucG93KDIsIDEwICogKHQgLyBkIC0gMSkpICsgYjtcbiAgICB9LFxuICAgIGVhc2VPdXQ6IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gKHQgPT0gZCkgPyBiICsgYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQgLyBkKSArIDEpICsgYjtcbiAgICB9LFxuICAgIGVhc2VJbk91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIGlmICh0ID09IDApIHJldHVybiBiO1xuICAgICAgaWYgKHQgPT0gZCkgcmV0dXJuIGIgKyBjO1xuICAgICAgaWYgKCh0IC89IGQgLyAyKSA8IDEpIHJldHVybiBjIC8gMiAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiO1xuICAgICAgcmV0dXJuIGMgLyAyICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMikgKyBiO1xuICAgIH1cbiAgfSxcbiAgQ2lyYzoge1xuICAgIGVhc2VJbjogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiAtYyAqIChNYXRoLnNxcnQoMSAtICh0IC89IGQpICogdCkgLSAxKSArIGI7XG4gICAgfSxcbiAgICBlYXNlT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGMgKiBNYXRoLnNxcnQoMSAtICh0ID0gdCAvIGQgLSAxKSAqIHQpICsgYjtcbiAgICB9LFxuICAgIGVhc2VJbk91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQpIHtcbiAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gLWMgLyAyICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgKyBiO1xuICAgICAgcmV0dXJuIGMgLyAyICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpICsgYjtcbiAgICB9XG4gIH0sXG4gIEVsYXN0aWM6IHtcbiAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkLCBhLCBwKSB7XG4gICAgICB2YXIgcztcbiAgICAgIGlmICh0ID09IDApIHJldHVybiBiO1xuICAgICAgaWYgKCh0IC89IGQpID09IDEpIHJldHVybiBiICsgYztcbiAgICAgIGlmICh0eXBlb2YgcCA9PSBcInVuZGVmaW5lZFwiKSBwID0gZCAqIC4zO1xuICAgICAgaWYgKCFhIHx8IGEgPCBNYXRoLmFicyhjKSkge1xuICAgICAgICBzID0gcCAvIDQ7XG4gICAgICAgIGEgPSBjO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKGMgLyBhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKSArIGI7XG4gICAgfSxcbiAgICBlYXNlT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCwgYSwgcCkge1xuICAgICAgdmFyIHM7XG4gICAgICBpZiAodCA9PSAwKSByZXR1cm4gYjtcbiAgICAgIGlmICgodCAvPSBkKSA9PSAxKSByZXR1cm4gYiArIGM7XG4gICAgICBpZiAodHlwZW9mIHAgPT0gXCJ1bmRlZmluZWRcIikgcCA9IGQgKiAuMztcbiAgICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgICAgYSA9IGM7XG4gICAgICAgIHMgPSBwIC8gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgYyArIGIpO1xuICAgIH0sXG4gICAgZWFzZUluT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCwgYSwgcCkge1xuICAgICAgdmFyIHM7XG4gICAgICBpZiAodCA9PSAwKSByZXR1cm4gYjtcbiAgICAgIGlmICgodCAvPSBkIC8gMikgPT0gMikgcmV0dXJuIGIgKyBjO1xuICAgICAgaWYgKHR5cGVvZiBwID09IFwidW5kZWZpbmVkXCIpIHAgPSBkICogKC4zICogMS41KTtcbiAgICAgIGlmICghYSB8fCBhIDwgTWF0aC5hYnMoYykpIHtcbiAgICAgICAgYSA9IGM7XG4gICAgICAgIHMgPSBwIC8gNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbihjIC8gYSk7XG4gICAgICB9XG4gICAgICBpZiAodCA8IDEpIHJldHVybiAtLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpICsgYjtcbiAgICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKiAuNSArIGMgKyBiO1xuICAgIH1cbiAgfSxcbiAgQmFjazoge1xuICAgIGVhc2VJbjogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcyA9PSBcInVuZGVmaW5lZFwiKSBzID0gMS43MDE1ODtcbiAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogKChzICsgMSkgKiB0IC0gcykgKyBiO1xuICAgIH0sXG4gICAgZWFzZU91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcyA9PSBcInVuZGVmaW5lZFwiKSBzID0gMS43MDE1ODtcbiAgICAgIHJldHVybiBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDEpICsgYjtcbiAgICB9LFxuICAgIGVhc2VJbk91dDogZnVuY3Rpb24gKHQsIGIsIGMsIGQsIHMpIHtcbiAgICAgIGlmICh0eXBlb2YgcyA9PSBcInVuZGVmaW5lZFwiKSBzID0gMS43MDE1ODtcbiAgICAgIGlmICgodCAvPSBkIC8gMikgPCAxKSByZXR1cm4gYyAvIDIgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpICsgYjtcbiAgICAgIHJldHVybiBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKSArIGI7XG4gICAgfVxuICB9LFxuICBCb3VuY2U6IHtcbiAgICBlYXNlSW46IGZ1bmN0aW9uICh0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gYyAtIFR3ZWVuLkJvdW5jZS5lYXNlT3V0KGQgLSB0LCAwLCBjLCBkKSArIGI7XG4gICAgfSxcbiAgICBlYXNlT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgaWYgKCh0IC89IGQpIDwgKDEgLyAyLjc1KSkge1xuICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiB0ICogdCkgKyBiO1xuICAgICAgfSBlbHNlIGlmICh0IDwgKDIgLyAyLjc1KSkge1xuICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIC43NSkgKyBiO1xuICAgICAgfSBlbHNlIGlmICh0IDwgKDIuNSAvIDIuNzUpKSB7XG4gICAgICAgIHJldHVybiBjICogKDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIC45Mzc1KSArIGI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMi42MjUgLyAyLjc1KSkgKiB0ICsgLjk4NDM3NSkgKyBiO1xuICAgICAgfVxuICAgIH0sXG4gICAgZWFzZUluT3V0OiBmdW5jdGlvbiAodCwgYiwgYywgZCkge1xuICAgICAgaWYgKHQgPCBkIC8gMikge1xuICAgICAgICByZXR1cm4gVHdlZW4uQm91bmNlLmVhc2VJbih0ICogMiwgMCwgYywgZCkgKiAuNSArIGI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVHdlZW4uQm91bmNlLmVhc2VPdXQodCAqIDIgLSBkLCAwLCBjLCBkKSAqIC41ICsgYyAqIC41ICsgYjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG4iLCJpbXBvcnQgQ2hhb3MgZnJvbSAnLi9jaGFvcydcbmltcG9ydCBUSFJFRSBmcm9tICcuL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBhbmltYXRpb24sIGNsZWFyQW5pbWF0aW9uIH0gZnJvbSAnQC9jb21tb24vYW5pbWF0aW9uJ1xuXG5jb25zdCB0b3VjaFR5cGUgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ11cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50SWRzID0ge31cbiAgICB0aGlzLmlzVG91Y2ggPSBmYWxzZVxuICAgIHRvdWNoVHlwZS5mb3JFYWNoKCh0eXBlLCBpbmRleCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAoZSkgPT4ge1xuICAgICAgICB0aGlzW3RvdWNoVHlwZVtpbmRleF1dKGUpXG4gICAgICB9KVxuICAgIH0pXG4gICAgdGhpcy5oYW5kcyA9IHt9XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoMTYsIDMyLCAxNilcbiAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG4gICAgICBjb2xvcjogMHhmZmZmZmYsXG4gICAgICBvcGFjaXR5OiAwLjksXG4gICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlXG4gICAgfSlcbiAgICB0aGlzLm1lc2hQb2ludCA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBtYXRlcmlhbClcbiAgICB0aGlzLm1lc2hQb2ludC5uYW1lID0gJ2V2ZW50TWVzaFBvaW50J1xuICB9XG4gIHRvdWNoc3RhcnQoZSkge1xuICAgIHRoaXMuaXNUb3VjaCA9IHRydWVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdG91Y2hlID0gZS50b3VjaGVzW2ldXG4gICAgICBjb25zdCBvYmogPSB0aGlzLmludGVyc2VjdCh0b3VjaGUpWzBdXG4gICAgICBpZiAob2JqKSB7XG4gICAgICAgIHRoaXMuZXZlbnRJZHNbb2JqLm9iamVjdC51dWlkXSA9IHRoaXMudG91Y2hPYmplY3REYXRhKCd0b3VjaHN0YXJ0Jywgb2JqLCB0b3VjaGUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVRvdWNoKHRvdWNoZSlcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENoYW9zLnNlbGVjdElkKSB7XG4gICAgICBsZXQgaXNUYXJnZXQgPSBmYWxzZVxuICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudElkcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IHRoaXMuZXZlbnRJZHNba2V5XVxuICAgICAgICBjb25zdCBpdGVtID0gZXZlbnQuZGF0YS5vYmpcbiAgICAgICAgaWYgKENoYW9zLnNlbGVjdElkID09IGl0ZW0uaWQgfHwgaXRlbS5wYXJlbnQgJiYgaXRlbS5wYXJlbnQuaWQgPT0gQ2hhb3Muc2VsZWN0SWQpIHtcbiAgICAgICAgICBpc1RhcmdldCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuaXNVaSkge1xuICAgICAgICAgIGlzVGFyZ2V0ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgaWYgKCFpc1RhcmdldCkge1xuICAgICAgICBDaGFvcy5zZWxlY3RlZE9iamVjdHMgPSBudWxsXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgndG91Y2hzdGFydCcsIGUpXG4gIH1cbiAgdG91Y2htb3ZlKGUpIHtcbiAgICBpZiAoIXRoaXMuaXNUb3VjaCkgcmV0dXJuIGZhbHNlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0b3VjaGUgPSBlLmNoYW5nZWRUb3VjaGVzW2ldXG4gICAgICBmb3IgKGNvbnN0IHggaW4gdGhpcy5ldmVudElkcykge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5ldmVudElkc1t4XVxuICAgICAgICBpZiAoaXRlbS5kYXRhLnRvdWNoZS5pZGVudGlmaWVyID09PSB0b3VjaGUuaWRlbnRpZmllcikge1xuICAgICAgICAgIGlmIChNYXRoLmFicyh0b3VjaGUuY2xpZW50WCAtIGl0ZW0uZGF0YS50b3VjaGUuY2xpZW50WCkgPiA0IHx8XG4gICAgICAgICAgICBNYXRoLmFicyh0b3VjaGUuY2xpZW50WSAtIGl0ZW0uZGF0YS50b3VjaGUuY2xpZW50WSkgPiA0KSB7XG4gICAgICAgICAgICBpdGVtLmlzTW92ZSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS50eXBlID0gJ3RvdWNobW92ZSdcbiAgICAgICAgICBpdGVtLmRhdGEudG91Y2hlID0gdG91Y2hlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3RvdWNobW92ZScsIGUpXG4gIH1cbiAgdG91Y2hlbmQoZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdG91Y2hlID0gZS5jaGFuZ2VkVG91Y2hlc1tpXVxuICAgICAgZm9yIChjb25zdCB4IGluIHRoaXMuZXZlbnRJZHMpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZXZlbnRJZHNbeF1cbiAgICAgICAgaWYgKGl0ZW0uZGF0YS50b3VjaGUuaWRlbnRpZmllciA9PT0gdG91Y2hlLmlkZW50aWZpZXIpIHtcbiAgICAgICAgICBpZiAoIWl0ZW0uaXNNb3ZlKSBpdGVtLmNsaWNrID0gdHJ1ZVxuICAgICAgICAgIGl0ZW0udHlwZSA9ICd0b3VjaGVuZCdcbiAgICAgICAgICBpdGVtLmRhdGEudG91Y2hlID0gdG91Y2hlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pc1RvdWNoID0gZmFsc2VcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ3RvdWNoZW5kJywgZSlcbiAgfVxuICBkaXNwYXRjaEV2ZW50KGV2ZW50VHlwZSwgZSkge1xuICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID49IDIpIHtcbiAgICAgIENoYW9zLmNvbnRyb2xzW2V2ZW50VHlwZV0oZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNwYXRjaChldmVudFR5cGUsIHRoaXMuZXZlbnRJZHMpXG4gICAgICBpZiAoIXRoaXMuc3RvcEV2ZW50UGFzcykge1xuICAgICAgICBDaGFvcy5jb250cm9sc1tldmVudFR5cGVdKHtcbiAgICAgICAgICB0b3VjaGVzOiBbZS5jaGFuZ2VkVG91Y2hlc1swXSwge1xuICAgICAgICAgICAgcGFnZVg6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggKyAxLFxuICAgICAgICAgICAgcGFnZVk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgKyAxLFxuICAgICAgICAgIH1dXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDaGFvcy5jb250cm9scy5jYW5uZWxTY3JvbGxUbygpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRpc3BhdGNoKHR5cGUsIGV2ZW50SWRzKSB7XG4gICAgY29uc3QgZGVsZXRlcyA9IFtdXG4gICAgbGV0IGV2ZW50cyA9IFtdXG4gICAgbGV0IGNsaWNrcyA9IFtdXG4gICAgZm9yIChjb25zdCBpZCBpbiBldmVudElkcykge1xuICAgICAgY29uc3QgZXZlbnQgPSBldmVudElkc1tpZF1cbiAgICAgIGNvbnN0IGRhdGEgPSBldmVudC5kYXRhXG4gICAgICBjb25zdCB0YXJnZXQgPSBkYXRhLm9iai5wYXJlbnRcbiAgICAgIGlmIChldmVudC50eXBlID09PSB0eXBlICYmIHRhcmdldFt0eXBlXSkge1xuICAgICAgICBldmVudHMucHVzaCh7XG4gICAgICAgICAgc29ydDogdGFyZ2V0LnpJbmRleCxcbiAgICAgICAgICBjYjogKCkgPT4ge1xuICAgICAgICAgICAgdGFyZ2V0W3R5cGVdKGRhdGEudG91Y2hlLCBkYXRhLnBvaW50LCBkYXRhLnV2KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC5jbGljayAmJiB0YXJnZXQuY2xpY2spIHtcbiAgICAgICAgY2xpY2tzLnB1c2goe1xuICAgICAgICAgIHNvcnQ6IHRhcmdldC56SW5kZXgsXG4gICAgICAgICAgY2I6ICgpID0+IHtcbiAgICAgICAgICAgIHRhcmdldC5jbGljayhkYXRhLnRvdWNoZSwgZGF0YS5wb2ludCwgZGF0YS51dilcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ3RvdWNoZW5kJykgZGVsZXRlcy5wdXNoKGlkKVxuICAgIH1cbiAgICBldmVudHMgPSBldmVudHMuc29ydCgoYSxiKSA9PiBiLnNvcnQgLSBhLnNvcnQpXG4gICAgY2xpY2tzID0gY2xpY2tzLnNvcnQoKGEsIGIpID0+IGIuc29ydCAtIGEuc29ydClcbiAgICB0aGlzLnN0b3BFdmVudFBhc3MgPSBmYWxzZVxuICAgIGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICghdGhpcy5zdG9wRXZlbnRQYXNzKSB7XG4gICAgICAgIGV2ZW50LmNiKClcbiAgICAgIH1cbiAgICB9KVxuICAgIGNsaWNrcy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICghdGhpcy5zdG9wRXZlbnRQYXNzKSB7XG4gICAgICAgIGV2ZW50LmNiKClcbiAgICAgIH1cbiAgICB9KVxuICAgIGRlbGV0ZXMuZm9yRWFjaChpZCA9PiBkZWxldGUgZXZlbnRJZHNbaWRdKVxuICB9XG4gIGludGVyc2VjdChlLCBsaXN0ID0gQ2hhb3Muc2NlbmUuY2hpbGRyZW4pIHtcbiAgICBsZXQgaW50ZXJzZWN0cyA9IFtdXG4gICAgQ2hhb3MubW91c2UueCA9IChlLnBhZ2VYIC8gQ2hhb3Mud2lkdGgpICogMiAtIDFcbiAgICBDaGFvcy5tb3VzZS55ID0gLSAoZS5wYWdlWSAvIENoYW9zLmhlaWdodCkgKiAyICsgMVxuICAgIENoYW9zLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKENoYW9zLm1vdXNlLCBDaGFvcy5jYW1lcmEpXG4gICAgbGlzdC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uaXNDdXN0b20gJiYgaXRlbS5jaGlsZHJlbiAmJiBpdGVtLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBpbnRlcnNlY3RzLnB1c2goaXRlbS5jaGlsZHJlblswXSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBDaGFvcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyhpbnRlcnNlY3RzKVxuICB9XG4gIHRvdWNoT2JqZWN0RGF0YSh0eXBlLCBvYmosIHRvdWNoZSkge1xuICAgIGNvbnN0IGlzVWkgPSBvYmoub2JqZWN0LnBhcmVudC5pc1VpXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGUsXG4gICAgICBpc1VpLFxuICAgICAgZGF0YToge1xuICAgICAgICB0b3VjaGUsXG4gICAgICAgIHV2OiBvYmoudXYsXG4gICAgICAgIHBvaW50OiBvYmoucG9pbnQsXG4gICAgICAgIGlzTW92ZTogZmFsc2UsXG4gICAgICAgIG9iajogb2JqLm9iamVjdFxuICAgICAgfVxuICAgIH1cbiAgfVxuICB1cGRhdGVUb3VjaCh0b3VjaGUpIHtcbiAgICBsZXQgcG9pbnQgPSBudWxsXG4gICAgaWYgKCF0aGlzLmhhbmRzW3RvdWNoZS5pZGVudGlmaWVyXSkge1xuICAgICAgcG9pbnQgPSB0aGlzLm1lc2hQb2ludC5jbG9uZSgpXG4gICAgICBDaGFvcy5zY2VuZS5hZGQocG9pbnQpXG4gICAgICB0aGlzLmhhbmRzW3RvdWNoZS5pZGVudGlmaWVyXSA9IHsgcG9pbnQsIGFuaTogbnVsbCB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50ID0gdGhpcy5oYW5kc1t0b3VjaGUuaWRlbnRpZmllcl0ucG9pbnRcbiAgICAgIGNsZWFyQW5pbWF0aW9uKHRoaXMuaGFuZHNbdG91Y2hlLmlkZW50aWZpZXJdLmFuaSlcbiAgICB9XG4gICAgY29uc3QgY3AgPSBDaGFvcy5jYW1lcmFcbiAgICBjb25zdCB6b29tID0gMSAvIENoYW9zLmNhbWVyYS56b29tXG4gICAgcG9pbnQucG9zaXRpb24uY29weShjcC5wb3NpdGlvbilcbiAgICBwb2ludC5yb3RhdGlvbi5jb3B5KGNwLnJvdGF0aW9uKVxuICAgIHBvaW50LnNjYWxlLnNldCh6b29tLCB6b29tLCB6b29tKVxuICAgIHBvaW50LnRyYW5zbGF0ZVooLTEwMClcbiAgICBwb2ludC50cmFuc2xhdGVYKC0oQ2hhb3Mud2lkdGggLyAyIC0gdG91Y2hlLnBhZ2VYKSAqIHpvb20pXG4gICAgcG9pbnQudHJhbnNsYXRlWSgoQ2hhb3MuaGVpZ2h0IC8gMiAtIHRvdWNoZS5wYWdlWSkgKiB6b29tKVxuICAgIHBvaW50LnVwZGF0ZU1hdHJpeCgpXG4gICAgdGhpcy5oYW5kc1t0b3VjaGUuaWRlbnRpZmllcl0uYW5pID0gYW5pbWF0aW9uKDAuNCwgMC44OCwgMzAwLCAnUXVhZC5lYXNlT3V0JywgKHYsIGUpID0+IHtcbiAgICAgIGNvbnN0IHMgPSB6b29tICsgem9vbSAqIHZcbiAgICAgIHBvaW50LnNjYWxlLnNldChzLCBzLCBzKVxuICAgICAgcG9pbnQubWF0ZXJpYWwub3BhY2l0eSA9IDEgLSB2XG4gICAgICBpZiAoZSkge1xuICAgICAgICBDaGFvcy5zY2VuZS5yZW1vdmUocG9pbnQpXG4gICAgICAgIHRoaXMuaGFuZHNbdG91Y2hlLmlkZW50aWZpZXJdID0gbnVsbFxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBUSFJFRS5XZWJHTFJlbmRlcmVye1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcih7XG4gICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICBjYW52YXM6IHdpbmRvdy5jYW52YXNcbiAgICB9KVxuICAgIHRoaXMuYXV0b0NsZWFyID0gZmFsc2VcbiAgICB0aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gdHJ1ZVxuICAgIHRoaXMub3V0cHV0RW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2RpbmdcbiAgICB0aGlzLnRvbmVNYXBwaW5nID0gVEhSRUUuQUNFU0ZpbG1pY1RvbmVNYXBwaW5nXG4gICAgdGhpcy5nYW1tYU91dHB1dCA9IHRydWVcbiAgICB0aGlzLmdhbW1hRmFjdG9yID0gMi4yXG4gICAgdGhpcy5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWVcbiAgICB0aGlzLnNoYWRvd01hcC5zaGFkb3dNYXBFbmFibGVkID0gdHJ1ZVxuICAgIHRoaXMuc2hhZG93TWFwLnNoYWRvd01hcFNvZnQgPSB0cnVlXG4gICAgdGhpcy5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNvZnRTaGFkb3dNYXBcblxuICAgIHRoaXMuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgIHRoaXMuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbylcbiAgfVxufSIsImltcG9ydCBUSFJFRSBmcm9tICcuL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBnZXRUaW1lc3RhbXAsIGdldFBsU2NyZWVuVG9PYmplY3QgfSBmcm9tICdAL2NvbW1vbi91dGlscydcbmltcG9ydCB7IGFuaW1hdGlvbiwgY2xlYXJBbmltYXRpb24gfSBmcm9tICdAL2NvbW1vbi9hbmltYXRpb24nXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xze1xuICBjb25zdHJ1Y3RvcihjYW1lcmEpIHtcbiAgICB0aGlzLmNhbWVyYSA9IGNhbWVyYVxuICAgIHRoaXMuY2FtZXJhUG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpXG4gICAgdGhpcy5zdGFydFRpbWUgPSAwXG4gICAgdGhpcy5lbmRUaW1lID0gMFxuICB9XG4gIHRvdWNoc3RhcnQoZSkge1xuICAgIGNvbnN0IHRvdWNoZTEgPSBlLnRvdWNoZXNbMF1cbiAgICBjb25zdCB0b3VjaGUyID0gZS50b3VjaGVzWzFdXG4gICAgdGhpcy50b3VjaGVzID0ge1xuICAgICAgeDE6IHRvdWNoZTEucGFnZVgsXG4gICAgICB5MTogdG91Y2hlMS5wYWdlWSxcbiAgICAgIHgyOiB0b3VjaGUyLnBhZ2VYLFxuICAgICAgeTI6IHRvdWNoZTIucGFnZVksXG4gICAgfVxuICAgIHRoaXMuc3RhcnRUaW1lID0gZ2V0VGltZXN0YW1wKClcbiAgICB0aGlzLmlzTW92ZSA9IGZhbHNlXG4gICAgdGhpcy5jYW1lcmFQb3NpdGlvbi5jb3B5KHRoaXMuY2FtZXJhLnBvc2l0aW9uKVxuICAgIHRoaXMuY2FubmVsU2Nyb2xsVG8oKVxuICB9XG4gIHRvdWNobW92ZShlKSB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gZ2V0VGltZXN0YW1wKClcbiAgICBjb25zdCB0b3VjaGUxID0gZS50b3VjaGVzWzBdXG4gICAgY29uc3QgdG91Y2hlMiA9IGUudG91Y2hlc1sxXVxuICAgIGNvbnN0IHRvdWNoZXMgPSB7XG4gICAgICB4MTogdG91Y2hlMS5wYWdlWCxcbiAgICAgIHkxOiB0b3VjaGUxLnBhZ2VZLFxuICAgICAgeDI6IHRvdWNoZTIucGFnZVgsXG4gICAgICB5MjogdG91Y2hlMi5wYWdlWSxcbiAgICB9XG4gICAgaWYgKHRoaXMudG91Y2hJc01vdmUodG91Y2hlcywgdGhpcy50b3VjaGVzKSkge1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gZ2V0UGxTY3JlZW5Ub09iamVjdCh0aGlzLnRvdWNoZXMueDEsIHRoaXMudG91Y2hlcy55MSwgdG91Y2hlcy54MSwgdG91Y2hlcy55MSlcbiAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggLT0gZGlyZWN0aW9uLnhcbiAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogLT0gZGlyZWN0aW9uLnpcbiAgICAgIGlmICh0aW1lc3RhbXAgLSB0aGlzLnN0YXJ0VGltZSA8IDMwMCkge1xuICAgICAgICAvLyB0aGlzLmlzTW92ZSA9IHRydWVcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB0aW1lc3RhbXBcbiAgICAgICAgLy8gdGhpcy5jYW1lcmFQb3NpdGlvbi5jb3B5KHRoaXMuY2FtZXJhLnBvc2l0aW9uKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgem9vbSA9IHRoaXMuZ2V0RGlzdGFuY2UoXG4gICAgICAgIHsgeDogdG91Y2hlcy54MSwgeTogdG91Y2hlcy55MSB9LFxuICAgICAgICB7IHg6IHRvdWNoZXMueDIsIHk6IHRvdWNoZXMueTIgfSlcbiAgICAgICAgLyB0aGlzLmdldERpc3RhbmNlKFxuICAgICAgICB7IHg6IHRoaXMudG91Y2hlcy54MSwgeTogdGhpcy50b3VjaGVzLnkxIH0sXG4gICAgICAgIHsgeDogdGhpcy50b3VjaGVzLngyLCB5OiB0aGlzLnRvdWNoZXMueTIgfVxuICAgICAgKVxuICAgICAgY29uc3QgYmwgPSAxIC0gem9vbVxuICAgICAgY29uc3QgbWluWm9vbSA9IDJcbiAgICAgIGNvbnN0IG1heFpvb20gPSAxMFxuICAgICAgaWYgKGJsID4gMCkge1xuICAgICAgICB6b29tID0gdGhpcy5jYW1lcmEuem9vbSAqIDAuOTVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHpvb20gPSB0aGlzLmNhbWVyYS56b29tIC8gMC45NVxuICAgICAgfVxuICAgICAgdGhpcy5jYW1lcmEuem9vbSA9IE1hdGgubWF4KG1pblpvb20sIE1hdGgubWluKG1heFpvb20sIHpvb20pKVxuICAgICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG4gICAgfVxuICAgIHRoaXMudG91Y2hlcyA9IHRvdWNoZXNcbiAgfVxuICB0b3VjaGVuZChlLCBldmVudElkcykge1xuICAgIHRoaXMuZW5kVGltZSA9IGdldFRpbWVzdGFtcCgpXG4gICAgaWYgKHRoaXMuaXNNb3ZlKSB7XG4gICAgICBjb25zdCBkZWNlbGVyYXRpb24gPSAwLjJcbiAgICAgIGxldCBkdXJhdGlvbiA9IHRoaXMuZW5kVGltZSAtIHRoaXMuc3RhcnRUaW1lXG4gICAgICBsZXQgZGlzdGFuY2VYID0gdGhpcy5jYW1lcmEucG9zaXRpb24ueCAtIHRoaXMuY2FtZXJhUG9zaXRpb24ueFxuICAgICAgbGV0IGRpc3RhbmNlWiA9IHRoaXMuY2FtZXJhLnBvc2l0aW9uLnogLSB0aGlzLmNhbWVyYVBvc2l0aW9uLnpcbiAgICAgIGxldCBzcGVlZFggPSBNYXRoLmFicyhkaXN0YW5jZVgpIC8gZHVyYXRpb25cbiAgICAgIGxldCBzcGVlZFogPSBNYXRoLmFicyhkaXN0YW5jZVopIC8gZHVyYXRpb25cbiAgICAgIGxldCBkZXN0aW5hdGlvblggPSB0aGlzLmNhbWVyYS5wb3NpdGlvbi54ICsgc3BlZWRYIC8gZGVjZWxlcmF0aW9uICogKGRpc3RhbmNlWCA8IDAgPyAtMSA6IDEpXG4gICAgICBsZXQgZGVzdGluYXRpb25aID0gdGhpcy5jYW1lcmEucG9zaXRpb24ueiArIHNwZWVkWiAvIGRlY2VsZXJhdGlvbiAqIChkaXN0YW5jZVogPCAwID8gLTEgOiAxKVxuICAgICAgdGhpcy5zY3JvbGxUbyhkZXN0aW5hdGlvblgsIGRlc3RpbmF0aW9uWilcbiAgICB9XG4gIH1cbiAgZ2V0RGlzdGFuY2UodG91Y2hlcywgdG91Y2hlczIpIHtcbiAgICByZXR1cm4gTWF0aC5oeXBvdCh0b3VjaGVzMi54IC0gdG91Y2hlcy54LCB0b3VjaGVzMi55IC0gdG91Y2hlcy55KVxuICB9XG4gIHRvdWNoSXNNb3ZlKHRvdWNoZXMsIHRvdWNoZXMyKSB7XG4gICAgY29uc3QgeDEgPSB0b3VjaGVzLngxIC0gdG91Y2hlczIueDFcbiAgICBjb25zdCB4MiA9IHRvdWNoZXMueDIgLSB0b3VjaGVzMi54MlxuICAgIGNvbnN0IHkxID0gdG91Y2hlcy55MSAtIHRvdWNoZXMyLnkxXG4gICAgY29uc3QgeTIgPSB0b3VjaGVzLnkyIC0gdG91Y2hlczIueTJcbiAgICBpZiAoXG4gICAgICAoeDEgPiAwICYmIHgyID4gMCkgfHxcbiAgICAgICh4MSA8IDAgJiYgeDIgPCAwKSB8fFxuICAgICAgKHkxID4gMCAmJiB5MiA+IDApIHx8XG4gICAgICAoeTEgPCAwICYmIHkyIDwgMClcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHNjcm9sbFRvKHgsIHopIHtcbiAgICBjb25zdCBzdGFydFggPSB0aGlzLmNhbWVyYS5wb3NpdGlvbi54XG4gICAgY29uc3Qgc3RhcnRaID0gdGhpcy5jYW1lcmEucG9zaXRpb24uelxuICAgIGNvbnN0IG9mZnNldFggPSB4IC0gc3RhcnRYXG4gICAgY29uc3Qgb2Zmc2V0WiA9IHogLSBzdGFydFpcbiAgICB0aGlzLnNjcm9sbGVyID0gYW5pbWF0aW9uKDAsIDEsIDUwMCwgJ1F1YWQuZWFzZU91dCcsIHYgPT4ge1xuICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IHN0YXJ0WCArIHYgKiBvZmZzZXRYXG4gICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gc3RhcnRaICsgdiAqIG9mZnNldFpcbiAgICB9KVxuICB9XG4gIGNhbm5lbFNjcm9sbFRvKCkge1xuICAgIGlmICh0aGlzLnNjcm9sbGVyKSB7XG4gICAgICBjbGVhckFuaW1hdGlvbih0aGlzLnNjcm9sbGVyKVxuICAgICAgdGhpcy5zY3JvbGxlciA9IG51bGxcbiAgICB9XG4gIH1cbn0iLCIvKipcbiAqIEZ1bGwtc2NyZWVuIHRleHR1cmVkIHF1YWQgc2hhZGVyXG4gKi9cblxudmFyIENvcHlTaGFkZXIgPSB7XG5cblx0dW5pZm9ybXM6IHtcblxuXHRcdCd0RGlmZnVzZSc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHQnb3BhY2l0eSc6IHsgdmFsdWU6IDEuMCB9XG5cblx0fSxcblxuXHR2ZXJ0ZXhTaGFkZXI6IC8qIGdsc2wgKi9gXG5cblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHR2VXYgPSB1djtcblx0XHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcblxuXHRcdH1gLFxuXG5cdGZyYWdtZW50U2hhZGVyOiAvKiBnbHNsICovYFxuXG5cdFx0dW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xuXG5cdFx0dW5pZm9ybSBzYW1wbGVyMkQgdERpZmZ1c2U7XG5cblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHR2ZWM0IHRleGVsID0gdGV4dHVyZTJEKCB0RGlmZnVzZSwgdlV2ICk7XG5cdFx0XHRnbF9GcmFnQ29sb3IgPSBvcGFjaXR5ICogdGV4ZWw7XG5cblx0XHR9YFxuXG59O1xuXG5leHBvcnQgeyBDb3B5U2hhZGVyIH07XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5cbmNvbnN0IHtcblx0QnVmZmVyR2VvbWV0cnksXG5cdEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsXG5cdE9ydGhvZ3JhcGhpY0NhbWVyYSxcblx0TWVzaFxufSA9IFRIUkVFXG5cbmNsYXNzIFBhc3Mge1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXG5cdFx0Ly8gaWYgc2V0IHRvIHRydWUsIHRoZSBwYXNzIGlzIHByb2Nlc3NlZCBieSB0aGUgY29tcG9zZXJcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdFx0Ly8gaWYgc2V0IHRvIHRydWUsIHRoZSBwYXNzIGluZGljYXRlcyB0byBzd2FwIHJlYWQgYW5kIHdyaXRlIGJ1ZmZlciBhZnRlciByZW5kZXJpbmdcblx0XHR0aGlzLm5lZWRzU3dhcCA9IHRydWU7XG5cblx0XHQvLyBpZiBzZXQgdG8gdHJ1ZSwgdGhlIHBhc3MgY2xlYXJzIGl0cyBidWZmZXIgYmVmb3JlIHJlbmRlcmluZ1xuXHRcdHRoaXMuY2xlYXIgPSBmYWxzZTtcblxuXHRcdC8vIGlmIHNldCB0byB0cnVlLCB0aGUgcmVzdWx0IG9mIHRoZSBwYXNzIGlzIHJlbmRlcmVkIHRvIHNjcmVlbi4gVGhpcyBpcyBzZXQgYXV0b21hdGljYWxseSBieSBFZmZlY3RDb21wb3Nlci5cblx0XHR0aGlzLnJlbmRlclRvU2NyZWVuID0gZmFsc2U7XG5cblx0fVxuXG5cdHNldFNpemUoIC8qIHdpZHRoLCBoZWlnaHQgKi8gKSB7fVxuXG5cdHJlbmRlciggLyogcmVuZGVyZXIsIHdyaXRlQnVmZmVyLCByZWFkQnVmZmVyLCBkZWx0YVRpbWUsIG1hc2tBY3RpdmUgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUGFzczogLnJlbmRlcigpIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gZGVyaXZlZCBwYXNzLicgKTtcblxuXHR9XG5cbn1cblxuLy8gSGVscGVyIGZvciBwYXNzZXMgdGhhdCBuZWVkIHRvIGZpbGwgdGhlIHZpZXdwb3J0IHdpdGggYSBzaW5nbGUgcXVhZC5cblxuY29uc3QgX2NhbWVyYSA9IG5ldyBPcnRob2dyYXBoaWNDYW1lcmEoIC0gMSwgMSwgMSwgLSAxLCAwLCAxICk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8yMTM1OFxuXG5jb25zdCBfZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcbl9nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIC0gMSwgMywgMCwgLSAxLCAtIDEsIDAsIDMsIC0gMSwgMCBdLCAzICkgKTtcbl9nZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbIDAsIDIsIDAsIDAsIDIsIDAgXSwgMiApICk7XG5cbmNsYXNzIEZ1bGxTY3JlZW5RdWFkIHtcblxuXHRjb25zdHJ1Y3RvciggbWF0ZXJpYWwgKSB7XG5cblx0XHR0aGlzLl9tZXNoID0gbmV3IE1lc2goIF9nZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblxuXHRcdHRoaXMuX21lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyICkge1xuXG5cdFx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLl9tZXNoLCBfY2FtZXJhICk7XG5cblx0fVxuXG5cdGdldCBtYXRlcmlhbCgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9tZXNoLm1hdGVyaWFsO1xuXG5cdH1cblxuXHRzZXQgbWF0ZXJpYWwoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5fbWVzaC5tYXRlcmlhbCA9IHZhbHVlO1xuXG5cdH1cblxufVxuXG5leHBvcnQgeyBQYXNzLCBGdWxsU2NyZWVuUXVhZCB9O1xuIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBUSFJFRSB9IGZyb20gJ0AvYmFzZS9saWJzL1RocmVlJ1xuaW1wb3J0IHsgUGFzcywgRnVsbFNjcmVlblF1YWQgfSBmcm9tICcuL1Bhc3MuanMnO1xuXG5jb25zdCB7XG5cdFNoYWRlck1hdGVyaWFsLFxuXHRVbmlmb3Jtc1V0aWxzXG59ID0gVEhSRUVcblxuY2xhc3MgU2hhZGVyUGFzcyBleHRlbmRzIFBhc3Mge1xuXG5cdGNvbnN0cnVjdG9yKCBzaGFkZXIsIHRleHR1cmVJRCApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnRleHR1cmVJRCA9ICggdGV4dHVyZUlEICE9PSB1bmRlZmluZWQgKSA/IHRleHR1cmVJRCA6ICd0RGlmZnVzZSc7XG5cblx0XHRpZiAoIHNoYWRlciBpbnN0YW5jZW9mIFNoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHR0aGlzLnVuaWZvcm1zID0gc2hhZGVyLnVuaWZvcm1zO1xuXG5cdFx0XHR0aGlzLm1hdGVyaWFsID0gc2hhZGVyO1xuXG5cdFx0fSBlbHNlIGlmICggc2hhZGVyICkge1xuXG5cdFx0XHR0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICk7XG5cblx0XHRcdHRoaXMubWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdFx0XHRkZWZpbmVzOiBPYmplY3QuYXNzaWduKCB7fSwgc2hhZGVyLmRlZmluZXMgKSxcblx0XHRcdFx0dW5pZm9ybXM6IHRoaXMudW5pZm9ybXMsXG5cdFx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlclxuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmZzUXVhZCA9IG5ldyBGdWxsU2NyZWVuUXVhZCggdGhpcy5tYXRlcmlhbCApO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciAvKiwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0aWYgKCB0aGlzLnVuaWZvcm1zWyB0aGlzLnRleHR1cmVJRCBdICkge1xuXG5cdFx0XHR0aGlzLnVuaWZvcm1zWyB0aGlzLnRleHR1cmVJRCBdLnZhbHVlID0gcmVhZEJ1ZmZlci50ZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuXG5cdFx0aWYgKCB0aGlzLnJlbmRlclRvU2NyZWVuICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggd3JpdGVCdWZmZXIgKTtcblx0XHRcdC8vIFRPRE86IEF2b2lkIHVzaW5nIGF1dG9DbGVhciBwcm9wZXJ0aWVzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzE1NTcxI2lzc3VlY29tbWVudC00NjU2Njk2MDBcblx0XHRcdGlmICggdGhpcy5jbGVhciApIHJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgU2hhZGVyUGFzcyB9O1xuIiwiaW1wb3J0IHsgUGFzcyB9IGZyb20gJy4vUGFzcy5qcyc7XG5cbmNsYXNzIE1hc2tQYXNzIGV4dGVuZHMgUGFzcyB7XG5cblx0Y29uc3RydWN0b3IoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5zY2VuZSA9IHNjZW5lO1xuXHRcdHRoaXMuY2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0dGhpcy5jbGVhciA9IHRydWU7XG5cdFx0dGhpcy5uZWVkc1N3YXAgPSBmYWxzZTtcblxuXHRcdHRoaXMuaW52ZXJzZSA9IGZhbHNlO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciAvKiwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0Y29uc3QgY29udGV4dCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcblx0XHRjb25zdCBzdGF0ZSA9IHJlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gZG9uJ3QgdXBkYXRlIGNvbG9yIG9yIGRlcHRoXG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldE1hc2soIGZhbHNlICk7XG5cdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCBmYWxzZSApO1xuXG5cdFx0Ly8gbG9jayBidWZmZXJzXG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldExvY2tlZCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TG9ja2VkKCB0cnVlICk7XG5cblx0XHQvLyBzZXQgdXAgc3RlbmNpbFxuXG5cdFx0bGV0IHdyaXRlVmFsdWUsIGNsZWFyVmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaW52ZXJzZSApIHtcblxuXHRcdFx0d3JpdGVWYWx1ZSA9IDA7XG5cdFx0XHRjbGVhclZhbHVlID0gMTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHdyaXRlVmFsdWUgPSAxO1xuXHRcdFx0Y2xlYXJWYWx1ZSA9IDA7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5idWZmZXJzLnN0ZW5jaWwuc2V0VGVzdCggdHJ1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRPcCggY29udGV4dC5SRVBMQUNFLCBjb250ZXh0LlJFUExBQ0UsIGNvbnRleHQuUkVQTEFDRSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRGdW5jKCBjb250ZXh0LkFMV0FZUywgd3JpdGVWYWx1ZSwgMHhmZmZmZmZmZiApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRDbGVhciggY2xlYXJWYWx1ZSApO1xuXHRcdHN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRMb2NrZWQoIHRydWUgKTtcblxuXHRcdC8vIGRyYXcgaW50byB0aGUgc3RlbmNpbCBidWZmZXJcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVhZEJ1ZmZlciApO1xuXHRcdGlmICggdGhpcy5jbGVhciApIHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSApO1xuXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB3cml0ZUJ1ZmZlciApO1xuXHRcdGlmICggdGhpcy5jbGVhciApIHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCB0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSApO1xuXG5cdFx0Ly8gdW5sb2NrIGNvbG9yIGFuZCBkZXB0aCBidWZmZXIgZm9yIHN1YnNlcXVlbnQgcmVuZGVyaW5nXG5cblx0XHRzdGF0ZS5idWZmZXJzLmNvbG9yLnNldExvY2tlZCggZmFsc2UgKTtcblx0XHRzdGF0ZS5idWZmZXJzLmRlcHRoLnNldExvY2tlZCggZmFsc2UgKTtcblxuXHRcdC8vIG9ubHkgcmVuZGVyIHdoZXJlIHN0ZW5jaWwgaXMgc2V0IHRvIDFcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRMb2NrZWQoIGZhbHNlICk7XG5cdFx0c3RhdGUuYnVmZmVycy5zdGVuY2lsLnNldEZ1bmMoIGNvbnRleHQuRVFVQUwsIDEsIDB4ZmZmZmZmZmYgKTsgLy8gZHJhdyBpZiA9PSAxXG5cdFx0c3RhdGUuYnVmZmVycy5zdGVuY2lsLnNldE9wKCBjb250ZXh0LktFRVAsIGNvbnRleHQuS0VFUCwgY29udGV4dC5LRUVQICk7XG5cdFx0c3RhdGUuYnVmZmVycy5zdGVuY2lsLnNldExvY2tlZCggdHJ1ZSApO1xuXG5cdH1cblxufVxuXG5jbGFzcyBDbGVhck1hc2tQYXNzIGV4dGVuZHMgUGFzcyB7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cblx0XHRzdXBlcigpO1xuXG5cdFx0dGhpcy5uZWVkc1N3YXAgPSBmYWxzZTtcblxuXHR9XG5cblx0cmVuZGVyKCByZW5kZXJlciAvKiwgd3JpdGVCdWZmZXIsIHJlYWRCdWZmZXIsIGRlbHRhVGltZSwgbWFza0FjdGl2ZSAqLyApIHtcblxuXHRcdHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRMb2NrZWQoIGZhbHNlICk7XG5cdFx0cmVuZGVyZXIuc3RhdGUuYnVmZmVycy5zdGVuY2lsLnNldFRlc3QoIGZhbHNlICk7XG5cblx0fVxuXG59XG5cbmV4cG9ydCB7IE1hc2tQYXNzLCBDbGVhck1hc2tQYXNzIH07XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBDb3B5U2hhZGVyIH0gZnJvbSAnLi9Db3B5U2hhZGVyLmpzJztcbmltcG9ydCB7IFNoYWRlclBhc3MgfSBmcm9tICcuL1NoYWRlclBhc3MuanMnO1xuaW1wb3J0IHsgTWFza1Bhc3MsIENsZWFyTWFza1Bhc3MgfSBmcm9tICcuL01hc2tQYXNzLmpzJ1xuXG5jb25zdCB7XG5cdEJ1ZmZlckdlb21ldHJ5LFxuXHRDbG9jayxcblx0RmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSxcblx0TGluZWFyRmlsdGVyLFxuXHRNZXNoLFxuXHRPcnRob2dyYXBoaWNDYW1lcmEsXG5cdFJHQkFGb3JtYXQsXG5cdFZlY3RvcjIsXG5cdFdlYkdMUmVuZGVyVGFyZ2V0XG59ID0gVEhSRUVcblxuY2xhc3MgRWZmZWN0Q29tcG9zZXIge1xuXG5cdGNvbnN0cnVjdG9yKCByZW5kZXJlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHtcblx0XHRcdFx0bWluRmlsdGVyOiBMaW5lYXJGaWx0ZXIsXG5cdFx0XHRcdG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLFxuXHRcdFx0XHRmb3JtYXQ6IFJHQkFGb3JtYXRcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IHNpemUgPSByZW5kZXJlci5nZXRTaXplKCBuZXcgVmVjdG9yMigpICk7XG5cdFx0XHR0aGlzLl9waXhlbFJhdGlvID0gcmVuZGVyZXIuZ2V0UGl4ZWxSYXRpbygpO1xuXHRcdFx0dGhpcy5fd2lkdGggPSBzaXplLndpZHRoO1xuXHRcdFx0dGhpcy5faGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cblx0XHRcdHJlbmRlclRhcmdldCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvLCB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvLCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lID0gJ0VmZmVjdENvbXBvc2VyLnJ0MSc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLl9waXhlbFJhdGlvID0gMTtcblx0XHRcdHRoaXMuX3dpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0dGhpcy5faGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0MSA9IHJlbmRlclRhcmdldDtcblx0XHR0aGlzLnJlbmRlclRhcmdldDIgPSByZW5kZXJUYXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldDIudGV4dHVyZS5uYW1lID0gJ0VmZmVjdENvbXBvc2VyLnJ0Mic7XG5cblx0XHR0aGlzLndyaXRlQnVmZmVyID0gdGhpcy5yZW5kZXJUYXJnZXQxO1xuXHRcdHRoaXMucmVhZEJ1ZmZlciA9IHRoaXMucmVuZGVyVGFyZ2V0MjtcblxuXHRcdHRoaXMucmVuZGVyVG9TY3JlZW4gPSB0cnVlO1xuXG5cdFx0dGhpcy5wYXNzZXMgPSBbXTtcblxuXHRcdC8vIGRlcGVuZGVuY2llc1xuXG5cdFx0aWYgKCBDb3B5U2hhZGVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FZmZlY3RDb21wb3NlciByZWxpZXMgb24gQ29weVNoYWRlcicgKTtcblxuXHRcdH1cblxuXHRcdGlmICggU2hhZGVyUGFzcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRWZmZWN0Q29tcG9zZXIgcmVsaWVzIG9uIFNoYWRlclBhc3MnICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNvcHlQYXNzID0gbmV3IFNoYWRlclBhc3MoIENvcHlTaGFkZXIgKTtcblxuXHRcdHRoaXMuY2xvY2sgPSBuZXcgQ2xvY2soKTtcblxuXHR9XG5cblx0c3dhcEJ1ZmZlcnMoKSB7XG5cblx0XHRjb25zdCB0bXAgPSB0aGlzLnJlYWRCdWZmZXI7XG5cdFx0dGhpcy5yZWFkQnVmZmVyID0gdGhpcy53cml0ZUJ1ZmZlcjtcblx0XHR0aGlzLndyaXRlQnVmZmVyID0gdG1wO1xuXG5cdH1cblxuXHRhZGRQYXNzKCBwYXNzICkge1xuXG5cdFx0dGhpcy5wYXNzZXMucHVzaCggcGFzcyApO1xuXHRcdHBhc3Muc2V0U2l6ZSggdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvLCB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvICk7XG5cblx0fVxuXG5cdGluc2VydFBhc3MoIHBhc3MsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5wYXNzZXMuc3BsaWNlKCBpbmRleCwgMCwgcGFzcyApO1xuXHRcdHBhc3Muc2V0U2l6ZSggdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvLCB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvICk7XG5cblx0fVxuXG5cdHJlbW92ZVBhc3MoIHBhc3MgKSB7XG5cblx0XHRjb25zdCBpbmRleCA9IHRoaXMucGFzc2VzLmluZGV4T2YoIHBhc3MgKTtcblxuXHRcdGlmICggaW5kZXggIT09IC0gMSApIHtcblxuXHRcdFx0dGhpcy5wYXNzZXMuc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRpc0xhc3RFbmFibGVkUGFzcyggcGFzc0luZGV4ICkge1xuXG5cdFx0Zm9yICggbGV0IGkgPSBwYXNzSW5kZXggKyAxOyBpIDwgdGhpcy5wYXNzZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHRoaXMucGFzc2VzWyBpIF0uZW5hYmxlZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH1cblxuXHRyZW5kZXIoIGRlbHRhVGltZSApIHtcblxuXHRcdC8vIGRlbHRhVGltZSB2YWx1ZSBpcyBpbiBzZWNvbmRzXG5cblx0XHRpZiAoIGRlbHRhVGltZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRkZWx0YVRpbWUgPSB0aGlzLmNsb2NrLmdldERlbHRhKCk7XG5cblx0XHR9XG5cblx0XHRjb25zdCBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHRcdGxldCBtYXNrQWN0aXZlID0gZmFsc2U7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDAsIGlsID0gdGhpcy5wYXNzZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHBhc3MgPSB0aGlzLnBhc3Nlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHBhc3MuZW5hYmxlZCA9PT0gZmFsc2UgKSBjb250aW51ZTtcblxuXHRcdFx0cGFzcy5yZW5kZXJUb1NjcmVlbiA9ICggdGhpcy5yZW5kZXJUb1NjcmVlbiAmJiB0aGlzLmlzTGFzdEVuYWJsZWRQYXNzKCBpICkgKTtcblx0XHRcdHBhc3MucmVuZGVyKCB0aGlzLnJlbmRlcmVyLCB0aGlzLndyaXRlQnVmZmVyLCB0aGlzLnJlYWRCdWZmZXIsIGRlbHRhVGltZSwgbWFza0FjdGl2ZSApO1xuXG5cdFx0XHRpZiAoIHBhc3MubmVlZHNTd2FwICkge1xuXG5cdFx0XHRcdGlmICggbWFza0FjdGl2ZSApIHtcblxuXHRcdFx0XHRcdGNvbnN0IGNvbnRleHQgPSB0aGlzLnJlbmRlcmVyLmdldENvbnRleHQoKTtcblx0XHRcdFx0XHRjb25zdCBzdGVuY2lsID0gdGhpcy5yZW5kZXJlci5zdGF0ZS5idWZmZXJzLnN0ZW5jaWw7XG5cblx0XHRcdFx0XHQvL2NvbnRleHQuc3RlbmNpbEZ1bmMoIGNvbnRleHQuTk9URVFVQUwsIDEsIDB4ZmZmZmZmZmYgKTtcblx0XHRcdFx0XHRzdGVuY2lsLnNldEZ1bmMoIGNvbnRleHQuTk9URVFVQUwsIDEsIDB4ZmZmZmZmZmYgKTtcblxuXHRcdFx0XHRcdHRoaXMuY29weVBhc3MucmVuZGVyKCB0aGlzLnJlbmRlcmVyLCB0aGlzLndyaXRlQnVmZmVyLCB0aGlzLnJlYWRCdWZmZXIsIGRlbHRhVGltZSApO1xuXG5cdFx0XHRcdFx0Ly9jb250ZXh0LnN0ZW5jaWxGdW5jKCBjb250ZXh0LkVRVUFMLCAxLCAweGZmZmZmZmZmICk7XG5cdFx0XHRcdFx0c3RlbmNpbC5zZXRGdW5jKCBjb250ZXh0LkVRVUFMLCAxLCAweGZmZmZmZmZmICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuc3dhcEJ1ZmZlcnMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIE1hc2tQYXNzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBwYXNzIGluc3RhbmNlb2YgTWFza1Bhc3MgKSB7XG5cblx0XHRcdFx0XHRtYXNrQWN0aXZlID0gdHJ1ZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBwYXNzIGluc3RhbmNlb2YgQ2xlYXJNYXNrUGFzcyApIHtcblxuXHRcdFx0XHRcdG1hc2tBY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMucmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdHJlc2V0KCByZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zdCBzaXplID0gdGhpcy5yZW5kZXJlci5nZXRTaXplKCBuZXcgVmVjdG9yMigpICk7XG5cdFx0XHR0aGlzLl9waXhlbFJhdGlvID0gdGhpcy5yZW5kZXJlci5nZXRQaXhlbFJhdGlvKCk7XG5cdFx0XHR0aGlzLl93aWR0aCA9IHNpemUud2lkdGg7XG5cdFx0XHR0aGlzLl9oZWlnaHQgPSBzaXplLmhlaWdodDtcblxuXHRcdFx0cmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQxLmNsb25lKCk7XG5cdFx0XHRyZW5kZXJUYXJnZXQuc2V0U2l6ZSggdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvLCB0aGlzLl9oZWlnaHQgKiB0aGlzLl9waXhlbFJhdGlvICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldDEuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Mi5kaXNwb3NlKCk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXQxID0gcmVuZGVyVGFyZ2V0O1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0MiA9IHJlbmRlclRhcmdldC5jbG9uZSgpO1xuXG5cdFx0dGhpcy53cml0ZUJ1ZmZlciA9IHRoaXMucmVuZGVyVGFyZ2V0MTtcblx0XHR0aGlzLnJlYWRCdWZmZXIgPSB0aGlzLnJlbmRlclRhcmdldDI7XG5cblx0fVxuXG5cdHNldFNpemUoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLl93aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuXHRcdGNvbnN0IGVmZmVjdGl2ZVdpZHRoID0gdGhpcy5fd2lkdGggKiB0aGlzLl9waXhlbFJhdGlvO1xuXHRcdGNvbnN0IGVmZmVjdGl2ZUhlaWdodCA9IHRoaXMuX2hlaWdodCAqIHRoaXMuX3BpeGVsUmF0aW87XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldDEuc2V0U2l6ZSggZWZmZWN0aXZlV2lkdGgsIGVmZmVjdGl2ZUhlaWdodCApO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Mi5zZXRTaXplKCBlZmZlY3RpdmVXaWR0aCwgZWZmZWN0aXZlSGVpZ2h0ICk7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnBhc3Nlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMucGFzc2VzWyBpIF0uc2V0U2l6ZSggZWZmZWN0aXZlV2lkdGgsIGVmZmVjdGl2ZUhlaWdodCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRzZXRQaXhlbFJhdGlvKCBwaXhlbFJhdGlvICkge1xuXG5cdFx0dGhpcy5fcGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG5cblx0XHR0aGlzLnNldFNpemUoIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQgKTtcblxuXHR9XG5cbn1cblxuXG5jbGFzcyBQYXNzIHtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblxuXHRcdC8vIGlmIHNldCB0byB0cnVlLCB0aGUgcGFzcyBpcyBwcm9jZXNzZWQgYnkgdGhlIGNvbXBvc2VyXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdC8vIGlmIHNldCB0byB0cnVlLCB0aGUgcGFzcyBpbmRpY2F0ZXMgdG8gc3dhcCByZWFkIGFuZCB3cml0ZSBidWZmZXIgYWZ0ZXIgcmVuZGVyaW5nXG5cdFx0dGhpcy5uZWVkc1N3YXAgPSB0cnVlO1xuXG5cdFx0Ly8gaWYgc2V0IHRvIHRydWUsIHRoZSBwYXNzIGNsZWFycyBpdHMgYnVmZmVyIGJlZm9yZSByZW5kZXJpbmdcblx0XHR0aGlzLmNsZWFyID0gZmFsc2U7XG5cblx0XHQvLyBpZiBzZXQgdG8gdHJ1ZSwgdGhlIHJlc3VsdCBvZiB0aGUgcGFzcyBpcyByZW5kZXJlZCB0byBzY3JlZW4uIFRoaXMgaXMgc2V0IGF1dG9tYXRpY2FsbHkgYnkgRWZmZWN0Q29tcG9zZXIuXG5cdFx0dGhpcy5yZW5kZXJUb1NjcmVlbiA9IGZhbHNlO1xuXG5cdH1cblxuXHRzZXRTaXplKCAvKiB3aWR0aCwgaGVpZ2h0ICovICkge31cblxuXHRyZW5kZXIoIC8qIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlBhc3M6IC5yZW5kZXIoKSBtdXN0IGJlIGltcGxlbWVudGVkIGluIGRlcml2ZWQgcGFzcy4nICk7XG5cblx0fVxuXG59XG5cbi8vIEhlbHBlciBmb3IgcGFzc2VzIHRoYXQgbmVlZCB0byBmaWxsIHRoZSB2aWV3cG9ydCB3aXRoIGEgc2luZ2xlIHF1YWQuXG5cbmNvbnN0IF9jYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCAtIDEsIDEsIDEsIC0gMSwgMCwgMSApO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjEzNThcblxuY29uc3QgX2dlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5fZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAtIDEsIDMsIDAsIC0gMSwgLSAxLCAwLCAzLCAtIDEsIDAgXSwgMyApICk7XG5fZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggWyAwLCAyLCAwLCAwLCAyLCAwIF0sIDIgKSApO1xuXG5jbGFzcyBGdWxsU2NyZWVuUXVhZCB7XG5cblx0Y29uc3RydWN0b3IoIG1hdGVyaWFsICkge1xuXG5cdFx0dGhpcy5fbWVzaCA9IG5ldyBNZXNoKCBfZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLl9tZXNoLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblxuXHR9XG5cblx0cmVuZGVyKCByZW5kZXJlciApIHtcblxuXHRcdHJlbmRlcmVyLnJlbmRlciggdGhpcy5fbWVzaCwgX2NhbWVyYSApO1xuXG5cdH1cblxuXHRnZXQgbWF0ZXJpYWwoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fbWVzaC5tYXRlcmlhbDtcblxuXHR9XG5cblx0c2V0IG1hdGVyaWFsKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMuX21lc2gubWF0ZXJpYWwgPSB2YWx1ZTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgRWZmZWN0Q29tcG9zZXIsIFBhc3MsIEZ1bGxTY3JlZW5RdWFkIH07XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBQYXNzLCBGdWxsU2NyZWVuUXVhZCB9IGZyb20gJy4vUGFzcy5qcyc7XG5pbXBvcnQgeyBDb3B5U2hhZGVyIH0gZnJvbSAnLi9Db3B5U2hhZGVyLmpzJztcblxuY29uc3Qge1xuXHRBZGRpdGl2ZUJsZW5kaW5nLFxuXHRDb2xvcixcblx0RG91YmxlU2lkZSxcblx0TGluZWFyRmlsdGVyLFxuXHRNYXRyaXg0LFxuXHRNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWwsXG5cdE5vQmxlbmRpbmcsXG5cdFJHQkFEZXB0aFBhY2tpbmcsXG5cdFJHQkFGb3JtYXQsXG5cdFNoYWRlck1hdGVyaWFsLFxuXHRVbmlmb3Jtc1V0aWxzLFxuXHRWZWN0b3IyLFxuXHRWZWN0b3IzLFxuXHRXZWJHTFJlbmRlclRhcmdldFxufSA9IFRIUkVFXG5cbmNsYXNzIE91dGxpbmVQYXNzIGV4dGVuZHMgUGFzcyB7XG5cblx0Y29uc3RydWN0b3IoIHJlc29sdXRpb24sIHNjZW5lLCBjYW1lcmEsIHNlbGVjdGVkT2JqZWN0cyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnJlbmRlclNjZW5lID0gc2NlbmU7XG5cdFx0dGhpcy5yZW5kZXJDYW1lcmEgPSBjYW1lcmE7XG5cdFx0dGhpcy5zZWxlY3RlZE9iamVjdHMgPSBzZWxlY3RlZE9iamVjdHMgIT09IHVuZGVmaW5lZCA/IHNlbGVjdGVkT2JqZWN0cyA6IFtdO1xuXHRcdHRoaXMudmlzaWJsZUVkZ2VDb2xvciA9IG5ldyBDb2xvciggMSwgMSwgMSApO1xuXHRcdHRoaXMuaGlkZGVuRWRnZUNvbG9yID0gbmV3IENvbG9yKCAwLjEsIDAuMDQsIDAuMDIgKTtcblx0XHR0aGlzLmVkZ2VHbG93ID0gMC4wO1xuXHRcdHRoaXMudXNlUGF0dGVyblRleHR1cmUgPSBmYWxzZTtcblx0XHR0aGlzLmVkZ2VUaGlja25lc3MgPSAxLjA7XG5cdFx0dGhpcy5lZGdlU3RyZW5ndGggPSAzLjA7XG5cdFx0dGhpcy5kb3duU2FtcGxlUmF0aW8gPSAyO1xuXHRcdHRoaXMucHVsc2VQZXJpb2QgPSAwO1xuXG5cdFx0dGhpcy5fdmlzaWJpbGl0eUNhY2hlID0gbmV3IE1hcCgpO1xuXG5cblx0XHR0aGlzLnJlc29sdXRpb24gPSAoIHJlc29sdXRpb24gIT09IHVuZGVmaW5lZCApID8gbmV3IFZlY3RvcjIoIHJlc29sdXRpb24ueCwgcmVzb2x1dGlvbi55ICkgOiBuZXcgVmVjdG9yMiggMjU2LCAyNTYgKTtcblxuXHRcdGNvbnN0IHBhcnMgPSB7IG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XG5cblx0XHRjb25zdCByZXN4ID0gTWF0aC5yb3VuZCggdGhpcy5yZXNvbHV0aW9uLnggLyB0aGlzLmRvd25TYW1wbGVSYXRpbyApO1xuXHRcdGNvbnN0IHJlc3kgPSBNYXRoLnJvdW5kKCB0aGlzLnJlc29sdXRpb24ueSAvIHRoaXMuZG93blNhbXBsZVJhdGlvICk7XG5cblx0XHR0aGlzLm1hc2tCdWZmZXJNYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYgfSApO1xuXHRcdHRoaXMubWFza0J1ZmZlck1hdGVyaWFsLnNpZGUgPSBEb3VibGVTaWRlO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0TWFza0J1ZmZlciA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggdGhpcy5yZXNvbHV0aW9uLngsIHRoaXMucmVzb2x1dGlvbi55LCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRNYXNrQnVmZmVyLnRleHR1cmUubmFtZSA9ICdPdXRsaW5lUGFzcy5tYXNrJztcblx0XHR0aGlzLnJlbmRlclRhcmdldE1hc2tCdWZmZXIudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMuZGVwdGhNYXRlcmlhbCA9IG5ldyBNZXNoRGVwdGhNYXRlcmlhbCgpO1xuXHRcdHRoaXMuZGVwdGhNYXRlcmlhbC5zaWRlID0gRG91YmxlU2lkZTtcblx0XHR0aGlzLmRlcHRoTWF0ZXJpYWwuZGVwdGhQYWNraW5nID0gUkdCQURlcHRoUGFja2luZztcblx0XHR0aGlzLmRlcHRoTWF0ZXJpYWwuYmxlbmRpbmcgPSBOb0JsZW5kaW5nO1xuXG5cdFx0dGhpcy5wcmVwYXJlTWFza01hdGVyaWFsID0gdGhpcy5nZXRQcmVwYXJlTWFza01hdGVyaWFsKCk7XG5cdFx0dGhpcy5wcmVwYXJlTWFza01hdGVyaWFsLnNpZGUgPSBEb3VibGVTaWRlO1xuXHRcdHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IHJlcGxhY2VEZXB0aFRvVmlld1ooIHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbC5mcmFnbWVudFNoYWRlciwgdGhpcy5yZW5kZXJDYW1lcmEgKTtcblxuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RGVwdGhCdWZmZXIgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIHRoaXMucmVzb2x1dGlvbi54LCB0aGlzLnJlc29sdXRpb24ueSwgcGFycyApO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RGVwdGhCdWZmZXIudGV4dHVyZS5uYW1lID0gJ091dGxpbmVQYXNzLmRlcHRoJztcblx0XHR0aGlzLnJlbmRlclRhcmdldERlcHRoQnVmZmVyLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldE1hc2tEb3duU2FtcGxlQnVmZmVyID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCByZXN4LCByZXN5LCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRNYXNrRG93blNhbXBsZUJ1ZmZlci50ZXh0dXJlLm5hbWUgPSAnT3V0bGluZVBhc3MuZGVwdGhEb3duU2FtcGxlJztcblx0XHR0aGlzLnJlbmRlclRhcmdldE1hc2tEb3duU2FtcGxlQnVmZmVyLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldEJsdXJCdWZmZXIxID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCByZXN4LCByZXN5LCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRCbHVyQnVmZmVyMS50ZXh0dXJlLm5hbWUgPSAnT3V0bGluZVBhc3MuYmx1cjEnO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Qmx1ckJ1ZmZlcjEudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEJsdXJCdWZmZXIyID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBNYXRoLnJvdW5kKCByZXN4IC8gMiApLCBNYXRoLnJvdW5kKCByZXN5IC8gMiApLCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRCbHVyQnVmZmVyMi50ZXh0dXJlLm5hbWUgPSAnT3V0bGluZVBhc3MuYmx1cjInO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Qmx1ckJ1ZmZlcjIudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHRoaXMuZWRnZURldGVjdGlvbk1hdGVyaWFsID0gdGhpcy5nZXRFZGdlRGV0ZWN0aW9uTWF0ZXJpYWwoKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIxID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCByZXN4LCByZXN5LCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRFZGdlQnVmZmVyMS50ZXh0dXJlLm5hbWUgPSAnT3V0bGluZVBhc3MuZWRnZTEnO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjEudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIyID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KCBNYXRoLnJvdW5kKCByZXN4IC8gMiApLCBNYXRoLnJvdW5kKCByZXN5IC8gMiApLCBwYXJzICk7XG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRFZGdlQnVmZmVyMi50ZXh0dXJlLm5hbWUgPSAnT3V0bGluZVBhc3MuZWRnZTInO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjIudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdGNvbnN0IE1BWF9FREdFX1RISUNLTkVTUyA9IDQ7XG5cdFx0Y29uc3QgTUFYX0VER0VfR0xPVyA9IDQ7XG5cblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDEgPSB0aGlzLmdldFNlcGVyYWJsZUJsdXJNYXRlcmlhbCggTUFYX0VER0VfVEhJQ0tORVNTICk7XG5cdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWwxLnVuaWZvcm1zWyAndGV4U2l6ZScgXS52YWx1ZS5zZXQoIHJlc3gsIHJlc3kgKTtcblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDEudW5pZm9ybXNbICdrZXJuZWxSYWRpdXMnIF0udmFsdWUgPSAxO1xuXHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMiA9IHRoaXMuZ2V0U2VwZXJhYmxlQmx1ck1hdGVyaWFsKCBNQVhfRURHRV9HTE9XICk7XG5cdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWwyLnVuaWZvcm1zWyAndGV4U2l6ZScgXS52YWx1ZS5zZXQoIE1hdGgucm91bmQoIHJlc3ggLyAyICksIE1hdGgucm91bmQoIHJlc3kgLyAyICkgKTtcblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDIudW5pZm9ybXNbICdrZXJuZWxSYWRpdXMnIF0udmFsdWUgPSBNQVhfRURHRV9HTE9XO1xuXG5cdFx0Ly8gT3ZlcmxheSBtYXRlcmlhbFxuXHRcdHRoaXMub3ZlcmxheU1hdGVyaWFsID0gdGhpcy5nZXRPdmVybGF5TWF0ZXJpYWwoKTtcblxuXHRcdC8vIGNvcHkgbWF0ZXJpYWxcblx0XHRpZiAoIENvcHlTaGFkZXIgPT09IHVuZGVmaW5lZCApIGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PdXRsaW5lUGFzcyByZWxpZXMgb24gQ29weVNoYWRlcicgKTtcblxuXHRcdGNvbnN0IGNvcHlTaGFkZXIgPSBDb3B5U2hhZGVyO1xuXG5cdFx0dGhpcy5jb3B5VW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLmNsb25lKCBjb3B5U2hhZGVyLnVuaWZvcm1zICk7XG5cdFx0dGhpcy5jb3B5VW5pZm9ybXNbICdvcGFjaXR5JyBdLnZhbHVlID0gMS4wO1xuXG5cdFx0dGhpcy5tYXRlcmlhbENvcHkgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdHVuaWZvcm1zOiB0aGlzLmNvcHlVbmlmb3Jtcyxcblx0XHRcdHZlcnRleFNoYWRlcjogY29weVNoYWRlci52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRmcmFnbWVudFNoYWRlcjogY29weVNoYWRlci5mcmFnbWVudFNoYWRlcixcblx0XHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWVcblx0XHR9ICk7XG5cblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXHRcdHRoaXMubmVlZHNTd2FwID0gZmFsc2U7XG5cblx0XHR0aGlzLl9vbGRDbGVhckNvbG9yID0gbmV3IENvbG9yKCk7XG5cdFx0dGhpcy5vbGRDbGVhckFscGhhID0gMTtcblxuXHRcdHRoaXMuZnNRdWFkID0gbmV3IEZ1bGxTY3JlZW5RdWFkKCBudWxsICk7XG5cblx0XHR0aGlzLnRlbXBQdWxzZUNvbG9yMSA9IG5ldyBDb2xvcigpO1xuXHRcdHRoaXMudGVtcFB1bHNlQ29sb3IyID0gbmV3IENvbG9yKCk7XG5cdFx0dGhpcy50ZXh0dXJlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdGZ1bmN0aW9uIHJlcGxhY2VEZXB0aFRvVmlld1ooIHN0cmluZywgY2FtZXJhICkge1xuXG5cdFx0XHR2YXIgdHlwZSA9IGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhID8gJ3BlcnNwZWN0aXZlJyA6ICdvcnRob2dyYXBoaWMnO1xuXG5cdFx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIC9ERVBUSF9UT19WSUVXX1ovZywgdHlwZSArICdEZXB0aFRvVmlld1onICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGRpc3Bvc2UoKSB7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldE1hc2tCdWZmZXIuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RGVwdGhCdWZmZXIuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0TWFza0Rvd25TYW1wbGVCdWZmZXIuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Qmx1ckJ1ZmZlcjEuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0Qmx1ckJ1ZmZlcjIuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjEuZGlzcG9zZSgpO1xuXHRcdHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjIuZGlzcG9zZSgpO1xuXG5cdH1cblxuXHRzZXRTaXplKCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0dGhpcy5yZW5kZXJUYXJnZXRNYXNrQnVmZmVyLnNldFNpemUoIHdpZHRoLCBoZWlnaHQgKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldERlcHRoQnVmZmVyLnNldFNpemUoIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdGxldCByZXN4ID0gTWF0aC5yb3VuZCggd2lkdGggLyB0aGlzLmRvd25TYW1wbGVSYXRpbyApO1xuXHRcdGxldCByZXN5ID0gTWF0aC5yb3VuZCggaGVpZ2h0IC8gdGhpcy5kb3duU2FtcGxlUmF0aW8gKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldE1hc2tEb3duU2FtcGxlQnVmZmVyLnNldFNpemUoIHJlc3gsIHJlc3kgKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEJsdXJCdWZmZXIxLnNldFNpemUoIHJlc3gsIHJlc3kgKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIxLnNldFNpemUoIHJlc3gsIHJlc3kgKTtcblx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDEudW5pZm9ybXNbICd0ZXhTaXplJyBdLnZhbHVlLnNldCggcmVzeCwgcmVzeSApO1xuXG5cdFx0cmVzeCA9IE1hdGgucm91bmQoIHJlc3ggLyAyICk7XG5cdFx0cmVzeSA9IE1hdGgucm91bmQoIHJlc3kgLyAyICk7XG5cblx0XHR0aGlzLnJlbmRlclRhcmdldEJsdXJCdWZmZXIyLnNldFNpemUoIHJlc3gsIHJlc3kgKTtcblx0XHR0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIyLnNldFNpemUoIHJlc3gsIHJlc3kgKTtcblxuXHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMi51bmlmb3Jtc1sgJ3RleFNpemUnIF0udmFsdWUuc2V0KCByZXN4LCByZXN5ICk7XG5cblx0fVxuXG5cdGNoYW5nZVZpc2liaWxpdHlPZlNlbGVjdGVkT2JqZWN0cyggYlZpc2libGUgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuX3Zpc2liaWxpdHlDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGdhdGhlclNlbGVjdGVkTWVzaGVzQ2FsbEJhY2soIG9iamVjdCApIHtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNNZXNoICkge1xuXG5cdFx0XHRcdGlmICggYlZpc2libGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QudmlzaWJsZSA9IGNhY2hlLmdldCggb2JqZWN0ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNhY2hlLnNldCggb2JqZWN0LCBvYmplY3QudmlzaWJsZSApO1xuXHRcdFx0XHRcdG9iamVjdC52aXNpYmxlID0gYlZpc2libGU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLnNlbGVjdGVkT2JqZWN0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGNvbnN0IHNlbGVjdGVkT2JqZWN0ID0gdGhpcy5zZWxlY3RlZE9iamVjdHNbIGkgXTtcblx0XHRcdHNlbGVjdGVkT2JqZWN0LnRyYXZlcnNlKCBnYXRoZXJTZWxlY3RlZE1lc2hlc0NhbGxCYWNrICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGNoYW5nZVZpc2liaWxpdHlPZk5vblNlbGVjdGVkT2JqZWN0cyggYlZpc2libGUgKSB7XG5cblx0XHRjb25zdCBjYWNoZSA9IHRoaXMuX3Zpc2liaWxpdHlDYWNoZTtcblx0XHRjb25zdCBzZWxlY3RlZE1lc2hlcyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gZ2F0aGVyU2VsZWN0ZWRNZXNoZXNDYWxsQmFjayggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSBzZWxlY3RlZE1lc2hlcy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuc2VsZWN0ZWRPYmplY3RzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0Y29uc3Qgc2VsZWN0ZWRPYmplY3QgPSB0aGlzLnNlbGVjdGVkT2JqZWN0c1sgaSBdO1xuXHRcdFx0c2VsZWN0ZWRPYmplY3QudHJhdmVyc2UoIGdhdGhlclNlbGVjdGVkTWVzaGVzQ2FsbEJhY2sgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIFZpc2liaWxpdHlDaGFuZ2VDYWxsQmFjayggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc01lc2ggfHwgb2JqZWN0LmlzU3ByaXRlICkge1xuXG5cdFx0XHRcdC8vIG9ubHkgbWVzaGVzIGFuZCBzcHJpdGVzIGFyZSBzdXBwb3J0ZWQgYnkgT3V0bGluZVBhc3NcblxuXHRcdFx0XHRsZXQgYkZvdW5kID0gZmFsc2U7XG5cblx0XHRcdFx0Zm9yICggbGV0IGkgPSAwOyBpIDwgc2VsZWN0ZWRNZXNoZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2VsZWN0ZWRPYmplY3RJZCA9IHNlbGVjdGVkTWVzaGVzWyBpIF0uaWQ7XG5cblx0XHRcdFx0XHRpZiAoIHNlbGVjdGVkT2JqZWN0SWQgPT09IG9iamVjdC5pZCApIHtcblxuXHRcdFx0XHRcdFx0YkZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGJGb3VuZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRjb25zdCB2aXNpYmlsaXR5ID0gb2JqZWN0LnZpc2libGU7XG5cblx0XHRcdFx0XHRpZiAoIGJWaXNpYmxlID09PSBmYWxzZSB8fCBjYWNoZS5nZXQoIG9iamVjdCApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0XHRvYmplY3QudmlzaWJsZSA9IGJWaXNpYmxlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y2FjaGUuc2V0KCBvYmplY3QsIHZpc2liaWxpdHkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1BvaW50cyB8fCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHRcdC8vIHRoZSB2aXNpYmlsdHkgb2YgcG9pbnRzIGFuZCBsaW5lcyBpcyBhbHdheXMgc2V0IHRvIGZhbHNlIGluIG9yZGVyIHRvXG5cdFx0XHRcdC8vIG5vdCBhZmZlY3QgdGhlIG91dGxpbmUgY29tcHV0YXRpb25cblxuXHRcdFx0XHRpZiAoIGJWaXNpYmxlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0b2JqZWN0LnZpc2libGUgPSBjYWNoZS5nZXQoIG9iamVjdCApOyAvLyByZXN0b3JlXG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNhY2hlLnNldCggb2JqZWN0LCBvYmplY3QudmlzaWJsZSApO1xuXHRcdFx0XHRcdG9iamVjdC52aXNpYmxlID0gYlZpc2libGU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLnJlbmRlclNjZW5lLnRyYXZlcnNlKCBWaXNpYmlsaXR5Q2hhbmdlQ2FsbEJhY2sgKTtcblxuXHR9XG5cblx0dXBkYXRlVGV4dHVyZU1hdHJpeCgpIHtcblxuXHRcdHRoaXMudGV4dHVyZU1hdHJpeC5zZXQoIDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMCApO1xuXHRcdHRoaXMudGV4dHVyZU1hdHJpeC5tdWx0aXBseSggdGhpcy5yZW5kZXJDYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdHRoaXMudGV4dHVyZU1hdHJpeC5tdWx0aXBseSggdGhpcy5yZW5kZXJDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0fVxuXG5cdHJlbmRlciggcmVuZGVyZXIsIHdyaXRlQnVmZmVyLCByZWFkQnVmZmVyLCBkZWx0YVRpbWUsIG1hc2tBY3RpdmUgKSB7XG5cblx0XHRpZiAoIHRoaXMuc2VsZWN0ZWRPYmplY3RzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHJlbmRlcmVyLmdldENsZWFyQ29sb3IoIHRoaXMuX29sZENsZWFyQ29sb3IgKTtcblx0XHRcdHRoaXMub2xkQ2xlYXJBbHBoYSA9IHJlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblx0XHRcdGNvbnN0IG9sZEF1dG9DbGVhciA9IHJlbmRlcmVyLmF1dG9DbGVhcjtcblxuXHRcdFx0cmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cblx0XHRcdGlmICggbWFza0FjdGl2ZSApIHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRUZXN0KCBmYWxzZSApO1xuXG5cdFx0XHRyZW5kZXJlci5zZXRDbGVhckNvbG9yKCAweGZmZmZmZiwgMSApO1xuXG5cdFx0XHQvLyBNYWtlIHNlbGVjdGVkIG9iamVjdHMgaW52aXNpYmxlXG5cdFx0XHR0aGlzLmNoYW5nZVZpc2liaWxpdHlPZlNlbGVjdGVkT2JqZWN0cyggZmFsc2UgKTtcblxuXHRcdFx0Y29uc3QgY3VycmVudEJhY2tncm91bmQgPSB0aGlzLnJlbmRlclNjZW5lLmJhY2tncm91bmQ7XG5cdFx0XHR0aGlzLnJlbmRlclNjZW5lLmJhY2tncm91bmQgPSBudWxsO1xuXG5cdFx0XHQvLyAxLiBEcmF3IE5vbiBTZWxlY3RlZCBvYmplY3RzIGluIHRoZSBkZXB0aCBidWZmZXJcblx0XHRcdHRoaXMucmVuZGVyU2NlbmUub3ZlcnJpZGVNYXRlcmlhbCA9IHRoaXMuZGVwdGhNYXRlcmlhbDtcblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy5yZW5kZXJUYXJnZXREZXB0aEJ1ZmZlciApO1xuXHRcdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdHJlbmRlcmVyLnJlbmRlciggdGhpcy5yZW5kZXJTY2VuZSwgdGhpcy5yZW5kZXJDYW1lcmEgKTtcblxuXHRcdFx0Ly8gTWFrZSBzZWxlY3RlZCBvYmplY3RzIHZpc2libGVcblx0XHRcdHRoaXMuY2hhbmdlVmlzaWJpbGl0eU9mU2VsZWN0ZWRPYmplY3RzKCB0cnVlICk7XG5cdFx0XHR0aGlzLl92aXNpYmlsaXR5Q2FjaGUuY2xlYXIoKTtcblxuXHRcdFx0Ly8gVXBkYXRlIFRleHR1cmUgTWF0cml4IGZvciBEZXB0aCBjb21wYXJlXG5cdFx0XHR0aGlzLnVwZGF0ZVRleHR1cmVNYXRyaXgoKTtcblxuXHRcdFx0Ly8gTWFrZSBub24gc2VsZWN0ZWQgb2JqZWN0cyBpbnZpc2libGUsIGFuZCBkcmF3IG9ubHkgdGhlIHNlbGVjdGVkIG9iamVjdHMsIGJ5IGNvbXBhcmluZyB0aGUgZGVwdGggYnVmZmVyIG9mIG5vbiBzZWxlY3RlZCBvYmplY3RzXG5cdFx0XHR0aGlzLmNoYW5nZVZpc2liaWxpdHlPZk5vblNlbGVjdGVkT2JqZWN0cyggZmFsc2UgKTtcblx0XHRcdHRoaXMucmVuZGVyU2NlbmUub3ZlcnJpZGVNYXRlcmlhbCA9IHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbDtcblx0XHRcdHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbC51bmlmb3Jtc1sgJ2NhbWVyYU5lYXJGYXInIF0udmFsdWUuc2V0KCB0aGlzLnJlbmRlckNhbWVyYS5uZWFyLCB0aGlzLnJlbmRlckNhbWVyYS5mYXIgKTtcblx0XHRcdHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbC51bmlmb3Jtc1sgJ2RlcHRoVGV4dHVyZScgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0RGVwdGhCdWZmZXIudGV4dHVyZTtcblx0XHRcdHRoaXMucHJlcGFyZU1hc2tNYXRlcmlhbC51bmlmb3Jtc1sndGV4dHVyZU1hdHJpeCddLnZhbHVlID0gdGhpcy50ZXh0dXJlTWF0cml4O1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRhcmdldE1hc2tCdWZmZXIgKTtcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0XHRyZW5kZXJlci5yZW5kZXIodGhpcy5yZW5kZXJTY2VuZSwgdGhpcy5yZW5kZXJDYW1lcmEpO1xuXHRcdFx0dGhpcy5yZW5kZXJTY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDtcblx0XHRcdHRoaXMuY2hhbmdlVmlzaWJpbGl0eU9mTm9uU2VsZWN0ZWRPYmplY3RzKCB0cnVlICk7XG5cdFx0XHR0aGlzLl92aXNpYmlsaXR5Q2FjaGUuY2xlYXIoKTtcblxuXHRcdFx0dGhpcy5yZW5kZXJTY2VuZS5iYWNrZ3JvdW5kID0gY3VycmVudEJhY2tncm91bmQ7XG5cblx0XHRcdC8vIDIuIERvd25zYW1wbGUgdG8gSGFsZiByZXNvbHV0aW9uXG5cdFx0XHR0aGlzLmZzUXVhZC5tYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxDb3B5O1xuXHRcdFx0dGhpcy5jb3B5VW5pZm9ybXNbICd0RGlmZnVzZScgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0TWFza0J1ZmZlci50ZXh0dXJlO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRhcmdldE1hc2tEb3duU2FtcGxlQnVmZmVyICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0XHR0aGlzLnRlbXBQdWxzZUNvbG9yMS5jb3B5KCB0aGlzLnZpc2libGVFZGdlQ29sb3IgKTtcblx0XHRcdHRoaXMudGVtcFB1bHNlQ29sb3IyLmNvcHkoIHRoaXMuaGlkZGVuRWRnZUNvbG9yICk7XG5cblx0XHRcdGlmICggdGhpcy5wdWxzZVBlcmlvZCA+IDAgKSB7XG5cblx0XHRcdFx0Y29uc3Qgc2NhbGFyID0gKCAxICsgMC4yNSApIC8gMiArIE1hdGguY29zKCBwZXJmb3JtYW5jZS5ub3coKSAqIDAuMDEgLyB0aGlzLnB1bHNlUGVyaW9kICkgKiAoIDEuMCAtIDAuMjUgKSAvIDI7XG5cdFx0XHRcdHRoaXMudGVtcFB1bHNlQ29sb3IxLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblx0XHRcdFx0dGhpcy50ZW1wUHVsc2VDb2xvcjIubXVsdGlwbHlTY2FsYXIoIHNjYWxhciApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIDMuIEFwcGx5IEVkZ2UgRGV0ZWN0aW9uIFBhc3Ncblx0XHRcdHRoaXMuZnNRdWFkLm1hdGVyaWFsID0gdGhpcy5lZGdlRGV0ZWN0aW9uTWF0ZXJpYWw7XG5cdFx0XHR0aGlzLmVkZ2VEZXRlY3Rpb25NYXRlcmlhbC51bmlmb3Jtc1sgJ21hc2tUZXh0dXJlJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRNYXNrRG93blNhbXBsZUJ1ZmZlci50ZXh0dXJlO1xuXHRcdFx0dGhpcy5lZGdlRGV0ZWN0aW9uTWF0ZXJpYWwudW5pZm9ybXNbICd0ZXhTaXplJyBdLnZhbHVlLnNldCggdGhpcy5yZW5kZXJUYXJnZXRNYXNrRG93blNhbXBsZUJ1ZmZlci53aWR0aCwgdGhpcy5yZW5kZXJUYXJnZXRNYXNrRG93blNhbXBsZUJ1ZmZlci5oZWlnaHQgKTtcblx0XHRcdHRoaXMuZWRnZURldGVjdGlvbk1hdGVyaWFsLnVuaWZvcm1zWyAndmlzaWJsZUVkZ2VDb2xvcicgXS52YWx1ZSA9IHRoaXMudGVtcFB1bHNlQ29sb3IxO1xuXHRcdFx0dGhpcy5lZGdlRGV0ZWN0aW9uTWF0ZXJpYWwudW5pZm9ybXNbICdoaWRkZW5FZGdlQ29sb3InIF0udmFsdWUgPSB0aGlzLnRlbXBQdWxzZUNvbG9yMjtcblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy5yZW5kZXJUYXJnZXRFZGdlQnVmZmVyMSApO1xuXHRcdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdFx0Ly8gNC4gQXBwbHkgQmx1ciBvbiBIYWxmIHJlc1xuXHRcdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDE7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDEudW5pZm9ybXNbICdjb2xvclRleHR1cmUnIF0udmFsdWUgPSB0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIxLnRleHR1cmU7XG5cdFx0XHR0aGlzLnNlcGFyYWJsZUJsdXJNYXRlcmlhbDEudW5pZm9ybXNbICdkaXJlY3Rpb24nIF0udmFsdWUgPSBPdXRsaW5lUGFzcy5CbHVyRGlyZWN0aW9uWDtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMS51bmlmb3Jtc1sgJ2tlcm5lbFJhZGl1cycgXS52YWx1ZSA9IHRoaXMuZWRnZVRoaWNrbmVzcztcblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGhpcy5yZW5kZXJUYXJnZXRCbHVyQnVmZmVyMSApO1xuXHRcdFx0cmVuZGVyZXIuY2xlYXIoKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMS51bmlmb3Jtc1sgJ2NvbG9yVGV4dHVyZScgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0Qmx1ckJ1ZmZlcjEudGV4dHVyZTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMS51bmlmb3Jtc1sgJ2RpcmVjdGlvbicgXS52YWx1ZSA9IE91dGxpbmVQYXNzLkJsdXJEaXJlY3Rpb25ZO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIxICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0XHQvLyBBcHBseSBCbHVyIG9uIHF1YXJ0ZXIgcmVzXG5cdFx0XHR0aGlzLmZzUXVhZC5tYXRlcmlhbCA9IHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMjtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMi51bmlmb3Jtc1sgJ2NvbG9yVGV4dHVyZScgXS52YWx1ZSA9IHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjEudGV4dHVyZTtcblx0XHRcdHRoaXMuc2VwYXJhYmxlQmx1ck1hdGVyaWFsMi51bmlmb3Jtc1sgJ2RpcmVjdGlvbicgXS52YWx1ZSA9IE91dGxpbmVQYXNzLkJsdXJEaXJlY3Rpb25YO1xuXHRcdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCB0aGlzLnJlbmRlclRhcmdldEJsdXJCdWZmZXIyICk7XG5cdFx0XHRyZW5kZXJlci5jbGVhcigpO1xuXHRcdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXHRcdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWwyLnVuaWZvcm1zWyAnY29sb3JUZXh0dXJlJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRCbHVyQnVmZmVyMi50ZXh0dXJlO1xuXHRcdFx0dGhpcy5zZXBhcmFibGVCbHVyTWF0ZXJpYWwyLnVuaWZvcm1zWyAnZGlyZWN0aW9uJyBdLnZhbHVlID0gT3V0bGluZVBhc3MuQmx1ckRpcmVjdGlvblk7XG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMucmVuZGVyVGFyZ2V0RWRnZUJ1ZmZlcjIgKTtcblx0XHRcdHJlbmRlcmVyLmNsZWFyKCk7XG5cdFx0XHR0aGlzLmZzUXVhZC5yZW5kZXIoIHJlbmRlcmVyICk7XG5cblx0XHRcdC8vIEJsZW5kIGl0IGFkZGl0aXZlbHkgb3ZlciB0aGUgaW5wdXQgdGV4dHVyZVxuXHRcdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLm92ZXJsYXlNYXRlcmlhbDtcblx0XHRcdHRoaXMub3ZlcmxheU1hdGVyaWFsLnVuaWZvcm1zWyAnbWFza1RleHR1cmUnIF0udmFsdWUgPSB0aGlzLnJlbmRlclRhcmdldE1hc2tCdWZmZXIudGV4dHVyZTtcblx0XHRcdHRoaXMub3ZlcmxheU1hdGVyaWFsLnVuaWZvcm1zWyAnZWRnZVRleHR1cmUxJyBdLnZhbHVlID0gdGhpcy5yZW5kZXJUYXJnZXRFZGdlQnVmZmVyMS50ZXh0dXJlO1xuXHRcdFx0dGhpcy5vdmVybGF5TWF0ZXJpYWwudW5pZm9ybXNbICdlZGdlVGV4dHVyZTInIF0udmFsdWUgPSB0aGlzLnJlbmRlclRhcmdldEVkZ2VCdWZmZXIyLnRleHR1cmU7XG5cdFx0XHR0aGlzLm92ZXJsYXlNYXRlcmlhbC51bmlmb3Jtc1sgJ3BhdHRlcm5UZXh0dXJlJyBdLnZhbHVlID0gdGhpcy5wYXR0ZXJuVGV4dHVyZTtcblx0XHRcdHRoaXMub3ZlcmxheU1hdGVyaWFsLnVuaWZvcm1zWyAnZWRnZVN0cmVuZ3RoJyBdLnZhbHVlID0gdGhpcy5lZGdlU3RyZW5ndGg7XG5cdFx0XHR0aGlzLm92ZXJsYXlNYXRlcmlhbC51bmlmb3Jtc1sgJ2VkZ2VHbG93JyBdLnZhbHVlID0gdGhpcy5lZGdlR2xvdztcblx0XHRcdHRoaXMub3ZlcmxheU1hdGVyaWFsLnVuaWZvcm1zWyAndXNlUGF0dGVyblRleHR1cmUnIF0udmFsdWUgPSB0aGlzLnVzZVBhdHRlcm5UZXh0dXJlO1xuXG5cblx0XHRcdGlmICggbWFza0FjdGl2ZSApIHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuc3RlbmNpbC5zZXRUZXN0KCB0cnVlICk7XG5cblx0XHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVhZEJ1ZmZlciApO1xuXHRcdFx0dGhpcy5mc1F1YWQucmVuZGVyKCByZW5kZXJlciApO1xuXG5cdFx0XHRyZW5kZXJlci5zZXRDbGVhckNvbG9yKCB0aGlzLl9vbGRDbGVhckNvbG9yLCB0aGlzLm9sZENsZWFyQWxwaGEgKTtcblx0XHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IG9sZEF1dG9DbGVhcjtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5yZW5kZXJUb1NjcmVlbiApIHtcblxuXHRcdFx0dGhpcy5mc1F1YWQubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsQ29weTtcblx0XHRcdHRoaXMuY29weVVuaWZvcm1zWyAndERpZmZ1c2UnIF0udmFsdWUgPSByZWFkQnVmZmVyLnRleHR1cmU7XG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIG51bGwgKTtcblx0XHRcdHRoaXMuZnNRdWFkLnJlbmRlciggcmVuZGVyZXIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Z2V0UHJlcGFyZU1hc2tNYXRlcmlhbCgpIHtcblxuXHRcdHJldHVybiBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0J2RlcHRoVGV4dHVyZSc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdFx0J2NhbWVyYU5lYXJGYXInOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LFxuXHRcdFx0XHQndGV4dHVyZU1hdHJpeCc6IHsgdmFsdWU6IG51bGwgfVxuXHRcdFx0fSxcblxuXHRcdFx0dmVydGV4U2hhZGVyOlxuXHRcdFx0XHRgI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxuXHRcdFx0XHQjaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG5cblx0XHRcdFx0dmFyeWluZyB2ZWM0IHByb2pUZXhDb29yZDtcblx0XHRcdFx0dmFyeWluZyB2ZWM0IHZQb3NpdGlvbjtcblx0XHRcdFx0dW5pZm9ybSBtYXQ0IHRleHR1cmVNYXRyaXg7XG5cblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXG5cdFx0XHRcdFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cblx0XHRcdFx0XHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuXHRcdFx0XHRcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XG5cdFx0XHRcdFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cblx0XHRcdFx0XHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XG5cblx0XHRcdFx0XHR2UG9zaXRpb24gPSBtdlBvc2l0aW9uO1xuXHRcdFx0XHRcdHZlYzQgd29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xuXHRcdFx0XHRcdHByb2pUZXhDb29yZCA9IHRleHR1cmVNYXRyaXggKiB3b3JsZFBvc2l0aW9uO1xuXG5cdFx0XHRcdH1gLFxuXG5cdFx0XHRmcmFnbWVudFNoYWRlcjpcblx0XHRcdFx0YCNpbmNsdWRlIDxwYWNraW5nPlxuXHRcdFx0XHR2YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xuXHRcdFx0XHR2YXJ5aW5nIHZlYzQgcHJvalRleENvb3JkO1xuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCBkZXB0aFRleHR1cmU7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMiBjYW1lcmFOZWFyRmFyO1xuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblxuXHRcdFx0XHRcdGZsb2F0IGRlcHRoID0gdW5wYWNrUkdCQVRvRGVwdGgodGV4dHVyZTJEUHJvaiggZGVwdGhUZXh0dXJlLCBwcm9qVGV4Q29vcmQgKSk7XG5cdFx0XHRcdFx0ZmxvYXQgdmlld1ogPSAtIERFUFRIX1RPX1ZJRVdfWiggZGVwdGgsIGNhbWVyYU5lYXJGYXIueCwgY2FtZXJhTmVhckZhci55ICk7XG5cdFx0XHRcdFx0ZmxvYXQgZGVwdGhUZXN0ID0gKC12UG9zaXRpb24ueiA+IHZpZXdaKSA/IDEuMCA6IDAuMDtcblx0XHRcdFx0XHRnbF9GcmFnQ29sb3IgPSB2ZWM0KDAuMCwgZGVwdGhUZXN0LCAxLjAsIDEuMCk7XG5cblx0XHRcdFx0fWBcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0Z2V0RWRnZURldGVjdGlvbk1hdGVyaWFsKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHQnbWFza1RleHR1cmUnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCd0ZXhTaXplJzogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRcdFx0J3Zpc2libGVFZGdlQ29sb3InOiB7IHZhbHVlOiBuZXcgVmVjdG9yMyggMS4wLCAxLjAsIDEuMCApIH0sXG5cdFx0XHRcdCdoaWRkZW5FZGdlQ29sb3InOiB7IHZhbHVlOiBuZXcgVmVjdG9yMyggMS4wLCAxLjAsIDEuMCApIH0sXG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6XG5cdFx0XHRcdGB2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHR2VXYgPSB1djtcblx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cdFx0XHRcdH1gLFxuXG5cdFx0XHRmcmFnbWVudFNoYWRlcjpcblx0XHRcdFx0YHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFza1RleHR1cmU7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMiB0ZXhTaXplO1xuXHRcdFx0XHR1bmlmb3JtIHZlYzMgdmlzaWJsZUVkZ2VDb2xvcjtcblx0XHRcdFx0dW5pZm9ybSB2ZWMzIGhpZGRlbkVkZ2VDb2xvcjtcblxuXHRcdFx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHRcdFx0dmVjMiBpbnZTaXplID0gMS4wIC8gdGV4U2l6ZTtcblx0XHRcdFx0XHR2ZWM0IHV2T2Zmc2V0ID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApICogdmVjNChpbnZTaXplLCBpbnZTaXplKTtcblx0XHRcdFx0XHR2ZWM0IGMxID0gdGV4dHVyZTJEKCBtYXNrVGV4dHVyZSwgdlV2ICsgdXZPZmZzZXQueHkpO1xuXHRcdFx0XHRcdHZlYzQgYzIgPSB0ZXh0dXJlMkQoIG1hc2tUZXh0dXJlLCB2VXYgLSB1dk9mZnNldC54eSk7XG5cdFx0XHRcdFx0dmVjNCBjMyA9IHRleHR1cmUyRCggbWFza1RleHR1cmUsIHZVdiArIHV2T2Zmc2V0Lnl3KTtcblx0XHRcdFx0XHR2ZWM0IGM0ID0gdGV4dHVyZTJEKCBtYXNrVGV4dHVyZSwgdlV2IC0gdXZPZmZzZXQueXcpO1xuXHRcdFx0XHRcdGZsb2F0IGRpZmYxID0gKGMxLnIgLSBjMi5yKSowLjU7XG5cdFx0XHRcdFx0ZmxvYXQgZGlmZjIgPSAoYzMuciAtIGM0LnIpKjAuNTtcblx0XHRcdFx0XHRmbG9hdCBkID0gbGVuZ3RoKCB2ZWMyKGRpZmYxLCBkaWZmMikgKTtcblx0XHRcdFx0XHRmbG9hdCBhMSA9IG1pbihjMS5nLCBjMi5nKTtcblx0XHRcdFx0XHRmbG9hdCBhMiA9IG1pbihjMy5nLCBjNC5nKTtcblx0XHRcdFx0XHRmbG9hdCB2aXNpYmlsaXR5RmFjdG9yID0gbWluKGExLCBhMik7XG5cdFx0XHRcdFx0dmVjMyBlZGdlQ29sb3IgPSAxLjAgLSB2aXNpYmlsaXR5RmFjdG9yID4gMC4wMDEgPyB2aXNpYmxlRWRnZUNvbG9yIDogaGlkZGVuRWRnZUNvbG9yO1xuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoZWRnZUNvbG9yLCAxLjApICogdmVjNChkKTtcblx0XHRcdFx0fWBcblx0XHR9ICk7XG5cblx0fVxuXG5cdGdldFNlcGVyYWJsZUJsdXJNYXRlcmlhbCggbWF4UmFkaXVzICkge1xuXG5cdFx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0XHRkZWZpbmVzOiB7XG5cdFx0XHRcdCdNQVhfUkFESVVTJzogbWF4UmFkaXVzLFxuXHRcdFx0fSxcblxuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0J2NvbG9yVGV4dHVyZSc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdFx0J3RleFNpemUnOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMC41LCAwLjUgKSB9LFxuXHRcdFx0XHQnZGlyZWN0aW9uJzogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRcdFx0J2tlcm5lbFJhZGl1cyc6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9LFxuXG5cdFx0XHR2ZXJ0ZXhTaGFkZXI6XG5cdFx0XHRcdGB2YXJ5aW5nIHZlYzIgdlV2O1xuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHR2VXYgPSB1djtcblx0XHRcdFx0XHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG5cdFx0XHRcdH1gLFxuXG5cdFx0XHRmcmFnbWVudFNoYWRlcjpcblx0XHRcdFx0YCNpbmNsdWRlIDxjb21tb24+XG5cdFx0XHRcdHZhcnlpbmcgdmVjMiB2VXY7XG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIGNvbG9yVGV4dHVyZTtcblx0XHRcdFx0dW5pZm9ybSB2ZWMyIHRleFNpemU7XG5cdFx0XHRcdHVuaWZvcm0gdmVjMiBkaXJlY3Rpb247XG5cdFx0XHRcdHVuaWZvcm0gZmxvYXQga2VybmVsUmFkaXVzO1xuXG5cdFx0XHRcdGZsb2F0IGdhdXNzaWFuUGRmKGluIGZsb2F0IHgsIGluIGZsb2F0IHNpZ21hKSB7XG5cdFx0XHRcdFx0cmV0dXJuIDAuMzk4OTQgKiBleHAoIC0wLjUgKiB4ICogeC8oIHNpZ21hICogc2lnbWEpKS9zaWdtYTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHR2ZWMyIGludlNpemUgPSAxLjAgLyB0ZXhTaXplO1xuXHRcdFx0XHRcdGZsb2F0IHdlaWdodFN1bSA9IGdhdXNzaWFuUGRmKDAuMCwga2VybmVsUmFkaXVzKTtcblx0XHRcdFx0XHR2ZWM0IGRpZmZ1c2VTdW0gPSB0ZXh0dXJlMkQoIGNvbG9yVGV4dHVyZSwgdlV2KSAqIHdlaWdodFN1bTtcblx0XHRcdFx0XHR2ZWMyIGRlbHRhID0gZGlyZWN0aW9uICogaW52U2l6ZSAqIGtlcm5lbFJhZGl1cy9mbG9hdChNQVhfUkFESVVTKTtcblx0XHRcdFx0XHR2ZWMyIHV2T2Zmc2V0ID0gZGVsdGE7XG5cdFx0XHRcdFx0Zm9yKCBpbnQgaSA9IDE7IGkgPD0gTUFYX1JBRElVUzsgaSArKyApIHtcblx0XHRcdFx0XHRcdGZsb2F0IHcgPSBnYXVzc2lhblBkZih1dk9mZnNldC54LCBrZXJuZWxSYWRpdXMpO1xuXHRcdFx0XHRcdFx0dmVjNCBzYW1wbGUxID0gdGV4dHVyZTJEKCBjb2xvclRleHR1cmUsIHZVdiArIHV2T2Zmc2V0KTtcblx0XHRcdFx0XHRcdHZlYzQgc2FtcGxlMiA9IHRleHR1cmUyRCggY29sb3JUZXh0dXJlLCB2VXYgLSB1dk9mZnNldCk7XG5cdFx0XHRcdFx0XHRkaWZmdXNlU3VtICs9ICgoc2FtcGxlMSArIHNhbXBsZTIpICogdyk7XG5cdFx0XHRcdFx0XHR3ZWlnaHRTdW0gKz0gKDIuMCAqIHcpO1xuXHRcdFx0XHRcdFx0dXZPZmZzZXQgKz0gZGVsdGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGdsX0ZyYWdDb2xvciA9IGRpZmZ1c2VTdW0vd2VpZ2h0U3VtO1xuXHRcdFx0XHR9YFxuXHRcdH0gKTtcblxuXHR9XG5cblx0Z2V0T3ZlcmxheU1hdGVyaWFsKCkge1xuXG5cdFx0cmV0dXJuIG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0XHR1bmlmb3Jtczoge1xuXHRcdFx0XHQnbWFza1RleHR1cmUnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdlZGdlVGV4dHVyZTEnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdlZGdlVGV4dHVyZTInOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHRcdCdwYXR0ZXJuVGV4dHVyZSc6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdFx0J2VkZ2VTdHJlbmd0aCc6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdFx0XHQnZWRnZUdsb3cnOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRcdFx0J3VzZVBhdHRlcm5UZXh0dXJlJzogeyB2YWx1ZTogMC4wIH1cblx0XHRcdH0sXG5cblx0XHRcdHZlcnRleFNoYWRlcjpcblx0XHRcdFx0YHZhcnlpbmcgdmVjMiB2VXY7XG5cblx0XHRcdFx0dm9pZCBtYWluKCkge1xuXHRcdFx0XHRcdHZVdiA9IHV2O1xuXHRcdFx0XHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcblx0XHRcdFx0fWAsXG5cblx0XHRcdGZyYWdtZW50U2hhZGVyOlxuXHRcdFx0XHRgdmFyeWluZyB2ZWMyIHZVdjtcblxuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCBtYXNrVGV4dHVyZTtcblx0XHRcdFx0dW5pZm9ybSBzYW1wbGVyMkQgZWRnZVRleHR1cmUxO1xuXHRcdFx0XHR1bmlmb3JtIHNhbXBsZXIyRCBlZGdlVGV4dHVyZTI7XG5cdFx0XHRcdHVuaWZvcm0gc2FtcGxlcjJEIHBhdHRlcm5UZXh0dXJlO1xuXHRcdFx0XHR1bmlmb3JtIGZsb2F0IGVkZ2VTdHJlbmd0aDtcblx0XHRcdFx0dW5pZm9ybSBmbG9hdCBlZGdlR2xvdztcblx0XHRcdFx0dW5pZm9ybSBib29sIHVzZVBhdHRlcm5UZXh0dXJlO1xuXG5cdFx0XHRcdHZvaWQgbWFpbigpIHtcblx0XHRcdFx0XHR2ZWM0IGVkZ2VWYWx1ZTEgPSB0ZXh0dXJlMkQoZWRnZVRleHR1cmUxLCB2VXYpO1xuXHRcdFx0XHRcdHZlYzQgZWRnZVZhbHVlMiA9IHRleHR1cmUyRChlZGdlVGV4dHVyZTIsIHZVdik7XG5cdFx0XHRcdFx0dmVjNCBtYXNrQ29sb3IgPSB0ZXh0dXJlMkQobWFza1RleHR1cmUsIHZVdik7XG5cdFx0XHRcdFx0dmVjNCBwYXR0ZXJuQ29sb3IgPSB0ZXh0dXJlMkQocGF0dGVyblRleHR1cmUsIDYuMCAqIHZVdik7XG5cdFx0XHRcdFx0ZmxvYXQgdmlzaWJpbGl0eUZhY3RvciA9IDEuMCAtIG1hc2tDb2xvci5nID4gMC4wID8gMS4wIDogMC41O1xuXHRcdFx0XHRcdHZlYzQgZWRnZVZhbHVlID0gZWRnZVZhbHVlMSArIGVkZ2VWYWx1ZTIgKiBlZGdlR2xvdztcblx0XHRcdFx0XHR2ZWM0IGZpbmFsQ29sb3IgPSBlZGdlU3RyZW5ndGggKiBtYXNrQ29sb3IuciAqIGVkZ2VWYWx1ZTtcblx0XHRcdFx0XHRpZih1c2VQYXR0ZXJuVGV4dHVyZSlcblx0XHRcdFx0XHRcdGZpbmFsQ29sb3IgKz0gKyB2aXNpYmlsaXR5RmFjdG9yICogKDEuMCAtIG1hc2tDb2xvci5yKSAqICgxLjAgLSBwYXR0ZXJuQ29sb3Iucik7XG5cdFx0XHRcdFx0Z2xfRnJhZ0NvbG9yID0gZmluYWxDb2xvcjtcblx0XHRcdFx0fWAsXG5cdFx0XHRibGVuZGluZzogQWRkaXRpdmVCbGVuZGluZyxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdHRyYW5zcGFyZW50OiB0cnVlXG5cdFx0fSApO1xuXG5cdH1cblxufVxuXG5PdXRsaW5lUGFzcy5CbHVyRGlyZWN0aW9uWCA9IG5ldyBWZWN0b3IyKCAxLjAsIDAuMCApO1xuT3V0bGluZVBhc3MuQmx1ckRpcmVjdGlvblkgPSBuZXcgVmVjdG9yMiggMC4wLCAxLjAgKTtcblxuZXhwb3J0IHsgT3V0bGluZVBhc3MgfTtcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCB7IFBhc3MgfSBmcm9tICcuL1Bhc3MuanMnO1xuXG5jb25zdCB7XG5cdENvbG9yXG59ID0gVEhSRUVcblxuY2xhc3MgUmVuZGVyUGFzcyBleHRlbmRzIFBhc3Mge1xuXG5cdGNvbnN0cnVjdG9yKCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsLCBjbGVhckNvbG9yLCBjbGVhckFscGhhICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuc2NlbmUgPSBzY2VuZTtcblx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdHRoaXMub3ZlcnJpZGVNYXRlcmlhbCA9IG92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHR0aGlzLmNsZWFyQ29sb3IgPSBjbGVhckNvbG9yO1xuXHRcdHRoaXMuY2xlYXJBbHBoYSA9ICggY2xlYXJBbHBoYSAhPT0gdW5kZWZpbmVkICkgPyBjbGVhckFscGhhIDogMDtcblxuXHRcdHRoaXMuY2xlYXIgPSB0cnVlO1xuXHRcdHRoaXMuY2xlYXJEZXB0aCA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNTd2FwID0gZmFsc2U7XG5cdFx0dGhpcy5fb2xkQ2xlYXJDb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdH1cblxuXHRyZW5kZXIoIHJlbmRlcmVyLCB3cml0ZUJ1ZmZlciwgcmVhZEJ1ZmZlciAvKiwgZGVsdGFUaW1lLCBtYXNrQWN0aXZlICovICkge1xuXG5cdFx0Y29uc3Qgb2xkQXV0b0NsZWFyID0gcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IGZhbHNlO1xuXG5cdFx0bGV0IG9sZENsZWFyQWxwaGEsIG9sZE92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHRpZiAoIHRoaXMub3ZlcnJpZGVNYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRvbGRPdmVycmlkZU1hdGVyaWFsID0gdGhpcy5zY2VuZS5vdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0XHR0aGlzLnNjZW5lLm92ZXJyaWRlTWF0ZXJpYWwgPSB0aGlzLm92ZXJyaWRlTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJDb2xvciApIHtcblxuXHRcdFx0cmVuZGVyZXIuZ2V0Q2xlYXJDb2xvciggdGhpcy5fb2xkQ2xlYXJDb2xvciApO1xuXHRcdFx0b2xkQ2xlYXJBbHBoYSA9IHJlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblxuXHRcdFx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggdGhpcy5jbGVhckNvbG9yLCB0aGlzLmNsZWFyQWxwaGEgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5jbGVhckRlcHRoICkge1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhckRlcHRoKCk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHRoaXMucmVuZGVyVG9TY3JlZW4gPyBudWxsIDogcmVhZEJ1ZmZlciApO1xuXG5cdFx0Ly8gVE9ETzogQXZvaWQgdXNpbmcgYXV0b0NsZWFyIHByb3BlcnRpZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMTU1NzEjaXNzdWVjb21tZW50LTQ2NTY2OTYwMFxuXHRcdGlmICggdGhpcy5jbGVhciApIHJlbmRlcmVyLmNsZWFyKCByZW5kZXJlci5hdXRvQ2xlYXJDb2xvciwgcmVuZGVyZXIuYXV0b0NsZWFyRGVwdGgsIHJlbmRlcmVyLmF1dG9DbGVhclN0ZW5jaWwgKTtcblx0XHRyZW5kZXJlci5yZW5kZXIoIHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhICk7XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJDb2xvciApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggdGhpcy5fb2xkQ2xlYXJDb2xvciwgb2xkQ2xlYXJBbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGhpcy5zY2VuZS5vdmVycmlkZU1hdGVyaWFsID0gb2xkT3ZlcnJpZGVNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdHJlbmRlcmVyLmF1dG9DbGVhciA9IG9sZEF1dG9DbGVhcjtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgUmVuZGVyUGFzcyB9O1xuIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBUSFJFRSB9IGZyb20gJ0AvYmFzZS9saWJzL1RocmVlJ1xuaW1wb3J0IHsgbGVycENvbG9ycyB9IGZyb20gJ0AvY29tbW9uL3V0aWxzJ1xuaW1wb3J0IHsgRWZmZWN0Q29tcG9zZXIgfSBmcm9tICdAL2Jhc2UvbGlicy9wYXNzL0VmZmVjdENvbXBvc2VyJ1xuaW1wb3J0IHsgT3V0bGluZVBhc3MgfSBmcm9tICdAL2Jhc2UvbGlicy9wYXNzL091dGxpbmVQYXNzJ1xuaW1wb3J0IHsgUmVuZGVyUGFzcyB9IGZyb20gJ0AvYmFzZS9saWJzL3Bhc3MvUmVuZGVyUGFzcy5qcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUxpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBkaXJlY3Rpb25hbExpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoJyNmZmZmZmYnLCAxKVxuXG4gIGRpcmVjdGlvbmFsTGlnaHQuY2FzdFNoYWRvdyA9IHRydWVcbiAgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dCaWFzID0gLTAuMDAxXG4gIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5uZWFyID0gMVxuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gMTAwMFxuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5tYXBTaXplLnNldCgxMDI0LCAxMDI0KVxuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5ub3JtYWxCaWFzID0gMFxuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gMTAwXG4gIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5ib3R0b20gPSAtMTAwXG4gIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTEwMFxuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSAxMDBcbiAgZGlyZWN0aW9uYWxMaWdodC5wb3NpdGlvbi5zZXQoMCwgODAwLCA0MDApXG4gIFxuICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KCcjZmZmZmZmJywgMSlcblxuICByZXR1cm4geyBkaXJlY3Rpb25hbExpZ2h0LCBhbWJpZW50TGlnaHQgfVxufVxuXG5leHBvcnQgY2xhc3MgU2t5IHtcbiAgY29uc3RydWN0b3IoQ2hhb3MpIHtcbiAgICB0aGlzLmNvbG9ycyA9IFtcbiAgICAgIG5ldyBUSFJFRS5Db2xvcigweGUzZGRjZCksXG4gICAgICBuZXcgVEhSRUUuQ29sb3IoMHhiZWNhYzYpLFxuICAgICAgbmV3IFRIUkVFLkNvbG9yKDB4ZGZlMmIzKSxcbiAgICAgIG5ldyBUSFJFRS5Db2xvcigweGQ5YzY5YiksXG4gICAgICBuZXcgVEhSRUUuQ29sb3IoMHg0MjNiMzMpLFxuICAgIF1cbiAgICB0aGlzLnRpbWUgPSAwXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKENoYW9zLndpZHRoIC8gLSAyLCBDaGFvcy53aWR0aCAvIDIsIENoYW9zLmhlaWdodCAvIDIsIENoYW9zLmhlaWdodCAvIC0gMiwgMSwgNDAwKVxuICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IHRoaXMuY29sb3JzWzBdXG4gICAgdGhpcy50b3BDb2xvciA9IHRoaXMuY29sb3JzWzBdXG4gICAgdGhpcy5ib3R0b21Db2xvciA9IHRoaXMuY29sb3JzWzBdXG4gICAgdGhpcy5jb2xvckluZGV4ID0gMFxuICAgIHRoaXMuY29sb3JDb21tb249IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZilcbiAgICB0aGlzLnJlbmRlcmVyID0gQ2hhb3MucmVuZGVyZXJcbiAgICB0aGlzLmFtYmllbnRMaWdodCA9IENoYW9zLmFtYmllbnRMaWdodFxuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLnRpbWUgPSBNYXRoLm1pbigxLCB0aGlzLnRpbWUgKyAwLjAyKVxuICAgIGlmICh0aGlzLnRpbWUgIT09IDEpIHtcbiAgICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IGxlcnBDb2xvcnMoXG4gICAgICAgIHRoaXMudG9wQ29sb3IsXG4gICAgICAgIHRoaXMuYm90dG9tQ29sb3IsXG4gICAgICAgIHRoaXMudGltZVxuICAgICAgKVxuICAgICAgaWYgKHRoaXMuY29sb3JJbmRleCA9PT0gdGhpcy5jb2xvcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLmFtYmllbnRMaWdodC5jb2xvciA9IGxlcnBDb2xvcnMoXG4gICAgICAgICAgdGhpcy50b3BDb2xvcixcbiAgICAgICAgICB0aGlzLmNvbG9yQ29tbW9uLFxuICAgICAgICAgIHRoaXMudGltZVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFtYmllbnRMaWdodC5jb2xvciA9IHRoaXMuc2NlbmUuYmFja2dyb3VuZFxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSlcbiAgfVxuICBzd2l0Y2goKSB7XG4gICAgY29uc3QgY29sb3JzID0gdGhpcy5jb2xvcnNcbiAgICBsZXQgdG9wQ29sb3JJbmRleCA9IGNvbG9ycy5pbmRleE9mKHRoaXMuYm90dG9tQ29sb3IpXG4gICAgbGV0IGJvdHRvbUNvbG9ySW5kZXggPSB0b3BDb2xvckluZGV4ICsgMVxuICAgIGlmICh0b3BDb2xvckluZGV4ID4gY29sb3JzLmxlbmd0aCAtIDEpIHRvcENvbG9ySW5kZXggPSAwXG4gICAgaWYgKGJvdHRvbUNvbG9ySW5kZXggPiBjb2xvcnMubGVuZ3RoIC0gMSkgYm90dG9tQ29sb3JJbmRleCA9IDBcbiAgICB0aGlzLnRvcENvbG9yID0gbGVycENvbG9ycyhcbiAgICAgIHRoaXMudG9wQ29sb3IsXG4gICAgICB0aGlzLmJvdHRvbUNvbG9yLFxuICAgICAgdGhpcy50aW1lXG4gICAgKVxuICAgIHRoaXMuYm90dG9tQ29sb3IgPSBjb2xvcnNbYm90dG9tQ29sb3JJbmRleF1cbiAgICB0aGlzLmNvbG9ySW5kZXggPSBib3R0b21Db2xvckluZGV4XG4gICAgdGhpcy50aW1lID0gMFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPdXRsaW5lIHtcbiAgY29uc3RydWN0b3IoY2hhb3MpIHtcbiAgICB0aGlzLmNoYW9zID0gY2hhb3NcbiAgICB0aGlzLnNjZW5lID0gY2hhb3Muc2NlbmVcbiAgICB0aGlzLmNhbWVyYSA9IGNoYW9zLmNhbWVyYVxuICAgIHRoaXMuY29tcG9zZXIgPSBuZXcgRWZmZWN0Q29tcG9zZXIoY2hhb3MucmVuZGVyZXIpXG4gICAgdGhpcy5vdXRsaW5lUGFzcyA9IG5ldyBPdXRsaW5lUGFzcyhcbiAgICAgIG5ldyBUSFJFRS5WZWN0b3IyKGNoYW9zLndpZHRoLCBjaGFvcy5oZWlnaHQpLFxuICAgICAgY2hhb3Muc2NlbmUsXG4gICAgICBjaGFvcy5jYW1lcmFcbiAgICApXG4gICAgdGhpcy5yZW5kZXJTY2VuZSA9IG5ldyBSZW5kZXJQYXNzKGNoYW9zLnNjZW5lLCBjaGFvcy5jYW1lcmEpXG4gICAgdGhpcy5jb21wb3Nlci5hZGRQYXNzKHRoaXMucmVuZGVyU2NlbmUpXG4gICAgdGhpcy5jb21wb3Nlci5hZGRQYXNzKHRoaXMub3V0bGluZVBhc3MpXG4gICAgdGhpcy5jdXN0b21PdXRsaW5lKClcbiAgfVxuICBjdXN0b21PdXRsaW5lKCkge1xuICAgIHRoaXMuc2VsZWN0Q29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHhmZmZmZmYpXG4gICAgdGhpcy5zZWxlY3RFcnJvckNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKDB4ZmY3MDRjKVxuICAgIHRoaXMuc2VsZWN0Q29sb3IuY29udmVydFNSR0JUb0xpbmVhcigpXG4gICAgdGhpcy5zZWxlY3RFcnJvckNvbG9yLmNvbnZlcnRTUkdCVG9MaW5lYXIoKVxuICAgIHRoaXMuc2V0RGlzYWJsZWQodHJ1ZSlcbiAgfVxuICBzZXREaXNhYmxlZCh0KSB7XG4gICAgY29uc3Qgb3V0bGluZVBhc3MgPSB0aGlzLm91dGxpbmVQYXNzXG4gICAgbGV0IG91dGxpbmVDb2xvciA9IG51bGxcbiAgICBpZiAodCkge1xuICAgICAgb3V0bGluZUNvbG9yID0gdGhpcy5zZWxlY3RFcnJvckNvbG9yXG4gICAgICBvdXRsaW5lUGFzcy5lZGdlU3RyZW5ndGggPSA1IC8v6L655qGG55qE5Lqu5bqmXG4gICAgICBvdXRsaW5lUGFzcy5lZGdlR2xvdyA9IDEgLy/lhYnmmZVbMCwxXVxuICAgICAgb3V0bGluZVBhc3MuZWRnZVRoaWNrbmVzcyA9IDggLy/ovrnnvJjmtZPluqZcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0bGluZUNvbG9yID0gdGhpcy5zZWxlY3RDb2xvclxuICAgICAgb3V0bGluZVBhc3MuZWRnZVN0cmVuZ3RoID0gNCAvL+i+ueahhueahOS6ruW6plxuICAgICAgb3V0bGluZVBhc3MuZWRnZUdsb3cgPSAwLjUgLy/lhYnmmZVbMCwxXVxuICAgICAgb3V0bGluZVBhc3MuZWRnZVRoaWNrbmVzcyA9IDEgLy/ovrnnvJjmtZPluqZcbiAgICB9XG4gICAgb3V0bGluZVBhc3MudmlzaWJsZUVkZ2VDb2xvci5zZXQob3V0bGluZUNvbG9yKSAvLyDovrnnvJjlj6/op4Hpg6jliIblj5HpopzoibIgc0NvbG9yWzBdLmNvbG9yXG4gICAgb3V0bGluZVBhc3MuaGlkZGVuRWRnZUNvbG9yLnNldChvdXRsaW5lQ29sb3IpIC8vIOi+uee8mOmBruaMoemDqOWIhuWPkeWFieminOiJsiBzQ29sb3JbMV0uY29sb3JcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb21wb3Nlci5yZW5kZXIoKVxuICB9XG59IiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBUSFJFRSB9IGZyb20gJ0AvYmFzZS9saWJzL1RocmVlJ1xuaW1wb3J0IEV2ZW50IGZyb20gJy4vZXZlbnQnXG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi9yZW5kZXJlcidcbmltcG9ydCBDb250cm9scyBmcm9tICcuL2NvbnRyb2xzJ1xuaW1wb3J0IHsgY3JlYXRlTGlnaHQsIFNreSwgT3V0bGluZSB9IGZyb20gJy4vZW52aXJvbm1lbnQnXG5cbmNsYXNzIENoYW9zIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgd2luZG93LkNoYW9zID0gdGhpc1xuICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuICAgIHRoaXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgIHRoaXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKHRoaXMud2lkdGggLyAtIDIsIHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIsIHRoaXMuaGVpZ2h0IC8gLSAyLCAxLCAyMDAwKVxuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKVxuICAgIHRoaXMubW91c2UgPSBuZXcgVEhSRUUuVmVjdG9yMigpXG4gICAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKClcblxuICAgIGNvbnN0IGxpZ2h0ID0gY3JlYXRlTGlnaHQoKVxuICAgIHRoaXMudGFyZ2V0T2JqZWN0ID0gbmV3IFRIUkVFLk9iamVjdDNEKClcbiAgICBsaWdodC5kaXJlY3Rpb25hbExpZ2h0LnRhcmdldCA9IHRoaXMudGFyZ2V0T2JqZWN0XG4gICAgdGhpcy5hbWJpZW50TGlnaHQgPSBsaWdodC5hbWJpZW50TGlnaHRcbiAgICB0aGlzLnNjZW5lLmFkZChsaWdodC5kaXJlY3Rpb25hbExpZ2h0KVxuICAgIHRoaXMuc2NlbmUuYWRkKGxpZ2h0LmFtYmllbnRMaWdodClcbiAgICB0aGlzLmxpZ2h0SGVscGVyID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIobGlnaHQuZGlyZWN0aW9uYWxMaWdodClcbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLnRhcmdldE9iamVjdClcbiAgICAvLyB0aGlzLnNjZW5lLmFkZCh0aGlzLmxpZ2h0SGVscGVyKVxuICAgIC8vIHRoaXMuc2NlbmUuYWRkKG5ldyBUSFJFRS5DYW1lcmFIZWxwZXIoXG4gICAgLy8gICBsaWdodC5kaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmFcbiAgICAvLyApKVxuXG4gICAgdGhpcy5jb250cm9scyA9IG5ldyBDb250cm9scyh0aGlzLmNhbWVyYSlcbiAgICB0aGlzLmNvbnRyb2xzRGlzYWJsZWQgPSB0cnVlXG5cbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi5zZXQoNDAwLCA2MDAsIDQwMClcbiAgICB0aGlzLmNhbWVyYS56b29tID0gNlxuICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxuICAgIHRoaXMuY2FtZXJhLmxvb2tBdChuZXcgVEhSRUUuVmVjdG9yMygpKVxuICAgIHRoaXMuZXZlbnQgPSBuZXcgRXZlbnQodGhpcylcblxuICAgIGNvbnN0IHNpemUgPSAzMDBcbiAgICBjb25zdCBncmlkSGVscGVyID0gbmV3IFRIUkVFLkdyaWRIZWxwZXIoc2l6ZSAqIDEwLCBzaXplKVxuICAgIGdyaWRIZWxwZXIucG9zaXRpb24ueCA9IC01XG4gICAgZ3JpZEhlbHBlci5wb3NpdGlvbi56ID0gLTVcbiAgICAvLyB0aGlzLnNjZW5lLmFkZChncmlkSGVscGVyKVxuICAgIC8vIHRoaXMuc2NlbmUuYWRkKG5ldyBUSFJFRS5BeGVzSGVscGVyKDMwMCkpXG5cbiAgICB0aGlzLnNreSA9IG5ldyBTa3kodGhpcylcbiAgICB0aGlzLm91dGxpbmUgPSBuZXcgT3V0bGluZSh0aGlzKVxuICAgIHRoaXMuZ3JpZFNpemUgPSAxMFxuICB9XG4gIHN0YXJ0KCkge1xuICAgIHRoaXMubG9vcCgpXG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMudGFyZ2V0T2JqZWN0LnBvc2l0aW9uLnNldChcbiAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnggLSA0MDAsXG4gICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi55IC0gNjAwLFxuICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24ueiAtIDQwMFxuICAgIClcbiAgICB0aGlzLnNjZW5lLmNoaWxkcmVuLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoaXRlbS5pc0N1c3RvbSkge1xuICAgICAgICBpdGVtLnVwZGF0ZSgpXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLnJlbmRlcmVyLmNsZWFyKClcbiAgICB0aGlzLnNreS5yZW5kZXIoKVxuICAgIHRoaXMub3V0bGluZS5yZW5kZXIoKVxuICB9XG4gIGxvb3AoKSB7XG4gICAgLy8g5Li75b6q546vXG4gICAgdGhpcy5yZW5kZXIoKVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmxvb3AoKSlcbiAgfVxuICBnZXQgc2VsZWN0ZWRPYmplY3RzKCkge1xuICAgIHJldHVybiB0aGlzLm91dGxpbmUub3V0bGluZVBhc3Muc2VsZWN0ZWRPYmplY3RzXG4gIH1cbiAgc2V0IHNlbGVjdGVkT2JqZWN0cyhvYmpzKSB7XG4gICAgaWYgKG9ianMpIHtcbiAgICAgIHRoaXMuc2VsZWN0SWQgPSBvYmpzWzBdLmlkXG4gICAgICB0aGlzLm91dGxpbmUub3V0bGluZVBhc3Muc2VsZWN0ZWRPYmplY3RzID0gb2Jqc1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdElkID0gbnVsbFxuICAgICAgdGhpcy5vdXRsaW5lLm91dGxpbmVQYXNzLnNlbGVjdGVkT2JqZWN0cyA9IFtdXG4gICAgfVxuICB9XG4gIHNldFNlbGVjdGVkT2JqZWN0RGlzYWJsZWQodCkge1xuICAgIHRoaXMub3V0bGluZS5zZXREaXNhYmxlZCh0KVxuICB9XG4gIHByZXZlbnREZWZhdWx0KCkge1xuICAgIHRoaXMuZXZlbnQuc3RvcEV2ZW50UGFzcyA9IHRydWVcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQ2hhb3MoKSIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmNvbnN0IHtcblx0QnVmZmVyR2VvbWV0cnksXG5cdEZpbGVMb2FkZXIsXG5cdEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUsXG5cdEdyb3VwLFxuXHRMaW5lQmFzaWNNYXRlcmlhbCxcblx0TGluZVNlZ21lbnRzLFxuXHRMb2FkZXIsXG5cdE1hdGVyaWFsLFxuXHRNZXNoLFxuXHRNZXNoUGhvbmdNYXRlcmlhbCxcblx0UG9pbnRzLFxuXHRQb2ludHNNYXRlcmlhbCxcblx0VmVjdG9yM1xufSA9IFRIUkVFXG5cbi8vIG8gb2JqZWN0X25hbWUgfCBnIGdyb3VwX25hbWVcbmNvbnN0IF9vYmplY3RfcGF0dGVybiA9IC9eW29nXVxccyooLispPy87XG4vLyBtdGxsaWIgZmlsZV9yZWZlcmVuY2VcbmNvbnN0IF9tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4gPSAvXm10bGxpYiAvO1xuLy8gdXNlbXRsIG1hdGVyaWFsX25hbWVcbmNvbnN0IF9tYXRlcmlhbF91c2VfcGF0dGVybiA9IC9edXNlbXRsIC87XG4vLyB1c2VtYXAgbWFwX25hbWVcbmNvbnN0IF9tYXBfdXNlX3BhdHRlcm4gPSAvXnVzZW1hcCAvO1xuXG5jb25zdCBfdkEgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3ZCID0gbmV3IFZlY3RvcjMoKTtcbmNvbnN0IF92QyA9IG5ldyBWZWN0b3IzKCk7XG5cbmNvbnN0IF9hYiA9IG5ldyBWZWN0b3IzKCk7XG5jb25zdCBfY2IgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBQYXJzZXJTdGF0ZSgpIHtcblxuXHRjb25zdCBzdGF0ZSA9IHtcblx0XHRvYmplY3RzOiBbXSxcblx0XHRvYmplY3Q6IHt9LFxuXG5cdFx0dmVydGljZXM6IFtdLFxuXHRcdG5vcm1hbHM6IFtdLFxuXHRcdGNvbG9yczogW10sXG5cdFx0dXZzOiBbXSxcblxuXHRcdG1hdGVyaWFsczoge30sXG5cdFx0bWF0ZXJpYWxMaWJyYXJpZXM6IFtdLFxuXG5cdFx0c3RhcnRPYmplY3Q6IGZ1bmN0aW9uICggbmFtZSwgZnJvbURlY2xhcmF0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgY3VycmVudCBvYmplY3QgKGluaXRpYWwgZnJvbSByZXNldCkgaXMgbm90IGZyb20gYSBnL28gZGVjbGFyYXRpb24gaW4gdGhlIHBhcnNlZFxuXHRcdFx0Ly8gZmlsZS4gV2UgbmVlZCB0byB1c2UgaXQgZm9yIHRoZSBmaXJzdCBwYXJzZWQgZy9vIHRvIGtlZXAgdGhpbmdzIGluIHN5bmMuXG5cdFx0XHRpZiAoIHRoaXMub2JqZWN0ICYmIHRoaXMub2JqZWN0LmZyb21EZWNsYXJhdGlvbiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0dGhpcy5vYmplY3QubmFtZSA9IG5hbWU7XG5cdFx0XHRcdHRoaXMub2JqZWN0LmZyb21EZWNsYXJhdGlvbiA9ICggZnJvbURlY2xhcmF0aW9uICE9PSBmYWxzZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcHJldmlvdXNNYXRlcmlhbCA9ICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpIDogdW5kZWZpbmVkICk7XG5cblx0XHRcdGlmICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJyApIHtcblxuXHRcdFx0XHR0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm9iamVjdCA9IHtcblx0XHRcdFx0bmFtZTogbmFtZSB8fCAnJyxcblx0XHRcdFx0ZnJvbURlY2xhcmF0aW9uOiAoIGZyb21EZWNsYXJhdGlvbiAhPT0gZmFsc2UgKSxcblxuXHRcdFx0XHRnZW9tZXRyeToge1xuXHRcdFx0XHRcdHZlcnRpY2VzOiBbXSxcblx0XHRcdFx0XHRub3JtYWxzOiBbXSxcblx0XHRcdFx0XHRjb2xvcnM6IFtdLFxuXHRcdFx0XHRcdHV2czogW10sXG5cdFx0XHRcdFx0aGFzVVZJbmRpY2VzOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRtYXRlcmlhbHM6IFtdLFxuXHRcdFx0XHRzbW9vdGg6IHRydWUsXG5cblx0XHRcdFx0c3RhcnRNYXRlcmlhbDogZnVuY3Rpb24gKCBuYW1lLCBsaWJyYXJpZXMgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBwcmV2aW91cyA9IHRoaXMuX2ZpbmFsaXplKCBmYWxzZSApO1xuXG5cdFx0XHRcdFx0Ly8gTmV3IHVzZW10bCBkZWNsYXJhdGlvbiBvdmVyd3JpdGVzIGFuIGluaGVyaXRlZCBtYXRlcmlhbCwgZXhjZXB0IGlmIGZhY2VzIHdlcmUgZGVjbGFyZWRcblx0XHRcdFx0XHQvLyBhZnRlciB0aGUgbWF0ZXJpYWwsIHRoZW4gaXQgbXVzdCBiZSBwcmVzZXJ2ZWQgZm9yIHByb3BlciBNdWx0aU1hdGVyaWFsIGNvbnRpbnVhdGlvbi5cblx0XHRcdFx0XHRpZiAoIHByZXZpb3VzICYmICggcHJldmlvdXMuaW5oZXJpdGVkIHx8IHByZXZpb3VzLmdyb3VwQ291bnQgPD0gMCApICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLm1hdGVyaWFscy5zcGxpY2UoIHByZXZpb3VzLmluZGV4LCAxICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IHtcblx0XHRcdFx0XHRcdGluZGV4OiB0aGlzLm1hdGVyaWFscy5sZW5ndGgsXG5cdFx0XHRcdFx0XHRuYW1lOiBuYW1lIHx8ICcnLFxuXHRcdFx0XHRcdFx0bXRsbGliOiAoIEFycmF5LmlzQXJyYXkoIGxpYnJhcmllcyApICYmIGxpYnJhcmllcy5sZW5ndGggPiAwID8gbGlicmFyaWVzWyBsaWJyYXJpZXMubGVuZ3RoIC0gMSBdIDogJycgKSxcblx0XHRcdFx0XHRcdHNtb290aDogKCBwcmV2aW91cyAhPT0gdW5kZWZpbmVkID8gcHJldmlvdXMuc21vb3RoIDogdGhpcy5zbW9vdGggKSxcblx0XHRcdFx0XHRcdGdyb3VwU3RhcnQ6ICggcHJldmlvdXMgIT09IHVuZGVmaW5lZCA/IHByZXZpb3VzLmdyb3VwRW5kIDogMCApLFxuXHRcdFx0XHRcdFx0Z3JvdXBFbmQ6IC0gMSxcblx0XHRcdFx0XHRcdGdyb3VwQ291bnQ6IC0gMSxcblx0XHRcdFx0XHRcdGluaGVyaXRlZDogZmFsc2UsXG5cblx0XHRcdFx0XHRcdGNsb25lOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGNsb25lZCA9IHtcblx0XHRcdFx0XHRcdFx0XHRpbmRleDogKCB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gaW5kZXggOiB0aGlzLmluZGV4ICksXG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogdGhpcy5uYW1lLFxuXHRcdFx0XHRcdFx0XHRcdG10bGxpYjogdGhpcy5tdGxsaWIsXG5cdFx0XHRcdFx0XHRcdFx0c21vb3RoOiB0aGlzLnNtb290aCxcblx0XHRcdFx0XHRcdFx0XHRncm91cFN0YXJ0OiAwLFxuXHRcdFx0XHRcdFx0XHRcdGdyb3VwRW5kOiAtIDEsXG5cdFx0XHRcdFx0XHRcdFx0Z3JvdXBDb3VudDogLSAxLFxuXHRcdFx0XHRcdFx0XHRcdGluaGVyaXRlZDogZmFsc2Vcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0Y2xvbmVkLmNsb25lID0gdGhpcy5jbG9uZS5iaW5kKCBjbG9uZWQgKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGNsb25lZDtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHR0aGlzLm1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Y3VycmVudE1hdGVyaWFsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm1hdGVyaWFsc1sgdGhpcy5tYXRlcmlhbHMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdF9maW5hbGl6ZTogZnVuY3Rpb24gKCBlbmQgKSB7XG5cblx0XHRcdFx0XHRjb25zdCBsYXN0TXVsdGlNYXRlcmlhbCA9IHRoaXMuY3VycmVudE1hdGVyaWFsKCk7XG5cdFx0XHRcdFx0aWYgKCBsYXN0TXVsdGlNYXRlcmlhbCAmJiBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCA9PT0gLSAxICkge1xuXG5cdFx0XHRcdFx0XHRsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoIC8gMztcblx0XHRcdFx0XHRcdGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwQ291bnQgPSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCAtIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwU3RhcnQ7XG5cdFx0XHRcdFx0XHRsYXN0TXVsdGlNYXRlcmlhbC5pbmhlcml0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIElnbm9yZSBvYmplY3RzIHRhaWwgbWF0ZXJpYWxzIGlmIG5vIGZhY2UgZGVjbGFyYXRpb25zIGZvbGxvd2VkIHRoZW0gYmVmb3JlIGEgbmV3IG8vZyBzdGFydGVkLlxuXHRcdFx0XHRcdGlmICggZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdFx0XHRcdGZvciAoIGxldCBtaSA9IHRoaXMubWF0ZXJpYWxzLmxlbmd0aCAtIDE7IG1pID49IDA7IG1pIC0tICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdGhpcy5tYXRlcmlhbHNbIG1pIF0uZ3JvdXBDb3VudCA8PSAwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5tYXRlcmlhbHMuc3BsaWNlKCBtaSwgMSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gR3VhcmFudGVlIGF0IGxlYXN0IG9uZSBlbXB0eSBtYXRlcmlhbCwgdGhpcyBtYWtlcyB0aGUgY3JlYXRpb24gbGF0ZXIgbW9yZSBzdHJhaWdodCBmb3J3YXJkLlxuXHRcdFx0XHRcdGlmICggZW5kICYmIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5tYXRlcmlhbHMucHVzaCgge1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnJyxcblx0XHRcdFx0XHRcdFx0c21vb3RoOiB0aGlzLnNtb290aFxuXHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGxhc3RNdWx0aU1hdGVyaWFsO1xuXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdC8vIEluaGVyaXQgcHJldmlvdXMgb2JqZWN0cyBtYXRlcmlhbC5cblx0XHRcdC8vIFNwZWMgdGVsbHMgdXMgdGhhdCBhIGRlY2xhcmVkIG1hdGVyaWFsIG11c3QgYmUgc2V0IHRvIGFsbCBvYmplY3RzIHVudGlsIGEgbmV3IG1hdGVyaWFsIGlzIGRlY2xhcmVkLlxuXHRcdFx0Ly8gSWYgYSB1c2VtdGwgZGVjbGFyYXRpb24gaXMgZW5jb3VudGVyZWQgd2hpbGUgdGhpcyBuZXcgb2JqZWN0IGlzIGJlaW5nIHBhcnNlZCwgaXQgd2lsbFxuXHRcdFx0Ly8gb3ZlcndyaXRlIHRoZSBpbmhlcml0ZWQgbWF0ZXJpYWwuIEV4Y2VwdGlvbiBiZWluZyB0aGF0IHRoZXJlIHdhcyBhbHJlYWR5IGZhY2UgZGVjbGFyYXRpb25zXG5cdFx0XHQvLyB0byB0aGUgaW5oZXJpdGVkIG1hdGVyaWFsLCB0aGVuIGl0IHdpbGwgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG5cblx0XHRcdGlmICggcHJldmlvdXNNYXRlcmlhbCAmJiBwcmV2aW91c01hdGVyaWFsLm5hbWUgJiYgdHlwZW9mIHByZXZpb3VzTWF0ZXJpYWwuY2xvbmUgPT09ICdmdW5jdGlvbicgKSB7XG5cblx0XHRcdFx0Y29uc3QgZGVjbGFyZWQgPSBwcmV2aW91c01hdGVyaWFsLmNsb25lKCAwICk7XG5cdFx0XHRcdGRlY2xhcmVkLmluaGVyaXRlZCA9IHRydWU7XG5cdFx0XHRcdHRoaXMub2JqZWN0Lm1hdGVyaWFscy5wdXNoKCBkZWNsYXJlZCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMub2JqZWN0cy5wdXNoKCB0aGlzLm9iamVjdCApO1xuXG5cdFx0fSxcblxuXHRcdGZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggdGhpcy5vYmplY3QgJiYgdHlwZW9mIHRoaXMub2JqZWN0Ll9maW5hbGl6ZSA9PT0gJ2Z1bmN0aW9uJyApIHtcblxuXHRcdFx0XHR0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdHBhcnNlVmVydGV4SW5kZXg6IGZ1bmN0aW9uICggdmFsdWUsIGxlbiApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBwYXJzZUludCggdmFsdWUsIDEwICk7XG5cdFx0XHRyZXR1cm4gKCBpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAzICkgKiAzO1xuXG5cdFx0fSxcblxuXHRcdHBhcnNlTm9ybWFsSW5kZXg6IGZ1bmN0aW9uICggdmFsdWUsIGxlbiApIHtcblxuXHRcdFx0Y29uc3QgaW5kZXggPSBwYXJzZUludCggdmFsdWUsIDEwICk7XG5cdFx0XHRyZXR1cm4gKCBpbmRleCA+PSAwID8gaW5kZXggLSAxIDogaW5kZXggKyBsZW4gLyAzICkgKiAzO1xuXG5cdFx0fSxcblxuXHRcdHBhcnNlVVZJbmRleDogZnVuY3Rpb24gKCB2YWx1ZSwgbGVuICkge1xuXG5cdFx0XHRjb25zdCBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTtcblx0XHRcdHJldHVybiAoIGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDIgKSAqIDI7XG5cblx0XHR9LFxuXG5cdFx0YWRkVmVydGV4OiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHRcdGNvbnN0IHNyYyA9IHRoaXMudmVydGljZXM7XG5cdFx0XHRjb25zdCBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0ZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdLCBzcmNbIGEgKyAyIF0gKTtcblx0XHRcdGRzdC5wdXNoKCBzcmNbIGIgKyAwIF0sIHNyY1sgYiArIDEgXSwgc3JjWyBiICsgMiBdICk7XG5cdFx0XHRkc3QucHVzaCggc3JjWyBjICsgMCBdLCBzcmNbIGMgKyAxIF0sIHNyY1sgYyArIDIgXSApO1xuXG5cdFx0fSxcblxuXHRcdGFkZFZlcnRleFBvaW50OiBmdW5jdGlvbiAoIGEgKSB7XG5cblx0XHRcdGNvbnN0IHNyYyA9IHRoaXMudmVydGljZXM7XG5cdFx0XHRjb25zdCBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0ZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdLCBzcmNbIGEgKyAyIF0gKTtcblxuXHRcdH0sXG5cblx0XHRhZGRWZXJ0ZXhMaW5lOiBmdW5jdGlvbiAoIGEgKSB7XG5cblx0XHRcdGNvbnN0IHNyYyA9IHRoaXMudmVydGljZXM7XG5cdFx0XHRjb25zdCBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcblxuXHRcdFx0ZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdLCBzcmNbIGEgKyAyIF0gKTtcblxuXHRcdH0sXG5cblx0XHRhZGROb3JtYWw6IGZ1bmN0aW9uICggYSwgYiwgYyApIHtcblxuXHRcdFx0Y29uc3Qgc3JjID0gdGhpcy5ub3JtYWxzO1xuXHRcdFx0Y29uc3QgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkubm9ybWFscztcblxuXHRcdFx0ZHN0LnB1c2goIHNyY1sgYSArIDAgXSwgc3JjWyBhICsgMSBdLCBzcmNbIGEgKyAyIF0gKTtcblx0XHRcdGRzdC5wdXNoKCBzcmNbIGIgKyAwIF0sIHNyY1sgYiArIDEgXSwgc3JjWyBiICsgMiBdICk7XG5cdFx0XHRkc3QucHVzaCggc3JjWyBjICsgMCBdLCBzcmNbIGMgKyAxIF0sIHNyY1sgYyArIDIgXSApO1xuXG5cdFx0fSxcblxuXHRcdGFkZEZhY2VOb3JtYWw6IGZ1bmN0aW9uICggYSwgYiwgYyApIHtcblxuXHRcdFx0Y29uc3Qgc3JjID0gdGhpcy52ZXJ0aWNlcztcblx0XHRcdGNvbnN0IGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5Lm5vcm1hbHM7XG5cblx0XHRcdF92QS5mcm9tQXJyYXkoIHNyYywgYSApO1xuXHRcdFx0X3ZCLmZyb21BcnJheSggc3JjLCBiICk7XG5cdFx0XHRfdkMuZnJvbUFycmF5KCBzcmMsIGMgKTtcblxuXHRcdFx0X2NiLnN1YlZlY3RvcnMoIF92QywgX3ZCICk7XG5cdFx0XHRfYWIuc3ViVmVjdG9ycyggX3ZBLCBfdkIgKTtcblx0XHRcdF9jYi5jcm9zcyggX2FiICk7XG5cblx0XHRcdF9jYi5ub3JtYWxpemUoKTtcblxuXHRcdFx0ZHN0LnB1c2goIF9jYi54LCBfY2IueSwgX2NiLnogKTtcblx0XHRcdGRzdC5wdXNoKCBfY2IueCwgX2NiLnksIF9jYi56ICk7XG5cdFx0XHRkc3QucHVzaCggX2NiLngsIF9jYi55LCBfY2IueiApO1xuXG5cdFx0fSxcblxuXHRcdGFkZENvbG9yOiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHRcdGNvbnN0IHNyYyA9IHRoaXMuY29sb3JzO1xuXHRcdFx0Y29uc3QgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkuY29sb3JzO1xuXG5cdFx0XHRpZiAoIHNyY1sgYSBdICE9PSB1bmRlZmluZWQgKSBkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0sIHNyY1sgYSArIDIgXSApO1xuXHRcdFx0aWYgKCBzcmNbIGIgXSAhPT0gdW5kZWZpbmVkICkgZHN0LnB1c2goIHNyY1sgYiArIDAgXSwgc3JjWyBiICsgMSBdLCBzcmNbIGIgKyAyIF0gKTtcblx0XHRcdGlmICggc3JjWyBjIF0gIT09IHVuZGVmaW5lZCApIGRzdC5wdXNoKCBzcmNbIGMgKyAwIF0sIHNyY1sgYyArIDEgXSwgc3JjWyBjICsgMiBdICk7XG5cblx0XHR9LFxuXG5cdFx0YWRkVVY6IGZ1bmN0aW9uICggYSwgYiwgYyApIHtcblxuXHRcdFx0Y29uc3Qgc3JjID0gdGhpcy51dnM7XG5cdFx0XHRjb25zdCBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7XG5cblx0XHRcdGRzdC5wdXNoKCBzcmNbIGEgKyAwIF0sIHNyY1sgYSArIDEgXSApO1xuXHRcdFx0ZHN0LnB1c2goIHNyY1sgYiArIDAgXSwgc3JjWyBiICsgMSBdICk7XG5cdFx0XHRkc3QucHVzaCggc3JjWyBjICsgMCBdLCBzcmNbIGMgKyAxIF0gKTtcblxuXHRcdH0sXG5cblx0XHRhZGREZWZhdWx0VVY6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc3QgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuXG5cdFx0XHRkc3QucHVzaCggMCwgMCApO1xuXHRcdFx0ZHN0LnB1c2goIDAsIDAgKTtcblx0XHRcdGRzdC5wdXNoKCAwLCAwICk7XG5cblx0XHR9LFxuXG5cdFx0YWRkVVZMaW5lOiBmdW5jdGlvbiAoIGEgKSB7XG5cblx0XHRcdGNvbnN0IHNyYyA9IHRoaXMudXZzO1xuXHRcdFx0Y29uc3QgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuXG5cdFx0XHRkc3QucHVzaCggc3JjWyBhICsgMCBdLCBzcmNbIGEgKyAxIF0gKTtcblxuXHRcdH0sXG5cblx0XHRhZGRGYWNlOiBmdW5jdGlvbiAoIGEsIGIsIGMsIHVhLCB1YiwgdWMsIG5hLCBuYiwgbmMgKSB7XG5cblx0XHRcdGNvbnN0IHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuXHRcdFx0bGV0IGlhID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KCBhLCB2TGVuICk7XG5cdFx0XHRsZXQgaWIgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIGIsIHZMZW4gKTtcblx0XHRcdGxldCBpYyA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggYywgdkxlbiApO1xuXG5cdFx0XHR0aGlzLmFkZFZlcnRleCggaWEsIGliLCBpYyApO1xuXHRcdFx0dGhpcy5hZGRDb2xvciggaWEsIGliLCBpYyApO1xuXG5cdFx0XHQvLyBub3JtYWxzXG5cblx0XHRcdGlmICggbmEgIT09IHVuZGVmaW5lZCAmJiBuYSAhPT0gJycgKSB7XG5cblx0XHRcdFx0Y29uc3QgbkxlbiA9IHRoaXMubm9ybWFscy5sZW5ndGg7XG5cblx0XHRcdFx0aWEgPSB0aGlzLnBhcnNlTm9ybWFsSW5kZXgoIG5hLCBuTGVuICk7XG5cdFx0XHRcdGliID0gdGhpcy5wYXJzZU5vcm1hbEluZGV4KCBuYiwgbkxlbiApO1xuXHRcdFx0XHRpYyA9IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmMsIG5MZW4gKTtcblxuXHRcdFx0XHR0aGlzLmFkZE5vcm1hbCggaWEsIGliLCBpYyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuYWRkRmFjZU5vcm1hbCggaWEsIGliLCBpYyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHV2c1xuXG5cdFx0XHRpZiAoIHVhICE9PSB1bmRlZmluZWQgJiYgdWEgIT09ICcnICkge1xuXG5cdFx0XHRcdGNvbnN0IHV2TGVuID0gdGhpcy51dnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlhID0gdGhpcy5wYXJzZVVWSW5kZXgoIHVhLCB1dkxlbiApO1xuXHRcdFx0XHRpYiA9IHRoaXMucGFyc2VVVkluZGV4KCB1YiwgdXZMZW4gKTtcblx0XHRcdFx0aWMgPSB0aGlzLnBhcnNlVVZJbmRleCggdWMsIHV2TGVuICk7XG5cblx0XHRcdFx0dGhpcy5hZGRVViggaWEsIGliLCBpYyApO1xuXG5cdFx0XHRcdHRoaXMub2JqZWN0Lmdlb21ldHJ5Lmhhc1VWSW5kaWNlcyA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gYWRkIHBsYWNlaG9sZGVyIHZhbHVlcyAoZm9yIGluY29uc2lzdGVudCBmYWNlIGRlZmluaXRpb25zKVxuXG5cdFx0XHRcdHRoaXMuYWRkRGVmYXVsdFVWKCk7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRhZGRQb2ludEdlb21ldHJ5OiBmdW5jdGlvbiAoIHZlcnRpY2VzICkge1xuXG5cdFx0XHR0aGlzLm9iamVjdC5nZW9tZXRyeS50eXBlID0gJ1BvaW50cyc7XG5cblx0XHRcdGNvbnN0IHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggbGV0IHZpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgdmkgPCBsOyB2aSArKyApIHtcblxuXHRcdFx0XHRjb25zdCBpbmRleCA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggdmVydGljZXNbIHZpIF0sIHZMZW4gKTtcblxuXHRcdFx0XHR0aGlzLmFkZFZlcnRleFBvaW50KCBpbmRleCApO1xuXHRcdFx0XHR0aGlzLmFkZENvbG9yKCBpbmRleCApO1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0YWRkTGluZUdlb21ldHJ5OiBmdW5jdGlvbiAoIHZlcnRpY2VzLCB1dnMgKSB7XG5cblx0XHRcdHRoaXMub2JqZWN0Lmdlb21ldHJ5LnR5cGUgPSAnTGluZSc7XG5cblx0XHRcdGNvbnN0IHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcblx0XHRcdGNvbnN0IHV2TGVuID0gdGhpcy51dnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCBsZXQgdmkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyB2aSA8IGw7IHZpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYWRkVmVydGV4TGluZSggdGhpcy5wYXJzZVZlcnRleEluZGV4KCB2ZXJ0aWNlc1sgdmkgXSwgdkxlbiApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggbGV0IHV2aSA9IDAsIGwgPSB1dnMubGVuZ3RoOyB1dmkgPCBsOyB1dmkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5hZGRVVkxpbmUoIHRoaXMucGFyc2VVVkluZGV4KCB1dnNbIHV2aSBdLCB1dkxlbiApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHN0YXRlLnN0YXJ0T2JqZWN0KCAnJywgZmFsc2UgKTtcblxuXHRyZXR1cm4gc3RhdGU7XG5cbn1cblxuLy9cblxuY2xhc3MgT0JKTG9hZGVyIGV4dGVuZHMgTG9hZGVyIHtcblxuXHRjb25zdHJ1Y3RvciggbWFuYWdlciApIHtcblxuXHRcdHN1cGVyKCBtYW5hZ2VyICk7XG5cblx0XHR0aGlzLm1hdGVyaWFscyA9IG51bGw7XG5cblx0fVxuXG5cdGxvYWQoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0Y29uc3Qgc2NvcGUgPSB0aGlzO1xuXG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIuc2V0UmVxdWVzdEhlYWRlciggdGhpcy5yZXF1ZXN0SGVhZGVyICk7XG5cdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdGhpcy53aXRoQ3JlZGVudGlhbHMgKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0b25Mb2FkKCBzY29wZS5wYXJzZSggdGV4dCApICk7XG5cblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciApIHtcblxuXHRcdFx0XHRcdG9uRXJyb3IoIGUgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cblx0XHRcdH1cblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9XG5cblx0c2V0TWF0ZXJpYWxzKCBtYXRlcmlhbHMgKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxuXHRwYXJzZSggdGV4dCApIHtcblx0XHRjb25zdCBzdGF0ZSA9IG5ldyBQYXJzZXJTdGF0ZSgpO1xuXG5cdFx0aWYgKCB0ZXh0LmluZGV4T2YoICdcXHJcXG4nICkgIT09IC0gMSApIHtcblxuXHRcdFx0Ly8gVGhpcyBpcyBmYXN0ZXIgdGhhbiBTdHJpbmcuc3BsaXQgd2l0aCByZWdleCB0aGF0IHNwbGl0cyBvbiBib3RoXG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCAvXFxyXFxuL2csICdcXG4nICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRleHQuaW5kZXhPZiggJ1xcXFxcXG4nICkgIT09IC0gMSApIHtcblxuXHRcdFx0Ly8gam9pbiBsaW5lcyBzZXBhcmF0ZWQgYnkgYSBsaW5lIGNvbnRpbnVhdGlvbiBjaGFyYWN0ZXIgKFxcKVxuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggL1xcXFxcXG4vZywgJycgKTtcblxuXHRcdH1cblxuXHRcdGNvbnN0IGxpbmVzID0gdGV4dC5zcGxpdCggJ1xcbicgKTtcblx0XHRsZXQgbGluZSA9ICcnLCBsaW5lRmlyc3RDaGFyID0gJyc7XG5cdFx0bGV0IGxpbmVMZW5ndGggPSAwO1xuXHRcdGxldCByZXN1bHQgPSBbXTtcblxuXHRcdC8vIEZhc3RlciB0byBqdXN0IHRyaW0gbGVmdCBzaWRlIG9mIHRoZSBsaW5lLiBVc2UgaWYgYXZhaWxhYmxlLlxuXHRcdGNvbnN0IHRyaW1MZWZ0ID0gKCB0eXBlb2YgJycudHJpbUxlZnQgPT09ICdmdW5jdGlvbicgKTtcblxuXHRcdGZvciAoIGxldCBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGxpbmUgPSBsaW5lc1sgaSBdO1xuXG5cdFx0XHRsaW5lID0gdHJpbUxlZnQgPyBsaW5lLnRyaW1MZWZ0KCkgOiBsaW5lLnRyaW0oKTtcblxuXHRcdFx0bGluZUxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIGxpbmVMZW5ndGggPT09IDAgKSBjb250aW51ZTtcblxuXHRcdFx0bGluZUZpcnN0Q2hhciA9IGxpbmUuY2hhckF0KCAwICk7XG5cblx0XHRcdC8vIEB0b2RvIGludm9rZSBwYXNzZWQgaW4gaGFuZGxlciBpZiBhbnlcblx0XHRcdGlmICggbGluZUZpcnN0Q2hhciA9PT0gJyMnICkgY29udGludWU7XG5cblx0XHRcdGlmICggbGluZUZpcnN0Q2hhciA9PT0gJ3YnICkge1xuXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSBsaW5lLnNwbGl0KCAvXFxzKy8gKTtcblxuXHRcdFx0XHRzd2l0Y2ggKCBkYXRhWyAwIF0gKSB7XG5cblx0XHRcdFx0XHRjYXNlICd2Jzpcblx0XHRcdFx0XHRcdHN0YXRlLnZlcnRpY2VzLnB1c2goXG5cdFx0XHRcdFx0XHRcdHBhcnNlRmxvYXQoIGRhdGFbIDEgXSApLFxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBkYXRhWyAyIF0gKSxcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgMyBdIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRpZiAoIGRhdGEubGVuZ3RoID49IDcgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuY29sb3JzLnB1c2goXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgNCBdICksXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgNSBdICksXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgNiBdIClcblxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIGlmIG5vIGNvbG9ycyBhcmUgZGVmaW5lZCwgYWRkIHBsYWNlaG9sZGVycyBzbyBjb2xvciBhbmQgdmVydGV4IGluZGljZXMgbWF0Y2hcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5jb2xvcnMucHVzaCggdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3ZuJzpcblx0XHRcdFx0XHRcdHN0YXRlLm5vcm1hbHMucHVzaChcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgMSBdICksXG5cdFx0XHRcdFx0XHRcdHBhcnNlRmxvYXQoIGRhdGFbIDIgXSApLFxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBkYXRhWyAzIF0gKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3Z0Jzpcblx0XHRcdFx0XHRcdHN0YXRlLnV2cy5wdXNoKFxuXHRcdFx0XHRcdFx0XHRwYXJzZUZsb2F0KCBkYXRhWyAxIF0gKSxcblx0XHRcdFx0XHRcdFx0cGFyc2VGbG9hdCggZGF0YVsgMiBdIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpbmVGaXJzdENoYXIgPT09ICdmJyApIHtcblxuXHRcdFx0XHRjb25zdCBsaW5lRGF0YSA9IGxpbmUuc3Vic3RyKCAxICkudHJpbSgpO1xuXHRcdFx0XHRjb25zdCB2ZXJ0ZXhEYXRhID0gbGluZURhdGEuc3BsaXQoIC9cXHMrLyApO1xuXHRcdFx0XHRjb25zdCBmYWNlVmVydGljZXMgPSBbXTtcblxuXHRcdFx0XHQvLyBQYXJzZSB0aGUgZmFjZSB2ZXJ0ZXggZGF0YSBpbnRvIGFuIGVhc3kgdG8gd29yayB3aXRoIGZvcm1hdFxuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMCwgamwgPSB2ZXJ0ZXhEYXRhLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmVydGV4ID0gdmVydGV4RGF0YVsgaiBdO1xuXG5cdFx0XHRcdFx0aWYgKCB2ZXJ0ZXgubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3QgdmVydGV4UGFydHMgPSB2ZXJ0ZXguc3BsaXQoICcvJyApO1xuXHRcdFx0XHRcdFx0ZmFjZVZlcnRpY2VzLnB1c2goIHZlcnRleFBhcnRzICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIERyYXcgYW4gZWRnZSBiZXR3ZWVuIHRoZSBmaXJzdCB2ZXJ0ZXggYW5kIGFsbCBzdWJzZXF1ZW50IHZlcnRpY2VzIHRvIGZvcm0gYW4gbi1nb25cblxuXHRcdFx0XHRjb25zdCB2MSA9IGZhY2VWZXJ0aWNlc1sgMCBdO1xuXG5cdFx0XHRcdGZvciAoIGxldCBqID0gMSwgamwgPSBmYWNlVmVydGljZXMubGVuZ3RoIC0gMTsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdjIgPSBmYWNlVmVydGljZXNbIGogXTtcblx0XHRcdFx0XHRjb25zdCB2MyA9IGZhY2VWZXJ0aWNlc1sgaiArIDEgXTtcblxuXHRcdFx0XHRcdHN0YXRlLmFkZEZhY2UoXG5cdFx0XHRcdFx0XHR2MVsgMCBdLCB2MlsgMCBdLCB2M1sgMCBdLFxuXHRcdFx0XHRcdFx0djFbIDEgXSwgdjJbIDEgXSwgdjNbIDEgXSxcblx0XHRcdFx0XHRcdHYxWyAyIF0sIHYyWyAyIF0sIHYzWyAyIF1cblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbGluZUZpcnN0Q2hhciA9PT0gJ2wnICkge1xuXG5cdFx0XHRcdGNvbnN0IGxpbmVQYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKCAxICkudHJpbSgpLnNwbGl0KCAnICcgKTtcblx0XHRcdFx0bGV0IGxpbmVWZXJ0aWNlcyA9IFtdO1xuXHRcdFx0XHRjb25zdCBsaW5lVVZzID0gW107XG5cblx0XHRcdFx0aWYgKCBsaW5lLmluZGV4T2YoICcvJyApID09PSAtIDEgKSB7XG5cblx0XHRcdFx0XHRsaW5lVmVydGljZXMgPSBsaW5lUGFydHM7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZvciAoIGxldCBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpICsrICkge1xuXG5cdFx0XHRcdFx0XHRjb25zdCBwYXJ0cyA9IGxpbmVQYXJ0c1sgbGkgXS5zcGxpdCggJy8nICk7XG5cblx0XHRcdFx0XHRcdGlmICggcGFydHNbIDAgXSAhPT0gJycgKSBsaW5lVmVydGljZXMucHVzaCggcGFydHNbIDAgXSApO1xuXHRcdFx0XHRcdFx0aWYgKCBwYXJ0c1sgMSBdICE9PSAnJyApIGxpbmVVVnMucHVzaCggcGFydHNbIDEgXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzdGF0ZS5hZGRMaW5lR2VvbWV0cnkoIGxpbmVWZXJ0aWNlcywgbGluZVVWcyApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaW5lRmlyc3RDaGFyID09PSAncCcgKSB7XG5cblx0XHRcdFx0Y29uc3QgbGluZURhdGEgPSBsaW5lLnN1YnN0ciggMSApLnRyaW0oKTtcblx0XHRcdFx0Y29uc3QgcG9pbnREYXRhID0gbGluZURhdGEuc3BsaXQoICcgJyApO1xuXG5cdFx0XHRcdHN0YXRlLmFkZFBvaW50R2VvbWV0cnkoIHBvaW50RGF0YSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCAoIHJlc3VsdCA9IF9vYmplY3RfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBvIG9iamVjdF9uYW1lXG5cdFx0XHRcdC8vIG9yXG5cdFx0XHRcdC8vIGcgZ3JvdXBfbmFtZVxuXG5cdFx0XHRcdC8vIFdPUktBUk9VTkQ6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTI4Njlcblx0XHRcdFx0Ly8gbGV0IG5hbWUgPSByZXN1bHRbIDAgXS5zdWJzdHIoIDEgKS50cmltKCk7XG5cdFx0XHRcdGNvbnN0IG5hbWUgPSAoICcgJyArIHJlc3VsdFsgMCBdLnN1YnN0ciggMSApLnRyaW0oKSApLnN1YnN0ciggMSApO1xuXG5cdFx0XHRcdHN0YXRlLnN0YXJ0T2JqZWN0KCBuYW1lICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIF9tYXRlcmlhbF91c2VfcGF0dGVybi50ZXN0KCBsaW5lICkgKSB7XG5cblx0XHRcdFx0Ly8gbWF0ZXJpYWxcblxuXHRcdFx0XHRzdGF0ZS5vYmplY3Quc3RhcnRNYXRlcmlhbCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCksIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIF9tYXRlcmlhbF9saWJyYXJ5X3BhdHRlcm4udGVzdCggbGluZSApICkge1xuXG5cdFx0XHRcdC8vIG10bCBmaWxlXG5cblx0XHRcdFx0c3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMucHVzaCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggX21hcF91c2VfcGF0dGVybi50ZXN0KCBsaW5lICkgKSB7XG5cblx0XHRcdFx0Ly8gdGhlIGxpbmUgaXMgcGFyc2VkIGJ1dCBpZ25vcmVkIHNpbmNlIHRoZSBsb2FkZXIgYXNzdW1lcyB0ZXh0dXJlcyBhcmUgZGVmaW5lZCBNVEwgZmlsZXNcblx0XHRcdFx0Ly8gKGFjY29yZGluZyB0byBodHRwczovL3d3dy5va2luby5jb20vY29udi9pbXBfd2F2ZS5odG0sICd1c2VtYXAnIGlzIHRoZSBvbGQtc3R5bGUgV2F2ZWZyb250IHRleHR1cmUgcmVmZXJlbmNlIG1ldGhvZClcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PQkpMb2FkZXI6IFJlbmRlcmluZyBpZGVudGlmaWVyIFwidXNlbWFwXCIgbm90IHN1cHBvcnRlZC4gVGV4dHVyZXMgbXVzdCBiZSBkZWZpbmVkIGluIE1UTCBmaWxlcy4nICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpbmVGaXJzdENoYXIgPT09ICdzJyApIHtcblxuXHRcdFx0XHRyZXN1bHQgPSBsaW5lLnNwbGl0KCAnICcgKTtcblxuXHRcdFx0XHQvLyBzbW9vdGggc2hhZGluZ1xuXG5cdFx0XHRcdC8vIEB0b2RvIEhhbmRsZSBmaWxlcyB0aGF0IGhhdmUgdmFyeWluZyBzbW9vdGggdmFsdWVzIGZvciBhIHNldCBvZiBmYWNlcyBpbnNpZGUgb25lIGdlb21ldHJ5LFxuXHRcdFx0XHQvLyBidXQgZG9lcyBub3QgZGVmaW5lIGEgdXNlbXRsIGZvciBlYWNoIGZhY2Ugc2V0LlxuXHRcdFx0XHQvLyBUaGlzIHNob3VsZCBiZSBkZXRlY3RlZCBhbmQgYSBkdW1teSBtYXRlcmlhbCBjcmVhdGVkIChsYXRlciBNdWx0aU1hdGVyaWFsIGFuZCBnZW9tZXRyeSBncm91cHMpLlxuXHRcdFx0XHQvLyBUaGlzIHJlcXVpcmVzIHNvbWUgY2FyZSB0byBub3QgY3JlYXRlIGV4dHJhIG1hdGVyaWFsIG9uIGVhY2ggc21vb3RoIHZhbHVlIGZvciBcIm5vcm1hbFwiIG9iaiBmaWxlcy5cblx0XHRcdFx0Ly8gd2hlcmUgZXhwbGljaXQgdXNlbXRsIGRlZmluZXMgZ2VvbWV0cnkgZ3JvdXBzLlxuXHRcdFx0XHQvLyBFeGFtcGxlIGFzc2V0OiBleGFtcGxlcy9tb2RlbHMvb2JqL2NlcmJlcnVzL0NlcmJlcnVzLm9ialxuXG5cdFx0XHRcdC8qXG5cdFx0XHRcdFx0ICogaHR0cDovL3BhdWxib3Vya2UubmV0L2RhdGFmb3JtYXRzL29iai9cblx0XHRcdFx0XHQgKiBvclxuXHRcdFx0XHRcdCAqIGh0dHA6Ly93d3cuY3MudXRhaC5lZHUvfmJvdWxvcy9jczM1MDUvb2JqX3NwZWMucGRmXG5cdFx0XHRcdFx0ICpcblx0XHRcdFx0XHQgKiBGcm9tIGNoYXB0ZXIgXCJHcm91cGluZ1wiIFN5bnRheCBleHBsYW5hdGlvbiBcInMgZ3JvdXBfbnVtYmVyXCI6XG5cdFx0XHRcdFx0ICogXCJncm91cF9udW1iZXIgaXMgdGhlIHNtb290aGluZyBncm91cCBudW1iZXIuIFRvIHR1cm4gb2ZmIHNtb290aGluZyBncm91cHMsIHVzZSBhIHZhbHVlIG9mIDAgb3Igb2ZmLlxuXHRcdFx0XHRcdCAqIFBvbHlnb25hbCBlbGVtZW50cyB1c2UgZ3JvdXAgbnVtYmVycyB0byBwdXQgZWxlbWVudHMgaW4gZGlmZmVyZW50IHNtb290aGluZyBncm91cHMuIEZvciBmcmVlLWZvcm1cblx0XHRcdFx0XHQgKiBzdXJmYWNlcywgc21vb3RoaW5nIGdyb3VwcyBhcmUgZWl0aGVyIHR1cm5lZCBvbiBvciBvZmY7IHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB2YWx1ZXMgZ3JlYXRlclxuXHRcdFx0XHRcdCAqIHRoYW4gMC5cIlxuXHRcdFx0XHRcdCAqL1xuXHRcdFx0XHRpZiAoIHJlc3VsdC5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSByZXN1bHRbIDEgXS50cmltKCkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRzdGF0ZS5vYmplY3Quc21vb3RoID0gKCB2YWx1ZSAhPT0gJzAnICYmIHZhbHVlICE9PSAnb2ZmJyApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBaQnJ1c2ggY2FuIHByb2R1Y2UgXCJzXCIgbGluZXMgIzExNzA3XG5cdFx0XHRcdFx0c3RhdGUub2JqZWN0LnNtb290aCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IG1hdGVyaWFsID0gc3RhdGUub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpO1xuXHRcdFx0XHRpZiAoIG1hdGVyaWFsICkgbWF0ZXJpYWwuc21vb3RoID0gc3RhdGUub2JqZWN0LnNtb290aDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbnVsbCB0ZXJtaW5hdGVkIGZpbGVzIHdpdGhvdXQgZXhjZXB0aW9uXG5cdFx0XHRcdGlmICggbGluZSA9PT0gJ1xcMCcgKSBjb250aW51ZTtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PQkpMb2FkZXI6IFVuZXhwZWN0ZWQgbGluZTogXCInICsgbGluZSArICdcIicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuZmluYWxpemUoKTtcblxuXHRcdGNvbnN0IGNvbnRhaW5lciA9IG5ldyBHcm91cCgpO1xuXHRcdGNvbnRhaW5lci5tYXRlcmlhbExpYnJhcmllcyA9IFtdLmNvbmNhdCggc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMgKTtcblxuXHRcdGNvbnN0IGhhc1ByaW1pdGl2ZXMgPSAhICggc3RhdGUub2JqZWN0cy5sZW5ndGggPT09IDEgJiYgc3RhdGUub2JqZWN0c1sgMCBdLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCA9PT0gMCApO1xuXG5cdFx0aWYgKCBoYXNQcmltaXRpdmVzID09PSB0cnVlICkge1xuXG5cdFx0XHRmb3IgKCBsZXQgaSA9IDAsIGwgPSBzdGF0ZS5vYmplY3RzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0Y29uc3Qgb2JqZWN0ID0gc3RhdGUub2JqZWN0c1sgaSBdO1xuXHRcdFx0XHRjb25zdCBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblx0XHRcdFx0Y29uc3QgbWF0ZXJpYWxzID0gb2JqZWN0Lm1hdGVyaWFscztcblx0XHRcdFx0Y29uc3QgaXNMaW5lID0gKCBnZW9tZXRyeS50eXBlID09PSAnTGluZScgKTtcblx0XHRcdFx0Y29uc3QgaXNQb2ludHMgPSAoIGdlb21ldHJ5LnR5cGUgPT09ICdQb2ludHMnICk7XG5cdFx0XHRcdGxldCBoYXNWZXJ0ZXhDb2xvcnMgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBTa2lwIG8vZyBsaW5lIGRlY2xhcmF0aW9ucyB0aGF0IGRpZCBub3QgZm9sbG93IHdpdGggYW55IGZhY2VzXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoID09PSAwICkgY29udGludWU7XG5cblx0XHRcdFx0Y29uc3QgYnVmZmVyZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHRcdFx0XHRidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS52ZXJ0aWNlcywgMyApICk7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubm9ybWFscywgMyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0XHRoYXNWZXJ0ZXhDb2xvcnMgPSB0cnVlO1xuXHRcdFx0XHRcdGJ1ZmZlcmdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LmNvbG9ycywgMyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaGFzVVZJbmRpY2VzID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0YnVmZmVyZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudXZzLCAyICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIG1hdGVyaWFsc1xuXG5cdFx0XHRcdGNvbnN0IGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBsZXQgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW47IG1pICsrICkge1xuXG5cdFx0XHRcdFx0Y29uc3Qgc291cmNlTWF0ZXJpYWwgPSBtYXRlcmlhbHNbIG1pIF07XG5cdFx0XHRcdFx0Y29uc3QgbWF0ZXJpYWxIYXNoID0gc291cmNlTWF0ZXJpYWwubmFtZSArICdfJyArIHNvdXJjZU1hdGVyaWFsLnNtb290aCArICdfJyArIGhhc1ZlcnRleENvbG9ycztcblx0XHRcdFx0XHRsZXQgbWF0ZXJpYWwgPSBzdGF0ZS5tYXRlcmlhbHNbIG1hdGVyaWFsSGFzaCBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLm1hdGVyaWFscyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFscy5jcmVhdGUoIHNvdXJjZU1hdGVyaWFsLm5hbWUgKTtcblxuXHRcdFx0XHRcdFx0Ly8gbXRsIGV0Yy4gbG9hZGVycyBwcm9iYWJseSBjYW4ndCBjcmVhdGUgbGluZSBtYXRlcmlhbHMgY29ycmVjdGx5LCBjb3B5IHByb3BlcnRpZXMgdG8gYSBsaW5lIG1hdGVyaWFsLlxuXHRcdFx0XHRcdFx0aWYgKCBpc0xpbmUgJiYgbWF0ZXJpYWwgJiYgISAoIG1hdGVyaWFsIGluc3RhbmNlb2YgTGluZUJhc2ljTWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRjb25zdCBtYXRlcmlhbExpbmUgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoKTtcblx0XHRcdFx0XHRcdFx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggbWF0ZXJpYWxMaW5lLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRcdFx0XHRtYXRlcmlhbExpbmUuY29sb3IuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWwgPSBtYXRlcmlhbExpbmU7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGlzUG9pbnRzICYmIG1hdGVyaWFsICYmICEgKCBtYXRlcmlhbCBpbnN0YW5jZW9mIFBvaW50c01hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgbWF0ZXJpYWxQb2ludHMgPSBuZXcgUG9pbnRzTWF0ZXJpYWwoIHsgc2l6ZTogMTAsIHNpemVBdHRlbnVhdGlvbjogZmFsc2UgfSApO1xuXHRcdFx0XHRcdFx0XHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBtYXRlcmlhbFBvaW50cywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWxQb2ludHMuY29sb3IuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHRcdFx0XHRcdFx0bWF0ZXJpYWxQb2ludHMubWFwID0gbWF0ZXJpYWwubWFwO1xuXHRcdFx0XHRcdFx0XHRtYXRlcmlhbCA9IG1hdGVyaWFsUG9pbnRzO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaXNMaW5lICkge1xuXG5cdFx0XHRcdFx0XHRcdG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGlzUG9pbnRzICkge1xuXG5cdFx0XHRcdFx0XHRcdG1hdGVyaWFsID0gbmV3IFBvaW50c01hdGVyaWFsKCB7IHNpemU6IDEsIHNpemVBdHRlbnVhdGlvbjogZmFsc2UgfSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdG1hdGVyaWFsID0gbmV3IE1lc2hQaG9uZ01hdGVyaWFsKCk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwubmFtZSA9IHNvdXJjZU1hdGVyaWFsLm5hbWU7XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC5mbGF0U2hhZGluZyA9IHNvdXJjZU1hdGVyaWFsLnNtb290aCA/IGZhbHNlIDogdHJ1ZTtcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IGhhc1ZlcnRleENvbG9ycztcblxuXHRcdFx0XHRcdFx0c3RhdGUubWF0ZXJpYWxzWyBtYXRlcmlhbEhhc2ggXSA9IG1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3JlYXRlZE1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgbWVzaFxuXG5cdFx0XHRcdGxldCBtZXNoO1xuXG5cdFx0XHRcdGlmICggY3JlYXRlZE1hdGVyaWFscy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdFx0Zm9yICggbGV0IG1pID0gMCwgbWlMZW4gPSBtYXRlcmlhbHMubGVuZ3RoOyBtaSA8IG1pTGVuOyBtaSArKyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc3Qgc291cmNlTWF0ZXJpYWwgPSBtYXRlcmlhbHNbIG1pIF07XG5cdFx0XHRcdFx0XHRidWZmZXJnZW9tZXRyeS5hZGRHcm91cCggc291cmNlTWF0ZXJpYWwuZ3JvdXBTdGFydCwgc291cmNlTWF0ZXJpYWwuZ3JvdXBDb3VudCwgbWkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggaXNMaW5lICkge1xuXG5cdFx0XHRcdFx0XHRtZXNoID0gbmV3IExpbmVTZWdtZW50cyggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHMgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGlzUG9pbnRzICkge1xuXG5cdFx0XHRcdFx0XHRtZXNoID0gbmV3IFBvaW50cyggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHMgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgTWVzaCggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHMgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCBpc0xpbmUgKSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgTGluZVNlZ21lbnRzKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFsc1sgMCBdICk7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpc1BvaW50cyApIHtcblxuXHRcdFx0XHRcdFx0bWVzaCA9IG5ldyBQb2ludHMoIGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWyAwIF0gKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgTWVzaCggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHNbIDAgXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXNoLm5hbWUgPSBvYmplY3QubmFtZTtcblxuXHRcdFx0XHRjb250YWluZXIuYWRkKCBtZXNoICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIG9ubHkgdGhlIGRlZmF1bHQgcGFyc2VyIHN0YXRlIG9iamVjdCB3aXRoIG5vIGdlb21ldHJ5IGRhdGEsIGludGVycHJldCBkYXRhIGFzIHBvaW50IGNsb3VkXG5cblx0XHRcdGlmICggc3RhdGUudmVydGljZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRjb25zdCBtYXRlcmlhbCA9IG5ldyBQb2ludHNNYXRlcmlhbCggeyBzaXplOiAxLCBzaXplQXR0ZW51YXRpb246IGZhbHNlIH0gKTtcblxuXHRcdFx0XHRjb25zdCBidWZmZXJnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0XHRcdGJ1ZmZlcmdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHN0YXRlLnZlcnRpY2VzLCAzICkgKTtcblxuXHRcdFx0XHRpZiAoIHN0YXRlLmNvbG9ycy5sZW5ndGggPiAwICYmIHN0YXRlLmNvbG9yc1sgMCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRidWZmZXJnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBzdGF0ZS5jb2xvcnMsIDMgKSApO1xuXHRcdFx0XHRcdG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IHBvaW50cyA9IG5ldyBQb2ludHMoIGJ1ZmZlcmdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHRcdFx0XHRjb250YWluZXIuYWRkKCBwb2ludHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRhaW5lcjtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgT0JKTG9hZGVyIH07XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBPQkpMb2FkZXIgfSBmcm9tICdAL2Jhc2UvL2xpYnMvT0JKTG9hZGVyLmpzJ1xuXG5leHBvcnQgY29uc3Qgb2JqVG9Kc29uID0gZnVuY3Rpb24gKHR4dCkge1xuICBsZXQgdGV4dCA9IHR4dFxuICBpZiAodGV4dC5pbmRleE9mKCdcXHJcXG4nKSAhPT0gLSAxKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuL2csICdcXG4nKVxuICB9XG4gIGlmICh0ZXh0LmluZGV4T2YoJ1xcXFxcXG4nKSAhPT0gLSAxKSB7XG4gICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxcXFxcbi9nLCAnJylcbiAgfVxuICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpXG4gIGNvbnN0IGpzb25EYXRhID0ge1xuICAgIGluZGV4OiBbXSxcbiAgICBkYXRhOiBbXSxcbiAgfVxuICBjb25zdCB0cmltTGVmdCA9ICh0eXBlb2YgJycudHJpbUxlZnQgPT09ICdmdW5jdGlvbicpXG4gIGxldCBsaW5lLCBsaW5lTGVuZ3RoXG4gIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldXG4gICAgbGluZSA9IHRyaW1MZWZ0ID8gbGluZS50cmltTGVmdCgpIDogbGluZS50cmltKClcbiAgICBsaW5lTGVuZ3RoID0gbGluZS5sZW5ndGhcbiAgICBjb25zdCBsaW5lU3BsaXQgPSBsaW5lLnNwbGl0KCcgJylbMF1cbiAgICBpZiAoWydtdGxsaWInLCAnbycsICd2JywgJ3Z0JywgJ3ZuJywgJ3VzZW10bCcsICdzJywgJ2YnXS5pbmNsdWRlcyhsaW5lU3BsaXQpKSB7XG4gICAgICBpZiAoanNvbkRhdGEuaW5kZXhbanNvbkRhdGEuaW5kZXgubGVuZ3RoIC0gMV0gIT09IGxpbmVTcGxpdCkge1xuICAgICAgICBqc29uRGF0YS5pbmRleC5wdXNoKGxpbmVTcGxpdClcbiAgICAgICAganNvbkRhdGEuZGF0YS5wdXNoKFtdKVxuICAgICAgfVxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShsaW5lU3BsaXQgKyAnICcsICcnKVxuICAgICAganNvbkRhdGEuZGF0YVtqc29uRGF0YS5kYXRhLmxlbmd0aCAtIDFdLnB1c2gobGluZSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpzb25EYXRhXG59XG5cbmV4cG9ydCBjb25zdCBqc29uVG9PYmogPSBmdW5jdGlvbiAodGV4dCkge1xuICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh0ZXh0KVxuICBsZXQgb2JqID0gJydcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGl4ID0gZGF0YS5pbmRleFtpXVxuICAgIGNvbnN0IGxpbmVzID0gZGF0YS5kYXRhW2ldXG4gICAgbGluZXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIG9iaiArPSBgJHtwaXh9ICR7aXRlbX0gXFxuYFxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIG9ialxufVxuXG5leHBvcnQgY29uc3QgZ2V0T2JqVG9Kc29uID0gZnVuY3Rpb24gKHVybCkge1xuICBuZXcgVEhSRUUuRmlsZUxvYWRlcigpLmxvYWQodXJsLCBmdW5jdGlvbiAodGV4dCkge1xuICAgIGNvbnN0IGQgPSBvYmpUb0pzb24odGV4dClcbiAgICBjb25zb2xlLmxvZyhkKVxuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGQpKVxuICB9KVxufVxuXG5leHBvcnQgY2xhc3MgT2JqSnNvbkxvYWRlciBleHRlbmRzIFRIUkVFLkxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKG1hbmFnZXIpIHtcbiAgICBzdXBlcihtYW5hZ2VyKVxuICAgIHRoaXMubG9hZGVyID0gbmV3IE9CSkxvYWRlcigpXG4gIH1cbiAgbG9hZCh1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvcikge1xuICAgIGNvbnN0IHNjb3BlID0gdGhpc1xuICAgIGNvbnN0IGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKHRoaXMubWFuYWdlcilcbiAgICBsb2FkZXIubG9hZCh1cmwsIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBvYmpKc29uID0ganNvblRvT2JqKHRleHQpXG4gICAgICAgIG9uTG9hZChzY29wZS5sb2FkZXIucGFyc2Uob2JqSnNvbikpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgb25FcnJvcihlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUubWFuYWdlci5pdGVtRXJyb3IodXJsKVxuICAgICAgfVxuICAgIH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5cbiBsZXQge1xuXHRBbmltYXRpb25DbGlwLFxuXHRCb25lLFxuXHRCdWZmZXJBdHRyaWJ1dGUsXG5cdEJ1ZmZlckdlb21ldHJ5LFxuXHRDbGFtcFRvRWRnZVdyYXBwaW5nLFxuXHRDb2xvcixcblx0RGlyZWN0aW9uYWxMaWdodCxcblx0RG91YmxlU2lkZSxcblx0RmlsZUxvYWRlcixcblx0RnJvbnRTaWRlLFxuXHRHcm91cCxcblx0SW50ZXJsZWF2ZWRCdWZmZXIsXG5cdEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLFxuXHRJbnRlcnBvbGFudCxcblx0SW50ZXJwb2xhdGVEaXNjcmV0ZSxcblx0SW50ZXJwb2xhdGVMaW5lYXIsXG5cdExpbmUsXG5cdExpbmVCYXNpY01hdGVyaWFsLFxuXHRMaW5lTG9vcCxcblx0TGluZVNlZ21lbnRzLFxuXHRMaW5lYXJGaWx0ZXIsXG5cdExpbmVhck1pcG1hcExpbmVhckZpbHRlcixcblx0TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcixcblx0TG9hZGVyLFxuXHRMb2FkZXJVdGlscyxcblx0TWF0ZXJpYWwsXG5cdE1hdGgsXG5cdE1hdHJpeDQsXG5cdE1lc2gsXG5cdE1lc2hCYXNpY01hdGVyaWFsLFxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWlycm9yZWRSZXBlYXRXcmFwcGluZyxcblx0TmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcG1hcExpbmVhckZpbHRlcixcblx0TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIsXG5cdE51bWJlcktleWZyYW1lVHJhY2ssXG5cdE9iamVjdDNELFxuXHRPcnRob2dyYXBoaWNDYW1lcmEsXG5cdFBlcnNwZWN0aXZlQ2FtZXJhLFxuXHRQb2ludExpZ2h0LFxuXHRQb2ludHMsXG5cdFBvaW50c01hdGVyaWFsLFxuXHRQcm9wZXJ0eUJpbmRpbmcsXG5cdFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLFxuXHRSR0JBRm9ybWF0LFxuXHRSR0JGb3JtYXQsXG5cdFJlcGVhdFdyYXBwaW5nLFxuXHRTY2VuZSxcblx0U2hhZGVyTGliLFxuXHRTaGFkZXJNYXRlcmlhbCxcblx0U2tlbGV0b24sXG5cdFNraW5uZWRNZXNoLFxuXHRTcG90TGlnaHQsXG5cdFRleHR1cmVMb2FkZXIsXG5cdFRyaWFuZ2xlRmFuRHJhd01vZGUsXG5cdFRyaWFuZ2xlU3RyaXBEcmF3TW9kZSxcblx0VW5pZm9ybXNVdGlscyxcblx0VmVjdG9yMixcblx0VmVjdG9yS2V5ZnJhbWVUcmFjayxcblx0VmVydGV4Q29sb3JzLFxuXHRzUkdCRW5jb2Rpbmdcbn0gPSBUSFJFRVxuXG52YXIgR0xURkxvYWRlciA9ICggZnVuY3Rpb24gKCkge1xuXG5cdGZ1bmN0aW9uIEdMVEZMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0XHRMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApO1xuXG5cdFx0dGhpcy5kcmFjb0xvYWRlciA9IG51bGw7XG5cdFx0dGhpcy5kZHNMb2FkZXIgPSBudWxsO1xuXG5cdH1cblxuXHRHTFRGTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdFx0Y29uc3RydWN0b3I6IEdMVEZMb2FkZXIsXG5cblx0XHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0XHR2YXIgcmVzb3VyY2VQYXRoO1xuXG5cdFx0XHRpZiAoIHRoaXMucmVzb3VyY2VQYXRoICE9PSAnJyApIHtcblxuXHRcdFx0XHRyZXNvdXJjZVBhdGggPSB0aGlzLnJlc291cmNlUGF0aDtcblxuXHRcdFx0fSBlbHNlIGlmICggdGhpcy5wYXRoICE9PSAnJyApIHtcblxuXHRcdFx0XHRyZXNvdXJjZVBhdGggPSB0aGlzLnBhdGg7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVzb3VyY2VQYXRoID0gTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFRlbGxzIHRoZSBMb2FkaW5nTWFuYWdlciB0byB0cmFjayBhbiBleHRyYSBpdGVtLCB3aGljaCByZXNvbHZlcyBhZnRlclxuXHRcdFx0Ly8gdGhlIG1vZGVsIGlzIGZ1bGx5IGxvYWRlZC4gVGhpcyBtZWFucyB0aGUgY291bnQgb2YgaXRlbXMgbG9hZGVkIHdpbGxcblx0XHRcdC8vIGJlIGluY29ycmVjdCwgYnV0IGVuc3VyZXMgbWFuYWdlci5vbkxvYWQoKSBkb2VzIG5vdCBmaXJlIGVhcmx5LlxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHR2YXIgX29uRXJyb3IgPSBmdW5jdGlvbiAoIGUgKSB7XG5cblx0XHRcdFx0aWYgKCBvbkVycm9yICkge1xuXG5cdFx0XHRcdFx0b25FcnJvciggZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG5cblx0XHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRcdGxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblxuXHRcdFx0aWYgKCBzY29wZS5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscycgKSB7XG5cblx0XHRcdFx0bG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdHJ1ZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggZGF0YSApIHtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0c2NvcGUucGFyc2UoIGRhdGEsIHJlc291cmNlUGF0aCwgZnVuY3Rpb24gKCBnbHRmICkge1xuXG5cdFx0XHRcdFx0XHRvbkxvYWQoIGdsdGYgKTtcblxuXHRcdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHRcdH0sIF9vbkVycm9yICk7XG5cblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRfb25FcnJvciggZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgX29uRXJyb3IgKTtcblxuXHRcdH0sXG5cblx0XHRzZXREUkFDT0xvYWRlcjogZnVuY3Rpb24gKCBkcmFjb0xvYWRlciApIHtcblxuXHRcdFx0dGhpcy5kcmFjb0xvYWRlciA9IGRyYWNvTG9hZGVyO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9LFxuXG5cdFx0c2V0RERTTG9hZGVyOiBmdW5jdGlvbiAoIGRkc0xvYWRlciApIHtcblxuXHRcdFx0dGhpcy5kZHNMb2FkZXIgPSBkZHNMb2FkZXI7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH0sXG5cblx0XHRwYXJzZTogZnVuY3Rpb24gKCBkYXRhLCBwYXRoLCBvbkxvYWQsIG9uRXJyb3IgKSB7XG5cblx0XHRcdHZhciBjb250ZW50O1xuXHRcdFx0dmFyIGV4dGVuc2lvbnMgPSB7fTtcblxuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgKSB7XG5cblx0XHRcdFx0Y29udGVudCA9IGRhdGE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIG1hZ2ljID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEsIDAsIDQgKSApO1xuXG5cdFx0XHRcdGlmICggbWFnaWMgPT09IEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX01BR0lDICkge1xuXG5cdFx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXSA9IG5ldyBHTFRGQmluYXJ5RXh0ZW5zaW9uKCBkYXRhICk7XG5cblx0XHRcdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGVycm9yICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250ZW50ID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXS5jb250ZW50O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb250ZW50ID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggbmV3IFVpbnQ4QXJyYXkoIGRhdGEgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIganNvbiA9IEpTT04ucGFyc2UoIGNvbnRlbnQgKTtcblxuXHRcdFx0aWYgKCBqc29uLmFzc2V0ID09PSB1bmRlZmluZWQgfHwganNvbi5hc3NldC52ZXJzaW9uWyAwIF0gPCAyICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFVuc3VwcG9ydGVkIGFzc2V0LiBnbFRGIHZlcnNpb25zID49Mi4wIGFyZSBzdXBwb3J0ZWQuIFVzZSBMZWdhY3lHTFRGTG9hZGVyIGluc3RlYWQuJyApICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGpzb24uZXh0ZW5zaW9uc1VzZWQgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwganNvbi5leHRlbnNpb25zVXNlZC5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdFx0XHR2YXIgZXh0ZW5zaW9uTmFtZSA9IGpzb24uZXh0ZW5zaW9uc1VzZWRbIGkgXTtcblx0XHRcdFx0XHR2YXIgZXh0ZW5zaW9uc1JlcXVpcmVkID0ganNvbi5leHRlbnNpb25zUmVxdWlyZWQgfHwgW107XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBleHRlbnNpb25OYW1lICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVYVEVOU0lPTlMuS0hSX0xJR0hUU19QVU5DVFVBTDpcblx0XHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUOlxuXHRcdFx0XHRcdFx0XHRleHRlbnNpb25zWyBleHRlbnNpb25OYW1lIF0gPSBuZXcgR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uKCk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUzpcblx0XHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTjpcblx0XHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgZXh0ZW5zaW9uTmFtZSBdID0gbmV3IEdMVEZEcmFjb01lc2hDb21wcmVzc2lvbkV4dGVuc2lvbigganNvbiwgdGhpcy5kcmFjb0xvYWRlciApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFM6XG5cdFx0XHRcdFx0XHRcdGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdID0gbmV3IEdMVEZUZXh0dXJlRERTRXh0ZW5zaW9uKCB0aGlzLmRkc0xvYWRlciApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STTpcblx0XHRcdFx0XHRcdFx0ZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk0gXSA9IG5ldyBHTFRGVGV4dHVyZVRyYW5zZm9ybUV4dGVuc2lvbigpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGV4dGVuc2lvbnNSZXF1aXJlZC5pbmRleE9mKCBleHRlbnNpb25OYW1lICkgPj0gMCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IFVua25vd24gZXh0ZW5zaW9uIFwiJyArIGV4dGVuc2lvbk5hbWUgKyAnXCIuJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhcnNlciA9IG5ldyBHTFRGUGFyc2VyKCBqc29uLCBleHRlbnNpb25zLCB7XG5cblx0XHRcdFx0cGF0aDogcGF0aCB8fCB0aGlzLnJlc291cmNlUGF0aCB8fCAnJyxcblx0XHRcdFx0Y3Jvc3NPcmlnaW46IHRoaXMuY3Jvc3NPcmlnaW4sXG5cdFx0XHRcdG1hbmFnZXI6IHRoaXMubWFuYWdlclxuXG5cdFx0XHR9ICk7XG5cblx0XHRcdHBhcnNlci5wYXJzZSggb25Mb2FkLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0fSApO1xuXG5cdC8qIEdMVEZSRUdJU1RSWSAqL1xuXG5cdGZ1bmN0aW9uIEdMVEZSZWdpc3RyeSgpIHtcblxuXHRcdHZhciBvYmplY3RzID0ge307XG5cblx0XHRyZXR1cm5cdHtcblxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdFx0XHRyZXR1cm4gb2JqZWN0c1sga2V5IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdGFkZDogZnVuY3Rpb24gKCBrZXksIG9iamVjdCApIHtcblxuXHRcdFx0XHRvYmplY3RzWyBrZXkgXSA9IG9iamVjdDtcblxuXHRcdFx0fSxcblxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbiAoIGtleSApIHtcblxuXHRcdFx0XHRkZWxldGUgb2JqZWN0c1sga2V5IF07XG5cblx0XHRcdH0sXG5cblx0XHRcdHJlbW92ZUFsbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdG9iamVjdHMgPSB7fTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblx0LyoqKioqKioqKiogRVhURU5TSU9OUyAqKioqKioqKioqKi9cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHR2YXIgRVhURU5TSU9OUyA9IHtcblx0XHRLSFJfQklOQVJZX0dMVEY6ICdLSFJfYmluYXJ5X2dsVEYnLFxuXHRcdEtIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OOiAnS0hSX2RyYWNvX21lc2hfY29tcHJlc3Npb24nLFxuXHRcdEtIUl9MSUdIVFNfUFVOQ1RVQUw6ICdLSFJfbGlnaHRzX3B1bmN0dWFsJyxcblx0XHRLSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTOiAnS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3MnLFxuXHRcdEtIUl9NQVRFUklBTFNfVU5MSVQ6ICdLSFJfbWF0ZXJpYWxzX3VubGl0Jyxcblx0XHRLSFJfVEVYVFVSRV9UUkFOU0ZPUk06ICdLSFJfdGV4dHVyZV90cmFuc2Zvcm0nLFxuXHRcdE1TRlRfVEVYVFVSRV9ERFM6ICdNU0ZUX3RleHR1cmVfZGRzJ1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBERFMgVGV4dHVyZSBFeHRlbnNpb25cblx0ICpcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL1ZlbmRvci9NU0ZUX3RleHR1cmVfZGRzXG5cdCAqXG5cdCAqL1xuXHRmdW5jdGlvbiBHTFRGVGV4dHVyZUREU0V4dGVuc2lvbiggZGRzTG9hZGVyICkge1xuXG5cdFx0aWYgKCAhIGRkc0xvYWRlciApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogQXR0ZW1wdGluZyB0byBsb2FkIC5kZHMgdGV4dHVyZSB3aXRob3V0IGltcG9ydGluZyBERFNMb2FkZXInICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFM7XG5cdFx0dGhpcy5kZHNMb2FkZXIgPSBkZHNMb2FkZXI7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBQdW5jdHVhbCBMaWdodHMgRXh0ZW5zaW9uXG5cdCAqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9saWdodHNfcHVuY3R1YWxcblx0ICovXG5cdGZ1bmN0aW9uIEdMVEZMaWdodHNFeHRlbnNpb24oIGpzb24gKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUw7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gKCBqc29uLmV4dGVuc2lvbnMgJiYganNvbi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXSApIHx8IHt9O1xuXHRcdHRoaXMubGlnaHREZWZzID0gZXh0ZW5zaW9uLmxpZ2h0cyB8fCBbXTtcblxuXHR9XG5cblx0R0xURkxpZ2h0c0V4dGVuc2lvbi5wcm90b3R5cGUubG9hZExpZ2h0ID0gZnVuY3Rpb24gKCBsaWdodEluZGV4ICkge1xuXG5cdFx0dmFyIGxpZ2h0RGVmID0gdGhpcy5saWdodERlZnNbIGxpZ2h0SW5kZXggXTtcblx0XHR2YXIgbGlnaHROb2RlO1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXHRcdGlmICggbGlnaHREZWYuY29sb3IgIT09IHVuZGVmaW5lZCApIGNvbG9yLmZyb21BcnJheSggbGlnaHREZWYuY29sb3IgKTtcblxuXHRcdHZhciByYW5nZSA9IGxpZ2h0RGVmLnJhbmdlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5yYW5nZSA6IDA7XG5cblx0XHRzd2l0Y2ggKCBsaWdodERlZi50eXBlICkge1xuXG5cdFx0XHRjYXNlICdkaXJlY3Rpb25hbCc6XG5cdFx0XHRcdGxpZ2h0Tm9kZSA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0KCBjb2xvciApO1xuXHRcdFx0XHRsaWdodE5vZGUudGFyZ2V0LnBvc2l0aW9uLnNldCggMCwgMCwgLSAxICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5hZGQoIGxpZ2h0Tm9kZS50YXJnZXQgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ3BvaW50Jzpcblx0XHRcdFx0bGlnaHROb2RlID0gbmV3IFBvaW50TGlnaHQoIGNvbG9yICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnc3BvdCc6XG5cdFx0XHRcdGxpZ2h0Tm9kZSA9IG5ldyBTcG90TGlnaHQoIGNvbG9yICk7XG5cdFx0XHRcdGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IHJhbmdlO1xuXHRcdFx0XHQvLyBIYW5kbGUgc3BvdGxpZ2h0IHByb3BlcnRpZXMuXG5cdFx0XHRcdGxpZ2h0RGVmLnNwb3QgPSBsaWdodERlZi5zcG90IHx8IHt9O1xuXHRcdFx0XHRsaWdodERlZi5zcG90LmlubmVyQ29uZUFuZ2xlID0gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAhPT0gdW5kZWZpbmVkID8gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSA6IDA7XG5cdFx0XHRcdGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGUgPSBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlICE9PSB1bmRlZmluZWQgPyBsaWdodERlZi5zcG90Lm91dGVyQ29uZUFuZ2xlIDogTWF0aC5QSSAvIDQuMDtcblx0XHRcdFx0bGlnaHROb2RlLmFuZ2xlID0gbGlnaHREZWYuc3BvdC5vdXRlckNvbmVBbmdsZTtcblx0XHRcdFx0bGlnaHROb2RlLnBlbnVtYnJhID0gMS4wIC0gbGlnaHREZWYuc3BvdC5pbm5lckNvbmVBbmdsZSAvIGxpZ2h0RGVmLnNwb3Qub3V0ZXJDb25lQW5nbGU7XG5cdFx0XHRcdGxpZ2h0Tm9kZS50YXJnZXQucG9zaXRpb24uc2V0KCAwLCAwLCAtIDEgKTtcblx0XHRcdFx0bGlnaHROb2RlLmFkZCggbGlnaHROb2RlLnRhcmdldCApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5leHBlY3RlZCBsaWdodCB0eXBlLCBcIicgKyBsaWdodERlZi50eXBlICsgJ1wiLicgKTtcblxuXHRcdH1cblxuXHRcdC8vIFNvbWUgbGlnaHRzIChlLmcuIHNwb3QpIGRlZmF1bHQgdG8gYSBwb3NpdGlvbiBvdGhlciB0aGFuIHRoZSBvcmlnaW4uIFJlc2V0IHRoZSBwb3NpdGlvblxuXHRcdC8vIGhlcmUsIGJlY2F1c2Ugbm9kZS1sZXZlbCBwYXJzaW5nIHdpbGwgb25seSBvdmVycmlkZSBwb3NpdGlvbiBpZiBleHBsaWNpdGx5IHNwZWNpZmllZC5cblx0XHRsaWdodE5vZGUucG9zaXRpb24uc2V0KCAwLCAwLCAwICk7XG5cblx0XHRsaWdodE5vZGUuZGVjYXkgPSAyO1xuXG5cdFx0aWYgKCBsaWdodERlZi5pbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIGxpZ2h0Tm9kZS5pbnRlbnNpdHkgPSBsaWdodERlZi5pbnRlbnNpdHk7XG5cblx0XHRsaWdodE5vZGUubmFtZSA9IGxpZ2h0RGVmLm5hbWUgfHwgKCAnbGlnaHRfJyArIGxpZ2h0SW5kZXggKTtcblxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIGxpZ2h0Tm9kZSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFVubGl0IE1hdGVyaWFscyBFeHRlbnNpb25cblx0ICpcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21hdGVyaWFsc191bmxpdFxuXHQgKi9cblx0ZnVuY3Rpb24gR0xURk1hdGVyaWFsc1VubGl0RXh0ZW5zaW9uKCkge1xuXG5cdFx0dGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1VOTElUO1xuXG5cdH1cblxuXHRHTFRGTWF0ZXJpYWxzVW5saXRFeHRlbnNpb24ucHJvdG90eXBlLmdldE1hdGVyaWFsVHlwZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNZXNoQmFzaWNNYXRlcmlhbDtcblxuXHR9O1xuXG5cdEdMVEZNYXRlcmlhbHNVbmxpdEV4dGVuc2lvbi5wcm90b3R5cGUuZXh0ZW5kUGFyYW1zID0gZnVuY3Rpb24gKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApIHtcblxuXHRcdHZhciBwZW5kaW5nID0gW107XG5cblx0XHRtYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBDb2xvciggMS4wLCAxLjAsIDEuMCApO1xuXHRcdG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSAxLjA7XG5cblx0XHR2YXIgbWV0YWxsaWNSb3VnaG5lc3MgPSBtYXRlcmlhbERlZi5wYnJNZXRhbGxpY1JvdWdobmVzcztcblxuXHRcdGlmICggbWV0YWxsaWNSb3VnaG5lc3MgKSB7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yICkgKSB7XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yRmFjdG9yO1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtYXAnLCBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JUZXh0dXJlICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICk7XG5cblx0fTtcblxuXHQvKiBCSU5BUlkgRVhURU5TSU9OICovXG5cdHZhciBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyA9ICdnbFRGJztcblx0dmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCA9IDEyO1xuXHR2YXIgQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUyA9IHsgSlNPTjogMHg0RTRGNTM0QSwgQklOOiAweDAwNEU0OTQyIH07XG5cblx0ZnVuY3Rpb24gR0xURkJpbmFyeUV4dGVuc2lvbiggZGF0YSApIHtcblxuXHRcdHRoaXMubmFtZSA9IEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGO1xuXHRcdHRoaXMuY29udGVudCA9IG51bGw7XG5cdFx0dGhpcy5ib2R5ID0gbnVsbDtcblxuXHRcdHZhciBoZWFkZXJWaWV3ID0gbmV3IERhdGFWaWV3KCBkYXRhLCAwLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKTtcblxuXHRcdHRoaXMuaGVhZGVyID0ge1xuXHRcdFx0bWFnaWM6IExvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhLnNsaWNlKCAwLCA0ICkgKSApLFxuXHRcdFx0dmVyc2lvbjogaGVhZGVyVmlldy5nZXRVaW50MzIoIDQsIHRydWUgKSxcblx0XHRcdGxlbmd0aDogaGVhZGVyVmlldy5nZXRVaW50MzIoIDgsIHRydWUgKVxuXHRcdH07XG5cblx0XHRpZiAoIHRoaXMuaGVhZGVyLm1hZ2ljICE9PSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgZ2xURi1CaW5hcnkgaGVhZGVyLicgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHRoaXMuaGVhZGVyLnZlcnNpb24gPCAyLjAgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IExlZ2FjeSBiaW5hcnkgZmlsZSBkZXRlY3RlZC4gVXNlIExlZ2FjeUdMVEZMb2FkZXIgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgY2h1bmtWaWV3ID0gbmV3IERhdGFWaWV3KCBkYXRhLCBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKTtcblx0XHR2YXIgY2h1bmtJbmRleCA9IDA7XG5cblx0XHR3aGlsZSAoIGNodW5rSW5kZXggPCBjaHVua1ZpZXcuYnl0ZUxlbmd0aCApIHtcblxuXHRcdFx0dmFyIGNodW5rTGVuZ3RoID0gY2h1bmtWaWV3LmdldFVpbnQzMiggY2h1bmtJbmRleCwgdHJ1ZSApO1xuXHRcdFx0Y2h1bmtJbmRleCArPSA0O1xuXG5cdFx0XHR2YXIgY2h1bmtUeXBlID0gY2h1bmtWaWV3LmdldFVpbnQzMiggY2h1bmtJbmRleCwgdHJ1ZSApO1xuXHRcdFx0Y2h1bmtJbmRleCArPSA0O1xuXG5cdFx0XHRpZiAoIGNodW5rVHlwZSA9PT0gQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUy5KU09OICkge1xuXG5cdFx0XHRcdHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheSggZGF0YSwgQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICsgY2h1bmtJbmRleCwgY2h1bmtMZW5ndGggKTtcblx0XHRcdFx0dGhpcy5jb250ZW50ID0gTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggY29udGVudEFycmF5ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGNodW5rVHlwZSA9PT0gQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUy5CSU4gKSB7XG5cblx0XHRcdFx0dmFyIGJ5dGVPZmZzZXQgPSBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9MRU5HVEggKyBjaHVua0luZGV4O1xuXHRcdFx0XHR0aGlzLmJvZHkgPSBkYXRhLnNsaWNlKCBieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgY2h1bmtMZW5ndGggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGllbnRzIG11c3QgaWdub3JlIGNodW5rcyB3aXRoIHVua25vd24gdHlwZXMuXG5cblx0XHRcdGNodW5rSW5kZXggKz0gY2h1bmtMZW5ndGg7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY29udGVudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogSlNPTiBjb250ZW50IG5vdCBmb3VuZC4nICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBEUkFDTyBNZXNoIENvbXByZXNzaW9uIEV4dGVuc2lvblxuXHQgKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfZHJhY29fbWVzaF9jb21wcmVzc2lvblxuXHQgKi9cblx0ZnVuY3Rpb24gR0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uKCBqc29uLCBkcmFjb0xvYWRlciApIHtcblxuXHRcdGlmICggISBkcmFjb0xvYWRlciApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogTm8gRFJBQ09Mb2FkZXIgaW5zdGFuY2UgcHJvdmlkZWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTjtcblx0XHR0aGlzLmpzb24gPSBqc29uO1xuXHRcdHRoaXMuZHJhY29Mb2FkZXIgPSBkcmFjb0xvYWRlcjtcblxuXHR9XG5cblx0R0xURkRyYWNvTWVzaENvbXByZXNzaW9uRXh0ZW5zaW9uLnByb3RvdHlwZS5kZWNvZGVQcmltaXRpdmUgPSBmdW5jdGlvbiAoIHByaW1pdGl2ZSwgcGFyc2VyICkge1xuXG5cdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cdFx0dmFyIGRyYWNvTG9hZGVyID0gdGhpcy5kcmFjb0xvYWRlcjtcblx0XHR2YXIgYnVmZmVyVmlld0luZGV4ID0gcHJpbWl0aXZlLmV4dGVuc2lvbnNbIHRoaXMubmFtZSBdLmJ1ZmZlclZpZXc7XG5cdFx0dmFyIGdsdGZBdHRyaWJ1dGVNYXAgPSBwcmltaXRpdmUuZXh0ZW5zaW9uc1sgdGhpcy5uYW1lIF0uYXR0cmlidXRlcztcblx0XHR2YXIgdGhyZWVBdHRyaWJ1dGVNYXAgPSB7fTtcblx0XHR2YXIgYXR0cmlidXRlTm9ybWFsaXplZE1hcCA9IHt9O1xuXHRcdHZhciBhdHRyaWJ1dGVUeXBlTWFwID0ge307XG5cblx0XHRmb3IgKCB2YXIgYXR0cmlidXRlTmFtZSBpbiBnbHRmQXR0cmlidXRlTWFwICkge1xuXG5cdFx0XHR2YXIgdGhyZWVBdHRyaWJ1dGVOYW1lID0gQVRUUklCVVRFU1sgYXR0cmlidXRlTmFtZSBdIHx8IGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0dGhyZWVBdHRyaWJ1dGVNYXBbIHRocmVlQXR0cmlidXRlTmFtZSBdID0gZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggYXR0cmlidXRlTmFtZSBpbiBwcmltaXRpdmUuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbIGF0dHJpYnV0ZU5hbWUgXSB8fCBhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggZ2x0ZkF0dHJpYnV0ZU1hcFsgYXR0cmlidXRlTmFtZSBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIGFjY2Vzc29yRGVmID0ganNvbi5hY2Nlc3NvcnNbIHByaW1pdGl2ZS5hdHRyaWJ1dGVzWyBhdHRyaWJ1dGVOYW1lIF0gXTtcblx0XHRcdFx0dmFyIGNvbXBvbmVudFR5cGUgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbIGFjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGUgXTtcblxuXHRcdFx0XHRhdHRyaWJ1dGVUeXBlTWFwWyB0aHJlZUF0dHJpYnV0ZU5hbWUgXSA9IGNvbXBvbmVudFR5cGU7XG5cdFx0XHRcdGF0dHJpYnV0ZU5vcm1hbGl6ZWRNYXBbIHRocmVlQXR0cmlidXRlTmFtZSBdID0gYWNjZXNzb3JEZWYubm9ybWFsaXplZCA9PT0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIGJ1ZmZlclZpZXdJbmRleCApLnRoZW4oIGZ1bmN0aW9uICggYnVmZmVyVmlldyApIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUgKSB7XG5cblx0XHRcdFx0ZHJhY29Mb2FkZXIuZGVjb2RlRHJhY29GaWxlKCBidWZmZXJWaWV3LCBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGF0dHJpYnV0ZU5hbWUgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGF0dHJpYnV0ZU5hbWUgXTtcblx0XHRcdFx0XHRcdHZhciBub3JtYWxpemVkID0gYXR0cmlidXRlTm9ybWFsaXplZE1hcFsgYXR0cmlidXRlTmFtZSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vcm1hbGl6ZWQgIT09IHVuZGVmaW5lZCApIGF0dHJpYnV0ZS5ub3JtYWxpemVkID0gbm9ybWFsaXplZDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlc29sdmUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fSwgdGhyZWVBdHRyaWJ1dGVNYXAsIGF0dHJpYnV0ZVR5cGVNYXAgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFRleHR1cmUgVHJhbnNmb3JtIEV4dGVuc2lvblxuXHQgKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvZXh0ZW5zaW9ucy8yLjAvS2hyb25vcy9LSFJfdGV4dHVyZV90cmFuc2Zvcm1cblx0ICovXG5cdGZ1bmN0aW9uIEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uKCkge1xuXG5cdFx0dGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk07XG5cblx0fVxuXG5cdEdMVEZUZXh0dXJlVHJhbnNmb3JtRXh0ZW5zaW9uLnByb3RvdHlwZS5leHRlbmRUZXh0dXJlID0gZnVuY3Rpb24gKCB0ZXh0dXJlLCB0cmFuc2Zvcm0gKSB7XG5cblx0XHR0ZXh0dXJlID0gdGV4dHVyZS5jbG9uZSgpO1xuXG5cdFx0aWYgKCB0cmFuc2Zvcm0ub2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmUub2Zmc2V0LmZyb21BcnJheSggdHJhbnNmb3JtLm9mZnNldCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0cmFuc2Zvcm0ucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZS5yb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcblxuXHRcdH1cblxuXHRcdGlmICggdHJhbnNmb3JtLnNjYWxlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmUucmVwZWF0LmZyb21BcnJheSggdHJhbnNmb3JtLnNjYWxlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRyYW5zZm9ybS50ZXhDb29yZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBDdXN0b20gVVYgc2V0cyBpbiBcIicgKyB0aGlzLm5hbWUgKyAnXCIgZXh0ZW5zaW9uIG5vdCB5ZXQgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY3VsYXItR2xvc3NpbmVzcyBFeHRlbnNpb25cblx0ICpcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL2V4dGVuc2lvbnMvMi4wL0tocm9ub3MvS0hSX21hdGVyaWFsc19wYnJTcGVjdWxhckdsb3NzaW5lc3Ncblx0ICovXG5cdGZ1bmN0aW9uIEdMVEZNYXRlcmlhbHNQYnJTcGVjdWxhckdsb3NzaW5lc3NFeHRlbnNpb24oKSB7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRuYW1lOiBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MsXG5cblx0XHRcdHNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtczogW1xuXHRcdFx0XHQnY29sb3InLFxuXHRcdFx0XHQnbWFwJyxcblx0XHRcdFx0J2xpZ2h0TWFwJyxcblx0XHRcdFx0J2xpZ2h0TWFwSW50ZW5zaXR5Jyxcblx0XHRcdFx0J2FvTWFwJyxcblx0XHRcdFx0J2FvTWFwSW50ZW5zaXR5Jyxcblx0XHRcdFx0J2VtaXNzaXZlJyxcblx0XHRcdFx0J2VtaXNzaXZlSW50ZW5zaXR5Jyxcblx0XHRcdFx0J2VtaXNzaXZlTWFwJyxcblx0XHRcdFx0J2J1bXBNYXAnLFxuXHRcdFx0XHQnYnVtcFNjYWxlJyxcblx0XHRcdFx0J25vcm1hbE1hcCcsXG5cdFx0XHRcdCdkaXNwbGFjZW1lbnRNYXAnLFxuXHRcdFx0XHQnZGlzcGxhY2VtZW50U2NhbGUnLFxuXHRcdFx0XHQnZGlzcGxhY2VtZW50QmlhcycsXG5cdFx0XHRcdCdzcGVjdWxhck1hcCcsXG5cdFx0XHRcdCdzcGVjdWxhcicsXG5cdFx0XHRcdCdnbG9zc2luZXNzTWFwJyxcblx0XHRcdFx0J2dsb3NzaW5lc3MnLFxuXHRcdFx0XHQnYWxwaGFNYXAnLFxuXHRcdFx0XHQnZW52TWFwJyxcblx0XHRcdFx0J2Vudk1hcEludGVuc2l0eScsXG5cdFx0XHRcdCdyZWZyYWN0aW9uUmF0aW8nLFxuXHRcdFx0XSxcblxuXHRcdFx0Z2V0TWF0ZXJpYWxUeXBlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuIFNoYWRlck1hdGVyaWFsO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRleHRlbmRQYXJhbXM6IGZ1bmN0aW9uICggbWF0ZXJpYWxQYXJhbXMsIG1hdGVyaWFsRGVmLCBwYXJzZXIgKSB7XG5cblx0XHRcdFx0dmFyIHBiclNwZWN1bGFyR2xvc3NpbmVzcyA9IG1hdGVyaWFsRGVmLmV4dGVuc2lvbnNbIHRoaXMubmFtZSBdO1xuXG5cdFx0XHRcdHZhciBzaGFkZXIgPSBTaGFkZXJMaWJbICdzdGFuZGFyZCcgXTtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLmNsb25lKCBzaGFkZXIudW5pZm9ybXMgKTtcblxuXHRcdFx0XHR2YXIgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcblx0XHRcdFx0XHQnI2lmZGVmIFVTRV9TUEVDVUxBUk1BUCcsXG5cdFx0XHRcdFx0J1x0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7Jyxcblx0XHRcdFx0XHQnI2VuZGlmJ1xuXHRcdFx0XHRdLmpvaW4oICdcXG4nICk7XG5cblx0XHRcdFx0dmFyIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcblx0XHRcdFx0XHQnI2lmZGVmIFVTRV9HTE9TU0lORVNTTUFQJyxcblx0XHRcdFx0XHQnXHR1bmlmb3JtIHNhbXBsZXIyRCBnbG9zc2luZXNzTWFwOycsXG5cdFx0XHRcdFx0JyNlbmRpZidcblx0XHRcdFx0XS5qb2luKCAnXFxuJyApO1xuXG5cdFx0XHRcdHZhciBzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsgPSBbXG5cdFx0XHRcdFx0J3ZlYzMgc3BlY3VsYXJGYWN0b3IgPSBzcGVjdWxhcjsnLFxuXHRcdFx0XHRcdCcjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJyxcblx0XHRcdFx0XHQnXHR2ZWM0IHRleGVsU3BlY3VsYXIgPSB0ZXh0dXJlMkQoIHNwZWN1bGFyTWFwLCB2VXYgKTsnLFxuXHRcdFx0XHRcdCdcdHRleGVsU3BlY3VsYXIgPSBzUkdCVG9MaW5lYXIoIHRleGVsU3BlY3VsYXIgKTsnLFxuXHRcdFx0XHRcdCdcdC8vIHJlYWRzIGNoYW5uZWwgUkdCLCBjb21wYXRpYmxlIHdpdGggYSBnbFRGIFNwZWN1bGFyLUdsb3NzaW5lc3MgKFJHQkEpIHRleHR1cmUnLFxuXHRcdFx0XHRcdCdcdHNwZWN1bGFyRmFjdG9yICo9IHRleGVsU3BlY3VsYXIucmdiOycsXG5cdFx0XHRcdFx0JyNlbmRpZidcblx0XHRcdFx0XS5qb2luKCAnXFxuJyApO1xuXG5cdFx0XHRcdHZhciBnbG9zc2luZXNzTWFwRnJhZ21lbnRDaHVuayA9IFtcblx0XHRcdFx0XHQnZmxvYXQgZ2xvc3NpbmVzc0ZhY3RvciA9IGdsb3NzaW5lc3M7Jyxcblx0XHRcdFx0XHQnI2lmZGVmIFVTRV9HTE9TU0lORVNTTUFQJyxcblx0XHRcdFx0XHQnXHR2ZWM0IHRleGVsR2xvc3NpbmVzcyA9IHRleHR1cmUyRCggZ2xvc3NpbmVzc01hcCwgdlV2ICk7Jyxcblx0XHRcdFx0XHQnXHQvLyByZWFkcyBjaGFubmVsIEEsIGNvbXBhdGlibGUgd2l0aCBhIGdsVEYgU3BlY3VsYXItR2xvc3NpbmVzcyAoUkdCQSkgdGV4dHVyZScsXG5cdFx0XHRcdFx0J1x0Z2xvc3NpbmVzc0ZhY3RvciAqPSB0ZXhlbEdsb3NzaW5lc3MuYTsnLFxuXHRcdFx0XHRcdCcjZW5kaWYnXG5cdFx0XHRcdF0uam9pbiggJ1xcbicgKTtcblxuXHRcdFx0XHR2YXIgbGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmsgPSBbXG5cdFx0XHRcdFx0J1BoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7Jyxcblx0XHRcdFx0XHQnbWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjsnLFxuXHRcdFx0XHRcdCdtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCAxLjAgLSBnbG9zc2luZXNzRmFjdG9yLCAwLjA0LCAxLjAgKTsnLFxuXHRcdFx0XHRcdCdtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXJGYWN0b3IucmdiOycsXG5cdFx0XHRcdF0uam9pbiggJ1xcbicgKTtcblxuXHRcdFx0XHR2YXIgZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXJcblx0XHRcdFx0XHQucmVwbGFjZSggJ3VuaWZvcm0gZmxvYXQgcm91Z2huZXNzOycsICd1bmlmb3JtIHZlYzMgc3BlY3VsYXI7JyApXG5cdFx0XHRcdFx0LnJlcGxhY2UoICd1bmlmb3JtIGZsb2F0IG1ldGFsbmVzczsnLCAndW5pZm9ybSBmbG9hdCBnbG9zc2luZXNzOycgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAnI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PicsIHNwZWN1bGFyTWFwUGFyc0ZyYWdtZW50Q2h1bmsgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAnI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PicsIGdsb3NzaW5lc3NNYXBQYXJzRnJhZ21lbnRDaHVuayApXG5cdFx0XHRcdFx0LnJlcGxhY2UoICcjaW5jbHVkZSA8cm91Z2huZXNzbWFwX2ZyYWdtZW50PicsIHNwZWN1bGFyTWFwRnJhZ21lbnRDaHVuayApXG5cdFx0XHRcdFx0LnJlcGxhY2UoICcjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PicsIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rIClcblx0XHRcdFx0XHQucmVwbGFjZSggJyNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+JywgbGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmsgKTtcblxuXHRcdFx0XHRkZWxldGUgdW5pZm9ybXMucm91Z2huZXNzO1xuXHRcdFx0XHRkZWxldGUgdW5pZm9ybXMubWV0YWxuZXNzO1xuXHRcdFx0XHRkZWxldGUgdW5pZm9ybXMucm91Z2huZXNzTWFwO1xuXHRcdFx0XHRkZWxldGUgdW5pZm9ybXMubWV0YWxuZXNzTWFwO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyID0geyB2YWx1ZTogbmV3IENvbG9yKCkuc2V0SGV4KCAweDExMTExMSApIH07XG5cdFx0XHRcdHVuaWZvcm1zLmdsb3NzaW5lc3MgPSB7IHZhbHVlOiAwLjUgfTtcblx0XHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJNYXAgPSB7IHZhbHVlOiBudWxsIH07XG5cdFx0XHRcdHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAgPSB7IHZhbHVlOiBudWxsIH07XG5cblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMudmVydGV4U2hhZGVyID0gc2hhZGVyLnZlcnRleFNoYWRlcjtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjtcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMudW5pZm9ybXMgPSB1bmlmb3Jtcztcblx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5jb2xvciA9IG5ldyBDb2xvciggMS4wLCAxLjAsIDEuMCApO1xuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gMS4wO1xuXG5cdFx0XHRcdHZhciBwZW5kaW5nID0gW107XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvciApICkge1xuXG5cdFx0XHRcdFx0dmFyIGFycmF5ID0gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmRpZmZ1c2VGYWN0b3I7XG5cblx0XHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5jb2xvci5mcm9tQXJyYXkoIGFycmF5ICk7XG5cdFx0XHRcdFx0bWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcGJyU3BlY3VsYXJHbG9zc2luZXNzLmRpZmZ1c2VUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21hcCcsIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZSApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmVtaXNzaXZlID0gbmV3IENvbG9yKCAwLjAsIDAuMCwgMC4wICk7XG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmdsb3NzaW5lc3MgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZ2xvc3NpbmVzc0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmdsb3NzaW5lc3NGYWN0b3IgOiAxLjA7XG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyID0gbmV3IENvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsUGFyYW1zLnNwZWN1bGFyLmZyb21BcnJheSggcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyRmFjdG9yICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHZhciBzcGVjR2xvc3NNYXBEZWYgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJHbG9zc2luZXNzVGV4dHVyZTtcblx0XHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2dsb3NzaW5lc3NNYXAnLCBzcGVjR2xvc3NNYXBEZWYgKSApO1xuXHRcdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnc3BlY3VsYXJNYXAnLCBzcGVjR2xvc3NNYXBEZWYgKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKTtcblxuXHRcdFx0fSxcblxuXHRcdFx0Y3JlYXRlTWF0ZXJpYWw6IGZ1bmN0aW9uICggcGFyYW1zICkge1xuXG5cdFx0XHRcdC8vIHNldHVwIG1hdGVyaWFsIHByb3BlcnRpZXMgYmFzZWQgb24gTWVzaFN0YW5kYXJkTWF0ZXJpYWwgZm9yIFNwZWN1bGFyLUdsb3NzaW5lc3NcblxuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdFx0XHRkZWZpbmVzOiBwYXJhbXMuZGVmaW5lcyxcblx0XHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IHBhcmFtcy52ZXJ0ZXhTaGFkZXIsXG5cdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHBhcmFtcy5mcmFnbWVudFNoYWRlcixcblx0XHRcdFx0XHR1bmlmb3JtczogcGFyYW1zLnVuaWZvcm1zLFxuXHRcdFx0XHRcdGZvZzogdHJ1ZSxcblx0XHRcdFx0XHRsaWdodHM6IHRydWUsXG5cdFx0XHRcdFx0b3BhY2l0eTogcGFyYW1zLm9wYWNpdHksXG5cdFx0XHRcdFx0dHJhbnNwYXJlbnQ6IHBhcmFtcy50cmFuc3BhcmVudFxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0bWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmNvbG9yID0gcGFyYW1zLmNvbG9yO1xuXG5cdFx0XHRcdG1hdGVyaWFsLm1hcCA9IHBhcmFtcy5tYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMubWFwO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmxpZ2h0TWFwID0gbnVsbDtcblx0XHRcdFx0bWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSAxLjA7XG5cblx0XHRcdFx0bWF0ZXJpYWwuYW9NYXAgPSBwYXJhbXMuYW9NYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuYW9NYXA7XG5cdFx0XHRcdG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmVtaXNzaXZlID0gcGFyYW1zLmVtaXNzaXZlO1xuXHRcdFx0XHRtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcblx0XHRcdFx0bWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBwYXJhbXMuZW1pc3NpdmVNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZW1pc3NpdmVNYXA7XG5cblx0XHRcdFx0bWF0ZXJpYWwuYnVtcE1hcCA9IHBhcmFtcy5idW1wTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmJ1bXBNYXA7XG5cdFx0XHRcdG1hdGVyaWFsLmJ1bXBTY2FsZSA9IDE7XG5cblx0XHRcdFx0bWF0ZXJpYWwubm9ybWFsTWFwID0gcGFyYW1zLm5vcm1hbE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5ub3JtYWxNYXA7XG5cblx0XHRcdFx0aWYgKCBwYXJhbXMubm9ybWFsU2NhbGUgKSBtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IHBhcmFtcy5ub3JtYWxTY2FsZTtcblxuXHRcdFx0XHRtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHRcdFx0XHRtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdFx0XHRcdG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnNwZWN1bGFyTWFwID0gcGFyYW1zLnNwZWN1bGFyTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLnNwZWN1bGFyTWFwO1xuXHRcdFx0XHRtYXRlcmlhbC5zcGVjdWxhciA9IHBhcmFtcy5zcGVjdWxhcjtcblxuXHRcdFx0XHRtYXRlcmlhbC5nbG9zc2luZXNzTWFwID0gcGFyYW1zLmdsb3NzaW5lc3NNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZ2xvc3NpbmVzc01hcDtcblx0XHRcdFx0bWF0ZXJpYWwuZ2xvc3NpbmVzcyA9IHBhcmFtcy5nbG9zc2luZXNzO1xuXG5cdFx0XHRcdG1hdGVyaWFsLmFscGhhTWFwID0gbnVsbDtcblxuXHRcdFx0XHRtYXRlcmlhbC5lbnZNYXAgPSBwYXJhbXMuZW52TWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLmVudk1hcDtcblx0XHRcdFx0bWF0ZXJpYWwuZW52TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdFx0XHRcdG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0XHRcdFx0bWF0ZXJpYWwuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcyA9IHRydWU7XG5cblx0XHRcdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENsb25lcyBhIEdMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCBpbnN0YW5jZS4gVGhlIFNoYWRlck1hdGVyaWFsLmNvcHkoKSBtZXRob2QgY2FuXG5cdFx0XHQgKiBjb3B5IG9ubHkgcHJvcGVydGllcyBpdCBrbm93cyBhYm91dCBvciBpbmhlcml0cywgYW5kIG1pc3NlcyBtYW55IHByb3BlcnRpZXMgdGhhdCB3b3VsZFxuXHRcdFx0ICogbm9ybWFsbHkgYmUgZGVmaW5lZCBieSBNZXNoU3RhbmRhcmRNYXRlcmlhbC5cblx0XHRcdCAqXG5cdFx0XHQgKiBUaGlzIG1ldGhvZCBhbGxvd3MgR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFscyB0byBiZSBjbG9uZWQgaW4gdGhlIHByb2Nlc3Mgb2Zcblx0XHRcdCAqIGxvYWRpbmcgYSBnbFRGIG1vZGVsLCBidXQgY2xvbmluZyBsYXRlciAoZS5nLiBieSB0aGUgdXNlcikgd291bGQgcmVxdWlyZSB0aGVzZSBjaGFuZ2VzXG5cdFx0XHQgKiBBTkQgYWxzbyB1cGRhdGluZyBgLm9uQmVmb3JlUmVuZGVyYCBvbiB0aGUgcGFyZW50IG1lc2guXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtICB7U2hhZGVyTWF0ZXJpYWx9IHNvdXJjZVxuXHRcdFx0ICogQHJldHVybiB7U2hhZGVyTWF0ZXJpYWx9XG5cdFx0XHQgKi9cblx0XHRcdGNsb25lTWF0ZXJpYWw6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBzb3VyY2UuY2xvbmUoKTtcblxuXHRcdFx0XHR0YXJnZXQuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPSB0cnVlO1xuXG5cdFx0XHRcdHZhciBwYXJhbXMgPSB0aGlzLnNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtcztcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gcGFyYW1zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gc291cmNlWyBwYXJhbXNbIGkgXSBdO1xuXHRcdFx0XHRcdHRhcmdldFsgcGFyYW1zWyBpIF0gXSA9ICggdmFsdWUgJiYgdmFsdWUuaXNDb2xvciApID8gdmFsdWUuY2xvbmUoKSA6IHZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBIZXJlJ3MgYmFzZWQgb24gcmVmcmVzaFVuaWZvcm1zQ29tbW9uKCkgYW5kIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCkgaW4gV2ViR0xSZW5kZXJlci5cblx0XHRcdHJlZnJlc2hVbmlmb3JtczogZnVuY3Rpb24gKCByZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsLnVuaWZvcm1zO1xuXHRcdFx0XHR2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7XG5cblx0XHRcdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlmZnVzZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHR1bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5lbWlzc2l2ZSApLm11bHRpcGx5U2NhbGFyKCBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcblx0XHRcdFx0dW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcblx0XHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdFx0XHR1bmlmb3Jtcy5saWdodE1hcC52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5saWdodE1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0XHRcdHVuaWZvcm1zLmFvTWFwLnZhbHVlID0gbWF0ZXJpYWwuYW9NYXA7XG5cdFx0XHRcdHVuaWZvcm1zLmFvTWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHk7XG5cblx0XHRcdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG5cdFx0XHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdFx0XHQvLyAyLiBzcGVjdWxhciBtYXBcblx0XHRcdFx0Ly8gMy4gbm9ybWFsIG1hcFxuXHRcdFx0XHQvLyA0LiBidW1wIG1hcFxuXHRcdFx0XHQvLyA1LiBhbHBoYSBtYXBcblx0XHRcdFx0Ly8gNi4gZW1pc3NpdmUgbWFwXG5cblx0XHRcdFx0dmFyIHV2U2NhbGVNYXA7XG5cblx0XHRcdFx0aWYgKCBtYXRlcmlhbC5tYXAgKSB7XG5cblx0XHRcdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcCApIHtcblxuXHRcdFx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5nbG9zc2luZXNzTWFwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuXG5cdFx0XHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdFx0aWYgKCB1dlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0XHRcdHV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbWF0ZXJpYWwuZW52TWFwICkge1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMuZW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwO1xuXHRcdFx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdFx0XHRcdC8vIGRvbid0IGZsaXAgQ3ViZVRleHR1cmUgZW52TWFwcywgZmxpcCBldmVyeXRoaW5nIGVsc2U6XG5cdFx0XHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSB3aWxsIGJlIGZsaXBwZWQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdFx0Ly8gIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZS50ZXh0dXJlIHdpbGwgYmUgZmxpcHBlZCBiZWNhdXNlIGl0J3MgYSBUZXh0dXJlIGFuZCBOT1QgYSBDdWJlVGV4dHVyZVxuXHRcdFx0XHRcdC8vIHRoaXMgY2hlY2sgbXVzdCBiZSBoYW5kbGVkIGRpZmZlcmVudGx5LCBvciByZW1vdmVkIGVudGlyZWx5LCBpZiBXZWJHTFJlbmRlclRhcmdldEN1YmUgdXNlcyBhIEN1YmVUZXh0dXJlIGluIHRoZSBmdXR1cmVcblx0XHRcdFx0XHR1bmlmb3Jtcy5mbGlwRW52TWFwLnZhbHVlID0gbWF0ZXJpYWwuZW52TWFwLmlzQ3ViZVRleHR1cmUgPyAtIDEgOiAxO1xuXG5cdFx0XHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0XHRcdHVuaWZvcm1zLnJlZnJhY3Rpb25SYXRpby52YWx1ZSA9IG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbztcblxuXHRcdFx0XHRcdHVuaWZvcm1zLm1heE1pcExldmVsLnZhbHVlID0gcmVuZGVyZXIucHJvcGVydGllcy5nZXQoIG1hdGVyaWFsLmVudk1hcCApLl9fbWF4TWlwTGV2ZWw7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyICk7XG5cdFx0XHRcdHVuaWZvcm1zLmdsb3NzaW5lc3MudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzTWFwO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cdFx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cblx0XHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdFx0XHRpZiAoIHVuaWZvcm1zLmdsb3NzaW5lc3NNYXAudmFsdWUgIT09IG51bGwgJiYgZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0ZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUCA9ICcnO1xuXHRcdFx0XHRcdC8vIHNldCBVU0VfUk9VR0hORVNTTUFQIHRvIGVuYWJsZSB2VXZcblx0XHRcdFx0XHRkZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVAgPSAnJztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlID09PSBudWxsICYmIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGRlbGV0ZSBkZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQO1xuXHRcdFx0XHRcdGRlbGV0ZSBkZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVA7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXHQvKioqKioqKioqKiBJTlRFUlBPTEFUSU9OICoqKioqKioqL1xuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5cdC8vIFNwbGluZSBJbnRlcnBvbGF0aW9uXG5cdC8vIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYXBwZW5kaXgtYy1zcGxpbmUtaW50ZXJwb2xhdGlvblxuXHRmdW5jdGlvbiBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRcdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR9XG5cblx0R0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICk7XG5cdEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50O1xuXG5cdEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVfID0gZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdC8vIENvcGllcyBhIHNhbXBsZSB2YWx1ZSB0byB0aGUgcmVzdWx0IGJ1ZmZlci4gU2VlIGRlc2NyaXB0aW9uIG9mIGdsVEZcblx0XHQvLyBDVUJJQ1NQTElORSB2YWx1ZXMgbGF5b3V0IGluIGludGVycG9sYXRlXygpIGZ1bmN0aW9uIGJlbG93LlxuXG5cdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyLFxuXHRcdFx0dmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXMsXG5cdFx0XHR2YWx1ZVNpemUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGluZGV4ICogdmFsdWVTaXplICogMyArIHZhbHVlU2l6ZTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gdmFsdWVTaXplOyBpICsrICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9IHZhbHVlc1sgb2Zmc2V0ICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9O1xuXG5cdEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5iZWZvcmVTdGFydF8gPSBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuY29weVNhbXBsZVZhbHVlXztcblxuXHRHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuYWZ0ZXJFbmRfID0gR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV87XG5cblx0R0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlLmludGVycG9sYXRlXyA9IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcjtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy5zYW1wbGVWYWx1ZXM7XG5cdFx0dmFyIHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuXG5cdFx0dmFyIHN0cmlkZTIgPSBzdHJpZGUgKiAyO1xuXHRcdHZhciBzdHJpZGUzID0gc3RyaWRlICogMztcblxuXHRcdHZhciB0ZCA9IHQxIC0gdDA7XG5cblx0XHR2YXIgcCA9ICggdCAtIHQwICkgLyB0ZDtcblx0XHR2YXIgcHAgPSBwICogcDtcblx0XHR2YXIgcHBwID0gcHAgKiBwO1xuXG5cdFx0dmFyIG9mZnNldDEgPSBpMSAqIHN0cmlkZTM7XG5cdFx0dmFyIG9mZnNldDAgPSBvZmZzZXQxIC0gc3RyaWRlMztcblxuXHRcdHZhciBzMiA9IC0gMiAqIHBwcCArIDMgKiBwcDtcblx0XHR2YXIgczMgPSBwcHAgLSBwcDtcblx0XHR2YXIgczAgPSAxIC0gczI7XG5cdFx0dmFyIHMxID0gczMgLSBwcCArIHA7XG5cblx0XHQvLyBMYXlvdXQgb2Yga2V5ZnJhbWUgb3V0cHV0IHZhbHVlcyBmb3IgQ1VCSUNTUExJTkUgYW5pbWF0aW9uczpcblx0XHQvLyAgIFsgaW5UYW5nZW50XzEsIHNwbGluZVZlcnRleF8xLCBvdXRUYW5nZW50XzEsIGluVGFuZ2VudF8yLCBzcGxpbmVWZXJ0ZXhfMiwgLi4uIF1cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgaSArKyApIHtcblxuXHRcdFx0dmFyIHAwID0gdmFsdWVzWyBvZmZzZXQwICsgaSArIHN0cmlkZSBdOyAvLyBzcGxpbmVWZXJ0ZXhfa1xuXHRcdFx0dmFyIG0wID0gdmFsdWVzWyBvZmZzZXQwICsgaSArIHN0cmlkZTIgXSAqIHRkOyAvLyBvdXRUYW5nZW50X2sgKiAodF9rKzEgLSB0X2spXG5cdFx0XHR2YXIgcDEgPSB2YWx1ZXNbIG9mZnNldDEgKyBpICsgc3RyaWRlIF07IC8vIHNwbGluZVZlcnRleF9rKzFcblx0XHRcdHZhciBtMSA9IHZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHRkOyAvLyBpblRhbmdlbnRfaysxICogKHRfaysxIC0gdF9rKVxuXG5cdFx0XHRyZXN1bHRbIGkgXSA9IHMwICogcDAgKyBzMSAqIG0wICsgczIgKiBwMSArIHMzICogbTE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH07XG5cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblx0LyoqKioqKioqKiogSU5URVJOQUxTICoqKioqKioqKioqKi9cblx0LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXHQvKiBDT05TVEFOVFMgKi9cblxuXHR2YXIgV0VCR0xfQ09OU1RBTlRTID0ge1xuXHRcdEZMT0FUOiA1MTI2LFxuXHRcdC8vRkxPQVRfTUFUMjogMzU2NzQsXG5cdFx0RkxPQVRfTUFUMzogMzU2NzUsXG5cdFx0RkxPQVRfTUFUNDogMzU2NzYsXG5cdFx0RkxPQVRfVkVDMjogMzU2NjQsXG5cdFx0RkxPQVRfVkVDMzogMzU2NjUsXG5cdFx0RkxPQVRfVkVDNDogMzU2NjYsXG5cdFx0TElORUFSOiA5NzI5LFxuXHRcdFJFUEVBVDogMTA0OTcsXG5cdFx0U0FNUExFUl8yRDogMzU2NzgsXG5cdFx0UE9JTlRTOiAwLFxuXHRcdExJTkVTOiAxLFxuXHRcdExJTkVfTE9PUDogMixcblx0XHRMSU5FX1NUUklQOiAzLFxuXHRcdFRSSUFOR0xFUzogNCxcblx0XHRUUklBTkdMRV9TVFJJUDogNSxcblx0XHRUUklBTkdMRV9GQU46IDYsXG5cdFx0VU5TSUdORURfQllURTogNTEyMSxcblx0XHRVTlNJR05FRF9TSE9SVDogNTEyM1xuXHR9O1xuXG5cdHZhciBXRUJHTF9DT01QT05FTlRfVFlQRVMgPSB7XG5cdFx0NTEyMDogSW50OEFycmF5LFxuXHRcdDUxMjE6IFVpbnQ4QXJyYXksXG5cdFx0NTEyMjogSW50MTZBcnJheSxcblx0XHQ1MTIzOiBVaW50MTZBcnJheSxcblx0XHQ1MTI1OiBVaW50MzJBcnJheSxcblx0XHQ1MTI2OiBGbG9hdDMyQXJyYXlcblx0fTtcblxuXHR2YXIgV0VCR0xfRklMVEVSUyA9IHtcblx0XHQ5NzI4OiBOZWFyZXN0RmlsdGVyLFxuXHRcdDk3Mjk6IExpbmVhckZpbHRlcixcblx0XHQ5OTg0OiBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlcixcblx0XHQ5OTg1OiBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHRcdDk5ODY6IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIsXG5cdFx0OTk4NzogTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyXG5cdH07XG5cblx0dmFyIFdFQkdMX1dSQVBQSU5HUyA9IHtcblx0XHQzMzA3MTogQ2xhbXBUb0VkZ2VXcmFwcGluZyxcblx0XHQzMzY0ODogTWlycm9yZWRSZXBlYXRXcmFwcGluZyxcblx0XHQxMDQ5NzogUmVwZWF0V3JhcHBpbmdcblx0fTtcblxuXHR2YXIgV0VCR0xfVFlQRV9TSVpFUyA9IHtcblx0XHQnU0NBTEFSJzogMSxcblx0XHQnVkVDMic6IDIsXG5cdFx0J1ZFQzMnOiAzLFxuXHRcdCdWRUM0JzogNCxcblx0XHQnTUFUMic6IDQsXG5cdFx0J01BVDMnOiA5LFxuXHRcdCdNQVQ0JzogMTZcblx0fTtcblxuXHR2YXIgQVRUUklCVVRFUyA9IHtcblx0XHRQT1NJVElPTjogJ3Bvc2l0aW9uJyxcblx0XHROT1JNQUw6ICdub3JtYWwnLFxuXHRcdFRBTkdFTlQ6ICd0YW5nZW50Jyxcblx0XHRURVhDT09SRF8wOiAndXYnLFxuXHRcdFRFWENPT1JEXzE6ICd1djInLFxuXHRcdENPTE9SXzA6ICdjb2xvcicsXG5cdFx0V0VJR0hUU18wOiAnc2tpbldlaWdodCcsXG5cdFx0Sk9JTlRTXzA6ICdza2luSW5kZXgnLFxuXHR9O1xuXG5cdHZhciBQQVRIX1BST1BFUlRJRVMgPSB7XG5cdFx0c2NhbGU6ICdzY2FsZScsXG5cdFx0dHJhbnNsYXRpb246ICdwb3NpdGlvbicsXG5cdFx0cm90YXRpb246ICdxdWF0ZXJuaW9uJyxcblx0XHR3ZWlnaHRzOiAnbW9ycGhUYXJnZXRJbmZsdWVuY2VzJ1xuXHR9O1xuXG5cdHZhciBJTlRFUlBPTEFUSU9OID0ge1xuXHRcdENVQklDU1BMSU5FOiB1bmRlZmluZWQsIC8vIFdlIHVzZSBhIGN1c3RvbSBpbnRlcnBvbGFudCAoR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhdGlvbikgZm9yIENVQklDU1BMSU5FIHRyYWNrcy4gRWFjaFxuXHRcdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtleWZyYW1lIHRyYWNrIHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhIGRlZmF1bHQgaW50ZXJwb2xhdGlvbiB0eXBlLCB0aGVuIG1vZGlmaWVkLlxuXHRcdExJTkVBUjogSW50ZXJwb2xhdGVMaW5lYXIsXG5cdFx0U1RFUDogSW50ZXJwb2xhdGVEaXNjcmV0ZVxuXHR9O1xuXG5cdHZhciBBTFBIQV9NT0RFUyA9IHtcblx0XHRPUEFRVUU6ICdPUEFRVUUnLFxuXHRcdE1BU0s6ICdNQVNLJyxcblx0XHRCTEVORDogJ0JMRU5EJ1xuXHR9O1xuXG5cdHZhciBNSU1FX1RZUEVfRk9STUFUUyA9IHtcblx0XHQnaW1hZ2UvcG5nJzogUkdCQUZvcm1hdCxcblx0XHQnaW1hZ2UvanBlZyc6IFJHQkZvcm1hdFxuXHR9O1xuXG5cdC8qIFVUSUxJVFkgRlVOQ1RJT05TICovXG5cblx0ZnVuY3Rpb24gcmVzb2x2ZVVSTCggdXJsLCBwYXRoICkge1xuXG5cdFx0Ly8gSW52YWxpZCBVUkxcblx0XHRpZiAoIHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHVybCA9PT0gJycgKSByZXR1cm4gJyc7XG5cblx0XHQvLyBIb3N0IFJlbGF0aXZlIFVSTFxuXHRcdGlmICggL15odHRwcz86XFwvXFwvL2kudGVzdCggcGF0aCApICYmIC9eXFwvLy50ZXN0KCB1cmwgKSApIHtcblxuXHRcdFx0cGF0aCA9IHBhdGgucmVwbGFjZSggLyheaHR0cHM/OlxcL1xcL1teXFwvXSspLiovaSwgJyQxJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQWJzb2x1dGUgVVJMIGh0dHA6Ly8saHR0cHM6Ly8sLy9cblx0XHRpZiAoIC9eKGh0dHBzPzopP1xcL1xcLy9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcblxuXHRcdC8vIERhdGEgVVJJXG5cdFx0aWYgKCAvXmRhdGE6LiosLiokL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0Ly8gQmxvYiBVUkxcblx0XHRpZiAoIC9eYmxvYjouKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG5cblx0XHQvLyBSZWxhdGl2ZSBVUkxcblx0XHRyZXR1cm4gcGF0aCArIHVybDtcblxuXHR9XG5cblx0dmFyIGRlZmF1bHRNYXRlcmlhbDtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNkZWZhdWx0LW1hdGVyaWFsXG5cdCAqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWZhdWx0TWF0ZXJpYWwoKSB7XG5cblx0XHRkZWZhdWx0TWF0ZXJpYWwgPSBkZWZhdWx0TWF0ZXJpYWwgfHwgbmV3IE1lc2hTdGFuZGFyZE1hdGVyaWFsKCB7XG5cdFx0XHRjb2xvcjogMHhGRkZGRkYsXG5cdFx0XHRlbWlzc2l2ZTogMHgwMDAwMDAsXG5cdFx0XHRtZXRhbG5lc3M6IDEsXG5cdFx0XHRyb3VnaG5lc3M6IDEsXG5cdFx0XHR0cmFuc3BhcmVudDogZmFsc2UsXG5cdFx0XHRkZXB0aFRlc3Q6IHRydWUsXG5cdFx0XHRzaWRlOiBGcm9udFNpZGVcblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gZGVmYXVsdE1hdGVyaWFsO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoIGtub3duRXh0ZW5zaW9ucywgb2JqZWN0LCBvYmplY3REZWYgKSB7XG5cblx0XHQvLyBBZGQgdW5rbm93biBnbFRGIGV4dGVuc2lvbnMgdG8gYW4gb2JqZWN0J3MgdXNlckRhdGEuXG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBvYmplY3REZWYuZXh0ZW5zaW9ucyApIHtcblxuXHRcdFx0aWYgKCBrbm93bkV4dGVuc2lvbnNbIG5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9ucyA9IG9iamVjdC51c2VyRGF0YS5nbHRmRXh0ZW5zaW9ucyB8fCB7fTtcblx0XHRcdFx0b2JqZWN0LnVzZXJEYXRhLmdsdGZFeHRlbnNpb25zWyBuYW1lIF0gPSBvYmplY3REZWYuZXh0ZW5zaW9uc1sgbmFtZSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge09iamVjdDNEfE1hdGVyaWFsfEJ1ZmZlckdlb21ldHJ5fSBvYmplY3Rcblx0ICogQHBhcmFtIHtHTFRGLmRlZmluaXRpb259IGdsdGZEZWZcblx0ICovXG5cdGZ1bmN0aW9uIGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIG9iamVjdCwgZ2x0ZkRlZiApIHtcblxuXHRcdGlmICggZ2x0ZkRlZi5leHRyYXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YgZ2x0ZkRlZi5leHRyYXMgPT09ICdvYmplY3QnICkge1xuXG5cdFx0XHRcdE9iamVjdC5hc3NpZ24oIG9iamVjdC51c2VyRGF0YSwgZ2x0ZkRlZi5leHRyYXMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBJZ25vcmluZyBwcmltaXRpdmUgdHlwZSAuZXh0cmFzLCAnICsgZ2x0ZkRlZi5leHRyYXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtb3JwaC10YXJnZXRzXG5cdCAqXG5cdCAqIEBwYXJhbSB7QnVmZmVyR2VvbWV0cnl9IGdlb21ldHJ5XG5cdCAqIEBwYXJhbSB7QXJyYXk8R0xURi5UYXJnZXQ+fSB0YXJnZXRzXG5cdCAqIEBwYXJhbSB7R0xURlBhcnNlcn0gcGFyc2VyXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QnVmZmVyR2VvbWV0cnk+fVxuXHQgKi9cblx0ZnVuY3Rpb24gYWRkTW9ycGhUYXJnZXRzKCBnZW9tZXRyeSwgdGFyZ2V0cywgcGFyc2VyICkge1xuXG5cdFx0dmFyIGhhc01vcnBoUG9zaXRpb24gPSBmYWxzZTtcblx0XHR2YXIgaGFzTW9ycGhOb3JtYWwgPSBmYWxzZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdGFyZ2V0ID0gdGFyZ2V0c1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRhcmdldC5QT1NJVElPTiAhPT0gdW5kZWZpbmVkICkgaGFzTW9ycGhQb3NpdGlvbiA9IHRydWU7XG5cdFx0XHRpZiAoIHRhcmdldC5OT1JNQUwgIT09IHVuZGVmaW5lZCApIGhhc01vcnBoTm9ybWFsID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uICYmIGhhc01vcnBoTm9ybWFsICkgYnJlYWs7XG5cblx0XHR9XG5cblx0XHRpZiAoICEgaGFzTW9ycGhQb3NpdGlvbiAmJiAhIGhhc01vcnBoTm9ybWFsICkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggZ2VvbWV0cnkgKTtcblxuXHRcdHZhciBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMgPSBbXTtcblx0XHR2YXIgcGVuZGluZ05vcm1hbEFjY2Vzc29ycyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRhcmdldHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB0YXJnZXQgPSB0YXJnZXRzWyBpIF07XG5cblx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiApIHtcblxuXHRcdFx0XHR2YXIgcGVuZGluZ0FjY2Vzc29yID0gdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWRcblx0XHRcdFx0XHQ/IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCB0YXJnZXQuUE9TSVRJT04gKVxuXHRcdFx0XHRcdDogZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0XHRwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMucHVzaCggcGVuZGluZ0FjY2Vzc29yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbCApIHtcblxuXHRcdFx0XHR2YXIgcGVuZGluZ0FjY2Vzc29yID0gdGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdFx0PyBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ2FjY2Vzc29yJywgdGFyZ2V0Lk5PUk1BTCApXG5cdFx0XHRcdFx0OiBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0XHRwZW5kaW5nTm9ybWFsQWNjZXNzb3JzLnB1c2goIHBlbmRpbmdBY2Nlc3NvciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIFtcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nUG9zaXRpb25BY2Nlc3NvcnMgKSxcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nTm9ybWFsQWNjZXNzb3JzIClcblx0XHRdICkudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvcnMgKSB7XG5cblx0XHRcdHZhciBtb3JwaFBvc2l0aW9ucyA9IGFjY2Vzc29yc1sgMCBdO1xuXHRcdFx0dmFyIG1vcnBoTm9ybWFscyA9IGFjY2Vzc29yc1sgMSBdO1xuXG5cdFx0XHQvLyBDbG9uZSBtb3JwaCB0YXJnZXQgYWNjZXNzb3JzIGJlZm9yZSBtb2RpZnlpbmcgdGhlbS5cblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoUG9zaXRpb25zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbiA9PT0gbW9ycGhQb3NpdGlvbnNbIGkgXSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdG1vcnBoUG9zaXRpb25zWyBpIF0gPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhQb3NpdGlvbnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtb3JwaE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbCA9PT0gbW9ycGhOb3JtYWxzWyBpIF0gKSBjb250aW51ZTtcblxuXHRcdFx0XHRtb3JwaE5vcm1hbHNbIGkgXSA9IGNsb25lQnVmZmVyQXR0cmlidXRlKCBtb3JwaE5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciB0YXJnZXQgPSB0YXJnZXRzWyBpIF07XG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVOYW1lID0gJ21vcnBoVGFyZ2V0JyArIGk7XG5cblx0XHRcdFx0aWYgKCBoYXNNb3JwaFBvc2l0aW9uICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhyZWUuanMgbW9ycGggcG9zaXRpb24gaXMgYWJzb2x1dGUgdmFsdWUuIFRoZSBmb3JtdWxhIGlzXG5cdFx0XHRcdFx0Ly8gICBiYXNlUG9zaXRpb25cblx0XHRcdFx0XHQvLyAgICAgKyB3ZWlnaHQwICogKCBtb3JwaFBvc2l0aW9uMCAtIGJhc2VQb3NpdGlvbiApXG5cdFx0XHRcdFx0Ly8gICAgICsgd2VpZ2h0MSAqICggbW9ycGhQb3NpdGlvbjEgLSBiYXNlUG9zaXRpb24gKVxuXHRcdFx0XHRcdC8vICAgICAuLi5cblx0XHRcdFx0XHQvLyB3aGlsZSB0aGUgZ2xURiBvbmUgaXMgcmVsYXRpdmVcblx0XHRcdFx0XHQvLyAgIGJhc2VQb3NpdGlvblxuXHRcdFx0XHRcdC8vICAgICArIHdlaWdodDAgKiBnbFRGbW9ycGhQb3NpdGlvbjBcblx0XHRcdFx0XHQvLyAgICAgKyB3ZWlnaHQxICogZ2xURm1vcnBoUG9zaXRpb24xXG5cdFx0XHRcdFx0Ly8gICAgIC4uLlxuXHRcdFx0XHRcdC8vIHRoZW4gd2UgbmVlZCB0byBjb252ZXJ0IGZyb20gcmVsYXRpdmUgdG8gYWJzb2x1dGUgaGVyZS5cblxuXHRcdFx0XHRcdGlmICggdGFyZ2V0LlBPU0lUSU9OICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IG1vcnBoUG9zaXRpb25zWyBpIF07XG5cdFx0XHRcdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlTmFtZTtcblxuXHRcdFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuc2V0WFlaKFxuXHRcdFx0XHRcdFx0XHRcdGosXG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpb25BdHRyaWJ1dGUuZ2V0WCggaiApICsgcG9zaXRpb24uZ2V0WCggaiApLFxuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uQXR0cmlidXRlLmdldFkoIGogKSArIHBvc2l0aW9uLmdldFkoIGogKSxcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbkF0dHJpYnV0ZS5nZXRaKCBqICkgKyBwb3NpdGlvbi5nZXRaKCBqIClcblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGhhc01vcnBoTm9ybWFsICkge1xuXG5cdFx0XHRcdFx0Ly8gc2VlIHRhcmdldC5QT1NJVElPTidzIGNvbW1lbnRcblxuXHRcdFx0XHRcdGlmICggdGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgbm9ybWFsQXR0cmlidXRlID0gbW9ycGhOb3JtYWxzWyBpIF07XG5cdFx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUubmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG5cblx0XHRcdFx0XHRcdHZhciBub3JtYWwgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IG5vcm1hbEF0dHJpYnV0ZS5jb3VudDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdG5vcm1hbEF0dHJpYnV0ZS5zZXRYWVooXG5cdFx0XHRcdFx0XHRcdFx0aixcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuZ2V0WCggaiApICsgbm9ybWFsLmdldFgoIGogKSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuZ2V0WSggaiApICsgbm9ybWFsLmdldFkoIGogKSxcblx0XHRcdFx0XHRcdFx0XHRub3JtYWxBdHRyaWJ1dGUuZ2V0WiggaiApICsgbm9ybWFsLmdldFooIGogKVxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzTW9ycGhQb3NpdGlvbiApIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiA9IG1vcnBoUG9zaXRpb25zO1xuXHRcdFx0aWYgKCBoYXNNb3JwaE5vcm1hbCApIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgPSBtb3JwaE5vcm1hbHM7XG5cblx0XHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7TWVzaH0gbWVzaFxuXHQgKiBAcGFyYW0ge0dMVEYuTWVzaH0gbWVzaERlZlxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlTW9ycGhUYXJnZXRzKCBtZXNoLCBtZXNoRGVmICkge1xuXG5cdFx0bWVzaC51cGRhdGVNb3JwaFRhcmdldHMoKTtcblxuXHRcdGlmICggbWVzaERlZi53ZWlnaHRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtZXNoRGVmLndlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0bWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXNbIGkgXSA9IG1lc2hEZWYud2VpZ2h0c1sgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyAuZXh0cmFzIGhhcyB1c2VyLWRlZmluZWQgZGF0YSwgc28gY2hlY2sgdGhhdCAuZXh0cmFzLnRhcmdldE5hbWVzIGlzIGFuIGFycmF5LlxuXHRcdGlmICggbWVzaERlZi5leHRyYXMgJiYgQXJyYXkuaXNBcnJheSggbWVzaERlZi5leHRyYXMudGFyZ2V0TmFtZXMgKSApIHtcblxuXHRcdFx0dmFyIHRhcmdldE5hbWVzID0gbWVzaERlZi5leHRyYXMudGFyZ2V0TmFtZXM7XG5cblx0XHRcdGlmICggbWVzaC5tb3JwaFRhcmdldEluZmx1ZW5jZXMubGVuZ3RoID09PSB0YXJnZXROYW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0bWVzaC5tb3JwaFRhcmdldERpY3Rpb25hcnkgPSB7fTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGFyZ2V0TmFtZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtZXNoLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVsgdGFyZ2V0TmFtZXNbIGkgXSBdID0gaTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogSW52YWxpZCBleHRyYXMudGFyZ2V0TmFtZXMgbGVuZ3RoLiBJZ25vcmluZyBuYW1lcy4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlS2V5KCBwcmltaXRpdmVEZWYgKSB7XG5cblx0XHR2YXIgZHJhY29FeHRlbnNpb24gPSBwcmltaXRpdmVEZWYuZXh0ZW5zaW9ucyAmJiBwcmltaXRpdmVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfRFJBQ09fTUVTSF9DT01QUkVTU0lPTiBdO1xuXHRcdHZhciBnZW9tZXRyeUtleTtcblxuXHRcdGlmICggZHJhY29FeHRlbnNpb24gKSB7XG5cblx0XHRcdGdlb21ldHJ5S2V5ID0gJ2RyYWNvOicgKyBkcmFjb0V4dGVuc2lvbi5idWZmZXJWaWV3XG5cdFx0XHRcdCsgJzonICsgZHJhY29FeHRlbnNpb24uaW5kaWNlc1xuXHRcdFx0XHQrICc6JyArIGNyZWF0ZUF0dHJpYnV0ZXNLZXkoIGRyYWNvRXh0ZW5zaW9uLmF0dHJpYnV0ZXMgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGdlb21ldHJ5S2V5ID0gcHJpbWl0aXZlRGVmLmluZGljZXMgKyAnOicgKyBjcmVhdGVBdHRyaWJ1dGVzS2V5KCBwcmltaXRpdmVEZWYuYXR0cmlidXRlcyApICsgJzonICsgcHJpbWl0aXZlRGVmLm1vZGU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnlLZXk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNyZWF0ZUF0dHJpYnV0ZXNLZXkoIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHR2YXIgYXR0cmlidXRlc0tleSA9ICcnO1xuXG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyggYXR0cmlidXRlcyApLnNvcnQoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBrZXlzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzS2V5ICs9IGtleXNbIGkgXSArICc6JyArIGF0dHJpYnV0ZXNbIGtleXNbIGkgXSBdICsgJzsnO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGF0dHJpYnV0ZXNLZXk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNsb25lQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHR2YXIgY291bnQgPSBhdHRyaWJ1dGUuY291bnQ7XG5cdFx0XHR2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG5cdFx0XHR2YXIgYXJyYXkgPSBhdHRyaWJ1dGUuYXJyYXkuc2xpY2UoIDAsIGNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IGNvdW50OyArKyBpICkge1xuXG5cdFx0XHRcdGFycmF5WyBqICsrIF0gPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0XHRpZiAoIGl0ZW1TaXplID49IDIgKSBhcnJheVsgaiArKyBdID0gYXR0cmlidXRlLmdldFkoIGkgKTtcblx0XHRcdFx0aWYgKCBpdGVtU2l6ZSA+PSAzICkgYXJyYXlbIGogKysgXSA9IGF0dHJpYnV0ZS5nZXRaKCBpICk7XG5cdFx0XHRcdGlmICggaXRlbVNpemUgPj0gNCApIGFycmF5WyBqICsrIF0gPSBhdHRyaWJ1dGUuZ2V0VyggaSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXR0cmlidXRlLmNsb25lKCk7XG5cblx0fVxuXG5cdC8qIEdMVEYgUEFSU0VSICovXG5cblx0ZnVuY3Rpb24gR0xURlBhcnNlcigganNvbiwgZXh0ZW5zaW9ucywgb3B0aW9ucyApIHtcblxuXHRcdHRoaXMuanNvbiA9IGpzb24gfHwge307XG5cdFx0dGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0Ly8gbG9hZGVyIG9iamVjdCBjYWNoZVxuXHRcdHRoaXMuY2FjaGUgPSBuZXcgR0xURlJlZ2lzdHJ5KCk7XG5cblx0XHQvLyBCdWZmZXJHZW9tZXRyeSBjYWNoaW5nXG5cdFx0dGhpcy5wcmltaXRpdmVDYWNoZSA9IHt9O1xuXG5cdFx0dGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoIHRoaXMub3B0aW9ucy5tYW5hZ2VyICk7XG5cdFx0dGhpcy50ZXh0dXJlTG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLm9wdGlvbnMuY3Jvc3NPcmlnaW4gKTtcblxuXHRcdHRoaXMuZmlsZUxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm9wdGlvbnMubWFuYWdlciApO1xuXHRcdHRoaXMuZmlsZUxvYWRlci5zZXRSZXNwb25zZVR5cGUoICdhcnJheWJ1ZmZlcicgKTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmNyb3NzT3JpZ2luID09PSAndXNlLWNyZWRlbnRpYWxzJyApIHtcblxuXHRcdFx0dGhpcy5maWxlTG9hZGVyLnNldFdpdGhDcmVkZW50aWFscyggdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICggb25Mb2FkLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHBhcnNlciA9IHRoaXM7XG5cdFx0dmFyIGpzb24gPSB0aGlzLmpzb247XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cblx0XHQvLyBDbGVhciB0aGUgbG9hZGVyIGNhY2hlXG5cdFx0dGhpcy5jYWNoZS5yZW1vdmVBbGwoKTtcblxuXHRcdC8vIE1hcmsgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZVxuXHRcdHRoaXMubWFya0RlZnMoKTtcblxuXHRcdFByb21pc2UuYWxsKCBbXG5cblx0XHRcdHRoaXMuZ2V0RGVwZW5kZW5jaWVzKCAnc2NlbmUnICksXG5cdFx0XHR0aGlzLmdldERlcGVuZGVuY2llcyggJ2FuaW1hdGlvbicgKSxcblx0XHRcdHRoaXMuZ2V0RGVwZW5kZW5jaWVzKCAnY2FtZXJhJyApLFxuXG5cdFx0XSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuXG5cdFx0XHR2YXIgcmVzdWx0ID0ge1xuXHRcdFx0XHRzY2VuZTogZGVwZW5kZW5jaWVzWyAwIF1bIGpzb24uc2NlbmUgfHwgMCBdLFxuXHRcdFx0XHRzY2VuZXM6IGRlcGVuZGVuY2llc1sgMCBdLFxuXHRcdFx0XHRhbmltYXRpb25zOiBkZXBlbmRlbmNpZXNbIDEgXSxcblx0XHRcdFx0Y2FtZXJhczogZGVwZW5kZW5jaWVzWyAyIF0sXG5cdFx0XHRcdGFzc2V0OiBqc29uLmFzc2V0LFxuXHRcdFx0XHRwYXJzZXI6IHBhcnNlcixcblx0XHRcdFx0dXNlckRhdGE6IHt9XG5cdFx0XHR9O1xuXG5cdFx0XHRhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoIGV4dGVuc2lvbnMsIHJlc3VsdCwganNvbiApO1xuXG5cdFx0XHRhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCByZXN1bHQsIGpzb24gKTtcblxuXHRcdFx0b25Mb2FkKCByZXN1bHQgKTtcblxuXHRcdH0gKS5jYXRjaCggb25FcnJvciApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIE1hcmtzIHRoZSBzcGVjaWFsIG5vZGVzL21lc2hlcyBpbiBqc29uIGZvciBlZmZpY2llbnQgcGFyc2UuXG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5tYXJrRGVmcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBub2RlRGVmcyA9IHRoaXMuanNvbi5ub2RlcyB8fCBbXTtcblx0XHR2YXIgc2tpbkRlZnMgPSB0aGlzLmpzb24uc2tpbnMgfHwgW107XG5cdFx0dmFyIG1lc2hEZWZzID0gdGhpcy5qc29uLm1lc2hlcyB8fCBbXTtcblxuXHRcdHZhciBtZXNoUmVmZXJlbmNlcyA9IHt9O1xuXHRcdHZhciBtZXNoVXNlcyA9IHt9O1xuXG5cdFx0Ly8gTm90aGluZyBpbiB0aGUgbm9kZSBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzIGEgQm9uZSBvciBhblxuXHRcdC8vIE9iamVjdDNELiBVc2UgdGhlIHNraW5zJyBqb2ludCByZWZlcmVuY2VzIHRvIG1hcmsgYm9uZXMuXG5cdFx0Zm9yICggdmFyIHNraW5JbmRleCA9IDAsIHNraW5MZW5ndGggPSBza2luRGVmcy5sZW5ndGg7IHNraW5JbmRleCA8IHNraW5MZW5ndGg7IHNraW5JbmRleCArKyApIHtcblxuXHRcdFx0dmFyIGpvaW50cyA9IHNraW5EZWZzWyBza2luSW5kZXggXS5qb2ludHM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBqb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0bm9kZURlZnNbIGpvaW50c1sgaSBdIF0uaXNCb25lID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gTWVzaGVzIGNhbiAoYW5kIHNob3VsZCkgYmUgcmV1c2VkIGJ5IG11bHRpcGxlIG5vZGVzIGluIGEgZ2xURiBhc3NldC4gVG9cblx0XHQvLyBhdm9pZCBoYXZpbmcgbW9yZSB0aGFuIG9uZSBNZXNoIHdpdGggdGhlIHNhbWUgbmFtZSwgY291bnRcblx0XHQvLyByZWZlcmVuY2VzIGFuZCByZW5hbWUgaW5zdGFuY2VzIGJlbG93LlxuXHRcdC8vXG5cdFx0Ly8gRXhhbXBsZTogQ2VzaXVtTWlsa1RydWNrIHNhbXBsZSBtb2RlbCByZXVzZXMgXCJXaGVlbFwiIG1lc2hlcy5cblx0XHRmb3IgKCB2YXIgbm9kZUluZGV4ID0gMCwgbm9kZUxlbmd0aCA9IG5vZGVEZWZzLmxlbmd0aDsgbm9kZUluZGV4IDwgbm9kZUxlbmd0aDsgbm9kZUluZGV4ICsrICkge1xuXG5cdFx0XHR2YXIgbm9kZURlZiA9IG5vZGVEZWZzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0aWYgKCBub2RlRGVmLm1lc2ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bWVzaFJlZmVyZW5jZXNbIG5vZGVEZWYubWVzaCBdID0gbWVzaFVzZXNbIG5vZGVEZWYubWVzaCBdID0gMDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWVzaFJlZmVyZW5jZXNbIG5vZGVEZWYubWVzaCBdICsrO1xuXG5cdFx0XHRcdC8vIE5vdGhpbmcgaW4gdGhlIG1lc2ggZGVmaW5pdGlvbiBpbmRpY2F0ZXMgd2hldGhlciBpdCBpc1xuXHRcdFx0XHQvLyBhIFNraW5uZWRNZXNoIG9yIE1lc2guIFVzZSB0aGUgbm9kZSdzIG1lc2ggcmVmZXJlbmNlXG5cdFx0XHRcdC8vIHRvIG1hcmsgU2tpbm5lZE1lc2ggaWYgbm9kZSBoYXMgc2tpbi5cblx0XHRcdFx0aWYgKCBub2RlRGVmLnNraW4gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG1lc2hEZWZzWyBub2RlRGVmLm1lc2ggXS5pc1NraW5uZWRNZXNoID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuanNvbi5tZXNoUmVmZXJlbmNlcyA9IG1lc2hSZWZlcmVuY2VzO1xuXHRcdHRoaXMuanNvbi5tZXNoVXNlcyA9IG1lc2hVc2VzO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFJlcXVlc3RzIHRoZSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuXHQgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxPYmplY3QzRHxNYXRlcmlhbHxUSFJFRS5UZXh0dXJlfEFuaW1hdGlvbkNsaXB8QXJyYXlCdWZmZXJ8T2JqZWN0Pn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY3kgPSBmdW5jdGlvbiAoIHR5cGUsIGluZGV4ICkge1xuXG5cdFx0dmFyIGNhY2hlS2V5ID0gdHlwZSArICc6JyArIGluZGV4O1xuXHRcdHZhciBkZXBlbmRlbmN5ID0gdGhpcy5jYWNoZS5nZXQoIGNhY2hlS2V5ICk7XG5cblx0XHRpZiAoICEgZGVwZW5kZW5jeSApIHtcblxuXHRcdFx0c3dpdGNoICggdHlwZSApIHtcblxuXHRcdFx0XHRjYXNlICdzY2VuZSc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZFNjZW5lKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ25vZGUnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWROb2RlKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ21lc2gnOlxuXHRcdFx0XHRcdGRlcGVuZGVuY3kgPSB0aGlzLmxvYWRNZXNoKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2FjY2Vzc29yJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQWNjZXNzb3IoIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYnVmZmVyVmlldyc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZEJ1ZmZlclZpZXcoIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYnVmZmVyJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQnVmZmVyKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ21hdGVyaWFsJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkTWF0ZXJpYWwoIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAndGV4dHVyZSc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZFRleHR1cmUoIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnc2tpbic6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZFNraW4oIGluZGV4ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnYW5pbWF0aW9uJzpcblx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gdGhpcy5sb2FkQW5pbWF0aW9uKCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2NhbWVyYSc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMubG9hZENhbWVyYSggaW5kZXggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdsaWdodCc6XG5cdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IHRoaXMuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMIF0ubG9hZExpZ2h0KCBpbmRleCApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biB0eXBlOiAnICsgdHlwZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgZGVwZW5kZW5jeSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlcGVuZGVuY3k7XG5cblx0fTtcblxuXHQvKipcblx0ICogUmVxdWVzdHMgYWxsIGRlcGVuZGVuY2llcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUgYXN5bmNocm9ub3VzbHksIHdpdGggY2FjaGluZy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxPYmplY3Q+Pn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmdldERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uICggdHlwZSApIHtcblxuXHRcdHZhciBkZXBlbmRlbmNpZXMgPSB0aGlzLmNhY2hlLmdldCggdHlwZSApO1xuXG5cdFx0aWYgKCAhIGRlcGVuZGVuY2llcyApIHtcblxuXHRcdFx0dmFyIHBhcnNlciA9IHRoaXM7XG5cdFx0XHR2YXIgZGVmcyA9IHRoaXMuanNvblsgdHlwZSArICggdHlwZSA9PT0gJ21lc2gnID8gJ2VzJyA6ICdzJyApIF0gfHwgW107XG5cblx0XHRcdGRlcGVuZGVuY2llcyA9IFByb21pc2UuYWxsKCBkZWZzLm1hcCggZnVuY3Rpb24gKCBkZWYsIGluZGV4ICkge1xuXG5cdFx0XHRcdHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggdHlwZSwgaW5kZXggKTtcblxuXHRcdFx0fSApICk7XG5cblx0XHRcdHRoaXMuY2FjaGUuYWRkKCB0eXBlLCBkZXBlbmRlbmNpZXMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkZXBlbmRlbmNpZXM7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNidWZmZXJzLWFuZC1idWZmZXItdmlld3Ncblx0ICogQHBhcmFtIHtudW1iZXJ9IGJ1ZmZlckluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZEJ1ZmZlciA9IGZ1bmN0aW9uICggYnVmZmVySW5kZXggKSB7XG5cblx0XHR2YXIgYnVmZmVyRGVmID0gdGhpcy5qc29uLmJ1ZmZlcnNbIGJ1ZmZlckluZGV4IF07XG5cdFx0dmFyIGxvYWRlciA9IHRoaXMuZmlsZUxvYWRlcjtcblxuXHRcdGlmICggYnVmZmVyRGVmLnR5cGUgJiYgYnVmZmVyRGVmLnR5cGUgIT09ICdhcnJheWJ1ZmZlcicgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6ICcgKyBidWZmZXJEZWYudHlwZSArICcgYnVmZmVyIHR5cGUgaXMgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHR9XG5cblx0XHQvLyBJZiBwcmVzZW50LCBHTEIgY29udGFpbmVyIGlzIHJlcXVpcmVkIHRvIGJlIHRoZSBmaXJzdCBidWZmZXIuXG5cdFx0aWYgKCBidWZmZXJEZWYudXJpID09PSB1bmRlZmluZWQgJiYgYnVmZmVySW5kZXggPT09IDAgKSB7XG5cblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoIHRoaXMuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfQklOQVJZX0dMVEYgXS5ib2R5ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCByZXNvbHZlVVJMKCBidWZmZXJEZWYudXJpLCBvcHRpb25zLnBhdGggKSwgcmVzb2x2ZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmVqZWN0KCBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBGYWlsZWQgdG8gbG9hZCBidWZmZXIgXCInICsgYnVmZmVyRGVmLnVyaSArICdcIi4nICkgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYnVmZmVycy1hbmQtYnVmZmVyLXZpZXdzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBidWZmZXJWaWV3SW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQnVmZmVyVmlldyA9IGZ1bmN0aW9uICggYnVmZmVyVmlld0luZGV4ICkge1xuXG5cdFx0dmFyIGJ1ZmZlclZpZXdEZWYgPSB0aGlzLmpzb24uYnVmZmVyVmlld3NbIGJ1ZmZlclZpZXdJbmRleCBdO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlcicsIGJ1ZmZlclZpZXdEZWYuYnVmZmVyICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdHZhciBieXRlTGVuZ3RoID0gYnVmZmVyVmlld0RlZi5ieXRlTGVuZ3RoIHx8IDA7XG5cdFx0XHR2YXIgYnl0ZU9mZnNldCA9IGJ1ZmZlclZpZXdEZWYuYnl0ZU9mZnNldCB8fCAwO1xuXHRcdFx0cmV0dXJuIGJ1ZmZlci5zbGljZSggYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGggKTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2FjY2Vzc29yc1xuXHQgKiBAcGFyYW0ge251bWJlcn0gYWNjZXNzb3JJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEJ1ZmZlckF0dHJpYnV0ZXxJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQWNjZXNzb3IgPSBmdW5jdGlvbiAoIGFjY2Vzc29ySW5kZXggKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblx0XHR2YXIganNvbiA9IHRoaXMuanNvbjtcblxuXHRcdHZhciBhY2Nlc3NvckRlZiA9IHRoaXMuanNvbi5hY2Nlc3NvcnNbIGFjY2Vzc29ySW5kZXggXTtcblxuXHRcdGlmICggYWNjZXNzb3JEZWYuYnVmZmVyVmlldyA9PT0gdW5kZWZpbmVkICYmIGFjY2Vzc29yRGVmLnNwYXJzZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgZW1wdHkgYWNjZXNzb3JzLCB3aGljaCBtYXkgYmUgdXNlZCB0byBkZWNsYXJlIHJ1bnRpbWVcblx0XHRcdC8vIGluZm9ybWF0aW9uIGFib3V0IGF0dHJpYnV0ZXMgY29taW5nIGZyb20gYW5vdGhlciBzb3VyY2UgKGUuZy4gRHJhY29cblx0XHRcdC8vIGNvbXByZXNzaW9uIGV4dGVuc2lvbikuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBudWxsICk7XG5cblx0XHR9XG5cblx0XHR2YXIgcGVuZGluZ0J1ZmZlclZpZXdzID0gW107XG5cblx0XHRpZiAoIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cGVuZGluZ0J1ZmZlclZpZXdzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBhY2Nlc3NvckRlZi5idWZmZXJWaWV3ICkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCBudWxsICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwZW5kaW5nQnVmZmVyVmlld3MucHVzaCggdGhpcy5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmJ1ZmZlclZpZXcgKSApO1xuXHRcdFx0cGVuZGluZ0J1ZmZlclZpZXdzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ2J1ZmZlclZpZXcnLCBhY2Nlc3NvckRlZi5zcGFyc2UudmFsdWVzLmJ1ZmZlclZpZXcgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nQnVmZmVyVmlld3MgKS50aGVuKCBmdW5jdGlvbiAoIGJ1ZmZlclZpZXdzICkge1xuXG5cdFx0XHR2YXIgYnVmZmVyVmlldyA9IGJ1ZmZlclZpZXdzWyAwIF07XG5cblx0XHRcdHZhciBpdGVtU2l6ZSA9IFdFQkdMX1RZUEVfU0laRVNbIGFjY2Vzc29yRGVmLnR5cGUgXTtcblx0XHRcdHZhciBUeXBlZEFycmF5ID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTWyBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlIF07XG5cblx0XHRcdC8vIEZvciBWRUMzOiBpdGVtU2l6ZSBpcyAzLCBlbGVtZW50Qnl0ZXMgaXMgNCwgaXRlbUJ5dGVzIGlzIDEyLlxuXHRcdFx0dmFyIGVsZW1lbnRCeXRlcyA9IFR5cGVkQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG5cdFx0XHR2YXIgaXRlbUJ5dGVzID0gZWxlbWVudEJ5dGVzICogaXRlbVNpemU7XG5cdFx0XHR2YXIgYnl0ZU9mZnNldCA9IGFjY2Vzc29yRGVmLmJ5dGVPZmZzZXQgfHwgMDtcblx0XHRcdHZhciBieXRlU3RyaWRlID0gYWNjZXNzb3JEZWYuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkID8ganNvbi5idWZmZXJWaWV3c1sgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyBdLmJ5dGVTdHJpZGUgOiB1bmRlZmluZWQ7XG5cdFx0XHR2YXIgbm9ybWFsaXplZCA9IGFjY2Vzc29yRGVmLm5vcm1hbGl6ZWQgPT09IHRydWU7XG5cdFx0XHR2YXIgYXJyYXksIGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdFx0Ly8gVGhlIGJ1ZmZlciBpcyBub3QgaW50ZXJsZWF2ZWQgaWYgdGhlIHN0cmlkZSBpcyB0aGUgaXRlbSBzaXplIGluIGJ5dGVzLlxuXHRcdFx0aWYgKCBieXRlU3RyaWRlICYmIGJ5dGVTdHJpZGUgIT09IGl0ZW1CeXRlcyApIHtcblxuXHRcdFx0XHQvLyBFYWNoIFwic2xpY2VcIiBvZiB0aGUgYnVmZmVyLCBhcyBkZWZpbmVkIGJ5ICdjb3VudCcgZWxlbWVudHMgb2YgJ2J5dGVTdHJpZGUnIGJ5dGVzLCBnZXRzIGl0cyBvd24gSW50ZXJsZWF2ZWRCdWZmZXJcblx0XHRcdFx0Ly8gVGhpcyBtYWtlcyBzdXJlIHRoYXQgSUJBLmNvdW50IHJlZmxlY3RzIGFjY2Vzc29yLmNvdW50IHByb3Blcmx5XG5cdFx0XHRcdHZhciBpYlNsaWNlID0gTWF0aC5mbG9vciggYnl0ZU9mZnNldCAvIGJ5dGVTdHJpZGUgKTtcblx0XHRcdFx0dmFyIGliQ2FjaGVLZXkgPSAnSW50ZXJsZWF2ZWRCdWZmZXI6JyArIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgKyAnOicgKyBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlICsgJzonICsgaWJTbGljZSArICc6JyArIGFjY2Vzc29yRGVmLmNvdW50O1xuXHRcdFx0XHR2YXIgaWIgPSBwYXJzZXIuY2FjaGUuZ2V0KCBpYkNhY2hlS2V5ICk7XG5cblx0XHRcdFx0aWYgKCAhIGliICkge1xuXG5cdFx0XHRcdFx0YXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlldywgaWJTbGljZSAqIGJ5dGVTdHJpZGUsIGFjY2Vzc29yRGVmLmNvdW50ICogYnl0ZVN0cmlkZSAvIGVsZW1lbnRCeXRlcyApO1xuXG5cdFx0XHRcdFx0Ly8gSW50ZWdlciBwYXJhbWV0ZXJzIHRvIElCL0lCQSBhcmUgaW4gYXJyYXkgZWxlbWVudHMsIG5vdCBieXRlcy5cblx0XHRcdFx0XHRpYiA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIGJ5dGVTdHJpZGUgLyBlbGVtZW50Qnl0ZXMgKTtcblxuXHRcdFx0XHRcdHBhcnNlci5jYWNoZS5hZGQoIGliQ2FjaGVLZXksIGliICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSggaWIsIGl0ZW1TaXplLCAoIGJ5dGVPZmZzZXQgJSBieXRlU3RyaWRlICkgLyBlbGVtZW50Qnl0ZXMsIG5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIGJ1ZmZlclZpZXcgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRhcnJheSA9IG5ldyBUeXBlZEFycmF5KCBhY2Nlc3NvckRlZi5jb3VudCAqIGl0ZW1TaXplICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoIGJ1ZmZlclZpZXcsIGJ5dGVPZmZzZXQsIGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNzcGFyc2UtYWNjZXNzb3JzXG5cdFx0XHRpZiAoIGFjY2Vzc29yRGVmLnNwYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZhciBpdGVtU2l6ZUluZGljZXMgPSBXRUJHTF9UWVBFX1NJWkVTLlNDQUxBUjtcblx0XHRcdFx0dmFyIFR5cGVkQXJyYXlJbmRpY2VzID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTWyBhY2Nlc3NvckRlZi5zcGFyc2UuaW5kaWNlcy5jb21wb25lbnRUeXBlIF07XG5cblx0XHRcdFx0dmFyIGJ5dGVPZmZzZXRJbmRpY2VzID0gYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuYnl0ZU9mZnNldCB8fCAwO1xuXHRcdFx0XHR2YXIgYnl0ZU9mZnNldFZhbHVlcyA9IGFjY2Vzc29yRGVmLnNwYXJzZS52YWx1ZXMuYnl0ZU9mZnNldCB8fCAwO1xuXG5cdFx0XHRcdHZhciBzcGFyc2VJbmRpY2VzID0gbmV3IFR5cGVkQXJyYXlJbmRpY2VzKCBidWZmZXJWaWV3c1sgMSBdLCBieXRlT2Zmc2V0SW5kaWNlcywgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemVJbmRpY2VzICk7XG5cdFx0XHRcdHZhciBzcGFyc2VWYWx1ZXMgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlld3NbIDIgXSwgYnl0ZU9mZnNldFZhbHVlcywgYWNjZXNzb3JEZWYuc3BhcnNlLmNvdW50ICogaXRlbVNpemUgKTtcblxuXHRcdFx0XHRpZiAoIGJ1ZmZlclZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHQvLyBBdm9pZCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsIEFycmF5QnVmZmVyLCBpZiB0aGUgYnVmZmVyVmlldyB3YXNuJ3QgaW5pdGlhbGl6ZWQgd2l0aCB6ZXJvZXMuXG5cdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggYnVmZmVyQXR0cmlidXRlLmFycmF5LnNsaWNlKCksIGJ1ZmZlckF0dHJpYnV0ZS5pdGVtU2l6ZSwgYnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHNwYXJzZUluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgaW5kZXggPSBzcGFyc2VJbmRpY2VzWyBpIF07XG5cblx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUuc2V0WCggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplIF0gKTtcblx0XHRcdFx0XHRpZiAoIGl0ZW1TaXplID49IDIgKSBidWZmZXJBdHRyaWJ1dGUuc2V0WSggaW5kZXgsIHNwYXJzZVZhbHVlc1sgaSAqIGl0ZW1TaXplICsgMSBdICk7XG5cdFx0XHRcdFx0aWYgKCBpdGVtU2l6ZSA+PSAzICkgYnVmZmVyQXR0cmlidXRlLnNldFooIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDIgXSApO1xuXHRcdFx0XHRcdGlmICggaXRlbVNpemUgPj0gNCApIGJ1ZmZlckF0dHJpYnV0ZS5zZXRXKCBpbmRleCwgc3BhcnNlVmFsdWVzWyBpICogaXRlbVNpemUgKyAzIF0gKTtcblx0XHRcdFx0XHRpZiAoIGl0ZW1TaXplID49IDUgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBpdGVtU2l6ZSBpbiBzcGFyc2UgQnVmZmVyQXR0cmlidXRlLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGJ1ZmZlckF0dHJpYnV0ZTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjdGV4dHVyZXNcblx0ICogQHBhcmFtIHtudW1iZXJ9IHRleHR1cmVJbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPFRIUkVFLlRleHR1cmU+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZFRleHR1cmUgPSBmdW5jdGlvbiAoIHRleHR1cmVJbmRleCApIHtcblxuXHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdHZhciB0ZXh0dXJlTG9hZGVyID0gdGhpcy50ZXh0dXJlTG9hZGVyO1xuXG5cdFx0dmFyIFVSTCA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTDtcblxuXHRcdHZhciB0ZXh0dXJlRGVmID0ganNvbi50ZXh0dXJlc1sgdGV4dHVyZUluZGV4IF07XG5cblx0XHR2YXIgdGV4dHVyZUV4dGVuc2lvbnMgPSB0ZXh0dXJlRGVmLmV4dGVuc2lvbnMgfHwge307XG5cblx0XHR2YXIgc291cmNlO1xuXG5cdFx0aWYgKCB0ZXh0dXJlRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTIF0gKSB7XG5cblx0XHRcdHNvdXJjZSA9IGpzb24uaW1hZ2VzWyB0ZXh0dXJlRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5NU0ZUX1RFWFRVUkVfRERTIF0uc291cmNlIF07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzb3VyY2UgPSBqc29uLmltYWdlc1sgdGV4dHVyZURlZi5zb3VyY2UgXTtcblxuXHRcdH1cblxuXHRcdHZhciBzb3VyY2VVUkkgPSBzb3VyY2UudXJpO1xuXHRcdHZhciBpc09iamVjdFVSTCA9IGZhbHNlO1xuXG5cdFx0aWYgKCBzb3VyY2UuYnVmZmVyVmlldyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBMb2FkIGJpbmFyeSBpbWFnZSBkYXRhIGZyb20gYnVmZmVyVmlldywgaWYgcHJvdmlkZWQuXG5cblx0XHRcdHNvdXJjZVVSSSA9IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIHNvdXJjZS5idWZmZXJWaWV3ICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXJWaWV3ICkge1xuXG5cdFx0XHRcdGlzT2JqZWN0VVJMID0gdHJ1ZTtcblx0XHRcdFx0dmFyIGJsb2IgPSBuZXcgQmxvYiggWyBidWZmZXJWaWV3IF0sIHsgdHlwZTogc291cmNlLm1pbWVUeXBlIH0gKTtcblx0XHRcdFx0c291cmNlVVJJID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggYmxvYiApO1xuXHRcdFx0XHRyZXR1cm4gc291cmNlVVJJO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBzb3VyY2VVUkkgKS50aGVuKCBmdW5jdGlvbiAoIHNvdXJjZVVSSSApIHtcblxuXHRcdFx0Ly8gTG9hZCBUZXh0dXJlIHJlc291cmNlLlxuXG5cdFx0XHR2YXIgbG9hZGVyID0gb3B0aW9ucy5tYW5hZ2VyLmdldEhhbmRsZXIoIHNvdXJjZVVSSSApO1xuXG5cdFx0XHRpZiAoICEgbG9hZGVyICkge1xuXG5cdFx0XHRcdGxvYWRlciA9IHRleHR1cmVFeHRlbnNpb25zWyBFWFRFTlNJT05TLk1TRlRfVEVYVFVSRV9ERFMgXVxuXHRcdFx0XHRcdD8gcGFyc2VyLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuTVNGVF9URVhUVVJFX0REUyBdLmRkc0xvYWRlclxuXHRcdFx0XHRcdDogdGV4dHVyZUxvYWRlcjtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG5cdFx0XHRcdGxvYWRlci5sb2FkKCByZXNvbHZlVVJMKCBzb3VyY2VVUkksIG9wdGlvbnMucGF0aCApLCByZXNvbHZlLCB1bmRlZmluZWQsIHJlamVjdCApO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHQvLyBDbGVhbiB1cCByZXNvdXJjZXMgYW5kIGNvbmZpZ3VyZSBUZXh0dXJlLlxuXG5cdFx0XHRpZiAoIGlzT2JqZWN0VVJMID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFVSTC5yZXZva2VPYmplY3RVUkwoIHNvdXJjZVVSSSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUuZmxpcFkgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IHRleHR1cmVEZWYubmFtZTtcblxuXHRcdFx0Ly8gSWdub3JlIHVua25vd24gbWltZSB0eXBlcywgbGlrZSBERFMgZmlsZXMuXG5cdFx0XHRpZiAoIHNvdXJjZS5taW1lVHlwZSBpbiBNSU1FX1RZUEVfRk9STUFUUyApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmZvcm1hdCA9IE1JTUVfVFlQRV9GT1JNQVRTWyBzb3VyY2UubWltZVR5cGUgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgc2FtcGxlcnMgPSBqc29uLnNhbXBsZXJzIHx8IHt9O1xuXHRcdFx0dmFyIHNhbXBsZXIgPSBzYW1wbGVyc1sgdGV4dHVyZURlZi5zYW1wbGVyIF0gfHwge307XG5cblx0XHRcdHRleHR1cmUubWFnRmlsdGVyID0gV0VCR0xfRklMVEVSU1sgc2FtcGxlci5tYWdGaWx0ZXIgXSB8fCBMaW5lYXJGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IFdFQkdMX0ZJTFRFUlNbIHNhbXBsZXIubWluRmlsdGVyIF0gfHwgTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyO1xuXHRcdFx0dGV4dHVyZS53cmFwUyA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwUyBdIHx8IFJlcGVhdFdyYXBwaW5nO1xuXHRcdFx0dGV4dHVyZS53cmFwVCA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwVCBdIHx8IFJlcGVhdFdyYXBwaW5nO1xuXG5cdFx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBBc3luY2hyb25vdXNseSBhc3NpZ25zIGEgdGV4dHVyZSB0byB0aGUgZ2l2ZW4gbWF0ZXJpYWwgcGFyYW1ldGVycy5cblx0ICogQHBhcmFtIHtPYmplY3R9IG1hdGVyaWFsUGFyYW1zXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBtYXBOYW1lXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBtYXBEZWZcblx0ICogQHJldHVybiB7UHJvbWlzZX1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnblRleHR1cmUgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCBtYXBOYW1lLCBtYXBEZWYgKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblxuXHRcdHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICd0ZXh0dXJlJywgbWFwRGVmLmluZGV4ICkudGhlbiggZnVuY3Rpb24gKCB0ZXh0dXJlICkge1xuXG5cdFx0XHRpZiAoICEgdGV4dHVyZS5pc0NvbXByZXNzZWRUZXh0dXJlICkge1xuXG5cdFx0XHRcdHN3aXRjaCAoIG1hcE5hbWUgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdhb01hcCc6XG5cdFx0XHRcdFx0Y2FzZSAnZW1pc3NpdmVNYXAnOlxuXHRcdFx0XHRcdGNhc2UgJ21ldGFsbmVzc01hcCc6XG5cdFx0XHRcdFx0Y2FzZSAnbm9ybWFsTWFwJzpcblx0XHRcdFx0XHRjYXNlICdyb3VnaG5lc3NNYXAnOlxuXHRcdFx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSBSR0JGb3JtYXQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwYXJzZXIuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfVEVYVFVSRV9UUkFOU0ZPUk0gXSApIHtcblxuXHRcdFx0XHR2YXIgdHJhbnNmb3JtID0gbWFwRGVmLmV4dGVuc2lvbnMgIT09IHVuZGVmaW5lZCA/IG1hcERlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0XHRcdGlmICggdHJhbnNmb3JtICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IHBhcnNlci5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9URVhUVVJFX1RSQU5TRk9STSBdLmV4dGVuZFRleHR1cmUoIHRleHR1cmUsIHRyYW5zZm9ybSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbFBhcmFtc1sgbWFwTmFtZSBdID0gdGV4dHVyZTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBBc3NpZ25zIGZpbmFsIG1hdGVyaWFsIHRvIGEgTWVzaCwgTGluZSwgb3IgUG9pbnRzIGluc3RhbmNlLiBUaGUgaW5zdGFuY2Vcblx0ICogYWxyZWFkeSBoYXMgYSBtYXRlcmlhbCAoZ2VuZXJhdGVkIGZyb20gdGhlIGdsVEYgbWF0ZXJpYWwgb3B0aW9ucyBhbG9uZSlcblx0ICogYnV0IHJldXNlIG9mIHRoZSBzYW1lIGdsVEYgbWF0ZXJpYWwgbWF5IHJlcXVpcmUgbXVsdGlwbGUgdGhyZWVqcyBtYXRlcmlhbHNcblx0ICogdG8gYWNjb21vZGF0ZSBkaWZmZXJlbnQgcHJpbWl0aXZlIHR5cGVzLCBkZWZpbmVzLCBldGMuIE5ldyBtYXRlcmlhbHMgd2lsbFxuXHQgKiBiZSBjcmVhdGVkIGlmIG5lY2Vzc2FyeSwgYW5kIHJldXNlZCBmcm9tIGEgY2FjaGUuXG5cdCAqIEBwYXJhbSAge09iamVjdDNEfSBtZXNoIE1lc2gsIExpbmUsIG9yIFBvaW50cyBpbnN0YW5jZS5cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnbkZpbmFsTWF0ZXJpYWwgPSBmdW5jdGlvbiAoIG1lc2ggKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBtZXNoLmdlb21ldHJ5O1xuXHRcdHZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cblx0XHR2YXIgdXNlVmVydGV4VGFuZ2VudHMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnRhbmdlbnQgIT09IHVuZGVmaW5lZDtcblx0XHR2YXIgdXNlVmVydGV4Q29sb3JzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkO1xuXHRcdHZhciB1c2VGbGF0U2hhZGluZyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQ7XG5cdFx0dmFyIHVzZVNraW5uaW5nID0gbWVzaC5pc1NraW5uZWRNZXNoID09PSB0cnVlO1xuXHRcdHZhciB1c2VNb3JwaFRhcmdldHMgPSBPYmplY3Qua2V5cyggZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkubGVuZ3RoID4gMDtcblx0XHR2YXIgdXNlTW9ycGhOb3JtYWxzID0gdXNlTW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5ub3JtYWwgIT09IHVuZGVmaW5lZDtcblxuXHRcdGlmICggbWVzaC5pc1BvaW50cyApIHtcblxuXHRcdFx0dmFyIGNhY2hlS2V5ID0gJ1BvaW50c01hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkO1xuXG5cdFx0XHR2YXIgcG9pbnRzTWF0ZXJpYWwgPSB0aGlzLmNhY2hlLmdldCggY2FjaGVLZXkgKTtcblxuXHRcdFx0aWYgKCAhIHBvaW50c01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHBvaW50c01hdGVyaWFsID0gbmV3IFBvaW50c01hdGVyaWFsKCk7XG5cdFx0XHRcdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHBvaW50c01hdGVyaWFsLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRwb2ludHNNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHRwb2ludHNNYXRlcmlhbC5tYXAgPSBtYXRlcmlhbC5tYXA7XG5cdFx0XHRcdHBvaW50c01hdGVyaWFsLnNpemVBdHRlbnVhdGlvbiA9IGZhbHNlOyAvLyBnbFRGIHNwZWMgc2F5cyBwb2ludHMgc2hvdWxkIGJlIDFweFxuXG5cdFx0XHRcdHRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgcG9pbnRzTWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbCA9IHBvaW50c01hdGVyaWFsO1xuXG5cdFx0fSBlbHNlIGlmICggbWVzaC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBjYWNoZUtleSA9ICdMaW5lQmFzaWNNYXRlcmlhbDonICsgbWF0ZXJpYWwudXVpZDtcblxuXHRcdFx0dmFyIGxpbmVNYXRlcmlhbCA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuXG5cdFx0XHRpZiAoICEgbGluZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGxpbmVNYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCgpO1xuXHRcdFx0XHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCBsaW5lTWF0ZXJpYWwsIG1hdGVyaWFsICk7XG5cdFx0XHRcdGxpbmVNYXRlcmlhbC5jb2xvci5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXG5cdFx0XHRcdHRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgbGluZU1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWwgPSBsaW5lTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHQvLyBDbG9uZSB0aGUgbWF0ZXJpYWwgaWYgaXQgd2lsbCBiZSBtb2RpZmllZFxuXHRcdGlmICggdXNlVmVydGV4VGFuZ2VudHMgfHwgdXNlVmVydGV4Q29sb3JzIHx8IHVzZUZsYXRTaGFkaW5nIHx8IHVzZVNraW5uaW5nIHx8IHVzZU1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0dmFyIGNhY2hlS2V5ID0gJ0Nsb25lZE1hdGVyaWFsOicgKyBtYXRlcmlhbC51dWlkICsgJzonO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsICkgY2FjaGVLZXkgKz0gJ3NwZWN1bGFyLWdsb3NzaW5lc3M6Jztcblx0XHRcdGlmICggdXNlU2tpbm5pbmcgKSBjYWNoZUtleSArPSAnc2tpbm5pbmc6Jztcblx0XHRcdGlmICggdXNlVmVydGV4VGFuZ2VudHMgKSBjYWNoZUtleSArPSAndmVydGV4LXRhbmdlbnRzOic7XG5cdFx0XHRpZiAoIHVzZVZlcnRleENvbG9ycyApIGNhY2hlS2V5ICs9ICd2ZXJ0ZXgtY29sb3JzOic7XG5cdFx0XHRpZiAoIHVzZUZsYXRTaGFkaW5nICkgY2FjaGVLZXkgKz0gJ2ZsYXQtc2hhZGluZzonO1xuXHRcdFx0aWYgKCB1c2VNb3JwaFRhcmdldHMgKSBjYWNoZUtleSArPSAnbW9ycGgtdGFyZ2V0czonO1xuXHRcdFx0aWYgKCB1c2VNb3JwaE5vcm1hbHMgKSBjYWNoZUtleSArPSAnbW9ycGgtbm9ybWFsczonO1xuXG5cdFx0XHR2YXIgY2FjaGVkTWF0ZXJpYWwgPSB0aGlzLmNhY2hlLmdldCggY2FjaGVLZXkgKTtcblxuXHRcdFx0aWYgKCAhIGNhY2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGNhY2hlZE1hdGVyaWFsID0gbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWxcblx0XHRcdFx0XHQ/IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdLmNsb25lTWF0ZXJpYWwoIG1hdGVyaWFsIClcblx0XHRcdFx0XHQ6IG1hdGVyaWFsLmNsb25lKCk7XG5cblx0XHRcdFx0aWYgKCB1c2VTa2lubmluZyApIGNhY2hlZE1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTtcblx0XHRcdFx0aWYgKCB1c2VWZXJ0ZXhUYW5nZW50cyApIGNhY2hlZE1hdGVyaWFsLnZlcnRleFRhbmdlbnRzID0gdHJ1ZTtcblx0XHRcdFx0aWYgKCB1c2VWZXJ0ZXhDb2xvcnMgKSBjYWNoZWRNYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBWZXJ0ZXhDb2xvcnM7XG5cdFx0XHRcdGlmICggdXNlRmxhdFNoYWRpbmcgKSBjYWNoZWRNYXRlcmlhbC5mbGF0U2hhZGluZyA9IHRydWU7XG5cdFx0XHRcdGlmICggdXNlTW9ycGhUYXJnZXRzICkgY2FjaGVkTWF0ZXJpYWwubW9ycGhUYXJnZXRzID0gdHJ1ZTtcblx0XHRcdFx0aWYgKCB1c2VNb3JwaE5vcm1hbHMgKSBjYWNoZWRNYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSB0cnVlO1xuXG5cdFx0XHRcdHRoaXMuY2FjaGUuYWRkKCBjYWNoZUtleSwgY2FjaGVkTWF0ZXJpYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRtYXRlcmlhbCA9IGNhY2hlZE1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd29ya2Fyb3VuZHMgZm9yIG1lc2ggYW5kIGdlb21ldHJ5XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICYmIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYyID09PSB1bmRlZmluZWQgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLkdMVEZMb2FkZXI6IER1cGxpY2F0aW5nIFVWcyB0byBzdXBwb3J0IGFvTWFwLicgKTtcblx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3V2MicsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYuYXJyYXksIDIgKSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCApIHtcblxuXHRcdFx0Ly8gZm9yIEdMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbChTaGFkZXJNYXRlcmlhbCkgdW5pZm9ybXMgcnVudGltZSB1cGRhdGVcblx0XHRcdG1lc2gub25CZWZvcmVSZW5kZXIgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXS5yZWZyZXNoVW5pZm9ybXM7XG5cblx0XHR9XG5cblx0XHRtZXNoLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtYXRlcmlhbHNcblx0ICogQHBhcmFtIHtudW1iZXJ9IG1hdGVyaWFsSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxNYXRlcmlhbD59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkTWF0ZXJpYWwgPSBmdW5jdGlvbiAoIG1hdGVyaWFsSW5kZXggKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblx0XHR2YXIganNvbiA9IHRoaXMuanNvbjtcblx0XHR2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcblx0XHR2YXIgbWF0ZXJpYWxEZWYgPSBqc29uLm1hdGVyaWFsc1sgbWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0dmFyIG1hdGVyaWFsVHlwZTtcblx0XHR2YXIgbWF0ZXJpYWxQYXJhbXMgPSB7fTtcblx0XHR2YXIgbWF0ZXJpYWxFeHRlbnNpb25zID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucyB8fCB7fTtcblxuXHRcdHZhciBwZW5kaW5nID0gW107XG5cblx0XHRpZiAoIG1hdGVyaWFsRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0gKSB7XG5cblx0XHRcdHZhciBzZ0V4dGVuc2lvbiA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdO1xuXHRcdFx0bWF0ZXJpYWxUeXBlID0gc2dFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCk7XG5cdFx0XHRwZW5kaW5nLnB1c2goIHNnRXh0ZW5zaW9uLmV4dGVuZFBhcmFtcyggbWF0ZXJpYWxQYXJhbXMsIG1hdGVyaWFsRGVmLCBwYXJzZXIgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxFeHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfVU5MSVQgXSApIHtcblxuXHRcdFx0dmFyIGttdUV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19VTkxJVCBdO1xuXHRcdFx0bWF0ZXJpYWxUeXBlID0ga211RXh0ZW5zaW9uLmdldE1hdGVyaWFsVHlwZSgpO1xuXHRcdFx0cGVuZGluZy5wdXNoKCBrbXVFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBTcGVjaWZpY2F0aW9uOlxuXHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI21ldGFsbGljLXJvdWdobmVzcy1tYXRlcmlhbFxuXG5cdFx0XHRtYXRlcmlhbFR5cGUgPSBNZXNoU3RhbmRhcmRNYXRlcmlhbDtcblxuXHRcdFx0dmFyIG1ldGFsbGljUm91Z2huZXNzID0gbWF0ZXJpYWxEZWYucGJyTWV0YWxsaWNSb3VnaG5lc3MgfHwge307XG5cblx0XHRcdG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IENvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5vcGFjaXR5ID0gMS4wO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvciApICkge1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvcjtcblxuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5jb2xvci5mcm9tQXJyYXkoIGFycmF5ICk7XG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLm9wYWNpdHkgPSBhcnJheVsgMyBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMubWV0YWxuZXNzID0gbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNGYWN0b3IgIT09IHVuZGVmaW5lZCA/IG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljRmFjdG9yIDogMS4wO1xuXHRcdFx0bWF0ZXJpYWxQYXJhbXMucm91Z2huZXNzID0gbWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgOiAxLjA7XG5cblx0XHRcdGlmICggbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtZXRhbG5lc3NNYXAnLCBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgKSApO1xuXHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ3JvdWdobmVzc01hcCcsIG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSApICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxEZWYuZG91YmxlU2lkZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdG1hdGVyaWFsUGFyYW1zLnNpZGUgPSBEb3VibGVTaWRlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGFscGhhTW9kZSA9IG1hdGVyaWFsRGVmLmFscGhhTW9kZSB8fCBBTFBIQV9NT0RFUy5PUEFRVUU7XG5cblx0XHRpZiAoIGFscGhhTW9kZSA9PT0gQUxQSEFfTU9ERVMuQkxFTkQgKSB7XG5cblx0XHRcdG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gZmFsc2U7XG5cblx0XHRcdGlmICggYWxwaGFNb2RlID09PSBBTFBIQV9NT0RFUy5NQVNLICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsUGFyYW1zLmFscGhhVGVzdCA9IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbERlZi5hbHBoYUN1dG9mZiA6IDAuNTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdub3JtYWxNYXAnLCBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlICkgKTtcblxuXHRcdFx0bWF0ZXJpYWxQYXJhbXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5ub3JtYWxTY2FsZS5zZXQoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbERlZi5vY2NsdXNpb25UZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdhb01hcCcsIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUgKSApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUuc3RyZW5ndGggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbFBhcmFtcy5hb01hcEludGVuc2l0eSA9IG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUuc3RyZW5ndGg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgIT09IHVuZGVmaW5lZCAmJiBtYXRlcmlhbFR5cGUgIT09IE1lc2hCYXNpY01hdGVyaWFsICkge1xuXG5cdFx0XHRtYXRlcmlhbFBhcmFtcy5lbWlzc2l2ZSA9IG5ldyBDb2xvcigpLmZyb21BcnJheSggbWF0ZXJpYWxEZWYuZW1pc3NpdmVGYWN0b3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWxEZWYuZW1pc3NpdmVUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgbWF0ZXJpYWxUeXBlICE9PSBNZXNoQmFzaWNNYXRlcmlhbCApIHtcblxuXHRcdFx0cGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdlbWlzc2l2ZU1hcCcsIG1hdGVyaWFsRGVmLmVtaXNzaXZlVGV4dHVyZSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHZhciBtYXRlcmlhbDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbFR5cGUgPT09IFNoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0uY3JlYXRlTWF0ZXJpYWwoIG1hdGVyaWFsUGFyYW1zICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwgPSBuZXcgbWF0ZXJpYWxUeXBlKCBtYXRlcmlhbFBhcmFtcyApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbWF0ZXJpYWxEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IG1hdGVyaWFsRGVmLm5hbWU7XG5cblx0XHRcdC8vIGJhc2VDb2xvclRleHR1cmUsIGVtaXNzaXZlVGV4dHVyZSwgYW5kIHNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUgdXNlIHNSR0IgZW5jb2RpbmcuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIG1hdGVyaWFsLm1hcC5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcblx0XHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSBtYXRlcmlhbC5lbWlzc2l2ZU1hcC5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcblx0XHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSBtYXRlcmlhbC5zcGVjdWxhck1hcC5lbmNvZGluZyA9IHNSR0JFbmNvZGluZztcblxuXHRcdFx0YXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggbWF0ZXJpYWwsIG1hdGVyaWFsRGVmICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucyApIGFkZFVua25vd25FeHRlbnNpb25zVG9Vc2VyRGF0YSggZXh0ZW5zaW9ucywgbWF0ZXJpYWwsIG1hdGVyaWFsRGVmICk7XG5cblx0XHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0J1ZmZlckdlb21ldHJ5fSBnZW9tZXRyeVxuXHQgKiBAcGFyYW0ge0dMVEYuUHJpbWl0aXZlfSBwcmltaXRpdmVEZWZcblx0ICogQHBhcmFtIHtHTFRGUGFyc2VyfSBwYXJzZXJcblx0ICogQHJldHVybiB7UHJvbWlzZTxCdWZmZXJHZW9tZXRyeT59XG5cdCAqL1xuXHRmdW5jdGlvbiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKCBnZW9tZXRyeSwgcHJpbWl0aXZlRGVmLCBwYXJzZXIgKSB7XG5cblx0XHR2YXIgYXR0cmlidXRlcyA9IHByaW1pdGl2ZURlZi5hdHRyaWJ1dGVzO1xuXG5cdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdGZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZUFjY2Vzc29yKCBhY2Nlc3NvckluZGV4LCBhdHRyaWJ1dGVOYW1lICkge1xuXG5cdFx0XHRyZXR1cm4gcGFyc2VyLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIGFjY2Vzc29ySW5kZXggKVxuXHRcdFx0XHQudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvciApIHtcblxuXHRcdFx0XHRcdGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggYXR0cmlidXRlTmFtZSwgYWNjZXNzb3IgKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgZ2x0ZkF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIHRocmVlQXR0cmlidXRlTmFtZSA9IEFUVFJJQlVURVNbIGdsdGZBdHRyaWJ1dGVOYW1lIF0gfHwgZ2x0ZkF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0Ly8gU2tpcCBhdHRyaWJ1dGVzIGFscmVhZHkgcHJvdmlkZWQgYnkgZS5nLiBEcmFjbyBleHRlbnNpb24uXG5cdFx0XHRpZiAoIHRocmVlQXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkgY29udGludWU7XG5cblx0XHRcdHBlbmRpbmcucHVzaCggYXNzaWduQXR0cmlidXRlQWNjZXNzb3IoIGF0dHJpYnV0ZXNbIGdsdGZBdHRyaWJ1dGVOYW1lIF0sIHRocmVlQXR0cmlidXRlTmFtZSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHByaW1pdGl2ZURlZi5pbmRpY2VzICE9PSB1bmRlZmluZWQgJiYgISBnZW9tZXRyeS5pbmRleCApIHtcblxuXHRcdFx0dmFyIGFjY2Vzc29yID0gcGFyc2VyLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHByaW1pdGl2ZURlZi5pbmRpY2VzICkudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvciApIHtcblxuXHRcdFx0XHRnZW9tZXRyeS5zZXRJbmRleCggYWNjZXNzb3IgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRwZW5kaW5nLnB1c2goIGFjY2Vzc29yICk7XG5cblx0XHR9XG5cblx0XHRhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBnZW9tZXRyeSwgcHJpbWl0aXZlRGVmICk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiBwcmltaXRpdmVEZWYudGFyZ2V0cyAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdD8gYWRkTW9ycGhUYXJnZXRzKCBnZW9tZXRyeSwgcHJpbWl0aXZlRGVmLnRhcmdldHMsIHBhcnNlciApXG5cdFx0XHRcdDogZ2VvbWV0cnk7XG5cblx0XHR9ICk7XG5cblx0fVxuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2dlb21ldHJ5XG5cdCAqXG5cdCAqIENyZWF0ZXMgQnVmZmVyR2VvbWV0cmllcyBmcm9tIHByaW1pdGl2ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSB7QXJyYXk8R0xURi5QcmltaXRpdmU+fSBwcmltaXRpdmVzXG5cdCAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8QnVmZmVyR2VvbWV0cnk+Pn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRHZW9tZXRyaWVzID0gZnVuY3Rpb24gKCBwcmltaXRpdmVzICkge1xuXG5cdFx0dmFyIHBhcnNlciA9IHRoaXM7XG5cdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cdFx0dmFyIGNhY2hlID0gdGhpcy5wcmltaXRpdmVDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGNyZWF0ZURyYWNvUHJpbWl0aXZlKCBwcmltaXRpdmUgKSB7XG5cblx0XHRcdHJldHVybiBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9EUkFDT19NRVNIX0NPTVBSRVNTSU9OIF1cblx0XHRcdFx0LmRlY29kZVByaW1pdGl2ZSggcHJpbWl0aXZlLCBwYXJzZXIgKVxuXHRcdFx0XHQudGhlbiggZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdHJldHVybiBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKCBnZW9tZXRyeSwgcHJpbWl0aXZlLCBwYXJzZXIgKTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwcmltaXRpdmUgPSBwcmltaXRpdmVzWyBpIF07XG5cdFx0XHR2YXIgY2FjaGVLZXkgPSBjcmVhdGVQcmltaXRpdmVLZXkoIHByaW1pdGl2ZSApO1xuXG5cdFx0XHQvLyBTZWUgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIHRoaXMgZ2VvbWV0cnlcblx0XHRcdHZhciBjYWNoZWQgPSBjYWNoZVsgY2FjaGVLZXkgXTtcblxuXHRcdFx0aWYgKCBjYWNoZWQgKSB7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBjYWNoZWQgZ2VvbWV0cnkgaWYgaXQgZXhpc3RzXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggY2FjaGVkLnByb21pc2UgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnlQcm9taXNlO1xuXG5cdFx0XHRcdGlmICggcHJpbWl0aXZlLmV4dGVuc2lvbnMgJiYgcHJpbWl0aXZlLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0RSQUNPX01FU0hfQ09NUFJFU1NJT04gXSApIHtcblxuXHRcdFx0XHRcdC8vIFVzZSBEUkFDTyBnZW9tZXRyeSBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRnZW9tZXRyeVByb21pc2UgPSBjcmVhdGVEcmFjb1ByaW1pdGl2ZSggcHJpbWl0aXZlICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZ2VvbWV0cnlcblx0XHRcdFx0XHRnZW9tZXRyeVByb21pc2UgPSBhZGRQcmltaXRpdmVBdHRyaWJ1dGVzKCBuZXcgQnVmZmVyR2VvbWV0cnkoKSwgcHJpbWl0aXZlLCBwYXJzZXIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FjaGUgdGhpcyBnZW9tZXRyeVxuXHRcdFx0XHRjYWNoZVsgY2FjaGVLZXkgXSA9IHsgcHJpbWl0aXZlOiBwcmltaXRpdmUsIHByb21pc2U6IGdlb21ldHJ5UHJvbWlzZSB9O1xuXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggZ2VvbWV0cnlQcm9taXNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbWVzaGVzXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBtZXNoSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxHcm91cHxNZXNofFNraW5uZWRNZXNoPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKCBtZXNoSW5kZXggKSB7XG5cblx0XHR2YXIgcGFyc2VyID0gdGhpcztcblx0XHR2YXIganNvbiA9IHRoaXMuanNvbjtcblxuXHRcdHZhciBtZXNoRGVmID0ganNvbi5tZXNoZXNbIG1lc2hJbmRleCBdO1xuXHRcdHZhciBwcmltaXRpdmVzID0gbWVzaERlZi5wcmltaXRpdmVzO1xuXG5cdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwcmltaXRpdmVzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbWF0ZXJpYWwgPSBwcmltaXRpdmVzWyBpIF0ubWF0ZXJpYWwgPT09IHVuZGVmaW5lZFxuXHRcdFx0XHQ/IGNyZWF0ZURlZmF1bHRNYXRlcmlhbCgpXG5cdFx0XHRcdDogdGhpcy5nZXREZXBlbmRlbmN5KCAnbWF0ZXJpYWwnLCBwcmltaXRpdmVzWyBpIF0ubWF0ZXJpYWwgKTtcblxuXHRcdFx0cGVuZGluZy5wdXNoKCBtYXRlcmlhbCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICkudGhlbiggZnVuY3Rpb24gKCBvcmlnaW5hbE1hdGVyaWFscyApIHtcblxuXHRcdFx0cmV0dXJuIHBhcnNlci5sb2FkR2VvbWV0cmllcyggcHJpbWl0aXZlcyApLnRoZW4oIGZ1bmN0aW9uICggZ2VvbWV0cmllcyApIHtcblxuXHRcdFx0XHR2YXIgbWVzaGVzID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGdlb21ldHJpZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBnZW9tZXRyaWVzWyBpIF07XG5cdFx0XHRcdFx0dmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIDEuIGNyZWF0ZSBNZXNoXG5cblx0XHRcdFx0XHR2YXIgbWVzaDtcblxuXHRcdFx0XHRcdHZhciBtYXRlcmlhbCA9IG9yaWdpbmFsTWF0ZXJpYWxzWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVTIHx8XG5cdFx0XHRcdFx0XHRwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX1NUUklQIHx8XG5cdFx0XHRcdFx0XHRwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiB8fFxuXHRcdFx0XHRcdFx0cHJpbWl0aXZlLm1vZGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gLmlzU2tpbm5lZE1lc2ggaXNuJ3QgaW4gZ2xURiBzcGVjLiBTZWUgLm1hcmtEZWZzKClcblx0XHRcdFx0XHRcdG1lc2ggPSBtZXNoRGVmLmlzU2tpbm5lZE1lc2ggPT09IHRydWVcblx0XHRcdFx0XHRcdFx0PyBuZXcgU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApXG5cdFx0XHRcdFx0XHRcdDogbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1lc2guaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZSAmJiAhIG1lc2guZ2VvbWV0cnkuYXR0cmlidXRlcy5za2luV2VpZ2h0Lm5vcm1hbGl6ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gd2Ugbm9ybWFsaXplIGZsb2F0aW5nIHBvaW50IHNraW4gd2VpZ2h0IGFycmF5IHRvIGZpeCBtYWxmb3JtZWQgYXNzZXRzIChzZWUgIzE1MzE5KVxuXHRcdFx0XHRcdFx0XHQvLyBpdCdzIGltcG9ydGFudCB0byBza2lwIHRoaXMgZm9yIG5vbi1mbG9hdDMyIGRhdGEgc2luY2Ugbm9ybWFsaXplU2tpbldlaWdodHMgYXNzdW1lcyBub24tbm9ybWFsaXplZCBpbnB1dHNcblx0XHRcdFx0XHRcdFx0bWVzaC5ub3JtYWxpemVTa2luV2VpZ2h0cygpO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9TVFJJUCApIHtcblxuXHRcdFx0XHRcdFx0XHRtZXNoLmRyYXdNb2RlID0gVHJpYW5nbGVTdHJpcERyYXdNb2RlO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiApIHtcblxuXHRcdFx0XHRcdFx0XHRtZXNoLmRyYXdNb2RlID0gVHJpYW5nbGVGYW5EcmF3TW9kZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FUyApIHtcblxuXHRcdFx0XHRcdFx0bWVzaCA9IG5ldyBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX1NUUklQICkge1xuXG5cdFx0XHRcdFx0XHRtZXNoID0gbmV3IExpbmUoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FX0xPT1AgKSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgTGluZUxvb3AoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5QT0lOVFMgKSB7XG5cblx0XHRcdFx0XHRcdG1lc2ggPSBuZXcgUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6IFByaW1pdGl2ZSBtb2RlIHVuc3VwcG9ydGVkOiAnICsgcHJpbWl0aXZlLm1vZGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICggT2JqZWN0LmtleXMoIG1lc2guZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzICkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRcdFx0dXBkYXRlTW9ycGhUYXJnZXRzKCBtZXNoLCBtZXNoRGVmICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZXNoLm5hbWUgPSBtZXNoRGVmLm5hbWUgfHwgKCAnbWVzaF8nICsgbWVzaEluZGV4ICk7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJpZXMubGVuZ3RoID4gMSApIG1lc2gubmFtZSArPSAnXycgKyBpO1xuXG5cdFx0XHRcdFx0YXNzaWduRXh0cmFzVG9Vc2VyRGF0YSggbWVzaCwgbWVzaERlZiApO1xuXG5cdFx0XHRcdFx0cGFyc2VyLmFzc2lnbkZpbmFsTWF0ZXJpYWwoIG1lc2ggKTtcblxuXHRcdFx0XHRcdG1lc2hlcy5wdXNoKCBtZXNoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbWVzaGVzLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdFx0XHRcdHJldHVybiBtZXNoZXNbIDAgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGdyb3VwID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1lc2hlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGdyb3VwLmFkZCggbWVzaGVzWyBpIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGdyb3VwO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9ICk7XG5cblx0fTtcblxuXHQvKipcblx0ICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI2NhbWVyYXNcblx0ICogQHBhcmFtIHtudW1iZXJ9IGNhbWVyYUluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQ2FtZXJhPn1cblx0ICovXG5cdEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYUluZGV4ICkge1xuXG5cdFx0dmFyIGNhbWVyYTtcblx0XHR2YXIgY2FtZXJhRGVmID0gdGhpcy5qc29uLmNhbWVyYXNbIGNhbWVyYUluZGV4IF07XG5cdFx0dmFyIHBhcmFtcyA9IGNhbWVyYURlZlsgY2FtZXJhRGVmLnR5cGUgXTtcblxuXHRcdGlmICggISBwYXJhbXMgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgY2FtZXJhIHBhcmFtZXRlcnMuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjYW1lcmFEZWYudHlwZSA9PT0gJ3BlcnNwZWN0aXZlJyApIHtcblxuXHRcdFx0Y2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBfTWF0aC5yYWRUb0RlZyggcGFyYW1zLnlmb3YgKSwgcGFyYW1zLmFzcGVjdFJhdGlvIHx8IDEsIHBhcmFtcy56bmVhciB8fCAxLCBwYXJhbXMuemZhciB8fCAyZTYgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGNhbWVyYURlZi50eXBlID09PSAnb3J0aG9ncmFwaGljJyApIHtcblxuXHRcdFx0Y2FtZXJhID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggcGFyYW1zLnhtYWcgLyAtIDIsIHBhcmFtcy54bWFnIC8gMiwgcGFyYW1zLnltYWcgLyAyLCBwYXJhbXMueW1hZyAvIC0gMiwgcGFyYW1zLnpuZWFyLCBwYXJhbXMuemZhciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjYW1lcmFEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgY2FtZXJhLm5hbWUgPSBjYW1lcmFEZWYubmFtZTtcblxuXHRcdGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIGNhbWVyYSwgY2FtZXJhRGVmICk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBjYW1lcmEgKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2tpbnNcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNraW5JbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2tpbiA9IGZ1bmN0aW9uICggc2tpbkluZGV4ICkge1xuXG5cdFx0dmFyIHNraW5EZWYgPSB0aGlzLmpzb24uc2tpbnNbIHNraW5JbmRleCBdO1xuXG5cdFx0dmFyIHNraW5FbnRyeSA9IHsgam9pbnRzOiBza2luRGVmLmpvaW50cyB9O1xuXG5cdFx0aWYgKCBza2luRGVmLmludmVyc2VCaW5kTWF0cmljZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSggc2tpbkVudHJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCBza2luRGVmLmludmVyc2VCaW5kTWF0cmljZXMgKS50aGVuKCBmdW5jdGlvbiAoIGFjY2Vzc29yICkge1xuXG5cdFx0XHRza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcyA9IGFjY2Vzc29yO1xuXG5cdFx0XHRyZXR1cm4gc2tpbkVudHJ5O1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNhbmltYXRpb25zXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBhbmltYXRpb25JbmRleFxuXHQgKiBAcmV0dXJuIHtQcm9taXNlPEFuaW1hdGlvbkNsaXA+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZEFuaW1hdGlvbiA9IGZ1bmN0aW9uICggYW5pbWF0aW9uSW5kZXggKSB7XG5cblx0XHR2YXIganNvbiA9IHRoaXMuanNvbjtcblxuXHRcdHZhciBhbmltYXRpb25EZWYgPSBqc29uLmFuaW1hdGlvbnNbIGFuaW1hdGlvbkluZGV4IF07XG5cblx0XHR2YXIgcGVuZGluZ05vZGVzID0gW107XG5cdFx0dmFyIHBlbmRpbmdJbnB1dEFjY2Vzc29ycyA9IFtdO1xuXHRcdHZhciBwZW5kaW5nT3V0cHV0QWNjZXNzb3JzID0gW107XG5cdFx0dmFyIHBlbmRpbmdTYW1wbGVycyA9IFtdO1xuXHRcdHZhciBwZW5kaW5nVGFyZ2V0cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVscy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNoYW5uZWwgPSBhbmltYXRpb25EZWYuY2hhbm5lbHNbIGkgXTtcblx0XHRcdHZhciBzYW1wbGVyID0gYW5pbWF0aW9uRGVmLnNhbXBsZXJzWyBjaGFubmVsLnNhbXBsZXIgXTtcblx0XHRcdHZhciB0YXJnZXQgPSBjaGFubmVsLnRhcmdldDtcblx0XHRcdHZhciBuYW1lID0gdGFyZ2V0Lm5vZGUgIT09IHVuZGVmaW5lZCA/IHRhcmdldC5ub2RlIDogdGFyZ2V0LmlkOyAvLyBOT1RFOiB0YXJnZXQuaWQgaXMgZGVwcmVjYXRlZC5cblx0XHRcdHZhciBpbnB1dCA9IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb25EZWYucGFyYW1ldGVyc1sgc2FtcGxlci5pbnB1dCBdIDogc2FtcGxlci5pbnB1dDtcblx0XHRcdHZhciBvdXRwdXQgPSBhbmltYXRpb25EZWYucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnNbIHNhbXBsZXIub3V0cHV0IF0gOiBzYW1wbGVyLm91dHB1dDtcblxuXHRcdFx0cGVuZGluZ05vZGVzLnB1c2goIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ25vZGUnLCBuYW1lICkgKTtcblx0XHRcdHBlbmRpbmdJbnB1dEFjY2Vzc29ycy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIGlucHV0ICkgKTtcblx0XHRcdHBlbmRpbmdPdXRwdXRBY2Nlc3NvcnMucHVzaCggdGhpcy5nZXREZXBlbmRlbmN5KCAnYWNjZXNzb3InLCBvdXRwdXQgKSApO1xuXHRcdFx0cGVuZGluZ1NhbXBsZXJzLnB1c2goIHNhbXBsZXIgKTtcblx0XHRcdHBlbmRpbmdUYXJnZXRzLnB1c2goIHRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKCBbXG5cblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nTm9kZXMgKSxcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nSW5wdXRBY2Nlc3NvcnMgKSxcblx0XHRcdFByb21pc2UuYWxsKCBwZW5kaW5nT3V0cHV0QWNjZXNzb3JzICksXG5cdFx0XHRQcm9taXNlLmFsbCggcGVuZGluZ1NhbXBsZXJzICksXG5cdFx0XHRQcm9taXNlLmFsbCggcGVuZGluZ1RhcmdldHMgKVxuXG5cdFx0XSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuXG5cdFx0XHR2YXIgbm9kZXMgPSBkZXBlbmRlbmNpZXNbIDAgXTtcblx0XHRcdHZhciBpbnB1dEFjY2Vzc29ycyA9IGRlcGVuZGVuY2llc1sgMSBdO1xuXHRcdFx0dmFyIG91dHB1dEFjY2Vzc29ycyA9IGRlcGVuZGVuY2llc1sgMiBdO1xuXHRcdFx0dmFyIHNhbXBsZXJzID0gZGVwZW5kZW5jaWVzWyAzIF07XG5cdFx0XHR2YXIgdGFyZ2V0cyA9IGRlcGVuZGVuY2llc1sgNCBdO1xuXG5cdFx0XHR2YXIgdHJhY2tzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBub2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgbm9kZSA9IG5vZGVzWyBpIF07XG5cdFx0XHRcdHZhciBpbnB1dEFjY2Vzc29yID0gaW5wdXRBY2Nlc3NvcnNbIGkgXTtcblx0XHRcdFx0dmFyIG91dHB1dEFjY2Vzc29yID0gb3V0cHV0QWNjZXNzb3JzWyBpIF07XG5cdFx0XHRcdHZhciBzYW1wbGVyID0gc2FtcGxlcnNbIGkgXTtcblx0XHRcdFx0dmFyIHRhcmdldCA9IHRhcmdldHNbIGkgXTtcblxuXHRcdFx0XHRpZiAoIG5vZGUgPT09IHVuZGVmaW5lZCApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdG5vZGUudXBkYXRlTWF0cml4KCk7XG5cdFx0XHRcdG5vZGUubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0dmFyIFR5cGVkS2V5ZnJhbWVUcmFjaztcblxuXHRcdFx0XHRzd2l0Y2ggKCBQQVRIX1BST1BFUlRJRVNbIHRhcmdldC5wYXRoIF0gKSB7XG5cblx0XHRcdFx0XHRjYXNlIFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzOlxuXG5cdFx0XHRcdFx0XHRUeXBlZEtleWZyYW1lVHJhY2sgPSBOdW1iZXJLZXlmcmFtZVRyYWNrO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlIFBBVEhfUFJPUEVSVElFUy5yb3RhdGlvbjpcblxuXHRcdFx0XHRcdFx0VHlwZWRLZXlmcmFtZVRyYWNrID0gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgUEFUSF9QUk9QRVJUSUVTLnBvc2l0aW9uOlxuXHRcdFx0XHRcdGNhc2UgUEFUSF9QUk9QRVJUSUVTLnNjYWxlOlxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHRcdFR5cGVkS2V5ZnJhbWVUcmFjayA9IFZlY3RvcktleWZyYW1lVHJhY2s7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRhcmdldE5hbWUgPSBub2RlLm5hbWUgPyBub2RlLm5hbWUgOiBub2RlLnV1aWQ7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYXRpb24gPSBzYW1wbGVyLmludGVycG9sYXRpb24gIT09IHVuZGVmaW5lZCA/IElOVEVSUE9MQVRJT05bIHNhbXBsZXIuaW50ZXJwb2xhdGlvbiBdIDogSW50ZXJwb2xhdGVMaW5lYXI7XG5cblx0XHRcdFx0dmFyIHRhcmdldE5hbWVzID0gW107XG5cblx0XHRcdFx0aWYgKCBQQVRIX1BST1BFUlRJRVNbIHRhcmdldC5wYXRoIF0gPT09IFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzICkge1xuXG5cdFx0XHRcdFx0Ly8gTm9kZSBtYXkgYmUgYSBHcm91cCAoZ2xURiBtZXNoIHdpdGggc2V2ZXJhbCBwcmltaXRpdmVzKSBvciBhIE1lc2guXG5cdFx0XHRcdFx0bm9kZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggb2JqZWN0LmlzTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzICkge1xuXG5cdFx0XHRcdFx0XHRcdHRhcmdldE5hbWVzLnB1c2goIG9iamVjdC5uYW1lID8gb2JqZWN0Lm5hbWUgOiBvYmplY3QudXVpZCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRhcmdldE5hbWVzLnB1c2goIHRhcmdldE5hbWUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIG91dHB1dEFycmF5ID0gb3V0cHV0QWNjZXNzb3IuYXJyYXk7XG5cblx0XHRcdFx0aWYgKCBvdXRwdXRBY2Nlc3Nvci5ub3JtYWxpemVkICkge1xuXG5cdFx0XHRcdFx0dmFyIHNjYWxlO1xuXG5cdFx0XHRcdFx0aWYgKCBvdXRwdXRBcnJheS5jb25zdHJ1Y3RvciA9PT0gSW50OEFycmF5ICkge1xuXG5cdFx0XHRcdFx0XHRzY2FsZSA9IDEgLyAxMjc7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBvdXRwdXRBcnJheS5jb25zdHJ1Y3RvciA9PT0gVWludDhBcnJheSApIHtcblxuXHRcdFx0XHRcdFx0c2NhbGUgPSAxIC8gMjU1O1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggb3V0cHV0QXJyYXkuY29uc3RydWN0b3IgPT0gSW50MTZBcnJheSApIHtcblxuXHRcdFx0XHRcdFx0c2NhbGUgPSAxIC8gMzI3Njc7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBvdXRwdXRBcnJheS5jb25zdHJ1Y3RvciA9PT0gVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdFx0XHRcdHNjYWxlID0gMSAvIDY1NTM1O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgb3V0cHV0IGFjY2Vzc29yIGNvbXBvbmVudCB0eXBlLicgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBzY2FsZWQgPSBuZXcgRmxvYXQzMkFycmF5KCBvdXRwdXRBcnJheS5sZW5ndGggKTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBvdXRwdXRBcnJheS5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0c2NhbGVkWyBqIF0gPSBvdXRwdXRBcnJheVsgaiBdICogc2NhbGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRvdXRwdXRBcnJheSA9IHNjYWxlZDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IHRhcmdldE5hbWVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHRcdHRhcmdldE5hbWVzWyBqIF0gKyAnLicgKyBQQVRIX1BST1BFUlRJRVNbIHRhcmdldC5wYXRoIF0sXG5cdFx0XHRcdFx0XHRpbnB1dEFjY2Vzc29yLmFycmF5LFxuXHRcdFx0XHRcdFx0b3V0cHV0QXJyYXksXG5cdFx0XHRcdFx0XHRpbnRlcnBvbGF0aW9uXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdC8vIE92ZXJyaWRlIGludGVycG9sYXRpb24gd2l0aCBjdXN0b20gZmFjdG9yeSBtZXRob2QuXG5cdFx0XHRcdFx0aWYgKCBzYW1wbGVyLmludGVycG9sYXRpb24gPT09ICdDVUJJQ1NQTElORScgKSB7XG5cblx0XHRcdFx0XHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gZnVuY3Rpb24gSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kR0xURkN1YmljU3BsaW5lKCByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBDVUJJQ1NQTElORSBrZXlmcmFtZSBpbiBnbFRGIGhhcyB0aHJlZSBvdXRwdXQgdmFsdWVzIGZvciBlYWNoIGlucHV0IHZhbHVlLFxuXHRcdFx0XHRcdFx0XHQvLyByZXByZXNlbnRpbmcgaW5UYW5nZW50LCBzcGxpbmVWZXJ0ZXgsIGFuZCBvdXRUYW5nZW50LiBBcyBhIHJlc3VsdCwgdHJhY2suZ2V0VmFsdWVTaXplKClcblx0XHRcdFx0XHRcdFx0Ly8gbXVzdCBiZSBkaXZpZGVkIGJ5IHRocmVlIHRvIGdldCB0aGUgaW50ZXJwb2xhbnQncyBzYW1wbGVTaXplIGFyZ3VtZW50LlxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBuZXcgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpIC8gMywgcmVzdWx0ICk7XG5cblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdC8vIE1hcmsgYXMgQ1VCSUNTUExJTkUuIGB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKClgIGRvZXNuJ3Qgc3VwcG9ydCBjdXN0b20gaW50ZXJwb2xhbnRzLlxuXHRcdFx0XHRcdFx0dHJhY2suY3JlYXRlSW50ZXJwb2xhbnQuaXNJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RHTFRGQ3ViaWNTcGxpbmUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dHJhY2tzLnB1c2goIHRyYWNrICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBuYW1lID0gYW5pbWF0aW9uRGVmLm5hbWUgIT09IHVuZGVmaW5lZCA/IGFuaW1hdGlvbkRlZi5uYW1lIDogJ2FuaW1hdGlvbl8nICsgYW5pbWF0aW9uSW5kZXg7XG5cblx0XHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggbmFtZSwgdW5kZWZpbmVkLCB0cmFja3MgKTtcblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbm9kZXMtYW5kLWhpZXJhcmNoeVxuXHQgKiBAcGFyYW0ge251bWJlcn0gbm9kZUluZGV4XG5cdCAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0M0Q+fVxuXHQgKi9cblx0R0xURlBhcnNlci5wcm90b3R5cGUubG9hZE5vZGUgPSBmdW5jdGlvbiAoIG5vZGVJbmRleCApIHtcblxuXHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXHRcdHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuXHRcdHZhciBwYXJzZXIgPSB0aGlzO1xuXG5cdFx0dmFyIG1lc2hSZWZlcmVuY2VzID0ganNvbi5tZXNoUmVmZXJlbmNlcztcblx0XHR2YXIgbWVzaFVzZXMgPSBqc29uLm1lc2hVc2VzO1xuXG5cdFx0dmFyIG5vZGVEZWYgPSBqc29uLm5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdHJldHVybiAoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdFx0aWYgKCBub2RlRGVmLm1lc2ggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnbWVzaCcsIG5vZGVEZWYubWVzaCApLnRoZW4oIGZ1bmN0aW9uICggbWVzaCApIHtcblxuXHRcdFx0XHRcdHZhciBub2RlO1xuXG5cdFx0XHRcdFx0aWYgKCBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPiAxICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgaW5zdGFuY2VOdW0gPSBtZXNoVXNlc1sgbm9kZURlZi5tZXNoIF0gKys7XG5cblx0XHRcdFx0XHRcdG5vZGUgPSBtZXNoLmNsb25lKCk7XG5cdFx0XHRcdFx0XHRub2RlLm5hbWUgKz0gJ19pbnN0YW5jZV8nICsgaW5zdGFuY2VOdW07XG5cblx0XHRcdFx0XHRcdC8vIG9uQmVmb3JlUmVuZGVyIGNvcHkgZm9yIFNwZWN1bGFyLUdsb3NzaW5lc3Ncblx0XHRcdFx0XHRcdG5vZGUub25CZWZvcmVSZW5kZXIgPSBtZXNoLm9uQmVmb3JlUmVuZGVyO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRub2RlLmNoaWxkcmVuWyBpIF0ubmFtZSArPSAnX2luc3RhbmNlXycgKyBpbnN0YW5jZU51bTtcblx0XHRcdFx0XHRcdFx0bm9kZS5jaGlsZHJlblsgaSBdLm9uQmVmb3JlUmVuZGVyID0gbWVzaC5jaGlsZHJlblsgaSBdLm9uQmVmb3JlUmVuZGVyO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRub2RlID0gbWVzaDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlmIHdlaWdodHMgYXJlIHByb3ZpZGVkIG9uIHRoZSBub2RlLCBvdmVycmlkZSB3ZWlnaHRzIG9uIHRoZSBtZXNoLlxuXHRcdFx0XHRcdGlmICggbm9kZURlZi53ZWlnaHRzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdG5vZGUudHJhdmVyc2UoIGZ1bmN0aW9uICggbyApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoICEgby5pc01lc2ggKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVEZWYud2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRcdG8ubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gPSBub2RlRGVmLndlaWdodHNbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBub2RlO1xuXG5cdFx0XHRcdH0gKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbm9kZURlZi5jYW1lcmEgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwZW5kaW5nLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnY2FtZXJhJywgbm9kZURlZi5jYW1lcmEgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbm9kZURlZi5leHRlbnNpb25zXG5cdFx0XHRcdCYmIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMIF1cblx0XHRcdFx0JiYgbm9kZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFNfUFVOQ1RVQUwgXS5saWdodCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHBlbmRpbmcucHVzaCggcGFyc2VyLmdldERlcGVuZGVuY3koICdsaWdodCcsIG5vZGVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTX1BVTkNUVUFMIF0ubGlnaHQgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApO1xuXG5cdFx0fSgpICkudGhlbiggZnVuY3Rpb24gKCBvYmplY3RzICkge1xuXG5cdFx0XHR2YXIgbm9kZTtcblxuXHRcdFx0Ly8gLmlzQm9uZSBpc24ndCBpbiBnbFRGIHNwZWMuIFNlZSAubWFya0RlZnNcblx0XHRcdGlmICggbm9kZURlZi5pc0JvbmUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0bm9kZSA9IG5ldyBCb25lKCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdHMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0XHRub2RlID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdHMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHRcdG5vZGUgPSBvYmplY3RzWyAwIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0bm9kZSA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggbm9kZSAhPT0gb2JqZWN0c1sgMCBdICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBvYmplY3RzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bm9kZS5hZGQoIG9iamVjdHNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5vZGVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG5vZGUudXNlckRhdGEubmFtZSA9IG5vZGVEZWYubmFtZTtcblx0XHRcdFx0bm9kZS5uYW1lID0gUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIG5vZGVEZWYubmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFzc2lnbkV4dHJhc1RvVXNlckRhdGEoIG5vZGUsIG5vZGVEZWYgKTtcblxuXHRcdFx0aWYgKCBub2RlRGVmLmV4dGVuc2lvbnMgKSBhZGRVbmtub3duRXh0ZW5zaW9uc1RvVXNlckRhdGEoIGV4dGVuc2lvbnMsIG5vZGUsIG5vZGVEZWYgKTtcblxuXHRcdFx0aWYgKCBub2RlRGVmLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZhciBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHRcdFx0XHRtYXRyaXguZnJvbUFycmF5KCBub2RlRGVmLm1hdHJpeCApO1xuXHRcdFx0XHRub2RlLmFwcGx5TWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVEZWYudHJhbnNsYXRpb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG5vZGUucG9zaXRpb24uZnJvbUFycmF5KCBub2RlRGVmLnRyYW5zbGF0aW9uICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbm9kZURlZi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0bm9kZS5xdWF0ZXJuaW9uLmZyb21BcnJheSggbm9kZURlZi5yb3RhdGlvbiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5vZGVEZWYuc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdG5vZGUuc2NhbGUuZnJvbUFycmF5KCBub2RlRGVmLnNjYWxlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBub2RlO1xuXG5cdFx0fSApO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNzY2VuZXNcblx0ICogQHBhcmFtIHtudW1iZXJ9IHNjZW5lSW5kZXhcblx0ICogQHJldHVybiB7UHJvbWlzZTxTY2VuZT59XG5cdCAqL1xuXHRHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2NlbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBzY2VuZSBub2RlIGhpZXJhY2h5IGJ1aWxkZXJcblxuXHRcdGZ1bmN0aW9uIGJ1aWxkTm9kZUhpZXJhY2h5KCBub2RlSWQsIHBhcmVudE9iamVjdCwganNvbiwgcGFyc2VyICkge1xuXG5cdFx0XHR2YXIgbm9kZURlZiA9IGpzb24ubm9kZXNbIG5vZGVJZCBdO1xuXG5cdFx0XHRyZXR1cm4gcGFyc2VyLmdldERlcGVuZGVuY3koICdub2RlJywgbm9kZUlkICkudGhlbiggZnVuY3Rpb24gKCBub2RlICkge1xuXG5cdFx0XHRcdGlmICggbm9kZURlZi5za2luID09PSB1bmRlZmluZWQgKSByZXR1cm4gbm9kZTtcblxuXHRcdFx0XHQvLyBidWlsZCBza2VsZXRvbiBoZXJlIGFzIHdlbGxcblxuXHRcdFx0XHR2YXIgc2tpbkVudHJ5O1xuXG5cdFx0XHRcdHJldHVybiBwYXJzZXIuZ2V0RGVwZW5kZW5jeSggJ3NraW4nLCBub2RlRGVmLnNraW4gKS50aGVuKCBmdW5jdGlvbiAoIHNraW4gKSB7XG5cblx0XHRcdFx0XHRza2luRW50cnkgPSBza2luO1xuXG5cdFx0XHRcdFx0dmFyIHBlbmRpbmdKb2ludHMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBza2luRW50cnkuam9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRwZW5kaW5nSm9pbnRzLnB1c2goIHBhcnNlci5nZXREZXBlbmRlbmN5KCAnbm9kZScsIHNraW5FbnRyeS5qb2ludHNbIGkgXSApICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmdKb2ludHMgKTtcblxuXHRcdFx0XHR9ICkudGhlbiggZnVuY3Rpb24gKCBqb2ludE5vZGVzICkge1xuXG5cdFx0XHRcdFx0bm9kZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBtZXNoICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoICEgbWVzaC5pc01lc2ggKSByZXR1cm47XG5cblx0XHRcdFx0XHRcdHZhciBib25lcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGJvbmVJbnZlcnNlcyA9IFtdO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gam9pbnROb2Rlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgam9pbnROb2RlID0gam9pbnROb2Rlc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggam9pbnROb2RlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ym9uZXMucHVzaCggam9pbnROb2RlICk7XG5cblx0XHRcdFx0XHRcdFx0XHR2YXIgbWF0ID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0bWF0LmZyb21BcnJheSggc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMuYXJyYXksIGogKiAxNiApO1xuXG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ym9uZUludmVyc2VzLnB1c2goIG1hdCApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOiBKb2ludCBcIiVzXCIgY291bGQgbm90IGJlIGZvdW5kLicsIHNraW5FbnRyeS5qb2ludHNbIGogXSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRtZXNoLmJpbmQoIG5ldyBTa2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApLCBtZXNoLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRyZXR1cm4gbm9kZTtcblxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIG5vZGUgKSB7XG5cblx0XHRcdFx0Ly8gYnVpbGQgbm9kZSBoaWVyYWNoeVxuXG5cdFx0XHRcdHBhcmVudE9iamVjdC5hZGQoIG5vZGUgKTtcblxuXHRcdFx0XHR2YXIgcGVuZGluZyA9IFtdO1xuXG5cdFx0XHRcdGlmICggbm9kZURlZi5jaGlsZHJlbiApIHtcblxuXHRcdFx0XHRcdHZhciBjaGlsZHJlbiA9IG5vZGVEZWYuY2hpbGRyZW47XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuWyBpIF07XG5cdFx0XHRcdFx0XHRwZW5kaW5nLnB1c2goIGJ1aWxkTm9kZUhpZXJhY2h5KCBjaGlsZCwgbm9kZSwganNvbiwgcGFyc2VyICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKCBwZW5kaW5nICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBsb2FkU2NlbmUoIHNjZW5lSW5kZXggKSB7XG5cblx0XHRcdHZhciBqc29uID0gdGhpcy5qc29uO1xuXHRcdFx0dmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG5cdFx0XHR2YXIgc2NlbmVEZWYgPSB0aGlzLmpzb24uc2NlbmVzWyBzY2VuZUluZGV4IF07XG5cdFx0XHR2YXIgcGFyc2VyID0gdGhpcztcblxuXHRcdFx0dmFyIHNjZW5lID0gbmV3IFNjZW5lKCk7XG5cdFx0XHRpZiAoIHNjZW5lRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIHNjZW5lLm5hbWUgPSBzY2VuZURlZi5uYW1lO1xuXG5cdFx0XHRhc3NpZ25FeHRyYXNUb1VzZXJEYXRhKCBzY2VuZSwgc2NlbmVEZWYgKTtcblxuXHRcdFx0aWYgKCBzY2VuZURlZi5leHRlbnNpb25zICkgYWRkVW5rbm93bkV4dGVuc2lvbnNUb1VzZXJEYXRhKCBleHRlbnNpb25zLCBzY2VuZSwgc2NlbmVEZWYgKTtcblxuXHRcdFx0dmFyIG5vZGVJZHMgPSBzY2VuZURlZi5ub2RlcyB8fCBbXTtcblxuXHRcdFx0dmFyIHBlbmRpbmcgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5vZGVJZHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0cGVuZGluZy5wdXNoKCBidWlsZE5vZGVIaWVyYWNoeSggbm9kZUlkc1sgaSBdLCBzY2VuZSwganNvbiwgcGFyc2VyICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjZW5lO1xuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdH0oKTtcblxuXHRyZXR1cm4gR0xURkxvYWRlcjtcblxufSApKCk7XG5cbmV4cG9ydCB7IEdMVEZMb2FkZXIgfTtcbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCB7IE9CSkxvYWRlciB9IGZyb20gJy4vbGlicy9PQkpMb2FkZXIuanMnXG5pbXBvcnQgeyBHTFRGTG9hZGVyIH0gZnJvbSAnLi9saWJzL0dMVEZMb2FkZXIuanMnXG5pbXBvcnQgeyBPYmpKc29uTG9hZGVyIH0gZnJvbSAnLi9leHRlbmRzL09iakpzb25Mb2FkZXIuanMnXG5cbmxldCBvYmpMb2FkZXIgPSBuZXcgT0JKTG9hZGVyKClcbmxldCBnbHRmTG9hZGVyID0gbmV3IEdMVEZMb2FkZXIoKVxubGV0IG9iakpzb25Mb2FkZXIgPSBuZXcgT2JqSnNvbkxvYWRlcigpXG5sZXQgdGV4dHVyZUxvYWRlciA9IG5ldyBUSFJFRS5UZXh0dXJlTG9hZGVyKClcblxuZXhwb3J0IGNvbnN0IFJlc291cmNlcyA9IHt9XG5cbmV4cG9ydCBjb25zdCBnZXRSZXNvdXJjZXMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBjb25zdCBtZXNoID0gUmVzb3VyY2VzW25hbWVdXG4gIHJldHVybiBjbG9uZU9ianMobWVzaClcbn1cblxuXG5leHBvcnQgY29uc3QgZG93bkxvYWQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IGxvYWRlciA9IG51bGxcbiAgICBsZXQgY2xvbmUgPSBudWxsXG4gICAgaWYgKHVybC5pbmRleE9mKCcub2JqJykgPiAtMSkge1xuICAgICAgbG9hZGVyID0gb2JqTG9hZGVyXG4gICAgICBjbG9uZSA9IGNsb25lT2Jqc1xuICAgIH1cbiAgICBpZiAodXJsLmluZGV4T2YoJy5nbHRmJykgPiAtMSkge1xuICAgICAgbG9hZGVyID0gZ2x0ZkxvYWRlclxuICAgICAgY2xvbmUgPSBjbG9uZUdsdGZcbiAgICB9XG4gICAgaWYgKHVybC5pbmRleE9mKCcuby5qc29uJykgPiAtMSkge1xuICAgICAgbG9hZGVyID0gb2JqSnNvbkxvYWRlclxuICAgICAgY2xvbmUgPSBjbG9uZU9ianNcbiAgICB9XG4gICAgaWYgKHVybC5pbmRleE9mKCcucG5nJykgPiAtMSB8fCB1cmwuaW5kZXhPZignLmpwZycpID4gLTEpIHtcbiAgICAgIGxvYWRlciA9IHRleHR1cmVMb2FkZXJcbiAgICAgIGNsb25lID0gY2xvbmVUZXh0dXJlXG4gICAgfVxuICAgIGlmIChSZXNvdXJjZXNbdXJsXSkgcmV0dXJuIHJlc29sdmUoY2xvbmUoUmVzb3VyY2VzW3VybF0pKVxuICAgIGxvYWRlci5sb2FkKHVybCwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgUmVzb3VyY2VzW3VybF0gPSBvYmpcbiAgICAgIHJlc29sdmUoY2xvbmUoUmVzb3VyY2VzW3VybF0pKVxuICAgIH0pXG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBjbG9uZUdsdGYgPSAoZ2x0ZikgPT4ge1xuICBjb25zdCBjbG9uZSA9IHtcbiAgICBhbmltYXRpb25zOiBnbHRmLmFuaW1hdGlvbnMsXG4gICAgc2NlbmU6IGdsdGYuc2NlbmUuY2xvbmUodHJ1ZSlcbiAgfTtcblxuICBjb25zdCBza2lubmVkTWVzaGVzID0ge307XG5cbiAgZ2x0Zi5zY2VuZS50cmF2ZXJzZShub2RlID0+IHtcbiAgICBpZiAobm9kZS5pc1NraW5uZWRNZXNoKSB7XG4gICAgICBza2lubmVkTWVzaGVzW25vZGUubmFtZV0gPSBub2RlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgY2xvbmVCb25lcyA9IHt9O1xuICBjb25zdCBjbG9uZVNraW5uZWRNZXNoZXMgPSB7fTtcblxuICBjbG9uZS5zY2VuZS50cmF2ZXJzZShub2RlID0+IHtcbiAgICBpZiAobm9kZS5pc0JvbmUpIHtcbiAgICAgIGNsb25lQm9uZXNbbm9kZS5uYW1lXSA9IG5vZGU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUuaXNTa2lubmVkTWVzaCkge1xuICAgICAgY2xvbmVTa2lubmVkTWVzaGVzW25vZGUubmFtZV0gPSBub2RlO1xuICAgIH1cbiAgfSk7XG5cbiAgZm9yIChsZXQgbmFtZSBpbiBza2lubmVkTWVzaGVzKSB7XG4gICAgY29uc3Qgc2tpbm5lZE1lc2ggPSBza2lubmVkTWVzaGVzW25hbWVdO1xuICAgIGNvbnN0IHNrZWxldG9uID0gc2tpbm5lZE1lc2guc2tlbGV0b247XG4gICAgY29uc3QgY2xvbmVTa2lubmVkTWVzaCA9IGNsb25lU2tpbm5lZE1lc2hlc1tuYW1lXTtcblxuICAgIGNvbnN0IG9yZGVyZWRDbG9uZUJvbmVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNrZWxldG9uLmJvbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBjbG9uZUJvbmUgPSBjbG9uZUJvbmVzW3NrZWxldG9uLmJvbmVzW2ldLm5hbWVdO1xuICAgICAgb3JkZXJlZENsb25lQm9uZXMucHVzaChjbG9uZUJvbmUpO1xuICAgIH1cblxuICAgIGNsb25lU2tpbm5lZE1lc2guYmluZChcbiAgICAgIG5ldyBUSFJFRS5Ta2VsZXRvbihvcmRlcmVkQ2xvbmVCb25lcywgc2tlbGV0b24uYm9uZUludmVyc2VzKSxcbiAgICAgIGNsb25lU2tpbm5lZE1lc2gubWF0cml4V29ybGQpO1xuICB9XG5cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5leHBvcnQgY29uc3QgY2xvbmVPYmpzID0gKG9iaikgPT4ge1xuICByZXR1cm4gb2JqLmNsb25lKClcbn1cblxuZXhwb3J0IGNvbnN0IGNsb25lVGV4dHVyZSA9IChvYmopID0+IHtcbiAgcmV0dXJuIG9ialxufSIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCB7IGdldFBvaW50VG9Xb3JsZCB9IGZyb20gJ0AvY29tbW9uL3V0aWxzJ1xuaW1wb3J0IENoYW9zIGZyb20gJ0AvYmFzZS9jaGFvcydcblxuY29uc3QgQ29sbGlzaW9uVHlwZSA9IHtcbiAgZmxvb3I6ICflnLDmnb8nLCAvLyDog73mlL7nva7liLDnqbrnmb3ljLrln59cbiAgY2VpbGluZzogJ+WkqeiKseadvycsIC8vIOiDveWPoOWKoOS7u+aEj+WGheWuuVxuICB0YWJsZTogJ+ahjOWtkCcsIC8vIOiDveWPoOWKoOmZpOS6huWcsOadv+WGheWuuVxuICBsZWdvOiAn5LmQ6auYJywgLy8g6IO95Y+g5Yqg6Ieq5bex5LmL57G7XG4gIHZhc2U6ICfoirHnk7YnLCAvLyDkuI3lj6/lj6DliqBcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZSBleHRlbmRzIFRIUkVFLk9iamVjdDNEe1xuICBzdGF0aWMgQ29sbGlzaW9uVHlwZSA9IENvbGxpc2lvblR5cGVcbiAgY29uc3RydWN0b3Iob3B0aW9uID0ge30pIHtcbiAgICBzdXBlcigpXG4gICAgb3B0aW9uLnBvc2l0aW9uICYmIHRoaXMucG9zaXRpb24uY29weShvcHRpb24ucG9zaXRpb24pXG4gICAgb3B0aW9uLnF1YXRlcm5pb24gJiYgdGhpcy5xdWF0ZXJuaW9uLmNvcHkob3B0aW9uLnF1YXRlcm5pb24pXG4gICAgdGhpcy5pc0N1c3RvbSA9IHRydWVcbiAgICB0aGlzLmlzQ29sbGlzaW9uID0gdHJ1ZVxuICAgIHRoaXMuekluZGV4ID0gMVxuICAgIHRoaXMuY29sbGlzaW9uVHlwZSA9IFtDb2xsaXNpb25UeXBlLmZsb29yXVxuICAgIHRoaXMuYWxwaGEgPSAwLjRcbiAgICB0aGlzLnNvdXJjZVBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKVxuICAgIHRoaXMudGFyZ2V0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkodGhpcy5wb3NpdGlvbilcbiAgfVxuICAvLyDliJvlu7pcbiAgY3JlYXRlKCkge1xuICB9XG4gIC8vIOmUgOavgVxuICBkZXN0cm95KCkge1xuICB9XG4gIC8vIOabtOaWsFxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5wb3NpdGlvbi5sZXJwKHRoaXMudGFyZ2V0UG9zaXRpb24sIHRoaXMuYWxwaGEpXG4gIH1cbiAgdG91Y2hzdGFydChlKSB7XG4gICAgdGhpcy5zb3VyY2VQb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pXG4gICAgdGhpcy50YXJnZXRQb3NpdGlvbi5jb3B5KHRoaXMucG9zaXRpb24pXG4gICAgdGhpcy5pc1Jlc2V0ID0gdHJ1ZVxuICAgIHRoaXMuYWxwaGEgPSAwLjRcbiAgICBpZiAoQ2hhb3Muc2VsZWN0SWQgPT09IHRoaXMuaWQpIHtcbiAgICAgIHRoaXMuaXNUb3VjaCA9IHRydWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLnRvdWNoQmVmb3JlKClcbiAgfVxuICB0b3VjaG1vdmUoZSkge1xuICAgIGlmICghdGhpcy5pc1RvdWNoKSB7XG4gICAgICB0aGlzLnRvdWNoZXIgJiYgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hlcilcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBDaGFvcy5wcmV2ZW50RGVmYXVsdCgpXG4gICAgdGhpcy5kaXNhYmxlU2VsZWN0ZWRPYmplY3RzQ29sbGlzaW9uKClcbiAgICBjb25zdCBpbnRlcnNlY3QgPSB0aGlzLmdldEludGVyc2VjdChlKVxuICAgIGlmIChpbnRlcnNlY3QpIHtcbiAgICAgIHRoaXMudGFyZ2V0UG9zaXRpb24ueCA9IE1hdGgucm91bmQoaW50ZXJzZWN0LnBvc2l0aW9uLnggLyBDaGFvcy5ncmlkU2l6ZSkgKiBDaGFvcy5ncmlkU2l6ZVxuICAgICAgdGhpcy50YXJnZXRQb3NpdGlvbi56ID0gTWF0aC5yb3VuZChpbnRlcnNlY3QucG9zaXRpb24ueiAvIENoYW9zLmdyaWRTaXplKSAqIENoYW9zLmdyaWRTaXplXG4gICAgICB0aGlzLmlzUmVzZXQgPSB0aGlzLmdldENvbGxpc2lvbkJldHdlZW4odGhpcy5nZXRDb2xsaXNpb25NaW5ZKGludGVyc2VjdCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGdldFBvaW50VG9Xb3JsZChlLnBhZ2VYLCBlLnBhZ2VZKVxuICAgICAgdGhpcy50YXJnZXRQb3NpdGlvbi54ID0gTWF0aC5yb3VuZChkaXJlY3Rpb24ueCAvIENoYW9zLmdyaWRTaXplKSAqIENoYW9zLmdyaWRTaXplXG4gICAgICB0aGlzLnRhcmdldFBvc2l0aW9uLnogPSBNYXRoLnJvdW5kKGRpcmVjdGlvbi56IC8gQ2hhb3MuZ3JpZFNpemUpICogQ2hhb3MuZ3JpZFNpemVcbiAgICAgIHRoaXMuaXNSZXNldCA9IHRoaXMuZ2V0Q29sbGlzaW9uQmV0d2VlbigpXG4gICAgfVxuICAgIHRoaXMudGFyZ2V0UG9zaXRpb24ueSArPSAyXG4gICAgdGhpcy5zeW5jaHJvbm91c1NlbGVjdGVkT2JqZWN0c0NvbGxpc2lvbigpXG4gICAgdGhpcy5lbmFibGVTZWxlY3RlZE9iamVjdHNDb2xsaXNpb24oKVxuICAgIHRoaXMuaXNSZXNldCA/IENoYW9zLnNldFNlbGVjdGVkT2JqZWN0RGlzYWJsZWQodHJ1ZSkgOiBDaGFvcy5zZXRTZWxlY3RlZE9iamVjdERpc2FibGVkKClcbiAgfVxuICB0b3VjaGVuZChlKSB7XG4gICAgaWYgKHRoaXMuaXNSZXNldCkge1xuICAgICAgdGhpcy50YXJnZXRQb3NpdGlvbi5jb3B5KHRoaXMuc291cmNlUG9zaXRpb24pXG4gICAgICB0aGlzLmFscGhhID0gMC4yXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFyZ2V0UG9zaXRpb24ueSAtPSAyXG4gICAgICB0aGlzLmFscGhhID0gMC4xXG4gICAgfVxuICAgIHRoaXMuc3luY2hyb25vdXNTZWxlY3RlZE9iamVjdHNDb2xsaXNpb24oKVxuICAgIENoYW9zLnNldFNlbGVjdGVkT2JqZWN0RGlzYWJsZWQoKVxuICB9XG4gIGNsaWNrKCkge1xuICAgIHRoaXMudG91Y2hlciAmJiBjbGVhclRpbWVvdXQodGhpcy50b3VjaGVyKVxuICAgIHRoaXMuaXNUb3VjaCA9IHRydWVcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbGxpc2lvblR5cGUuaW5jbHVkZXMoQ29sbGlzaW9uVHlwZS5jZWlsaW5nKSB8fCBcbiAgICAgIHRoaXMuY29sbGlzaW9uVHlwZS5pbmNsdWRlcyhDb2xsaXNpb25UeXBlLnRhYmxlKSB8fCBcbiAgICAgIHRoaXMuY29sbGlzaW9uVHlwZS5pbmNsdWRlcyhDb2xsaXNpb25UeXBlLmxlZ28pXG4gICAgKSB7XG4gICAgICBDaGFvcy5zZWxlY3RlZE9iamVjdHMgPSBbdGhpcywgLi4udGhpcy5nZXRTZWxlY3ROb2RlcygpXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpXG4gICAgICBDaGFvcy5zZWxlY3RlZE9iamVjdHMgPSBbdGhpc11cbiAgICB9XG4gICAgdGhpcy50b3VjaGVyID0gbnVsbFxuICB9XG4gIGNvbXB1dGVCb3VuZGluZ0JveCgpIHtcbiAgICBjb25zdCBzcHJpdGUgPSB0aGlzLmNoaWxkcmVuWzBdXG4gICAgdGhpcy5pbmRleFggPSBNYXRoLnJvdW5kKHRoaXMudGFyZ2V0UG9zaXRpb24ueCAvIENoYW9zLmdyaWRTaXplKVxuICAgIHRoaXMuaW5kZXhaID0gTWF0aC5yb3VuZCh0aGlzLnRhcmdldFBvc2l0aW9uLnogLyBDaGFvcy5ncmlkU2l6ZSlcbiAgICBpZiAoc3ByaXRlKSB7XG4gICAgICBjb25zdCBib3ggPSBuZXcgVEhSRUUuQm94MygpXG4gICAgICBzcHJpdGUuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KClcbiAgICAgIGJveC5jb3B5KHNwcml0ZS5nZW9tZXRyeS5ib3VuZGluZ0JveCkuYXBwbHlNYXRyaXg0KHNwcml0ZS5tYXRyaXhXb3JsZClcbiAgICAgIGNvbnN0IHNpemUgPSB7XG4gICAgICAgIHg6IChib3gubWF4LnggLSBib3gubWluLngpIC8gMixcbiAgICAgICAgeTogKGJveC5tYXgueSAtIGJveC5taW4ueSkgLyAyLFxuICAgICAgICB6OiAoYm94Lm1heC56IC0gYm94Lm1pbi56KSAvIDIsXG4gICAgICB9XG4gICAgICBjb25zdCBwcyA9IHRoaXMucG9zaXRpb25cbiAgICAgIHRoaXMuYm94ID0ge1xuICAgICAgICBtaW46IHsgeDogcHMueCAtIHNpemUueCwgeTogcHMueSAtIHNpemUueSwgejogcHMueiAtIHNpemUueiB9LFxuICAgICAgICBtYXg6IHsgeDogcHMueCArIHNpemUueCwgeTogcHMueSArIHNpemUueSwgejogcHMueiArIHNpemUueiB9LFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJveCA9IHtcbiAgICAgICAgbWluOiB0aGlzLnBvc2l0aW9uLFxuICAgICAgICBtYXg6IHRoaXMucG9zaXRpb25cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdG91Y2hCZWZvcmUoKSB7XG4gICAgdGhpcy50b3VjaGVyICYmIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoZXIpXG4gICAgdGhpcy5pc1RvdWNoID0gZmFsc2VcbiAgICB0aGlzLnRvdWNoZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuY2xpY2soKSwgMzAwKVxuICB9XG4gIGdldEludGVyc2VjdChlKSB7XG4gICAgY29uc3QgaW50ZXJzZWN0cyA9IENoYW9zLmV2ZW50LmludGVyc2VjdChlKSB8fCBbXVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW50ZXJzZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGludGVyc2VjdCA9IGludGVyc2VjdHNbaV1cbiAgICAgIGlmIChpbnRlcnNlY3Qub2JqZWN0KSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3Qub2JqZWN0LnBhcmVudCAmJiAhaW50ZXJzZWN0Lm9iamVjdC5wYXJlbnQuaXNVaSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcnNlY3Qub2JqZWN0LnBhcmVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIGRpc2FibGVTZWxlY3RlZE9iamVjdHNDb2xsaXNpb24oKSB7XG4gICAgQ2hhb3Muc2VsZWN0ZWRPYmplY3RzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLmlzQ3VzdG9tID0gZmFsc2VcbiAgICAgIGl0ZW0uaXNDb2xsaXNpb24gPSBmYWxzZVxuICAgIH0pXG4gIH1cbiAgZW5hYmxlU2VsZWN0ZWRPYmplY3RzQ29sbGlzaW9uKCkge1xuICAgIENoYW9zLnNlbGVjdGVkT2JqZWN0cy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5pc0N1c3RvbSA9IHRydWVcbiAgICAgIGl0ZW0uaXNDb2xsaXNpb24gPSB0cnVlXG4gICAgfSlcbiAgfVxuICBzeW5jaHJvbm91c1NlbGVjdGVkT2JqZWN0c0NvbGxpc2lvbigpIHtcbiAgICBsZXQgbGFzdE5vZGUgPSBudWxsXG4gICAgbGV0IHkgPSAwXG4gICAgQ2hhb3Muc2VsZWN0ZWRPYmplY3RzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAobGFzdE5vZGUpIHtcbiAgICAgICAgaXRlbS50YXJnZXRQb3NpdGlvbi54ID0gdGhpcy50YXJnZXRQb3NpdGlvbi54XG4gICAgICAgIGl0ZW0udGFyZ2V0UG9zaXRpb24ueiA9IHRoaXMudGFyZ2V0UG9zaXRpb24uelxuICAgICAgICBpdGVtLmFscGhhID0gdGhpcy5hbHBoYVxuICAgICAgICB5ICs9IChpdGVtLmJveC5tYXgueSAtIGl0ZW0uYm94Lm1pbi55KSAvIDJcbiAgICAgICAgaXRlbS50YXJnZXRQb3NpdGlvbi55ID0geVxuICAgICAgICB5ICs9IChpdGVtLmJveC5tYXgueSAtIGl0ZW0uYm94Lm1pbi55KSAvIDJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBpdGVtLnRhcmdldFBvc2l0aW9uLnkgKyAoaXRlbS5ib3gubWF4LnkgLSBpdGVtLmJveC5taW4ueSkgLyAyXG4gICAgICB9XG4gICAgICBsYXN0Tm9kZSA9IGl0ZW1cbiAgICB9KVxuICB9XG4gIGdldFNlbGVjdE5vZGVzKCkge1xuICAgIGNvbnN0IHNlbGVjdE5vZGVzID0gW11cbiAgICBDaGFvcy5zY2VuZS5jaGlsZHJlbi5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaWYgKGl0ZW0uaXNDb2xsaXNpb24pIGl0ZW0uY29tcHV0ZUJvdW5kaW5nQm94KClcbiAgICB9KVxuICAgIENoYW9zLnNjZW5lLmNoaWxkcmVuLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpZiAoaXRlbS5pc0NvbGxpc2lvbikge1xuICAgICAgICBpZiAoaXRlbS5pZCAhPT0gdGhpcy5pZCAmJiBpdGVtLmluZGV4WCA9PSB0aGlzLmluZGV4WCAmJiBpdGVtLmluZGV4WiA9PSB0aGlzLmluZGV4Wikge1xuICAgICAgICAgIHNlbGVjdE5vZGVzLnB1c2goaXRlbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHNlbGVjdE5vZGVzLmZpbHRlcihpdGVtID0+IGl0ZW0ucG9zaXRpb24ueSA+PSB0aGlzLnBvc2l0aW9uLnkpLnNvcnQoKGEsIGIpID0+IGEucG9zaXRpb24ueSAtIGIucG9zaXRpb24ueSlcbiAgfVxuICBnZXRDb2xsaXNpb25NaW5ZKGludGVyc2VjdCkge1xuICAgIGxldCBzZWxlY3ROb2RlcyA9IFtpbnRlcnNlY3QsIC4uLmludGVyc2VjdC5nZXRTZWxlY3ROb2RlcygpXVxuICAgIGxldCByZWNlbnRseUl0ZW0gPSBudWxsXG4gICAgbGV0IHJlY2VudGx5TWluTGVuID0gMTAwMDBcbiAgICBzZWxlY3ROb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgaWYgKHJlY2VudGx5TWluTGVuID4gbm9kZS5wb3NpdGlvbi55KSB7XG4gICAgICAgIHJlY2VudGx5SXRlbSA9IG5vZGVcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiByZWNlbnRseUl0ZW1cbiAgfVxuICBnZXRDb2xsaXNpb25CZXR3ZWVuKHRhcmdldCkge1xuICAgIGxldCBpc1Jlc2V0ID0gZmFsc2VcbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLnRhcmdldFBvc2l0aW9uLnkgPSB0YXJnZXQuYm94Lm1heC55ICsgKHRoaXMuYm94Lm1heC55IC0gdGhpcy5ib3gubWluLnkpIC8gMlxuICAgICAgLy8g5LiN5pSv5oyB5LiK6Z2i5pS+5Lic6KW/XG4gICAgICBsZXQgdGFyZ2V0aXNDZWlsaW5nID0gdGFyZ2V0LmNvbGxpc2lvblR5cGUuaW5jbHVkZXMoQ29sbGlzaW9uVHlwZS5jZWlsaW5nKVxuICAgICAgbGV0IHRhcmdldGlzVGFibGUgPSB0YXJnZXQuY29sbGlzaW9uVHlwZS5pbmNsdWRlcyhDb2xsaXNpb25UeXBlLnRhYmxlKVxuICAgICAgbGV0IHRhcmdldGlzTGVnbyA9IHRhcmdldC5jb2xsaXNpb25UeXBlLmluY2x1ZGVzKENvbGxpc2lvblR5cGUubGVnbylcbiAgICAgIGxldCBpc2Zsb29yID0gdGhpcy5jb2xsaXNpb25UeXBlLmluY2x1ZGVzKENvbGxpc2lvblR5cGUuZmxvb3IpXG4gICAgICBsZXQgaXNDZWlsaW5nID0gdGhpcy5jb2xsaXNpb25UeXBlLmluY2x1ZGVzKENvbGxpc2lvblR5cGUuY2VpbGluZylcbiAgICAgIGxldCBpc1RhYmxlID0gdGhpcy5jb2xsaXNpb25UeXBlLmluY2x1ZGVzKENvbGxpc2lvblR5cGUudGFibGUpXG4gICAgICBsZXQgaXNMZWdvID0gdGhpcy5jb2xsaXNpb25UeXBlLmluY2x1ZGVzKENvbGxpc2lvblR5cGUubGVnbylcbiAgICAgIGlmIChcbiAgICAgICAgIShcbiAgICAgICAgICB0YXJnZXRpc0NlaWxpbmcgfHxcbiAgICAgICAgICAodGFyZ2V0aXNUYWJsZSAmJiAhaXNmbG9vcikgfHxcbiAgICAgICAgICAodGFyZ2V0aXNMZWdvICYmIGlzTGVnbylcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGlzUmVzZXQgPSB0cnVlXG4gICAgICB9XG4gICAgIFxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRhcmdldFBvc2l0aW9uLnkgPSAwXG4gICAgICBpZiAoIXRoaXMuY29sbGlzaW9uVHlwZS5pbmNsdWRlcyhDb2xsaXNpb25UeXBlLmZsb29yKSkge1xuICAgICAgICBpc1Jlc2V0ID0gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNSZXNldFxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgeyBkb3duTG9hZCB9IGZyb20gJ0AvYmFzZS9hamF4J1xuaW1wb3J0IHsgd2lzaGluZ1dlbGxGcmFnbWVudFNoYWRlciB9IGZyb20gJy4vc2hhZGVyL3dpc2hpbmdXZWxsU2hhZGVyJ1xuXG5jb25zdCBNYXRlcmlhbCA9IHt9XG5jb25zdCBjb21tb25WZXJ0ZXhTaGFkZXIgPSBgXG4gIHZhcnlpbmcgdmVjMiB2VXY7XG4gIHZvaWQgbWFpbigpe1xuICAgIHZVdiA9IHV2O1xuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG4gIH1cbmBcblxuZXhwb3J0IGNvbnN0IGdldFVpTWF0ZXJpYWwgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBkb3duTG9hZCh1cmwpLnRoZW4odGV4dHVyZSA9PiB7XG4gICAgICBjb25zdCBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG4gICAgICAgIHVuaWZvcm1zOiB7IHVUZXh0dXJlOiB7IHR5cGU6ICd0JywgdmFsdWU6IHRleHR1cmUgfSB9LFxuICAgICAgICB2ZXJ0ZXhTaGFkZXI6IGNvbW1vblZlcnRleFNoYWRlcixcbiAgICAgICAgZnJhZ21lbnRTaGFkZXI6IGAgICAgXG4gICAgICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcbiAgICAgICAgICAgIHZhcnlpbmcgdmVjMiB2VXY7XG4gICAgICAgICAgICB2b2lkIG1haW4oKSB7XG4gICAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgLFxuICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSlcbiAgICAgIHJlc29sdmUobWF0ZXJpYWwpXG4gICAgfSlcbiAgfSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldFRyYW5zcGFyZW50TWF0ZXJpYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGtleSA9ICdUcmFuc3BhcmVudCdcbiAgaWYgKE1hdGVyaWFsW2tleV0pIHJldHVybiBNYXRlcmlhbFtrZXldXG4gIE1hdGVyaWFsW2tleV0gPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgIHVuaWZvcm1zOiB7fSxcbiAgICB2ZXJ0ZXhTaGFkZXI6IGNvbW1vblZlcnRleFNoYWRlcixcbiAgICBmcmFnbWVudFNoYWRlcjogYCAgICBcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XG4gICAgICAgIHZhcnlpbmcgdmVjMiB2VXY7XG4gICAgICAgIHZvaWQgbWFpbigpIHtcbiAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDAuMCk7XG4gICAgICAgIH1cbiAgICAgIGAsXG4gICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgZGVwdGhXcml0ZTogZmFsc2VcbiAgfSlcbiAgcmV0dXJuIE1hdGVyaWFsW2tleV1cbn1cblxuZXhwb3J0IGNvbnN0IGdldE1hdGNhcE1hdGVyaWFsID0gZnVuY3Rpb24gKGNvbG9yID0gJyNGRkZGRkYnLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qga2V5ID0gYE1hdGNhcF8ke2NvbG9yfWBcbiAgaWYgKE1hdGVyaWFsW2tleV0pIHJldHVybiBNYXRlcmlhbFtrZXldXG4gIHZhciBtYXRjYXAgPSBNYXRlcmlhbFsnbWF0Y2FwJ10gfHwgbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKS5sb2FkKCcuL3RleHR1cmUvbWF0Y2FwLnBuZycpXG4gIE1hdGVyaWFsWydtYXRjYXAnXSA9IG1hdGNhcFxuICBNYXRlcmlhbFtrZXldID0gbmV3IFRIUkVFLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuICAgIC8vIG1hdGNhcCxcbiAgICBhbHBoYVRlc3Q6IDAuNixcbiAgICBjb2xvcjogbmV3IFRIUkVFLkNvbG9yKGNvbG9yKSxcbiAgICAuLi5vcHRpb25zXG4gIH0pXG4gIE1hdGVyaWFsW2tleV0uY29sb3IuY29udmVydFNSR0JUb0xpbmVhcigpXG4gIHJldHVybiBNYXRlcmlhbFtrZXldXG59XG5cbmV4cG9ydCBjb25zdCBnZXRXaXNoaW5nV2VsbE1hdGVyaWFsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgY29uc3Qga2V5ID0gJ1dpc2hpbmdXZWxsJ1xuICBpZiAoTWF0ZXJpYWxba2V5XSkgcmV0dXJuIE1hdGVyaWFsW2tleV1cbiAgTWF0ZXJpYWxba2V5XSA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCh7XG4gICAgdW5pZm9ybXM6IHtcbiAgICAgIHVUaW1lOiB7IHZhbHVlOiAwIH0sXG4gICAgICB1Q29sb3JTdGFydDogeyB2YWx1ZTogb3B0aW9ucy51Q29sb3JTdGFydCB9LFxuICAgICAgdUNvbG9yRW5kOiB7IHZhbHVlOiBvcHRpb25zLnVDb2xvckVuZCB9LFxuICAgIH0sXG4gICAgdmVydGV4U2hhZGVyOiBjb21tb25WZXJ0ZXhTaGFkZXIsXG4gICAgZnJhZ21lbnRTaGFkZXI6IHdpc2hpbmdXZWxsRnJhZ21lbnRTaGFkZXIsXG4gICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgZGVwdGhXcml0ZTogZmFsc2VcbiAgfSlcbiAgcmV0dXJuIE1hdGVyaWFsW2tleV1cbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCBOb2RlIGZyb20gJy4uL25vZGUnXG5pbXBvcnQgeyBnZXRSZXNvdXJjZXMgfSBmcm9tICdAL2Jhc2UvYWpheCdcbmltcG9ydCB7IGdldE1hdGNhcE1hdGVyaWFsIH0gZnJvbSAnQC9jb21tb24vbWF0ZXJpYWwnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvaW4gZXh0ZW5kcyBOb2Rle1xuICBjb25zdHJ1Y3RvcihvcHRpb24pIHtcbiAgICBzdXBlcihvcHRpb24pXG4gICAgY29uc3QgYm94ID0gZ2V0UmVzb3VyY2VzKCfnoazluIEnKVxuICAgIGJveC5tYXRlcmlhbCA9IGdldE1hdGNhcE1hdGVyaWFsKCcjZDVhZTM0JylcbiAgICB0aGlzLmFkZChib3gpXG4gICAgdGhpcy5jb2xsaXNpb25UeXBlID0gW05vZGUuQ29sbGlzaW9uVHlwZS5sZWdvXVxuICB9XG59XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgTm9kZSBmcm9tICcuLi9ub2RlJ1xuaW1wb3J0IHsgZ2V0UmVzb3VyY2VzIH0gZnJvbSAnQC9iYXNlL2FqYXgnXG5pbXBvcnQgeyBnZXRNYXRjYXBNYXRlcmlhbCwgZ2V0V2lzaGluZ1dlbGxNYXRlcmlhbCB9IGZyb20gJ0AvY29tbW9uL21hdGVyaWFsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaXNoaW5nV2VsbCBleHRlbmRzIE5vZGV7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbikge1xuICAgIHN1cGVyKG9wdGlvbilcbiAgICBjb25zdCBib3ggPSBnZXRSZXNvdXJjZXMoJ+iuuOaEv+axoCcpXG4gICAgYm94Lm1hdGVyaWFsWzBdID0gZ2V0TWF0Y2FwTWF0ZXJpYWwoJyNjZmM2YjgnKVxuICAgIGJveC5tYXRlcmlhbFsxXSA9IGdldFdpc2hpbmdXZWxsTWF0ZXJpYWwoe1xuICAgICAgdUNvbG9yU3RhcnQ6IG5ldyBUSFJFRS5Db2xvcignI2Y4ZjhmOCcpLFxuICAgICAgdUNvbG9yRW5kOiBuZXcgVEhSRUUuQ29sb3IoJyMyOGNjZGYnKSxcbiAgICB9KVxuICAgIHRoaXMuYWRkKGJveClcbiAgICB0aGlzLmNvbGxpc2lvblR5cGUgPSBbTm9kZS5Db2xsaXNpb25UeXBlLnZhc2VdXG4gIH1cbiAgLy8g5pu05pawXG4gIHVwZGF0ZSgpIHtcbiAgICBzdXBlci51cGRhdGUoKVxuICAgIGNvbnN0IHdhdGVyID0gdGhpcy5jaGlsZHJlblswXVxuICAgIHdhdGVyLm1hdGVyaWFsWzFdLnVuaWZvcm1zLnVUaW1lLnZhbHVlICs9IDAuMDRcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHdpc2hpbmdXZWxsRnJhZ21lbnRTaGFkZXIgPSBgXG4gIHZhcnlpbmcgdmVjMiB2VXY7XG4gIHVuaWZvcm0gZmxvYXQgdVRpbWU7XG4gIHVuaWZvcm0gdmVjMyB1Q29sb3JTdGFydDtcbiAgdW5pZm9ybSB2ZWMzIHVDb2xvckVuZDtcblxuICAvLyAgQ2xhc3NpYyBQZXJsaW4gM0QgTm9pc2UgXG4gIC8vICBieSBTdGVmYW4gR3VzdGF2c29uXG4gIC8vXG4gIHZlYzQgcGVybXV0ZSh2ZWM0IHgpeyByZXR1cm4gbW9kKCgoeCozNC4wKSsxLjApKngsIDI4OS4wKTsgfVxuICB2ZWM0IHRheWxvckludlNxcnQodmVjNCByKXsgcmV0dXJuIDEuNzkyODQyOTE0MDAxNTkgLSAwLjg1MzczNDcyMDk1MzE0ICogcjsgfVxuICB2ZWMzIGZhZGUodmVjMyB0KSB7IHJldHVybiB0KnQqdCoodCoodCo2LjAtMTUuMCkrMTAuMCk7IH1cblxuICBmbG9hdCBjbm9pc2UodmVjMyBQKSB7XG4gICAgICB2ZWMzIFBpMCA9IGZsb29yKFApOyAvLyBJbnRlZ2VyIHBhcnQgZm9yIGluZGV4aW5nXG4gICAgICB2ZWMzIFBpMSA9IFBpMCArIHZlYzMoMS4wKTsgLy8gSW50ZWdlciBwYXJ0ICsgMVxuICAgICAgUGkwID0gbW9kKFBpMCwgMjg5LjApO1xuICAgICAgUGkxID0gbW9kKFBpMSwgMjg5LjApO1xuICAgICAgdmVjMyBQZjAgPSBmcmFjdChQKTsgLy8gRnJhY3Rpb25hbCBwYXJ0IGZvciBpbnRlcnBvbGF0aW9uXG4gICAgICB2ZWMzIFBmMSA9IFBmMCAtIHZlYzMoMS4wKTsgLy8gRnJhY3Rpb25hbCBwYXJ0IC0gMS4wXG4gICAgICB2ZWM0IGl4ID0gdmVjNChQaTAueCwgUGkxLngsIFBpMC54LCBQaTEueCk7XG4gICAgICB2ZWM0IGl5ID0gdmVjNChQaTAueXksIFBpMS55eSk7XG4gICAgICB2ZWM0IGl6MCA9IFBpMC56enp6O1xuICAgICAgdmVjNCBpejEgPSBQaTEuenp6ejtcblxuICAgICAgdmVjNCBpeHkgPSBwZXJtdXRlKHBlcm11dGUoaXgpICsgaXkpO1xuICAgICAgdmVjNCBpeHkwID0gcGVybXV0ZShpeHkgKyBpejApO1xuICAgICAgdmVjNCBpeHkxID0gcGVybXV0ZShpeHkgKyBpejEpO1xuXG4gICAgICB2ZWM0IGd4MCA9IGl4eTAgLyA3LjA7XG4gICAgICB2ZWM0IGd5MCA9IGZyYWN0KGZsb29yKGd4MCkgLyA3LjApIC0gMC41O1xuICAgICAgZ3gwID0gZnJhY3QoZ3gwKTtcbiAgICAgIHZlYzQgZ3owID0gdmVjNCgwLjUpIC0gYWJzKGd4MCkgLSBhYnMoZ3kwKTtcbiAgICAgIHZlYzQgc3owID0gc3RlcChnejAsIHZlYzQoMC4wKSk7XG4gICAgICBneDAgLT0gc3owICogKHN0ZXAoMC4wLCBneDApIC0gMC41KTtcbiAgICAgIGd5MCAtPSBzejAgKiAoc3RlcCgwLjAsIGd5MCkgLSAwLjUpO1xuXG4gICAgICB2ZWM0IGd4MSA9IGl4eTEgLyA3LjA7XG4gICAgICB2ZWM0IGd5MSA9IGZyYWN0KGZsb29yKGd4MSkgLyA3LjApIC0gMC41O1xuICAgICAgZ3gxID0gZnJhY3QoZ3gxKTtcbiAgICAgIHZlYzQgZ3oxID0gdmVjNCgwLjUpIC0gYWJzKGd4MSkgLSBhYnMoZ3kxKTtcbiAgICAgIHZlYzQgc3oxID0gc3RlcChnejEsIHZlYzQoMC4wKSk7XG4gICAgICBneDEgLT0gc3oxICogKHN0ZXAoMC4wLCBneDEpIC0gMC41KTtcbiAgICAgIGd5MSAtPSBzejEgKiAoc3RlcCgwLjAsIGd5MSkgLSAwLjUpO1xuXG4gICAgICB2ZWMzIGcwMDAgPSB2ZWMzKGd4MC54LGd5MC54LGd6MC54KTtcbiAgICAgIHZlYzMgZzEwMCA9IHZlYzMoZ3gwLnksZ3kwLnksZ3owLnkpO1xuICAgICAgdmVjMyBnMDEwID0gdmVjMyhneDAueixneTAueixnejAueik7XG4gICAgICB2ZWMzIGcxMTAgPSB2ZWMzKGd4MC53LGd5MC53LGd6MC53KTtcbiAgICAgIHZlYzMgZzAwMSA9IHZlYzMoZ3gxLngsZ3kxLngsZ3oxLngpO1xuICAgICAgdmVjMyBnMTAxID0gdmVjMyhneDEueSxneTEueSxnejEueSk7XG4gICAgICB2ZWMzIGcwMTEgPSB2ZWMzKGd4MS56LGd5MS56LGd6MS56KTtcbiAgICAgIHZlYzMgZzExMSA9IHZlYzMoZ3gxLncsZ3kxLncsZ3oxLncpO1xuXG4gICAgICB2ZWM0IG5vcm0wID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAwLCBnMDAwKSwgZG90KGcwMTAsIGcwMTApLCBkb3QoZzEwMCwgZzEwMCksIGRvdChnMTEwLCBnMTEwKSkpO1xuICAgICAgZzAwMCAqPSBub3JtMC54O1xuICAgICAgZzAxMCAqPSBub3JtMC55O1xuICAgICAgZzEwMCAqPSBub3JtMC56O1xuICAgICAgZzExMCAqPSBub3JtMC53O1xuICAgICAgdmVjNCBub3JtMSA9IHRheWxvckludlNxcnQodmVjNChkb3QoZzAwMSwgZzAwMSksIGRvdChnMDExLCBnMDExKSwgZG90KGcxMDEsIGcxMDEpLCBkb3QoZzExMSwgZzExMSkpKTtcbiAgICAgIGcwMDEgKj0gbm9ybTEueDtcbiAgICAgIGcwMTEgKj0gbm9ybTEueTtcbiAgICAgIGcxMDEgKj0gbm9ybTEuejtcbiAgICAgIGcxMTEgKj0gbm9ybTEudztcblxuICAgICAgZmxvYXQgbjAwMCA9IGRvdChnMDAwLCBQZjApO1xuICAgICAgZmxvYXQgbjEwMCA9IGRvdChnMTAwLCB2ZWMzKFBmMS54LCBQZjAueXopKTtcbiAgICAgIGZsb2F0IG4wMTAgPSBkb3QoZzAxMCwgdmVjMyhQZjAueCwgUGYxLnksIFBmMC56KSk7XG4gICAgICBmbG9hdCBuMTEwID0gZG90KGcxMTAsIHZlYzMoUGYxLnh5LCBQZjAueikpO1xuICAgICAgZmxvYXQgbjAwMSA9IGRvdChnMDAxLCB2ZWMzKFBmMC54eSwgUGYxLnopKTtcbiAgICAgIGZsb2F0IG4xMDEgPSBkb3QoZzEwMSwgdmVjMyhQZjEueCwgUGYwLnksIFBmMS56KSk7XG4gICAgICBmbG9hdCBuMDExID0gZG90KGcwMTEsIHZlYzMoUGYwLngsIFBmMS55eikpO1xuICAgICAgZmxvYXQgbjExMSA9IGRvdChnMTExLCBQZjEpO1xuXG4gICAgICB2ZWMzIGZhZGVfeHl6ID0gZmFkZShQZjApO1xuICAgICAgdmVjNCBuX3ogPSBtaXgodmVjNChuMDAwLCBuMTAwLCBuMDEwLCBuMTEwKSwgdmVjNChuMDAxLCBuMTAxLCBuMDExLCBuMTExKSwgZmFkZV94eXoueik7XG4gICAgICB2ZWMyIG5feXogPSBtaXgobl96Lnh5LCBuX3ouencsIGZhZGVfeHl6LnkpO1xuICAgICAgZmxvYXQgbl94eXogPSBtaXgobl95ei54LCBuX3l6LnksIGZhZGVfeHl6LngpOyBcblxuICAgICAgcmV0dXJuIDIuMiAqIG5feHl6O1xuICB9XG5cbiAgdm9pZCBtYWluKCl7XG4gICAgdmVjMiBkaXNwbGFjZWRVdiA9IHZVdiArIGNub2lzZSh2ZWMzKHZVdiAqIDUuMCwgdVRpbWUgKiAwLjEpKTtcblxuICAgIGZsb2F0IHN0cmVuZ3RoID0gY25vaXNlKHZlYzMoZGlzcGxhY2VkVXYgKiA1LjAsIHVUaW1lICogMC4yKSk7XG4gICAgXG4gICAgZmxvYXQgb3V0ZXJHbG93ID0gZGlzdGFuY2UodlV2LCB2ZWMyKDAuNSkpICogNS4wIC0gMS40O1xuICAgIHN0cmVuZ3RoICs9IG91dGVyR2xvdztcblxuICAgIHN0cmVuZ3RoICs9IHN0ZXAoLTAuMiwgc3RyZW5ndGgpICogMC44O1xuXG4gICAgdmVjMyBtaXhlZENvbG9yID0gbWl4KHVDb2xvclN0YXJ0LCB1Q29sb3JFbmQsIHN0cmVuZ3RoKTtcblxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQobWl4ZWRDb2xvciwgMS4wKTtcbiAgfVxuYCIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCBOb2RlIGZyb20gJy4uL25vZGUnXG5pbXBvcnQgeyBnZXRSZXNvdXJjZXMgfSBmcm9tICdAL2Jhc2UvYWpheCdcbmltcG9ydCB7IGdldE1hdGNhcE1hdGVyaWFsIH0gZnJvbSAnQC9jb21tb24vbWF0ZXJpYWwnXG5pbXBvcnQgQ2hhb3MgZnJvbSAnQC9iYXNlL2NoYW9zJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmFzcyBleHRlbmRzIE5vZGV7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbikge1xuICAgIHN1cGVyKG9wdGlvbilcbiAgICBjb25zdCBncmFzcyA9IGdldFJlc291cmNlcygn6I2JJylcbiAgICBncmFzcy5tYXRlcmlhbFswXSA9IGdldE1hdGNhcE1hdGVyaWFsKCcjYjZkNTNjJylcbiAgICBncmFzcy5tYXRlcmlhbFsxXSA9IGdldE1hdGNhcE1hdGVyaWFsKCcjYmY3OTU4JylcbiAgICB0aGlzLmFkZChncmFzcylcbiAgfVxuICAvLyDliJvlu7pcbiAgY3JlYXRlKCkge1xuICB9XG4gIC8vIOmUgOavgVxuICBkZXN0cm95KCkge1xuICB9XG59XG4iLCJpbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5pbXBvcnQgTm9kZSBmcm9tICcuLi9ub2RlJ1xuaW1wb3J0IHsgZ2V0UmVzb3VyY2VzIH0gZnJvbSAnQC9iYXNlL2FqYXgnXG5pbXBvcnQgeyBnZXRNYXRjYXBNYXRlcmlhbCB9IGZyb20gJ0AvY29tbW9uL21hdGVyaWFsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaGl0ZWJvYXJkIGV4dGVuZHMgTm9kZXtcbiAgY29uc3RydWN0b3Iob3B0aW9uKSB7XG4gICAgc3VwZXIob3B0aW9uKVxuICAgIGNvbnN0IGJveCA9IGdldFJlc291cmNlcygn5Z2XJylcbiAgICBib3gubWF0ZXJpYWwgPSBnZXRNYXRjYXBNYXRlcmlhbCgnI2ZmZmZmZicpXG4gICAgdGhpcy5hZGQoYm94KVxuICAgIHRoaXMuY29sbGlzaW9uVHlwZSA9IFtOb2RlLkNvbGxpc2lvblR5cGUuZmxvb3IsIE5vZGUuQ29sbGlzaW9uVHlwZS5jZWlsaW5nXVxuICB9XG4gIC8vIOWIm+W7ulxuICBjcmVhdGUoKSB7XG4gIH1cbiAgLy8g6ZSA5q+BXG4gIGRlc3Ryb3koKSB7XG4gIH1cbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCB7IGdldFRpbWVzdGFtcCwgZ2V0Q2FtZXJhRGlyZWN0aW9uIH0gZnJvbSAnQC9jb21tb24vdXRpbHMnXG5pbXBvcnQgQ2hhb3MgZnJvbSAnQC9iYXNlL2NoYW9zJ1xuXG4vLyBjb25zdCBnZXRQaXhlbFJhdGlvID0gc2l6ZSA9PiBDaGFvcy5oZWlnaHQgKiBzaXplIC8gQ2hhb3MuaGVpZ2h0XG5jb25zdCBnZXRQaXhlbFJhdGlvID0gc2l6ZSA9PiBzaXplICogQ2hhb3Mud2lkdGggLyAzNzVcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVWkgZXh0ZW5kcyBUSFJFRS5PYmplY3QzRCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbiA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMueCA9IG9wdGlvbi54IHx8IDBcbiAgICB0aGlzLnkgPSBvcHRpb24ueSB8fCAwXG4gICAgdGhpcy5pc0N1c3RvbSA9IHRydWVcbiAgICB0aGlzLmlzVWkgPSB0cnVlXG4gICAgdGhpcy56SW5kZXggPSAwXG4gIH1cbiAgLy8g5Yib5bu6XG4gIGNyZWF0ZSgpIHtcbiAgfVxuICAvLyDplIDmr4FcbiAgZGVzdHJveSgpIHtcbiAgfVxuICAvLyDmm7TmlrBcbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IGNwID0gQ2hhb3MuY2FtZXJhXG4gICAgY29uc3Qgem9vbSA9IDEgLyBDaGFvcy5jYW1lcmEuem9vbVxuICAgIHRoaXMucG9zaXRpb24uY29weShjcC5wb3NpdGlvbilcbiAgICB0aGlzLnJvdGF0aW9uLmNvcHkoY3Aucm90YXRpb24pXG4gICAgdGhpcy5zY2FsZS5zZXQoem9vbSwgem9vbSwgem9vbSlcbiAgICB0aGlzLnRyYW5zbGF0ZVooLTEwMClcbiAgICB0aGlzLnRyYW5zbGF0ZVgodGhpcy54ICogem9vbSlcbiAgICB0aGlzLnRyYW5zbGF0ZVkodGhpcy55ICogem9vbSlcbiAgICB0aGlzLnVwZGF0ZU1hdHJpeCgpXG4gIH1cbiAgdG91Y2hzdGFydChlKSB7XG4gICAgQ2hhb3MucHJldmVudERlZmF1bHQoKVxuICB9XG4gIHRvdWNobW92ZShlKSB7XG4gICAgQ2hhb3MucHJldmVudERlZmF1bHQoKVxuICB9XG4gIHRvdWNoZW5kKGUpIHtcbiAgICBDaGFvcy5wcmV2ZW50RGVmYXVsdCgpXG4gIH1cbiAgY2xpY2soZSkge1xuICAgIENoYW9zLnByZXZlbnREZWZhdWx0KClcbiAgfVxufVxuIiwiaW1wb3J0IENvaW4gZnJvbSAnLi9iYXNlL2NvaW4nXG5pbXBvcnQgV2lzaGluZ1dlbGwgZnJvbSAnLi9iYXNlL3dpc2hpbmdXZWxsJ1xuXG5pbXBvcnQgR3Jhc3MgZnJvbSAnLi9ib3gvZ3Jhc3MnXG5pbXBvcnQgV2hpdGVib2FyZCBmcm9tICcuL2JveC93aGl0ZWJvYXJkJ1xuXG5pbXBvcnQgU2t5U3dpdGNoIGZyb20gJy4vdWkvc2t5U3dpdGNoJ1xuaW1wb3J0IEFyb3VuZCBmcm9tICcuL3VpL2Fyb3VuZCdcblxuZXhwb3J0IGRlZmF1bHQge1xuICBDb2luLFxuICBXaXNoaW5nV2VsbCxcblxuICBHcmFzcyxcbiAgV2hpdGVib2FyZCxcblxuICBTa3lTd2l0Y2gsXG4gIEFyb3VuZCxcbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgVEhSRUUgfSBmcm9tICdAL2Jhc2UvbGlicy9UaHJlZSdcbmltcG9ydCBVaSBmcm9tICcuLi91aSdcbmltcG9ydCBDaGFvcyBmcm9tICdAL2Jhc2UvY2hhb3MnXG5pbXBvcnQgeyBhbmltYXRpb24sIGNsZWFyQW5pbWF0aW9uIH0gZnJvbSAnQC9jb21tb24vYW5pbWF0aW9uJ1xuaW1wb3J0IHsgZ2V0VWlNYXRlcmlhbCwgZ2V0VHJhbnNwYXJlbnRNYXRlcmlhbCB9IGZyb20gJ0AvY29tbW9uL21hdGVyaWFsJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTa3lTd2l0Y2ggZXh0ZW5kcyBVaSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbikge1xuICAgIHN1cGVyKG9wdGlvbilcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg1MCwgNTAsIDUwKVxuICAgIGNvbnN0IHNwcml0ZSA9IG5ldyBUSFJFRS5NZXNoKGdlb21ldHJ5LCBnZXRUcmFuc3BhcmVudE1hdGVyaWFsKCkpXG4gICAgdGhpcy5hZGQoc3ByaXRlKVxuXG4gICAgdGhpcy54ID0gLTEwMFxuICAgIHRoaXMueSA9IC1DaGFvcy5oZWlnaHQgLyAyICsgNTBcbiAgICBnZXRVaU1hdGVyaWFsKCcuL3RleHR1cmUvc2t5U3dpdGNoLnBuZycsIHtcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlXG4gICAgfSkudGhlbihtYXRlcmlhbCA9PiB7XG4gICAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDYwLCA2MClcbiAgICAgIGNvbnN0IHBsYW5lID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG1hdGVyaWFsKVxuICAgICAgdGhpcy5hZGQocGxhbmUpXG4gICAgfSlcbiAgfVxuICB0b3VjaHN0YXJ0KGUpIHtcbiAgICB0aGlzLmFuaW1hdGlvbmVyICYmIGNsZWFyQW5pbWF0aW9uKHRoaXMuYW5pbWF0aW9uZXIpXG4gICAgY29uc3Qgc3ByaXRlID0gdGhpcy5jaGlsZHJlblsxXVxuICAgIGlmIChzcHJpdGUpIHtcbiAgICAgIHNwcml0ZS5tYXRlcmlhbC5vcGFjaXR5ID0gMC42OFxuICAgIH1cbiAgfVxuICB0b3VjaGVuZChlKSB7XG4gICAgY29uc3Qgc3ByaXRlID0gdGhpcy5jaGlsZHJlblsxXVxuICAgIGlmIChzcHJpdGUpIHtcbiAgICAgIHNwcml0ZS5tYXRlcmlhbC5vcGFjaXR5ID0gMVxuICAgICAgdGhpcy5hbmltYXRpb25lciA9IGFuaW1hdGlvbigwLjYsIDEsIDgwMCwgJ0VsYXN0aWMuZWFzZU91dCcsIHYgPT4ge1xuICAgICAgICBzcHJpdGUuc2NhbGUuc2V0KHYsIHYsIDEpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBjbGljaygpIHtcbiAgICBpZiAoQ2hhb3Muc2t5KSBDaGFvcy5za3kuc3dpdGNoKClcbiAgfVxufVxuIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBUSFJFRSB9IGZyb20gJ0AvYmFzZS9saWJzL1RocmVlJ1xuaW1wb3J0IFVpIGZyb20gJy4uL3VpJ1xuaW1wb3J0IENoYW9zIGZyb20gJ0AvYmFzZS9jaGFvcydcbmltcG9ydCB7IGFuaW1hdGlvbiwgY2xlYXJBbmltYXRpb24gfSBmcm9tICdAL2NvbW1vbi9hbmltYXRpb24nXG5pbXBvcnQgeyBnZXRVaU1hdGVyaWFsLCBnZXRUcmFuc3BhcmVudE1hdGVyaWFsIH0gZnJvbSAnQC9jb21tb24vbWF0ZXJpYWwnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyb3VuZCBleHRlbmRzIFVpIHtcbiAgY29uc3RydWN0b3Iob3B0aW9uKSB7XG4gICAgc3VwZXIob3B0aW9uKVxuICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDUwLCA1MCwgNTApXG4gICAgY29uc3Qgc3ByaXRlID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIGdldFRyYW5zcGFyZW50TWF0ZXJpYWwoKSlcbiAgICB0aGlzLmFkZChzcHJpdGUpXG5cbiAgICB0aGlzLnggPSAwXG4gICAgdGhpcy55ID0gLUNoYW9zLmhlaWdodCAvIDIgKyA1MFxuICAgIGdldFVpTWF0ZXJpYWwoJy4vdGV4dHVyZS9hcm91bmQucG5nJywge1xuICAgICAgdHJhbnNwYXJlbnQ6IHRydWVcbiAgICB9KS50aGVuKG1hdGVyaWFsID0+IHtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoNjAsIDYwKVxuICAgICAgY29uc3QgcGxhbmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG4gICAgICB0aGlzLmFkZChwbGFuZSlcbiAgICB9KVxuICB9XG4gIHRvdWNoc3RhcnQoZSkge1xuICAgIHRoaXMuYW5pbWF0aW9uZXIgJiYgY2xlYXJBbmltYXRpb24odGhpcy5hbmltYXRpb25lcilcbiAgICBjb25zdCBzcHJpdGUgPSB0aGlzLmNoaWxkcmVuWzFdXG4gICAgaWYgKHNwcml0ZSkge1xuICAgICAgc3ByaXRlLm1hdGVyaWFsLm9wYWNpdHkgPSAwLjY4XG4gICAgfVxuICB9XG4gIHRvdWNoZW5kKGUpIHtcbiAgICBjb25zdCBzcHJpdGUgPSB0aGlzLmNoaWxkcmVuWzFdXG4gICAgaWYgKHNwcml0ZSkge1xuICAgICAgc3ByaXRlLm1hdGVyaWFsLm9wYWNpdHkgPSAxXG4gICAgICB0aGlzLmFuaW1hdGlvbmVyID0gYW5pbWF0aW9uKDAsIDEsIDgwMCwgJ0N1YmljLmVhc2VPdXQnLCB2ID0+IHtcbiAgICAgICAgc3ByaXRlLnJvdGF0aW9uLnogPSAtMiAqIHYgKiBNYXRoLlBJXG4gICAgICB9KVxuICAgIH1cbiAgfVxuICBjbGljaygpIHtcbiAgICBzdXBlci5jbGljaygpXG4gICAgaWYgKENoYW9zLnNlbGVjdElkKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbmVyMiAmJiBjbGVhckFuaW1hdGlvbih0aGlzLmFuaW1hdGlvbmVyMilcbiAgICAgIGNvbnN0IGFuaXMgPSBbXVxuICAgICAgY29uc3QgdCA9IC1NYXRoLlBJIC8gMlxuICAgICAgQ2hhb3Muc2VsZWN0ZWRPYmplY3RzLmZvckVhY2gobWVzaCA9PiB7XG4gICAgICAgIGxldCBmcm9tID0gbWVzaC5yb3RhdGlvbi55XG4gICAgICAgIGxldCB0byA9IHQgKiBNYXRoLmNlaWwoZnJvbSAvIHQpICsgdFxuICAgICAgICBpZiAoTWF0aC5hYnMoZnJvbSkgPiBNYXRoLmFicyh0ICogNCkpIHtcbiAgICAgICAgICBmcm9tIC09IHQgKiA4XG4gICAgICAgICAgdG8gLT0gdCAqIDhcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3ogPSB0byAtIGZyb21cbiAgICAgICAgYW5pcy5wdXNoKHsgbWVzaCwgZnJvbSwgdG8sIGN6IH0pXG4gICAgICB9KVxuICAgICAgdGhpcy5hbmltYXRpb25lcjIgPSBhbmltYXRpb24oMCwgMSwgODAwLCAnQ3ViaWMuZWFzZU91dCcsIHYgPT4ge1xuICAgICAgICBhbmlzLmZvckVhY2goYW5pID0+IHtcbiAgICAgICAgICBhbmkubWVzaC5yb3RhdGlvbi55ID0gYW5pLmZyb20gKyB2ICogYW5pLmN6XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICcuL2FkYXB0ZXIvaW5kZXgnXG5pbXBvcnQgY2hhb3MgZnJvbSAnQC9iYXNlL2NoYW9zJ1xuaW1wb3J0IHsgZ2V0T2JqVG9Kc29uIH0gZnJvbSAnQC9iYXNlL2V4dGVuZHMvT2JqSnNvbkxvYWRlcidcbmltcG9ydCB7IFJlc291cmNlcywgZG93bkxvYWQgfSBmcm9tICdAL2Jhc2UvYWpheCdcbmltcG9ydCBDb21wcyBmcm9tICcuL2NvbXBvbmVudHMvaW5kZXgnXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRIUkVFIH0gZnJvbSAnQC9iYXNlL2xpYnMvVGhyZWUnXG5cbmNoYW9zLnN0YXJ0KClcbi8vIGdldE9ialRvSnNvbignLi9vYmovZGF0YS5vYmonKVxuZG93bkxvYWQoJy4vanNvbi9kYXRhLm8uanNvbicpLnRoZW4ocmVzID0+IHtcbiAgY29uc3QgY2hpbGRyZW4gPSByZXMuY2hpbGRyZW5cbiAgY2hpbGRyZW4uZm9yRWFjaChpdGVtID0+IHtcbiAgICAvLyBpdGVtLmdlb21ldHJ5LmNlbnRlcigpXG4gICAgUmVzb3VyY2VzW2l0ZW0ubmFtZV0gPSBpdGVtXG4gICAgaXRlbS50cmF2ZXJzZShjaGlsZCA9PiB7XG4gICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUSFJFRS5NZXNoKSB7XG4gICAgICAgIGNoaWxkLmNhc3RTaGFkb3cgPSB0cnVlXG4gICAgICAgIGNoaWxkLnJlY2VpdmVTaGFkb3cgPSB0cnVlXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbiAgbmV3R2FtZUJ0bigpXG59KVxuXG5jb25zdCBuZXdHYW1lQnRuID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBncmlkU2l6ZSA9IGNoYW9zLmdyaWRTaXplXG4gIGNvbnN0IGdyaWQgPSBncmlkU2l6ZSAvIDJcbiAgY29uc3QgbGVuID0gZ3JpZCAqIGdyaWRcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IHggPSAoaSAlIGdyaWQgLSAyKSAqIGdyaWRTaXplXG4gICAgY29uc3QgeiA9IChNYXRoLmZsb29yKGkgLyBncmlkKSAtIDIpICogZ3JpZFNpemVcbiAgICBjb25zdCBpdGVtID0gbmV3IENvbXBzLldoaXRlYm9hcmQoe1xuICAgICAgcG9zaXRpb246IG5ldyBUSFJFRS5WZWN0b3IzKHgsIDAsIHopXG4gICAgfSlcbiAgICBpdGVtLm5hbWUgPSBgaXRlbV8ke2l9YFxuICAgIGNoYW9zLnNjZW5lLmFkZChpdGVtKVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XG4gICAgY29uc3QgeCA9IChpICUgZ3JpZCAtIDIpICogZ3JpZFNpemVcbiAgICBjb25zdCBjb2luID0gbmV3IENvbXBzLkNvaW4oe1xuICAgICAgcG9zaXRpb246IG5ldyBUSFJFRS5WZWN0b3IzKHgsIDUsIDApXG4gICAgfSlcbiAgICBjb2luLm5hbWUgPSBgY29pbiR7aX1gXG4gICAgY2hhb3Muc2NlbmUuYWRkKGNvaW4pXG4gIH1cbiAgY29uc3Qgd2lzaGluZ1dlbGwgPSBuZXcgQ29tcHMuV2lzaGluZ1dlbGwoe1xuICAgIHBvc2l0aW9uOiBuZXcgVEhSRUUuVmVjdG9yMygwLCA2LjI5LCAwKVxuICB9KVxuICB3aXNoaW5nV2VsbC5uYW1lID0gYHdpc2hpbmdXZWxsYFxuICBjaGFvcy5zY2VuZS5hZGQod2lzaGluZ1dlbGwpXG59XG5cbmNoYW9zLnNjZW5lLmFkZChuZXcgQ29tcHMuU2t5U3dpdGNoKCkpXG5jaGFvcy5zY2VuZS5hZGQobmV3IENvbXBzLkFyb3VuZCgpKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==